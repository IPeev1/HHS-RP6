
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000148e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000148e  00001522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800066  00800066  00001528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c7  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  00001ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a5  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< Updated upstream
 10 .debug_str    000005a7  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000538  00000000  00000000  000033df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003917  2**0
=======
 10 .debug_str    0000050d  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000538  00000000  00000000  00003211  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003749  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_1>
       8:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 05 	call	0xb86	; 0xb86 <main>
      8a:	0c 94 45 0a 	jmp	0x148a	; 0x148a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <driveSpeed>:
	return 0;							//If going backwards or standing still
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
      92:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <globalDriveDirection>
      96:	88 23       	and	r24, r24
      98:	31 f0       	breq	.+12     	; 0xa6 <driveSpeed+0x14>
      9a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <globalDriveThrottle>
      9e:	08 2e       	mov	r0, r24
      a0:	00 0c       	add	r0, r0
      a2:	99 0b       	sbc	r25, r25
      a4:	08 95       	ret
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	08 95       	ret

000000ac <driveDirection>:
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <globalDriveDirection>
      b4:	21 30       	cpi	r18, 0x01	; 1
      b6:	11 f0       	breq	.+4      	; 0xbc <driveDirection+0x10>
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	08 95       	ret

000000be <init_LED>:
}


void init_LED(){
	DDRB |= 0b10000011;
      be:	87 b3       	in	r24, 0x17	; 23
      c0:	83 68       	ori	r24, 0x83	; 131
      c2:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      c4:	84 b3       	in	r24, 0x14	; 20
      c6:	80 67       	ori	r24, 0x70	; 112
      c8:	84 bb       	out	0x14, r24	; 20
      ca:	08 95       	ret

000000cc <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      cc:	83 b7       	in	r24, 0x33	; 51
      ce:	81 60       	ori	r24, 0x01	; 1
      d0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      d2:	83 b7       	in	r24, 0x33	; 51
      d4:	82 60       	ori	r24, 0x02	; 2
      d6:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      d8:	89 b7       	in	r24, 0x39	; 57
      da:	81 60       	ori	r24, 0x01	; 1
      dc:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      de:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      e0:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <t0TotalOverflow>
      e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <t0TotalOverflow+0x1>
      e8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <t0TotalOverflow+0x2>
      ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <t0TotalOverflow+0x3>
      f0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <t0TotalOverflow+0x4>
      f4:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <t0TotalOverflow+0x5>
      f8:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <t0TotalOverflow+0x6>
      fc:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <t0TotalOverflow+0x7>
     100:	08 95       	ret

00000102 <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	2f 93       	push	r18
     10e:	3f 93       	push	r19
     110:	4f 93       	push	r20
     112:	5f 93       	push	r21
     114:	6f 93       	push	r22
     116:	7f 93       	push	r23
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
     11e:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <t0TotalOverflow>
     122:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <t0TotalOverflow+0x1>
     126:	40 91 89 00 	lds	r20, 0x0089	; 0x800089 <t0TotalOverflow+0x2>
     12a:	50 91 8a 00 	lds	r21, 0x008A	; 0x80008a <t0TotalOverflow+0x3>
     12e:	60 91 8b 00 	lds	r22, 0x008B	; 0x80008b <t0TotalOverflow+0x4>
     132:	70 91 8c 00 	lds	r23, 0x008C	; 0x80008c <t0TotalOverflow+0x5>
     136:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <t0TotalOverflow+0x6>
     13a:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <t0TotalOverflow+0x7>
     13e:	a1 e0       	ldi	r26, 0x01	; 1
     140:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__adddi3_s8>
     144:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <t0TotalOverflow>
     148:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <t0TotalOverflow+0x1>
     14c:	40 93 89 00 	sts	0x0089, r20	; 0x800089 <t0TotalOverflow+0x2>
     150:	50 93 8a 00 	sts	0x008A, r21	; 0x80008a <t0TotalOverflow+0x3>
     154:	60 93 8b 00 	sts	0x008B, r22	; 0x80008b <t0TotalOverflow+0x4>
     158:	70 93 8c 00 	sts	0x008C, r23	; 0x80008c <t0TotalOverflow+0x5>
     15c:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <t0TotalOverflow+0x6>
     160:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <t0TotalOverflow+0x7>
}
     164:	af 91       	pop	r26
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	7f 91       	pop	r23
     16c:	6f 91       	pop	r22
     16e:	5f 91       	pop	r21
     170:	4f 91       	pop	r20
     172:	3f 91       	pop	r19
     174:	2f 91       	pop	r18
     176:	0f 90       	pop	r0
     178:	0f be       	out	0x3f, r0	; 63
     17a:	0f 90       	pop	r0
     17c:	1f 90       	pop	r1
     17e:	18 95       	reti

00000180 <micros>:


uint64_t micros(){
     180:	af 92       	push	r10
     182:	bf 92       	push	r11
     184:	cf 92       	push	r12
     186:	df 92       	push	r13
     188:	ef 92       	push	r14
     18a:	ff 92       	push	r15
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     190:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     192:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <t0TotalOverflow>
     196:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <t0TotalOverflow+0x1>
     19a:	40 91 89 00 	lds	r20, 0x0089	; 0x800089 <t0TotalOverflow+0x2>
     19e:	50 91 8a 00 	lds	r21, 0x008A	; 0x80008a <t0TotalOverflow+0x3>
     1a2:	60 91 8b 00 	lds	r22, 0x008B	; 0x80008b <t0TotalOverflow+0x4>
     1a6:	70 91 8c 00 	lds	r23, 0x008C	; 0x80008c <t0TotalOverflow+0x5>
     1aa:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <t0TotalOverflow+0x6>
     1ae:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     1b2:	e0 e0       	ldi	r30, 0x00	; 0
     1b4:	fa 2f       	mov	r31, r26
     1b6:	ff 0f       	add	r31, r31
     1b8:	ff 0f       	add	r31, r31
     1ba:	ff 0f       	add	r31, r31
     1bc:	ff 23       	and	r31, r31
     1be:	14 f4       	brge	.+4      	; 0x1c4 <micros+0x44>
     1c0:	e1 50       	subi	r30, 0x01	; 1
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	ef 2f       	mov	r30, r31
     1c6:	ee 0f       	add	r30, r30
     1c8:	ee 0b       	sbc	r30, r30
     1ca:	0b e0       	ldi	r16, 0x0B	; 11
     1cc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ashldi3>
     1d0:	a2 2e       	mov	r10, r18
     1d2:	b3 2e       	mov	r11, r19
     1d4:	c4 2e       	mov	r12, r20
     1d6:	d5 2e       	mov	r13, r21
     1d8:	e6 2e       	mov	r14, r22
     1da:	f7 2e       	mov	r15, r23
     1dc:	08 2f       	mov	r16, r24
     1de:	19 2f       	mov	r17, r25
     1e0:	2f 2f       	mov	r18, r31
     1e2:	3e 2f       	mov	r19, r30
     1e4:	4e 2f       	mov	r20, r30
     1e6:	5e 2f       	mov	r21, r30
     1e8:	6e 2f       	mov	r22, r30
     1ea:	7e 2f       	mov	r23, r30
     1ec:	8e 2f       	mov	r24, r30
     1ee:	9e 2f       	mov	r25, r30
     1f0:	0e 94 03 0a 	call	0x1406	; 0x1406 <__adddi3>
}
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	af 90       	pop	r10
     204:	08 95       	ret

00000206 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     206:	81 b3       	in	r24, 0x11	; 17
     208:	80 63       	ori	r24, 0x30	; 48
     20a:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     20c:	81 b3       	in	r24, 0x11	; 17
     20e:	83 7f       	andi	r24, 0xF3	; 243
     210:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     212:	84 b3       	in	r24, 0x14	; 20
     214:	8c 60       	ori	r24, 0x0C	; 12
     216:	84 bb       	out	0x14, r24	; 20
     218:	08 95       	ret

0000021a <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     21a:	8f b5       	in	r24, 0x2f	; 47
     21c:	80 68       	ori	r24, 0x80	; 128
     21e:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     220:	8f b5       	in	r24, 0x2f	; 47
     222:	80 62       	ori	r24, 0x20	; 32
     224:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     226:	8f b5       	in	r24, 0x2f	; 47
     228:	82 60       	ori	r24, 0x02	; 2
     22a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     22c:	8e b5       	in	r24, 0x2e	; 46
     22e:	80 61       	ori	r24, 0x10	; 16
     230:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     232:	8e b5       	in	r24, 0x2e	; 46
     234:	81 60       	ori	r24, 0x01	; 1
     236:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     238:	8f ef       	ldi	r24, 0xFF	; 255
     23a:	99 ef       	ldi	r25, 0xF9	; 249
     23c:	97 bd       	out	0x27, r25	; 39
     23e:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     240:	1b bc       	out	0x2b, r1	; 43
     242:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     244:	19 bc       	out	0x29, r1	; 41
     246:	18 bc       	out	0x28, r1	; 40
     248:	08 95       	ret

0000024a <init_motor_encoder>:
}


void init_motor_encoder(){
	motorEncoderLVal = 0;						//Reset the motor encoder variable
     24a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <motorEncoderLVal+0x1>
     24e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <motorEncoderLVal>
	motorEncoderRVal = 0;						//---^
     252:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <motorEncoderRVal+0x1>
     256:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <motorEncoderRVal>
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     25a:	85 b7       	in	r24, 0x35	; 53
     25c:	81 60       	ori	r24, 0x01	; 1
     25e:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     260:	85 b7       	in	r24, 0x35	; 53
     262:	84 60       	ori	r24, 0x04	; 4
     264:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     266:	8b b7       	in	r24, 0x3b	; 59
     268:	80 64       	ori	r24, 0x40	; 64
     26a:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     26c:	8b b7       	in	r24, 0x3b	; 59
     26e:	80 68       	ori	r24, 0x80	; 128
     270:	8b bf       	out	0x3b, r24	; 59
     272:	08 95       	ret

00000274 <init_motor>:
	return microsReturnValue;																						//Return the calculated value
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     274:	0e 94 03 01 	call	0x206	; 0x206 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     278:	0e 94 0d 01 	call	0x21a	; 0x21a <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     27c:	0e 94 25 01 	call	0x24a	; 0x24a <init_motor_encoder>
     280:	08 95       	ret

00000282 <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	0f 92       	push	r0
     28a:	11 24       	eor	r1, r1
     28c:	8f 93       	push	r24
     28e:	9f 93       	push	r25
	motorEncoderLVal++;							//Increase the encoder variable
     290:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <motorEncoderLVal>
     294:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <motorEncoderLVal+0x1>
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <motorEncoderLVal+0x1>
     29e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <motorEncoderLVal>
}
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <__vector_2>:


ISR(INT1_vect){
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
	motorEncoderRVal++;							//Increase the encoder variable
     2be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <motorEncoderRVal>
     2c2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <motorEncoderRVal+0x1>
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <motorEncoderRVal+0x1>
     2cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <motorEncoderRVal>
}
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     2de:	89 2b       	or	r24, r25
     2e0:	39 f0       	breq	.+14     	; 0x2f0 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     2e2:	8b b7       	in	r24, 0x3b	; 59
     2e4:	80 64       	ori	r24, 0x40	; 64
     2e6:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     2e8:	8b b7       	in	r24, 0x3b	; 59
     2ea:	80 68       	ori	r24, 0x80	; 128
     2ec:	8b bf       	out	0x3b, r24	; 59
     2ee:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     2f0:	8b b7       	in	r24, 0x3b	; 59
     2f2:	8f 7b       	andi	r24, 0xBF	; 191
     2f4:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     2f6:	8b b7       	in	r24, 0x3b	; 59
     2f8:	8f 77       	andi	r24, 0x7F	; 127
     2fa:	8b bf       	out	0x3b, r24	; 59
     2fc:	08 95       	ret

000002fe <motorDriver>:
	}
}


int motorDriver(int64_t driveSpeed, int driveDirection, int turnDirection){
     2fe:	2f 92       	push	r2
     300:	3f 92       	push	r3
     302:	4f 92       	push	r4
     304:	5f 92       	push	r5
     306:	6f 92       	push	r6
     308:	7f 92       	push	r7
     30a:	8f 92       	push	r8
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	67 97       	sbiw	r28, 0x17	; 23
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
     332:	32 2e       	mov	r3, r18
     334:	43 2e       	mov	r4, r19
     336:	54 2e       	mov	r5, r20
     338:	65 2e       	mov	r6, r21
     33a:	76 2e       	mov	r7, r22
     33c:	79 83       	std	Y+1, r23	; 0x01
     33e:	8a 83       	std	Y+2, r24	; 0x02
     340:	29 2e       	mov	r2, r25
     342:	1e 8b       	std	Y+22, r17	; 0x16
     344:	0d 8b       	std	Y+21, r16	; 0x15
     346:	47 01       	movw	r8, r14
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
<<<<<<< Updated upstream
     348:	0e 94 c0 00 	call	0x180	; 0x180 <micros>
     34c:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.1809>
     350:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.1809+0x1>
     354:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.1809+0x2>
     358:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.1809+0x3>
     35c:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.1809+0x4>
     360:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.1809+0x5>
     364:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.1809+0x6>
     368:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.1809+0x7>
     36c:	0e 94 21 0a 	call	0x1442	; 0x1442 <__cmpdi2>
     370:	08 f4       	brcc	.+2      	; 0x374 <motorDriver+0x76>
     372:	ee c3       	rjmp	.+2012   	; 0xb50 <__stack+0x2f1>
		return 0;
	}else{
		updateTimer = micros() + updateSpeed;											//If the timer has passed, set new timer and execute the code
     374:	0e 94 c0 00 	call	0x180	; 0x180 <micros>
     378:	29 87       	std	Y+9, r18	; 0x09
     37a:	3a 87       	std	Y+10, r19	; 0x0a
     37c:	4b 87       	std	Y+11, r20	; 0x0b
     37e:	5c 87       	std	Y+12, r21	; 0x0c
     380:	6d 87       	std	Y+13, r22	; 0x0d
     382:	7e 87       	std	Y+14, r23	; 0x0e
     384:	8f 87       	std	Y+15, r24	; 0x0f
     386:	98 8b       	std	Y+16, r25	; 0x10
     388:	20 5c       	subi	r18, 0xC0	; 192
     38a:	32 4f       	sbci	r19, 0xF2	; 242
     38c:	4c 4f       	sbci	r20, 0xFC	; 252
     38e:	5f 4f       	sbci	r21, 0xFF	; 255
     390:	6f 4f       	sbci	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	8f 4f       	sbci	r24, 0xFF	; 255
     396:	9f 4f       	sbci	r25, 0xFF	; 255
     398:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1809>
     39c:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1809+0x1>
     3a0:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1809+0x2>
     3a4:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1809+0x3>
     3a8:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1809+0x4>
     3ac:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1809+0x5>
     3b0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1809+0x6>
     3b4:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1809+0x7>
=======
     31c:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     320:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.1974>
     324:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.1974+0x1>
     328:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.1974+0x2>
     32c:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.1974+0x3>
     330:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.1974+0x4>
     334:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.1974+0x5>
     338:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.1974+0x6>
     33c:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.1974+0x7>
     340:	0e 94 04 0a 	call	0x1408	; 0x1408 <__cmpdi2>
     344:	08 f4       	brcc	.+2      	; 0x348 <motorDriver+0x76>
     346:	ee c3       	rjmp	.+2012   	; 0xb24 <__stack+0x2c5>
		return 0;
	}else{
		updateTimer = micros() + updateSpeed;											//If the timer has passed, set new timer and execute the code
     348:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     34c:	29 87       	std	Y+9, r18	; 0x09
     34e:	3a 87       	std	Y+10, r19	; 0x0a
     350:	4b 87       	std	Y+11, r20	; 0x0b
     352:	5c 87       	std	Y+12, r21	; 0x0c
     354:	6d 87       	std	Y+13, r22	; 0x0d
     356:	7e 87       	std	Y+14, r23	; 0x0e
     358:	8f 87       	std	Y+15, r24	; 0x0f
     35a:	98 8b       	std	Y+16, r25	; 0x10
     35c:	20 5c       	subi	r18, 0xC0	; 192
     35e:	32 4f       	sbci	r19, 0xF2	; 242
     360:	4c 4f       	sbci	r20, 0xFC	; 252
     362:	5f 4f       	sbci	r21, 0xFF	; 255
     364:	6f 4f       	sbci	r22, 0xFF	; 255
     366:	7f 4f       	sbci	r23, 0xFF	; 255
     368:	8f 4f       	sbci	r24, 0xFF	; 255
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
     36c:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1974>
     370:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1974+0x1>
     374:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1974+0x2>
     378:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1974+0x3>
     37c:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1974+0x4>
     380:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1974+0x5>
     384:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1974+0x6>
     388:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1974+0x7>
>>>>>>> Stashed changes
	}
	
	
	//Remap drive speed percentage
	driveSpeed = (driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     3b8:	a1 2c       	mov	r10, r1
     3ba:	0f 2e       	mov	r0, r31
     3bc:	f4 e6       	ldi	r31, 0x64	; 100
     3be:	bf 2e       	mov	r11, r31
     3c0:	f0 2d       	mov	r31, r0
     3c2:	c1 2c       	mov	r12, r1
     3c4:	d1 2c       	mov	r13, r1
     3c6:	e1 2c       	mov	r14, r1
     3c8:	f1 2c       	mov	r15, r1
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	10 e0       	ldi	r17, 0x00	; 0
     3ce:	23 2d       	mov	r18, r3
     3d0:	34 2d       	mov	r19, r4
     3d2:	45 2d       	mov	r20, r5
     3d4:	56 2d       	mov	r21, r6
     3d6:	67 2d       	mov	r22, r7
     3d8:	79 81       	ldd	r23, Y+1	; 0x01
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	92 2d       	mov	r25, r2
     3de:	0e 94 ba 08 	call	0x1174	; 0x1174 <__muldi3>
     3e2:	0f 2e       	mov	r0, r31
     3e4:	f4 e6       	ldi	r31, 0x64	; 100
     3e6:	af 2e       	mov	r10, r31
     3e8:	f0 2d       	mov	r31, r0
     3ea:	b1 2c       	mov	r11, r1
     3ec:	0e 94 15 09 	call	0x122a	; 0x122a <__divdi3>
     3f0:	29 83       	std	Y+1, r18	; 0x01
     3f2:	3a 83       	std	Y+2, r19	; 0x02
     3f4:	24 2e       	mov	r2, r20
     3f6:	35 2e       	mov	r3, r21
     3f8:	46 2e       	mov	r4, r22
     3fa:	57 2e       	mov	r5, r23
     3fc:	68 2e       	mov	r6, r24
     3fe:	79 2e       	mov	r7, r25
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     400:	27 38       	cpi	r18, 0x87	; 135
     402:	33 41       	sbci	r19, 0x13	; 19
     404:	41 05       	cpc	r20, r1
     406:	51 05       	cpc	r21, r1
     408:	61 05       	cpc	r22, r1
     40a:	71 05       	cpc	r23, r1
     40c:	81 05       	cpc	r24, r1
     40e:	91 05       	cpc	r25, r1
     410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	44 f4       	brge	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     414:	19 82       	std	Y+1, r1	; 0x01
     416:	1a 82       	std	Y+2, r1	; 0x02
     418:	21 2c       	mov	r2, r1
     41a:	31 2c       	mov	r3, r1
     41c:	41 2c       	mov	r4, r1
     41e:	51 2c       	mov	r5, r1
     420:	61 2c       	mov	r6, r1
     422:	71 2c       	mov	r7, r1
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
<<<<<<< Updated upstream
     424:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1810>
     428:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1810+0x1>
     42c:	2d 89       	ldd	r18, Y+21	; 0x15
     42e:	3e 89       	ldd	r19, Y+22	; 0x16
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	59 f1       	breq	.+86     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     436:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1813>
     43a:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1813+0x1>
     43e:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1813+0x2>
     442:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1813+0x3>
     446:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1813+0x4>
     44a:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1813+0x5>
     44e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1813+0x6>
     452:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1813+0x7>
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__cmpdi2_s8>
     45c:	79 f4       	brne	.+30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		driveSpeed = 0;																	//Set the requested speed to 0
	}else if(driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = driveDirection;											//Reverse the driving direction
     45e:	8d 89       	ldd	r24, Y+21	; 0x15
     460:	9e 89       	ldd	r25, Y+22	; 0x16
     462:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <currentDriveDirection.1810+0x1>
     466:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentDriveDirection.1810>
=======
     3f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1977>
     3fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1977+0x1>
     400:	2d 89       	ldd	r18, Y+21	; 0x15
     402:	3e 89       	ldd	r19, Y+22	; 0x16
     404:	82 17       	cp	r24, r18
     406:	93 07       	cpc	r25, r19
     408:	59 f1       	breq	.+86     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     40a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1976>
     40e:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1976+0x1>
     412:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1976+0x2>
     416:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1976+0x3>
     41a:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1976+0x4>
     41e:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1976+0x5>
     422:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1976+0x6>
     426:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1976+0x7>
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__cmpdi2_s8>
     430:	79 f4       	brne	.+30     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		driveSpeed = 0;																	//Set the requested speed to 0
	}else if(driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = driveDirection;											//Reverse the driving direction
     432:	8d 89       	ldd	r24, Y+21	; 0x15
     434:	9e 89       	ldd	r25, Y+22	; 0x16
     436:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <currentDriveDirection.1977+0x1>
     43a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentDriveDirection.1977>
>>>>>>> Stashed changes
		driveSpeed = 0;																	//And remain stationary for this update cycle
     46a:	19 82       	std	Y+1, r1	; 0x01
     46c:	1a 82       	std	Y+2, r1	; 0x02
     46e:	21 2c       	mov	r2, r1
     470:	31 2c       	mov	r3, r1
     472:	41 2c       	mov	r4, r1
     474:	51 2c       	mov	r5, r1
     476:	61 2c       	mov	r6, r1
     478:	71 2c       	mov	r7, r1
     47a:	4d c0       	rjmp	.+154    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		driveSpeed = 0;																	//Set the requested speed to 0
     47c:	19 82       	std	Y+1, r1	; 0x01
     47e:	1a 82       	std	Y+2, r1	; 0x02
     480:	21 2c       	mov	r2, r1
     482:	31 2c       	mov	r3, r1
     484:	41 2c       	mov	r4, r1
     486:	51 2c       	mov	r5, r1
     488:	61 2c       	mov	r6, r1
     48a:	71 2c       	mov	r7, r1
		driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
<<<<<<< Updated upstream
     48c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <currentDriveSpeed.1813>
     490:	9b 83       	std	Y+3, r25	; 0x03
     492:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <currentDriveSpeed.1813+0x1>
     496:	ac 83       	std	Y+4, r26	; 0x04
     498:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <currentDriveSpeed.1813+0x2>
     49c:	ed 83       	std	Y+5, r30	; 0x05
     49e:	00 91 73 00 	lds	r16, 0x0073	; 0x800073 <currentDriveSpeed.1813+0x3>
     4a2:	0e 83       	std	Y+6, r16	; 0x06
     4a4:	10 91 74 00 	lds	r17, 0x0074	; 0x800074 <currentDriveSpeed.1813+0x4>
     4a8:	1f 83       	std	Y+7, r17	; 0x07
     4aa:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <currentDriveSpeed.1813+0x5>
     4ae:	28 87       	std	Y+8, r18	; 0x08
     4b0:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <currentDriveSpeed.1813+0x6>
     4b4:	3f 8b       	std	Y+23, r19	; 0x17
     4b6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <currentDriveSpeed.1813+0x7>
     4ba:	8d 8b       	std	Y+21, r24	; 0x15
     4bc:	29 81       	ldd	r18, Y+1	; 0x01
     4be:	3a 81       	ldd	r19, Y+2	; 0x02
     4c0:	42 2d       	mov	r20, r2
     4c2:	53 2d       	mov	r21, r3
     4c4:	64 2d       	mov	r22, r4
     4c6:	75 2d       	mov	r23, r5
     4c8:	86 2d       	mov	r24, r6
     4ca:	97 2d       	mov	r25, r7
     4cc:	ab 80       	ldd	r10, Y+3	; 0x03
     4ce:	ba 2e       	mov	r11, r26
     4d0:	ce 2e       	mov	r12, r30
     4d2:	d0 2e       	mov	r13, r16
     4d4:	e1 2e       	mov	r14, r17
     4d6:	f8 84       	ldd	r15, Y+8	; 0x08
     4d8:	0f 89       	ldd	r16, Y+23	; 0x17
     4da:	1d 89       	ldd	r17, Y+21	; 0x15
     4dc:	0e 94 18 0a 	call	0x1430	; 0x1430 <__subdi3>
     4e0:	29 8b       	std	Y+17, r18	; 0x11
     4e2:	3a 8b       	std	Y+18, r19	; 0x12
     4e4:	a4 2e       	mov	r10, r20
     4e6:	b5 2e       	mov	r11, r21
     4e8:	06 2f       	mov	r16, r22
     4ea:	17 2f       	mov	r17, r23
     4ec:	8b 8b       	std	Y+19, r24	; 0x13
     4ee:	9c 8b       	std	Y+20, r25	; 0x14
     4f0:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatdisf>
     4f4:	6b 01       	movw	r12, r22
     4f6:	7c 01       	movw	r14, r24
     4f8:	a7 01       	movw	r20, r14
     4fa:	96 01       	movw	r18, r12
     4fc:	c7 01       	movw	r24, r14
     4fe:	b6 01       	movw	r22, r12
     500:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__mulsf3>
     504:	0e 94 43 08 	call	0x1086	; 0x1086 <sqrt>
=======
     460:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <currentDriveSpeed.1976>
     464:	9b 83       	std	Y+3, r25	; 0x03
     466:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <currentDriveSpeed.1976+0x1>
     46a:	ac 83       	std	Y+4, r26	; 0x04
     46c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <currentDriveSpeed.1976+0x2>
     470:	ed 83       	std	Y+5, r30	; 0x05
     472:	00 91 73 00 	lds	r16, 0x0073	; 0x800073 <currentDriveSpeed.1976+0x3>
     476:	0e 83       	std	Y+6, r16	; 0x06
     478:	10 91 74 00 	lds	r17, 0x0074	; 0x800074 <currentDriveSpeed.1976+0x4>
     47c:	1f 83       	std	Y+7, r17	; 0x07
     47e:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <currentDriveSpeed.1976+0x5>
     482:	28 87       	std	Y+8, r18	; 0x08
     484:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <currentDriveSpeed.1976+0x6>
     488:	3f 8b       	std	Y+23, r19	; 0x17
     48a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <currentDriveSpeed.1976+0x7>
     48e:	8d 8b       	std	Y+21, r24	; 0x15
     490:	29 81       	ldd	r18, Y+1	; 0x01
     492:	3a 81       	ldd	r19, Y+2	; 0x02
     494:	42 2d       	mov	r20, r2
     496:	53 2d       	mov	r21, r3
     498:	64 2d       	mov	r22, r4
     49a:	75 2d       	mov	r23, r5
     49c:	86 2d       	mov	r24, r6
     49e:	97 2d       	mov	r25, r7
     4a0:	ab 80       	ldd	r10, Y+3	; 0x03
     4a2:	ba 2e       	mov	r11, r26
     4a4:	ce 2e       	mov	r12, r30
     4a6:	d0 2e       	mov	r13, r16
     4a8:	e1 2e       	mov	r14, r17
     4aa:	f8 84       	ldd	r15, Y+8	; 0x08
     4ac:	0f 89       	ldd	r16, Y+23	; 0x17
     4ae:	1d 89       	ldd	r17, Y+21	; 0x15
     4b0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subdi3>
     4b4:	29 8b       	std	Y+17, r18	; 0x11
     4b6:	3a 8b       	std	Y+18, r19	; 0x12
     4b8:	a4 2e       	mov	r10, r20
     4ba:	b5 2e       	mov	r11, r21
     4bc:	06 2f       	mov	r16, r22
     4be:	17 2f       	mov	r17, r23
     4c0:	8b 8b       	std	Y+19, r24	; 0x13
     4c2:	9c 8b       	std	Y+20, r25	; 0x14
     4c4:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatdisf>
     4c8:	6b 01       	movw	r12, r22
     4ca:	7c 01       	movw	r14, r24
     4cc:	a7 01       	movw	r20, r14
     4ce:	96 01       	movw	r18, r12
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 b3 07 	call	0xf66	; 0xf66 <__mulsf3>
     4d8:	0e 94 26 08 	call	0x104c	; 0x104c <sqrt>
>>>>>>> Stashed changes
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     508:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fixunssfsi>
     50c:	60 3d       	cpi	r22, 0xD0	; 208
     50e:	77 40       	sbci	r23, 0x07	; 7
     510:	81 05       	cpc	r24, r1
     512:	91 05       	cpc	r25, r1
     514:	98 f4       	brcc	.+38     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
		currentDriveSpeed = driveSpeed;													//Set the current speed to the requested value
<<<<<<< Updated upstream
     516:	e9 81       	ldd	r30, Y+1	; 0x01
     518:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <currentDriveSpeed.1813>
     51c:	0a 81       	ldd	r16, Y+2	; 0x02
     51e:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <currentDriveSpeed.1813+0x1>
     522:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1813+0x2>
     526:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1813+0x3>
     52a:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1813+0x4>
     52e:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1813+0x5>
     532:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1813+0x6>
     536:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1813+0x7>
     53a:	15 c1       	rjmp	.+554    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
=======
     4ea:	e9 81       	ldd	r30, Y+1	; 0x01
     4ec:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <currentDriveSpeed.1976>
     4f0:	0a 81       	ldd	r16, Y+2	; 0x02
     4f2:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <currentDriveSpeed.1976+0x1>
     4f6:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1976+0x2>
     4fa:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1976+0x3>
     4fe:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1976+0x4>
     502:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1976+0x5>
     506:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1976+0x6>
     50a:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1976+0x7>
     50e:	15 c1       	rjmp	.+554    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
>>>>>>> Stashed changes
	}else{																			//If the difference is more than 2000
		if(driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     53c:	29 89       	ldd	r18, Y+17	; 0x11
     53e:	3a 89       	ldd	r19, Y+18	; 0x12
     540:	4a 2d       	mov	r20, r10
     542:	5b 2d       	mov	r21, r11
     544:	60 2f       	mov	r22, r16
     546:	71 2f       	mov	r23, r17
     548:	8b 89       	ldd	r24, Y+19	; 0x13
     54a:	9c 89       	ldd	r25, Y+20	; 0x14
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__cmpdi2_s8>
     552:	0c f0       	brlt	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     554:	6e c0       	rjmp	.+220    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
			if(currentDriveSpeed < driveSpeedThreshold){									//If the speed is less than the threshold
     556:	2b 81       	ldd	r18, Y+3	; 0x03
     558:	3c 81       	ldd	r19, Y+4	; 0x04
     55a:	4d 81       	ldd	r20, Y+5	; 0x05
     55c:	5e 81       	ldd	r21, Y+6	; 0x06
     55e:	6f 81       	ldd	r22, Y+7	; 0x07
     560:	78 85       	ldd	r23, Y+8	; 0x08
     562:	8f 89       	ldd	r24, Y+23	; 0x17
     564:	9d 89       	ldd	r25, Y+21	; 0x15
     566:	27 38       	cpi	r18, 0x87	; 135
     568:	33 41       	sbci	r19, 0x13	; 19
     56a:	41 05       	cpc	r20, r1
     56c:	51 05       	cpc	r21, r1
     56e:	61 05       	cpc	r22, r1
     570:	71 05       	cpc	r23, r1
     572:	81 05       	cpc	r24, r1
     574:	91 05       	cpc	r25, r1
     576:	09 f0       	breq	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     578:	9c f4       	brge	.+38     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				currentDriveSpeed = driveSpeed;													//Set the speed to the requested value (Probably 0)
<<<<<<< Updated upstream
     57a:	29 81       	ldd	r18, Y+1	; 0x01
     57c:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1813>
     580:	3a 81       	ldd	r19, Y+2	; 0x02
     582:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1813+0x1>
     586:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1813+0x2>
     58a:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1813+0x3>
     58e:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1813+0x4>
     592:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1813+0x5>
     596:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1813+0x6>
     59a:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1813+0x7>
     59e:	e3 c0       	rjmp	.+454    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     5a0:	2b 81       	ldd	r18, Y+3	; 0x03
     5a2:	3c 81       	ldd	r19, Y+4	; 0x04
     5a4:	4d 81       	ldd	r20, Y+5	; 0x05
     5a6:	5e 81       	ldd	r21, Y+6	; 0x06
     5a8:	6f 81       	ldd	r22, Y+7	; 0x07
     5aa:	78 85       	ldd	r23, Y+8	; 0x08
     5ac:	8f 89       	ldd	r24, Y+23	; 0x17
     5ae:	9d 89       	ldd	r25, Y+21	; 0x15
     5b0:	01 e0       	ldi	r16, 0x01	; 1
     5b2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ashldi3>
     5b6:	a2 2e       	mov	r10, r18
     5b8:	b3 2e       	mov	r11, r19
     5ba:	c4 2e       	mov	r12, r20
     5bc:	d5 2e       	mov	r13, r21
     5be:	e6 2e       	mov	r14, r22
     5c0:	f7 2e       	mov	r15, r23
     5c2:	e8 2f       	mov	r30, r24
     5c4:	19 2f       	mov	r17, r25
     5c6:	04 e0       	ldi	r16, 0x04	; 4
     5c8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ashldi3>
     5cc:	0e 2f       	mov	r16, r30
     5ce:	0e 94 18 0a 	call	0x1430	; 0x1430 <__subdi3>
     5d2:	0f 2e       	mov	r0, r31
     5d4:	f4 e6       	ldi	r31, 0x64	; 100
     5d6:	af 2e       	mov	r10, r31
     5d8:	f0 2d       	mov	r31, r0
     5da:	b1 2c       	mov	r11, r1
     5dc:	c1 2c       	mov	r12, r1
     5de:	d1 2c       	mov	r13, r1
     5e0:	e1 2c       	mov	r14, r1
     5e2:	f1 2c       	mov	r15, r1
     5e4:	00 e0       	ldi	r16, 0x00	; 0
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	0e 94 15 09 	call	0x122a	; 0x122a <__divdi3>
     5ec:	a2 2e       	mov	r10, r18
     5ee:	b3 2e       	mov	r11, r19
     5f0:	c4 2e       	mov	r12, r20
     5f2:	d5 2e       	mov	r13, r21
     5f4:	e6 2e       	mov	r14, r22
     5f6:	f7 2e       	mov	r15, r23
     5f8:	08 2f       	mov	r16, r24
     5fa:	19 2f       	mov	r17, r25
     5fc:	2b 81       	ldd	r18, Y+3	; 0x03
     5fe:	3c 81       	ldd	r19, Y+4	; 0x04
     600:	4d 81       	ldd	r20, Y+5	; 0x05
     602:	5e 81       	ldd	r21, Y+6	; 0x06
     604:	6f 81       	ldd	r22, Y+7	; 0x07
     606:	78 85       	ldd	r23, Y+8	; 0x08
     608:	8f 89       	ldd	r24, Y+23	; 0x17
     60a:	9d 89       	ldd	r25, Y+21	; 0x15
     60c:	0e 94 18 0a 	call	0x1430	; 0x1430 <__subdi3>
     610:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1813>
     614:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1813+0x1>
     618:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1813+0x2>
     61c:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1813+0x3>
     620:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1813+0x4>
     624:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1813+0x5>
     628:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1813+0x6>
     62c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1813+0x7>
     630:	9a c0       	rjmp	.+308    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
=======
     54e:	29 81       	ldd	r18, Y+1	; 0x01
     550:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1976>
     554:	3a 81       	ldd	r19, Y+2	; 0x02
     556:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1976+0x1>
     55a:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1976+0x2>
     55e:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1976+0x3>
     562:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1976+0x4>
     566:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1976+0x5>
     56a:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1976+0x6>
     56e:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1976+0x7>
     572:	e3 c0       	rjmp	.+454    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     574:	2b 81       	ldd	r18, Y+3	; 0x03
     576:	3c 81       	ldd	r19, Y+4	; 0x04
     578:	4d 81       	ldd	r20, Y+5	; 0x05
     57a:	5e 81       	ldd	r21, Y+6	; 0x06
     57c:	6f 81       	ldd	r22, Y+7	; 0x07
     57e:	78 85       	ldd	r23, Y+8	; 0x08
     580:	8f 89       	ldd	r24, Y+23	; 0x17
     582:	9d 89       	ldd	r25, Y+21	; 0x15
     584:	01 e0       	ldi	r16, 0x01	; 1
     586:	0e 94 cd 09 	call	0x139a	; 0x139a <__ashldi3>
     58a:	a2 2e       	mov	r10, r18
     58c:	b3 2e       	mov	r11, r19
     58e:	c4 2e       	mov	r12, r20
     590:	d5 2e       	mov	r13, r21
     592:	e6 2e       	mov	r14, r22
     594:	f7 2e       	mov	r15, r23
     596:	e8 2f       	mov	r30, r24
     598:	19 2f       	mov	r17, r25
     59a:	04 e0       	ldi	r16, 0x04	; 4
     59c:	0e 94 cd 09 	call	0x139a	; 0x139a <__ashldi3>
     5a0:	0e 2f       	mov	r16, r30
     5a2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subdi3>
     5a6:	0f 2e       	mov	r0, r31
     5a8:	f4 e6       	ldi	r31, 0x64	; 100
     5aa:	af 2e       	mov	r10, r31
     5ac:	f0 2d       	mov	r31, r0
     5ae:	b1 2c       	mov	r11, r1
     5b0:	c1 2c       	mov	r12, r1
     5b2:	d1 2c       	mov	r13, r1
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
     5b8:	00 e0       	ldi	r16, 0x00	; 0
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__divdi3>
     5c0:	a2 2e       	mov	r10, r18
     5c2:	b3 2e       	mov	r11, r19
     5c4:	c4 2e       	mov	r12, r20
     5c6:	d5 2e       	mov	r13, r21
     5c8:	e6 2e       	mov	r14, r22
     5ca:	f7 2e       	mov	r15, r23
     5cc:	08 2f       	mov	r16, r24
     5ce:	19 2f       	mov	r17, r25
     5d0:	2b 81       	ldd	r18, Y+3	; 0x03
     5d2:	3c 81       	ldd	r19, Y+4	; 0x04
     5d4:	4d 81       	ldd	r20, Y+5	; 0x05
     5d6:	5e 81       	ldd	r21, Y+6	; 0x06
     5d8:	6f 81       	ldd	r22, Y+7	; 0x07
     5da:	78 85       	ldd	r23, Y+8	; 0x08
     5dc:	8f 89       	ldd	r24, Y+23	; 0x17
     5de:	9d 89       	ldd	r25, Y+21	; 0x15
     5e0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subdi3>
     5e4:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1976>
     5e8:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1976+0x1>
     5ec:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1976+0x2>
     5f0:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1976+0x3>
     5f4:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1976+0x4>
     5f8:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1976+0x5>
     5fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1976+0x6>
     600:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1976+0x7>
     604:	9a c0       	rjmp	.+308    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
>>>>>>> Stashed changes
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     632:	2b 81       	ldd	r18, Y+3	; 0x03
     634:	3c 81       	ldd	r19, Y+4	; 0x04
     636:	4d 81       	ldd	r20, Y+5	; 0x05
     638:	5e 81       	ldd	r21, Y+6	; 0x06
     63a:	6f 81       	ldd	r22, Y+7	; 0x07
     63c:	78 85       	ldd	r23, Y+8	; 0x08
     63e:	8f 89       	ldd	r24, Y+23	; 0x17
     640:	9d 89       	ldd	r25, Y+21	; 0x15
     642:	27 38       	cpi	r18, 0x87	; 135
     644:	a3 e1       	ldi	r26, 0x13	; 19
     646:	3a 07       	cpc	r19, r26
     648:	41 05       	cpc	r20, r1
     64a:	51 05       	cpc	r21, r1
     64c:	61 05       	cpc	r22, r1
     64e:	71 05       	cpc	r23, r1
     650:	81 05       	cpc	r24, r1
     652:	91 05       	cpc	r25, r1
     654:	09 f0       	breq	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     656:	cc f4       	brge	.+50     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
<<<<<<< Updated upstream
     658:	28 57       	subi	r18, 0x78	; 120
     65a:	3c 4e       	sbci	r19, 0xEC	; 236
     65c:	4f 4f       	sbci	r20, 0xFF	; 255
     65e:	5f 4f       	sbci	r21, 0xFF	; 255
     660:	6f 4f       	sbci	r22, 0xFF	; 255
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	8f 4f       	sbci	r24, 0xFF	; 255
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1813>
     66c:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1813+0x1>
     670:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1813+0x2>
     674:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1813+0x3>
     678:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1813+0x4>
     67c:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1813+0x5>
     680:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1813+0x6>
     684:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1813+0x7>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
=======
     62c:	28 57       	subi	r18, 0x78	; 120
     62e:	3c 4e       	sbci	r19, 0xEC	; 236
     630:	4f 4f       	sbci	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	6f 4f       	sbci	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	8f 4f       	sbci	r24, 0xFF	; 255
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1976>
     640:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1976+0x1>
     644:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1976+0x2>
     648:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1976+0x3>
     64c:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1976+0x4>
     650:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1976+0x5>
     654:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1976+0x6>
     658:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1976+0x7>
     65c:	6e c0       	rjmp	.+220    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
>>>>>>> Stashed changes
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     68a:	2b 81       	ldd	r18, Y+3	; 0x03
     68c:	3c 81       	ldd	r19, Y+4	; 0x04
     68e:	4d 81       	ldd	r20, Y+5	; 0x05
     690:	5e 81       	ldd	r21, Y+6	; 0x06
     692:	6f 81       	ldd	r22, Y+7	; 0x07
     694:	78 85       	ldd	r23, Y+8	; 0x08
     696:	8f 89       	ldd	r24, Y+23	; 0x17
     698:	9d 89       	ldd	r25, Y+21	; 0x15
     69a:	01 e0       	ldi	r16, 0x01	; 1
     69c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ashldi3>
     6a0:	a2 2e       	mov	r10, r18
     6a2:	b3 2e       	mov	r11, r19
     6a4:	c4 2e       	mov	r12, r20
     6a6:	d5 2e       	mov	r13, r21
     6a8:	e6 2e       	mov	r14, r22
     6aa:	f7 2e       	mov	r15, r23
     6ac:	e8 2f       	mov	r30, r24
     6ae:	19 2f       	mov	r17, r25
     6b0:	04 e0       	ldi	r16, 0x04	; 4
     6b2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ashldi3>
     6b6:	0e 2f       	mov	r16, r30
     6b8:	0e 94 18 0a 	call	0x1430	; 0x1430 <__subdi3>
     6bc:	0f 2e       	mov	r0, r31
     6be:	f4 e6       	ldi	r31, 0x64	; 100
     6c0:	af 2e       	mov	r10, r31
     6c2:	f0 2d       	mov	r31, r0
     6c4:	b1 2c       	mov	r11, r1
     6c6:	c1 2c       	mov	r12, r1
     6c8:	d1 2c       	mov	r13, r1
     6ca:	e1 2c       	mov	r14, r1
     6cc:	f1 2c       	mov	r15, r1
     6ce:	00 e0       	ldi	r16, 0x00	; 0
     6d0:	10 e0       	ldi	r17, 0x00	; 0
     6d2:	0e 94 15 09 	call	0x122a	; 0x122a <__divdi3>
     6d6:	ab 80       	ldd	r10, Y+3	; 0x03
     6d8:	bc 80       	ldd	r11, Y+4	; 0x04
     6da:	cd 80       	ldd	r12, Y+5	; 0x05
     6dc:	de 80       	ldd	r13, Y+6	; 0x06
     6de:	ef 80       	ldd	r14, Y+7	; 0x07
     6e0:	f8 84       	ldd	r15, Y+8	; 0x08
     6e2:	0f 89       	ldd	r16, Y+23	; 0x17
     6e4:	1d 89       	ldd	r17, Y+21	; 0x15
     6e6:	0e 94 03 0a 	call	0x1406	; 0x1406 <__adddi3>
     6ea:	2b 83       	std	Y+3, r18	; 0x03
     6ec:	3c 83       	std	Y+4, r19	; 0x04
     6ee:	4e 83       	std	Y+6, r20	; 0x06
     6f0:	5d 83       	std	Y+5, r21	; 0x05
     6f2:	b6 2f       	mov	r27, r22
     6f4:	a7 2f       	mov	r26, r23
     6f6:	f8 2f       	mov	r31, r24
     6f8:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     6fa:	29 81       	ldd	r18, Y+1	; 0x01
     6fc:	3a 81       	ldd	r19, Y+2	; 0x02
     6fe:	42 2d       	mov	r20, r2
     700:	53 2d       	mov	r21, r3
     702:	64 2d       	mov	r22, r4
     704:	75 2d       	mov	r23, r5
     706:	86 2d       	mov	r24, r6
     708:	97 2d       	mov	r25, r7
     70a:	ab 80       	ldd	r10, Y+3	; 0x03
     70c:	bc 80       	ldd	r11, Y+4	; 0x04
     70e:	ce 80       	ldd	r12, Y+6	; 0x06
     710:	dd 80       	ldd	r13, Y+5	; 0x05
     712:	eb 2e       	mov	r14, r27
     714:	fa 2e       	mov	r15, r26
     716:	0f 2f       	mov	r16, r31
     718:	1e 2f       	mov	r17, r30
     71a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__cmpdi2>
     71e:	8c f0       	brlt	.+34     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
<<<<<<< Updated upstream
     720:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.1813>
     724:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.1813+0x1>
     728:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.1813+0x2>
     72c:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.1813+0x3>
     730:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.1813+0x4>
     734:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.1813+0x5>
     738:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.1813+0x6>
     73c:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.1813+0x7>
     740:	12 c0       	rjmp	.+36     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     742:	39 81       	ldd	r19, Y+1	; 0x01
     744:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.1813>
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <currentDriveSpeed.1813+0x1>
     74e:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1813+0x2>
     752:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1813+0x3>
     756:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1813+0x4>
     75a:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1813+0x5>
     75e:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1813+0x6>
     762:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1813+0x7>
=======
     6f4:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.1976>
     6f8:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.1976+0x1>
     6fc:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.1976+0x2>
     700:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.1976+0x3>
     704:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.1976+0x4>
     708:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.1976+0x5>
     70c:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.1976+0x6>
     710:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.1976+0x7>
     714:	12 c0       	rjmp	.+36     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     716:	39 81       	ldd	r19, Y+1	; 0x01
     718:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.1976>
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <currentDriveSpeed.1976+0x1>
     722:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1976+0x2>
     726:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1976+0x3>
     72a:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1976+0x4>
     72e:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1976+0x5>
     732:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1976+0x6>
     736:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1976+0x7>
>>>>>>> Stashed changes
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
<<<<<<< Updated upstream
     766:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1810>
     76a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1810+0x1>
     76e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1814+0x1>
     772:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1814>
=======
     73a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1977>
     73e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1977+0x1>
     742:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1980+0x1>
     746:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1980>
>>>>>>> Stashed changes
	rightMotorDirection = currentDriveDirection;
     776:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     77a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
<<<<<<< Updated upstream
     77e:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1813>
     782:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1813+0x1>
     786:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1813+0x2>
     78a:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1813+0x3>
     78e:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1813+0x4>
     792:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1813+0x5>
     796:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1813+0x6>
     79a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1813+0x7>
     79e:	c2 2e       	mov	r12, r18
     7a0:	d3 2e       	mov	r13, r19
     7a2:	e4 2e       	mov	r14, r20
     7a4:	f5 2e       	mov	r15, r21
     7a6:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.1816>
     7aa:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.1816+0x1>
     7ae:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.1816+0x2>
     7b2:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.1816+0x3>
	rightMotorSpeed = currentDriveSpeed;
     7b6:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.1817>
     7ba:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.1817+0x1>
     7be:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.1817+0x2>
     7c2:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.1817+0x3>
=======
     752:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1976>
     756:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1976+0x1>
     75a:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1976+0x2>
     75e:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1976+0x3>
     762:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1976+0x4>
     766:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1976+0x5>
     76a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1976+0x6>
     76e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1976+0x7>
     772:	c2 2e       	mov	r12, r18
     774:	d3 2e       	mov	r13, r19
     776:	e4 2e       	mov	r14, r20
     778:	f5 2e       	mov	r15, r21
     77a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.1982>
     77e:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.1982+0x1>
     782:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.1982+0x2>
     786:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.1982+0x3>
	rightMotorSpeed = currentDriveSpeed;
     78a:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.1983>
     78e:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.1983+0x1>
     792:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.1983+0x2>
     796:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.1983+0x3>
>>>>>>> Stashed changes
	
	
	//Check turn direction
	if(turnDirection != currentTurnDirection){						//If the turn direction is changed
     7c6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
     7ca:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
     7ce:	e8 15       	cp	r30, r8
     7d0:	f9 05       	cpc	r31, r9
     7d2:	81 f1       	breq	.+96     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = turnDirection;							//Set the new turn direction
     7d4:	90 92 67 00 	sts	0x0067, r9	; 0x800067 <__data_end+0x1>
     7d8:	80 92 66 00 	sts	0x0066, r8	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     7dc:	89 28       	or	r8, r9
     7de:	29 f4       	brne	.+10     	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
			enableMotorEncoder(1);											//Enable the encoders
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 6f 01 	call	0x2de	; 0x2de <enableMotorEncoder>
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 6f 01 	call	0x2de	; 0x2de <enableMotorEncoder>
		}
<<<<<<< Updated upstream
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     7f2:	29 85       	ldd	r18, Y+9	; 0x09
     7f4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7f6:	4b 85       	ldd	r20, Y+11	; 0x0b
     7f8:	5c 85       	ldd	r21, Y+12	; 0x0c
     7fa:	6d 85       	ldd	r22, Y+13	; 0x0d
     7fc:	7e 85       	ldd	r23, Y+14	; 0x0e
     7fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     800:	98 89       	ldd	r25, Y+16	; 0x10
     802:	20 52       	subi	r18, 0x20	; 32
     804:	3c 46       	sbci	r19, 0x6C	; 108
     806:	4b 4f       	sbci	r20, 0xFB	; 251
     808:	5f 4f       	sbci	r21, 0xFF	; 255
     80a:	6f 4f       	sbci	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	8f 4f       	sbci	r24, 0xFF	; 255
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1809>
     816:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1809+0x1>
     81a:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1809+0x2>
     81e:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1809+0x3>
     822:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1809+0x4>
     826:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1809+0x5>
     82a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1809+0x6>
     82e:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1809+0x7>
     832:	c8 c0       	rjmp	.+400    	; 0x9c4 <__stack+0x165>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     834:	ef 3f       	cpi	r30, 0xFF	; 255
     836:	af ef       	ldi	r26, 0xFF	; 255
     838:	fa 07       	cpc	r31, r26
     83a:	f1 f5       	brne	.+124    	; 0x8b8 <__stack+0x59>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     83c:	a0 e0       	ldi	r26, 0x00	; 0
     83e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__cmpdi2_s8>
     842:	f9 f4       	brne	.+62     	; 0x882 <__stack+0x23>
			leftMotorDirection = 0;											//Turn the left motor backwards
     844:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.1814+0x1>
     848:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.1814>
			rightMotorDirection = 1;										//Turn the right motor forwards
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     854:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;				//Set the speed to minimal + twice the turn rate
     858:	88 ef       	ldi	r24, 0xF8	; 248
     85a:	9a e2       	ldi	r25, 0x2A	; 42
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     864:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     868:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     86c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;				//---^
     870:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     874:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     878:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     87c:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
     880:	22 c1       	rjmp	.+580    	; 0xac6 <__stack+0x267>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = driveSpeedThreshold;							//Set the left motor to minimal
     882:	88 e8       	ldi	r24, 0x88	; 136
     884:	93 e1       	ldi	r25, 0x13	; 19
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     88e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     892:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     896:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed += turnRate;									//Increase the right motor with the turn rate
     89a:	e8 eb       	ldi	r30, 0xB8	; 184
     89c:	ce 0e       	add	r12, r30
     89e:	eb e0       	ldi	r30, 0x0B	; 11
     8a0:	de 1e       	adc	r13, r30
     8a2:	e1 1c       	adc	r14, r1
     8a4:	f1 1c       	adc	r15, r1
     8a6:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1817>
     8aa:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1817+0x1>
     8ae:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1817+0x2>
     8b2:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1817+0x3>
     8b6:	86 c0       	rjmp	.+268    	; 0x9c4 <__stack+0x165>
=======
		updateTimer += 200000;
     7c6:	29 85       	ldd	r18, Y+9	; 0x09
     7c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ca:	4b 85       	ldd	r20, Y+11	; 0x0b
     7cc:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ce:	6d 85       	ldd	r22, Y+13	; 0x0d
     7d0:	7e 85       	ldd	r23, Y+14	; 0x0e
     7d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d4:	98 89       	ldd	r25, Y+16	; 0x10
     7d6:	20 58       	subi	r18, 0x80	; 128
     7d8:	35 4e       	sbci	r19, 0xE5	; 229
     7da:	49 4f       	sbci	r20, 0xF9	; 249
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	6f 4f       	sbci	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	8f 4f       	sbci	r24, 0xFF	; 255
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1974>
     7ea:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1974+0x1>
     7ee:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1974+0x2>
     7f2:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1974+0x3>
     7f6:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1974+0x4>
     7fa:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1974+0x5>
     7fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1974+0x6>
     802:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1974+0x7>
     806:	c8 c0       	rjmp	.+400    	; 0x998 <__stack+0x139>
	}else if(currentTurnDirection == -1){
     808:	ef 3f       	cpi	r30, 0xFF	; 255
     80a:	af ef       	ldi	r26, 0xFF	; 255
     80c:	fa 07       	cpc	r31, r26
     80e:	f1 f5       	brne	.+124    	; 0x88c <__stack+0x2d>
		if(currentDriveSpeed == 0){
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	0e 94 0d 0a 	call	0x141a	; 0x141a <__cmpdi2_s8>
     816:	f9 f4       	brne	.+62     	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
			leftMotorDirection = 0;
     818:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.1980+0x1>
     81c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.1980>
			rightMotorDirection = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     828:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;
     82c:	88 ef       	ldi	r24, 0xF8	; 248
     82e:	9a e2       	ldi	r25, 0x2A	; 42
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1982>
     838:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1982+0x1>
     83c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1982+0x2>
     840:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1982+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;
     844:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1983>
     848:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1983+0x1>
     84c:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1983+0x2>
     850:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1983+0x3>
     854:	22 c1       	rjmp	.+580    	; 0xa9a <__stack+0x23b>
		}else{
			leftMotorSpeed = driveSpeedThreshold;
     856:	88 e8       	ldi	r24, 0x88	; 136
     858:	93 e1       	ldi	r25, 0x13	; 19
     85a:	a0 e0       	ldi	r26, 0x00	; 0
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1982>
     862:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1982+0x1>
     866:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1982+0x2>
     86a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1982+0x3>
			rightMotorSpeed += turnRate;
     86e:	e8 eb       	ldi	r30, 0xB8	; 184
     870:	ce 0e       	add	r12, r30
     872:	eb e0       	ldi	r30, 0x0B	; 11
     874:	de 1e       	adc	r13, r30
     876:	e1 1c       	adc	r14, r1
     878:	f1 1c       	adc	r15, r1
     87a:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1983>
     87e:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1983+0x1>
     882:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1983+0x2>
     886:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1983+0x3>
     88a:	86 c0       	rjmp	.+268    	; 0x998 <__stack+0x139>
>>>>>>> Stashed changes
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     8b8:	30 97       	sbiw	r30, 0x00	; 0
     8ba:	09 f0       	breq	.+2      	; 0x8be <__stack+0x5f>
     8bc:	43 c0       	rjmp	.+134    	; 0x944 <__stack+0xe5>
		if(motorEncoderLVal != motorEncoderRVal){
     8be:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <motorEncoderLVal>
     8c2:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <motorEncoderLVal+0x1>
     8c6:	1e 8b       	std	Y+22, r17	; 0x16
     8c8:	0d 8b       	std	Y+21, r16	; 0x15
     8ca:	00 91 80 00 	lds	r16, 0x0080	; 0x800080 <motorEncoderRVal>
     8ce:	10 91 81 00 	lds	r17, 0x0081	; 0x800081 <motorEncoderRVal+0x1>
     8d2:	2d 89       	ldd	r18, Y+21	; 0x15
     8d4:	3e 89       	ldd	r19, Y+22	; 0x16
     8d6:	20 17       	cp	r18, r16
     8d8:	31 07       	cpc	r19, r17
     8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x7f>
     8dc:	73 c0       	rjmp	.+230    	; 0x9c4 <__stack+0x165>
			if(motorEncoderLVal - motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
<<<<<<< Updated upstream
     8de:	c7 01       	movw	r24, r14
     8e0:	b6 01       	movw	r22, r12
     8e2:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatunsisf>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
     8ea:	6d 89       	ldd	r22, Y+21	; 0x15
     8ec:	7e 89       	ldd	r23, Y+22	; 0x16
     8ee:	60 1b       	sub	r22, r16
     8f0:	71 0b       	sbc	r23, r17
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatunsisf>
     8fa:	4b 01       	movw	r8, r22
     8fc:	5c 01       	movw	r10, r24
     8fe:	a5 01       	movw	r20, r10
     900:	94 01       	movw	r18, r8
     902:	c5 01       	movw	r24, r10
     904:	b4 01       	movw	r22, r8
     906:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__mulsf3>
     90a:	0e 94 43 08 	call	0x1086	; 0x1086 <sqrt>
     90e:	9b 01       	movw	r18, r22
     910:	ac 01       	movw	r20, r24
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__mulsf3>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	48 ec       	ldi	r20, 0xC8	; 200
     920:	52 e4       	ldi	r21, 0x42	; 66
     922:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
     926:	a7 01       	movw	r20, r14
     928:	96 01       	movw	r18, r12
     92a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__addsf3>
     92e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fixunssfsi>
     932:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.1817>
     936:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.1817+0x1>
     93a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.1817+0x2>
     93e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.1817+0x3>
     942:	40 c0       	rjmp	.+128    	; 0x9c4 <__stack+0x165>
=======
     8b2:	c7 01       	movw	r24, r14
     8b4:	b6 01       	movw	r22, r12
     8b6:	0e 94 d7 06 	call	0xdae	; 0xdae <__floatunsisf>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
     8be:	6d 89       	ldd	r22, Y+21	; 0x15
     8c0:	7e 89       	ldd	r23, Y+22	; 0x16
     8c2:	60 1b       	sub	r22, r16
     8c4:	71 0b       	sbc	r23, r17
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 d7 06 	call	0xdae	; 0xdae <__floatunsisf>
     8ce:	4b 01       	movw	r8, r22
     8d0:	5c 01       	movw	r10, r24
     8d2:	a5 01       	movw	r20, r10
     8d4:	94 01       	movw	r18, r8
     8d6:	c5 01       	movw	r24, r10
     8d8:	b4 01       	movw	r22, r8
     8da:	0e 94 b3 07 	call	0xf66	; 0xf66 <__mulsf3>
     8de:	0e 94 26 08 	call	0x104c	; 0x104c <sqrt>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
     8e6:	c7 01       	movw	r24, r14
     8e8:	b6 01       	movw	r22, r12
     8ea:	0e 94 b3 07 	call	0xf66	; 0xf66 <__mulsf3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	48 ec       	ldi	r20, 0xC8	; 200
     8f4:	52 e4       	ldi	r21, 0x42	; 66
     8f6:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
     8fa:	a7 01       	movw	r20, r14
     8fc:	96 01       	movw	r18, r12
     8fe:	0e 94 c4 05 	call	0xb88	; 0xb88 <__addsf3>
     902:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
     906:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.1983>
     90a:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.1983+0x1>
     90e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.1983+0x2>
     912:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.1983+0x3>
     916:	40 c0       	rjmp	.+128    	; 0x998 <__stack+0x139>
>>>>>>> Stashed changes
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	f1 f5       	brne	.+124    	; 0x9c4 <__stack+0x165>
		if(currentDriveSpeed == 0){
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__cmpdi2_s8>
     94e:	f9 f4       	brne	.+62     	; 0x98e <__stack+0x12f>
			leftMotorDirection = 1;
<<<<<<< Updated upstream
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1814+0x1>
     958:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1814>
=======
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1980+0x1>
     92c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1980>
>>>>>>> Stashed changes
			rightMotorDirection = 0;
     95c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     960:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;
<<<<<<< Updated upstream
     964:	88 ef       	ldi	r24, 0xF8	; 248
     966:	9a e2       	ldi	r25, 0x2A	; 42
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     970:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     974:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     978:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;
     97c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     980:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     984:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     988:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
     98c:	9c c0       	rjmp	.+312    	; 0xac6 <__stack+0x267>
			}else{
			leftMotorSpeed += turnRate;
     98e:	38 eb       	ldi	r19, 0xB8	; 184
     990:	c3 0e       	add	r12, r19
     992:	3b e0       	ldi	r19, 0x0B	; 11
     994:	d3 1e       	adc	r13, r19
     996:	e1 1c       	adc	r14, r1
     998:	f1 1c       	adc	r15, r1
     99a:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.1816>
     99e:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.1816+0x1>
     9a2:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.1816+0x2>
     9a6:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed = driveSpeedThreshold;
     9aa:	88 e8       	ldi	r24, 0x88	; 136
     9ac:	93 e1       	ldi	r25, 0x13	; 19
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     9b6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     9ba:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     9be:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
     9c2:	81 c0       	rjmp	.+258    	; 0xac6 <__stack+0x267>
=======
     938:	88 ef       	ldi	r24, 0xF8	; 248
     93a:	9a e2       	ldi	r25, 0x2A	; 42
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1982>
     944:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1982+0x1>
     948:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1982+0x2>
     94c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1982+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;
     950:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1983>
     954:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1983+0x1>
     958:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1983+0x2>
     95c:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1983+0x3>
     960:	9c c0       	rjmp	.+312    	; 0xa9a <__stack+0x23b>
			}else{
			leftMotorSpeed += turnRate;
     962:	38 eb       	ldi	r19, 0xB8	; 184
     964:	c3 0e       	add	r12, r19
     966:	3b e0       	ldi	r19, 0x0B	; 11
     968:	d3 1e       	adc	r13, r19
     96a:	e1 1c       	adc	r14, r1
     96c:	f1 1c       	adc	r15, r1
     96e:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.1982>
     972:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.1982+0x1>
     976:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.1982+0x2>
     97a:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.1982+0x3>
			rightMotorSpeed = driveSpeedThreshold;
     97e:	88 e8       	ldi	r24, 0x88	; 136
     980:	93 e1       	ldi	r25, 0x13	; 19
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1983>
     98a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1983+0x1>
     98e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1983+0x2>
     992:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1983+0x3>
     996:	81 c0       	rjmp	.+258    	; 0xa9a <__stack+0x23b>
>>>>>>> Stashed changes
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;
<<<<<<< Updated upstream
     9c4:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1817>
     9c8:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1817+0x1>
     9cc:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1817+0x2>
     9d0:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1817+0x3>
     9d4:	d7 01       	movw	r26, r14
     9d6:	c6 01       	movw	r24, r12
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	8c 0d       	add	r24, r12
     9e2:	9d 1d       	adc	r25, r13
     9e4:	ae 1d       	adc	r26, r14
     9e6:	bf 1d       	adc	r27, r15
     9e8:	ac 01       	movw	r20, r24
     9ea:	bd 01       	movw	r22, r26
     9ec:	44 0f       	add	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	66 1f       	adc	r22, r22
     9f2:	77 1f       	adc	r23, r23
     9f4:	44 0f       	add	r20, r20
     9f6:	55 1f       	adc	r21, r21
     9f8:	66 1f       	adc	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	8c 01       	movw	r16, r24
     9fe:	9d 01       	movw	r18, r26
     a00:	04 0f       	add	r16, r20
     a02:	15 1f       	adc	r17, r21
     a04:	26 1f       	adc	r18, r22
     a06:	37 1f       	adc	r19, r23
     a08:	c9 01       	movw	r24, r18
     a0a:	b8 01       	movw	r22, r16
     a0c:	24 e6       	ldi	r18, 0x64	; 100
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	0e 94 98 08 	call	0x1130	; 0x1130 <__udivmodsi4>
     a18:	c2 0e       	add	r12, r18
     a1a:	d3 1e       	adc	r13, r19
     a1c:	e4 1e       	adc	r14, r20
     a1e:	f5 1e       	adc	r15, r21
     a20:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1817>
     a24:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1817+0x1>
     a28:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1817+0x2>
     a2c:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1817+0x3>
=======
     998:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1983>
     99c:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1983+0x1>
     9a0:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1983+0x2>
     9a4:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1983+0x3>
     9a8:	d7 01       	movw	r26, r14
     9aa:	c6 01       	movw	r24, r12
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	aa 1f       	adc	r26, r26
     9b2:	bb 1f       	adc	r27, r27
     9b4:	8c 0d       	add	r24, r12
     9b6:	9d 1d       	adc	r25, r13
     9b8:	ae 1d       	adc	r26, r14
     9ba:	bf 1d       	adc	r27, r15
     9bc:	ac 01       	movw	r20, r24
     9be:	bd 01       	movw	r22, r26
     9c0:	44 0f       	add	r20, r20
     9c2:	55 1f       	adc	r21, r21
     9c4:	66 1f       	adc	r22, r22
     9c6:	77 1f       	adc	r23, r23
     9c8:	44 0f       	add	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	66 1f       	adc	r22, r22
     9ce:	77 1f       	adc	r23, r23
     9d0:	8c 01       	movw	r16, r24
     9d2:	9d 01       	movw	r18, r26
     9d4:	04 0f       	add	r16, r20
     9d6:	15 1f       	adc	r17, r21
     9d8:	26 1f       	adc	r18, r22
     9da:	37 1f       	adc	r19, r23
     9dc:	c9 01       	movw	r24, r18
     9de:	b8 01       	movw	r22, r16
     9e0:	24 e6       	ldi	r18, 0x64	; 100
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodsi4>
     9ec:	c2 0e       	add	r12, r18
     9ee:	d3 1e       	adc	r13, r19
     9f0:	e4 1e       	adc	r14, r20
     9f2:	f5 1e       	adc	r15, r21
     9f4:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1983>
     9f8:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1983+0x1>
     9fc:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1983+0x2>
     a00:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1983+0x3>
>>>>>>> Stashed changes
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
<<<<<<< Updated upstream
     a30:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1816>
     a34:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1816+0x1>
     a38:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1816+0x2>
     a3c:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1816+0x3>
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	94 46       	sbci	r25, 0x64	; 100
     a44:	a1 05       	cpc	r26, r1
     a46:	b1 05       	cpc	r27, r1
     a48:	60 f0       	brcs	.+24     	; 0xa62 <__stack+0x203>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	94 e6       	ldi	r25, 0x64	; 100
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     a56:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     a5a:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     a5e:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
=======
     a04:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1982>
     a08:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1982+0x1>
     a0c:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1982+0x2>
     a10:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1982+0x3>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	94 46       	sbci	r25, 0x64	; 100
     a18:	a1 05       	cpc	r26, r1
     a1a:	b1 05       	cpc	r27, r1
     a1c:	60 f0       	brcs	.+24     	; 0xa36 <__stack+0x1d7>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	94 e6       	ldi	r25, 0x64	; 100
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1982>
     a2a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1982+0x1>
     a2e:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1982+0x2>
     a32:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1982+0x3>
>>>>>>> Stashed changes
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     a62:	21 e3       	ldi	r18, 0x31	; 49
     a64:	c2 16       	cp	r12, r18
     a66:	25 e7       	ldi	r18, 0x75	; 117
     a68:	d2 06       	cpc	r13, r18
     a6a:	e1 04       	cpc	r14, r1
     a6c:	f1 04       	cpc	r15, r1
     a6e:	60 f0       	brcs	.+24     	; 0xa88 <__stack+0x229>
		rightMotorSpeed = 30000;						//Set it back to its max
<<<<<<< Updated upstream
     a70:	80 e3       	ldi	r24, 0x30	; 48
     a72:	95 e7       	ldi	r25, 0x75	; 117
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     a7c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     a80:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     a84:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
=======
     a44:	80 e3       	ldi	r24, 0x30	; 48
     a46:	95 e7       	ldi	r25, 0x75	; 117
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1983>
     a50:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1983+0x1>
     a54:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1983+0x2>
     a58:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1983+0x3>
>>>>>>> Stashed changes
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
<<<<<<< Updated upstream
     a88:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.1814>
     a8c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.1814+0x1>
     a90:	89 2b       	or	r24, r25
     a92:	11 f0       	breq	.+4      	; 0xa98 <__stack+0x239>
=======
     a5c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.1980>
     a60:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.1980+0x1>
     a64:	89 2b       	or	r24, r25
     a66:	11 f0       	breq	.+4      	; 0xa6c <__stack+0x20d>
>>>>>>> Stashed changes
		PORTC &= 0b11111011;
     a94:	aa 98       	cbi	0x15, 2	; 21
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <__stack+0x23b>
	}else{
		PORTC |= 0b00000100;
     a98:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     a9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     a9e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     aa2:	89 2b       	or	r24, r25
     aa4:	11 f0       	breq	.+4      	; 0xaaa <__stack+0x24b>
		PORTC &= 0b11110111;
     aa6:	ab 98       	cbi	0x15, 3	; 21
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <__stack+0x24d>
	}else{
		PORTC |= 0b00001000;
     aaa:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
<<<<<<< Updated upstream
     aac:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.1817>
     ab0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.1817+0x1>
     ab4:	9b bd       	out	0x2b, r25	; 43
     ab6:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     ab8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1816>
     abc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1816+0x1>
     ac0:	99 bd       	out	0x29, r25	; 41
     ac2:	88 bd       	out	0x28, r24	; 40
=======
     a80:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.1983>
     a84:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.1983+0x1>
     a88:	9b bd       	out	0x2b, r25	; 43
     a8a:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     a8c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1982>
     a90:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1982+0x1>
     a94:	99 bd       	out	0x29, r25	; 41
     a96:	88 bd       	out	0x28, r24	; 40
>>>>>>> Stashed changes
	
	return 0;
     ac4:	45 c0       	rjmp	.+138    	; 0xb50 <__stack+0x2f1>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;
<<<<<<< Updated upstream
     ac6:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1817>
     aca:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1817+0x1>
     ace:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1817+0x2>
     ad2:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1817+0x3>
     ad6:	d7 01       	movw	r26, r14
     ad8:	c6 01       	movw	r24, r12
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	8c 0d       	add	r24, r12
     ae4:	9d 1d       	adc	r25, r13
     ae6:	ae 1d       	adc	r26, r14
     ae8:	bf 1d       	adc	r27, r15
     aea:	ac 01       	movw	r20, r24
     aec:	bd 01       	movw	r22, r26
     aee:	44 0f       	add	r20, r20
     af0:	55 1f       	adc	r21, r21
     af2:	66 1f       	adc	r22, r22
     af4:	77 1f       	adc	r23, r23
     af6:	44 0f       	add	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	66 1f       	adc	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	8c 01       	movw	r16, r24
     b00:	9d 01       	movw	r18, r26
     b02:	04 0f       	add	r16, r20
     b04:	15 1f       	adc	r17, r21
     b06:	26 1f       	adc	r18, r22
     b08:	37 1f       	adc	r19, r23
     b0a:	c9 01       	movw	r24, r18
     b0c:	b8 01       	movw	r22, r16
     b0e:	24 e6       	ldi	r18, 0x64	; 100
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	0e 94 98 08 	call	0x1130	; 0x1130 <__udivmodsi4>
     b1a:	c2 0e       	add	r12, r18
     b1c:	d3 1e       	adc	r13, r19
     b1e:	e4 1e       	adc	r14, r20
     b20:	f5 1e       	adc	r15, r21
     b22:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1817>
     b26:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1817+0x1>
     b2a:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1817+0x2>
     b2e:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1817+0x3>
=======
     a9a:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1983>
     a9e:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1983+0x1>
     aa2:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1983+0x2>
     aa6:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1983+0x3>
     aaa:	d7 01       	movw	r26, r14
     aac:	c6 01       	movw	r24, r12
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	aa 1f       	adc	r26, r26
     ab4:	bb 1f       	adc	r27, r27
     ab6:	8c 0d       	add	r24, r12
     ab8:	9d 1d       	adc	r25, r13
     aba:	ae 1d       	adc	r26, r14
     abc:	bf 1d       	adc	r27, r15
     abe:	ac 01       	movw	r20, r24
     ac0:	bd 01       	movw	r22, r26
     ac2:	44 0f       	add	r20, r20
     ac4:	55 1f       	adc	r21, r21
     ac6:	66 1f       	adc	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	44 0f       	add	r20, r20
     acc:	55 1f       	adc	r21, r21
     ace:	66 1f       	adc	r22, r22
     ad0:	77 1f       	adc	r23, r23
     ad2:	8c 01       	movw	r16, r24
     ad4:	9d 01       	movw	r18, r26
     ad6:	04 0f       	add	r16, r20
     ad8:	15 1f       	adc	r17, r21
     ada:	26 1f       	adc	r18, r22
     adc:	37 1f       	adc	r19, r23
     ade:	c9 01       	movw	r24, r18
     ae0:	b8 01       	movw	r22, r16
     ae2:	24 e6       	ldi	r18, 0x64	; 100
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodsi4>
     aee:	c2 0e       	add	r12, r18
     af0:	d3 1e       	adc	r13, r19
     af2:	e4 1e       	adc	r14, r20
     af4:	f5 1e       	adc	r15, r21
     af6:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1983>
     afa:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1983+0x1>
     afe:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1983+0x2>
     b02:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1983+0x3>
>>>>>>> Stashed changes
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
<<<<<<< Updated upstream
     b32:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1816>
     b36:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1816+0x1>
     b3a:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1816+0x2>
     b3e:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1816+0x3>
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	94 46       	sbci	r25, 0x64	; 100
     b46:	a1 05       	cpc	r26, r1
     b48:	b1 05       	cpc	r27, r1
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <__stack+0x2ef>
     b4c:	9d cf       	rjmp	.-198    	; 0xa88 <__stack+0x229>
     b4e:	7d cf       	rjmp	.-262    	; 0xa4a <__stack+0x1eb>
=======
     b06:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1982>
     b0a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1982+0x1>
     b0e:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1982+0x2>
     b12:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1982+0x3>
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	94 46       	sbci	r25, 0x64	; 100
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <__stack+0x2c3>
     b20:	9d cf       	rjmp	.-198    	; 0xa5c <__stack+0x1fd>
     b22:	7d cf       	rjmp	.-262    	; 0xa1e <__stack+0x1bf>
>>>>>>> Stashed changes
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
	OCR1B = leftMotorSpeed;							//And do the same for the left one
	
	return 0;
}
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	67 96       	adiw	r28, 0x17	; 23
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	7f 90       	pop	r7
     b7a:	6f 90       	pop	r6
     b7c:	5f 90       	pop	r5
     b7e:	4f 90       	pop	r4
     b80:	3f 90       	pop	r3
     b82:	2f 90       	pop	r2
     b84:	08 95       	ret

00000b86 <main>:
	return 0;							//If going backwards or standing still
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     b86:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     b88:	0e 94 66 00 	call	0xcc	; 0xcc <init_micros>
	
	init_motor();
     b8c:	0e 94 3a 01 	call	0x274	; 0x274 <init_motor>
	init_LED();
     b90:	0e 94 5f 00 	call	0xbe	; 0xbe <init_LED>
	//-----------------------
	
	while(1){
		
		motorDriver(driveSpeed(), driveDirection(), globalTurnDirection);
     b94:	0e 94 56 00 	call	0xac	; 0xac <driveDirection>
     b98:	8c 01       	movw	r16, r24
     b9a:	0e 94 49 00 	call	0x92	; 0x92 <driveSpeed>
     b9e:	39 2f       	mov	r19, r25
     ba0:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <globalTurnDirection>
     ba4:	0e 2c       	mov	r0, r14
     ba6:	00 0c       	add	r0, r0
     ba8:	ff 08       	sbc	r15, r15
     baa:	28 2f       	mov	r18, r24
     bac:	99 0f       	add	r25, r25
     bae:	99 0b       	sbc	r25, r25
     bb0:	49 2f       	mov	r20, r25
     bb2:	59 2f       	mov	r21, r25
     bb4:	69 2f       	mov	r22, r25
     bb6:	79 2f       	mov	r23, r25
     bb8:	89 2f       	mov	r24, r25
     bba:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motorDriver>
     bbe:	ea cf       	rjmp	.-44     	; 0xb94 <main+0xe>

00000bc0 <__subsf3>:
     bc0:	50 58       	subi	r21, 0x80	; 128

00000bc2 <__addsf3>:
     bc2:	bb 27       	eor	r27, r27
     bc4:	aa 27       	eor	r26, r26
     bc6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3x>
     bca:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_round>
     bce:	0e 94 88 07 	call	0xf10	; 0xf10 <__fp_pscA>
     bd2:	38 f0       	brcs	.+14     	; 0xbe2 <__addsf3+0x20>
     bd4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscB>
     bd8:	20 f0       	brcs	.+8      	; 0xbe2 <__addsf3+0x20>
     bda:	39 f4       	brne	.+14     	; 0xbea <__addsf3+0x28>
     bdc:	9f 3f       	cpi	r25, 0xFF	; 255
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__addsf3+0x24>
     be0:	26 f4       	brtc	.+8      	; 0xbea <__addsf3+0x28>
     be2:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_nan>
     be6:	0e f4       	brtc	.+2      	; 0xbea <__addsf3+0x28>
     be8:	e0 95       	com	r30
     bea:	e7 fb       	bst	r30, 7
     bec:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_inf>

00000bf0 <__addsf3x>:
     bf0:	e9 2f       	mov	r30, r25
     bf2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_split3>
     bf6:	58 f3       	brcs	.-42     	; 0xbce <__addsf3+0xc>
     bf8:	ba 17       	cp	r27, r26
     bfa:	62 07       	cpc	r22, r18
     bfc:	73 07       	cpc	r23, r19
     bfe:	84 07       	cpc	r24, r20
     c00:	95 07       	cpc	r25, r21
     c02:	20 f0       	brcs	.+8      	; 0xc0c <__addsf3x+0x1c>
     c04:	79 f4       	brne	.+30     	; 0xc24 <__addsf3x+0x34>
     c06:	a6 f5       	brtc	.+104    	; 0xc70 <__addsf3x+0x80>
     c08:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_zero>
     c0c:	0e f4       	brtc	.+2      	; 0xc10 <__addsf3x+0x20>
     c0e:	e0 95       	com	r30
     c10:	0b 2e       	mov	r0, r27
     c12:	ba 2f       	mov	r27, r26
     c14:	a0 2d       	mov	r26, r0
     c16:	0b 01       	movw	r0, r22
     c18:	b9 01       	movw	r22, r18
     c1a:	90 01       	movw	r18, r0
     c1c:	0c 01       	movw	r0, r24
     c1e:	ca 01       	movw	r24, r20
     c20:	a0 01       	movw	r20, r0
     c22:	11 24       	eor	r1, r1
     c24:	ff 27       	eor	r31, r31
     c26:	59 1b       	sub	r21, r25
     c28:	99 f0       	breq	.+38     	; 0xc50 <__addsf3x+0x60>
     c2a:	59 3f       	cpi	r21, 0xF9	; 249
     c2c:	50 f4       	brcc	.+20     	; 0xc42 <__addsf3x+0x52>
     c2e:	50 3e       	cpi	r21, 0xE0	; 224
     c30:	68 f1       	brcs	.+90     	; 0xc8c <__addsf3x+0x9c>
     c32:	1a 16       	cp	r1, r26
     c34:	f0 40       	sbci	r31, 0x00	; 0
     c36:	a2 2f       	mov	r26, r18
     c38:	23 2f       	mov	r18, r19
     c3a:	34 2f       	mov	r19, r20
     c3c:	44 27       	eor	r20, r20
     c3e:	58 5f       	subi	r21, 0xF8	; 248
     c40:	f3 cf       	rjmp	.-26     	; 0xc28 <__addsf3x+0x38>
     c42:	46 95       	lsr	r20
     c44:	37 95       	ror	r19
     c46:	27 95       	ror	r18
     c48:	a7 95       	ror	r26
     c4a:	f0 40       	sbci	r31, 0x00	; 0
     c4c:	53 95       	inc	r21
     c4e:	c9 f7       	brne	.-14     	; 0xc42 <__addsf3x+0x52>
     c50:	7e f4       	brtc	.+30     	; 0xc70 <__addsf3x+0x80>
     c52:	1f 16       	cp	r1, r31
     c54:	ba 0b       	sbc	r27, r26
     c56:	62 0b       	sbc	r22, r18
     c58:	73 0b       	sbc	r23, r19
     c5a:	84 0b       	sbc	r24, r20
     c5c:	ba f0       	brmi	.+46     	; 0xc8c <__addsf3x+0x9c>
     c5e:	91 50       	subi	r25, 0x01	; 1
     c60:	a1 f0       	breq	.+40     	; 0xc8a <__addsf3x+0x9a>
     c62:	ff 0f       	add	r31, r31
     c64:	bb 1f       	adc	r27, r27
     c66:	66 1f       	adc	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	88 1f       	adc	r24, r24
     c6c:	c2 f7       	brpl	.-16     	; 0xc5e <__addsf3x+0x6e>
     c6e:	0e c0       	rjmp	.+28     	; 0xc8c <__addsf3x+0x9c>
     c70:	ba 0f       	add	r27, r26
     c72:	62 1f       	adc	r22, r18
     c74:	73 1f       	adc	r23, r19
     c76:	84 1f       	adc	r24, r20
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__addsf3x+0x9c>
     c7a:	87 95       	ror	r24
     c7c:	77 95       	ror	r23
     c7e:	67 95       	ror	r22
     c80:	b7 95       	ror	r27
     c82:	f7 95       	ror	r31
     c84:	9e 3f       	cpi	r25, 0xFE	; 254
     c86:	08 f0       	brcs	.+2      	; 0xc8a <__addsf3x+0x9a>
     c88:	b0 cf       	rjmp	.-160    	; 0xbea <__addsf3+0x28>
     c8a:	93 95       	inc	r25
     c8c:	88 0f       	add	r24, r24
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__addsf3x+0xa2>
     c90:	99 27       	eor	r25, r25
     c92:	ee 0f       	add	r30, r30
     c94:	97 95       	ror	r25
     c96:	87 95       	ror	r24
     c98:	08 95       	ret

00000c9a <__divsf3>:
     c9a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divsf3x>
     c9e:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_round>
     ca2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscB>
     ca6:	58 f0       	brcs	.+22     	; 0xcbe <__divsf3+0x24>
     ca8:	0e 94 88 07 	call	0xf10	; 0xf10 <__fp_pscA>
     cac:	40 f0       	brcs	.+16     	; 0xcbe <__divsf3+0x24>
     cae:	29 f4       	brne	.+10     	; 0xcba <__divsf3+0x20>
     cb0:	5f 3f       	cpi	r21, 0xFF	; 255
     cb2:	29 f0       	breq	.+10     	; 0xcbe <__divsf3+0x24>
     cb4:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_inf>
     cb8:	51 11       	cpse	r21, r1
     cba:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>
     cbe:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_nan>

00000cc2 <__divsf3x>:
     cc2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_split3>
     cc6:	68 f3       	brcs	.-38     	; 0xca2 <__divsf3+0x8>

00000cc8 <__divsf3_pse>:
     cc8:	99 23       	and	r25, r25
     cca:	b1 f3       	breq	.-20     	; 0xcb8 <__divsf3+0x1e>
     ccc:	55 23       	and	r21, r21
     cce:	91 f3       	breq	.-28     	; 0xcb4 <__divsf3+0x1a>
     cd0:	95 1b       	sub	r25, r21
     cd2:	55 0b       	sbc	r21, r21
     cd4:	bb 27       	eor	r27, r27
     cd6:	aa 27       	eor	r26, r26
     cd8:	62 17       	cp	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	38 f0       	brcs	.+14     	; 0xcee <__divsf3_pse+0x26>
     ce0:	9f 5f       	subi	r25, 0xFF	; 255
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	22 0f       	add	r18, r18
     ce6:	33 1f       	adc	r19, r19
     ce8:	44 1f       	adc	r20, r20
     cea:	aa 1f       	adc	r26, r26
     cec:	a9 f3       	breq	.-22     	; 0xcd8 <__divsf3_pse+0x10>
     cee:	35 d0       	rcall	.+106    	; 0xd5a <__divsf3_pse+0x92>
     cf0:	0e 2e       	mov	r0, r30
     cf2:	3a f0       	brmi	.+14     	; 0xd02 <__divsf3_pse+0x3a>
     cf4:	e0 e8       	ldi	r30, 0x80	; 128
     cf6:	32 d0       	rcall	.+100    	; 0xd5c <__divsf3_pse+0x94>
     cf8:	91 50       	subi	r25, 0x01	; 1
     cfa:	50 40       	sbci	r21, 0x00	; 0
     cfc:	e6 95       	lsr	r30
     cfe:	00 1c       	adc	r0, r0
     d00:	ca f7       	brpl	.-14     	; 0xcf4 <__divsf3_pse+0x2c>
     d02:	2b d0       	rcall	.+86     	; 0xd5a <__divsf3_pse+0x92>
     d04:	fe 2f       	mov	r31, r30
     d06:	29 d0       	rcall	.+82     	; 0xd5a <__divsf3_pse+0x92>
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	bb 1f       	adc	r27, r27
     d10:	26 17       	cp	r18, r22
     d12:	37 07       	cpc	r19, r23
     d14:	48 07       	cpc	r20, r24
     d16:	ab 07       	cpc	r26, r27
     d18:	b0 e8       	ldi	r27, 0x80	; 128
     d1a:	09 f0       	breq	.+2      	; 0xd1e <__divsf3_pse+0x56>
     d1c:	bb 0b       	sbc	r27, r27
     d1e:	80 2d       	mov	r24, r0
     d20:	bf 01       	movw	r22, r30
     d22:	ff 27       	eor	r31, r31
     d24:	93 58       	subi	r25, 0x83	; 131
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	3a f0       	brmi	.+14     	; 0xd38 <__divsf3_pse+0x70>
     d2a:	9e 3f       	cpi	r25, 0xFE	; 254
     d2c:	51 05       	cpc	r21, r1
     d2e:	78 f0       	brcs	.+30     	; 0xd4e <__divsf3_pse+0x86>
     d30:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_inf>
     d34:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>
     d38:	5f 3f       	cpi	r21, 0xFF	; 255
     d3a:	e4 f3       	brlt	.-8      	; 0xd34 <__divsf3_pse+0x6c>
     d3c:	98 3e       	cpi	r25, 0xE8	; 232
     d3e:	d4 f3       	brlt	.-12     	; 0xd34 <__divsf3_pse+0x6c>
     d40:	86 95       	lsr	r24
     d42:	77 95       	ror	r23
     d44:	67 95       	ror	r22
     d46:	b7 95       	ror	r27
     d48:	f7 95       	ror	r31
     d4a:	9f 5f       	subi	r25, 0xFF	; 255
     d4c:	c9 f7       	brne	.-14     	; 0xd40 <__divsf3_pse+0x78>
     d4e:	88 0f       	add	r24, r24
     d50:	91 1d       	adc	r25, r1
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	97 f9       	bld	r25, 7
     d58:	08 95       	ret
     d5a:	e1 e0       	ldi	r30, 0x01	; 1
     d5c:	66 0f       	add	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	bb 1f       	adc	r27, r27
     d64:	62 17       	cp	r22, r18
     d66:	73 07       	cpc	r23, r19
     d68:	84 07       	cpc	r24, r20
     d6a:	ba 07       	cpc	r27, r26
     d6c:	20 f0       	brcs	.+8      	; 0xd76 <__divsf3_pse+0xae>
     d6e:	62 1b       	sub	r22, r18
     d70:	73 0b       	sbc	r23, r19
     d72:	84 0b       	sbc	r24, r20
     d74:	ba 0b       	sbc	r27, r26
     d76:	ee 1f       	adc	r30, r30
     d78:	88 f7       	brcc	.-30     	; 0xd5c <__divsf3_pse+0x94>
     d7a:	e0 95       	com	r30
     d7c:	08 95       	ret

00000d7e <__fixunssfsi>:
     d7e:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_splitA>
     d82:	88 f0       	brcs	.+34     	; 0xda6 <__fixunssfsi+0x28>
     d84:	9f 57       	subi	r25, 0x7F	; 127
     d86:	98 f0       	brcs	.+38     	; 0xdae <__fixunssfsi+0x30>
     d88:	b9 2f       	mov	r27, r25
     d8a:	99 27       	eor	r25, r25
     d8c:	b7 51       	subi	r27, 0x17	; 23
     d8e:	b0 f0       	brcs	.+44     	; 0xdbc <__fixunssfsi+0x3e>
     d90:	e1 f0       	breq	.+56     	; 0xdca <__fixunssfsi+0x4c>
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	1a f0       	brmi	.+6      	; 0xda2 <__fixunssfsi+0x24>
     d9c:	ba 95       	dec	r27
     d9e:	c9 f7       	brne	.-14     	; 0xd92 <__fixunssfsi+0x14>
     da0:	14 c0       	rjmp	.+40     	; 0xdca <__fixunssfsi+0x4c>
     da2:	b1 30       	cpi	r27, 0x01	; 1
     da4:	91 f0       	breq	.+36     	; 0xdca <__fixunssfsi+0x4c>
     da6:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_zero>
     daa:	b1 e0       	ldi	r27, 0x01	; 1
     dac:	08 95       	ret
     dae:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_zero>
     db2:	67 2f       	mov	r22, r23
     db4:	78 2f       	mov	r23, r24
     db6:	88 27       	eor	r24, r24
     db8:	b8 5f       	subi	r27, 0xF8	; 248
     dba:	39 f0       	breq	.+14     	; 0xdca <__fixunssfsi+0x4c>
     dbc:	b9 3f       	cpi	r27, 0xF9	; 249
     dbe:	cc f3       	brlt	.-14     	; 0xdb2 <__fixunssfsi+0x34>
     dc0:	86 95       	lsr	r24
     dc2:	77 95       	ror	r23
     dc4:	67 95       	ror	r22
     dc6:	b3 95       	inc	r27
     dc8:	d9 f7       	brne	.-10     	; 0xdc0 <__fixunssfsi+0x42>
     dca:	3e f4       	brtc	.+14     	; 0xdda <__fixunssfsi+0x5c>
     dcc:	90 95       	com	r25
     dce:	80 95       	com	r24
     dd0:	70 95       	com	r23
     dd2:	61 95       	neg	r22
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	08 95       	ret

00000ddc <__floatdisf>:
     ddc:	97 fb       	bst	r25, 7
     dde:	16 f4       	brtc	.+4      	; 0xde4 <__floatdisf+0x8>
     de0:	0e 94 78 07 	call	0xef0	; 0xef0 <__fp_negdi>
     de4:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_di2sf>

00000de8 <__floatunsisf>:
     de8:	e8 94       	clt
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <__floatsisf+0x12>

00000dec <__floatsisf>:
     dec:	97 fb       	bst	r25, 7
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__floatsisf+0x12>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	99 23       	and	r25, r25
     e00:	a9 f0       	breq	.+42     	; 0xe2c <__floatsisf+0x40>
     e02:	f9 2f       	mov	r31, r25
     e04:	96 e9       	ldi	r25, 0x96	; 150
     e06:	bb 27       	eor	r27, r27
     e08:	93 95       	inc	r25
     e0a:	f6 95       	lsr	r31
     e0c:	87 95       	ror	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b7 95       	ror	r27
     e14:	f1 11       	cpse	r31, r1
     e16:	f8 cf       	rjmp	.-16     	; 0xe08 <__floatsisf+0x1c>
     e18:	fa f4       	brpl	.+62     	; 0xe58 <__floatsisf+0x6c>
     e1a:	bb 0f       	add	r27, r27
     e1c:	11 f4       	brne	.+4      	; 0xe22 <__floatsisf+0x36>
     e1e:	60 ff       	sbrs	r22, 0
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <__floatsisf+0x6c>
     e22:	6f 5f       	subi	r22, 0xFF	; 255
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	8f 4f       	sbci	r24, 0xFF	; 255
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	16 c0       	rjmp	.+44     	; 0xe58 <__floatsisf+0x6c>
     e2c:	88 23       	and	r24, r24
     e2e:	11 f0       	breq	.+4      	; 0xe34 <__floatsisf+0x48>
     e30:	96 e9       	ldi	r25, 0x96	; 150
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <__floatsisf+0x6a>
     e34:	77 23       	and	r23, r23
     e36:	21 f0       	breq	.+8      	; 0xe40 <__floatsisf+0x54>
     e38:	9e e8       	ldi	r25, 0x8E	; 142
     e3a:	87 2f       	mov	r24, r23
     e3c:	76 2f       	mov	r23, r22
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <__floatsisf+0x5e>
     e40:	66 23       	and	r22, r22
     e42:	71 f0       	breq	.+28     	; 0xe60 <__floatsisf+0x74>
     e44:	96 e8       	ldi	r25, 0x86	; 134
     e46:	86 2f       	mov	r24, r22
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	2a f0       	brmi	.+10     	; 0xe58 <__floatsisf+0x6c>
     e4e:	9a 95       	dec	r25
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	da f7       	brpl	.-10     	; 0xe4e <__floatsisf+0x62>
     e58:	88 0f       	add	r24, r24
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	97 f9       	bld	r25, 7
     e60:	08 95       	ret

00000e62 <__floatundisf>:
     e62:	e8 94       	clt

00000e64 <__fp_di2sf>:
     e64:	f9 2f       	mov	r31, r25
     e66:	96 eb       	ldi	r25, 0xB6	; 182
     e68:	ff 23       	and	r31, r31
     e6a:	81 f0       	breq	.+32     	; 0xe8c <__fp_di2sf+0x28>
     e6c:	12 16       	cp	r1, r18
     e6e:	13 06       	cpc	r1, r19
     e70:	14 06       	cpc	r1, r20
     e72:	44 0b       	sbc	r20, r20
     e74:	93 95       	inc	r25
     e76:	f6 95       	lsr	r31
     e78:	87 95       	ror	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	57 95       	ror	r21
     e80:	40 40       	sbci	r20, 0x00	; 0
     e82:	ff 23       	and	r31, r31
     e84:	b9 f7       	brne	.-18     	; 0xe74 <__fp_di2sf+0x10>
     e86:	1b c0       	rjmp	.+54     	; 0xebe <__fp_di2sf+0x5a>
     e88:	99 27       	eor	r25, r25
     e8a:	08 95       	ret
     e8c:	88 23       	and	r24, r24
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fp_di2sf+0x40>
     e90:	98 50       	subi	r25, 0x08	; 8
     e92:	d2 f7       	brpl	.-12     	; 0xe88 <__fp_di2sf+0x24>
     e94:	87 2b       	or	r24, r23
     e96:	76 2f       	mov	r23, r22
     e98:	65 2f       	mov	r22, r21
     e9a:	54 2f       	mov	r21, r20
     e9c:	43 2f       	mov	r20, r19
     e9e:	32 2f       	mov	r19, r18
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	b1 f3       	breq	.-20     	; 0xe90 <__fp_di2sf+0x2c>
     ea4:	12 16       	cp	r1, r18
     ea6:	13 06       	cpc	r1, r19
     ea8:	14 06       	cpc	r1, r20
     eaa:	44 0b       	sbc	r20, r20
     eac:	88 23       	and	r24, r24
     eae:	3a f0       	brmi	.+14     	; 0xebe <__fp_di2sf+0x5a>
     eb0:	9a 95       	dec	r25
     eb2:	44 0f       	add	r20, r20
     eb4:	55 1f       	adc	r21, r21
     eb6:	66 1f       	adc	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	ca f7       	brpl	.-14     	; 0xeb0 <__fp_di2sf+0x4c>
     ebe:	55 23       	and	r21, r21
     ec0:	4a f4       	brpl	.+18     	; 0xed4 <__fp_di2sf+0x70>
     ec2:	44 0f       	add	r20, r20
     ec4:	55 1f       	adc	r21, r21
     ec6:	11 f4       	brne	.+4      	; 0xecc <__fp_di2sf+0x68>
     ec8:	60 ff       	sbrs	r22, 0
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <__fp_di2sf+0x70>
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	8f 4f       	sbci	r24, 0xFF	; 255
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	88 0f       	add	r24, r24
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	97 f9       	bld	r25, 7
     edc:	08 95       	ret

00000ede <__fp_inf>:
     ede:	97 f9       	bld	r25, 7
     ee0:	9f 67       	ori	r25, 0x7F	; 127
     ee2:	80 e8       	ldi	r24, 0x80	; 128
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	08 95       	ret

00000eea <__fp_nan>:
     eea:	9f ef       	ldi	r25, 0xFF	; 255
     eec:	80 ec       	ldi	r24, 0xC0	; 192
     eee:	08 95       	ret

00000ef0 <__fp_negdi>:
     ef0:	90 95       	com	r25
     ef2:	80 95       	com	r24
     ef4:	70 95       	com	r23
     ef6:	60 95       	com	r22
     ef8:	50 95       	com	r21
     efa:	40 95       	com	r20
     efc:	30 95       	com	r19
     efe:	21 95       	neg	r18
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	4f 4f       	sbci	r20, 0xFF	; 255
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	6f 4f       	sbci	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	08 95       	ret

00000f10 <__fp_pscA>:
     f10:	00 24       	eor	r0, r0
     f12:	0a 94       	dec	r0
     f14:	16 16       	cp	r1, r22
     f16:	17 06       	cpc	r1, r23
     f18:	18 06       	cpc	r1, r24
     f1a:	09 06       	cpc	r0, r25
     f1c:	08 95       	ret

00000f1e <__fp_pscB>:
     f1e:	00 24       	eor	r0, r0
     f20:	0a 94       	dec	r0
     f22:	12 16       	cp	r1, r18
     f24:	13 06       	cpc	r1, r19
     f26:	14 06       	cpc	r1, r20
     f28:	05 06       	cpc	r0, r21
     f2a:	08 95       	ret

00000f2c <__fp_round>:
     f2c:	09 2e       	mov	r0, r25
     f2e:	03 94       	inc	r0
     f30:	00 0c       	add	r0, r0
     f32:	11 f4       	brne	.+4      	; 0xf38 <__fp_round+0xc>
     f34:	88 23       	and	r24, r24
     f36:	52 f0       	brmi	.+20     	; 0xf4c <__fp_round+0x20>
     f38:	bb 0f       	add	r27, r27
     f3a:	40 f4       	brcc	.+16     	; 0xf4c <__fp_round+0x20>
     f3c:	bf 2b       	or	r27, r31
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__fp_round+0x18>
     f40:	60 ff       	sbrs	r22, 0
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <__fp_round+0x20>
     f44:	6f 5f       	subi	r22, 0xFF	; 255
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	8f 4f       	sbci	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	08 95       	ret

00000f4e <__fp_split3>:
     f4e:	57 fd       	sbrc	r21, 7
     f50:	90 58       	subi	r25, 0x80	; 128
     f52:	44 0f       	add	r20, r20
     f54:	55 1f       	adc	r21, r21
     f56:	59 f0       	breq	.+22     	; 0xf6e <__fp_splitA+0x10>
     f58:	5f 3f       	cpi	r21, 0xFF	; 255
     f5a:	71 f0       	breq	.+28     	; 0xf78 <__fp_splitA+0x1a>
     f5c:	47 95       	ror	r20

00000f5e <__fp_splitA>:
     f5e:	88 0f       	add	r24, r24
     f60:	97 fb       	bst	r25, 7
     f62:	99 1f       	adc	r25, r25
     f64:	61 f0       	breq	.+24     	; 0xf7e <__fp_splitA+0x20>
     f66:	9f 3f       	cpi	r25, 0xFF	; 255
     f68:	79 f0       	breq	.+30     	; 0xf88 <__fp_splitA+0x2a>
     f6a:	87 95       	ror	r24
     f6c:	08 95       	ret
     f6e:	12 16       	cp	r1, r18
     f70:	13 06       	cpc	r1, r19
     f72:	14 06       	cpc	r1, r20
     f74:	55 1f       	adc	r21, r21
     f76:	f2 cf       	rjmp	.-28     	; 0xf5c <__fp_split3+0xe>
     f78:	46 95       	lsr	r20
     f7a:	f1 df       	rcall	.-30     	; 0xf5e <__fp_splitA>
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <__fp_splitA+0x30>
     f7e:	16 16       	cp	r1, r22
     f80:	17 06       	cpc	r1, r23
     f82:	18 06       	cpc	r1, r24
     f84:	99 1f       	adc	r25, r25
     f86:	f1 cf       	rjmp	.-30     	; 0xf6a <__fp_splitA+0xc>
     f88:	86 95       	lsr	r24
     f8a:	71 05       	cpc	r23, r1
     f8c:	61 05       	cpc	r22, r1
     f8e:	08 94       	sec
     f90:	08 95       	ret

00000f92 <__fp_zero>:
     f92:	e8 94       	clt

00000f94 <__fp_szero>:
     f94:	bb 27       	eor	r27, r27
     f96:	66 27       	eor	r22, r22
     f98:	77 27       	eor	r23, r23
     f9a:	cb 01       	movw	r24, r22
     f9c:	97 f9       	bld	r25, 7
     f9e:	08 95       	ret

00000fa0 <__mulsf3>:
     fa0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__mulsf3x>
     fa4:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_round>
     fa8:	0e 94 88 07 	call	0xf10	; 0xf10 <__fp_pscA>
     fac:	38 f0       	brcs	.+14     	; 0xfbc <__mulsf3+0x1c>
     fae:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscB>
     fb2:	20 f0       	brcs	.+8      	; 0xfbc <__mulsf3+0x1c>
     fb4:	95 23       	and	r25, r21
     fb6:	11 f0       	breq	.+4      	; 0xfbc <__mulsf3+0x1c>
     fb8:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_inf>
     fbc:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_nan>
     fc0:	11 24       	eor	r1, r1
     fc2:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>

00000fc6 <__mulsf3x>:
     fc6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_split3>
     fca:	70 f3       	brcs	.-36     	; 0xfa8 <__mulsf3+0x8>

00000fcc <__mulsf3_pse>:
     fcc:	95 9f       	mul	r25, r21
     fce:	c1 f3       	breq	.-16     	; 0xfc0 <__mulsf3+0x20>
     fd0:	95 0f       	add	r25, r21
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	55 1f       	adc	r21, r21
     fd6:	62 9f       	mul	r22, r18
     fd8:	f0 01       	movw	r30, r0
     fda:	72 9f       	mul	r23, r18
     fdc:	bb 27       	eor	r27, r27
     fde:	f0 0d       	add	r31, r0
     fe0:	b1 1d       	adc	r27, r1
     fe2:	63 9f       	mul	r22, r19
     fe4:	aa 27       	eor	r26, r26
     fe6:	f0 0d       	add	r31, r0
     fe8:	b1 1d       	adc	r27, r1
     fea:	aa 1f       	adc	r26, r26
     fec:	64 9f       	mul	r22, r20
     fee:	66 27       	eor	r22, r22
     ff0:	b0 0d       	add	r27, r0
     ff2:	a1 1d       	adc	r26, r1
     ff4:	66 1f       	adc	r22, r22
     ff6:	82 9f       	mul	r24, r18
     ff8:	22 27       	eor	r18, r18
     ffa:	b0 0d       	add	r27, r0
     ffc:	a1 1d       	adc	r26, r1
     ffe:	62 1f       	adc	r22, r18
    1000:	73 9f       	mul	r23, r19
    1002:	b0 0d       	add	r27, r0
    1004:	a1 1d       	adc	r26, r1
    1006:	62 1f       	adc	r22, r18
    1008:	83 9f       	mul	r24, r19
    100a:	a0 0d       	add	r26, r0
    100c:	61 1d       	adc	r22, r1
    100e:	22 1f       	adc	r18, r18
    1010:	74 9f       	mul	r23, r20
    1012:	33 27       	eor	r19, r19
    1014:	a0 0d       	add	r26, r0
    1016:	61 1d       	adc	r22, r1
    1018:	23 1f       	adc	r18, r19
    101a:	84 9f       	mul	r24, r20
    101c:	60 0d       	add	r22, r0
    101e:	21 1d       	adc	r18, r1
    1020:	82 2f       	mov	r24, r18
    1022:	76 2f       	mov	r23, r22
    1024:	6a 2f       	mov	r22, r26
    1026:	11 24       	eor	r1, r1
    1028:	9f 57       	subi	r25, 0x7F	; 127
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	9a f0       	brmi	.+38     	; 0x1054 <__mulsf3_pse+0x88>
    102e:	f1 f0       	breq	.+60     	; 0x106c <__mulsf3_pse+0xa0>
    1030:	88 23       	and	r24, r24
    1032:	4a f0       	brmi	.+18     	; 0x1046 <__mulsf3_pse+0x7a>
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	bb 1f       	adc	r27, r27
    103a:	66 1f       	adc	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	91 50       	subi	r25, 0x01	; 1
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__mulsf3_pse+0x64>
    1046:	9e 3f       	cpi	r25, 0xFE	; 254
    1048:	51 05       	cpc	r21, r1
    104a:	80 f0       	brcs	.+32     	; 0x106c <__mulsf3_pse+0xa0>
    104c:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_inf>
    1050:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>
    1054:	5f 3f       	cpi	r21, 0xFF	; 255
    1056:	e4 f3       	brlt	.-8      	; 0x1050 <__mulsf3_pse+0x84>
    1058:	98 3e       	cpi	r25, 0xE8	; 232
    105a:	d4 f3       	brlt	.-12     	; 0x1050 <__mulsf3_pse+0x84>
    105c:	86 95       	lsr	r24
    105e:	77 95       	ror	r23
    1060:	67 95       	ror	r22
    1062:	b7 95       	ror	r27
    1064:	f7 95       	ror	r31
    1066:	e7 95       	ror	r30
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	c1 f7       	brne	.-16     	; 0x105c <__mulsf3_pse+0x90>
    106c:	fe 2b       	or	r31, r30
    106e:	88 0f       	add	r24, r24
    1070:	91 1d       	adc	r25, r1
    1072:	96 95       	lsr	r25
    1074:	87 95       	ror	r24
    1076:	97 f9       	bld	r25, 7
    1078:	08 95       	ret
    107a:	19 f4       	brne	.+6      	; 0x1082 <__mulsf3_pse+0xb6>
    107c:	16 f4       	brtc	.+4      	; 0x1082 <__mulsf3_pse+0xb6>
    107e:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_nan>
    1082:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_mpack>

00001086 <sqrt>:
    1086:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_splitA>
    108a:	b8 f3       	brcs	.-18     	; 0x107a <__mulsf3_pse+0xae>
    108c:	99 23       	and	r25, r25
    108e:	c9 f3       	breq	.-14     	; 0x1082 <__mulsf3_pse+0xb6>
    1090:	b6 f3       	brts	.-20     	; 0x107e <__mulsf3_pse+0xb2>
    1092:	9f 57       	subi	r25, 0x7F	; 127
    1094:	55 0b       	sbc	r21, r21
    1096:	87 ff       	sbrs	r24, 7
    1098:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_norm2>
    109c:	00 24       	eor	r0, r0
    109e:	a0 e6       	ldi	r26, 0x60	; 96
    10a0:	40 ea       	ldi	r20, 0xA0	; 160
    10a2:	90 01       	movw	r18, r0
    10a4:	80 58       	subi	r24, 0x80	; 128
    10a6:	56 95       	lsr	r21
    10a8:	97 95       	ror	r25
    10aa:	28 f4       	brcc	.+10     	; 0x10b6 <sqrt+0x30>
    10ac:	80 5c       	subi	r24, 0xC0	; 192
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	20 f0       	brcs	.+8      	; 0x10be <sqrt+0x38>
    10b6:	26 17       	cp	r18, r22
    10b8:	37 07       	cpc	r19, r23
    10ba:	48 07       	cpc	r20, r24
    10bc:	30 f4       	brcc	.+12     	; 0x10ca <sqrt+0x44>
    10be:	62 1b       	sub	r22, r18
    10c0:	73 0b       	sbc	r23, r19
    10c2:	84 0b       	sbc	r24, r20
    10c4:	20 29       	or	r18, r0
    10c6:	31 29       	or	r19, r1
    10c8:	4a 2b       	or	r20, r26
    10ca:	a6 95       	lsr	r26
    10cc:	17 94       	ror	r1
    10ce:	07 94       	ror	r0
    10d0:	20 25       	eor	r18, r0
    10d2:	31 25       	eor	r19, r1
    10d4:	4a 27       	eor	r20, r26
    10d6:	58 f7       	brcc	.-42     	; 0x10ae <sqrt+0x28>
    10d8:	66 0f       	add	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	20 f0       	brcs	.+8      	; 0x10e8 <sqrt+0x62>
    10e0:	26 17       	cp	r18, r22
    10e2:	37 07       	cpc	r19, r23
    10e4:	48 07       	cpc	r20, r24
    10e6:	30 f4       	brcc	.+12     	; 0x10f4 <sqrt+0x6e>
    10e8:	62 0b       	sbc	r22, r18
    10ea:	73 0b       	sbc	r23, r19
    10ec:	84 0b       	sbc	r24, r20
    10ee:	20 0d       	add	r18, r0
    10f0:	31 1d       	adc	r19, r1
    10f2:	41 1d       	adc	r20, r1
    10f4:	a0 95       	com	r26
    10f6:	81 f7       	brne	.-32     	; 0x10d8 <sqrt+0x52>
    10f8:	b9 01       	movw	r22, r18
    10fa:	84 2f       	mov	r24, r20
    10fc:	91 58       	subi	r25, 0x81	; 129
    10fe:	88 0f       	add	r24, r24
    1100:	96 95       	lsr	r25
    1102:	87 95       	ror	r24
    1104:	08 95       	ret

00001106 <__fp_mpack>:
    1106:	9f 3f       	cpi	r25, 0xFF	; 255
    1108:	31 f0       	breq	.+12     	; 0x1116 <__fp_mpack_finite+0xc>

0000110a <__fp_mpack_finite>:
    110a:	91 50       	subi	r25, 0x01	; 1
    110c:	20 f4       	brcc	.+8      	; 0x1116 <__fp_mpack_finite+0xc>
    110e:	87 95       	ror	r24
    1110:	77 95       	ror	r23
    1112:	67 95       	ror	r22
    1114:	b7 95       	ror	r27
    1116:	88 0f       	add	r24, r24
    1118:	91 1d       	adc	r25, r1
    111a:	96 95       	lsr	r25
    111c:	87 95       	ror	r24
    111e:	97 f9       	bld	r25, 7
    1120:	08 95       	ret

00001122 <__fp_norm2>:
    1122:	91 50       	subi	r25, 0x01	; 1
    1124:	50 40       	sbci	r21, 0x00	; 0
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	d2 f7       	brpl	.-12     	; 0x1122 <__fp_norm2>
    112e:	08 95       	ret

00001130 <__udivmodsi4>:
    1130:	a1 e2       	ldi	r26, 0x21	; 33
    1132:	1a 2e       	mov	r1, r26
    1134:	aa 1b       	sub	r26, r26
    1136:	bb 1b       	sub	r27, r27
    1138:	fd 01       	movw	r30, r26
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <__udivmodsi4_ep>

0000113c <__udivmodsi4_loop>:
    113c:	aa 1f       	adc	r26, r26
    113e:	bb 1f       	adc	r27, r27
    1140:	ee 1f       	adc	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	a2 17       	cp	r26, r18
    1146:	b3 07       	cpc	r27, r19
    1148:	e4 07       	cpc	r30, r20
    114a:	f5 07       	cpc	r31, r21
    114c:	20 f0       	brcs	.+8      	; 0x1156 <__udivmodsi4_ep>
    114e:	a2 1b       	sub	r26, r18
    1150:	b3 0b       	sbc	r27, r19
    1152:	e4 0b       	sbc	r30, r20
    1154:	f5 0b       	sbc	r31, r21

00001156 <__udivmodsi4_ep>:
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	1a 94       	dec	r1
    1160:	69 f7       	brne	.-38     	; 0x113c <__udivmodsi4_loop>
    1162:	60 95       	com	r22
    1164:	70 95       	com	r23
    1166:	80 95       	com	r24
    1168:	90 95       	com	r25
    116a:	9b 01       	movw	r18, r22
    116c:	ac 01       	movw	r20, r24
    116e:	bd 01       	movw	r22, r26
    1170:	cf 01       	movw	r24, r30
    1172:	08 95       	ret

00001174 <__muldi3>:
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	1f 93       	push	r17
    117a:	0f 93       	push	r16
    117c:	9a 9d       	mul	r25, r10
    117e:	f0 2d       	mov	r31, r0
    1180:	21 9f       	mul	r18, r17
    1182:	f0 0d       	add	r31, r0
    1184:	8b 9d       	mul	r24, r11
    1186:	f0 0d       	add	r31, r0
    1188:	8a 9d       	mul	r24, r10
    118a:	e0 2d       	mov	r30, r0
    118c:	f1 0d       	add	r31, r1
    118e:	03 9f       	mul	r16, r19
    1190:	f0 0d       	add	r31, r0
    1192:	02 9f       	mul	r16, r18
    1194:	e0 0d       	add	r30, r0
    1196:	f1 1d       	adc	r31, r1
    1198:	4e 9d       	mul	r20, r14
    119a:	e0 0d       	add	r30, r0
    119c:	f1 1d       	adc	r31, r1
    119e:	5e 9d       	mul	r21, r14
    11a0:	f0 0d       	add	r31, r0
    11a2:	4f 9d       	mul	r20, r15
    11a4:	f0 0d       	add	r31, r0
    11a6:	7f 93       	push	r23
    11a8:	6f 93       	push	r22
    11aa:	bf 92       	push	r11
    11ac:	af 92       	push	r10
    11ae:	5f 93       	push	r21
    11b0:	4f 93       	push	r20
    11b2:	d5 01       	movw	r26, r10
    11b4:	0e 94 36 0a 	call	0x146c	; 0x146c <__umulhisi3>
    11b8:	8b 01       	movw	r16, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	d7 01       	movw	r26, r14
    11be:	0e 94 36 0a 	call	0x146c	; 0x146c <__umulhisi3>
    11c2:	eb 01       	movw	r28, r22
    11c4:	e8 0f       	add	r30, r24
    11c6:	f9 1f       	adc	r31, r25
    11c8:	d6 01       	movw	r26, r12
    11ca:	0e 94 0a 09 	call	0x1214	; 0x1214 <__muldi3_6>
    11ce:	2f 91       	pop	r18
    11d0:	3f 91       	pop	r19
    11d2:	d6 01       	movw	r26, r12
    11d4:	0e 94 36 0a 	call	0x146c	; 0x146c <__umulhisi3>
    11d8:	c6 0f       	add	r28, r22
    11da:	d7 1f       	adc	r29, r23
    11dc:	e8 1f       	adc	r30, r24
    11de:	f9 1f       	adc	r31, r25
    11e0:	af 91       	pop	r26
    11e2:	bf 91       	pop	r27
    11e4:	0e 94 0a 09 	call	0x1214	; 0x1214 <__muldi3_6>
    11e8:	2f 91       	pop	r18
    11ea:	3f 91       	pop	r19
    11ec:	0e 94 36 0a 	call	0x146c	; 0x146c <__umulhisi3>
    11f0:	c6 0f       	add	r28, r22
    11f2:	d7 1f       	adc	r29, r23
    11f4:	e8 1f       	adc	r30, r24
    11f6:	f9 1f       	adc	r31, r25
    11f8:	d6 01       	movw	r26, r12
    11fa:	0e 94 36 0a 	call	0x146c	; 0x146c <__umulhisi3>
    11fe:	e6 0f       	add	r30, r22
    1200:	f7 1f       	adc	r31, r23
    1202:	98 01       	movw	r18, r16
    1204:	be 01       	movw	r22, r28
    1206:	cf 01       	movw	r24, r30
    1208:	11 24       	eor	r1, r1
    120a:	0f 91       	pop	r16
    120c:	1f 91       	pop	r17
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <__muldi3_6>:
    1214:	0e 94 36 0a 	call	0x146c	; 0x146c <__umulhisi3>
    1218:	46 0f       	add	r20, r22
    121a:	57 1f       	adc	r21, r23
    121c:	c8 1f       	adc	r28, r24
    121e:	d9 1f       	adc	r29, r25
    1220:	08 f4       	brcc	.+2      	; 0x1224 <__muldi3_6+0x10>
    1222:	31 96       	adiw	r30, 0x01	; 1
    1224:	08 95       	ret

00001226 <__moddi3>:
    1226:	68 94       	set
    1228:	01 c0       	rjmp	.+2      	; 0x122c <__divdi3_moddi3>

0000122a <__divdi3>:
    122a:	e8 94       	clt

0000122c <__divdi3_moddi3>:
    122c:	f9 2f       	mov	r31, r25
    122e:	f1 2b       	or	r31, r17
    1230:	12 f0       	brmi	.+4      	; 0x1236 <__divdi3_moddi3+0xa>
    1232:	0c 94 47 09 	jmp	0x128e	; 0x128e <__udivdi3_umoddi3>
    1236:	a0 e0       	ldi	r26, 0x00	; 0
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e1 e2       	ldi	r30, 0x21	; 33
    123c:	f9 e0       	ldi	r31, 0x09	; 9
    123e:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__prologue_saves__+0xc>
    1242:	09 2e       	mov	r0, r25
    1244:	05 94       	asr	r0
    1246:	22 f4       	brpl	.+8      	; 0x1250 <__divdi3_moddi3+0x24>
    1248:	0e 94 a3 09 	call	0x1346	; 0x1346 <__negdi2>
    124c:	11 23       	and	r17, r17
    124e:	92 f4       	brpl	.+36     	; 0x1274 <__divdi3_moddi3+0x48>
    1250:	f0 e8       	ldi	r31, 0x80	; 128
    1252:	0f 26       	eor	r0, r31
    1254:	ff ef       	ldi	r31, 0xFF	; 255
    1256:	e0 94       	com	r14
    1258:	f0 94       	com	r15
    125a:	00 95       	com	r16
    125c:	10 95       	com	r17
    125e:	b0 94       	com	r11
    1260:	c0 94       	com	r12
    1262:	d0 94       	com	r13
    1264:	a1 94       	neg	r10
    1266:	bf 0a       	sbc	r11, r31
    1268:	cf 0a       	sbc	r12, r31
    126a:	df 0a       	sbc	r13, r31
    126c:	ef 0a       	sbc	r14, r31
    126e:	ff 0a       	sbc	r15, r31
    1270:	0f 0b       	sbc	r16, r31
    1272:	1f 0b       	sbc	r17, r31
    1274:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__udivmod64>
    1278:	07 fc       	sbrc	r0, 7
    127a:	0e 94 a3 09 	call	0x1346	; 0x1346 <__negdi2>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	ec e0       	ldi	r30, 0x0C	; 12
    1284:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__epilogue_restores__+0xc>

00001288 <__umoddi3>:
    1288:	68 94       	set
    128a:	01 c0       	rjmp	.+2      	; 0x128e <__udivdi3_umoddi3>

0000128c <__udivdi3>:
    128c:	e8 94       	clt

0000128e <__udivdi3_umoddi3>:
    128e:	8f 92       	push	r8
    1290:	9f 92       	push	r9
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__udivmod64>
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	9f 90       	pop	r9
    12a0:	8f 90       	pop	r8
    12a2:	08 95       	ret

000012a4 <__udivmod64>:
    12a4:	88 24       	eor	r8, r8
    12a6:	99 24       	eor	r9, r9
    12a8:	f4 01       	movw	r30, r8
    12aa:	e4 01       	movw	r28, r8
    12ac:	b0 e4       	ldi	r27, 0x40	; 64
    12ae:	9f 93       	push	r25
    12b0:	aa 27       	eor	r26, r26
    12b2:	9a 15       	cp	r25, r10
    12b4:	8b 04       	cpc	r8, r11
    12b6:	9c 04       	cpc	r9, r12
    12b8:	ed 05       	cpc	r30, r13
    12ba:	fe 05       	cpc	r31, r14
    12bc:	cf 05       	cpc	r28, r15
    12be:	d0 07       	cpc	r29, r16
    12c0:	a1 07       	cpc	r26, r17
    12c2:	98 f4       	brcc	.+38     	; 0x12ea <__udivmod64+0x46>
    12c4:	ad 2f       	mov	r26, r29
    12c6:	dc 2f       	mov	r29, r28
    12c8:	cf 2f       	mov	r28, r31
    12ca:	fe 2f       	mov	r31, r30
    12cc:	e9 2d       	mov	r30, r9
    12ce:	98 2c       	mov	r9, r8
    12d0:	89 2e       	mov	r8, r25
    12d2:	98 2f       	mov	r25, r24
    12d4:	87 2f       	mov	r24, r23
    12d6:	76 2f       	mov	r23, r22
    12d8:	65 2f       	mov	r22, r21
    12da:	54 2f       	mov	r21, r20
    12dc:	43 2f       	mov	r20, r19
    12de:	32 2f       	mov	r19, r18
    12e0:	22 27       	eor	r18, r18
    12e2:	b8 50       	subi	r27, 0x08	; 8
    12e4:	31 f7       	brne	.-52     	; 0x12b2 <__udivmod64+0xe>
    12e6:	bf 91       	pop	r27
    12e8:	27 c0       	rjmp	.+78     	; 0x1338 <__udivmod64+0x94>
    12ea:	1b 2e       	mov	r1, r27
    12ec:	bf 91       	pop	r27
    12ee:	bb 27       	eor	r27, r27
    12f0:	22 0f       	add	r18, r18
    12f2:	33 1f       	adc	r19, r19
    12f4:	44 1f       	adc	r20, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	66 1f       	adc	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	88 1f       	adc	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	88 1c       	adc	r8, r8
    1302:	99 1c       	adc	r9, r9
    1304:	ee 1f       	adc	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	cc 1f       	adc	r28, r28
    130a:	dd 1f       	adc	r29, r29
    130c:	aa 1f       	adc	r26, r26
    130e:	bb 1f       	adc	r27, r27
    1310:	8a 14       	cp	r8, r10
    1312:	9b 04       	cpc	r9, r11
    1314:	ec 05       	cpc	r30, r12
    1316:	fd 05       	cpc	r31, r13
    1318:	ce 05       	cpc	r28, r14
    131a:	df 05       	cpc	r29, r15
    131c:	a0 07       	cpc	r26, r16
    131e:	b1 07       	cpc	r27, r17
    1320:	48 f0       	brcs	.+18     	; 0x1334 <__udivmod64+0x90>
    1322:	8a 18       	sub	r8, r10
    1324:	9b 08       	sbc	r9, r11
    1326:	ec 09       	sbc	r30, r12
    1328:	fd 09       	sbc	r31, r13
    132a:	ce 09       	sbc	r28, r14
    132c:	df 09       	sbc	r29, r15
    132e:	a0 0b       	sbc	r26, r16
    1330:	b1 0b       	sbc	r27, r17
    1332:	21 60       	ori	r18, 0x01	; 1
    1334:	1a 94       	dec	r1
    1336:	e1 f6       	brne	.-72     	; 0x12f0 <__udivmod64+0x4c>
    1338:	2e f4       	brtc	.+10     	; 0x1344 <__udivmod64+0xa0>
    133a:	94 01       	movw	r18, r8
    133c:	af 01       	movw	r20, r30
    133e:	be 01       	movw	r22, r28
    1340:	cd 01       	movw	r24, r26
    1342:	00 0c       	add	r0, r0
    1344:	08 95       	ret

00001346 <__negdi2>:
    1346:	60 95       	com	r22
    1348:	70 95       	com	r23
    134a:	80 95       	com	r24
    134c:	90 95       	com	r25
    134e:	30 95       	com	r19
    1350:	40 95       	com	r20
    1352:	50 95       	com	r21
    1354:	21 95       	neg	r18
    1356:	3f 4f       	sbci	r19, 0xFF	; 255
    1358:	4f 4f       	sbci	r20, 0xFF	; 255
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	6f 4f       	sbci	r22, 0xFF	; 255
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	8f 4f       	sbci	r24, 0xFF	; 255
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	08 95       	ret

00001366 <__prologue_saves__>:
    1366:	2f 92       	push	r2
    1368:	3f 92       	push	r3
    136a:	4f 92       	push	r4
    136c:	5f 92       	push	r5
    136e:	6f 92       	push	r6
    1370:	7f 92       	push	r7
    1372:	8f 92       	push	r8
    1374:	9f 92       	push	r9
    1376:	af 92       	push	r10
    1378:	bf 92       	push	r11
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	ca 1b       	sub	r28, r26
    1390:	db 0b       	sbc	r29, r27
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	09 94       	ijmp

0000139e <__epilogue_restores__>:
    139e:	2a 88       	ldd	r2, Y+18	; 0x12
    13a0:	39 88       	ldd	r3, Y+17	; 0x11
    13a2:	48 88       	ldd	r4, Y+16	; 0x10
    13a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    13ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    13ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    13b0:	b9 84       	ldd	r11, Y+9	; 0x09
    13b2:	c8 84       	ldd	r12, Y+8	; 0x08
    13b4:	df 80       	ldd	r13, Y+7	; 0x07
    13b6:	ee 80       	ldd	r14, Y+6	; 0x06
    13b8:	fd 80       	ldd	r15, Y+5	; 0x05
    13ba:	0c 81       	ldd	r16, Y+4	; 0x04
    13bc:	1b 81       	ldd	r17, Y+3	; 0x03
    13be:	aa 81       	ldd	r26, Y+2	; 0x02
    13c0:	b9 81       	ldd	r27, Y+1	; 0x01
    13c2:	ce 0f       	add	r28, r30
    13c4:	d1 1d       	adc	r29, r1
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	ed 01       	movw	r28, r26
    13d2:	08 95       	ret

000013d4 <__ashldi3>:
    13d4:	0f 93       	push	r16
    13d6:	08 30       	cpi	r16, 0x08	; 8
    13d8:	90 f0       	brcs	.+36     	; 0x13fe <__ashldi3+0x2a>
    13da:	98 2f       	mov	r25, r24
    13dc:	87 2f       	mov	r24, r23
    13de:	76 2f       	mov	r23, r22
    13e0:	65 2f       	mov	r22, r21
    13e2:	54 2f       	mov	r21, r20
    13e4:	43 2f       	mov	r20, r19
    13e6:	32 2f       	mov	r19, r18
    13e8:	22 27       	eor	r18, r18
    13ea:	08 50       	subi	r16, 0x08	; 8
    13ec:	f4 cf       	rjmp	.-24     	; 0x13d6 <__ashldi3+0x2>
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	44 1f       	adc	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 95       	dec	r16
    1400:	b2 f7       	brpl	.-20     	; 0x13ee <__ashldi3+0x1a>
    1402:	0f 91       	pop	r16
    1404:	08 95       	ret

00001406 <__adddi3>:
    1406:	2a 0d       	add	r18, r10
    1408:	3b 1d       	adc	r19, r11
    140a:	4c 1d       	adc	r20, r12
    140c:	5d 1d       	adc	r21, r13
    140e:	6e 1d       	adc	r22, r14
    1410:	7f 1d       	adc	r23, r15
    1412:	80 1f       	adc	r24, r16
    1414:	91 1f       	adc	r25, r17
    1416:	08 95       	ret

00001418 <__adddi3_s8>:
    1418:	00 24       	eor	r0, r0
    141a:	a7 fd       	sbrc	r26, 7
    141c:	00 94       	com	r0
    141e:	2a 0f       	add	r18, r26
    1420:	30 1d       	adc	r19, r0
    1422:	40 1d       	adc	r20, r0
    1424:	50 1d       	adc	r21, r0
    1426:	60 1d       	adc	r22, r0
    1428:	70 1d       	adc	r23, r0
    142a:	80 1d       	adc	r24, r0
    142c:	90 1d       	adc	r25, r0
    142e:	08 95       	ret

00001430 <__subdi3>:
    1430:	2a 19       	sub	r18, r10
    1432:	3b 09       	sbc	r19, r11
    1434:	4c 09       	sbc	r20, r12
    1436:	5d 09       	sbc	r21, r13
    1438:	6e 09       	sbc	r22, r14
    143a:	7f 09       	sbc	r23, r15
    143c:	80 0b       	sbc	r24, r16
    143e:	91 0b       	sbc	r25, r17
    1440:	08 95       	ret

00001442 <__cmpdi2>:
    1442:	2a 15       	cp	r18, r10
    1444:	3b 05       	cpc	r19, r11
    1446:	4c 05       	cpc	r20, r12
    1448:	5d 05       	cpc	r21, r13
    144a:	6e 05       	cpc	r22, r14
    144c:	7f 05       	cpc	r23, r15
    144e:	80 07       	cpc	r24, r16
    1450:	91 07       	cpc	r25, r17
    1452:	08 95       	ret

00001454 <__cmpdi2_s8>:
    1454:	00 24       	eor	r0, r0
    1456:	a7 fd       	sbrc	r26, 7
    1458:	00 94       	com	r0
    145a:	2a 17       	cp	r18, r26
    145c:	30 05       	cpc	r19, r0
    145e:	40 05       	cpc	r20, r0
    1460:	50 05       	cpc	r21, r0
    1462:	60 05       	cpc	r22, r0
    1464:	70 05       	cpc	r23, r0
    1466:	80 05       	cpc	r24, r0
    1468:	90 05       	cpc	r25, r0
    146a:	08 95       	ret

0000146c <__umulhisi3>:
    146c:	a2 9f       	mul	r26, r18
    146e:	b0 01       	movw	r22, r0
    1470:	b3 9f       	mul	r27, r19
    1472:	c0 01       	movw	r24, r0
    1474:	a3 9f       	mul	r26, r19
    1476:	70 0d       	add	r23, r0
    1478:	81 1d       	adc	r24, r1
    147a:	11 24       	eor	r1, r1
    147c:	91 1d       	adc	r25, r1
    147e:	b2 9f       	mul	r27, r18
    1480:	70 0d       	add	r23, r0
    1482:	81 1d       	adc	r24, r1
    1484:	11 24       	eor	r1, r1
    1486:	91 1d       	adc	r25, r1
    1488:	08 95       	ret

0000148a <_exit>:
    148a:	f8 94       	cli

0000148c <__stop_program>:
    148c:	ff cf       	rjmp	.-2      	; 0x148c <__stop_program>
