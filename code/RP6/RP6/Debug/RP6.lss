
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001570  00001604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  00800066  00800066  0000160a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b99  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073b  00000000  00000000  000022d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a5  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d7  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064b  00000000  00000000  0000391f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003f6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_1>
       8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 06 	call	0xc62	; 0xc62 <main>
      8a:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_i2c_slave>:
	return 0;							//If going backwards or standing still
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
      92:	11 b8       	out	0x01, r1	; 1
      94:	90 e2       	ldi	r25, 0x20	; 32
      96:	90 b9       	out	0x00, r25	; 0
      98:	95 e4       	ldi	r25, 0x45	; 69
      9a:	96 bf       	out	0x36, r25	; 54
      9c:	88 0f       	add	r24, r24
      9e:	82 b9       	out	0x02, r24	; 2
      a0:	08 95       	ret

000000a2 <slaaftwi>:
      a2:	81 b1       	in	r24, 0x01	; 1
      a4:	80 3a       	cpi	r24, 0xA0	; 160
      a6:	d1 f0       	breq	.+52     	; 0xdc <slaaftwi+0x3a>
      a8:	28 f4       	brcc	.+10     	; 0xb4 <slaaftwi+0x12>
      aa:	80 36       	cpi	r24, 0x60	; 96
      ac:	41 f0       	breq	.+16     	; 0xbe <slaaftwi+0x1c>
      ae:	80 38       	cpi	r24, 0x80	; 128
      b0:	49 f0       	breq	.+18     	; 0xc4 <slaaftwi+0x22>
      b2:	35 c0       	rjmp	.+106    	; 0x11e <slaaftwi+0x7c>
      b4:	88 3a       	cpi	r24, 0xA8	; 168
      b6:	21 f1       	breq	.+72     	; 0x100 <slaaftwi+0x5e>
      b8:	88 3b       	cpi	r24, 0xB8	; 184
      ba:	59 f1       	breq	.+86     	; 0x112 <slaaftwi+0x70>
      bc:	30 c0       	rjmp	.+96     	; 0x11e <slaaftwi+0x7c>
      be:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <teller.1905>
      c2:	2d c0       	rjmp	.+90     	; 0x11e <slaaftwi+0x7c>
      c4:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <teller.1905>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	8e 0f       	add	r24, r30
      cc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <teller.1905>
      d0:	83 b1       	in	r24, 0x03	; 3
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	e0 58       	subi	r30, 0x80	; 128
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	80 83       	st	Z, r24
      da:	21 c0       	rjmp	.+66     	; 0x11e <slaaftwi+0x7c>
      dc:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <ontfunc>
      e0:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <ontfunc+0x1>
      e4:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <teller.1905>
      e8:	80 e8       	ldi	r24, 0x80	; 128
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	09 95       	icall
      ee:	e0 e8       	ldi	r30, 0x80	; 128
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	84 e9       	ldi	r24, 0x94	; 148
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	11 92       	st	Z+, r1
      f8:	e8 17       	cp	r30, r24
      fa:	f9 07       	cpc	r31, r25
      fc:	e1 f7       	brne	.-8      	; 0xf6 <slaaftwi+0x54>
      fe:	0f c0       	rjmp	.+30     	; 0x11e <slaaftwi+0x7c>
     100:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <teller.1905>
     104:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <verfunc>
     108:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <verfunc+0x1>
     10c:	09 95       	icall
     10e:	83 b9       	out	0x03, r24	; 3
     110:	06 c0       	rjmp	.+12     	; 0x11e <slaaftwi+0x7c>
     112:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <verfunc>
     116:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <verfunc+0x1>
     11a:	09 95       	icall
     11c:	83 b9       	out	0x03, r24	; 3
     11e:	86 b7       	in	r24, 0x36	; 54
     120:	80 68       	ori	r24, 0x80	; 128
     122:	86 bf       	out	0x36, r24	; 54
     124:	08 95       	ret

00000126 <__vector_19>:
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
     148:	0e 94 51 00 	call	0xa2	; 0xa2 <slaaftwi>
     14c:	ff 91       	pop	r31
     14e:	ef 91       	pop	r30
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <driveSpeed>:
     16e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <globalDriveDirection>
     172:	88 23       	and	r24, r24
     174:	31 f0       	breq	.+12     	; 0x182 <driveSpeed+0x14>
     176:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <globalDriveThrottle>
     17a:	08 2e       	mov	r0, r24
     17c:	00 0c       	add	r0, r0
     17e:	99 0b       	sbc	r25, r25
     180:	08 95       	ret
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret

00000188 <driveDirection>:
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <globalDriveDirection>
     190:	21 30       	cpi	r18, 0x01	; 1
     192:	11 f0       	breq	.+4      	; 0x198 <driveDirection+0x10>
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	08 95       	ret

0000019a <init_LED>:
}


void init_LED(){
	DDRB |= 0b10000011;
     19a:	87 b3       	in	r24, 0x17	; 23
     19c:	83 68       	ori	r24, 0x83	; 131
     19e:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
     1a0:	84 b3       	in	r24, 0x14	; 20
     1a2:	80 67       	ori	r24, 0x70	; 112
     1a4:	84 bb       	out	0x14, r24	; 20
     1a6:	08 95       	ret

000001a8 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
     1a8:	83 b7       	in	r24, 0x33	; 51
     1aa:	81 60       	ori	r24, 0x01	; 1
     1ac:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
     1ae:	83 b7       	in	r24, 0x33	; 51
     1b0:	82 60       	ori	r24, 0x02	; 2
     1b2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
     1b4:	89 b7       	in	r24, 0x39	; 57
     1b6:	81 60       	ori	r24, 0x01	; 1
     1b8:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
     1ba:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
     1bc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <t0TotalOverflow>
     1c0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <t0TotalOverflow+0x1>
     1c4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <t0TotalOverflow+0x2>
     1c8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <t0TotalOverflow+0x3>
     1cc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <t0TotalOverflow+0x4>
     1d0:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t0TotalOverflow+0x5>
     1d4:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t0TotalOverflow+0x6>
     1d8:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <t0TotalOverflow+0x7>
     1dc:	08 95       	ret

000001de <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
     1de:	1f 92       	push	r1
     1e0:	0f 92       	push	r0
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	0f 92       	push	r0
     1e6:	11 24       	eor	r1, r1
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
     1fa:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <t0TotalOverflow>
     1fe:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <t0TotalOverflow+0x1>
     202:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <t0TotalOverflow+0x2>
     206:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <t0TotalOverflow+0x3>
     20a:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x4>
     20e:	70 91 b5 00 	lds	r23, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x5>
     212:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x6>
     216:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x7>
     21a:	a1 e0       	ldi	r26, 0x01	; 1
     21c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__adddi3_s8>
     220:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <t0TotalOverflow>
     224:	30 93 b1 00 	sts	0x00B1, r19	; 0x8000b1 <t0TotalOverflow+0x1>
     228:	40 93 b2 00 	sts	0x00B2, r20	; 0x8000b2 <t0TotalOverflow+0x2>
     22c:	50 93 b3 00 	sts	0x00B3, r21	; 0x8000b3 <t0TotalOverflow+0x3>
     230:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <t0TotalOverflow+0x4>
     234:	70 93 b5 00 	sts	0x00B5, r23	; 0x8000b5 <t0TotalOverflow+0x5>
     238:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <t0TotalOverflow+0x6>
     23c:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <t0TotalOverflow+0x7>
}
     240:	af 91       	pop	r26
     242:	9f 91       	pop	r25
     244:	8f 91       	pop	r24
     246:	7f 91       	pop	r23
     248:	6f 91       	pop	r22
     24a:	5f 91       	pop	r21
     24c:	4f 91       	pop	r20
     24e:	3f 91       	pop	r19
     250:	2f 91       	pop	r18
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <micros>:


uint64_t micros(){
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     26c:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     26e:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <t0TotalOverflow>
     272:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <t0TotalOverflow+0x1>
     276:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <t0TotalOverflow+0x2>
     27a:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <t0TotalOverflow+0x3>
     27e:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x4>
     282:	70 91 b5 00 	lds	r23, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x5>
     286:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x6>
     28a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     28e:	e0 e0       	ldi	r30, 0x00	; 0
     290:	fa 2f       	mov	r31, r26
     292:	ff 0f       	add	r31, r31
     294:	ff 0f       	add	r31, r31
     296:	ff 0f       	add	r31, r31
     298:	ff 23       	and	r31, r31
     29a:	14 f4       	brge	.+4      	; 0x2a0 <micros+0x44>
     29c:	e1 50       	subi	r30, 0x01	; 1
     29e:	ff 4f       	sbci	r31, 0xFF	; 255
     2a0:	ef 2f       	mov	r30, r31
     2a2:	ee 0f       	add	r30, r30
     2a4:	ee 0b       	sbc	r30, r30
     2a6:	0b e0       	ldi	r16, 0x0B	; 11
     2a8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__ashldi3>
     2ac:	a2 2e       	mov	r10, r18
     2ae:	b3 2e       	mov	r11, r19
     2b0:	c4 2e       	mov	r12, r20
     2b2:	d5 2e       	mov	r13, r21
     2b4:	e6 2e       	mov	r14, r22
     2b6:	f7 2e       	mov	r15, r23
     2b8:	08 2f       	mov	r16, r24
     2ba:	19 2f       	mov	r17, r25
     2bc:	2f 2f       	mov	r18, r31
     2be:	3e 2f       	mov	r19, r30
     2c0:	4e 2f       	mov	r20, r30
     2c2:	5e 2f       	mov	r21, r30
     2c4:	6e 2f       	mov	r22, r30
     2c6:	7e 2f       	mov	r23, r30
     2c8:	8e 2f       	mov	r24, r30
     2ca:	9e 2f       	mov	r25, r30
     2cc:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__adddi3>
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	df 90       	pop	r13
     2da:	cf 90       	pop	r12
     2dc:	bf 90       	pop	r11
     2de:	af 90       	pop	r10
     2e0:	08 95       	ret

000002e2 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     2e2:	81 b3       	in	r24, 0x11	; 17
     2e4:	80 63       	ori	r24, 0x30	; 48
     2e6:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     2e8:	81 b3       	in	r24, 0x11	; 17
     2ea:	83 7f       	andi	r24, 0xF3	; 243
     2ec:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     2ee:	84 b3       	in	r24, 0x14	; 20
     2f0:	8c 60       	ori	r24, 0x0C	; 12
     2f2:	84 bb       	out	0x14, r24	; 20
     2f4:	08 95       	ret

000002f6 <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     2f6:	8f b5       	in	r24, 0x2f	; 47
     2f8:	80 68       	ori	r24, 0x80	; 128
     2fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     2fc:	8f b5       	in	r24, 0x2f	; 47
     2fe:	80 62       	ori	r24, 0x20	; 32
     300:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     302:	8f b5       	in	r24, 0x2f	; 47
     304:	82 60       	ori	r24, 0x02	; 2
     306:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     308:	8e b5       	in	r24, 0x2e	; 46
     30a:	80 61       	ori	r24, 0x10	; 16
     30c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     30e:	8e b5       	in	r24, 0x2e	; 46
     310:	81 60       	ori	r24, 0x01	; 1
     312:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	99 ef       	ldi	r25, 0xF9	; 249
     318:	97 bd       	out	0x27, r25	; 39
     31a:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     31c:	1b bc       	out	0x2b, r1	; 43
     31e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     320:	19 bc       	out	0x29, r1	; 41
     322:	18 bc       	out	0x28, r1	; 40
     324:	08 95       	ret

00000326 <init_motor_encoder>:
}


void init_motor_encoder(){
	motorEncoderLVal = 0;						//Reset the motor encoder variable
     326:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <motorEncoderLVal+0x1>
     32a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <motorEncoderLVal>
	motorEncoderRVal = 0;						//---^
     32e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <motorEncoderRVal+0x1>
     332:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <motorEncoderRVal>
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     336:	85 b7       	in	r24, 0x35	; 53
     338:	81 60       	ori	r24, 0x01	; 1
     33a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     33c:	85 b7       	in	r24, 0x35	; 53
     33e:	84 60       	ori	r24, 0x04	; 4
     340:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     342:	8b b7       	in	r24, 0x3b	; 59
     344:	80 64       	ori	r24, 0x40	; 64
     346:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     348:	8b b7       	in	r24, 0x3b	; 59
     34a:	80 68       	ori	r24, 0x80	; 128
     34c:	8b bf       	out	0x3b, r24	; 59
     34e:	08 95       	ret

00000350 <init_motor>:
	return microsReturnValue;																						//Return the calculated value
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     350:	0e 94 71 01 	call	0x2e2	; 0x2e2 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     354:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     358:	0e 94 93 01 	call	0x326	; 0x326 <init_motor_encoder>
     35c:	08 95       	ret

0000035e <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
	motorEncoderLVal++;							//Increase the encoder variable
     36c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <motorEncoderLVal>
     370:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <motorEncoderLVal+0x1>
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <motorEncoderLVal+0x1>
     37a:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <motorEncoderLVal>
}
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__vector_2>:


ISR(INT1_vect){
     38c:	1f 92       	push	r1
     38e:	0f 92       	push	r0
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	0f 92       	push	r0
     394:	11 24       	eor	r1, r1
     396:	8f 93       	push	r24
     398:	9f 93       	push	r25
	motorEncoderRVal++;							//Increase the encoder variable
     39a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <motorEncoderRVal>
     39e:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <motorEncoderRVal+0x1>
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <motorEncoderRVal+0x1>
     3a8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <motorEncoderRVal>
}
     3ac:	9f 91       	pop	r25
     3ae:	8f 91       	pop	r24
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     3ba:	89 2b       	or	r24, r25
     3bc:	39 f0       	breq	.+14     	; 0x3cc <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     3be:	8b b7       	in	r24, 0x3b	; 59
     3c0:	80 64       	ori	r24, 0x40	; 64
     3c2:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     3c4:	8b b7       	in	r24, 0x3b	; 59
     3c6:	80 68       	ori	r24, 0x80	; 128
     3c8:	8b bf       	out	0x3b, r24	; 59
     3ca:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     3cc:	8b b7       	in	r24, 0x3b	; 59
     3ce:	8f 7b       	andi	r24, 0xBF	; 191
     3d0:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     3d2:	8b b7       	in	r24, 0x3b	; 59
     3d4:	8f 77       	andi	r24, 0x7F	; 127
     3d6:	8b bf       	out	0x3b, r24	; 59
     3d8:	08 95       	ret

000003da <motorDriver>:
	}
}


int motorDriver(int64_t driveSpeed, int driveDirection, int turnDirection){
     3da:	2f 92       	push	r2
     3dc:	3f 92       	push	r3
     3de:	4f 92       	push	r4
     3e0:	5f 92       	push	r5
     3e2:	6f 92       	push	r6
     3e4:	7f 92       	push	r7
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	67 97       	sbiw	r28, 0x17	; 23
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	32 2e       	mov	r3, r18
     410:	43 2e       	mov	r4, r19
     412:	54 2e       	mov	r5, r20
     414:	65 2e       	mov	r6, r21
     416:	76 2e       	mov	r7, r22
     418:	79 83       	std	Y+1, r23	; 0x01
     41a:	8a 83       	std	Y+2, r24	; 0x02
     41c:	29 2e       	mov	r2, r25
     41e:	1e 8b       	std	Y+22, r17	; 0x16
     420:	0d 8b       	std	Y+21, r16	; 0x15
     422:	47 01       	movw	r8, r14
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     424:	0e 94 2e 01 	call	0x25c	; 0x25c <micros>
     428:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.2023>
     42c:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.2023+0x1>
     430:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.2023+0x2>
     434:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.2023+0x3>
     438:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.2023+0x4>
     43c:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.2023+0x5>
     440:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.2023+0x6>
     444:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.2023+0x7>
     448:	0e 94 92 0a 	call	0x1524	; 0x1524 <__cmpdi2>
     44c:	08 f4       	brcc	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	ee c3       	rjmp	.+2012   	; 0xc2c <__stack+0x3cd>
		return 0;
	}else{
		updateTimer = micros() + updateSpeed;											//If the timer has passed, set new timer and execute the code
     450:	0e 94 2e 01 	call	0x25c	; 0x25c <micros>
     454:	29 87       	std	Y+9, r18	; 0x09
     456:	3a 87       	std	Y+10, r19	; 0x0a
     458:	4b 87       	std	Y+11, r20	; 0x0b
     45a:	5c 87       	std	Y+12, r21	; 0x0c
     45c:	6d 87       	std	Y+13, r22	; 0x0d
     45e:	7e 87       	std	Y+14, r23	; 0x0e
     460:	8f 87       	std	Y+15, r24	; 0x0f
     462:	98 8b       	std	Y+16, r25	; 0x10
     464:	20 5c       	subi	r18, 0xC0	; 192
     466:	32 4f       	sbci	r19, 0xF2	; 242
     468:	4c 4f       	sbci	r20, 0xFC	; 252
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	6f 4f       	sbci	r22, 0xFF	; 255
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	8f 4f       	sbci	r24, 0xFF	; 255
     472:	9f 4f       	sbci	r25, 0xFF	; 255
     474:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2023>
     478:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2023+0x1>
     47c:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2023+0x2>
     480:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2023+0x3>
     484:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2023+0x4>
     488:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2023+0x5>
     48c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2023+0x6>
     490:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2023+0x7>
	}
	
	
	//Remap drive speed percentage
	driveSpeed = (driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     494:	a1 2c       	mov	r10, r1
     496:	0f 2e       	mov	r0, r31
     498:	f4 e6       	ldi	r31, 0x64	; 100
     49a:	bf 2e       	mov	r11, r31
     49c:	f0 2d       	mov	r31, r0
     49e:	c1 2c       	mov	r12, r1
     4a0:	d1 2c       	mov	r13, r1
     4a2:	e1 2c       	mov	r14, r1
     4a4:	f1 2c       	mov	r15, r1
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	23 2d       	mov	r18, r3
     4ac:	34 2d       	mov	r19, r4
     4ae:	45 2d       	mov	r20, r5
     4b0:	56 2d       	mov	r21, r6
     4b2:	67 2d       	mov	r22, r7
     4b4:	79 81       	ldd	r23, Y+1	; 0x01
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	92 2d       	mov	r25, r2
     4ba:	0e 94 2b 09 	call	0x1256	; 0x1256 <__muldi3>
     4be:	0f 2e       	mov	r0, r31
     4c0:	f4 e6       	ldi	r31, 0x64	; 100
     4c2:	af 2e       	mov	r10, r31
     4c4:	f0 2d       	mov	r31, r0
     4c6:	b1 2c       	mov	r11, r1
     4c8:	0e 94 86 09 	call	0x130c	; 0x130c <__divdi3>
     4cc:	29 83       	std	Y+1, r18	; 0x01
     4ce:	3a 83       	std	Y+2, r19	; 0x02
     4d0:	24 2e       	mov	r2, r20
     4d2:	35 2e       	mov	r3, r21
     4d4:	46 2e       	mov	r4, r22
     4d6:	57 2e       	mov	r5, r23
     4d8:	68 2e       	mov	r6, r24
     4da:	79 2e       	mov	r7, r25
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     4dc:	27 38       	cpi	r18, 0x87	; 135
     4de:	33 41       	sbci	r19, 0x13	; 19
     4e0:	41 05       	cpc	r20, r1
     4e2:	51 05       	cpc	r21, r1
     4e4:	61 05       	cpc	r22, r1
     4e6:	71 05       	cpc	r23, r1
     4e8:	81 05       	cpc	r24, r1
     4ea:	91 05       	cpc	r25, r1
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ee:	44 f4       	brge	.+16     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4f0:	19 82       	std	Y+1, r1	; 0x01
     4f2:	1a 82       	std	Y+2, r1	; 0x02
     4f4:	21 2c       	mov	r2, r1
     4f6:	31 2c       	mov	r3, r1
     4f8:	41 2c       	mov	r4, r1
     4fa:	51 2c       	mov	r5, r1
     4fc:	61 2c       	mov	r6, r1
     4fe:	71 2c       	mov	r7, r1
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     500:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2024>
     504:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2024+0x1>
     508:	2d 89       	ldd	r18, Y+21	; 0x15
     50a:	3e 89       	ldd	r19, Y+22	; 0x16
     50c:	82 17       	cp	r24, r18
     50e:	93 07       	cpc	r25, r19
     510:	59 f1       	breq	.+86     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     512:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     516:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     51a:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     51e:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     522:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     526:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     52a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     52e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__cmpdi2_s8>
     538:	79 f4       	brne	.+30     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
		driveSpeed = 0;																	//Set the requested speed to 0
	}else if(driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = driveDirection;											//Reverse the driving direction
     53a:	8d 89       	ldd	r24, Y+21	; 0x15
     53c:	9e 89       	ldd	r25, Y+22	; 0x16
     53e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <currentDriveDirection.2024+0x1>
     542:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentDriveDirection.2024>
		driveSpeed = 0;																	//And remain stationary for this update cycle
     546:	19 82       	std	Y+1, r1	; 0x01
     548:	1a 82       	std	Y+2, r1	; 0x02
     54a:	21 2c       	mov	r2, r1
     54c:	31 2c       	mov	r3, r1
     54e:	41 2c       	mov	r4, r1
     550:	51 2c       	mov	r5, r1
     552:	61 2c       	mov	r6, r1
     554:	71 2c       	mov	r7, r1
     556:	4d c0       	rjmp	.+154    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		driveSpeed = 0;																	//Set the requested speed to 0
     558:	19 82       	std	Y+1, r1	; 0x01
     55a:	1a 82       	std	Y+2, r1	; 0x02
     55c:	21 2c       	mov	r2, r1
     55e:	31 2c       	mov	r3, r1
     560:	41 2c       	mov	r4, r1
     562:	51 2c       	mov	r5, r1
     564:	61 2c       	mov	r6, r1
     566:	71 2c       	mov	r7, r1
		driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     568:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     56c:	9b 83       	std	Y+3, r25	; 0x03
     56e:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     572:	ac 83       	std	Y+4, r26	; 0x04
     574:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     578:	ed 83       	std	Y+5, r30	; 0x05
     57a:	00 91 73 00 	lds	r16, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     57e:	0e 83       	std	Y+6, r16	; 0x06
     580:	10 91 74 00 	lds	r17, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     584:	1f 83       	std	Y+7, r17	; 0x07
     586:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     58a:	28 87       	std	Y+8, r18	; 0x08
     58c:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     590:	3f 8b       	std	Y+23, r19	; 0x17
     592:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     596:	8d 8b       	std	Y+21, r24	; 0x15
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	3a 81       	ldd	r19, Y+2	; 0x02
     59c:	42 2d       	mov	r20, r2
     59e:	53 2d       	mov	r21, r3
     5a0:	64 2d       	mov	r22, r4
     5a2:	75 2d       	mov	r23, r5
     5a4:	86 2d       	mov	r24, r6
     5a6:	97 2d       	mov	r25, r7
     5a8:	ab 80       	ldd	r10, Y+3	; 0x03
     5aa:	ba 2e       	mov	r11, r26
     5ac:	ce 2e       	mov	r12, r30
     5ae:	d0 2e       	mov	r13, r16
     5b0:	e1 2e       	mov	r14, r17
     5b2:	f8 84       	ldd	r15, Y+8	; 0x08
     5b4:	0f 89       	ldd	r16, Y+23	; 0x17
     5b6:	1d 89       	ldd	r17, Y+21	; 0x15
     5b8:	0e 94 89 0a 	call	0x1512	; 0x1512 <__subdi3>
     5bc:	29 8b       	std	Y+17, r18	; 0x11
     5be:	3a 8b       	std	Y+18, r19	; 0x12
     5c0:	a4 2e       	mov	r10, r20
     5c2:	b5 2e       	mov	r11, r21
     5c4:	06 2f       	mov	r16, r22
     5c6:	17 2f       	mov	r17, r23
     5c8:	8b 8b       	std	Y+19, r24	; 0x13
     5ca:	9c 8b       	std	Y+20, r25	; 0x14
     5cc:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatdisf>
     5d0:	6b 01       	movw	r12, r22
     5d2:	7c 01       	movw	r14, r24
     5d4:	a7 01       	movw	r20, r14
     5d6:	96 01       	movw	r18, r12
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsf3>
     5e0:	0e 94 b4 08 	call	0x1168	; 0x1168 <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     5e4:	0e 94 30 07 	call	0xe60	; 0xe60 <__fixunssfsi>
     5e8:	60 3d       	cpi	r22, 0xD0	; 208
     5ea:	77 40       	sbci	r23, 0x07	; 7
     5ec:	81 05       	cpc	r24, r1
     5ee:	91 05       	cpc	r25, r1
     5f0:	98 f4       	brcc	.+38     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		currentDriveSpeed = driveSpeed;													//Set the current speed to the requested value
     5f2:	e9 81       	ldd	r30, Y+1	; 0x01
     5f4:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <currentDriveSpeed.2027>
     5f8:	0a 81       	ldd	r16, Y+2	; 0x02
     5fa:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <currentDriveSpeed.2027+0x1>
     5fe:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.2027+0x2>
     602:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.2027+0x3>
     606:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.2027+0x4>
     60a:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.2027+0x5>
     60e:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.2027+0x6>
     612:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.2027+0x7>
     616:	15 c1       	rjmp	.+554    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
	}else{																			//If the difference is more than 2000
		if(driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     618:	29 89       	ldd	r18, Y+17	; 0x11
     61a:	3a 89       	ldd	r19, Y+18	; 0x12
     61c:	4a 2d       	mov	r20, r10
     61e:	5b 2d       	mov	r21, r11
     620:	60 2f       	mov	r22, r16
     622:	71 2f       	mov	r23, r17
     624:	8b 89       	ldd	r24, Y+19	; 0x13
     626:	9c 89       	ldd	r25, Y+20	; 0x14
     628:	a0 e0       	ldi	r26, 0x00	; 0
     62a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__cmpdi2_s8>
     62e:	0c f0       	brlt	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     630:	6e c0       	rjmp	.+220    	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
			if(currentDriveSpeed < driveSpeedThreshold){									//If the speed is less than the threshold
     632:	2b 81       	ldd	r18, Y+3	; 0x03
     634:	3c 81       	ldd	r19, Y+4	; 0x04
     636:	4d 81       	ldd	r20, Y+5	; 0x05
     638:	5e 81       	ldd	r21, Y+6	; 0x06
     63a:	6f 81       	ldd	r22, Y+7	; 0x07
     63c:	78 85       	ldd	r23, Y+8	; 0x08
     63e:	8f 89       	ldd	r24, Y+23	; 0x17
     640:	9d 89       	ldd	r25, Y+21	; 0x15
     642:	27 38       	cpi	r18, 0x87	; 135
     644:	33 41       	sbci	r19, 0x13	; 19
     646:	41 05       	cpc	r20, r1
     648:	51 05       	cpc	r21, r1
     64a:	61 05       	cpc	r22, r1
     64c:	71 05       	cpc	r23, r1
     64e:	81 05       	cpc	r24, r1
     650:	91 05       	cpc	r25, r1
     652:	09 f0       	breq	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     654:	9c f4       	brge	.+38     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
				currentDriveSpeed = driveSpeed;													//Set the speed to the requested value (Probably 0)
     656:	29 81       	ldd	r18, Y+1	; 0x01
     658:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     65c:	3a 81       	ldd	r19, Y+2	; 0x02
     65e:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     662:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.2027+0x2>
     666:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.2027+0x3>
     66a:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.2027+0x4>
     66e:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.2027+0x5>
     672:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.2027+0x6>
     676:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.2027+0x7>
     67a:	e3 c0       	rjmp	.+454    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     67c:	2b 81       	ldd	r18, Y+3	; 0x03
     67e:	3c 81       	ldd	r19, Y+4	; 0x04
     680:	4d 81       	ldd	r20, Y+5	; 0x05
     682:	5e 81       	ldd	r21, Y+6	; 0x06
     684:	6f 81       	ldd	r22, Y+7	; 0x07
     686:	78 85       	ldd	r23, Y+8	; 0x08
     688:	8f 89       	ldd	r24, Y+23	; 0x17
     68a:	9d 89       	ldd	r25, Y+21	; 0x15
     68c:	01 e0       	ldi	r16, 0x01	; 1
     68e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__ashldi3>
     692:	a2 2e       	mov	r10, r18
     694:	b3 2e       	mov	r11, r19
     696:	c4 2e       	mov	r12, r20
     698:	d5 2e       	mov	r13, r21
     69a:	e6 2e       	mov	r14, r22
     69c:	f7 2e       	mov	r15, r23
     69e:	e8 2f       	mov	r30, r24
     6a0:	19 2f       	mov	r17, r25
     6a2:	04 e0       	ldi	r16, 0x04	; 4
     6a4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__ashldi3>
     6a8:	0e 2f       	mov	r16, r30
     6aa:	0e 94 89 0a 	call	0x1512	; 0x1512 <__subdi3>
     6ae:	0f 2e       	mov	r0, r31
     6b0:	f4 e6       	ldi	r31, 0x64	; 100
     6b2:	af 2e       	mov	r10, r31
     6b4:	f0 2d       	mov	r31, r0
     6b6:	b1 2c       	mov	r11, r1
     6b8:	c1 2c       	mov	r12, r1
     6ba:	d1 2c       	mov	r13, r1
     6bc:	e1 2c       	mov	r14, r1
     6be:	f1 2c       	mov	r15, r1
     6c0:	00 e0       	ldi	r16, 0x00	; 0
     6c2:	10 e0       	ldi	r17, 0x00	; 0
     6c4:	0e 94 86 09 	call	0x130c	; 0x130c <__divdi3>
     6c8:	a2 2e       	mov	r10, r18
     6ca:	b3 2e       	mov	r11, r19
     6cc:	c4 2e       	mov	r12, r20
     6ce:	d5 2e       	mov	r13, r21
     6d0:	e6 2e       	mov	r14, r22
     6d2:	f7 2e       	mov	r15, r23
     6d4:	08 2f       	mov	r16, r24
     6d6:	19 2f       	mov	r17, r25
     6d8:	2b 81       	ldd	r18, Y+3	; 0x03
     6da:	3c 81       	ldd	r19, Y+4	; 0x04
     6dc:	4d 81       	ldd	r20, Y+5	; 0x05
     6de:	5e 81       	ldd	r21, Y+6	; 0x06
     6e0:	6f 81       	ldd	r22, Y+7	; 0x07
     6e2:	78 85       	ldd	r23, Y+8	; 0x08
     6e4:	8f 89       	ldd	r24, Y+23	; 0x17
     6e6:	9d 89       	ldd	r25, Y+21	; 0x15
     6e8:	0e 94 89 0a 	call	0x1512	; 0x1512 <__subdi3>
     6ec:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     6f0:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     6f4:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     6f8:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     6fc:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     700:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     704:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     708:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     70c:	9a c0       	rjmp	.+308    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     70e:	2b 81       	ldd	r18, Y+3	; 0x03
     710:	3c 81       	ldd	r19, Y+4	; 0x04
     712:	4d 81       	ldd	r20, Y+5	; 0x05
     714:	5e 81       	ldd	r21, Y+6	; 0x06
     716:	6f 81       	ldd	r22, Y+7	; 0x07
     718:	78 85       	ldd	r23, Y+8	; 0x08
     71a:	8f 89       	ldd	r24, Y+23	; 0x17
     71c:	9d 89       	ldd	r25, Y+21	; 0x15
     71e:	27 38       	cpi	r18, 0x87	; 135
     720:	a3 e1       	ldi	r26, 0x13	; 19
     722:	3a 07       	cpc	r19, r26
     724:	41 05       	cpc	r20, r1
     726:	51 05       	cpc	r21, r1
     728:	61 05       	cpc	r22, r1
     72a:	71 05       	cpc	r23, r1
     72c:	81 05       	cpc	r24, r1
     72e:	91 05       	cpc	r25, r1
     730:	09 f0       	breq	.+2      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     732:	cc f4       	brge	.+50     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
     734:	28 57       	subi	r18, 0x78	; 120
     736:	3c 4e       	sbci	r19, 0xEC	; 236
     738:	4f 4f       	sbci	r20, 0xFF	; 255
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	6f 4f       	sbci	r22, 0xFF	; 255
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	8f 4f       	sbci	r24, 0xFF	; 255
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     748:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     74c:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     750:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     754:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     758:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     75c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     760:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     764:	6e c0       	rjmp	.+220    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     766:	2b 81       	ldd	r18, Y+3	; 0x03
     768:	3c 81       	ldd	r19, Y+4	; 0x04
     76a:	4d 81       	ldd	r20, Y+5	; 0x05
     76c:	5e 81       	ldd	r21, Y+6	; 0x06
     76e:	6f 81       	ldd	r22, Y+7	; 0x07
     770:	78 85       	ldd	r23, Y+8	; 0x08
     772:	8f 89       	ldd	r24, Y+23	; 0x17
     774:	9d 89       	ldd	r25, Y+21	; 0x15
     776:	01 e0       	ldi	r16, 0x01	; 1
     778:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__ashldi3>
     77c:	a2 2e       	mov	r10, r18
     77e:	b3 2e       	mov	r11, r19
     780:	c4 2e       	mov	r12, r20
     782:	d5 2e       	mov	r13, r21
     784:	e6 2e       	mov	r14, r22
     786:	f7 2e       	mov	r15, r23
     788:	e8 2f       	mov	r30, r24
     78a:	19 2f       	mov	r17, r25
     78c:	04 e0       	ldi	r16, 0x04	; 4
     78e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__ashldi3>
     792:	0e 2f       	mov	r16, r30
     794:	0e 94 89 0a 	call	0x1512	; 0x1512 <__subdi3>
     798:	0f 2e       	mov	r0, r31
     79a:	f4 e6       	ldi	r31, 0x64	; 100
     79c:	af 2e       	mov	r10, r31
     79e:	f0 2d       	mov	r31, r0
     7a0:	b1 2c       	mov	r11, r1
     7a2:	c1 2c       	mov	r12, r1
     7a4:	d1 2c       	mov	r13, r1
     7a6:	e1 2c       	mov	r14, r1
     7a8:	f1 2c       	mov	r15, r1
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	0e 94 86 09 	call	0x130c	; 0x130c <__divdi3>
     7b2:	ab 80       	ldd	r10, Y+3	; 0x03
     7b4:	bc 80       	ldd	r11, Y+4	; 0x04
     7b6:	cd 80       	ldd	r12, Y+5	; 0x05
     7b8:	de 80       	ldd	r13, Y+6	; 0x06
     7ba:	ef 80       	ldd	r14, Y+7	; 0x07
     7bc:	f8 84       	ldd	r15, Y+8	; 0x08
     7be:	0f 89       	ldd	r16, Y+23	; 0x17
     7c0:	1d 89       	ldd	r17, Y+21	; 0x15
     7c2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__adddi3>
     7c6:	2b 83       	std	Y+3, r18	; 0x03
     7c8:	3c 83       	std	Y+4, r19	; 0x04
     7ca:	4e 83       	std	Y+6, r20	; 0x06
     7cc:	5d 83       	std	Y+5, r21	; 0x05
     7ce:	b6 2f       	mov	r27, r22
     7d0:	a7 2f       	mov	r26, r23
     7d2:	f8 2f       	mov	r31, r24
     7d4:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     7d6:	29 81       	ldd	r18, Y+1	; 0x01
     7d8:	3a 81       	ldd	r19, Y+2	; 0x02
     7da:	42 2d       	mov	r20, r2
     7dc:	53 2d       	mov	r21, r3
     7de:	64 2d       	mov	r22, r4
     7e0:	75 2d       	mov	r23, r5
     7e2:	86 2d       	mov	r24, r6
     7e4:	97 2d       	mov	r25, r7
     7e6:	ab 80       	ldd	r10, Y+3	; 0x03
     7e8:	bc 80       	ldd	r11, Y+4	; 0x04
     7ea:	ce 80       	ldd	r12, Y+6	; 0x06
     7ec:	dd 80       	ldd	r13, Y+5	; 0x05
     7ee:	eb 2e       	mov	r14, r27
     7f0:	fa 2e       	mov	r15, r26
     7f2:	0f 2f       	mov	r16, r31
     7f4:	1e 2f       	mov	r17, r30
     7f6:	0e 94 92 0a 	call	0x1524	; 0x1524 <__cmpdi2>
     7fa:	8c f0       	brlt	.+34     	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     7fc:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.2027>
     800:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.2027+0x1>
     804:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.2027+0x2>
     808:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.2027+0x3>
     80c:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2027+0x4>
     810:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.2027+0x5>
     814:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.2027+0x6>
     818:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.2027+0x7>
     81c:	12 c0       	rjmp	.+36     	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     81e:	39 81       	ldd	r19, Y+1	; 0x01
     820:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.2027>
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <currentDriveSpeed.2027+0x1>
     82a:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.2027+0x2>
     82e:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.2027+0x3>
     832:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.2027+0x4>
     836:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.2027+0x5>
     83a:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.2027+0x6>
     83e:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.2027+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     842:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2024>
     846:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2024+0x1>
     84a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2028+0x1>
     84e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2028>
	rightMotorDirection = currentDriveDirection;
     852:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     856:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     85a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     85e:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     862:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     866:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     86a:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     86e:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     872:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     876:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     87a:	c2 2e       	mov	r12, r18
     87c:	d3 2e       	mov	r13, r19
     87e:	e4 2e       	mov	r14, r20
     880:	f5 2e       	mov	r15, r21
     882:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.2030>
     886:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.2030+0x1>
     88a:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.2030+0x2>
     88e:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.2030+0x3>
	rightMotorSpeed = currentDriveSpeed;
     892:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.2031>
     896:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.2031+0x1>
     89a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.2031+0x2>
     89e:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.2031+0x3>
	
	
	//Check turn direction
	if(turnDirection != currentTurnDirection){						//If the turn direction is changed
     8a2:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
     8a6:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
     8aa:	e8 15       	cp	r30, r8
     8ac:	f9 05       	cpc	r31, r9
     8ae:	81 f1       	breq	.+96     	; 0x910 <__stack+0xb1>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = turnDirection;							//Set the new turn direction
     8b0:	90 92 67 00 	sts	0x0067, r9	; 0x800067 <__data_end+0x1>
     8b4:	80 92 66 00 	sts	0x0066, r8	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     8b8:	89 28       	or	r8, r9
     8ba:	29 f4       	brne	.+10     	; 0x8c6 <__stack+0x67>
			enableMotorEncoder(1);											//Enable the encoders
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <enableMotorEncoder>
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__stack+0x6f>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     8ce:	29 85       	ldd	r18, Y+9	; 0x09
     8d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d2:	4b 85       	ldd	r20, Y+11	; 0x0b
     8d4:	5c 85       	ldd	r21, Y+12	; 0x0c
     8d6:	6d 85       	ldd	r22, Y+13	; 0x0d
     8d8:	7e 85       	ldd	r23, Y+14	; 0x0e
     8da:	8f 85       	ldd	r24, Y+15	; 0x0f
     8dc:	98 89       	ldd	r25, Y+16	; 0x10
     8de:	20 52       	subi	r18, 0x20	; 32
     8e0:	3c 46       	sbci	r19, 0x6C	; 108
     8e2:	4b 4f       	sbci	r20, 0xFB	; 251
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	6f 4f       	sbci	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	8f 4f       	sbci	r24, 0xFF	; 255
     8ec:	9f 4f       	sbci	r25, 0xFF	; 255
     8ee:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2023>
     8f2:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2023+0x1>
     8f6:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2023+0x2>
     8fa:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2023+0x3>
     8fe:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2023+0x4>
     902:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2023+0x5>
     906:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2023+0x6>
     90a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2023+0x7>
     90e:	c8 c0       	rjmp	.+400    	; 0xaa0 <__stack+0x241>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     910:	ef 3f       	cpi	r30, 0xFF	; 255
     912:	af ef       	ldi	r26, 0xFF	; 255
     914:	fa 07       	cpc	r31, r26
     916:	f1 f5       	brne	.+124    	; 0x994 <__stack+0x135>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__cmpdi2_s8>
     91e:	f9 f4       	brne	.+62     	; 0x95e <__stack+0xff>
			leftMotorDirection = 0;											//Turn the left motor backwards
     920:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2028+0x1>
     924:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2028>
			rightMotorDirection = 1;										//Turn the right motor forwards
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     930:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;				//Set the speed to minimal + twice the turn rate
     934:	88 ef       	ldi	r24, 0xF8	; 248
     936:	9a e2       	ldi	r25, 0x2A	; 42
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     940:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     944:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     948:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;				//---^
     94c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     950:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     954:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     958:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
     95c:	22 c1       	rjmp	.+580    	; 0xba2 <__stack+0x343>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = driveSpeedThreshold;							//Set the left motor to minimal
     95e:	88 e8       	ldi	r24, 0x88	; 136
     960:	93 e1       	ldi	r25, 0x13	; 19
     962:	a0 e0       	ldi	r26, 0x00	; 0
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     96a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     96e:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     972:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed += turnRate;									//Increase the right motor with the turn rate
     976:	e8 eb       	ldi	r30, 0xB8	; 184
     978:	ce 0e       	add	r12, r30
     97a:	eb e0       	ldi	r30, 0x0B	; 11
     97c:	de 1e       	adc	r13, r30
     97e:	e1 1c       	adc	r14, r1
     980:	f1 1c       	adc	r15, r1
     982:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2031>
     986:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2031+0x1>
     98a:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2031+0x2>
     98e:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2031+0x3>
     992:	86 c0       	rjmp	.+268    	; 0xaa0 <__stack+0x241>
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     994:	30 97       	sbiw	r30, 0x00	; 0
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x13b>
     998:	43 c0       	rjmp	.+134    	; 0xa20 <__stack+0x1c1>
		if(motorEncoderLVal != motorEncoderRVal){
     99a:	00 91 ab 00 	lds	r16, 0x00AB	; 0x8000ab <motorEncoderLVal>
     99e:	10 91 ac 00 	lds	r17, 0x00AC	; 0x8000ac <motorEncoderLVal+0x1>
     9a2:	1e 8b       	std	Y+22, r17	; 0x16
     9a4:	0d 8b       	std	Y+21, r16	; 0x15
     9a6:	00 91 a9 00 	lds	r16, 0x00A9	; 0x8000a9 <motorEncoderRVal>
     9aa:	10 91 aa 00 	lds	r17, 0x00AA	; 0x8000aa <motorEncoderRVal+0x1>
     9ae:	2d 89       	ldd	r18, Y+21	; 0x15
     9b0:	3e 89       	ldd	r19, Y+22	; 0x16
     9b2:	20 17       	cp	r18, r16
     9b4:	31 07       	cpc	r19, r17
     9b6:	09 f4       	brne	.+2      	; 0x9ba <__stack+0x15b>
     9b8:	73 c0       	rjmp	.+230    	; 0xaa0 <__stack+0x241>
			if(motorEncoderLVal - motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	0e 94 65 07 	call	0xeca	; 0xeca <__floatunsisf>
     9c2:	6b 01       	movw	r12, r22
     9c4:	7c 01       	movw	r14, r24
     9c6:	6d 89       	ldd	r22, Y+21	; 0x15
     9c8:	7e 89       	ldd	r23, Y+22	; 0x16
     9ca:	60 1b       	sub	r22, r16
     9cc:	71 0b       	sbc	r23, r17
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 65 07 	call	0xeca	; 0xeca <__floatunsisf>
     9d6:	4b 01       	movw	r8, r22
     9d8:	5c 01       	movw	r10, r24
     9da:	a5 01       	movw	r20, r10
     9dc:	94 01       	movw	r18, r8
     9de:	c5 01       	movw	r24, r10
     9e0:	b4 01       	movw	r22, r8
     9e2:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsf3>
     9e6:	0e 94 b4 08 	call	0x1168	; 0x1168 <sqrt>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsf3>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	48 ec       	ldi	r20, 0xC8	; 200
     9fc:	52 e4       	ldi	r21, 0x42	; 66
     9fe:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     a02:	a7 01       	movw	r20, r14
     a04:	96 01       	movw	r18, r12
     a06:	0e 94 52 06 	call	0xca4	; 0xca4 <__addsf3>
     a0a:	0e 94 30 07 	call	0xe60	; 0xe60 <__fixunssfsi>
     a0e:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.2031>
     a12:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.2031+0x1>
     a16:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.2031+0x2>
     a1a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.2031+0x3>
     a1e:	40 c0       	rjmp	.+128    	; 0xaa0 <__stack+0x241>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	f1 f5       	brne	.+124    	; 0xaa0 <__stack+0x241>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     a24:	a0 e0       	ldi	r26, 0x00	; 0
     a26:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__cmpdi2_s8>
     a2a:	f9 f4       	brne	.+62     	; 0xa6a <__stack+0x20b>
			leftMotorDirection = 1;											//Left motor forward
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2028+0x1>
     a34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2028>
			rightMotorDirection = 0;										//Right motor backward
     a38:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     a3c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;				//set motor speed to minimal + twice the turn rate
     a40:	88 ef       	ldi	r24, 0xF8	; 248
     a42:	9a e2       	ldi	r25, 0x2A	; 42
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     a4c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     a50:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     a54:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;				//---^
     a58:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     a5c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     a60:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     a64:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
     a68:	9c c0       	rjmp	.+312    	; 0xba2 <__stack+0x343>
			}else{														//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed += turnRate;										//Increase the left motor with the set turn rate
     a6a:	38 eb       	ldi	r19, 0xB8	; 184
     a6c:	c3 0e       	add	r12, r19
     a6e:	3b e0       	ldi	r19, 0x0B	; 11
     a70:	d3 1e       	adc	r13, r19
     a72:	e1 1c       	adc	r14, r1
     a74:	f1 1c       	adc	r15, r1
     a76:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.2030>
     a7a:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.2030+0x1>
     a7e:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.2030+0x2>
     a82:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = driveSpeedThreshold;							//Set right motor to minimal
     a86:	88 e8       	ldi	r24, 0x88	; 136
     a88:	93 e1       	ldi	r25, 0x13	; 19
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     a92:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     a96:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     a9a:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
     a9e:	81 c0       	rjmp	.+258    	; 0xba2 <__stack+0x343>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     aa0:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     aa4:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     aa8:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2031+0x2>
     aac:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2031+0x3>
     ab0:	d7 01       	movw	r26, r14
     ab2:	c6 01       	movw	r24, r12
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	aa 1f       	adc	r26, r26
     aba:	bb 1f       	adc	r27, r27
     abc:	8c 0d       	add	r24, r12
     abe:	9d 1d       	adc	r25, r13
     ac0:	ae 1d       	adc	r26, r14
     ac2:	bf 1d       	adc	r27, r15
     ac4:	ac 01       	movw	r20, r24
     ac6:	bd 01       	movw	r22, r26
     ac8:	44 0f       	add	r20, r20
     aca:	55 1f       	adc	r21, r21
     acc:	66 1f       	adc	r22, r22
     ace:	77 1f       	adc	r23, r23
     ad0:	44 0f       	add	r20, r20
     ad2:	55 1f       	adc	r21, r21
     ad4:	66 1f       	adc	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	8c 01       	movw	r16, r24
     ada:	9d 01       	movw	r18, r26
     adc:	04 0f       	add	r16, r20
     ade:	15 1f       	adc	r17, r21
     ae0:	26 1f       	adc	r18, r22
     ae2:	37 1f       	adc	r19, r23
     ae4:	c9 01       	movw	r24, r18
     ae6:	b8 01       	movw	r22, r16
     ae8:	24 e6       	ldi	r18, 0x64	; 100
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	0e 94 09 09 	call	0x1212	; 0x1212 <__udivmodsi4>
     af4:	c2 0e       	add	r12, r18
     af6:	d3 1e       	adc	r13, r19
     af8:	e4 1e       	adc	r14, r20
     afa:	f5 1e       	adc	r15, r21
     afc:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2031>
     b00:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2031+0x1>
     b04:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2031+0x2>
     b08:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2031+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     b0c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     b10:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     b14:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2030+0x2>
     b18:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2030+0x3>
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	94 46       	sbci	r25, 0x64	; 100
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	60 f0       	brcs	.+24     	; 0xb3e <__stack+0x2df>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	94 e6       	ldi	r25, 0x64	; 100
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     b32:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     b36:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     b3a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     b3e:	21 e3       	ldi	r18, 0x31	; 49
     b40:	c2 16       	cp	r12, r18
     b42:	25 e7       	ldi	r18, 0x75	; 117
     b44:	d2 06       	cpc	r13, r18
     b46:	e1 04       	cpc	r14, r1
     b48:	f1 04       	cpc	r15, r1
     b4a:	60 f0       	brcs	.+24     	; 0xb64 <__stack+0x305>
		rightMotorSpeed = 30000;						//Set it back to its max
     b4c:	80 e3       	ldi	r24, 0x30	; 48
     b4e:	95 e7       	ldi	r25, 0x75	; 117
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     b58:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     b5c:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     b60:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     b64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2028>
     b68:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2028+0x1>
     b6c:	89 2b       	or	r24, r25
     b6e:	11 f0       	breq	.+4      	; 0xb74 <__stack+0x315>
		PORTC &= 0b11111011;
     b70:	aa 98       	cbi	0x15, 2	; 21
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <__stack+0x317>
	}else{
		PORTC |= 0b00000100;
     b74:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     b76:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     b7a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     b7e:	89 2b       	or	r24, r25
     b80:	11 f0       	breq	.+4      	; 0xb86 <__stack+0x327>
		PORTC &= 0b11110111;
     b82:	ab 98       	cbi	0x15, 3	; 21
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <__stack+0x329>
	}else{
		PORTC |= 0b00001000;
     b86:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     b88:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     b8c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     b90:	9b bd       	out	0x2b, r25	; 43
     b92:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     b94:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     b98:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     b9c:	99 bd       	out	0x29, r25	; 41
     b9e:	88 bd       	out	0x28, r24	; 40
	
	return 0;
     ba0:	45 c0       	rjmp	.+138    	; 0xc2c <__stack+0x3cd>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     ba2:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     ba6:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     baa:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2031+0x2>
     bae:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2031+0x3>
     bb2:	d7 01       	movw	r26, r14
     bb4:	c6 01       	movw	r24, r12
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	aa 1f       	adc	r26, r26
     bbc:	bb 1f       	adc	r27, r27
     bbe:	8c 0d       	add	r24, r12
     bc0:	9d 1d       	adc	r25, r13
     bc2:	ae 1d       	adc	r26, r14
     bc4:	bf 1d       	adc	r27, r15
     bc6:	ac 01       	movw	r20, r24
     bc8:	bd 01       	movw	r22, r26
     bca:	44 0f       	add	r20, r20
     bcc:	55 1f       	adc	r21, r21
     bce:	66 1f       	adc	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8c 01       	movw	r16, r24
     bdc:	9d 01       	movw	r18, r26
     bde:	04 0f       	add	r16, r20
     be0:	15 1f       	adc	r17, r21
     be2:	26 1f       	adc	r18, r22
     be4:	37 1f       	adc	r19, r23
     be6:	c9 01       	movw	r24, r18
     be8:	b8 01       	movw	r22, r16
     bea:	24 e6       	ldi	r18, 0x64	; 100
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	0e 94 09 09 	call	0x1212	; 0x1212 <__udivmodsi4>
     bf6:	c2 0e       	add	r12, r18
     bf8:	d3 1e       	adc	r13, r19
     bfa:	e4 1e       	adc	r14, r20
     bfc:	f5 1e       	adc	r15, r21
     bfe:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2031>
     c02:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2031+0x1>
     c06:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2031+0x2>
     c0a:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2031+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     c0e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     c12:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     c16:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2030+0x2>
     c1a:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2030+0x3>
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	94 46       	sbci	r25, 0x64	; 100
     c22:	a1 05       	cpc	r26, r1
     c24:	b1 05       	cpc	r27, r1
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__stack+0x3cb>
     c28:	9d cf       	rjmp	.-198    	; 0xb64 <__stack+0x305>
     c2a:	7d cf       	rjmp	.-262    	; 0xb26 <__stack+0x2c7>
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
	OCR1B = leftMotorSpeed;							//And do the same for the left one
	
	return 0;
}
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	67 96       	adiw	r28, 0x17	; 23
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	9f 90       	pop	r9
     c52:	8f 90       	pop	r8
     c54:	7f 90       	pop	r7
     c56:	6f 90       	pop	r6
     c58:	5f 90       	pop	r5
     c5a:	4f 90       	pop	r4
     c5c:	3f 90       	pop	r3
     c5e:	2f 90       	pop	r2
     c60:	08 95       	ret

00000c62 <main>:
	return 0;							//If going backwards or standing still
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     c62:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     c64:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <init_micros>
	
	init_motor();
     c68:	0e 94 a8 01 	call	0x350	; 0x350 <init_motor>
	init_LED();
     c6c:	0e 94 cd 00 	call	0x19a	; 0x19a <init_LED>
	
	init_i2c_slave(8);
     c70:	88 e0       	ldi	r24, 0x08	; 8
     c72:	0e 94 49 00 	call	0x92	; 0x92 <init_i2c_slave>
	//-----------------------
	
	while(1){
		
		motorDriver(driveSpeed(), driveDirection(), globalTurnDirection);
     c76:	0e 94 c4 00 	call	0x188	; 0x188 <driveDirection>
     c7a:	8c 01       	movw	r16, r24
     c7c:	0e 94 b7 00 	call	0x16e	; 0x16e <driveSpeed>
     c80:	39 2f       	mov	r19, r25
     c82:	e0 90 ad 00 	lds	r14, 0x00AD	; 0x8000ad <globalTurnDirection>
     c86:	0e 2c       	mov	r0, r14
     c88:	00 0c       	add	r0, r0
     c8a:	ff 08       	sbc	r15, r15
     c8c:	28 2f       	mov	r18, r24
     c8e:	99 0f       	add	r25, r25
     c90:	99 0b       	sbc	r25, r25
     c92:	49 2f       	mov	r20, r25
     c94:	59 2f       	mov	r21, r25
     c96:	69 2f       	mov	r22, r25
     c98:	79 2f       	mov	r23, r25
     c9a:	89 2f       	mov	r24, r25
     c9c:	0e 94 ed 01 	call	0x3da	; 0x3da <motorDriver>
     ca0:	ea cf       	rjmp	.-44     	; 0xc76 <main+0x14>

00000ca2 <__subsf3>:
     ca2:	50 58       	subi	r21, 0x80	; 128

00000ca4 <__addsf3>:
     ca4:	bb 27       	eor	r27, r27
     ca6:	aa 27       	eor	r26, r26
     ca8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__addsf3x>
     cac:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_round>
     cb0:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscA>
     cb4:	38 f0       	brcs	.+14     	; 0xcc4 <__addsf3+0x20>
     cb6:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_pscB>
     cba:	20 f0       	brcs	.+8      	; 0xcc4 <__addsf3+0x20>
     cbc:	39 f4       	brne	.+14     	; 0xccc <__addsf3+0x28>
     cbe:	9f 3f       	cpi	r25, 0xFF	; 255
     cc0:	19 f4       	brne	.+6      	; 0xcc8 <__addsf3+0x24>
     cc2:	26 f4       	brtc	.+8      	; 0xccc <__addsf3+0x28>
     cc4:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_nan>
     cc8:	0e f4       	brtc	.+2      	; 0xccc <__addsf3+0x28>
     cca:	e0 95       	com	r30
     ccc:	e7 fb       	bst	r30, 7
     cce:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>

00000cd2 <__addsf3x>:
     cd2:	e9 2f       	mov	r30, r25
     cd4:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_split3>
     cd8:	58 f3       	brcs	.-42     	; 0xcb0 <__addsf3+0xc>
     cda:	ba 17       	cp	r27, r26
     cdc:	62 07       	cpc	r22, r18
     cde:	73 07       	cpc	r23, r19
     ce0:	84 07       	cpc	r24, r20
     ce2:	95 07       	cpc	r25, r21
     ce4:	20 f0       	brcs	.+8      	; 0xcee <__addsf3x+0x1c>
     ce6:	79 f4       	brne	.+30     	; 0xd06 <__addsf3x+0x34>
     ce8:	a6 f5       	brtc	.+104    	; 0xd52 <__addsf3x+0x80>
     cea:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_zero>
     cee:	0e f4       	brtc	.+2      	; 0xcf2 <__addsf3x+0x20>
     cf0:	e0 95       	com	r30
     cf2:	0b 2e       	mov	r0, r27
     cf4:	ba 2f       	mov	r27, r26
     cf6:	a0 2d       	mov	r26, r0
     cf8:	0b 01       	movw	r0, r22
     cfa:	b9 01       	movw	r22, r18
     cfc:	90 01       	movw	r18, r0
     cfe:	0c 01       	movw	r0, r24
     d00:	ca 01       	movw	r24, r20
     d02:	a0 01       	movw	r20, r0
     d04:	11 24       	eor	r1, r1
     d06:	ff 27       	eor	r31, r31
     d08:	59 1b       	sub	r21, r25
     d0a:	99 f0       	breq	.+38     	; 0xd32 <__addsf3x+0x60>
     d0c:	59 3f       	cpi	r21, 0xF9	; 249
     d0e:	50 f4       	brcc	.+20     	; 0xd24 <__addsf3x+0x52>
     d10:	50 3e       	cpi	r21, 0xE0	; 224
     d12:	68 f1       	brcs	.+90     	; 0xd6e <__addsf3x+0x9c>
     d14:	1a 16       	cp	r1, r26
     d16:	f0 40       	sbci	r31, 0x00	; 0
     d18:	a2 2f       	mov	r26, r18
     d1a:	23 2f       	mov	r18, r19
     d1c:	34 2f       	mov	r19, r20
     d1e:	44 27       	eor	r20, r20
     d20:	58 5f       	subi	r21, 0xF8	; 248
     d22:	f3 cf       	rjmp	.-26     	; 0xd0a <__addsf3x+0x38>
     d24:	46 95       	lsr	r20
     d26:	37 95       	ror	r19
     d28:	27 95       	ror	r18
     d2a:	a7 95       	ror	r26
     d2c:	f0 40       	sbci	r31, 0x00	; 0
     d2e:	53 95       	inc	r21
     d30:	c9 f7       	brne	.-14     	; 0xd24 <__addsf3x+0x52>
     d32:	7e f4       	brtc	.+30     	; 0xd52 <__addsf3x+0x80>
     d34:	1f 16       	cp	r1, r31
     d36:	ba 0b       	sbc	r27, r26
     d38:	62 0b       	sbc	r22, r18
     d3a:	73 0b       	sbc	r23, r19
     d3c:	84 0b       	sbc	r24, r20
     d3e:	ba f0       	brmi	.+46     	; 0xd6e <__addsf3x+0x9c>
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	a1 f0       	breq	.+40     	; 0xd6c <__addsf3x+0x9a>
     d44:	ff 0f       	add	r31, r31
     d46:	bb 1f       	adc	r27, r27
     d48:	66 1f       	adc	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	88 1f       	adc	r24, r24
     d4e:	c2 f7       	brpl	.-16     	; 0xd40 <__addsf3x+0x6e>
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <__addsf3x+0x9c>
     d52:	ba 0f       	add	r27, r26
     d54:	62 1f       	adc	r22, r18
     d56:	73 1f       	adc	r23, r19
     d58:	84 1f       	adc	r24, r20
     d5a:	48 f4       	brcc	.+18     	; 0xd6e <__addsf3x+0x9c>
     d5c:	87 95       	ror	r24
     d5e:	77 95       	ror	r23
     d60:	67 95       	ror	r22
     d62:	b7 95       	ror	r27
     d64:	f7 95       	ror	r31
     d66:	9e 3f       	cpi	r25, 0xFE	; 254
     d68:	08 f0       	brcs	.+2      	; 0xd6c <__addsf3x+0x9a>
     d6a:	b0 cf       	rjmp	.-160    	; 0xccc <__addsf3+0x28>
     d6c:	93 95       	inc	r25
     d6e:	88 0f       	add	r24, r24
     d70:	08 f0       	brcs	.+2      	; 0xd74 <__addsf3x+0xa2>
     d72:	99 27       	eor	r25, r25
     d74:	ee 0f       	add	r30, r30
     d76:	97 95       	ror	r25
     d78:	87 95       	ror	r24
     d7a:	08 95       	ret

00000d7c <__divsf3>:
     d7c:	0e 94 d2 06 	call	0xda4	; 0xda4 <__divsf3x>
     d80:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_round>
     d84:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_pscB>
     d88:	58 f0       	brcs	.+22     	; 0xda0 <__divsf3+0x24>
     d8a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscA>
     d8e:	40 f0       	brcs	.+16     	; 0xda0 <__divsf3+0x24>
     d90:	29 f4       	brne	.+10     	; 0xd9c <__divsf3+0x20>
     d92:	5f 3f       	cpi	r21, 0xFF	; 255
     d94:	29 f0       	breq	.+10     	; 0xda0 <__divsf3+0x24>
     d96:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
     d9a:	51 11       	cpse	r21, r1
     d9c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_szero>
     da0:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_nan>

00000da4 <__divsf3x>:
     da4:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_split3>
     da8:	68 f3       	brcs	.-38     	; 0xd84 <__divsf3+0x8>

00000daa <__divsf3_pse>:
     daa:	99 23       	and	r25, r25
     dac:	b1 f3       	breq	.-20     	; 0xd9a <__divsf3+0x1e>
     dae:	55 23       	and	r21, r21
     db0:	91 f3       	breq	.-28     	; 0xd96 <__divsf3+0x1a>
     db2:	95 1b       	sub	r25, r21
     db4:	55 0b       	sbc	r21, r21
     db6:	bb 27       	eor	r27, r27
     db8:	aa 27       	eor	r26, r26
     dba:	62 17       	cp	r22, r18
     dbc:	73 07       	cpc	r23, r19
     dbe:	84 07       	cpc	r24, r20
     dc0:	38 f0       	brcs	.+14     	; 0xdd0 <__divsf3_pse+0x26>
     dc2:	9f 5f       	subi	r25, 0xFF	; 255
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	44 1f       	adc	r20, r20
     dcc:	aa 1f       	adc	r26, r26
     dce:	a9 f3       	breq	.-22     	; 0xdba <__divsf3_pse+0x10>
     dd0:	35 d0       	rcall	.+106    	; 0xe3c <__divsf3_pse+0x92>
     dd2:	0e 2e       	mov	r0, r30
     dd4:	3a f0       	brmi	.+14     	; 0xde4 <__divsf3_pse+0x3a>
     dd6:	e0 e8       	ldi	r30, 0x80	; 128
     dd8:	32 d0       	rcall	.+100    	; 0xe3e <__divsf3_pse+0x94>
     dda:	91 50       	subi	r25, 0x01	; 1
     ddc:	50 40       	sbci	r21, 0x00	; 0
     dde:	e6 95       	lsr	r30
     de0:	00 1c       	adc	r0, r0
     de2:	ca f7       	brpl	.-14     	; 0xdd6 <__divsf3_pse+0x2c>
     de4:	2b d0       	rcall	.+86     	; 0xe3c <__divsf3_pse+0x92>
     de6:	fe 2f       	mov	r31, r30
     de8:	29 d0       	rcall	.+82     	; 0xe3c <__divsf3_pse+0x92>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	26 17       	cp	r18, r22
     df4:	37 07       	cpc	r19, r23
     df6:	48 07       	cpc	r20, r24
     df8:	ab 07       	cpc	r26, r27
     dfa:	b0 e8       	ldi	r27, 0x80	; 128
     dfc:	09 f0       	breq	.+2      	; 0xe00 <__divsf3_pse+0x56>
     dfe:	bb 0b       	sbc	r27, r27
     e00:	80 2d       	mov	r24, r0
     e02:	bf 01       	movw	r22, r30
     e04:	ff 27       	eor	r31, r31
     e06:	93 58       	subi	r25, 0x83	; 131
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	3a f0       	brmi	.+14     	; 0xe1a <__divsf3_pse+0x70>
     e0c:	9e 3f       	cpi	r25, 0xFE	; 254
     e0e:	51 05       	cpc	r21, r1
     e10:	78 f0       	brcs	.+30     	; 0xe30 <__divsf3_pse+0x86>
     e12:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
     e16:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_szero>
     e1a:	5f 3f       	cpi	r21, 0xFF	; 255
     e1c:	e4 f3       	brlt	.-8      	; 0xe16 <__divsf3_pse+0x6c>
     e1e:	98 3e       	cpi	r25, 0xE8	; 232
     e20:	d4 f3       	brlt	.-12     	; 0xe16 <__divsf3_pse+0x6c>
     e22:	86 95       	lsr	r24
     e24:	77 95       	ror	r23
     e26:	67 95       	ror	r22
     e28:	b7 95       	ror	r27
     e2a:	f7 95       	ror	r31
     e2c:	9f 5f       	subi	r25, 0xFF	; 255
     e2e:	c9 f7       	brne	.-14     	; 0xe22 <__divsf3_pse+0x78>
     e30:	88 0f       	add	r24, r24
     e32:	91 1d       	adc	r25, r1
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	97 f9       	bld	r25, 7
     e3a:	08 95       	ret
     e3c:	e1 e0       	ldi	r30, 0x01	; 1
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	bb 1f       	adc	r27, r27
     e46:	62 17       	cp	r22, r18
     e48:	73 07       	cpc	r23, r19
     e4a:	84 07       	cpc	r24, r20
     e4c:	ba 07       	cpc	r27, r26
     e4e:	20 f0       	brcs	.+8      	; 0xe58 <__divsf3_pse+0xae>
     e50:	62 1b       	sub	r22, r18
     e52:	73 0b       	sbc	r23, r19
     e54:	84 0b       	sbc	r24, r20
     e56:	ba 0b       	sbc	r27, r26
     e58:	ee 1f       	adc	r30, r30
     e5a:	88 f7       	brcc	.-30     	; 0xe3e <__divsf3_pse+0x94>
     e5c:	e0 95       	com	r30
     e5e:	08 95       	ret

00000e60 <__fixunssfsi>:
     e60:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_splitA>
     e64:	88 f0       	brcs	.+34     	; 0xe88 <__fixunssfsi+0x28>
     e66:	9f 57       	subi	r25, 0x7F	; 127
     e68:	98 f0       	brcs	.+38     	; 0xe90 <__fixunssfsi+0x30>
     e6a:	b9 2f       	mov	r27, r25
     e6c:	99 27       	eor	r25, r25
     e6e:	b7 51       	subi	r27, 0x17	; 23
     e70:	b0 f0       	brcs	.+44     	; 0xe9e <__fixunssfsi+0x3e>
     e72:	e1 f0       	breq	.+56     	; 0xeac <__fixunssfsi+0x4c>
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	1a f0       	brmi	.+6      	; 0xe84 <__fixunssfsi+0x24>
     e7e:	ba 95       	dec	r27
     e80:	c9 f7       	brne	.-14     	; 0xe74 <__fixunssfsi+0x14>
     e82:	14 c0       	rjmp	.+40     	; 0xeac <__fixunssfsi+0x4c>
     e84:	b1 30       	cpi	r27, 0x01	; 1
     e86:	91 f0       	breq	.+36     	; 0xeac <__fixunssfsi+0x4c>
     e88:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_zero>
     e8c:	b1 e0       	ldi	r27, 0x01	; 1
     e8e:	08 95       	ret
     e90:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_zero>
     e94:	67 2f       	mov	r22, r23
     e96:	78 2f       	mov	r23, r24
     e98:	88 27       	eor	r24, r24
     e9a:	b8 5f       	subi	r27, 0xF8	; 248
     e9c:	39 f0       	breq	.+14     	; 0xeac <__fixunssfsi+0x4c>
     e9e:	b9 3f       	cpi	r27, 0xF9	; 249
     ea0:	cc f3       	brlt	.-14     	; 0xe94 <__fixunssfsi+0x34>
     ea2:	86 95       	lsr	r24
     ea4:	77 95       	ror	r23
     ea6:	67 95       	ror	r22
     ea8:	b3 95       	inc	r27
     eaa:	d9 f7       	brne	.-10     	; 0xea2 <__fixunssfsi+0x42>
     eac:	3e f4       	brtc	.+14     	; 0xebc <__fixunssfsi+0x5c>
     eae:	90 95       	com	r25
     eb0:	80 95       	com	r24
     eb2:	70 95       	com	r23
     eb4:	61 95       	neg	r22
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	8f 4f       	sbci	r24, 0xFF	; 255
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	08 95       	ret

00000ebe <__floatdisf>:
     ebe:	97 fb       	bst	r25, 7
     ec0:	16 f4       	brtc	.+4      	; 0xec6 <__floatdisf+0x8>
     ec2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__fp_negdi>
     ec6:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_di2sf>

00000eca <__floatunsisf>:
     eca:	e8 94       	clt
     ecc:	09 c0       	rjmp	.+18     	; 0xee0 <__floatsisf+0x12>

00000ece <__floatsisf>:
     ece:	97 fb       	bst	r25, 7
     ed0:	3e f4       	brtc	.+14     	; 0xee0 <__floatsisf+0x12>
     ed2:	90 95       	com	r25
     ed4:	80 95       	com	r24
     ed6:	70 95       	com	r23
     ed8:	61 95       	neg	r22
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	99 23       	and	r25, r25
     ee2:	a9 f0       	breq	.+42     	; 0xf0e <__floatsisf+0x40>
     ee4:	f9 2f       	mov	r31, r25
     ee6:	96 e9       	ldi	r25, 0x96	; 150
     ee8:	bb 27       	eor	r27, r27
     eea:	93 95       	inc	r25
     eec:	f6 95       	lsr	r31
     eee:	87 95       	ror	r24
     ef0:	77 95       	ror	r23
     ef2:	67 95       	ror	r22
     ef4:	b7 95       	ror	r27
     ef6:	f1 11       	cpse	r31, r1
     ef8:	f8 cf       	rjmp	.-16     	; 0xeea <__floatsisf+0x1c>
     efa:	fa f4       	brpl	.+62     	; 0xf3a <__floatsisf+0x6c>
     efc:	bb 0f       	add	r27, r27
     efe:	11 f4       	brne	.+4      	; 0xf04 <__floatsisf+0x36>
     f00:	60 ff       	sbrs	r22, 0
     f02:	1b c0       	rjmp	.+54     	; 0xf3a <__floatsisf+0x6c>
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	16 c0       	rjmp	.+44     	; 0xf3a <__floatsisf+0x6c>
     f0e:	88 23       	and	r24, r24
     f10:	11 f0       	breq	.+4      	; 0xf16 <__floatsisf+0x48>
     f12:	96 e9       	ldi	r25, 0x96	; 150
     f14:	11 c0       	rjmp	.+34     	; 0xf38 <__floatsisf+0x6a>
     f16:	77 23       	and	r23, r23
     f18:	21 f0       	breq	.+8      	; 0xf22 <__floatsisf+0x54>
     f1a:	9e e8       	ldi	r25, 0x8E	; 142
     f1c:	87 2f       	mov	r24, r23
     f1e:	76 2f       	mov	r23, r22
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <__floatsisf+0x5e>
     f22:	66 23       	and	r22, r22
     f24:	71 f0       	breq	.+28     	; 0xf42 <__floatsisf+0x74>
     f26:	96 e8       	ldi	r25, 0x86	; 134
     f28:	86 2f       	mov	r24, r22
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	2a f0       	brmi	.+10     	; 0xf3a <__floatsisf+0x6c>
     f30:	9a 95       	dec	r25
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	88 1f       	adc	r24, r24
     f38:	da f7       	brpl	.-10     	; 0xf30 <__floatsisf+0x62>
     f3a:	88 0f       	add	r24, r24
     f3c:	96 95       	lsr	r25
     f3e:	87 95       	ror	r24
     f40:	97 f9       	bld	r25, 7
     f42:	08 95       	ret

00000f44 <__floatundisf>:
     f44:	e8 94       	clt

00000f46 <__fp_di2sf>:
     f46:	f9 2f       	mov	r31, r25
     f48:	96 eb       	ldi	r25, 0xB6	; 182
     f4a:	ff 23       	and	r31, r31
     f4c:	81 f0       	breq	.+32     	; 0xf6e <__fp_di2sf+0x28>
     f4e:	12 16       	cp	r1, r18
     f50:	13 06       	cpc	r1, r19
     f52:	14 06       	cpc	r1, r20
     f54:	44 0b       	sbc	r20, r20
     f56:	93 95       	inc	r25
     f58:	f6 95       	lsr	r31
     f5a:	87 95       	ror	r24
     f5c:	77 95       	ror	r23
     f5e:	67 95       	ror	r22
     f60:	57 95       	ror	r21
     f62:	40 40       	sbci	r20, 0x00	; 0
     f64:	ff 23       	and	r31, r31
     f66:	b9 f7       	brne	.-18     	; 0xf56 <__fp_di2sf+0x10>
     f68:	1b c0       	rjmp	.+54     	; 0xfa0 <__fp_di2sf+0x5a>
     f6a:	99 27       	eor	r25, r25
     f6c:	08 95       	ret
     f6e:	88 23       	and	r24, r24
     f70:	51 f4       	brne	.+20     	; 0xf86 <__fp_di2sf+0x40>
     f72:	98 50       	subi	r25, 0x08	; 8
     f74:	d2 f7       	brpl	.-12     	; 0xf6a <__fp_di2sf+0x24>
     f76:	87 2b       	or	r24, r23
     f78:	76 2f       	mov	r23, r22
     f7a:	65 2f       	mov	r22, r21
     f7c:	54 2f       	mov	r21, r20
     f7e:	43 2f       	mov	r20, r19
     f80:	32 2f       	mov	r19, r18
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	b1 f3       	breq	.-20     	; 0xf72 <__fp_di2sf+0x2c>
     f86:	12 16       	cp	r1, r18
     f88:	13 06       	cpc	r1, r19
     f8a:	14 06       	cpc	r1, r20
     f8c:	44 0b       	sbc	r20, r20
     f8e:	88 23       	and	r24, r24
     f90:	3a f0       	brmi	.+14     	; 0xfa0 <__fp_di2sf+0x5a>
     f92:	9a 95       	dec	r25
     f94:	44 0f       	add	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	66 1f       	adc	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	ca f7       	brpl	.-14     	; 0xf92 <__fp_di2sf+0x4c>
     fa0:	55 23       	and	r21, r21
     fa2:	4a f4       	brpl	.+18     	; 0xfb6 <__fp_di2sf+0x70>
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	11 f4       	brne	.+4      	; 0xfae <__fp_di2sf+0x68>
     faa:	60 ff       	sbrs	r22, 0
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <__fp_di2sf+0x70>
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	88 0f       	add	r24, r24
     fb8:	96 95       	lsr	r25
     fba:	87 95       	ror	r24
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret

00000fc0 <__fp_inf>:
     fc0:	97 f9       	bld	r25, 7
     fc2:	9f 67       	ori	r25, 0x7F	; 127
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	08 95       	ret

00000fcc <__fp_nan>:
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	80 ec       	ldi	r24, 0xC0	; 192
     fd0:	08 95       	ret

00000fd2 <__fp_negdi>:
     fd2:	90 95       	com	r25
     fd4:	80 95       	com	r24
     fd6:	70 95       	com	r23
     fd8:	60 95       	com	r22
     fda:	50 95       	com	r21
     fdc:	40 95       	com	r20
     fde:	30 95       	com	r19
     fe0:	21 95       	neg	r18
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	4f 4f       	sbci	r20, 0xFF	; 255
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	6f 4f       	sbci	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_pscA>:
     ff2:	00 24       	eor	r0, r0
     ff4:	0a 94       	dec	r0
     ff6:	16 16       	cp	r1, r22
     ff8:	17 06       	cpc	r1, r23
     ffa:	18 06       	cpc	r1, r24
     ffc:	09 06       	cpc	r0, r25
     ffe:	08 95       	ret

00001000 <__fp_pscB>:
    1000:	00 24       	eor	r0, r0
    1002:	0a 94       	dec	r0
    1004:	12 16       	cp	r1, r18
    1006:	13 06       	cpc	r1, r19
    1008:	14 06       	cpc	r1, r20
    100a:	05 06       	cpc	r0, r21
    100c:	08 95       	ret

0000100e <__fp_round>:
    100e:	09 2e       	mov	r0, r25
    1010:	03 94       	inc	r0
    1012:	00 0c       	add	r0, r0
    1014:	11 f4       	brne	.+4      	; 0x101a <__fp_round+0xc>
    1016:	88 23       	and	r24, r24
    1018:	52 f0       	brmi	.+20     	; 0x102e <__fp_round+0x20>
    101a:	bb 0f       	add	r27, r27
    101c:	40 f4       	brcc	.+16     	; 0x102e <__fp_round+0x20>
    101e:	bf 2b       	or	r27, r31
    1020:	11 f4       	brne	.+4      	; 0x1026 <__fp_round+0x18>
    1022:	60 ff       	sbrs	r22, 0
    1024:	04 c0       	rjmp	.+8      	; 0x102e <__fp_round+0x20>
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	08 95       	ret

00001030 <__fp_split3>:
    1030:	57 fd       	sbrc	r21, 7
    1032:	90 58       	subi	r25, 0x80	; 128
    1034:	44 0f       	add	r20, r20
    1036:	55 1f       	adc	r21, r21
    1038:	59 f0       	breq	.+22     	; 0x1050 <__fp_splitA+0x10>
    103a:	5f 3f       	cpi	r21, 0xFF	; 255
    103c:	71 f0       	breq	.+28     	; 0x105a <__fp_splitA+0x1a>
    103e:	47 95       	ror	r20

00001040 <__fp_splitA>:
    1040:	88 0f       	add	r24, r24
    1042:	97 fb       	bst	r25, 7
    1044:	99 1f       	adc	r25, r25
    1046:	61 f0       	breq	.+24     	; 0x1060 <__fp_splitA+0x20>
    1048:	9f 3f       	cpi	r25, 0xFF	; 255
    104a:	79 f0       	breq	.+30     	; 0x106a <__fp_splitA+0x2a>
    104c:	87 95       	ror	r24
    104e:	08 95       	ret
    1050:	12 16       	cp	r1, r18
    1052:	13 06       	cpc	r1, r19
    1054:	14 06       	cpc	r1, r20
    1056:	55 1f       	adc	r21, r21
    1058:	f2 cf       	rjmp	.-28     	; 0x103e <__fp_split3+0xe>
    105a:	46 95       	lsr	r20
    105c:	f1 df       	rcall	.-30     	; 0x1040 <__fp_splitA>
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <__fp_splitA+0x30>
    1060:	16 16       	cp	r1, r22
    1062:	17 06       	cpc	r1, r23
    1064:	18 06       	cpc	r1, r24
    1066:	99 1f       	adc	r25, r25
    1068:	f1 cf       	rjmp	.-30     	; 0x104c <__fp_splitA+0xc>
    106a:	86 95       	lsr	r24
    106c:	71 05       	cpc	r23, r1
    106e:	61 05       	cpc	r22, r1
    1070:	08 94       	sec
    1072:	08 95       	ret

00001074 <__fp_zero>:
    1074:	e8 94       	clt

00001076 <__fp_szero>:
    1076:	bb 27       	eor	r27, r27
    1078:	66 27       	eor	r22, r22
    107a:	77 27       	eor	r23, r23
    107c:	cb 01       	movw	r24, r22
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret

00001082 <__mulsf3>:
    1082:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3x>
    1086:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_round>
    108a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscA>
    108e:	38 f0       	brcs	.+14     	; 0x109e <__mulsf3+0x1c>
    1090:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_pscB>
    1094:	20 f0       	brcs	.+8      	; 0x109e <__mulsf3+0x1c>
    1096:	95 23       	and	r25, r21
    1098:	11 f0       	breq	.+4      	; 0x109e <__mulsf3+0x1c>
    109a:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
    109e:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_nan>
    10a2:	11 24       	eor	r1, r1
    10a4:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_szero>

000010a8 <__mulsf3x>:
    10a8:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_split3>
    10ac:	70 f3       	brcs	.-36     	; 0x108a <__mulsf3+0x8>

000010ae <__mulsf3_pse>:
    10ae:	95 9f       	mul	r25, r21
    10b0:	c1 f3       	breq	.-16     	; 0x10a2 <__mulsf3+0x20>
    10b2:	95 0f       	add	r25, r21
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	55 1f       	adc	r21, r21
    10b8:	62 9f       	mul	r22, r18
    10ba:	f0 01       	movw	r30, r0
    10bc:	72 9f       	mul	r23, r18
    10be:	bb 27       	eor	r27, r27
    10c0:	f0 0d       	add	r31, r0
    10c2:	b1 1d       	adc	r27, r1
    10c4:	63 9f       	mul	r22, r19
    10c6:	aa 27       	eor	r26, r26
    10c8:	f0 0d       	add	r31, r0
    10ca:	b1 1d       	adc	r27, r1
    10cc:	aa 1f       	adc	r26, r26
    10ce:	64 9f       	mul	r22, r20
    10d0:	66 27       	eor	r22, r22
    10d2:	b0 0d       	add	r27, r0
    10d4:	a1 1d       	adc	r26, r1
    10d6:	66 1f       	adc	r22, r22
    10d8:	82 9f       	mul	r24, r18
    10da:	22 27       	eor	r18, r18
    10dc:	b0 0d       	add	r27, r0
    10de:	a1 1d       	adc	r26, r1
    10e0:	62 1f       	adc	r22, r18
    10e2:	73 9f       	mul	r23, r19
    10e4:	b0 0d       	add	r27, r0
    10e6:	a1 1d       	adc	r26, r1
    10e8:	62 1f       	adc	r22, r18
    10ea:	83 9f       	mul	r24, r19
    10ec:	a0 0d       	add	r26, r0
    10ee:	61 1d       	adc	r22, r1
    10f0:	22 1f       	adc	r18, r18
    10f2:	74 9f       	mul	r23, r20
    10f4:	33 27       	eor	r19, r19
    10f6:	a0 0d       	add	r26, r0
    10f8:	61 1d       	adc	r22, r1
    10fa:	23 1f       	adc	r18, r19
    10fc:	84 9f       	mul	r24, r20
    10fe:	60 0d       	add	r22, r0
    1100:	21 1d       	adc	r18, r1
    1102:	82 2f       	mov	r24, r18
    1104:	76 2f       	mov	r23, r22
    1106:	6a 2f       	mov	r22, r26
    1108:	11 24       	eor	r1, r1
    110a:	9f 57       	subi	r25, 0x7F	; 127
    110c:	50 40       	sbci	r21, 0x00	; 0
    110e:	9a f0       	brmi	.+38     	; 0x1136 <__mulsf3_pse+0x88>
    1110:	f1 f0       	breq	.+60     	; 0x114e <__mulsf3_pse+0xa0>
    1112:	88 23       	and	r24, r24
    1114:	4a f0       	brmi	.+18     	; 0x1128 <__mulsf3_pse+0x7a>
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	bb 1f       	adc	r27, r27
    111c:	66 1f       	adc	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	91 50       	subi	r25, 0x01	; 1
    1124:	50 40       	sbci	r21, 0x00	; 0
    1126:	a9 f7       	brne	.-22     	; 0x1112 <__mulsf3_pse+0x64>
    1128:	9e 3f       	cpi	r25, 0xFE	; 254
    112a:	51 05       	cpc	r21, r1
    112c:	80 f0       	brcs	.+32     	; 0x114e <__mulsf3_pse+0xa0>
    112e:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
    1132:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_szero>
    1136:	5f 3f       	cpi	r21, 0xFF	; 255
    1138:	e4 f3       	brlt	.-8      	; 0x1132 <__mulsf3_pse+0x84>
    113a:	98 3e       	cpi	r25, 0xE8	; 232
    113c:	d4 f3       	brlt	.-12     	; 0x1132 <__mulsf3_pse+0x84>
    113e:	86 95       	lsr	r24
    1140:	77 95       	ror	r23
    1142:	67 95       	ror	r22
    1144:	b7 95       	ror	r27
    1146:	f7 95       	ror	r31
    1148:	e7 95       	ror	r30
    114a:	9f 5f       	subi	r25, 0xFF	; 255
    114c:	c1 f7       	brne	.-16     	; 0x113e <__mulsf3_pse+0x90>
    114e:	fe 2b       	or	r31, r30
    1150:	88 0f       	add	r24, r24
    1152:	91 1d       	adc	r25, r1
    1154:	96 95       	lsr	r25
    1156:	87 95       	ror	r24
    1158:	97 f9       	bld	r25, 7
    115a:	08 95       	ret
    115c:	19 f4       	brne	.+6      	; 0x1164 <__mulsf3_pse+0xb6>
    115e:	16 f4       	brtc	.+4      	; 0x1164 <__mulsf3_pse+0xb6>
    1160:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_nan>
    1164:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_mpack>

00001168 <sqrt>:
    1168:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_splitA>
    116c:	b8 f3       	brcs	.-18     	; 0x115c <__mulsf3_pse+0xae>
    116e:	99 23       	and	r25, r25
    1170:	c9 f3       	breq	.-14     	; 0x1164 <__mulsf3_pse+0xb6>
    1172:	b6 f3       	brts	.-20     	; 0x1160 <__mulsf3_pse+0xb2>
    1174:	9f 57       	subi	r25, 0x7F	; 127
    1176:	55 0b       	sbc	r21, r21
    1178:	87 ff       	sbrs	r24, 7
    117a:	0e 94 02 09 	call	0x1204	; 0x1204 <__fp_norm2>
    117e:	00 24       	eor	r0, r0
    1180:	a0 e6       	ldi	r26, 0x60	; 96
    1182:	40 ea       	ldi	r20, 0xA0	; 160
    1184:	90 01       	movw	r18, r0
    1186:	80 58       	subi	r24, 0x80	; 128
    1188:	56 95       	lsr	r21
    118a:	97 95       	ror	r25
    118c:	28 f4       	brcc	.+10     	; 0x1198 <sqrt+0x30>
    118e:	80 5c       	subi	r24, 0xC0	; 192
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	20 f0       	brcs	.+8      	; 0x11a0 <sqrt+0x38>
    1198:	26 17       	cp	r18, r22
    119a:	37 07       	cpc	r19, r23
    119c:	48 07       	cpc	r20, r24
    119e:	30 f4       	brcc	.+12     	; 0x11ac <sqrt+0x44>
    11a0:	62 1b       	sub	r22, r18
    11a2:	73 0b       	sbc	r23, r19
    11a4:	84 0b       	sbc	r24, r20
    11a6:	20 29       	or	r18, r0
    11a8:	31 29       	or	r19, r1
    11aa:	4a 2b       	or	r20, r26
    11ac:	a6 95       	lsr	r26
    11ae:	17 94       	ror	r1
    11b0:	07 94       	ror	r0
    11b2:	20 25       	eor	r18, r0
    11b4:	31 25       	eor	r19, r1
    11b6:	4a 27       	eor	r20, r26
    11b8:	58 f7       	brcc	.-42     	; 0x1190 <sqrt+0x28>
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	20 f0       	brcs	.+8      	; 0x11ca <sqrt+0x62>
    11c2:	26 17       	cp	r18, r22
    11c4:	37 07       	cpc	r19, r23
    11c6:	48 07       	cpc	r20, r24
    11c8:	30 f4       	brcc	.+12     	; 0x11d6 <sqrt+0x6e>
    11ca:	62 0b       	sbc	r22, r18
    11cc:	73 0b       	sbc	r23, r19
    11ce:	84 0b       	sbc	r24, r20
    11d0:	20 0d       	add	r18, r0
    11d2:	31 1d       	adc	r19, r1
    11d4:	41 1d       	adc	r20, r1
    11d6:	a0 95       	com	r26
    11d8:	81 f7       	brne	.-32     	; 0x11ba <sqrt+0x52>
    11da:	b9 01       	movw	r22, r18
    11dc:	84 2f       	mov	r24, r20
    11de:	91 58       	subi	r25, 0x81	; 129
    11e0:	88 0f       	add	r24, r24
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	08 95       	ret

000011e8 <__fp_mpack>:
    11e8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ea:	31 f0       	breq	.+12     	; 0x11f8 <__fp_mpack_finite+0xc>

000011ec <__fp_mpack_finite>:
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	20 f4       	brcc	.+8      	; 0x11f8 <__fp_mpack_finite+0xc>
    11f0:	87 95       	ror	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	88 0f       	add	r24, r24
    11fa:	91 1d       	adc	r25, r1
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret

00001204 <__fp_norm2>:
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	d2 f7       	brpl	.-12     	; 0x1204 <__fp_norm2>
    1210:	08 95       	ret

00001212 <__udivmodsi4>:
    1212:	a1 e2       	ldi	r26, 0x21	; 33
    1214:	1a 2e       	mov	r1, r26
    1216:	aa 1b       	sub	r26, r26
    1218:	bb 1b       	sub	r27, r27
    121a:	fd 01       	movw	r30, r26
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <__udivmodsi4_ep>

0000121e <__udivmodsi4_loop>:
    121e:	aa 1f       	adc	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	ee 1f       	adc	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	a2 17       	cp	r26, r18
    1228:	b3 07       	cpc	r27, r19
    122a:	e4 07       	cpc	r30, r20
    122c:	f5 07       	cpc	r31, r21
    122e:	20 f0       	brcs	.+8      	; 0x1238 <__udivmodsi4_ep>
    1230:	a2 1b       	sub	r26, r18
    1232:	b3 0b       	sbc	r27, r19
    1234:	e4 0b       	sbc	r30, r20
    1236:	f5 0b       	sbc	r31, r21

00001238 <__udivmodsi4_ep>:
    1238:	66 1f       	adc	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	1a 94       	dec	r1
    1242:	69 f7       	brne	.-38     	; 0x121e <__udivmodsi4_loop>
    1244:	60 95       	com	r22
    1246:	70 95       	com	r23
    1248:	80 95       	com	r24
    124a:	90 95       	com	r25
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	bd 01       	movw	r22, r26
    1252:	cf 01       	movw	r24, r30
    1254:	08 95       	ret

00001256 <__muldi3>:
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	1f 93       	push	r17
    125c:	0f 93       	push	r16
    125e:	9a 9d       	mul	r25, r10
    1260:	f0 2d       	mov	r31, r0
    1262:	21 9f       	mul	r18, r17
    1264:	f0 0d       	add	r31, r0
    1266:	8b 9d       	mul	r24, r11
    1268:	f0 0d       	add	r31, r0
    126a:	8a 9d       	mul	r24, r10
    126c:	e0 2d       	mov	r30, r0
    126e:	f1 0d       	add	r31, r1
    1270:	03 9f       	mul	r16, r19
    1272:	f0 0d       	add	r31, r0
    1274:	02 9f       	mul	r16, r18
    1276:	e0 0d       	add	r30, r0
    1278:	f1 1d       	adc	r31, r1
    127a:	4e 9d       	mul	r20, r14
    127c:	e0 0d       	add	r30, r0
    127e:	f1 1d       	adc	r31, r1
    1280:	5e 9d       	mul	r21, r14
    1282:	f0 0d       	add	r31, r0
    1284:	4f 9d       	mul	r20, r15
    1286:	f0 0d       	add	r31, r0
    1288:	7f 93       	push	r23
    128a:	6f 93       	push	r22
    128c:	bf 92       	push	r11
    128e:	af 92       	push	r10
    1290:	5f 93       	push	r21
    1292:	4f 93       	push	r20
    1294:	d5 01       	movw	r26, r10
    1296:	0e 94 a7 0a 	call	0x154e	; 0x154e <__umulhisi3>
    129a:	8b 01       	movw	r16, r22
    129c:	ac 01       	movw	r20, r24
    129e:	d7 01       	movw	r26, r14
    12a0:	0e 94 a7 0a 	call	0x154e	; 0x154e <__umulhisi3>
    12a4:	eb 01       	movw	r28, r22
    12a6:	e8 0f       	add	r30, r24
    12a8:	f9 1f       	adc	r31, r25
    12aa:	d6 01       	movw	r26, r12
    12ac:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__muldi3_6>
    12b0:	2f 91       	pop	r18
    12b2:	3f 91       	pop	r19
    12b4:	d6 01       	movw	r26, r12
    12b6:	0e 94 a7 0a 	call	0x154e	; 0x154e <__umulhisi3>
    12ba:	c6 0f       	add	r28, r22
    12bc:	d7 1f       	adc	r29, r23
    12be:	e8 1f       	adc	r30, r24
    12c0:	f9 1f       	adc	r31, r25
    12c2:	af 91       	pop	r26
    12c4:	bf 91       	pop	r27
    12c6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__muldi3_6>
    12ca:	2f 91       	pop	r18
    12cc:	3f 91       	pop	r19
    12ce:	0e 94 a7 0a 	call	0x154e	; 0x154e <__umulhisi3>
    12d2:	c6 0f       	add	r28, r22
    12d4:	d7 1f       	adc	r29, r23
    12d6:	e8 1f       	adc	r30, r24
    12d8:	f9 1f       	adc	r31, r25
    12da:	d6 01       	movw	r26, r12
    12dc:	0e 94 a7 0a 	call	0x154e	; 0x154e <__umulhisi3>
    12e0:	e6 0f       	add	r30, r22
    12e2:	f7 1f       	adc	r31, r23
    12e4:	98 01       	movw	r18, r16
    12e6:	be 01       	movw	r22, r28
    12e8:	cf 01       	movw	r24, r30
    12ea:	11 24       	eor	r1, r1
    12ec:	0f 91       	pop	r16
    12ee:	1f 91       	pop	r17
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <__muldi3_6>:
    12f6:	0e 94 a7 0a 	call	0x154e	; 0x154e <__umulhisi3>
    12fa:	46 0f       	add	r20, r22
    12fc:	57 1f       	adc	r21, r23
    12fe:	c8 1f       	adc	r28, r24
    1300:	d9 1f       	adc	r29, r25
    1302:	08 f4       	brcc	.+2      	; 0x1306 <__muldi3_6+0x10>
    1304:	31 96       	adiw	r30, 0x01	; 1
    1306:	08 95       	ret

00001308 <__moddi3>:
    1308:	68 94       	set
    130a:	01 c0       	rjmp	.+2      	; 0x130e <__divdi3_moddi3>

0000130c <__divdi3>:
    130c:	e8 94       	clt

0000130e <__divdi3_moddi3>:
    130e:	f9 2f       	mov	r31, r25
    1310:	f1 2b       	or	r31, r17
    1312:	12 f0       	brmi	.+4      	; 0x1318 <__divdi3_moddi3+0xa>
    1314:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__udivdi3_umoddi3>
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e2 e9       	ldi	r30, 0x92	; 146
    131e:	f9 e0       	ldi	r31, 0x09	; 9
    1320:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__prologue_saves__+0xc>
    1324:	09 2e       	mov	r0, r25
    1326:	05 94       	asr	r0
    1328:	22 f4       	brpl	.+8      	; 0x1332 <__divdi3_moddi3+0x24>
    132a:	0e 94 14 0a 	call	0x1428	; 0x1428 <__negdi2>
    132e:	11 23       	and	r17, r17
    1330:	92 f4       	brpl	.+36     	; 0x1356 <__divdi3_moddi3+0x48>
    1332:	f0 e8       	ldi	r31, 0x80	; 128
    1334:	0f 26       	eor	r0, r31
    1336:	ff ef       	ldi	r31, 0xFF	; 255
    1338:	e0 94       	com	r14
    133a:	f0 94       	com	r15
    133c:	00 95       	com	r16
    133e:	10 95       	com	r17
    1340:	b0 94       	com	r11
    1342:	c0 94       	com	r12
    1344:	d0 94       	com	r13
    1346:	a1 94       	neg	r10
    1348:	bf 0a       	sbc	r11, r31
    134a:	cf 0a       	sbc	r12, r31
    134c:	df 0a       	sbc	r13, r31
    134e:	ef 0a       	sbc	r14, r31
    1350:	ff 0a       	sbc	r15, r31
    1352:	0f 0b       	sbc	r16, r31
    1354:	1f 0b       	sbc	r17, r31
    1356:	0e 94 c3 09 	call	0x1386	; 0x1386 <__udivmod64>
    135a:	07 fc       	sbrc	r0, 7
    135c:	0e 94 14 0a 	call	0x1428	; 0x1428 <__negdi2>
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	ec e0       	ldi	r30, 0x0C	; 12
    1366:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__epilogue_restores__+0xc>

0000136a <__umoddi3>:
    136a:	68 94       	set
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <__udivdi3_umoddi3>

0000136e <__udivdi3>:
    136e:	e8 94       	clt

00001370 <__udivdi3_umoddi3>:
    1370:	8f 92       	push	r8
    1372:	9f 92       	push	r9
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	0e 94 c3 09 	call	0x1386	; 0x1386 <__udivmod64>
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	9f 90       	pop	r9
    1382:	8f 90       	pop	r8
    1384:	08 95       	ret

00001386 <__udivmod64>:
    1386:	88 24       	eor	r8, r8
    1388:	99 24       	eor	r9, r9
    138a:	f4 01       	movw	r30, r8
    138c:	e4 01       	movw	r28, r8
    138e:	b0 e4       	ldi	r27, 0x40	; 64
    1390:	9f 93       	push	r25
    1392:	aa 27       	eor	r26, r26
    1394:	9a 15       	cp	r25, r10
    1396:	8b 04       	cpc	r8, r11
    1398:	9c 04       	cpc	r9, r12
    139a:	ed 05       	cpc	r30, r13
    139c:	fe 05       	cpc	r31, r14
    139e:	cf 05       	cpc	r28, r15
    13a0:	d0 07       	cpc	r29, r16
    13a2:	a1 07       	cpc	r26, r17
    13a4:	98 f4       	brcc	.+38     	; 0x13cc <__udivmod64+0x46>
    13a6:	ad 2f       	mov	r26, r29
    13a8:	dc 2f       	mov	r29, r28
    13aa:	cf 2f       	mov	r28, r31
    13ac:	fe 2f       	mov	r31, r30
    13ae:	e9 2d       	mov	r30, r9
    13b0:	98 2c       	mov	r9, r8
    13b2:	89 2e       	mov	r8, r25
    13b4:	98 2f       	mov	r25, r24
    13b6:	87 2f       	mov	r24, r23
    13b8:	76 2f       	mov	r23, r22
    13ba:	65 2f       	mov	r22, r21
    13bc:	54 2f       	mov	r21, r20
    13be:	43 2f       	mov	r20, r19
    13c0:	32 2f       	mov	r19, r18
    13c2:	22 27       	eor	r18, r18
    13c4:	b8 50       	subi	r27, 0x08	; 8
    13c6:	31 f7       	brne	.-52     	; 0x1394 <__udivmod64+0xe>
    13c8:	bf 91       	pop	r27
    13ca:	27 c0       	rjmp	.+78     	; 0x141a <__udivmod64+0x94>
    13cc:	1b 2e       	mov	r1, r27
    13ce:	bf 91       	pop	r27
    13d0:	bb 27       	eor	r27, r27
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	44 1f       	adc	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	66 1f       	adc	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	88 1f       	adc	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	88 1c       	adc	r8, r8
    13e4:	99 1c       	adc	r9, r9
    13e6:	ee 1f       	adc	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	cc 1f       	adc	r28, r28
    13ec:	dd 1f       	adc	r29, r29
    13ee:	aa 1f       	adc	r26, r26
    13f0:	bb 1f       	adc	r27, r27
    13f2:	8a 14       	cp	r8, r10
    13f4:	9b 04       	cpc	r9, r11
    13f6:	ec 05       	cpc	r30, r12
    13f8:	fd 05       	cpc	r31, r13
    13fa:	ce 05       	cpc	r28, r14
    13fc:	df 05       	cpc	r29, r15
    13fe:	a0 07       	cpc	r26, r16
    1400:	b1 07       	cpc	r27, r17
    1402:	48 f0       	brcs	.+18     	; 0x1416 <__udivmod64+0x90>
    1404:	8a 18       	sub	r8, r10
    1406:	9b 08       	sbc	r9, r11
    1408:	ec 09       	sbc	r30, r12
    140a:	fd 09       	sbc	r31, r13
    140c:	ce 09       	sbc	r28, r14
    140e:	df 09       	sbc	r29, r15
    1410:	a0 0b       	sbc	r26, r16
    1412:	b1 0b       	sbc	r27, r17
    1414:	21 60       	ori	r18, 0x01	; 1
    1416:	1a 94       	dec	r1
    1418:	e1 f6       	brne	.-72     	; 0x13d2 <__udivmod64+0x4c>
    141a:	2e f4       	brtc	.+10     	; 0x1426 <__udivmod64+0xa0>
    141c:	94 01       	movw	r18, r8
    141e:	af 01       	movw	r20, r30
    1420:	be 01       	movw	r22, r28
    1422:	cd 01       	movw	r24, r26
    1424:	00 0c       	add	r0, r0
    1426:	08 95       	ret

00001428 <__negdi2>:
    1428:	60 95       	com	r22
    142a:	70 95       	com	r23
    142c:	80 95       	com	r24
    142e:	90 95       	com	r25
    1430:	30 95       	com	r19
    1432:	40 95       	com	r20
    1434:	50 95       	com	r21
    1436:	21 95       	neg	r18
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	4f 4f       	sbci	r20, 0xFF	; 255
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	6f 4f       	sbci	r22, 0xFF	; 255
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	08 95       	ret

00001448 <__prologue_saves__>:
    1448:	2f 92       	push	r2
    144a:	3f 92       	push	r3
    144c:	4f 92       	push	r4
    144e:	5f 92       	push	r5
    1450:	6f 92       	push	r6
    1452:	7f 92       	push	r7
    1454:	8f 92       	push	r8
    1456:	9f 92       	push	r9
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	ca 1b       	sub	r28, r26
    1472:	db 0b       	sbc	r29, r27
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	09 94       	ijmp

00001480 <__epilogue_restores__>:
    1480:	2a 88       	ldd	r2, Y+18	; 0x12
    1482:	39 88       	ldd	r3, Y+17	; 0x11
    1484:	48 88       	ldd	r4, Y+16	; 0x10
    1486:	5f 84       	ldd	r5, Y+15	; 0x0f
    1488:	6e 84       	ldd	r6, Y+14	; 0x0e
    148a:	7d 84       	ldd	r7, Y+13	; 0x0d
    148c:	8c 84       	ldd	r8, Y+12	; 0x0c
    148e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1490:	aa 84       	ldd	r10, Y+10	; 0x0a
    1492:	b9 84       	ldd	r11, Y+9	; 0x09
    1494:	c8 84       	ldd	r12, Y+8	; 0x08
    1496:	df 80       	ldd	r13, Y+7	; 0x07
    1498:	ee 80       	ldd	r14, Y+6	; 0x06
    149a:	fd 80       	ldd	r15, Y+5	; 0x05
    149c:	0c 81       	ldd	r16, Y+4	; 0x04
    149e:	1b 81       	ldd	r17, Y+3	; 0x03
    14a0:	aa 81       	ldd	r26, Y+2	; 0x02
    14a2:	b9 81       	ldd	r27, Y+1	; 0x01
    14a4:	ce 0f       	add	r28, r30
    14a6:	d1 1d       	adc	r29, r1
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	ed 01       	movw	r28, r26
    14b4:	08 95       	ret

000014b6 <__ashldi3>:
    14b6:	0f 93       	push	r16
    14b8:	08 30       	cpi	r16, 0x08	; 8
    14ba:	90 f0       	brcs	.+36     	; 0x14e0 <__ashldi3+0x2a>
    14bc:	98 2f       	mov	r25, r24
    14be:	87 2f       	mov	r24, r23
    14c0:	76 2f       	mov	r23, r22
    14c2:	65 2f       	mov	r22, r21
    14c4:	54 2f       	mov	r21, r20
    14c6:	43 2f       	mov	r20, r19
    14c8:	32 2f       	mov	r19, r18
    14ca:	22 27       	eor	r18, r18
    14cc:	08 50       	subi	r16, 0x08	; 8
    14ce:	f4 cf       	rjmp	.-24     	; 0x14b8 <__ashldi3+0x2>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	66 1f       	adc	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 95       	dec	r16
    14e2:	b2 f7       	brpl	.-20     	; 0x14d0 <__ashldi3+0x1a>
    14e4:	0f 91       	pop	r16
    14e6:	08 95       	ret

000014e8 <__adddi3>:
    14e8:	2a 0d       	add	r18, r10
    14ea:	3b 1d       	adc	r19, r11
    14ec:	4c 1d       	adc	r20, r12
    14ee:	5d 1d       	adc	r21, r13
    14f0:	6e 1d       	adc	r22, r14
    14f2:	7f 1d       	adc	r23, r15
    14f4:	80 1f       	adc	r24, r16
    14f6:	91 1f       	adc	r25, r17
    14f8:	08 95       	ret

000014fa <__adddi3_s8>:
    14fa:	00 24       	eor	r0, r0
    14fc:	a7 fd       	sbrc	r26, 7
    14fe:	00 94       	com	r0
    1500:	2a 0f       	add	r18, r26
    1502:	30 1d       	adc	r19, r0
    1504:	40 1d       	adc	r20, r0
    1506:	50 1d       	adc	r21, r0
    1508:	60 1d       	adc	r22, r0
    150a:	70 1d       	adc	r23, r0
    150c:	80 1d       	adc	r24, r0
    150e:	90 1d       	adc	r25, r0
    1510:	08 95       	ret

00001512 <__subdi3>:
    1512:	2a 19       	sub	r18, r10
    1514:	3b 09       	sbc	r19, r11
    1516:	4c 09       	sbc	r20, r12
    1518:	5d 09       	sbc	r21, r13
    151a:	6e 09       	sbc	r22, r14
    151c:	7f 09       	sbc	r23, r15
    151e:	80 0b       	sbc	r24, r16
    1520:	91 0b       	sbc	r25, r17
    1522:	08 95       	ret

00001524 <__cmpdi2>:
    1524:	2a 15       	cp	r18, r10
    1526:	3b 05       	cpc	r19, r11
    1528:	4c 05       	cpc	r20, r12
    152a:	5d 05       	cpc	r21, r13
    152c:	6e 05       	cpc	r22, r14
    152e:	7f 05       	cpc	r23, r15
    1530:	80 07       	cpc	r24, r16
    1532:	91 07       	cpc	r25, r17
    1534:	08 95       	ret

00001536 <__cmpdi2_s8>:
    1536:	00 24       	eor	r0, r0
    1538:	a7 fd       	sbrc	r26, 7
    153a:	00 94       	com	r0
    153c:	2a 17       	cp	r18, r26
    153e:	30 05       	cpc	r19, r0
    1540:	40 05       	cpc	r20, r0
    1542:	50 05       	cpc	r21, r0
    1544:	60 05       	cpc	r22, r0
    1546:	70 05       	cpc	r23, r0
    1548:	80 05       	cpc	r24, r0
    154a:	90 05       	cpc	r25, r0
    154c:	08 95       	ret

0000154e <__umulhisi3>:
    154e:	a2 9f       	mul	r26, r18
    1550:	b0 01       	movw	r22, r0
    1552:	b3 9f       	mul	r27, r19
    1554:	c0 01       	movw	r24, r0
    1556:	a3 9f       	mul	r26, r19
    1558:	70 0d       	add	r23, r0
    155a:	81 1d       	adc	r24, r1
    155c:	11 24       	eor	r1, r1
    155e:	91 1d       	adc	r25, r1
    1560:	b2 9f       	mul	r27, r18
    1562:	70 0d       	add	r23, r0
    1564:	81 1d       	adc	r24, r1
    1566:	11 24       	eor	r1, r1
    1568:	91 1d       	adc	r25, r1
    156a:	08 95       	ret

0000156c <_exit>:
    156c:	f8 94       	cli

0000156e <__stop_program>:
    156e:	ff cf       	rjmp	.-2      	; 0x156e <__stop_program>
