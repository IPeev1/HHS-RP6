
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800200  00001c7e  00001d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  0080031c  0080031c  00001e2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002244  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001258  00000000  00000000  00004284  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d4  00000000  00000000  000054dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000694  00000000  00000000  000066b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b6c  00000000  00000000  00006d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001378  00000000  00000000  000078b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00008c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c6       	rjmp	.+3302   	; 0xd24 <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c1       	rjmp	.+802    	; 0x388 <__vector_25>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c6 c0       	rjmp	.+396    	; 0x21a <__vector_35>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c4       	rjmp	.+2184   	; 0x926 <__vector_39>
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
      a8:	98 c0       	rjmp	.+304    	; 0x1da <__bad_interrupt>
      aa:	00 00       	nop
      ac:	96 c0       	rjmp	.+300    	; 0x1da <__bad_interrupt>
      ae:	00 00       	nop
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	92 c0       	rjmp	.+292    	; 0x1da <__bad_interrupt>
      b6:	00 00       	nop
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d5 02       	muls	r29, r21
      e6:	0f 03       	fmul	r16, r23
      e8:	0f 03       	fmul	r16, r23
      ea:	e0 02       	muls	r30, r16
      ec:	0f 03       	fmul	r16, r23
      ee:	0f 03       	fmul	r16, r23
      f0:	0f 03       	fmul	r16, r23
      f2:	0f 03       	fmul	r16, r23
      f4:	0f 03       	fmul	r16, r23
      f6:	0f 03       	fmul	r16, r23
      f8:	0f 03       	fmul	r16, r23
      fa:	0f 03       	fmul	r16, r23
      fc:	0f 03       	fmul	r16, r23
      fe:	0f 03       	fmul	r16, r23
     100:	0f 03       	fmul	r16, r23
     102:	0f 03       	fmul	r16, r23
     104:	00 03       	mulsu	r16, r16
     106:	f7 02       	muls	r31, r23
     108:	ca 02       	muls	r28, r26
     10a:	eb 02       	muls	r30, r27
     10c:	0f 03       	fmul	r16, r23
     10e:	0f 03       	fmul	r16, r23
     110:	bf 02       	muls	r27, r31
     112:	0f 03       	fmul	r16, r23
     114:	0f 03       	fmul	r16, r23
     116:	09 03       	fmul	r16, r17
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
     190:	01 c4       	rjmp	.+2050   	; 0x994 <__vector_39+0x6e>
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ee e7       	ldi	r30, 0x7E	; 126
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	ac 31       	cpi	r26, 0x1C	; 28
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	24 e0       	ldi	r18, 0x04	; 4
     1c6:	ac e1       	ldi	r26, 0x1C	; 28
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a8 39       	cpi	r26, 0x98	; 152
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	de d7       	rcall	.+4028   	; 0x1192 <main>
     1d6:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <init_micros>:
	TWISendTransmit();
}

uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
}
     1dc:	e1 e9       	ldi	r30, 0x91	; 145
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	80 83       	st	Z, r24
     1e6:	e1 e7       	ldi	r30, 0x71	; 113
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	80 83       	st	Z, r24
     1f0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     1f4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     1f8:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <t3TotalOverflow>
     1fc:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <t3TotalOverflow+0x1>
     200:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <t3TotalOverflow+0x2>
     204:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <t3TotalOverflow+0x3>
     208:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <t3TotalOverflow+0x4>
     20c:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <t3TotalOverflow+0x5>
     210:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <t3TotalOverflow+0x6>
     214:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <t3TotalOverflow+0x7>
     218:	08 95       	ret

0000021a <__vector_35>:
     21a:	1f 92       	push	r1
     21c:	0f 92       	push	r0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	0f 92       	push	r0
     222:	11 24       	eor	r1, r1
     224:	2f 93       	push	r18
     226:	3f 93       	push	r19
     228:	4f 93       	push	r20
     22a:	5f 93       	push	r21
     22c:	6f 93       	push	r22
     22e:	7f 93       	push	r23
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <t3TotalOverflow>
     23a:	30 91 5d 03 	lds	r19, 0x035D	; 0x80035d <t3TotalOverflow+0x1>
     23e:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <t3TotalOverflow+0x2>
     242:	50 91 5f 03 	lds	r21, 0x035F	; 0x80035f <t3TotalOverflow+0x3>
     246:	60 91 60 03 	lds	r22, 0x0360	; 0x800360 <t3TotalOverflow+0x4>
     24a:	70 91 61 03 	lds	r23, 0x0361	; 0x800361 <t3TotalOverflow+0x5>
     24e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <t3TotalOverflow+0x6>
     252:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <t3TotalOverflow+0x7>
     256:	a1 e0       	ldi	r26, 0x01	; 1
     258:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__adddi3_s8>
     25c:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <t3TotalOverflow>
     260:	30 93 5d 03 	sts	0x035D, r19	; 0x80035d <t3TotalOverflow+0x1>
     264:	40 93 5e 03 	sts	0x035E, r20	; 0x80035e <t3TotalOverflow+0x2>
     268:	50 93 5f 03 	sts	0x035F, r21	; 0x80035f <t3TotalOverflow+0x3>
     26c:	60 93 60 03 	sts	0x0360, r22	; 0x800360 <t3TotalOverflow+0x4>
     270:	70 93 61 03 	sts	0x0361, r23	; 0x800361 <t3TotalOverflow+0x5>
     274:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <t3TotalOverflow+0x6>
     278:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <t3TotalOverflow+0x7>
     27c:	af 91       	pop	r26
     27e:	9f 91       	pop	r25
     280:	8f 91       	pop	r24
     282:	7f 91       	pop	r23
     284:	6f 91       	pop	r22
     286:	5f 91       	pop	r21
     288:	4f 91       	pop	r20
     28a:	3f 91       	pop	r19
     28c:	2f 91       	pop	r18
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <micros>:
     298:	4f 92       	push	r4
     29a:	5f 92       	push	r5
     29c:	6f 92       	push	r6
     29e:	7f 92       	push	r7
     2a0:	8f 92       	push	r8
     2a2:	9f 92       	push	r9
     2a4:	af 92       	push	r10
     2a6:	bf 92       	push	r11
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     2b8:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     2bc:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <t3TotalOverflow>
     2c0:	30 91 5d 03 	lds	r19, 0x035D	; 0x80035d <t3TotalOverflow+0x1>
     2c4:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <t3TotalOverflow+0x2>
     2c8:	50 91 5f 03 	lds	r21, 0x035F	; 0x80035f <t3TotalOverflow+0x3>
     2cc:	60 91 60 03 	lds	r22, 0x0360	; 0x800360 <t3TotalOverflow+0x4>
     2d0:	70 91 61 03 	lds	r23, 0x0361	; 0x800361 <t3TotalOverflow+0x5>
     2d4:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <t3TotalOverflow+0x6>
     2d8:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <t3TotalOverflow+0x7>
     2dc:	98 2c       	mov	r9, r8
     2de:	88 24       	eor	r8, r8
     2e0:	99 0c       	add	r9, r9
     2e2:	99 0c       	add	r9, r9
     2e4:	99 0c       	add	r9, r9
     2e6:	99 0c       	add	r9, r9
     2e8:	09 2c       	mov	r0, r9
     2ea:	00 0c       	add	r0, r0
     2ec:	aa 08       	sbc	r10, r10
     2ee:	bb 08       	sbc	r11, r11
     2f0:	bb 20       	and	r11, r11
     2f2:	2c f4       	brge	.+10     	; 0x2fe <micros+0x66>
     2f4:	ef ef       	ldi	r30, 0xFF	; 255
     2f6:	8e 0e       	add	r8, r30
     2f8:	9e 1e       	adc	r9, r30
     2fa:	a1 1c       	adc	r10, r1
     2fc:	b1 1c       	adc	r11, r1
     2fe:	25 01       	movw	r4, r10
     300:	77 24       	eor	r7, r7
     302:	57 fc       	sbrc	r5, 7
     304:	70 94       	com	r7
     306:	67 2c       	mov	r6, r7
     308:	bb 0c       	add	r11, r11
     30a:	88 08       	sbc	r8, r8
     30c:	98 2c       	mov	r9, r8
     30e:	54 01       	movw	r10, r8
     310:	0c e0       	ldi	r16, 0x0C	; 12
     312:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__ashldi3>
     316:	f2 2f       	mov	r31, r18
     318:	e3 2f       	mov	r30, r19
     31a:	c4 2e       	mov	r12, r20
     31c:	d5 2e       	mov	r13, r21
     31e:	e6 2e       	mov	r14, r22
     320:	f7 2e       	mov	r15, r23
     322:	08 2f       	mov	r16, r24
     324:	19 2f       	mov	r17, r25
     326:	24 2d       	mov	r18, r4
     328:	35 2d       	mov	r19, r5
     32a:	46 2d       	mov	r20, r6
     32c:	57 2d       	mov	r21, r7
     32e:	68 2d       	mov	r22, r8
     330:	78 2d       	mov	r23, r8
     332:	88 2d       	mov	r24, r8
     334:	98 2d       	mov	r25, r8
     336:	af 2e       	mov	r10, r31
     338:	be 2e       	mov	r11, r30
     33a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__adddi3>
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	7f 90       	pop	r7
     354:	6f 90       	pop	r6
     356:	5f 90       	pop	r5
     358:	4f 90       	pop	r4
     35a:	08 95       	ret

0000035c <init_USART>:
     35c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     360:	e1 ec       	ldi	r30, 0xC1	; 193
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	80 69       	ori	r24, 0x90	; 144
     368:	80 83       	st	Z, r24
     36a:	80 81       	ld	r24, Z
     36c:	88 60       	ori	r24, 0x08	; 8
     36e:	80 83       	st	Z, r24
     370:	e2 ec       	ldi	r30, 0xC2	; 194
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	86 60       	ori	r24, 0x06	; 6
     378:	80 83       	st	Z, r24
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     382:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     386:	08 95       	ret

00000388 <__vector_25>:
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	0b b6       	in	r0, 0x3b	; 59
     394:	0f 92       	push	r0
     396:	cf 92       	push	r12
     398:	df 92       	push	r13
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
     3be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     3c2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <USARTreceived>
     3c6:	90 ed       	ldi	r25, 0xD0	; 208
     3c8:	98 0f       	add	r25, r24
     3ca:	9a 30       	cpi	r25, 0x0A	; 10
     3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__vector_25+0x4a>
     3ce:	80 32       	cpi	r24, 0x20	; 32
     3d0:	99 f4       	brne	.+38     	; 0x3f8 <__vector_25+0x70>
     3d2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <USARTinputPos>
     3d6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <USARTinputPos+0x1>
     3da:	2f 3f       	cpi	r18, 0xFF	; 255
     3dc:	31 05       	cpc	r19, r1
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <__vector_25+0x5a>
     3e0:	2d c1       	rjmp	.+602    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <USARTinputPos+0x1>
     3ea:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <USARTinputPos>
     3ee:	f9 01       	movw	r30, r18
     3f0:	e7 56       	subi	r30, 0x67	; 103
     3f2:	fc 4f       	sbci	r31, 0xFC	; 252
     3f4:	80 83       	st	Z, r24
     3f6:	22 c1       	rjmp	.+580    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     3f8:	9f e9       	ldi	r25, 0x9F	; 159
     3fa:	98 0f       	add	r25, r24
     3fc:	9a 31       	cpi	r25, 0x1A	; 26
     3fe:	28 f4       	brcc	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	82 36       	cpi	r24, 0x62	; 98
     402:	29 f0       	breq	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     404:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     408:	19 c1       	rjmp	.+562    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     40a:	82 36       	cpi	r24, 0x62	; 98
     40c:	51 f4       	brne	.+20     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     40e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USARTinputPos>
     412:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USARTinputPos+0x1>
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <USARTinputPos+0x1>
     41c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTinputPos>
     420:	0d c1       	rjmp	.+538    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     422:	8d 30       	cpi	r24, 0x0D	; 13
     424:	09 f0       	breq	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	0a c1       	rjmp	.+532    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     428:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <USARTinputPos>
     42c:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <USARTinputPos+0x1>
     430:	11 23       	and	r17, r17
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	90 c0       	rjmp	.+288    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     436:	e4 e3       	ldi	r30, 0x34	; 52
     438:	f3 e0       	ldi	r31, 0x03	; 3
     43a:	11 82       	std	Z+1, r1	; 0x01
     43c:	10 82       	st	Z, r1
     43e:	13 82       	std	Z+3, r1	; 0x03
     440:	12 82       	std	Z+2, r1	; 0x02
     442:	15 82       	std	Z+5, r1	; 0x05
     444:	14 82       	std	Z+4, r1	; 0x04
     446:	ee e2       	ldi	r30, 0x2E	; 46
     448:	f3 e0       	ldi	r31, 0x03	; 3
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
     452:	93 83       	std	Z+3, r25	; 0x03
     454:	82 83       	std	Z+2, r24	; 0x02
     456:	95 83       	std	Z+5, r25	; 0x05
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <numberStart.2013+0x1>
     45e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <numberStart.2013>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	fc 01       	movw	r30, r24
     46e:	e7 56       	subi	r30, 0x67	; 103
     470:	fc 4f       	sbci	r31, 0xFC	; 252
     472:	30 81       	ld	r19, Z
     474:	30 32       	cpi	r19, 0x20	; 32
     476:	79 f4       	brne	.+30     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     478:	4f 5f       	subi	r20, 0xFF	; 255
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
     47c:	fa 01       	movw	r30, r20
     47e:	ee 0f       	add	r30, r30
     480:	ff 1f       	adc	r31, r31
     482:	e8 5d       	subi	r30, 0xD8	; 216
     484:	fc 4f       	sbci	r31, 0xFC	; 252
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	91 83       	std	Z+1, r25	; 0x01
     48a:	80 83       	st	Z, r24
     48c:	43 30       	cpi	r20, 0x03	; 3
     48e:	51 05       	cpc	r21, r1
     490:	0c f0       	brlt	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	ce c0       	rjmp	.+412    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     496:	fa 01       	movw	r30, r20
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	e2 5d       	subi	r30, 0xD2	; 210
     49e:	fc 4f       	sbci	r31, 0xFC	; 252
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	2f 5f       	subi	r18, 0xFF	; 255
     4ac:	82 2f       	mov	r24, r18
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	08 17       	cp	r16, r24
     4b2:	19 07       	cpc	r17, r25
     4b4:	dc f6       	brge	.-74     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     4b6:	bc c0       	rjmp	.+376    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     4b8:	f9 01       	movw	r30, r18
     4ba:	e7 56       	subi	r30, 0x67	; 103
     4bc:	fc 4f       	sbci	r31, 0xFC	; 252
     4be:	c0 80       	ld	r12, Z
     4c0:	80 e2       	ldi	r24, 0x20	; 32
     4c2:	c8 12       	cpse	r12, r24
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	e8 1a       	sub	r14, r24
     4ca:	f8 0a       	sbc	r15, r24
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	e8 16       	cp	r14, r24
     4d0:	f1 04       	cpc	r15, r1
     4d2:	0c f0       	brlt	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d4:	40 c0       	rjmp	.+128    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     4d6:	38 c0       	rjmp	.+112    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     4d8:	e7 01       	movw	r28, r14
     4da:	cc 0f       	add	r28, r28
     4dc:	dd 1f       	adc	r29, r29
     4de:	de 01       	movw	r26, r28
     4e0:	a2 5d       	subi	r26, 0xD2	; 210
     4e2:	bc 4f       	sbci	r27, 0xFC	; 252
     4e4:	fe 01       	movw	r30, r28
     4e6:	e8 5d       	subi	r30, 0xD8	; 216
     4e8:	fc 4f       	sbci	r31, 0xFC	; 252
     4ea:	6d 91       	ld	r22, X+
     4ec:	7c 91       	ld	r23, X
     4ee:	80 81       	ld	r24, Z
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	68 0f       	add	r22, r24
     4f4:	79 1f       	adc	r23, r25
     4f6:	62 1b       	sub	r22, r18
     4f8:	73 0b       	sbc	r23, r19
     4fa:	07 2e       	mov	r0, r23
     4fc:	00 0c       	add	r0, r0
     4fe:	88 0b       	sbc	r24, r24
     500:	99 0b       	sbc	r25, r25
     502:	0e 94 b7 0a 	call	0x156e	; 0x156e <__floatsisf>
     506:	9b 01       	movw	r18, r22
     508:	ac 01       	movw	r20, r24
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e2       	ldi	r24, 0x20	; 32
     510:	91 e4       	ldi	r25, 0x41	; 65
     512:	0e 94 a6 0b 	call	0x174c	; 0x174c <pow>
     516:	cc 5c       	subi	r28, 0xCC	; 204
     518:	dc 4f       	sbci	r29, 0xFC	; 252
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	5f e3       	ldi	r21, 0x3F	; 63
     522:	26 d7       	rcall	.+3660   	; 0x1370 <__addsf3>
     524:	f1 d7       	rcall	.+4066   	; 0x1508 <__fixsfsi>
     526:	20 ed       	ldi	r18, 0xD0	; 208
     528:	2c 0d       	add	r18, r12
     52a:	42 2f       	mov	r20, r18
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	46 9f       	mul	r20, r22
     530:	90 01       	movw	r18, r0
     532:	47 9f       	mul	r20, r23
     534:	30 0d       	add	r19, r0
     536:	56 9f       	mul	r21, r22
     538:	30 0d       	add	r19, r0
     53a:	11 24       	eor	r1, r1
     53c:	88 81       	ld	r24, Y
     53e:	99 81       	ldd	r25, Y+1	; 0x01
     540:	82 0f       	add	r24, r18
     542:	93 1f       	adc	r25, r19
     544:	99 83       	std	Y+1, r25	; 0x01
     546:	88 83       	st	Y, r24
     548:	d3 94       	inc	r13
     54a:	2d 2d       	mov	r18, r13
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	02 17       	cp	r16, r18
     550:	13 07       	cpc	r17, r19
     552:	0c f0       	brlt	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     554:	b1 cf       	rjmp	.-158    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     556:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     55a:	ee 23       	and	r30, r30
     55c:	09 f4       	brne	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     55e:	5f c0       	rjmp	.+190    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     560:	8e 2f       	mov	r24, r30
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	e1 56       	subi	r30, 0x61	; 97
     568:	f1 09       	sbc	r31, r1
     56a:	ea 31       	cpi	r30, 0x1A	; 26
     56c:	f1 05       	cpc	r31, r1
     56e:	08 f0       	brcs	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	56 c0       	rjmp	.+172    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     572:	88 27       	eor	r24, r24
     574:	ee 58       	subi	r30, 0x8E	; 142
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	8f 4f       	sbci	r24, 0xFF	; 255
     57a:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__tablejump2__>
     57e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data+0x2>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	19 f4       	brne	.+6      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     586:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <rp6Data+0x2>
     58a:	49 c0       	rjmp	.+146    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <rp6Data+0x2>
     592:	45 c0       	rjmp	.+138    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     594:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data+0x2>
     598:	8f 3f       	cpi	r24, 0xFF	; 255
     59a:	19 f4       	brne	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     59c:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <rp6Data+0x2>
     5a0:	3e c0       	rjmp	.+124    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <rp6Data+0x2>
     5a8:	3a c0       	rjmp	.+116    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5aa:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <rp6Data+0x3>
     5ae:	8f 3f       	cpi	r24, 0xFF	; 255
     5b0:	19 f4       	brne	.+6      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5b2:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <rp6Data+0x3>
     5b6:	33 c0       	rjmp	.+102    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5b8:	8f ef       	ldi	r24, 0xFF	; 255
     5ba:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <rp6Data+0x3>
     5be:	2f c0       	rjmp	.+94     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5c0:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <rp6Data+0x3>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	19 f4       	brne	.+6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5c8:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <rp6Data+0x3>
     5cc:	28 c0       	rjmp	.+80     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <rp6Data+0x3>
     5d4:	24 c0       	rjmp	.+72     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5d6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.2011>
     5da:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.2011+0x1>
     5de:	85 36       	cpi	r24, 0x65	; 101
     5e0:	91 05       	cpc	r25, r1
     5e2:	e8 f4       	brcc	.+58     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5e4:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <rp6Data+0x1>
     5e8:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <rp6Data>
     5ec:	18 c0       	rjmp	.+48     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5ee:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.2011>
     5f2:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.2011+0x1>
     5f6:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <rp6Data+0x7>
     5fa:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <rp6Data+0x6>
     5fe:	0f c0       	rjmp	.+30     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     600:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.2011>
     604:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.2011+0x1>
     608:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <rp6Data+0x5>
     60c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <rp6Data+0x4>
     610:	06 c0       	rjmp	.+12     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     612:	e2 e8       	ldi	r30, 0x82	; 130
     614:	f3 e0       	ldi	r31, 0x03	; 3
     616:	11 82       	std	Z+1, r1	; 0x01
     618:	10 82       	st	Z, r1
     61a:	13 82       	std	Z+3, r1	; 0x03
     61c:	12 82       	std	Z+2, r1	; 0x02
     61e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	9f ef       	ldi	r25, 0xFF	; 255
     626:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <USARTinputPos+0x1>
     62a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTinputPos>
     62e:	06 c0       	rjmp	.+12     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	d1 2c       	mov	r13, r1
     636:	e1 2c       	mov	r14, r1
     638:	f1 2c       	mov	r15, r1
     63a:	3e cf       	rjmp	.-388    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <writeToTerminal>:
     672:	4f 92       	push	r4
     674:	5f 92       	push	r5
     676:	6f 92       	push	r6
     678:	7f 92       	push	r7
     67a:	8f 92       	push	r8
     67c:	9f 92       	push	r9
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	40 90 44 03 	lds	r4, 0x0344	; 0x800344 <writeTerminalTimer>
     696:	50 90 45 03 	lds	r5, 0x0345	; 0x800345 <writeTerminalTimer+0x1>
     69a:	60 90 46 03 	lds	r6, 0x0346	; 0x800346 <writeTerminalTimer+0x2>
     69e:	70 90 47 03 	lds	r7, 0x0347	; 0x800347 <writeTerminalTimer+0x3>
     6a2:	fa dd       	rcall	.-1036   	; 0x298 <micros>
     6a4:	f2 2f       	mov	r31, r18
     6a6:	e3 2f       	mov	r30, r19
     6a8:	c4 2e       	mov	r12, r20
     6aa:	d5 2e       	mov	r13, r21
     6ac:	e6 2e       	mov	r14, r22
     6ae:	f7 2e       	mov	r15, r23
     6b0:	08 2f       	mov	r16, r24
     6b2:	19 2f       	mov	r17, r25
     6b4:	24 2d       	mov	r18, r4
     6b6:	35 2d       	mov	r19, r5
     6b8:	46 2d       	mov	r20, r6
     6ba:	57 2d       	mov	r21, r7
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	af 2e       	mov	r10, r31
     6c6:	be 2e       	mov	r11, r30
     6c8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__cmpdi2>
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <writeToTerminal+0x5e>
     6ce:	87 c0       	rjmp	.+270    	; 0x7de <writeToTerminal+0x16c>
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	80 d5       	rcall	.+2816   	; 0x11d6 <writeString>
     6d6:	83 e1       	ldi	r24, 0x13	; 19
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	7d d5       	rcall	.+2810   	; 0x11d6 <writeString>
     6dc:	c7 d5       	rcall	.+2958   	; 0x126c <ultrasonicSensor>
     6de:	90 d5       	rcall	.+2848   	; 0x1200 <writeInt>
     6e0:	88 e2       	ldi	r24, 0x28	; 40
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	78 d5       	rcall	.+2800   	; 0x11d6 <writeString>
     6e6:	c2 e8       	ldi	r28, 0x82	; 130
     6e8:	d3 e0       	ldi	r29, 0x03	; 3
     6ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ec:	98 89       	ldd	r25, Y+16	; 0x10
     6ee:	88 d5       	rcall	.+2832   	; 0x1200 <writeInt>
     6f0:	8c e3       	ldi	r24, 0x3C	; 60
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	70 d5       	rcall	.+2784   	; 0x11d6 <writeString>
     6f6:	85 e4       	ldi	r24, 0x45	; 69
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	6d d5       	rcall	.+2778   	; 0x11d6 <writeString>
     6fc:	88 81       	ld	r24, Y
     6fe:	99 81       	ldd	r25, Y+1	; 0x01
     700:	7f d5       	rcall	.+2814   	; 0x1200 <writeInt>
     702:	84 e5       	ldi	r24, 0x54	; 84
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	67 d5       	rcall	.+2766   	; 0x11d6 <writeString>
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	21 f4       	brne	.+8      	; 0x716 <writeToTerminal+0xa4>
     70e:	84 e6       	ldi	r24, 0x64	; 100
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	61 d5       	rcall	.+2754   	; 0x11d6 <writeString>
     714:	0b c0       	rjmp	.+22     	; 0x72c <writeToTerminal+0xba>
     716:	81 11       	cpse	r24, r1
     718:	04 c0       	rjmp	.+8      	; 0x722 <writeToTerminal+0xb0>
     71a:	8e e6       	ldi	r24, 0x6E	; 110
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	5b d5       	rcall	.+2742   	; 0x11d6 <writeString>
     720:	05 c0       	rjmp	.+10     	; 0x72c <writeToTerminal+0xba>
     722:	8f 3f       	cpi	r24, 0xFF	; 255
     724:	19 f4       	brne	.+6      	; 0x72c <writeToTerminal+0xba>
     726:	8b e7       	ldi	r24, 0x7B	; 123
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	55 d5       	rcall	.+2730   	; 0x11d6 <writeString>
     72c:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <rp6Data+0x3>
     730:	8f 3f       	cpi	r24, 0xFF	; 255
     732:	21 f4       	brne	.+8      	; 0x73c <writeToTerminal+0xca>
     734:	87 e8       	ldi	r24, 0x87	; 135
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	4e d5       	rcall	.+2716   	; 0x11d6 <writeString>
     73a:	0b c0       	rjmp	.+22     	; 0x752 <writeToTerminal+0xe0>
     73c:	81 11       	cpse	r24, r1
     73e:	04 c0       	rjmp	.+8      	; 0x748 <writeToTerminal+0xd6>
     740:	84 e9       	ldi	r24, 0x94	; 148
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	48 d5       	rcall	.+2704   	; 0x11d6 <writeString>
     746:	05 c0       	rjmp	.+10     	; 0x752 <writeToTerminal+0xe0>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	19 f4       	brne	.+6      	; 0x752 <writeToTerminal+0xe0>
     74c:	83 ea       	ldi	r24, 0xA3	; 163
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	42 d5       	rcall	.+2692   	; 0x11d6 <writeString>
     752:	81 eb       	ldi	r24, 0xB1	; 177
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	3f d5       	rcall	.+2686   	; 0x11d6 <writeString>
     758:	c2 e8       	ldi	r28, 0x82	; 130
     75a:	d3 e0       	ldi	r29, 0x03	; 3
     75c:	8c 81       	ldd	r24, Y+4	; 0x04
     75e:	9d 81       	ldd	r25, Y+5	; 0x05
     760:	4f d5       	rcall	.+2718   	; 0x1200 <writeInt>
     762:	87 ec       	ldi	r24, 0xC7	; 199
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	37 d5       	rcall	.+2670   	; 0x11d6 <writeString>
     768:	8e 81       	ldd	r24, Y+6	; 0x06
     76a:	9f 81       	ldd	r25, Y+7	; 0x07
     76c:	49 d5       	rcall	.+2706   	; 0x1200 <writeInt>
     76e:	85 ed       	ldi	r24, 0xD5	; 213
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	31 d5       	rcall	.+2658   	; 0x11d6 <writeString>
     774:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
     778:	26 d5       	rcall	.+2636   	; 0x11c6 <writeChar>
     77a:	82 ee       	ldi	r24, 0xE2	; 226
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	2b d5       	rcall	.+2646   	; 0x11d6 <writeString>
     780:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USARTinputPos>
     784:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USARTinputPos+0x1>
     788:	99 23       	and	r25, r25
     78a:	84 f0       	brlt	.+32     	; 0x7ac <writeToTerminal+0x13a>
     78c:	09 e9       	ldi	r16, 0x99	; 153
     78e:	13 e0       	ldi	r17, 0x03	; 3
     790:	c0 e0       	ldi	r28, 0x00	; 0
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	f8 01       	movw	r30, r16
     796:	81 91       	ld	r24, Z+
     798:	8f 01       	movw	r16, r30
     79a:	15 d5       	rcall	.+2602   	; 0x11c6 <writeChar>
     79c:	21 96       	adiw	r28, 0x01	; 1
     79e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USARTinputPos>
     7a2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USARTinputPos+0x1>
     7a6:	8c 17       	cp	r24, r28
     7a8:	9d 07       	cpc	r25, r29
     7aa:	a4 f7       	brge	.-24     	; 0x794 <writeToTerminal+0x122>
     7ac:	75 dd       	rcall	.-1302   	; 0x298 <micros>
     7ae:	82 2e       	mov	r8, r18
     7b0:	93 2e       	mov	r9, r19
     7b2:	a4 2e       	mov	r10, r20
     7b4:	b5 2e       	mov	r11, r21
     7b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <writeTerminalTimerSpeed>
     7ba:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <writeTerminalTimerSpeed+0x1>
     7be:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <writeTerminalTimerSpeed+0x2>
     7c2:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <writeTerminalTimerSpeed+0x3>
     7c6:	88 0e       	add	r8, r24
     7c8:	99 1e       	adc	r9, r25
     7ca:	aa 1e       	adc	r10, r26
     7cc:	bb 1e       	adc	r11, r27
     7ce:	80 92 44 03 	sts	0x0344, r8	; 0x800344 <writeTerminalTimer>
     7d2:	90 92 45 03 	sts	0x0345, r9	; 0x800345 <writeTerminalTimer+0x1>
     7d6:	a0 92 46 03 	sts	0x0346, r10	; 0x800346 <writeTerminalTimer+0x2>
     7da:	b0 92 47 03 	sts	0x0347, r11	; 0x800347 <writeTerminalTimer+0x3>
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	4f 90       	pop	r4
     7fe:	08 95       	ret

00000800 <init_TWI>:
     800:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     804:	88 e4       	ldi	r24, 0x48	; 72
     806:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     80a:	85 e0       	ldi	r24, 0x05	; 5
     80c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     810:	08 95       	ret

00000812 <init_TWI_Timer2>:
     812:	e1 eb       	ldi	r30, 0xB1	; 177
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	87 60       	ori	r24, 0x07	; 7
     81a:	80 83       	st	Z, r24
     81c:	e0 e7       	ldi	r30, 0x70	; 112
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	81 60       	ori	r24, 0x01	; 1
     824:	80 83       	st	Z, r24
     826:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     82a:	08 95       	ret

0000082c <init_arduinoData>:
     82c:	e4 e6       	ldi	r30, 0x64	; 100
     82e:	f3 e0       	ldi	r31, 0x03	; 3
     830:	11 82       	std	Z+1, r1	; 0x01
     832:	10 82       	st	Z, r1
     834:	13 82       	std	Z+3, r1	; 0x03
     836:	12 82       	std	Z+2, r1	; 0x02
     838:	15 82       	std	Z+5, r1	; 0x05
     83a:	14 82       	std	Z+4, r1	; 0x04
     83c:	17 82       	std	Z+7, r1	; 0x07
     83e:	16 82       	std	Z+6, r1	; 0x06
     840:	11 86       	std	Z+9, r1	; 0x09
     842:	10 86       	std	Z+8, r1	; 0x08
     844:	08 95       	ret

00000846 <init_rp6Data>:
     846:	e2 e8       	ldi	r30, 0x82	; 130
     848:	f3 e0       	ldi	r31, 0x03	; 3
     84a:	11 82       	std	Z+1, r1	; 0x01
     84c:	10 82       	st	Z, r1
     84e:	12 82       	std	Z+2, r1	; 0x02
     850:	13 82       	std	Z+3, r1	; 0x03
     852:	84 e2       	ldi	r24, 0x24	; 36
     854:	93 e1       	ldi	r25, 0x13	; 19
     856:	95 83       	std	Z+5, r25	; 0x05
     858:	84 83       	std	Z+4, r24	; 0x04
     85a:	88 e2       	ldi	r24, 0x28	; 40
     85c:	93 e2       	ldi	r25, 0x23	; 35
     85e:	97 83       	std	Z+7, r25	; 0x07
     860:	86 83       	std	Z+6, r24	; 0x06
     862:	88 e8       	ldi	r24, 0x88	; 136
     864:	93 e1       	ldi	r25, 0x13	; 19
     866:	91 87       	std	Z+9, r25	; 0x09
     868:	80 87       	std	Z+8, r24	; 0x08
     86a:	88 ec       	ldi	r24, 0xC8	; 200
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	a0 e0       	ldi	r26, 0x00	; 0
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	82 87       	std	Z+10, r24	; 0x0a
     874:	93 87       	std	Z+11, r25	; 0x0b
     876:	a4 87       	std	Z+12, r26	; 0x0c
     878:	b5 87       	std	Z+13, r27	; 0x0d
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	86 87       	std	Z+14, r24	; 0x0e
     87e:	08 95       	ret

00000880 <arduinoDataInterpreter>:
     880:	a4 e6       	ldi	r26, 0x64	; 100
     882:	b3 e0       	ldi	r27, 0x03	; 3
     884:	e8 e4       	ldi	r30, 0x48	; 72
     886:	f3 e0       	ldi	r31, 0x03	; 3
     888:	81 81       	ldd	r24, Z+1	; 0x01
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	98 2f       	mov	r25, r24
     88e:	88 27       	eor	r24, r24
     890:	22 81       	ldd	r18, Z+2	; 0x02
     892:	82 0f       	add	r24, r18
     894:	91 1d       	adc	r25, r1
     896:	11 96       	adiw	r26, 0x01	; 1
     898:	9c 93       	st	X, r25
     89a:	8e 93       	st	-X, r24
     89c:	83 81       	ldd	r24, Z+3	; 0x03
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	98 2f       	mov	r25, r24
     8a2:	88 27       	eor	r24, r24
     8a4:	24 81       	ldd	r18, Z+4	; 0x04
     8a6:	82 0f       	add	r24, r18
     8a8:	91 1d       	adc	r25, r1
     8aa:	13 96       	adiw	r26, 0x03	; 3
     8ac:	9c 93       	st	X, r25
     8ae:	8e 93       	st	-X, r24
     8b0:	12 97       	sbiw	r26, 0x02	; 2
     8b2:	85 81       	ldd	r24, Z+5	; 0x05
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	98 2f       	mov	r25, r24
     8b8:	88 27       	eor	r24, r24
     8ba:	26 81       	ldd	r18, Z+6	; 0x06
     8bc:	82 0f       	add	r24, r18
     8be:	91 1d       	adc	r25, r1
     8c0:	15 96       	adiw	r26, 0x05	; 5
     8c2:	9c 93       	st	X, r25
     8c4:	8e 93       	st	-X, r24
     8c6:	14 97       	sbiw	r26, 0x04	; 4
     8c8:	87 81       	ldd	r24, Z+7	; 0x07
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	98 2f       	mov	r25, r24
     8ce:	88 27       	eor	r24, r24
     8d0:	20 85       	ldd	r18, Z+8	; 0x08
     8d2:	82 0f       	add	r24, r18
     8d4:	91 1d       	adc	r25, r1
     8d6:	17 96       	adiw	r26, 0x07	; 7
     8d8:	9c 93       	st	X, r25
     8da:	8e 93       	st	-X, r24
     8dc:	16 97       	sbiw	r26, 0x06	; 6
     8de:	81 85       	ldd	r24, Z+9	; 0x09
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	98 2f       	mov	r25, r24
     8e4:	88 27       	eor	r24, r24
     8e6:	22 85       	ldd	r18, Z+10	; 0x0a
     8e8:	82 0f       	add	r24, r18
     8ea:	91 1d       	adc	r25, r1
     8ec:	19 96       	adiw	r26, 0x09	; 9
     8ee:	9c 93       	st	X, r25
     8f0:	8e 93       	st	-X, r24
     8f2:	18 97       	sbiw	r26, 0x08	; 8
     8f4:	08 95       	ret

000008f6 <I2C_receiveInterpreter>:
     8f6:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <receiveDataTWI>
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	09 f4       	brne	.+2      	; 0x900 <I2C_receiveInterpreter+0xa>
     8fe:	c0 cf       	rjmp	.-128    	; 0x880 <arduinoDataInterpreter>
     900:	08 95       	ret

00000902 <clearSendData>:
     902:	ee e6       	ldi	r30, 0x6E	; 110
     904:	f3 e0       	ldi	r31, 0x03	; 3
     906:	82 e8       	ldi	r24, 0x82	; 130
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	11 92       	st	Z+, r1
     90c:	e8 17       	cp	r30, r24
     90e:	f9 07       	cpc	r31, r25
     910:	e1 f7       	brne	.-8      	; 0x90a <clearSendData+0x8>
     912:	08 95       	ret

00000914 <clearReceiveData>:
     914:	e8 e4       	ldi	r30, 0x48	; 72
     916:	f3 e0       	ldi	r31, 0x03	; 3
     918:	8c e5       	ldi	r24, 0x5C	; 92
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	11 92       	st	Z+, r1
     91e:	e8 17       	cp	r30, r24
     920:	f9 07       	cpc	r31, r25
     922:	e1 f7       	brne	.-8      	; 0x91c <clearReceiveData+0x8>
     924:	08 95       	ret

00000926 <__vector_39>:
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	0b b6       	in	r0, 0x3b	; 59
     932:	0f 92       	push	r0
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	4f 93       	push	r20
     94a:	5f 93       	push	r21
     94c:	6f 93       	push	r22
     94e:	7f 93       	push	r23
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	bf 93       	push	r27
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ef 93       	push	r30
     95e:	ff 93       	push	r31
     960:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     964:	80 35       	cpi	r24, 0x50	; 80
     966:	c1 f0       	breq	.+48     	; 0x998 <__vector_39+0x72>
     968:	88 35       	cpi	r24, 0x58	; 88
     96a:	a9 f1       	breq	.+106    	; 0x9d6 <__vector_39+0xb0>
     96c:	80 34       	cpi	r24, 0x40	; 64
     96e:	09 f0       	breq	.+2      	; 0x972 <__vector_39+0x4c>
     970:	8a c0       	rjmp	.+276    	; 0xa86 <__vector_39+0x160>
     972:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <compassFlag>
     976:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <compassFlag+0x1>
     97a:	89 2b       	or	r24, r25
     97c:	21 f0       	breq	.+8      	; 0x986 <__vector_39+0x60>
     97e:	85 e8       	ldi	r24, 0x85	; 133
     980:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     984:	80 c0       	rjmp	.+256    	; 0xa86 <__vector_39+0x160>
     986:	c6 df       	rcall	.-116    	; 0x914 <clearReceiveData>
     988:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <bytecounter.2054+0x1>
     98c:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <bytecounter.2054>
     990:	85 ec       	ldi	r24, 0xC5	; 197
     992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     996:	77 c0       	rjmp	.+238    	; 0xa86 <__vector_39+0x160>
     998:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <bytecounter.2054>
     99c:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <bytecounter.2054+0x1>
     9a0:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     9a4:	fc 01       	movw	r30, r24
     9a6:	e8 5b       	subi	r30, 0xB8	; 184
     9a8:	fc 4f       	sbci	r31, 0xFC	; 252
     9aa:	20 83       	st	Z, r18
     9ac:	82 31       	cpi	r24, 0x12	; 18
     9ae:	91 05       	cpc	r25, r1
     9b0:	4c f4       	brge	.+18     	; 0x9c4 <__vector_39+0x9e>
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <bytecounter.2054+0x1>
     9b8:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <bytecounter.2054>
     9bc:	85 ec       	ldi	r24, 0xC5	; 197
     9be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9c2:	61 c0       	rjmp	.+194    	; 0xa86 <__vector_39+0x160>
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <bytecounter.2054+0x1>
     9ca:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <bytecounter.2054>
     9ce:	85 e8       	ldi	r24, 0x85	; 133
     9d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9d4:	58 c0       	rjmp	.+176    	; 0xa86 <__vector_39+0x160>
     9d6:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <compassFlag>
     9da:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <compassFlag+0x1>
     9de:	89 2b       	or	r24, r25
     9e0:	71 f4       	brne	.+28     	; 0x9fe <__vector_39+0xd8>
     9e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     9e6:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <bytecounter.2054>
     9ea:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <bytecounter.2054+0x1>
     9ee:	e8 5b       	subi	r30, 0xB8	; 184
     9f0:	fc 4f       	sbci	r31, 0xFC	; 252
     9f2:	80 83       	st	Z, r24
     9f4:	85 e9       	ldi	r24, 0x95	; 149
     9f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9fa:	7d df       	rcall	.-262    	; 0x8f6 <I2C_receiveInterpreter>
     9fc:	44 c0       	rjmp	.+136    	; 0xa86 <__vector_39+0x160>
     9fe:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     a02:	c2 e8       	ldi	r28, 0x82	; 130
     a04:	d3 e0       	ldi	r29, 0x03	; 3
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	03 e0       	ldi	r16, 0x03	; 3
     a16:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__ashldi3>
     a1a:	a2 2e       	mov	r10, r18
     a1c:	b3 2e       	mov	r11, r19
     a1e:	c4 2e       	mov	r12, r20
     a20:	d5 2e       	mov	r13, r21
     a22:	e6 2e       	mov	r14, r22
     a24:	f7 2e       	mov	r15, r23
     a26:	e8 2f       	mov	r30, r24
     a28:	19 2f       	mov	r17, r25
     a2a:	02 e0       	ldi	r16, 0x02	; 2
     a2c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__ashldi3>
     a30:	0e 2f       	mov	r16, r30
     a32:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__subdi3>
     a36:	a2 2e       	mov	r10, r18
     a38:	b3 2e       	mov	r11, r19
     a3a:	c4 2e       	mov	r12, r20
     a3c:	d5 2e       	mov	r13, r21
     a3e:	e6 2e       	mov	r14, r22
     a40:	f7 2e       	mov	r15, r23
     a42:	e8 2f       	mov	r30, r24
     a44:	19 2f       	mov	r17, r25
     a46:	04 e0       	ldi	r16, 0x04	; 4
     a48:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__ashldi3>
     a4c:	0e 2f       	mov	r16, r30
     a4e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__subdi3>
     a52:	aa 24       	eor	r10, r10
     a54:	aa 94       	dec	r10
     a56:	b1 2c       	mov	r11, r1
     a58:	c1 2c       	mov	r12, r1
     a5a:	d1 2c       	mov	r13, r1
     a5c:	e1 2c       	mov	r14, r1
     a5e:	f1 2c       	mov	r15, r1
     a60:	00 e0       	ldi	r16, 0x00	; 0
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__udivdi3>
     a68:	2f 87       	std	Y+15, r18	; 0x0f
     a6a:	38 8b       	std	Y+16, r19	; 0x10
     a6c:	49 8b       	std	Y+17, r20	; 0x11
     a6e:	5a 8b       	std	Y+18, r21	; 0x12
     a70:	6b 8b       	std	Y+19, r22	; 0x13
     a72:	7c 8b       	std	Y+20, r23	; 0x14
     a74:	8d 8b       	std	Y+21, r24	; 0x15
     a76:	9e 8b       	std	Y+22, r25	; 0x16
     a78:	85 e9       	ldi	r24, 0x95	; 149
     a7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a7e:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <compassFlag+0x1>
     a82:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <compassFlag>
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	7f 91       	pop	r23
     a98:	6f 91       	pop	r22
     a9a:	5f 91       	pop	r21
     a9c:	4f 91       	pop	r20
     a9e:	3f 91       	pop	r19
     aa0:	2f 91       	pop	r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	bf 90       	pop	r11
     ab0:	af 90       	pop	r10
     ab2:	0f 90       	pop	r0
     ab4:	0b be       	out	0x3b, r0	; 59
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <TWIwaitUntilReady>:

void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
     ac0:	ec eb       	ldi	r30, 0xBC	; 188
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	88 23       	and	r24, r24
     ac8:	ec f7       	brge	.-6      	; 0xac4 <TWIwaitUntilReady+0x4>
}
     aca:	08 95       	ret

00000acc <checkCode>:

void checkCode(uint8_t code){
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	cf 5f       	subi	r28, 0xFF	; 255
     ad6:	d1 09       	sbc	r29, r1
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
	TWDR = u8data;
	TWISendTransmit();
}

uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     ae2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
}

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
     ae6:	98 7f       	andi	r25, 0xF8	; 248
     ae8:	89 17       	cp	r24, r25
     aea:	89 f0       	breq	.+34     	; 0xb0e <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     aec:	8c ee       	ldi	r24, 0xEC	; 236
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	72 d3       	rcall	.+1764   	; 0x11d6 <writeString>
	TWDR = u8data;
	TWISendTransmit();
}

uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     af2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     af6:	88 7f       	andi	r24, 0xF8	; 248
     af8:	40 e1       	ldi	r20, 0x10	; 16
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__itoa_ncheck>

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
     b06:	67 d3       	rcall	.+1742   	; 0x11d6 <writeString>
		writeString("\n\n\r");
     b08:	87 e1       	ldi	r24, 0x17	; 23
     b0a:	93 e0       	ldi	r25, 0x03	; 3
     b0c:	64 d3       	rcall	.+1736   	; 0x11d6 <writeString>
	}
}
     b0e:	c1 50       	subi	r28, 0x01	; 1
     b10:	df 4f       	sbci	r29, 0xFF	; 255
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <writeToSlave>:

void writeToSlave(uint8_t address, uint8_t dataByte[]){
     b22:	af 92       	push	r10
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	c8 2f       	mov	r28, r24
     b36:	8b 01       	movw	r16, r22
	
	TWISendStart();
     b38:	0f 2e       	mov	r0, r31
     b3a:	fc eb       	ldi	r31, 0xBC	; 188
     b3c:	cf 2e       	mov	r12, r31
     b3e:	d1 2c       	mov	r13, r1
     b40:	f0 2d       	mov	r31, r0
     b42:	85 ea       	ldi	r24, 0xA5	; 165
     b44:	f6 01       	movw	r30, r12
     b46:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     b48:	bb df       	rcall	.-138    	; 0xac0 <TWIwaitUntilReady>
	checkCode(0x08);
     b4a:	88 e0       	ldi	r24, 0x08	; 8
     b4c:	bf df       	rcall	.-130    	; 0xacc <checkCode>
	
	TWIWrite((address << 1));
     b4e:	cc 0f       	add	r28, r28
	}
}

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b50:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     b54:	85 e8       	ldi	r24, 0x85	; 133
     b56:	f6 01       	movw	r30, r12
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
     b58:	80 83       	st	Z, r24
	checkCode(0x18);
     b5a:	b2 df       	rcall	.-156    	; 0xac0 <TWIwaitUntilReady>
     b5c:	88 e1       	ldi	r24, 0x18	; 24
     b5e:	b6 df       	rcall	.-148    	; 0xacc <checkCode>
     b60:	e8 01       	movw	r28, r16
     b62:	0c 5e       	subi	r16, 0xEC	; 236
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b66:	0f 2e       	mov	r0, r31
     b68:	fb eb       	ldi	r31, 0xBB	; 187
     b6a:	af 2e       	mov	r10, r31
     b6c:	b1 2c       	mov	r11, r1
     b6e:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     b70:	0f 2e       	mov	r0, r31
     b72:	f5 e8       	ldi	r31, 0x85	; 133
     b74:	ff 2e       	mov	r15, r31
     b76:	f0 2d       	mov	r31, r0
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
     b78:	89 91       	ld	r24, Y+
	}
}

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b7a:	f5 01       	movw	r30, r10
	TWISendTransmit();
     b7c:	80 83       	st	Z, r24
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
     b7e:	f6 01       	movw	r30, r12
     b80:	f0 82       	st	Z, r15
		checkCode(0x28);
     b82:	9e df       	rcall	.-196    	; 0xac0 <TWIwaitUntilReady>
     b84:	88 e2       	ldi	r24, 0x28	; 40
     b86:	a2 df       	rcall	.-188    	; 0xacc <checkCode>
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
     b88:	c0 17       	cp	r28, r16
     b8a:	d1 07       	cpc	r29, r17
     b8c:	a9 f7       	brne	.-22     	; 0xb78 <writeToSlave+0x56>
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
		checkCode(0x28);
	}
	
	TWISendStop();
     b8e:	85 e9       	ldi	r24, 0x95	; 149
     b90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	af 90       	pop	r10
     ba6:	08 95       	ret

00000ba8 <rp6DataConstructor>:
	arduinoData.actualLeftMotorSpeed = (receiveDataTWI[5] << 8) + receiveDataTWI[6];
	arduinoData.actualRightMotorSpeed = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
	arduinoData.totalDistance = (receiveDataTWI[9] << 8) + receiveDataTWI[10];
}

void rp6DataConstructor(){
     ba8:	0f 93       	push	r16
     baa:	cf 93       	push	r28
	clearSendData();
     bac:	aa de       	rcall	.-684    	; 0x902 <clearSendData>
	
	sendDataTWI[0] = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     bb4:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <rp6Data>
     bb8:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <rp6Data+0x1>
     bbc:	85 36       	cpi	r24, 0x65	; 101
     bbe:	91 05       	cpc	r25, r1
     bc0:	30 f0       	brcs	.+12     	; 0xbce <rp6DataConstructor+0x26>
     bc2:	84 e6       	ldi	r24, 0x64	; 100
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <rp6Data+0x1>
     bca:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     bce:	ae e6       	ldi	r26, 0x6E	; 110
     bd0:	b3 e0       	ldi	r27, 0x03	; 3
     bd2:	e2 e8       	ldi	r30, 0x82	; 130
     bd4:	f3 e0       	ldi	r31, 0x03	; 3
     bd6:	80 81       	ld	r24, Z
     bd8:	11 96       	adiw	r26, 0x01	; 1
     bda:	8c 93       	st	X, r24
     bdc:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     bde:	82 81       	ldd	r24, Z+2	; 0x02
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	12 96       	adiw	r26, 0x02	; 2
     be4:	8c 93       	st	X, r24
     be6:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     be8:	83 81       	ldd	r24, Z+3	; 0x03
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	13 96       	adiw	r26, 0x03	; 3
     bee:	8c 93       	st	X, r24
     bf0:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     bf2:	84 81       	ldd	r24, Z+4	; 0x04
     bf4:	95 81       	ldd	r25, Z+5	; 0x05
     bf6:	14 96       	adiw	r26, 0x04	; 4
     bf8:	9c 93       	st	X, r25
     bfa:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     bfc:	15 96       	adiw	r26, 0x05	; 5
     bfe:	8c 93       	st	X, r24
     c00:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     c02:	86 81       	ldd	r24, Z+6	; 0x06
     c04:	97 81       	ldd	r25, Z+7	; 0x07
     c06:	16 96       	adiw	r26, 0x06	; 6
     c08:	9c 93       	st	X, r25
     c0a:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     c0c:	17 96       	adiw	r26, 0x07	; 7
     c0e:	8c 93       	st	X, r24
     c10:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     c12:	80 85       	ldd	r24, Z+8	; 0x08
     c14:	91 85       	ldd	r25, Z+9	; 0x09
     c16:	18 96       	adiw	r26, 0x08	; 8
     c18:	9c 93       	st	X, r25
     c1a:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     c1c:	19 96       	adiw	r26, 0x09	; 9
     c1e:	8c 93       	st	X, r24
     c20:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     c22:	82 85       	ldd	r24, Z+10	; 0x0a
     c24:	93 85       	ldd	r25, Z+11	; 0x0b
     c26:	1a 96       	adiw	r26, 0x0a	; 10
     c28:	9c 93       	st	X, r25
     c2a:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     c2c:	1b 96       	adiw	r26, 0x0b	; 11
     c2e:	8c 93       	st	X, r24
     c30:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     c32:	86 85       	ldd	r24, Z+14	; 0x0e
     c34:	1c 96       	adiw	r26, 0x0c	; 12
     c36:	8c 93       	st	X, r24
     c38:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     c3a:	c7 85       	ldd	r28, Z+15	; 0x0f
     c3c:	30 89       	ldd	r19, Z+16	; 0x10
     c3e:	41 89       	ldd	r20, Z+17	; 0x11
     c40:	52 89       	ldd	r21, Z+18	; 0x12
     c42:	63 89       	ldd	r22, Z+19	; 0x13
     c44:	74 89       	ldd	r23, Z+20	; 0x14
     c46:	2c 2f       	mov	r18, r28
     c48:	85 89       	ldd	r24, Z+21	; 0x15
     c4a:	96 89       	ldd	r25, Z+22	; 0x16
     c4c:	08 e0       	ldi	r16, 0x08	; 8
     c4e:	8e d7       	rcall	.+3868   	; 0x1b6c <__ashrdi3>
     c50:	1d 96       	adiw	r26, 0x0d	; 13
     c52:	2c 93       	st	X, r18
     c54:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     c56:	1e 96       	adiw	r26, 0x0e	; 14
     c58:	cc 93       	st	X, r28
     c5a:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     c5c:	1f 96       	adiw	r26, 0x0f	; 15
     c5e:	1c 92       	st	X, r1
     c60:	1f 97       	sbiw	r26, 0x0f	; 15
     c62:	50 96       	adiw	r26, 0x10	; 16
     c64:	1c 92       	st	X, r1
     c66:	50 97       	sbiw	r26, 0x10	; 16
     c68:	51 96       	adiw	r26, 0x11	; 17
     c6a:	1c 92       	st	X, r1
     c6c:	51 97       	sbiw	r26, 0x11	; 17
     c6e:	52 96       	adiw	r26, 0x12	; 18
     c70:	1c 92       	st	X, r1
     c72:	52 97       	sbiw	r26, 0x12	; 18
     c74:	53 96       	adiw	r26, 0x13	; 19
     c76:	1c 92       	st	X, r1
     c78:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     c7a:	bd 01       	movw	r22, r26
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	51 df       	rcall	.-350    	; 0xb22 <writeToSlave>
}
     c80:	cf 91       	pop	r28
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <readFromSlave>:
	
	TWISendStop();
	
}

void readFromSlave(uint8_t address){
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	c8 2f       	mov	r28, r24
	
	TWISendStart();
     c8e:	0c eb       	ldi	r16, 0xBC	; 188
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	85 ea       	ldi	r24, 0xA5	; 165
     c94:	f8 01       	movw	r30, r16
     c96:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     c98:	13 df       	rcall	.-474    	; 0xac0 <TWIwaitUntilReady>
	checkCode(0x08);
     c9a:	88 e0       	ldi	r24, 0x08	; 8
     c9c:	17 df       	rcall	.-466    	; 0xacc <checkCode>
	
	TWIWrite( (address << 1) + 1 );
     c9e:	cc 0f       	add	r28, r28
     ca0:	cf 5f       	subi	r28, 0xFF	; 255
	}
}

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     ca2:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     ca6:	85 e8       	ldi	r24, 0x85	; 133
     ca8:	f8 01       	movw	r30, r16
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite( (address << 1) + 1 );
	TWIwaitUntilReady();
     caa:	80 83       	st	Z, r24
     cac:	09 df       	rcall	.-494    	; 0xac0 <TWIwaitUntilReady>
	
}
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	08 95       	ret

00000cb6 <readFromCompass>:

void readFromCompass(){
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
	compassFlag = 1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <compassFlag+0x1>
     cca:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <compassFlag>
	TWISendStart();
     cce:	cc eb       	ldi	r28, 0xBC	; 188
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
     cd2:	05 ea       	ldi	r16, 0xA5	; 165
     cd4:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     cd6:	f4 de       	rcall	.-536    	; 0xac0 <TWIwaitUntilReady>
	checkCode(0x08);
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	f8 de       	rcall	.-528    	; 0xacc <checkCode>
	}
}

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     cdc:	0f 2e       	mov	r0, r31
     cde:	fb eb       	ldi	r31, 0xBB	; 187
     ce0:	ef 2e       	mov	r14, r31
     ce2:	f1 2c       	mov	r15, r1
     ce4:	f0 2d       	mov	r31, r0
     ce6:	80 ec       	ldi	r24, 0xC0	; 192
     ce8:	f7 01       	movw	r30, r14
     cea:	80 83       	st	Z, r24
	TWISendTransmit();
     cec:	15 e8       	ldi	r17, 0x85	; 133
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite(0xC0);
	TWIwaitUntilReady();
     cee:	18 83       	st	Y, r17
	checkCode(0x18);
     cf0:	e7 de       	rcall	.-562    	; 0xac0 <TWIwaitUntilReady>
     cf2:	88 e1       	ldi	r24, 0x18	; 24
     cf4:	eb de       	rcall	.-554    	; 0xacc <checkCode>
	}
}

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	f7 01       	movw	r30, r14
	TWISendTransmit();
     cfa:	80 83       	st	Z, r24
	TWIWrite(0xC0);
	TWIwaitUntilReady();
	checkCode(0x18);
	
	TWIWrite(1);
	TWIwaitUntilReady();
     cfc:	18 83       	st	Y, r17
	checkCode(0x28);
     cfe:	e0 de       	rcall	.-576    	; 0xac0 <TWIwaitUntilReady>
     d00:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     d02:	e4 de       	rcall	.-568    	; 0xacc <checkCode>
	TWIwaitUntilReady();
     d04:	08 83       	st	Y, r16
	checkCode(0x10);
     d06:	dc de       	rcall	.-584    	; 0xac0 <TWIwaitUntilReady>
     d08:	80 e1       	ldi	r24, 0x10	; 16
     d0a:	e0 de       	rcall	.-576    	; 0xacc <checkCode>
	}
}

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     d0c:	81 ec       	ldi	r24, 0xC1	; 193
     d0e:	f7 01       	movw	r30, r14
     d10:	80 83       	st	Z, r24
	TWISendTransmit();
     d12:	18 83       	st	Y, r17
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x10);
	
	TWIWrite(0xC1);
	TWIwaitUntilReady();
     d14:	d5 de       	rcall	.-598    	; 0xac0 <TWIwaitUntilReady>
     d16:	df 91       	pop	r29
}
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	08 95       	ret

00000d24 <__vector_15>:
     d24:	1f 92       	push	r1
		}
		break;
	}
}

ISR(TIMER2_OVF_vect){
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	0b b6       	in	r0, 0x3b	; 59
     d30:	0f 92       	push	r0
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 3){
     d4a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <counter.2065>
     d4e:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <counter.2065+0x1>
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	91 05       	cpc	r25, r1
     d56:	11 f4       	brne	.+4      	; 0xd5c <__vector_15+0x38>
		rp6DataConstructor();
     d58:	27 df       	rcall	.-434    	; 0xba8 <rp6DataConstructor>
     d5a:	12 c0       	rjmp	.+36     	; 0xd80 <__vector_15+0x5c>
	}else if(counter == 6){
     d5c:	86 30       	cpi	r24, 0x06	; 6
     d5e:	91 05       	cpc	r25, r1
		readFromCompass();
     d60:	11 f4       	brne	.+4      	; 0xd66 <__vector_15+0x42>
     d62:	a9 df       	rcall	.-174    	; 0xcb6 <readFromCompass>
     d64:	0d c0       	rjmp	.+26     	; 0xd80 <__vector_15+0x5c>
	}else if(counter == 9){
     d66:	89 30       	cpi	r24, 0x09	; 9
     d68:	91 05       	cpc	r25, r1
		readFromSlave(RP6_ADDRESS);
     d6a:	19 f4       	brne	.+6      	; 0xd72 <__vector_15+0x4e>
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	8b df       	rcall	.-234    	; 0xc86 <readFromSlave>
	}else if(counter >= 12){
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <__vector_15+0x5c>
     d72:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromCompass();
     d74:	2c f0       	brlt	.+10     	; 0xd80 <__vector_15+0x5c>
     d76:	9f df       	rcall	.-194    	; 0xcb6 <readFromCompass>
		counter = 0;
     d78:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <counter.2065+0x1>
     d7c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <counter.2065>
	}
	
	counter++;
     d80:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <counter.2065>
     d84:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <counter.2065+0x1>
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <counter.2065+0x1>
     d8e:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <counter.2065>
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0b be       	out	0x3b, r0	; 59
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <turnSignal>:
	TWIWrite(0xC1);
	TWIwaitUntilReady();
}

//Blinkers
void turnSignal(){
     db8:	4f 92       	push	r4
     dba:	5f 92       	push	r5
     dbc:	6f 92       	push	r6
     dbe:	7f 92       	push	r7
     dc0:	8f 92       	push	r8
     dc2:	9f 92       	push	r9
     dc4:	af 92       	push	r10
     dc6:	bf 92       	push	r11
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
     dd4:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     dd6:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     dd8:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <rp6Data+0x3>
     ddc:	8f 3f       	cpi	r24, 0xFF	; 255
     dde:	c1 f5       	brne	.+112    	; 0xe50 <turnSignal+0x98>
		if(turnSignalStart < micros()){
     de0:	40 90 20 03 	lds	r4, 0x0320	; 0x800320 <turnSignalStart.2121>
     de4:	50 90 21 03 	lds	r5, 0x0321	; 0x800321 <turnSignalStart.2121+0x1>
     de8:	60 90 22 03 	lds	r6, 0x0322	; 0x800322 <turnSignalStart.2121+0x2>
     dec:	70 90 23 03 	lds	r7, 0x0323	; 0x800323 <turnSignalStart.2121+0x3>
     df0:	53 da       	rcall	.-2906   	; 0x298 <micros>
     df2:	f2 2f       	mov	r31, r18
     df4:	e3 2f       	mov	r30, r19
     df6:	c4 2e       	mov	r12, r20
     df8:	d5 2e       	mov	r13, r21
     dfa:	e6 2e       	mov	r14, r22
     dfc:	f7 2e       	mov	r15, r23
     dfe:	08 2f       	mov	r16, r24
     e00:	19 2f       	mov	r17, r25
     e02:	24 2d       	mov	r18, r4
     e04:	35 2d       	mov	r19, r5
     e06:	46 2d       	mov	r20, r6
     e08:	57 2d       	mov	r21, r7
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	af 2e       	mov	r10, r31
     e14:	be 2e       	mov	r11, r30
     e16:	e6 d6       	rcall	.+3532   	; 0x1be4 <__cmpdi2>
     e18:	08 f0       	brcs	.+2      	; 0xe1c <turnSignal+0x64>
     e1a:	54 c0       	rjmp	.+168    	; 0xec4 <turnSignal+0x10c>
			PORTC ^= (1 << PINC1);	
     e1c:	98 b1       	in	r25, 0x08	; 8
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	89 27       	eor	r24, r25
			PORTD &= ~(1 << PIND7);
     e22:	88 b9       	out	0x08, r24	; 8
			turnSignalStart = micros() + turnSignalDelay;
     e24:	5f 98       	cbi	0x0b, 7	; 11
     e26:	38 da       	rcall	.-2960   	; 0x298 <micros>
     e28:	82 2e       	mov	r8, r18
     e2a:	93 2e       	mov	r9, r19
     e2c:	a4 2e       	mov	r10, r20
     e2e:	b5 2e       	mov	r11, r21
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	88 0e       	add	r8, r24
     e34:	81 ea       	ldi	r24, 0xA1	; 161
     e36:	98 1e       	adc	r9, r24
     e38:	87 e0       	ldi	r24, 0x07	; 7
     e3a:	a8 1e       	adc	r10, r24
     e3c:	b1 1c       	adc	r11, r1
     e3e:	80 92 20 03 	sts	0x0320, r8	; 0x800320 <turnSignalStart.2121>
     e42:	90 92 21 03 	sts	0x0321, r9	; 0x800321 <turnSignalStart.2121+0x1>
     e46:	a0 92 22 03 	sts	0x0322, r10	; 0x800322 <turnSignalStart.2121+0x2>
     e4a:	b0 92 23 03 	sts	0x0323, r11	; 0x800323 <turnSignalStart.2121+0x3>
     e4e:	3a c0       	rjmp	.+116    	; 0xec4 <turnSignal+0x10c>
		}
	}else if(rp6Data.turnDirection == 1){
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	b1 f5       	brne	.+108    	; 0xec0 <turnSignal+0x108>
		if(turnSignalStart < micros()){
     e54:	40 90 20 03 	lds	r4, 0x0320	; 0x800320 <turnSignalStart.2121>
     e58:	50 90 21 03 	lds	r5, 0x0321	; 0x800321 <turnSignalStart.2121+0x1>
     e5c:	60 90 22 03 	lds	r6, 0x0322	; 0x800322 <turnSignalStart.2121+0x2>
     e60:	70 90 23 03 	lds	r7, 0x0323	; 0x800323 <turnSignalStart.2121+0x3>
     e64:	19 da       	rcall	.-3022   	; 0x298 <micros>
     e66:	f2 2f       	mov	r31, r18
     e68:	e3 2f       	mov	r30, r19
     e6a:	c4 2e       	mov	r12, r20
     e6c:	d5 2e       	mov	r13, r21
     e6e:	e6 2e       	mov	r14, r22
     e70:	f7 2e       	mov	r15, r23
     e72:	08 2f       	mov	r16, r24
     e74:	19 2f       	mov	r17, r25
     e76:	24 2d       	mov	r18, r4
     e78:	35 2d       	mov	r19, r5
     e7a:	46 2d       	mov	r20, r6
     e7c:	57 2d       	mov	r21, r7
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	af 2e       	mov	r10, r31
     e88:	be 2e       	mov	r11, r30
     e8a:	ac d6       	rcall	.+3416   	; 0x1be4 <__cmpdi2>
     e8c:	d8 f4       	brcc	.+54     	; 0xec4 <turnSignal+0x10c>
			PORTC &= ~(1 << PINC1);
     e8e:	41 98       	cbi	0x08, 1	; 8
			PORTD ^= (1 << PIND7);
     e90:	8b b1       	in	r24, 0x0b	; 11
     e92:	80 58       	subi	r24, 0x80	; 128
     e94:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     e96:	00 da       	rcall	.-3072   	; 0x298 <micros>
     e98:	82 2e       	mov	r8, r18
     e9a:	93 2e       	mov	r9, r19
     e9c:	a4 2e       	mov	r10, r20
     e9e:	b5 2e       	mov	r11, r21
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	88 0e       	add	r8, r24
     ea4:	81 ea       	ldi	r24, 0xA1	; 161
     ea6:	98 1e       	adc	r9, r24
     ea8:	87 e0       	ldi	r24, 0x07	; 7
     eaa:	a8 1e       	adc	r10, r24
     eac:	b1 1c       	adc	r11, r1
     eae:	80 92 20 03 	sts	0x0320, r8	; 0x800320 <turnSignalStart.2121>
     eb2:	90 92 21 03 	sts	0x0321, r9	; 0x800321 <turnSignalStart.2121+0x1>
     eb6:	a0 92 22 03 	sts	0x0322, r10	; 0x800322 <turnSignalStart.2121+0x2>
     eba:	b0 92 23 03 	sts	0x0323, r11	; 0x800323 <turnSignalStart.2121+0x3>
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <turnSignal+0x10c>
     ec0:	41 98       	cbi	0x08, 1	; 8
		}
	}else{
		PORTC &= ~(1 << PINC1);
     ec2:	5f 98       	cbi	0x0b, 7	; 11
		PORTD &= ~(1 << PIND7);
     ec4:	1f 91       	pop	r17
	}
}
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	9f 90       	pop	r9
     ed6:	8f 90       	pop	r8
     ed8:	7f 90       	pop	r7
     eda:	6f 90       	pop	r6
     edc:	5f 90       	pop	r5
     ede:	4f 90       	pop	r4
     ee0:	08 95       	ret

00000ee2 <checkUltrasonic>:
     ee2:	4f 92       	push	r4

//Ultrasonic
void checkUltrasonic(){
     ee4:	5f 92       	push	r5
     ee6:	6f 92       	push	r6
     ee8:	7f 92       	push	r7
     eea:	8f 92       	push	r8
     eec:	9f 92       	push	r9
     eee:	af 92       	push	r10
     ef0:	bf 92       	push	r11
     ef2:	cf 92       	push	r12
     ef4:	df 92       	push	r13
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
	if(ultrasonicTimer < micros()){
     efe:	40 90 40 03 	lds	r4, 0x0340	; 0x800340 <ultrasonicTimer>
     f02:	50 90 41 03 	lds	r5, 0x0341	; 0x800341 <ultrasonicTimer+0x1>
     f06:	60 90 42 03 	lds	r6, 0x0342	; 0x800342 <ultrasonicTimer+0x2>
     f0a:	70 90 43 03 	lds	r7, 0x0343	; 0x800343 <ultrasonicTimer+0x3>
     f0e:	c4 d9       	rcall	.-3192   	; 0x298 <micros>
     f10:	f2 2f       	mov	r31, r18
     f12:	e3 2f       	mov	r30, r19
     f14:	c4 2e       	mov	r12, r20
     f16:	d5 2e       	mov	r13, r21
     f18:	e6 2e       	mov	r14, r22
     f1a:	f7 2e       	mov	r15, r23
     f1c:	08 2f       	mov	r16, r24
     f1e:	19 2f       	mov	r17, r25
     f20:	24 2d       	mov	r18, r4
     f22:	35 2d       	mov	r19, r5
     f24:	46 2d       	mov	r20, r6
     f26:	57 2d       	mov	r21, r7
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	af 2e       	mov	r10, r31
     f32:	be 2e       	mov	r11, r30
     f34:	57 d6       	rcall	.+3246   	; 0x1be4 <__cmpdi2>
     f36:	08 f0       	brcs	.+2      	; 0xf3a <checkUltrasonic+0x58>
     f38:	9f c0       	rjmp	.+318    	; 0x1078 <checkUltrasonic+0x196>
		
		uint16_t distance = ultrasonicSensor();
     f3a:	98 d1       	rcall	.+816    	; 0x126c <ultrasonicSensor>
     f3c:	81 39       	cpi	r24, 0x91	; 145
		static int stopState = 0;
		static uint16_t tempAcceleration;
		
		if(distance > 400 && stopState == 1){
     f3e:	21 e0       	ldi	r18, 0x01	; 1
     f40:	92 07       	cpc	r25, r18
     f42:	80 f0       	brcs	.+32     	; 0xf64 <checkUltrasonic+0x82>
     f44:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <stopState.2125>
     f48:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <stopState.2125+0x1>
     f4c:	21 30       	cpi	r18, 0x01	; 1
     f4e:	31 05       	cpc	r19, r1
     f50:	49 f4       	brne	.+18     	; 0xf64 <checkUltrasonic+0x82>
     f52:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <__data_end>
			rp6Data.accelerationRate = tempAcceleration;
     f56:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <__data_end+0x1>
     f5a:	30 93 87 03 	sts	0x0387, r19	; 0x800387 <rp6Data+0x5>
     f5e:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <rp6Data+0x4>
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <checkUltrasonic+0xa0>
     f64:	8d 32       	cpi	r24, 0x2D	; 45
			}else if(distance > 300 && stopState == 2){
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	92 07       	cpc	r25, r18
     f6a:	58 f0       	brcs	.+22     	; 0xf82 <checkUltrasonic+0xa0>
     f6c:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <stopState.2125>
     f70:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <stopState.2125+0x1>
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	21 f4       	brne	.+8      	; 0xf82 <checkUltrasonic+0xa0>
     f7a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <stopState.2125+0x1>
			stopState = 0;
     f7e:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <stopState.2125>
     f82:	9c 01       	movw	r18, r24
		}
		
		if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
     f84:	2d 52       	subi	r18, 0x2D	; 45
     f86:	31 40       	sbci	r19, 0x01	; 1
     f88:	23 36       	cpi	r18, 0x63	; 99
     f8a:	31 05       	cpc	r19, r1
     f8c:	90 f4       	brcc	.+36     	; 0xfb2 <checkUltrasonic+0xd0>
     f8e:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <rp6Data>
     f92:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <rp6Data+0x1>
     f96:	29 32       	cpi	r18, 0x29	; 41
     f98:	31 05       	cpc	r19, r1
     f9a:	58 f0       	brcs	.+22     	; 0xfb2 <checkUltrasonic+0xd0>
     f9c:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <rp6Data+0x2>
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <checkUltrasonic+0xd0>
     fa4:	88 e2       	ldi	r24, 0x28	; 40
			rp6Data.driveSpeed = 40;
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <rp6Data+0x1>
     fac:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <rp6Data>
     fb0:	4a c0       	rjmp	.+148    	; 0x1046 <checkUltrasonic+0x164>
     fb2:	9c 01       	movw	r18, r24
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
     fb4:	26 55       	subi	r18, 0x56	; 86
     fb6:	31 09       	sbc	r19, r1
     fb8:	26 3d       	cpi	r18, 0xD6	; 214
     fba:	31 05       	cpc	r19, r1
     fbc:	90 f4       	brcc	.+36     	; 0xfe2 <checkUltrasonic+0x100>
     fbe:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <rp6Data>
     fc2:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <rp6Data+0x1>
     fc6:	2a 31       	cpi	r18, 0x1A	; 26
     fc8:	31 05       	cpc	r19, r1
     fca:	58 f0       	brcs	.+22     	; 0xfe2 <checkUltrasonic+0x100>
     fcc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data+0x2>
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	c9 f5       	brne	.+114    	; 0x1046 <checkUltrasonic+0x164>
     fd4:	89 e1       	ldi	r24, 0x19	; 25
			rp6Data.driveSpeed = 25;
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <rp6Data+0x1>
     fdc:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <rp6Data>
     fe0:	32 c0       	rjmp	.+100    	; 0x1046 <checkUltrasonic+0x164>
     fe2:	85 35       	cpi	r24, 0x55	; 85
			}else if(distance < 85 && rp6Data.driveDirection == 1){
     fe4:	91 05       	cpc	r25, r1
     fe6:	78 f5       	brcc	.+94     	; 0x1046 <checkUltrasonic+0x164>
     fe8:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data+0x2>
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	59 f5       	brne	.+86     	; 0x1046 <checkUltrasonic+0x164>
     ff0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <stopState.2125>
			if(stopState == 0){
     ff4:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <stopState.2125+0x1>
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	a9 f4       	brne	.+42     	; 0x1026 <checkUltrasonic+0x144>
     ffc:	e2 e8       	ldi	r30, 0x82	; 130
				tempAcceleration = rp6Data.accelerationRate;
     ffe:	f3 e0       	ldi	r31, 0x03	; 3
    1000:	84 81       	ldd	r24, Z+4	; 0x04
    1002:	95 81       	ldd	r25, Z+5	; 0x05
    1004:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <__data_end+0x1>
    1008:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <__data_end>
    100c:	88 e8       	ldi	r24, 0x88	; 136
				rp6Data.accelerationRate = 5000;
    100e:	93 e1       	ldi	r25, 0x13	; 19
    1010:	95 83       	std	Z+5, r25	; 0x05
    1012:	84 83       	std	Z+4, r24	; 0x04
    1014:	11 82       	std	Z+1, r1	; 0x01
				rp6Data.driveSpeed = 0;
    1016:	10 82       	st	Z, r1
    1018:	81 e0       	ldi	r24, 0x01	; 1
				stopState = 1;
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <stopState.2125+0x1>
    1020:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <stopState.2125>
    1024:	10 c0       	rjmp	.+32     	; 0x1046 <checkUltrasonic+0x164>
    1026:	01 97       	sbiw	r24, 0x01	; 1
				}else if(stopState == 1){
    1028:	71 f4       	brne	.+28     	; 0x1046 <checkUltrasonic+0x164>
    102a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__data_end>
				rp6Data.accelerationRate = tempAcceleration;
    102e:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <__data_end+0x1>
    1032:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <rp6Data+0x5>
    1036:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <rp6Data+0x4>
    103a:	82 e0       	ldi	r24, 0x02	; 2
				stopState = 2;
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <stopState.2125+0x1>
    1042:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <stopState.2125>
			}
		}
		
		ultrasonicTimer = micros() + ultrasonicTimerSpeed;
    1046:	28 d9       	rcall	.-3504   	; 0x298 <micros>
    1048:	82 2e       	mov	r8, r18
    104a:	93 2e       	mov	r9, r19
    104c:	a4 2e       	mov	r10, r20
    104e:	b5 2e       	mov	r11, r21
    1050:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ultrasonicTimerSpeed>
    1054:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ultrasonicTimerSpeed+0x1>
    1058:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ultrasonicTimerSpeed+0x2>
    105c:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ultrasonicTimerSpeed+0x3>
    1060:	88 0e       	add	r8, r24
    1062:	99 1e       	adc	r9, r25
    1064:	aa 1e       	adc	r10, r26
    1066:	bb 1e       	adc	r11, r27
    1068:	80 92 40 03 	sts	0x0340, r8	; 0x800340 <ultrasonicTimer>
    106c:	90 92 41 03 	sts	0x0341, r9	; 0x800341 <ultrasonicTimer+0x1>
    1070:	a0 92 42 03 	sts	0x0342, r10	; 0x800342 <ultrasonicTimer+0x2>
    1074:	b0 92 43 03 	sts	0x0343, r11	; 0x800343 <ultrasonicTimer+0x3>
    1078:	1f 91       	pop	r17
	}
}
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	9f 90       	pop	r9
    108a:	8f 90       	pop	r8
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	08 95       	ret

00001096 <beeper>:
    1096:	4f 92       	push	r4

//Beeper
void beeper(){
    1098:	5f 92       	push	r5
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
	if (backBeepTimer < micros()) {
    10b2:	40 90 3c 03 	lds	r4, 0x033C	; 0x80033c <backBeepTimer>
    10b6:	50 90 3d 03 	lds	r5, 0x033D	; 0x80033d <backBeepTimer+0x1>
    10ba:	60 90 3e 03 	lds	r6, 0x033E	; 0x80033e <backBeepTimer+0x2>
    10be:	70 90 3f 03 	lds	r7, 0x033F	; 0x80033f <backBeepTimer+0x3>
    10c2:	ea d8       	rcall	.-3628   	; 0x298 <micros>
    10c4:	f2 2f       	mov	r31, r18
    10c6:	e3 2f       	mov	r30, r19
    10c8:	c4 2e       	mov	r12, r20
    10ca:	d5 2e       	mov	r13, r21
    10cc:	e6 2e       	mov	r14, r22
    10ce:	f7 2e       	mov	r15, r23
    10d0:	08 2f       	mov	r16, r24
    10d2:	19 2f       	mov	r17, r25
    10d4:	24 2d       	mov	r18, r4
    10d6:	35 2d       	mov	r19, r5
    10d8:	46 2d       	mov	r20, r6
    10da:	57 2d       	mov	r21, r7
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	af 2e       	mov	r10, r31
    10e6:	be 2e       	mov	r11, r30
    10e8:	7d d5       	rcall	.+2810   	; 0x1be4 <__cmpdi2>
    10ea:	a8 f5       	brcc	.+106    	; 0x1156 <beeper+0xc0>
		if ((rp6Data.driveDirection == -1 && rp6Data.driveSpeed > 20)  || arduinoData.bumperFlag) {
    10ec:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data+0x2>
    10f0:	8f 3f       	cpi	r24, 0xFF	; 255
    10f2:	31 f4       	brne	.+12     	; 0x1100 <beeper+0x6a>
    10f4:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <rp6Data>
    10f8:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <rp6Data+0x1>
    10fc:	45 97       	sbiw	r24, 0x15	; 21
    10fe:	30 f4       	brcc	.+12     	; 0x110c <beeper+0x76>
    1100:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <arduinoData>
    1104:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <arduinoData+0x1>
    1108:	89 2b       	or	r24, r25
    110a:	01 f1       	breq	.+64     	; 0x114c <beeper+0xb6>
			DDRH ^= (1 << BEEPER);
    110c:	e1 e0       	ldi	r30, 0x01	; 1
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	90 81       	ld	r25, Z
    1112:	88 e0       	ldi	r24, 0x08	; 8
    1114:	89 27       	eor	r24, r25
			backBeepTimer = micros() + backBeepSpeed;
    1116:	80 83       	st	Z, r24
    1118:	bf d8       	rcall	.-3714   	; 0x298 <micros>
    111a:	82 2e       	mov	r8, r18
    111c:	93 2e       	mov	r9, r19
    111e:	a4 2e       	mov	r10, r20
    1120:	b5 2e       	mov	r11, r21
    1122:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <backBeepSpeed>
    1126:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <backBeepSpeed+0x1>
    112a:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <backBeepSpeed+0x2>
    112e:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <backBeepSpeed+0x3>
    1132:	88 0e       	add	r8, r24
    1134:	99 1e       	adc	r9, r25
    1136:	aa 1e       	adc	r10, r26
    1138:	bb 1e       	adc	r11, r27
    113a:	80 92 3c 03 	sts	0x033C, r8	; 0x80033c <backBeepTimer>
    113e:	90 92 3d 03 	sts	0x033D, r9	; 0x80033d <backBeepTimer+0x1>
    1142:	a0 92 3e 03 	sts	0x033E, r10	; 0x80033e <backBeepTimer+0x2>
    1146:	b0 92 3f 03 	sts	0x033F, r11	; 0x80033f <backBeepTimer+0x3>
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <beeper+0xc0>
			} else {
			DDRH &= ~(1 << BEEPER);
    114c:	e1 e0       	ldi	r30, 0x01	; 1
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	80 81       	ld	r24, Z
    1152:	87 7f       	andi	r24, 0xF7	; 247
    1154:	80 83       	st	Z, r24
		}
	}
	
	if (rp6Data.driveDirection != -1 && !arduinoData.bumperFlag) {
    1156:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data+0x2>
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	59 f0       	breq	.+22     	; 0x1174 <beeper+0xde>
    115e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <arduinoData>
    1162:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <arduinoData+0x1>
    1166:	89 2b       	or	r24, r25
    1168:	29 f4       	brne	.+10     	; 0x1174 <beeper+0xde>
		DDRH &= ~(1 << BEEPER);
    116a:	e1 e0       	ldi	r30, 0x01	; 1
    116c:	f1 e0       	ldi	r31, 0x01	; 1
    116e:	80 81       	ld	r24, Z
    1170:	87 7f       	andi	r24, 0xF7	; 247
    1172:	80 83       	st	Z, r24
	}
}
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	9f 90       	pop	r9
    1186:	8f 90       	pop	r8
    1188:	7f 90       	pop	r7
    118a:	6f 90       	pop	r6
    118c:	5f 90       	pop	r5
    118e:	4f 90       	pop	r4
    1190:	08 95       	ret

00001192 <main>:
//////////////////////////////////////////////////

//Function definitions ---------------------------
//General
void init_interrupt(){
	sei();									//Enable global interrupts
    1192:	78 94       	sei

////////////////// MAIN PROGRAM //////////////////
int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
    1194:	23 d8       	rcall	.-4026   	; 0x1dc <init_micros>
	init_USART();
    1196:	e2 d8       	rcall	.-3644   	; 0x35c <init_USART>
	init_TWI();
    1198:	33 db       	rcall	.-2458   	; 0x800 <init_TWI>
	init_TWI_Timer2();
    119a:	3b db       	rcall	.-2442   	; 0x812 <init_TWI_Timer2>
	initBackBeep();
    119c:	4c d0       	rcall	.+152    	; 0x1236 <initBackBeep>
	init_rp6Data();
    119e:	53 db       	rcall	.-2394   	; 0x846 <init_rp6Data>
    11a0:	45 db       	rcall	.-2422   	; 0x82c <init_arduinoData>
	init_arduinoData();
    11a2:	5a d0       	rcall	.+180    	; 0x1258 <initTimer>
    11a4:	db d8       	rcall	.-3658   	; 0x35c <init_USART>
	initTimer();
    11a6:	c4 e6       	ldi	r28, 0x64	; 100
    11a8:	d3 e0       	ldi	r29, 0x03	; 3
	init_USART();
    11aa:	02 e8       	ldi	r16, 0x82	; 130
    11ac:	13 e0       	ldi	r17, 0x03	; 3
	//-----------------------
	
	while (1){
		
		if(arduinoData.bumperFlag) {
    11ae:	88 81       	ld	r24, Y
    11b0:	99 81       	ldd	r25, Y+1	; 0x01
			rp6Data.driveSpeed = 0;
    11b2:	89 2b       	or	r24, r25
	init_USART();
	//-----------------------
	
	while (1){
		
		if(arduinoData.bumperFlag) {
    11b4:	19 f0       	breq	.+6      	; 0x11bc <main+0x2a>
    11b6:	f8 01       	movw	r30, r16
			rp6Data.driveSpeed = 0;
    11b8:	11 82       	std	Z+1, r1	; 0x01
    11ba:	10 82       	st	Z, r1
    11bc:	5a da       	rcall	.-2892   	; 0x672 <writeToTerminal>
		}
		
		writeToTerminal();
    11be:	91 de       	rcall	.-734    	; 0xee2 <checkUltrasonic>
    11c0:	fb dd       	rcall	.-1034   	; 0xdb8 <turnSignal>
		
		checkUltrasonic();
    11c2:	69 df       	rcall	.-302    	; 0x1096 <beeper>
    11c4:	f4 cf       	rjmp	.-24     	; 0x11ae <main+0x1c>

000011c6 <writeChar>:
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
    11c6:	e0 ec       	ldi	r30, 0xC0	; 192
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	90 81       	ld	r25, Z
    11cc:	95 ff       	sbrs	r25, 5
    11ce:	fd cf       	rjmp	.-6      	; 0x11ca <writeChar+0x4>
	UDR0 = x;
    11d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    11d4:	08 95       	ret

000011d6 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    11de:	80 81       	ld	r24, Z
    11e0:	88 23       	and	r24, r24
    11e2:	51 f0       	breq	.+20     	; 0x11f8 <writeString+0x22>
    11e4:	8f 01       	movw	r16, r30
    11e6:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    11e8:	ee df       	rcall	.-36     	; 0x11c6 <writeChar>
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    11ea:	cf 5f       	subi	r28, 0xFF	; 255
    11ec:	f8 01       	movw	r30, r16
    11ee:	ec 0f       	add	r30, r28
    11f0:	f1 1d       	adc	r31, r1
    11f2:	80 81       	ld	r24, Z
    11f4:	81 11       	cpse	r24, r1
    11f6:	f8 cf       	rjmp	.-16     	; 0x11e8 <writeString+0x12>
		writeChar( st[i] );
	}
}
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	08 95       	ret

00001200 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	28 97       	sbiw	r28, 0x08	; 8
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	4a e0       	ldi	r20, 0x0A	; 10
    1216:	be 01       	movw	r22, r28
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	fb d4       	rcall	.+2550   	; 0x1c14 <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	d9 df       	rcall	.-78     	; 0x11d6 <writeString>
}
    1224:	28 96       	adiw	r28, 0x08	; 8
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <initBackBeep>:

#define PRESCALER 256

void initBackBeep() {
	
	TCCR4A |= (1 << COM4A0);				//Toggle OC1A on match
    1236:	e0 ea       	ldi	r30, 0xA0	; 160
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 64       	ori	r24, 0x40	; 64
    123e:	80 83       	st	Z, r24
	TCCR4B |= (1 << CS42) | (1 << WGM42);	//Prescaler 256, CTC mode
    1240:	e1 ea       	ldi	r30, 0xA1	; 161
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8c 60       	ori	r24, 0x0C	; 12
    1248:	80 83       	st	Z, r24
	OCR4A = freqToOCR(BEEP_FREQ);
    124a:	8e e4       	ldi	r24, 0x4E	; 78
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1252:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    1256:	08 95       	ret

00001258 <initTimer>:
#define PORT_REGISTER PORTL
#define PIN_REGISTER PINL

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
    1258:	e1 e8       	ldi	r30, 0x81	; 129
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	82 60       	ori	r24, 0x02	; 2
    1260:	80 83       	st	Z, r24
	TCNT1 = 0;
    1262:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1266:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    126a:	08 95       	ret

0000126c <ultrasonicSensor>:
}

int ultrasonicSensor() {
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    1270:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1274:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER); //Set TRIGGER pin as output
    1278:	aa e0       	ldi	r26, 0x0A	; 10
    127a:	b1 e0       	ldi	r27, 0x01	; 1
    127c:	8c 91       	ld	r24, X
    127e:	82 60       	ori	r24, 0x02	; 2
    1280:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    1282:	eb e0       	ldi	r30, 0x0B	; 11
    1284:	f1 e0       	ldi	r31, 0x01	; 1
    1286:	80 81       	ld	r24, Z
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128c:	2a e0       	ldi	r18, 0x0A	; 10
    128e:	2a 95       	dec	r18
    1290:	f1 f7       	brne	.-4      	; 0x128e <ultrasonicSensor+0x22>
    1292:	00 c0       	rjmp	.+0      	; 0x1294 <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    1294:	80 81       	ld	r24, Z
    1296:	82 60       	ori	r24, 0x02	; 2
    1298:	80 83       	st	Z, r24
    129a:	8a e1       	ldi	r24, 0x1A	; 26
    129c:	8a 95       	dec	r24
    129e:	f1 f7       	brne	.-4      	; 0x129c <ultrasonicSensor+0x30>
    12a0:	00 c0       	rjmp	.+0      	; 0x12a2 <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    12a2:	80 81       	ld	r24, Z
    12a4:	8d 7f       	andi	r24, 0xFD	; 253
    12a6:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    12a8:	8c 91       	ld	r24, X
    12aa:	8d 7f       	andi	r24, 0xFD	; 253
    12ac:	8c 93       	st	X, r24
	
	TCNT1 = 0; //Reset value of TCNT1
	
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	dc 01       	movw	r26, r24
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    12b4:	e9 e0       	ldi	r30, 0x09	; 9
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	0a c0       	rjmp	.+20     	; 0x12ce <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	a1 1d       	adc	r26, r1
    12be:	b1 1d       	adc	r27, r1
    12c0:	81 34       	cpi	r24, 0x41	; 65
    12c2:	2c e9       	ldi	r18, 0x9C	; 156
    12c4:	92 07       	cpc	r25, r18
    12c6:	a1 05       	cpc	r26, r1
    12c8:	b1 05       	cpc	r27, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <ultrasonicSensor+0x62>
    12cc:	45 c0       	rjmp	.+138    	; 0x1358 <ultrasonicSensor+0xec>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    12ce:	20 81       	ld	r18, Z
    12d0:	21 fd       	sbrc	r18, 1
    12d2:	f3 cf       	rjmp	.-26     	; 0x12ba <ultrasonicSensor+0x4e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    12d4:	e9 e0       	ldi	r30, 0x09	; 9
    12d6:	f1 e0       	ldi	r31, 0x01	; 1
    12d8:	0d c0       	rjmp	.+26     	; 0x12f4 <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    12da:	ac 01       	movw	r20, r24
    12dc:	bd 01       	movw	r22, r26
    12de:	4f 5f       	subi	r20, 0xFF	; 255
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	6f 4f       	sbci	r22, 0xFF	; 255
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	80 34       	cpi	r24, 0x40	; 64
    12e8:	9c 49       	sbci	r25, 0x9C	; 156
    12ea:	a1 05       	cpc	r26, r1
    12ec:	b1 05       	cpc	r27, r1
    12ee:	b9 f1       	breq	.+110    	; 0x135e <ultrasonicSensor+0xf2>
    12f0:	db 01       	movw	r26, r22
    12f2:	ca 01       	movw	r24, r20
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    12f4:	20 81       	ld	r18, Z
    12f6:	21 ff       	sbrs	r18, 1
    12f8:	f0 cf       	rjmp	.-32     	; 0x12da <ultrasonicSensor+0x6e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
    12fa:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    12fe:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    1302:	e9 e0       	ldi	r30, 0x09	; 9
    1304:	f1 e0       	ldi	r31, 0x01	; 1
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    1308:	ac 01       	movw	r20, r24
    130a:	bd 01       	movw	r22, r26
    130c:	4f 5f       	subi	r20, 0xFF	; 255
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	6f 4f       	sbci	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	80 34       	cpi	r24, 0x40	; 64
    1316:	9c 49       	sbci	r25, 0x9C	; 156
    1318:	a1 05       	cpc	r26, r1
    131a:	b1 05       	cpc	r27, r1
    131c:	19 f1       	breq	.+70     	; 0x1364 <ultrasonicSensor+0xf8>
    131e:	db 01       	movw	r26, r22
    1320:	ca 01       	movw	r24, r20
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    1322:	20 81       	ld	r18, Z
    1324:	21 fd       	sbrc	r18, 1
    1326:	f0 cf       	rjmp	.-32     	; 0x1308 <ultrasonicSensor+0x9c>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    1328:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    132c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
    1330:	c9 01       	movw	r24, r18
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	9c 01       	movw	r18, r24
    1338:	ad 01       	movw	r20, r26
    133a:	2c 1b       	sub	r18, r28
    133c:	3d 0b       	sbc	r19, r29
    133e:	41 09       	sbc	r20, r1
    1340:	51 09       	sbc	r21, r1
    1342:	a3 eb       	ldi	r26, 0xB3	; 179
    1344:	b6 e0       	ldi	r27, 0x06	; 6
    1346:	91 d3       	rcall	.+1826   	; 0x1a6a <__muluhisi3>
    1348:	20 e2       	ldi	r18, 0x20	; 32
    134a:	3e e4       	ldi	r19, 0x4E	; 78
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	62 d3       	rcall	.+1732   	; 0x1a16 <__udivmodsi4>
    1352:	c9 01       	movw	r24, r18
    1354:	05 97       	sbiw	r24, 0x05	; 5
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <ultrasonicSensor+0xfc>
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <ultrasonicSensor+0xfc>
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <ultrasonicSensor+0xfc>
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
}
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	08 95       	ret

0000136e <__subsf3>:
    136e:	50 58       	subi	r21, 0x80	; 128

00001370 <__addsf3>:
    1370:	bb 27       	eor	r27, r27
    1372:	aa 27       	eor	r26, r26
    1374:	0e d0       	rcall	.+28     	; 0x1392 <__addsf3x>
    1376:	4d c1       	rjmp	.+666    	; 0x1612 <__fp_round>
    1378:	3e d1       	rcall	.+636    	; 0x15f6 <__fp_pscA>
    137a:	30 f0       	brcs	.+12     	; 0x1388 <__addsf3+0x18>
    137c:	43 d1       	rcall	.+646    	; 0x1604 <__fp_pscB>
    137e:	20 f0       	brcs	.+8      	; 0x1388 <__addsf3+0x18>
    1380:	31 f4       	brne	.+12     	; 0x138e <__addsf3+0x1e>
    1382:	9f 3f       	cpi	r25, 0xFF	; 255
    1384:	11 f4       	brne	.+4      	; 0x138a <__addsf3+0x1a>
    1386:	1e f4       	brtc	.+6      	; 0x138e <__addsf3+0x1e>
    1388:	33 c1       	rjmp	.+614    	; 0x15f0 <__fp_nan>
    138a:	0e f4       	brtc	.+2      	; 0x138e <__addsf3+0x1e>
    138c:	e0 95       	com	r30
    138e:	e7 fb       	bst	r30, 7
    1390:	29 c1       	rjmp	.+594    	; 0x15e4 <__fp_inf>

00001392 <__addsf3x>:
    1392:	e9 2f       	mov	r30, r25
    1394:	4f d1       	rcall	.+670    	; 0x1634 <__fp_split3>
    1396:	80 f3       	brcs	.-32     	; 0x1378 <__addsf3+0x8>
    1398:	ba 17       	cp	r27, r26
    139a:	62 07       	cpc	r22, r18
    139c:	73 07       	cpc	r23, r19
    139e:	84 07       	cpc	r24, r20
    13a0:	95 07       	cpc	r25, r21
    13a2:	18 f0       	brcs	.+6      	; 0x13aa <__addsf3x+0x18>
    13a4:	71 f4       	brne	.+28     	; 0x13c2 <__addsf3x+0x30>
    13a6:	9e f5       	brtc	.+102    	; 0x140e <__addsf3x+0x7c>
    13a8:	67 c1       	rjmp	.+718    	; 0x1678 <__fp_zero>
    13aa:	0e f4       	brtc	.+2      	; 0x13ae <__addsf3x+0x1c>
    13ac:	e0 95       	com	r30
    13ae:	0b 2e       	mov	r0, r27
    13b0:	ba 2f       	mov	r27, r26
    13b2:	a0 2d       	mov	r26, r0
    13b4:	0b 01       	movw	r0, r22
    13b6:	b9 01       	movw	r22, r18
    13b8:	90 01       	movw	r18, r0
    13ba:	0c 01       	movw	r0, r24
    13bc:	ca 01       	movw	r24, r20
    13be:	a0 01       	movw	r20, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	ff 27       	eor	r31, r31
    13c4:	59 1b       	sub	r21, r25
    13c6:	99 f0       	breq	.+38     	; 0x13ee <__addsf3x+0x5c>
    13c8:	59 3f       	cpi	r21, 0xF9	; 249
    13ca:	50 f4       	brcc	.+20     	; 0x13e0 <__addsf3x+0x4e>
    13cc:	50 3e       	cpi	r21, 0xE0	; 224
    13ce:	68 f1       	brcs	.+90     	; 0x142a <__addsf3x+0x98>
    13d0:	1a 16       	cp	r1, r26
    13d2:	f0 40       	sbci	r31, 0x00	; 0
    13d4:	a2 2f       	mov	r26, r18
    13d6:	23 2f       	mov	r18, r19
    13d8:	34 2f       	mov	r19, r20
    13da:	44 27       	eor	r20, r20
    13dc:	58 5f       	subi	r21, 0xF8	; 248
    13de:	f3 cf       	rjmp	.-26     	; 0x13c6 <__addsf3x+0x34>
    13e0:	46 95       	lsr	r20
    13e2:	37 95       	ror	r19
    13e4:	27 95       	ror	r18
    13e6:	a7 95       	ror	r26
    13e8:	f0 40       	sbci	r31, 0x00	; 0
    13ea:	53 95       	inc	r21
    13ec:	c9 f7       	brne	.-14     	; 0x13e0 <__addsf3x+0x4e>
    13ee:	7e f4       	brtc	.+30     	; 0x140e <__addsf3x+0x7c>
    13f0:	1f 16       	cp	r1, r31
    13f2:	ba 0b       	sbc	r27, r26
    13f4:	62 0b       	sbc	r22, r18
    13f6:	73 0b       	sbc	r23, r19
    13f8:	84 0b       	sbc	r24, r20
    13fa:	ba f0       	brmi	.+46     	; 0x142a <__addsf3x+0x98>
    13fc:	91 50       	subi	r25, 0x01	; 1
    13fe:	a1 f0       	breq	.+40     	; 0x1428 <__addsf3x+0x96>
    1400:	ff 0f       	add	r31, r31
    1402:	bb 1f       	adc	r27, r27
    1404:	66 1f       	adc	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	c2 f7       	brpl	.-16     	; 0x13fc <__addsf3x+0x6a>
    140c:	0e c0       	rjmp	.+28     	; 0x142a <__addsf3x+0x98>
    140e:	ba 0f       	add	r27, r26
    1410:	62 1f       	adc	r22, r18
    1412:	73 1f       	adc	r23, r19
    1414:	84 1f       	adc	r24, r20
    1416:	48 f4       	brcc	.+18     	; 0x142a <__addsf3x+0x98>
    1418:	87 95       	ror	r24
    141a:	77 95       	ror	r23
    141c:	67 95       	ror	r22
    141e:	b7 95       	ror	r27
    1420:	f7 95       	ror	r31
    1422:	9e 3f       	cpi	r25, 0xFE	; 254
    1424:	08 f0       	brcs	.+2      	; 0x1428 <__addsf3x+0x96>
    1426:	b3 cf       	rjmp	.-154    	; 0x138e <__addsf3+0x1e>
    1428:	93 95       	inc	r25
    142a:	88 0f       	add	r24, r24
    142c:	08 f0       	brcs	.+2      	; 0x1430 <__addsf3x+0x9e>
    142e:	99 27       	eor	r25, r25
    1430:	ee 0f       	add	r30, r30
    1432:	97 95       	ror	r25
    1434:	87 95       	ror	r24
    1436:	08 95       	ret

00001438 <__divsf3>:
    1438:	0c d0       	rcall	.+24     	; 0x1452 <__divsf3x>
    143a:	eb c0       	rjmp	.+470    	; 0x1612 <__fp_round>
    143c:	e3 d0       	rcall	.+454    	; 0x1604 <__fp_pscB>
    143e:	40 f0       	brcs	.+16     	; 0x1450 <__divsf3+0x18>
    1440:	da d0       	rcall	.+436    	; 0x15f6 <__fp_pscA>
    1442:	30 f0       	brcs	.+12     	; 0x1450 <__divsf3+0x18>
    1444:	21 f4       	brne	.+8      	; 0x144e <__divsf3+0x16>
    1446:	5f 3f       	cpi	r21, 0xFF	; 255
    1448:	19 f0       	breq	.+6      	; 0x1450 <__divsf3+0x18>
    144a:	cc c0       	rjmp	.+408    	; 0x15e4 <__fp_inf>
    144c:	51 11       	cpse	r21, r1
    144e:	15 c1       	rjmp	.+554    	; 0x167a <__fp_szero>
    1450:	cf c0       	rjmp	.+414    	; 0x15f0 <__fp_nan>

00001452 <__divsf3x>:
    1452:	f0 d0       	rcall	.+480    	; 0x1634 <__fp_split3>
    1454:	98 f3       	brcs	.-26     	; 0x143c <__divsf3+0x4>

00001456 <__divsf3_pse>:
    1456:	99 23       	and	r25, r25
    1458:	c9 f3       	breq	.-14     	; 0x144c <__divsf3+0x14>
    145a:	55 23       	and	r21, r21
    145c:	b1 f3       	breq	.-20     	; 0x144a <__divsf3+0x12>
    145e:	95 1b       	sub	r25, r21
    1460:	55 0b       	sbc	r21, r21
    1462:	bb 27       	eor	r27, r27
    1464:	aa 27       	eor	r26, r26
    1466:	62 17       	cp	r22, r18
    1468:	73 07       	cpc	r23, r19
    146a:	84 07       	cpc	r24, r20
    146c:	38 f0       	brcs	.+14     	; 0x147c <__divsf3_pse+0x26>
    146e:	9f 5f       	subi	r25, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	44 1f       	adc	r20, r20
    1478:	aa 1f       	adc	r26, r26
    147a:	a9 f3       	breq	.-22     	; 0x1466 <__divsf3_pse+0x10>
    147c:	33 d0       	rcall	.+102    	; 0x14e4 <__divsf3_pse+0x8e>
    147e:	0e 2e       	mov	r0, r30
    1480:	3a f0       	brmi	.+14     	; 0x1490 <__divsf3_pse+0x3a>
    1482:	e0 e8       	ldi	r30, 0x80	; 128
    1484:	30 d0       	rcall	.+96     	; 0x14e6 <__divsf3_pse+0x90>
    1486:	91 50       	subi	r25, 0x01	; 1
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	e6 95       	lsr	r30
    148c:	00 1c       	adc	r0, r0
    148e:	ca f7       	brpl	.-14     	; 0x1482 <__divsf3_pse+0x2c>
    1490:	29 d0       	rcall	.+82     	; 0x14e4 <__divsf3_pse+0x8e>
    1492:	fe 2f       	mov	r31, r30
    1494:	27 d0       	rcall	.+78     	; 0x14e4 <__divsf3_pse+0x8e>
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	bb 1f       	adc	r27, r27
    149e:	26 17       	cp	r18, r22
    14a0:	37 07       	cpc	r19, r23
    14a2:	48 07       	cpc	r20, r24
    14a4:	ab 07       	cpc	r26, r27
    14a6:	b0 e8       	ldi	r27, 0x80	; 128
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__divsf3_pse+0x56>
    14aa:	bb 0b       	sbc	r27, r27
    14ac:	80 2d       	mov	r24, r0
    14ae:	bf 01       	movw	r22, r30
    14b0:	ff 27       	eor	r31, r31
    14b2:	93 58       	subi	r25, 0x83	; 131
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	2a f0       	brmi	.+10     	; 0x14c2 <__divsf3_pse+0x6c>
    14b8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ba:	51 05       	cpc	r21, r1
    14bc:	68 f0       	brcs	.+26     	; 0x14d8 <__divsf3_pse+0x82>
    14be:	92 c0       	rjmp	.+292    	; 0x15e4 <__fp_inf>
    14c0:	dc c0       	rjmp	.+440    	; 0x167a <__fp_szero>
    14c2:	5f 3f       	cpi	r21, 0xFF	; 255
    14c4:	ec f3       	brlt	.-6      	; 0x14c0 <__divsf3_pse+0x6a>
    14c6:	98 3e       	cpi	r25, 0xE8	; 232
    14c8:	dc f3       	brlt	.-10     	; 0x14c0 <__divsf3_pse+0x6a>
    14ca:	86 95       	lsr	r24
    14cc:	77 95       	ror	r23
    14ce:	67 95       	ror	r22
    14d0:	b7 95       	ror	r27
    14d2:	f7 95       	ror	r31
    14d4:	9f 5f       	subi	r25, 0xFF	; 255
    14d6:	c9 f7       	brne	.-14     	; 0x14ca <__divsf3_pse+0x74>
    14d8:	88 0f       	add	r24, r24
    14da:	91 1d       	adc	r25, r1
    14dc:	96 95       	lsr	r25
    14de:	87 95       	ror	r24
    14e0:	97 f9       	bld	r25, 7
    14e2:	08 95       	ret
    14e4:	e1 e0       	ldi	r30, 0x01	; 1
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	bb 1f       	adc	r27, r27
    14ee:	62 17       	cp	r22, r18
    14f0:	73 07       	cpc	r23, r19
    14f2:	84 07       	cpc	r24, r20
    14f4:	ba 07       	cpc	r27, r26
    14f6:	20 f0       	brcs	.+8      	; 0x1500 <__divsf3_pse+0xaa>
    14f8:	62 1b       	sub	r22, r18
    14fa:	73 0b       	sbc	r23, r19
    14fc:	84 0b       	sbc	r24, r20
    14fe:	ba 0b       	sbc	r27, r26
    1500:	ee 1f       	adc	r30, r30
    1502:	88 f7       	brcc	.-30     	; 0x14e6 <__divsf3_pse+0x90>
    1504:	e0 95       	com	r30
    1506:	08 95       	ret

00001508 <__fixsfsi>:
    1508:	04 d0       	rcall	.+8      	; 0x1512 <__fixunssfsi>
    150a:	68 94       	set
    150c:	b1 11       	cpse	r27, r1
    150e:	b5 c0       	rjmp	.+362    	; 0x167a <__fp_szero>
    1510:	08 95       	ret

00001512 <__fixunssfsi>:
    1512:	98 d0       	rcall	.+304    	; 0x1644 <__fp_splitA>
    1514:	88 f0       	brcs	.+34     	; 0x1538 <__fixunssfsi+0x26>
    1516:	9f 57       	subi	r25, 0x7F	; 127
    1518:	90 f0       	brcs	.+36     	; 0x153e <__fixunssfsi+0x2c>
    151a:	b9 2f       	mov	r27, r25
    151c:	99 27       	eor	r25, r25
    151e:	b7 51       	subi	r27, 0x17	; 23
    1520:	a0 f0       	brcs	.+40     	; 0x154a <__fixunssfsi+0x38>
    1522:	d1 f0       	breq	.+52     	; 0x1558 <__fixunssfsi+0x46>
    1524:	66 0f       	add	r22, r22
    1526:	77 1f       	adc	r23, r23
    1528:	88 1f       	adc	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	1a f0       	brmi	.+6      	; 0x1534 <__fixunssfsi+0x22>
    152e:	ba 95       	dec	r27
    1530:	c9 f7       	brne	.-14     	; 0x1524 <__fixunssfsi+0x12>
    1532:	12 c0       	rjmp	.+36     	; 0x1558 <__fixunssfsi+0x46>
    1534:	b1 30       	cpi	r27, 0x01	; 1
    1536:	81 f0       	breq	.+32     	; 0x1558 <__fixunssfsi+0x46>
    1538:	9f d0       	rcall	.+318    	; 0x1678 <__fp_zero>
    153a:	b1 e0       	ldi	r27, 0x01	; 1
    153c:	08 95       	ret
    153e:	9c c0       	rjmp	.+312    	; 0x1678 <__fp_zero>
    1540:	67 2f       	mov	r22, r23
    1542:	78 2f       	mov	r23, r24
    1544:	88 27       	eor	r24, r24
    1546:	b8 5f       	subi	r27, 0xF8	; 248
    1548:	39 f0       	breq	.+14     	; 0x1558 <__fixunssfsi+0x46>
    154a:	b9 3f       	cpi	r27, 0xF9	; 249
    154c:	cc f3       	brlt	.-14     	; 0x1540 <__fixunssfsi+0x2e>
    154e:	86 95       	lsr	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	b3 95       	inc	r27
    1556:	d9 f7       	brne	.-10     	; 0x154e <__fixunssfsi+0x3c>
    1558:	3e f4       	brtc	.+14     	; 0x1568 <__fixunssfsi+0x56>
    155a:	90 95       	com	r25
    155c:	80 95       	com	r24
    155e:	70 95       	com	r23
    1560:	61 95       	neg	r22
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f 4f       	sbci	r24, 0xFF	; 255
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	08 95       	ret

0000156a <__floatunsisf>:
    156a:	e8 94       	clt
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <__floatsisf+0x12>

0000156e <__floatsisf>:
    156e:	97 fb       	bst	r25, 7
    1570:	3e f4       	brtc	.+14     	; 0x1580 <__floatsisf+0x12>
    1572:	90 95       	com	r25
    1574:	80 95       	com	r24
    1576:	70 95       	com	r23
    1578:	61 95       	neg	r22
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	99 23       	and	r25, r25
    1582:	a9 f0       	breq	.+42     	; 0x15ae <__floatsisf+0x40>
    1584:	f9 2f       	mov	r31, r25
    1586:	96 e9       	ldi	r25, 0x96	; 150
    1588:	bb 27       	eor	r27, r27
    158a:	93 95       	inc	r25
    158c:	f6 95       	lsr	r31
    158e:	87 95       	ror	r24
    1590:	77 95       	ror	r23
    1592:	67 95       	ror	r22
    1594:	b7 95       	ror	r27
    1596:	f1 11       	cpse	r31, r1
    1598:	f8 cf       	rjmp	.-16     	; 0x158a <__floatsisf+0x1c>
    159a:	fa f4       	brpl	.+62     	; 0x15da <__floatsisf+0x6c>
    159c:	bb 0f       	add	r27, r27
    159e:	11 f4       	brne	.+4      	; 0x15a4 <__floatsisf+0x36>
    15a0:	60 ff       	sbrs	r22, 0
    15a2:	1b c0       	rjmp	.+54     	; 0x15da <__floatsisf+0x6c>
    15a4:	6f 5f       	subi	r22, 0xFF	; 255
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	16 c0       	rjmp	.+44     	; 0x15da <__floatsisf+0x6c>
    15ae:	88 23       	and	r24, r24
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <__floatsisf+0x48>
    15b2:	96 e9       	ldi	r25, 0x96	; 150
    15b4:	11 c0       	rjmp	.+34     	; 0x15d8 <__floatsisf+0x6a>
    15b6:	77 23       	and	r23, r23
    15b8:	21 f0       	breq	.+8      	; 0x15c2 <__floatsisf+0x54>
    15ba:	9e e8       	ldi	r25, 0x8E	; 142
    15bc:	87 2f       	mov	r24, r23
    15be:	76 2f       	mov	r23, r22
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <__floatsisf+0x5e>
    15c2:	66 23       	and	r22, r22
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <__floatsisf+0x74>
    15c6:	96 e8       	ldi	r25, 0x86	; 134
    15c8:	86 2f       	mov	r24, r22
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	2a f0       	brmi	.+10     	; 0x15da <__floatsisf+0x6c>
    15d0:	9a 95       	dec	r25
    15d2:	66 0f       	add	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 1f       	adc	r24, r24
    15d8:	da f7       	brpl	.-10     	; 0x15d0 <__floatsisf+0x62>
    15da:	88 0f       	add	r24, r24
    15dc:	96 95       	lsr	r25
    15de:	87 95       	ror	r24
    15e0:	97 f9       	bld	r25, 7
    15e2:	08 95       	ret

000015e4 <__fp_inf>:
    15e4:	97 f9       	bld	r25, 7
    15e6:	9f 67       	ori	r25, 0x7F	; 127
    15e8:	80 e8       	ldi	r24, 0x80	; 128
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	08 95       	ret

000015f0 <__fp_nan>:
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	80 ec       	ldi	r24, 0xC0	; 192
    15f4:	08 95       	ret

000015f6 <__fp_pscA>:
    15f6:	00 24       	eor	r0, r0
    15f8:	0a 94       	dec	r0
    15fa:	16 16       	cp	r1, r22
    15fc:	17 06       	cpc	r1, r23
    15fe:	18 06       	cpc	r1, r24
    1600:	09 06       	cpc	r0, r25
    1602:	08 95       	ret

00001604 <__fp_pscB>:
    1604:	00 24       	eor	r0, r0
    1606:	0a 94       	dec	r0
    1608:	12 16       	cp	r1, r18
    160a:	13 06       	cpc	r1, r19
    160c:	14 06       	cpc	r1, r20
    160e:	05 06       	cpc	r0, r21
    1610:	08 95       	ret

00001612 <__fp_round>:
    1612:	09 2e       	mov	r0, r25
    1614:	03 94       	inc	r0
    1616:	00 0c       	add	r0, r0
    1618:	11 f4       	brne	.+4      	; 0x161e <__fp_round+0xc>
    161a:	88 23       	and	r24, r24
    161c:	52 f0       	brmi	.+20     	; 0x1632 <__fp_round+0x20>
    161e:	bb 0f       	add	r27, r27
    1620:	40 f4       	brcc	.+16     	; 0x1632 <__fp_round+0x20>
    1622:	bf 2b       	or	r27, r31
    1624:	11 f4       	brne	.+4      	; 0x162a <__fp_round+0x18>
    1626:	60 ff       	sbrs	r22, 0
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <__fp_round+0x20>
    162a:	6f 5f       	subi	r22, 0xFF	; 255
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	8f 4f       	sbci	r24, 0xFF	; 255
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	08 95       	ret

00001634 <__fp_split3>:
    1634:	57 fd       	sbrc	r21, 7
    1636:	90 58       	subi	r25, 0x80	; 128
    1638:	44 0f       	add	r20, r20
    163a:	55 1f       	adc	r21, r21
    163c:	59 f0       	breq	.+22     	; 0x1654 <__fp_splitA+0x10>
    163e:	5f 3f       	cpi	r21, 0xFF	; 255
    1640:	71 f0       	breq	.+28     	; 0x165e <__fp_splitA+0x1a>
    1642:	47 95       	ror	r20

00001644 <__fp_splitA>:
    1644:	88 0f       	add	r24, r24
    1646:	97 fb       	bst	r25, 7
    1648:	99 1f       	adc	r25, r25
    164a:	61 f0       	breq	.+24     	; 0x1664 <__fp_splitA+0x20>
    164c:	9f 3f       	cpi	r25, 0xFF	; 255
    164e:	79 f0       	breq	.+30     	; 0x166e <__fp_splitA+0x2a>
    1650:	87 95       	ror	r24
    1652:	08 95       	ret
    1654:	12 16       	cp	r1, r18
    1656:	13 06       	cpc	r1, r19
    1658:	14 06       	cpc	r1, r20
    165a:	55 1f       	adc	r21, r21
    165c:	f2 cf       	rjmp	.-28     	; 0x1642 <__fp_split3+0xe>
    165e:	46 95       	lsr	r20
    1660:	f1 df       	rcall	.-30     	; 0x1644 <__fp_splitA>
    1662:	08 c0       	rjmp	.+16     	; 0x1674 <__fp_splitA+0x30>
    1664:	16 16       	cp	r1, r22
    1666:	17 06       	cpc	r1, r23
    1668:	18 06       	cpc	r1, r24
    166a:	99 1f       	adc	r25, r25
    166c:	f1 cf       	rjmp	.-30     	; 0x1650 <__fp_splitA+0xc>
    166e:	86 95       	lsr	r24
    1670:	71 05       	cpc	r23, r1
    1672:	61 05       	cpc	r22, r1
    1674:	08 94       	sec
    1676:	08 95       	ret

00001678 <__fp_zero>:
    1678:	e8 94       	clt

0000167a <__fp_szero>:
    167a:	bb 27       	eor	r27, r27
    167c:	66 27       	eor	r22, r22
    167e:	77 27       	eor	r23, r23
    1680:	cb 01       	movw	r24, r22
    1682:	97 f9       	bld	r25, 7
    1684:	08 95       	ret

00001686 <__mulsf3>:
    1686:	0b d0       	rcall	.+22     	; 0x169e <__mulsf3x>
    1688:	c4 cf       	rjmp	.-120    	; 0x1612 <__fp_round>
    168a:	b5 df       	rcall	.-150    	; 0x15f6 <__fp_pscA>
    168c:	28 f0       	brcs	.+10     	; 0x1698 <__mulsf3+0x12>
    168e:	ba df       	rcall	.-140    	; 0x1604 <__fp_pscB>
    1690:	18 f0       	brcs	.+6      	; 0x1698 <__mulsf3+0x12>
    1692:	95 23       	and	r25, r21
    1694:	09 f0       	breq	.+2      	; 0x1698 <__mulsf3+0x12>
    1696:	a6 cf       	rjmp	.-180    	; 0x15e4 <__fp_inf>
    1698:	ab cf       	rjmp	.-170    	; 0x15f0 <__fp_nan>
    169a:	11 24       	eor	r1, r1
    169c:	ee cf       	rjmp	.-36     	; 0x167a <__fp_szero>

0000169e <__mulsf3x>:
    169e:	ca df       	rcall	.-108    	; 0x1634 <__fp_split3>
    16a0:	a0 f3       	brcs	.-24     	; 0x168a <__mulsf3+0x4>

000016a2 <__mulsf3_pse>:
    16a2:	95 9f       	mul	r25, r21
    16a4:	d1 f3       	breq	.-12     	; 0x169a <__mulsf3+0x14>
    16a6:	95 0f       	add	r25, r21
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	55 1f       	adc	r21, r21
    16ac:	62 9f       	mul	r22, r18
    16ae:	f0 01       	movw	r30, r0
    16b0:	72 9f       	mul	r23, r18
    16b2:	bb 27       	eor	r27, r27
    16b4:	f0 0d       	add	r31, r0
    16b6:	b1 1d       	adc	r27, r1
    16b8:	63 9f       	mul	r22, r19
    16ba:	aa 27       	eor	r26, r26
    16bc:	f0 0d       	add	r31, r0
    16be:	b1 1d       	adc	r27, r1
    16c0:	aa 1f       	adc	r26, r26
    16c2:	64 9f       	mul	r22, r20
    16c4:	66 27       	eor	r22, r22
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	66 1f       	adc	r22, r22
    16cc:	82 9f       	mul	r24, r18
    16ce:	22 27       	eor	r18, r18
    16d0:	b0 0d       	add	r27, r0
    16d2:	a1 1d       	adc	r26, r1
    16d4:	62 1f       	adc	r22, r18
    16d6:	73 9f       	mul	r23, r19
    16d8:	b0 0d       	add	r27, r0
    16da:	a1 1d       	adc	r26, r1
    16dc:	62 1f       	adc	r22, r18
    16de:	83 9f       	mul	r24, r19
    16e0:	a0 0d       	add	r26, r0
    16e2:	61 1d       	adc	r22, r1
    16e4:	22 1f       	adc	r18, r18
    16e6:	74 9f       	mul	r23, r20
    16e8:	33 27       	eor	r19, r19
    16ea:	a0 0d       	add	r26, r0
    16ec:	61 1d       	adc	r22, r1
    16ee:	23 1f       	adc	r18, r19
    16f0:	84 9f       	mul	r24, r20
    16f2:	60 0d       	add	r22, r0
    16f4:	21 1d       	adc	r18, r1
    16f6:	82 2f       	mov	r24, r18
    16f8:	76 2f       	mov	r23, r22
    16fa:	6a 2f       	mov	r22, r26
    16fc:	11 24       	eor	r1, r1
    16fe:	9f 57       	subi	r25, 0x7F	; 127
    1700:	50 40       	sbci	r21, 0x00	; 0
    1702:	8a f0       	brmi	.+34     	; 0x1726 <__mulsf3_pse+0x84>
    1704:	e1 f0       	breq	.+56     	; 0x173e <__mulsf3_pse+0x9c>
    1706:	88 23       	and	r24, r24
    1708:	4a f0       	brmi	.+18     	; 0x171c <__mulsf3_pse+0x7a>
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	bb 1f       	adc	r27, r27
    1710:	66 1f       	adc	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	88 1f       	adc	r24, r24
    1716:	91 50       	subi	r25, 0x01	; 1
    1718:	50 40       	sbci	r21, 0x00	; 0
    171a:	a9 f7       	brne	.-22     	; 0x1706 <__mulsf3_pse+0x64>
    171c:	9e 3f       	cpi	r25, 0xFE	; 254
    171e:	51 05       	cpc	r21, r1
    1720:	70 f0       	brcs	.+28     	; 0x173e <__mulsf3_pse+0x9c>
    1722:	60 cf       	rjmp	.-320    	; 0x15e4 <__fp_inf>
    1724:	aa cf       	rjmp	.-172    	; 0x167a <__fp_szero>
    1726:	5f 3f       	cpi	r21, 0xFF	; 255
    1728:	ec f3       	brlt	.-6      	; 0x1724 <__mulsf3_pse+0x82>
    172a:	98 3e       	cpi	r25, 0xE8	; 232
    172c:	dc f3       	brlt	.-10     	; 0x1724 <__mulsf3_pse+0x82>
    172e:	86 95       	lsr	r24
    1730:	77 95       	ror	r23
    1732:	67 95       	ror	r22
    1734:	b7 95       	ror	r27
    1736:	f7 95       	ror	r31
    1738:	e7 95       	ror	r30
    173a:	9f 5f       	subi	r25, 0xFF	; 255
    173c:	c1 f7       	brne	.-16     	; 0x172e <__mulsf3_pse+0x8c>
    173e:	fe 2b       	or	r31, r30
    1740:	88 0f       	add	r24, r24
    1742:	91 1d       	adc	r25, r1
    1744:	96 95       	lsr	r25
    1746:	87 95       	ror	r24
    1748:	97 f9       	bld	r25, 7
    174a:	08 95       	ret

0000174c <pow>:
    174c:	fa 01       	movw	r30, r20
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	30 96       	adiw	r30, 0x00	; 0
    1754:	21 05       	cpc	r18, r1
    1756:	31 05       	cpc	r19, r1
    1758:	99 f1       	breq	.+102    	; 0x17c0 <pow+0x74>
    175a:	61 15       	cp	r22, r1
    175c:	71 05       	cpc	r23, r1
    175e:	61 f4       	brne	.+24     	; 0x1778 <pow+0x2c>
    1760:	80 38       	cpi	r24, 0x80	; 128
    1762:	bf e3       	ldi	r27, 0x3F	; 63
    1764:	9b 07       	cpc	r25, r27
    1766:	49 f1       	breq	.+82     	; 0x17ba <pow+0x6e>
    1768:	68 94       	set
    176a:	90 38       	cpi	r25, 0x80	; 128
    176c:	81 05       	cpc	r24, r1
    176e:	61 f0       	breq	.+24     	; 0x1788 <pow+0x3c>
    1770:	80 38       	cpi	r24, 0x80	; 128
    1772:	bf ef       	ldi	r27, 0xFF	; 255
    1774:	9b 07       	cpc	r25, r27
    1776:	41 f0       	breq	.+16     	; 0x1788 <pow+0x3c>
    1778:	99 23       	and	r25, r25
    177a:	42 f5       	brpl	.+80     	; 0x17cc <pow+0x80>
    177c:	ff 3f       	cpi	r31, 0xFF	; 255
    177e:	e1 05       	cpc	r30, r1
    1780:	31 05       	cpc	r19, r1
    1782:	21 05       	cpc	r18, r1
    1784:	11 f1       	breq	.+68     	; 0x17ca <pow+0x7e>
    1786:	e8 94       	clt
    1788:	08 94       	sec
    178a:	e7 95       	ror	r30
    178c:	d9 01       	movw	r26, r18
    178e:	aa 23       	and	r26, r26
    1790:	29 f4       	brne	.+10     	; 0x179c <pow+0x50>
    1792:	ab 2f       	mov	r26, r27
    1794:	be 2f       	mov	r27, r30
    1796:	f8 5f       	subi	r31, 0xF8	; 248
    1798:	d0 f3       	brcs	.-12     	; 0x178e <pow+0x42>
    179a:	10 c0       	rjmp	.+32     	; 0x17bc <pow+0x70>
    179c:	ff 5f       	subi	r31, 0xFF	; 255
    179e:	70 f4       	brcc	.+28     	; 0x17bc <pow+0x70>
    17a0:	a6 95       	lsr	r26
    17a2:	e0 f7       	brcc	.-8      	; 0x179c <pow+0x50>
    17a4:	f7 39       	cpi	r31, 0x97	; 151
    17a6:	50 f0       	brcs	.+20     	; 0x17bc <pow+0x70>
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <pow+0x64>
    17aa:	ff 3a       	cpi	r31, 0xAF	; 175
    17ac:	38 f4       	brcc	.+14     	; 0x17bc <pow+0x70>
    17ae:	9f 77       	andi	r25, 0x7F	; 127
    17b0:	9f 93       	push	r25
    17b2:	0c d0       	rcall	.+24     	; 0x17cc <pow+0x80>
    17b4:	0f 90       	pop	r0
    17b6:	07 fc       	sbrc	r0, 7
    17b8:	90 58       	subi	r25, 0x80	; 128
    17ba:	08 95       	ret
    17bc:	3e f0       	brts	.+14     	; 0x17cc <pow+0x80>
    17be:	18 cf       	rjmp	.-464    	; 0x15f0 <__fp_nan>
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	80 e8       	ldi	r24, 0x80	; 128
    17c6:	9f e3       	ldi	r25, 0x3F	; 63
    17c8:	08 95       	ret
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	9f 77       	andi	r25, 0x7F	; 127
    17ce:	5f 93       	push	r21
    17d0:	4f 93       	push	r20
    17d2:	3f 93       	push	r19
    17d4:	2f 93       	push	r18
    17d6:	9e d0       	rcall	.+316    	; 0x1914 <log>
    17d8:	2f 91       	pop	r18
    17da:	3f 91       	pop	r19
    17dc:	4f 91       	pop	r20
    17de:	5f 91       	pop	r21
    17e0:	52 df       	rcall	.-348    	; 0x1686 <__mulsf3>
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <exp>
    17e4:	19 f4       	brne	.+6      	; 0x17ec <pow+0xa0>
    17e6:	0e f0       	brts	.+2      	; 0x17ea <pow+0x9e>
    17e8:	fd ce       	rjmp	.-518    	; 0x15e4 <__fp_inf>
    17ea:	46 cf       	rjmp	.-372    	; 0x1678 <__fp_zero>
    17ec:	01 cf       	rjmp	.-510    	; 0x15f0 <__fp_nan>

000017ee <exp>:
    17ee:	2a df       	rcall	.-428    	; 0x1644 <__fp_splitA>
    17f0:	c8 f3       	brcs	.-14     	; 0x17e4 <pow+0x98>
    17f2:	96 38       	cpi	r25, 0x86	; 134
    17f4:	c0 f7       	brcc	.-16     	; 0x17e6 <pow+0x9a>
    17f6:	07 f8       	bld	r0, 7
    17f8:	0f 92       	push	r0
    17fa:	e8 94       	clt
    17fc:	2b e3       	ldi	r18, 0x3B	; 59
    17fe:	3a ea       	ldi	r19, 0xAA	; 170
    1800:	48 eb       	ldi	r20, 0xB8	; 184
    1802:	5f e7       	ldi	r21, 0x7F	; 127
    1804:	4e df       	rcall	.-356    	; 0x16a2 <__mulsf3_pse>
    1806:	0f 92       	push	r0
    1808:	0f 92       	push	r0
    180a:	0f 92       	push	r0
    180c:	4d b7       	in	r20, 0x3d	; 61
    180e:	5e b7       	in	r21, 0x3e	; 62
    1810:	0f 92       	push	r0
    1812:	c0 d0       	rcall	.+384    	; 0x1994 <modf>
    1814:	e8 e1       	ldi	r30, 0x18	; 24
    1816:	f1 e0       	ldi	r31, 0x01	; 1
    1818:	16 d0       	rcall	.+44     	; 0x1846 <__fp_powser>
    181a:	4f 91       	pop	r20
    181c:	5f 91       	pop	r21
    181e:	ef 91       	pop	r30
    1820:	ff 91       	pop	r31
    1822:	e5 95       	asr	r30
    1824:	ee 1f       	adc	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	49 f0       	breq	.+18     	; 0x183c <exp+0x4e>
    182a:	fe 57       	subi	r31, 0x7E	; 126
    182c:	e0 68       	ori	r30, 0x80	; 128
    182e:	44 27       	eor	r20, r20
    1830:	ee 0f       	add	r30, r30
    1832:	44 1f       	adc	r20, r20
    1834:	fa 95       	dec	r31
    1836:	e1 f7       	brne	.-8      	; 0x1830 <exp+0x42>
    1838:	41 95       	neg	r20
    183a:	55 0b       	sbc	r21, r21
    183c:	32 d0       	rcall	.+100    	; 0x18a2 <ldexp>
    183e:	0f 90       	pop	r0
    1840:	07 fe       	sbrs	r0, 7
    1842:	26 c0       	rjmp	.+76     	; 0x1890 <inverse>
    1844:	08 95       	ret

00001846 <__fp_powser>:
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	1f 93       	push	r17
    184c:	0f 93       	push	r16
    184e:	ff 92       	push	r15
    1850:	ef 92       	push	r14
    1852:	df 92       	push	r13
    1854:	7b 01       	movw	r14, r22
    1856:	8c 01       	movw	r16, r24
    1858:	68 94       	set
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <__fp_powser+0x20>
    185c:	da 2e       	mov	r13, r26
    185e:	ef 01       	movw	r28, r30
    1860:	1e df       	rcall	.-452    	; 0x169e <__mulsf3x>
    1862:	fe 01       	movw	r30, r28
    1864:	e8 94       	clt
    1866:	a5 91       	lpm	r26, Z+
    1868:	25 91       	lpm	r18, Z+
    186a:	35 91       	lpm	r19, Z+
    186c:	45 91       	lpm	r20, Z+
    186e:	55 91       	lpm	r21, Z+
    1870:	ae f3       	brts	.-22     	; 0x185c <__fp_powser+0x16>
    1872:	ef 01       	movw	r28, r30
    1874:	8e dd       	rcall	.-1252   	; 0x1392 <__addsf3x>
    1876:	fe 01       	movw	r30, r28
    1878:	97 01       	movw	r18, r14
    187a:	a8 01       	movw	r20, r16
    187c:	da 94       	dec	r13
    187e:	79 f7       	brne	.-34     	; 0x185e <__fp_powser+0x18>
    1880:	df 90       	pop	r13
    1882:	ef 90       	pop	r14
    1884:	ff 90       	pop	r15
    1886:	0f 91       	pop	r16
    1888:	1f 91       	pop	r17
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <inverse>:
    1890:	9b 01       	movw	r18, r22
    1892:	ac 01       	movw	r20, r24
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	80 e8       	ldi	r24, 0x80	; 128
    189a:	9f e3       	ldi	r25, 0x3F	; 63
    189c:	cd cd       	rjmp	.-1126   	; 0x1438 <__divsf3>
    189e:	a2 ce       	rjmp	.-700    	; 0x15e4 <__fp_inf>
    18a0:	ac c0       	rjmp	.+344    	; 0x19fa <__fp_mpack>

000018a2 <ldexp>:
    18a2:	d0 de       	rcall	.-608    	; 0x1644 <__fp_splitA>
    18a4:	e8 f3       	brcs	.-6      	; 0x18a0 <inverse+0x10>
    18a6:	99 23       	and	r25, r25
    18a8:	d9 f3       	breq	.-10     	; 0x18a0 <inverse+0x10>
    18aa:	94 0f       	add	r25, r20
    18ac:	51 1d       	adc	r21, r1
    18ae:	bb f3       	brvs	.-18     	; 0x189e <inverse+0xe>
    18b0:	91 50       	subi	r25, 0x01	; 1
    18b2:	50 40       	sbci	r21, 0x00	; 0
    18b4:	94 f0       	brlt	.+36     	; 0x18da <ldexp+0x38>
    18b6:	59 f0       	breq	.+22     	; 0x18ce <ldexp+0x2c>
    18b8:	88 23       	and	r24, r24
    18ba:	32 f0       	brmi	.+12     	; 0x18c8 <ldexp+0x26>
    18bc:	66 0f       	add	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	88 1f       	adc	r24, r24
    18c2:	91 50       	subi	r25, 0x01	; 1
    18c4:	50 40       	sbci	r21, 0x00	; 0
    18c6:	c1 f7       	brne	.-16     	; 0x18b8 <ldexp+0x16>
    18c8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ca:	51 05       	cpc	r21, r1
    18cc:	44 f7       	brge	.-48     	; 0x189e <inverse+0xe>
    18ce:	88 0f       	add	r24, r24
    18d0:	91 1d       	adc	r25, r1
    18d2:	96 95       	lsr	r25
    18d4:	87 95       	ror	r24
    18d6:	97 f9       	bld	r25, 7
    18d8:	08 95       	ret
    18da:	5f 3f       	cpi	r21, 0xFF	; 255
    18dc:	ac f0       	brlt	.+42     	; 0x1908 <ldexp+0x66>
    18de:	98 3e       	cpi	r25, 0xE8	; 232
    18e0:	9c f0       	brlt	.+38     	; 0x1908 <ldexp+0x66>
    18e2:	bb 27       	eor	r27, r27
    18e4:	86 95       	lsr	r24
    18e6:	77 95       	ror	r23
    18e8:	67 95       	ror	r22
    18ea:	b7 95       	ror	r27
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <ldexp+0x4e>
    18ee:	b1 60       	ori	r27, 0x01	; 1
    18f0:	93 95       	inc	r25
    18f2:	c1 f7       	brne	.-16     	; 0x18e4 <ldexp+0x42>
    18f4:	bb 0f       	add	r27, r27
    18f6:	58 f7       	brcc	.-42     	; 0x18ce <ldexp+0x2c>
    18f8:	11 f4       	brne	.+4      	; 0x18fe <ldexp+0x5c>
    18fa:	60 ff       	sbrs	r22, 0
    18fc:	e8 cf       	rjmp	.-48     	; 0x18ce <ldexp+0x2c>
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	e3 cf       	rjmp	.-58     	; 0x18ce <ldexp+0x2c>
    1908:	b8 ce       	rjmp	.-656    	; 0x167a <__fp_szero>
    190a:	0e f0       	brts	.+2      	; 0x190e <ldexp+0x6c>
    190c:	76 c0       	rjmp	.+236    	; 0x19fa <__fp_mpack>
    190e:	70 ce       	rjmp	.-800    	; 0x15f0 <__fp_nan>
    1910:	68 94       	set
    1912:	68 ce       	rjmp	.-816    	; 0x15e4 <__fp_inf>

00001914 <log>:
    1914:	97 de       	rcall	.-722    	; 0x1644 <__fp_splitA>
    1916:	c8 f3       	brcs	.-14     	; 0x190a <ldexp+0x68>
    1918:	99 23       	and	r25, r25
    191a:	d1 f3       	breq	.-12     	; 0x1910 <ldexp+0x6e>
    191c:	c6 f3       	brts	.-16     	; 0x190e <ldexp+0x6c>
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	1f 93       	push	r17
    1924:	0f 93       	push	r16
    1926:	ff 92       	push	r15
    1928:	c9 2f       	mov	r28, r25
    192a:	dd 27       	eor	r29, r29
    192c:	88 23       	and	r24, r24
    192e:	2a f0       	brmi	.+10     	; 0x193a <log+0x26>
    1930:	21 97       	sbiw	r28, 0x01	; 1
    1932:	66 0f       	add	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	da f7       	brpl	.-10     	; 0x1930 <log+0x1c>
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f eb       	ldi	r21, 0xBF	; 191
    1942:	9f e3       	ldi	r25, 0x3F	; 63
    1944:	88 39       	cpi	r24, 0x98	; 152
    1946:	20 f0       	brcs	.+8      	; 0x1950 <log+0x3c>
    1948:	80 3e       	cpi	r24, 0xE0	; 224
    194a:	30 f0       	brcs	.+12     	; 0x1958 <log+0x44>
    194c:	21 96       	adiw	r28, 0x01	; 1
    194e:	8f 77       	andi	r24, 0x7F	; 127
    1950:	0f dd       	rcall	.-1506   	; 0x1370 <__addsf3>
    1952:	e0 e4       	ldi	r30, 0x40	; 64
    1954:	f1 e0       	ldi	r31, 0x01	; 1
    1956:	03 c0       	rjmp	.+6      	; 0x195e <log+0x4a>
    1958:	0b dd       	rcall	.-1514   	; 0x1370 <__addsf3>
    195a:	ed e6       	ldi	r30, 0x6D	; 109
    195c:	f1 e0       	ldi	r31, 0x01	; 1
    195e:	73 df       	rcall	.-282    	; 0x1846 <__fp_powser>
    1960:	8b 01       	movw	r16, r22
    1962:	be 01       	movw	r22, r28
    1964:	ec 01       	movw	r28, r24
    1966:	fb 2e       	mov	r15, r27
    1968:	6f 57       	subi	r22, 0x7F	; 127
    196a:	71 09       	sbc	r23, r1
    196c:	75 95       	asr	r23
    196e:	77 1f       	adc	r23, r23
    1970:	88 0b       	sbc	r24, r24
    1972:	99 0b       	sbc	r25, r25
    1974:	fc dd       	rcall	.-1032   	; 0x156e <__floatsisf>
    1976:	28 e1       	ldi	r18, 0x18	; 24
    1978:	32 e7       	ldi	r19, 0x72	; 114
    197a:	41 e3       	ldi	r20, 0x31	; 49
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	8f de       	rcall	.-738    	; 0x169e <__mulsf3x>
    1980:	af 2d       	mov	r26, r15
    1982:	98 01       	movw	r18, r16
    1984:	ae 01       	movw	r20, r28
    1986:	ff 90       	pop	r15
    1988:	0f 91       	pop	r16
    198a:	1f 91       	pop	r17
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	00 dd       	rcall	.-1536   	; 0x1392 <__addsf3x>
    1992:	3f ce       	rjmp	.-898    	; 0x1612 <__fp_round>

00001994 <modf>:
    1994:	fa 01       	movw	r30, r20
    1996:	dc 01       	movw	r26, r24
    1998:	aa 0f       	add	r26, r26
    199a:	bb 1f       	adc	r27, r27
    199c:	9b 01       	movw	r18, r22
    199e:	ac 01       	movw	r20, r24
    19a0:	bf 57       	subi	r27, 0x7F	; 127
    19a2:	28 f4       	brcc	.+10     	; 0x19ae <modf+0x1a>
    19a4:	22 27       	eor	r18, r18
    19a6:	33 27       	eor	r19, r19
    19a8:	44 27       	eor	r20, r20
    19aa:	50 78       	andi	r21, 0x80	; 128
    19ac:	1f c0       	rjmp	.+62     	; 0x19ec <modf+0x58>
    19ae:	b7 51       	subi	r27, 0x17	; 23
    19b0:	88 f4       	brcc	.+34     	; 0x19d4 <modf+0x40>
    19b2:	ab 2f       	mov	r26, r27
    19b4:	00 24       	eor	r0, r0
    19b6:	46 95       	lsr	r20
    19b8:	37 95       	ror	r19
    19ba:	27 95       	ror	r18
    19bc:	01 1c       	adc	r0, r1
    19be:	a3 95       	inc	r26
    19c0:	d2 f3       	brmi	.-12     	; 0x19b6 <modf+0x22>
    19c2:	00 20       	and	r0, r0
    19c4:	69 f0       	breq	.+26     	; 0x19e0 <modf+0x4c>
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	44 1f       	adc	r20, r20
    19cc:	b3 95       	inc	r27
    19ce:	da f3       	brmi	.-10     	; 0x19c6 <modf+0x32>
    19d0:	0d d0       	rcall	.+26     	; 0x19ec <modf+0x58>
    19d2:	cd cc       	rjmp	.-1638   	; 0x136e <__subsf3>
    19d4:	61 30       	cpi	r22, 0x01	; 1
    19d6:	71 05       	cpc	r23, r1
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	8a 07       	cpc	r24, r26
    19dc:	b9 46       	sbci	r27, 0x69	; 105
    19de:	30 f4       	brcc	.+12     	; 0x19ec <modf+0x58>
    19e0:	9b 01       	movw	r18, r22
    19e2:	ac 01       	movw	r20, r24
    19e4:	66 27       	eor	r22, r22
    19e6:	77 27       	eor	r23, r23
    19e8:	88 27       	eor	r24, r24
    19ea:	90 78       	andi	r25, 0x80	; 128
    19ec:	30 96       	adiw	r30, 0x00	; 0
    19ee:	21 f0       	breq	.+8      	; 0x19f8 <modf+0x64>
    19f0:	20 83       	st	Z, r18
    19f2:	31 83       	std	Z+1, r19	; 0x01
    19f4:	42 83       	std	Z+2, r20	; 0x02
    19f6:	53 83       	std	Z+3, r21	; 0x03
    19f8:	08 95       	ret

000019fa <__fp_mpack>:
    19fa:	9f 3f       	cpi	r25, 0xFF	; 255
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <__fp_mpack_finite+0xc>

000019fe <__fp_mpack_finite>:
    19fe:	91 50       	subi	r25, 0x01	; 1
    1a00:	20 f4       	brcc	.+8      	; 0x1a0a <__fp_mpack_finite+0xc>
    1a02:	87 95       	ror	r24
    1a04:	77 95       	ror	r23
    1a06:	67 95       	ror	r22
    1a08:	b7 95       	ror	r27
    1a0a:	88 0f       	add	r24, r24
    1a0c:	91 1d       	adc	r25, r1
    1a0e:	96 95       	lsr	r25
    1a10:	87 95       	ror	r24
    1a12:	97 f9       	bld	r25, 7
    1a14:	08 95       	ret

00001a16 <__udivmodsi4>:
    1a16:	a1 e2       	ldi	r26, 0x21	; 33
    1a18:	1a 2e       	mov	r1, r26
    1a1a:	aa 1b       	sub	r26, r26
    1a1c:	bb 1b       	sub	r27, r27
    1a1e:	fd 01       	movw	r30, r26
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <__udivmodsi4_ep>

00001a22 <__udivmodsi4_loop>:
    1a22:	aa 1f       	adc	r26, r26
    1a24:	bb 1f       	adc	r27, r27
    1a26:	ee 1f       	adc	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	a2 17       	cp	r26, r18
    1a2c:	b3 07       	cpc	r27, r19
    1a2e:	e4 07       	cpc	r30, r20
    1a30:	f5 07       	cpc	r31, r21
    1a32:	20 f0       	brcs	.+8      	; 0x1a3c <__udivmodsi4_ep>
    1a34:	a2 1b       	sub	r26, r18
    1a36:	b3 0b       	sbc	r27, r19
    1a38:	e4 0b       	sbc	r30, r20
    1a3a:	f5 0b       	sbc	r31, r21

00001a3c <__udivmodsi4_ep>:
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	1a 94       	dec	r1
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <__udivmodsi4_loop>
    1a48:	60 95       	com	r22
    1a4a:	70 95       	com	r23
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	9b 01       	movw	r18, r22
    1a52:	ac 01       	movw	r20, r24
    1a54:	bd 01       	movw	r22, r26
    1a56:	cf 01       	movw	r24, r30
    1a58:	08 95       	ret

00001a5a <__tablejump2__>:
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	88 1f       	adc	r24, r24
    1a60:	8b bf       	out	0x3b, r24	; 59
    1a62:	07 90       	elpm	r0, Z+
    1a64:	f6 91       	elpm	r31, Z
    1a66:	e0 2d       	mov	r30, r0
    1a68:	19 94       	eijmp

00001a6a <__muluhisi3>:
    1a6a:	c5 d0       	rcall	.+394    	; 0x1bf6 <__umulhisi3>
    1a6c:	a5 9f       	mul	r26, r21
    1a6e:	90 0d       	add	r25, r0
    1a70:	b4 9f       	mul	r27, r20
    1a72:	90 0d       	add	r25, r0
    1a74:	a4 9f       	mul	r26, r20
    1a76:	80 0d       	add	r24, r0
    1a78:	91 1d       	adc	r25, r1
    1a7a:	11 24       	eor	r1, r1
    1a7c:	08 95       	ret

00001a7e <__umoddi3>:
    1a7e:	68 94       	set
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <__udivdi3_umoddi3>

00001a82 <__udivdi3>:
    1a82:	e8 94       	clt

00001a84 <__udivdi3_umoddi3>:
    1a84:	8f 92       	push	r8
    1a86:	9f 92       	push	r9
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	05 d0       	rcall	.+10     	; 0x1a98 <__udivmod64>
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	9f 90       	pop	r9
    1a94:	8f 90       	pop	r8
    1a96:	08 95       	ret

00001a98 <__udivmod64>:
    1a98:	88 24       	eor	r8, r8
    1a9a:	99 24       	eor	r9, r9
    1a9c:	f4 01       	movw	r30, r8
    1a9e:	e4 01       	movw	r28, r8
    1aa0:	b0 e4       	ldi	r27, 0x40	; 64
    1aa2:	9f 93       	push	r25
    1aa4:	aa 27       	eor	r26, r26
    1aa6:	9a 15       	cp	r25, r10
    1aa8:	8b 04       	cpc	r8, r11
    1aaa:	9c 04       	cpc	r9, r12
    1aac:	ed 05       	cpc	r30, r13
    1aae:	fe 05       	cpc	r31, r14
    1ab0:	cf 05       	cpc	r28, r15
    1ab2:	d0 07       	cpc	r29, r16
    1ab4:	a1 07       	cpc	r26, r17
    1ab6:	98 f4       	brcc	.+38     	; 0x1ade <__udivmod64+0x46>
    1ab8:	ad 2f       	mov	r26, r29
    1aba:	dc 2f       	mov	r29, r28
    1abc:	cf 2f       	mov	r28, r31
    1abe:	fe 2f       	mov	r31, r30
    1ac0:	e9 2d       	mov	r30, r9
    1ac2:	98 2c       	mov	r9, r8
    1ac4:	89 2e       	mov	r8, r25
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	87 2f       	mov	r24, r23
    1aca:	76 2f       	mov	r23, r22
    1acc:	65 2f       	mov	r22, r21
    1ace:	54 2f       	mov	r21, r20
    1ad0:	43 2f       	mov	r20, r19
    1ad2:	32 2f       	mov	r19, r18
    1ad4:	22 27       	eor	r18, r18
    1ad6:	b8 50       	subi	r27, 0x08	; 8
    1ad8:	31 f7       	brne	.-52     	; 0x1aa6 <__udivmod64+0xe>
    1ada:	bf 91       	pop	r27
    1adc:	27 c0       	rjmp	.+78     	; 0x1b2c <__udivmod64+0x94>
    1ade:	1b 2e       	mov	r1, r27
    1ae0:	bf 91       	pop	r27
    1ae2:	bb 27       	eor	r27, r27
    1ae4:	22 0f       	add	r18, r18
    1ae6:	33 1f       	adc	r19, r19
    1ae8:	44 1f       	adc	r20, r20
    1aea:	55 1f       	adc	r21, r21
    1aec:	66 1f       	adc	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	88 1c       	adc	r8, r8
    1af6:	99 1c       	adc	r9, r9
    1af8:	ee 1f       	adc	r30, r30
    1afa:	ff 1f       	adc	r31, r31
    1afc:	cc 1f       	adc	r28, r28
    1afe:	dd 1f       	adc	r29, r29
    1b00:	aa 1f       	adc	r26, r26
    1b02:	bb 1f       	adc	r27, r27
    1b04:	8a 14       	cp	r8, r10
    1b06:	9b 04       	cpc	r9, r11
    1b08:	ec 05       	cpc	r30, r12
    1b0a:	fd 05       	cpc	r31, r13
    1b0c:	ce 05       	cpc	r28, r14
    1b0e:	df 05       	cpc	r29, r15
    1b10:	a0 07       	cpc	r26, r16
    1b12:	b1 07       	cpc	r27, r17
    1b14:	48 f0       	brcs	.+18     	; 0x1b28 <__udivmod64+0x90>
    1b16:	8a 18       	sub	r8, r10
    1b18:	9b 08       	sbc	r9, r11
    1b1a:	ec 09       	sbc	r30, r12
    1b1c:	fd 09       	sbc	r31, r13
    1b1e:	ce 09       	sbc	r28, r14
    1b20:	df 09       	sbc	r29, r15
    1b22:	a0 0b       	sbc	r26, r16
    1b24:	b1 0b       	sbc	r27, r17
    1b26:	21 60       	ori	r18, 0x01	; 1
    1b28:	1a 94       	dec	r1
    1b2a:	e1 f6       	brne	.-72     	; 0x1ae4 <__udivmod64+0x4c>
    1b2c:	2e f4       	brtc	.+10     	; 0x1b38 <__udivmod64+0xa0>
    1b2e:	94 01       	movw	r18, r8
    1b30:	af 01       	movw	r20, r30
    1b32:	be 01       	movw	r22, r28
    1b34:	cd 01       	movw	r24, r26
    1b36:	00 0c       	add	r0, r0
    1b38:	08 95       	ret

00001b3a <__ashldi3>:
    1b3a:	0f 93       	push	r16
    1b3c:	08 30       	cpi	r16, 0x08	; 8
    1b3e:	90 f0       	brcs	.+36     	; 0x1b64 <__ashldi3+0x2a>
    1b40:	98 2f       	mov	r25, r24
    1b42:	87 2f       	mov	r24, r23
    1b44:	76 2f       	mov	r23, r22
    1b46:	65 2f       	mov	r22, r21
    1b48:	54 2f       	mov	r21, r20
    1b4a:	43 2f       	mov	r20, r19
    1b4c:	32 2f       	mov	r19, r18
    1b4e:	22 27       	eor	r18, r18
    1b50:	08 50       	subi	r16, 0x08	; 8
    1b52:	f4 cf       	rjmp	.-24     	; 0x1b3c <__ashldi3+0x2>
    1b54:	22 0f       	add	r18, r18
    1b56:	33 1f       	adc	r19, r19
    1b58:	44 1f       	adc	r20, r20
    1b5a:	55 1f       	adc	r21, r21
    1b5c:	66 1f       	adc	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 95       	dec	r16
    1b66:	b2 f7       	brpl	.-20     	; 0x1b54 <__ashldi3+0x1a>
    1b68:	0f 91       	pop	r16
    1b6a:	08 95       	ret

00001b6c <__ashrdi3>:
    1b6c:	97 fb       	bst	r25, 7
    1b6e:	10 f8       	bld	r1, 0

00001b70 <__lshrdi3>:
    1b70:	16 94       	lsr	r1
    1b72:	00 08       	sbc	r0, r0
    1b74:	0f 93       	push	r16
    1b76:	08 30       	cpi	r16, 0x08	; 8
    1b78:	98 f0       	brcs	.+38     	; 0x1ba0 <__lshrdi3+0x30>
    1b7a:	08 50       	subi	r16, 0x08	; 8
    1b7c:	23 2f       	mov	r18, r19
    1b7e:	34 2f       	mov	r19, r20
    1b80:	45 2f       	mov	r20, r21
    1b82:	56 2f       	mov	r21, r22
    1b84:	67 2f       	mov	r22, r23
    1b86:	78 2f       	mov	r23, r24
    1b88:	89 2f       	mov	r24, r25
    1b8a:	90 2d       	mov	r25, r0
    1b8c:	f4 cf       	rjmp	.-24     	; 0x1b76 <__lshrdi3+0x6>
    1b8e:	05 94       	asr	r0
    1b90:	97 95       	ror	r25
    1b92:	87 95       	ror	r24
    1b94:	77 95       	ror	r23
    1b96:	67 95       	ror	r22
    1b98:	57 95       	ror	r21
    1b9a:	47 95       	ror	r20
    1b9c:	37 95       	ror	r19
    1b9e:	27 95       	ror	r18
    1ba0:	0a 95       	dec	r16
    1ba2:	aa f7       	brpl	.-22     	; 0x1b8e <__lshrdi3+0x1e>
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <__adddi3>:
    1ba8:	2a 0d       	add	r18, r10
    1baa:	3b 1d       	adc	r19, r11
    1bac:	4c 1d       	adc	r20, r12
    1bae:	5d 1d       	adc	r21, r13
    1bb0:	6e 1d       	adc	r22, r14
    1bb2:	7f 1d       	adc	r23, r15
    1bb4:	80 1f       	adc	r24, r16
    1bb6:	91 1f       	adc	r25, r17
    1bb8:	08 95       	ret

00001bba <__adddi3_s8>:
    1bba:	00 24       	eor	r0, r0
    1bbc:	a7 fd       	sbrc	r26, 7
    1bbe:	00 94       	com	r0
    1bc0:	2a 0f       	add	r18, r26
    1bc2:	30 1d       	adc	r19, r0
    1bc4:	40 1d       	adc	r20, r0
    1bc6:	50 1d       	adc	r21, r0
    1bc8:	60 1d       	adc	r22, r0
    1bca:	70 1d       	adc	r23, r0
    1bcc:	80 1d       	adc	r24, r0
    1bce:	90 1d       	adc	r25, r0
    1bd0:	08 95       	ret

00001bd2 <__subdi3>:
    1bd2:	2a 19       	sub	r18, r10
    1bd4:	3b 09       	sbc	r19, r11
    1bd6:	4c 09       	sbc	r20, r12
    1bd8:	5d 09       	sbc	r21, r13
    1bda:	6e 09       	sbc	r22, r14
    1bdc:	7f 09       	sbc	r23, r15
    1bde:	80 0b       	sbc	r24, r16
    1be0:	91 0b       	sbc	r25, r17
    1be2:	08 95       	ret

00001be4 <__cmpdi2>:
    1be4:	2a 15       	cp	r18, r10
    1be6:	3b 05       	cpc	r19, r11
    1be8:	4c 05       	cpc	r20, r12
    1bea:	5d 05       	cpc	r21, r13
    1bec:	6e 05       	cpc	r22, r14
    1bee:	7f 05       	cpc	r23, r15
    1bf0:	80 07       	cpc	r24, r16
    1bf2:	91 07       	cpc	r25, r17
    1bf4:	08 95       	ret

00001bf6 <__umulhisi3>:
    1bf6:	a2 9f       	mul	r26, r18
    1bf8:	b0 01       	movw	r22, r0
    1bfa:	b3 9f       	mul	r27, r19
    1bfc:	c0 01       	movw	r24, r0
    1bfe:	a3 9f       	mul	r26, r19
    1c00:	70 0d       	add	r23, r0
    1c02:	81 1d       	adc	r24, r1
    1c04:	11 24       	eor	r1, r1
    1c06:	91 1d       	adc	r25, r1
    1c08:	b2 9f       	mul	r27, r18
    1c0a:	70 0d       	add	r23, r0
    1c0c:	81 1d       	adc	r24, r1
    1c0e:	11 24       	eor	r1, r1
    1c10:	91 1d       	adc	r25, r1
    1c12:	08 95       	ret

00001c14 <__itoa_ncheck>:
    1c14:	bb 27       	eor	r27, r27
    1c16:	4a 30       	cpi	r20, 0x0A	; 10
    1c18:	31 f4       	brne	.+12     	; 0x1c26 <__itoa_ncheck+0x12>
    1c1a:	99 23       	and	r25, r25
    1c1c:	22 f4       	brpl	.+8      	; 0x1c26 <__itoa_ncheck+0x12>
    1c1e:	bd e2       	ldi	r27, 0x2D	; 45
    1c20:	90 95       	com	r25
    1c22:	81 95       	neg	r24
    1c24:	9f 4f       	sbci	r25, 0xFF	; 255
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <__utoa_common>

00001c28 <__utoa_ncheck>:
    1c28:	bb 27       	eor	r27, r27

00001c2a <__utoa_common>:
    1c2a:	fb 01       	movw	r30, r22
    1c2c:	55 27       	eor	r21, r21
    1c2e:	aa 27       	eor	r26, r26
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	aa 1f       	adc	r26, r26
    1c36:	a4 17       	cp	r26, r20
    1c38:	10 f0       	brcs	.+4      	; 0x1c3e <__utoa_common+0x14>
    1c3a:	a4 1b       	sub	r26, r20
    1c3c:	83 95       	inc	r24
    1c3e:	50 51       	subi	r21, 0x10	; 16
    1c40:	b9 f7       	brne	.-18     	; 0x1c30 <__utoa_common+0x6>
    1c42:	a0 5d       	subi	r26, 0xD0	; 208
    1c44:	aa 33       	cpi	r26, 0x3A	; 58
    1c46:	08 f0       	brcs	.+2      	; 0x1c4a <__utoa_common+0x20>
    1c48:	a9 5d       	subi	r26, 0xD9	; 217
    1c4a:	a1 93       	st	Z+, r26
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	79 f7       	brne	.-34     	; 0x1c2e <__utoa_common+0x4>
    1c50:	b1 11       	cpse	r27, r1
    1c52:	b1 93       	st	Z+, r27
    1c54:	11 92       	st	Z+, r1
    1c56:	cb 01       	movw	r24, r22
    1c58:	00 c0       	rjmp	.+0      	; 0x1c5a <strrev>

00001c5a <strrev>:
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	67 2f       	mov	r22, r23
    1c60:	71 91       	ld	r23, Z+
    1c62:	77 23       	and	r23, r23
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <strrev+0x4>
    1c66:	32 97       	sbiw	r30, 0x02	; 2
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <strrev+0x18>
    1c6a:	7c 91       	ld	r23, X
    1c6c:	6d 93       	st	X+, r22
    1c6e:	70 83       	st	Z, r23
    1c70:	62 91       	ld	r22, -Z
    1c72:	ae 17       	cp	r26, r30
    1c74:	bf 07       	cpc	r27, r31
    1c76:	c8 f3       	brcs	.-14     	; 0x1c6a <strrev+0x10>
    1c78:	08 95       	ret

00001c7a <_exit>:
    1c7a:	f8 94       	cli

00001c7c <__stop_program>:
    1c7c:	ff cf       	rjmp	.-2      	; 0x1c7c <__stop_program>
