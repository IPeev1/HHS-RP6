
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800200  00001c54  00001ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000634  00800318  00800318  00001e00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000224e  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001277  00000000  00000000  0000424e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001157  00000000  00000000  000054c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  0000661c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4d  00000000  00000000  00006bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010fd  00000000  00000000  000076fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000087fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1a c6       	rjmp	.+3124   	; 0xc72 <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__vector_25>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c5 c2       	rjmp	.+1418   	; 0x618 <__vector_35>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c3       	rjmp	.+2006   	; 0x874 <__vector_39>
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
      a8:	98 c0       	rjmp	.+304    	; 0x1da <__bad_interrupt>
      aa:	00 00       	nop
      ac:	96 c0       	rjmp	.+300    	; 0x1da <__bad_interrupt>
      ae:	00 00       	nop
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	92 c0       	rjmp	.+292    	; 0x1da <__bad_interrupt>
      b6:	00 00       	nop
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1a 02       	muls	r17, r26
      e6:	c3 02       	muls	r28, r19
      e8:	c3 02       	muls	r28, r19
      ea:	27 02       	muls	r18, r23
      ec:	c3 02       	muls	r28, r19
      ee:	c3 02       	muls	r28, r19
      f0:	c3 02       	muls	r28, r19
      f2:	c3 02       	muls	r28, r19
      f4:	c3 02       	muls	r28, r19
      f6:	c3 02       	muls	r28, r19
      f8:	c3 02       	muls	r28, r19
      fa:	c3 02       	muls	r28, r19
      fc:	59 02       	muls	r21, r25
      fe:	b6 02       	muls	r27, r22
     100:	c3 02       	muls	r28, r19
     102:	99 02       	muls	r25, r25
     104:	4e 02       	muls	r20, r30
     106:	43 02       	muls	r20, r19
     108:	0d 02       	muls	r16, r29
     10a:	34 02       	muls	r19, r20
     10c:	8c 02       	muls	r24, r28
     10e:	c3 02       	muls	r28, r19
     110:	00 02       	muls	r16, r16
     112:	c3 02       	muls	r28, r19
     114:	c3 02       	muls	r28, r19
     116:	bb 02       	muls	r27, r27
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
     190:	01 c4       	rjmp	.+2050   	; 0x994 <__vector_39+0x120>
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e4 e5       	ldi	r30, 0x54	; 84
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a8 31       	cpi	r26, 0x18	; 24
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	29 e0       	ldi	r18, 0x09	; 9
     1c6:	a8 e1       	ldi	r26, 0x18	; 24
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	ac 34       	cpi	r26, 0x4C	; 76
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	23 d6       	rcall	.+3142   	; 0xe1c <main>
     1d6:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <init_USART>:
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
}
     1dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e0:	e1 ec       	ldi	r30, 0xC1	; 193
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 69       	ori	r24, 0x90	; 144
     1e8:	80 83       	st	Z, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 60       	ori	r24, 0x08	; 8
     1ee:	80 83       	st	Z, r24
     1f0:	e2 ec       	ldi	r30, 0xC2	; 194
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	86 60       	ori	r24, 0x06	; 6
     1f8:	80 83       	st	Z, r24
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     206:	08 95       	ret

00000208 <__vector_25>:
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
     23e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     242:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTreceived>
     246:	90 ed       	ldi	r25, 0xD0	; 208
     248:	98 0f       	add	r25, r24
     24a:	9a 30       	cpi	r25, 0x0A	; 10
     24c:	10 f0       	brcs	.+4      	; 0x252 <__vector_25+0x4a>
     24e:	80 32       	cpi	r24, 0x20	; 32
     250:	99 f4       	brne	.+38     	; 0x278 <__vector_25+0x70>
     252:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <USARTinputPos>
     256:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <USARTinputPos+0x1>
     25a:	2f 3f       	cpi	r18, 0xFF	; 255
     25c:	31 05       	cpc	r19, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <__vector_25+0x5a>
     260:	a1 c1       	rjmp	.+834    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <USARTinputPos+0x1>
     26a:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <USARTinputPos>
     26e:	f9 01       	movw	r30, r18
     270:	e5 56       	subi	r30, 0x65	; 101
     272:	fc 4f       	sbci	r31, 0xFC	; 252
     274:	80 83       	st	Z, r24
     276:	96 c1       	rjmp	.+812    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     278:	9f e9       	ldi	r25, 0x9F	; 159
     27a:	98 0f       	add	r25, r24
     27c:	9a 31       	cpi	r25, 0x1A	; 26
     27e:	28 f4       	brcc	.+10     	; 0x28a <__vector_25+0x82>
     280:	82 36       	cpi	r24, 0x62	; 98
     282:	29 f0       	breq	.+10     	; 0x28e <__vector_25+0x86>
     284:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     288:	8d c1       	rjmp	.+794    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     28a:	82 36       	cpi	r24, 0x62	; 98
     28c:	51 f4       	brne	.+20     	; 0x2a2 <__vector_25+0x9a>
     28e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     292:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     29c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     2a0:	81 c1       	rjmp	.+770    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     2a2:	8d 30       	cpi	r24, 0x0D	; 13
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_25+0xa0>
     2a6:	7e c1       	rjmp	.+764    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     2a8:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <USARTinputPos>
     2ac:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USARTinputPos+0x1>
     2b0:	11 23       	and	r17, r17
     2b2:	0c f4       	brge	.+2      	; 0x2b6 <__vector_25+0xae>
     2b4:	91 c0       	rjmp	.+290    	; 0x3d8 <__vector_25+0x1d0>
     2b6:	e0 e3       	ldi	r30, 0x30	; 48
     2b8:	f3 e0       	ldi	r31, 0x03	; 3
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	10 82       	st	Z, r1
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	15 82       	std	Z+5, r1	; 0x05
     2c4:	14 82       	std	Z+4, r1	; 0x04
     2c6:	ea e2       	ldi	r30, 0x2A	; 42
     2c8:	f3 e0       	ldi	r31, 0x03	; 3
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	9f ef       	ldi	r25, 0xFF	; 255
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	80 83       	st	Z, r24
     2d2:	93 83       	std	Z+3, r25	; 0x03
     2d4:	82 83       	std	Z+2, r24	; 0x02
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <numberStart.1999+0x1>
     2de:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <numberStart.1999>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	e5 56       	subi	r30, 0x65	; 101
     2f0:	fc 4f       	sbci	r31, 0xFC	; 252
     2f2:	30 81       	ld	r19, Z
     2f4:	30 32       	cpi	r19, 0x20	; 32
     2f6:	79 f4       	brne	.+30     	; 0x316 <__vector_25+0x10e>
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	fa 01       	movw	r30, r20
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	ec 5d       	subi	r30, 0xDC	; 220
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	43 30       	cpi	r20, 0x03	; 3
     30e:	51 05       	cpc	r21, r1
     310:	0c f0       	brlt	.+2      	; 0x314 <__vector_25+0x10c>
     312:	42 c1       	rjmp	.+644    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     314:	0a c0       	rjmp	.+20     	; 0x32a <__vector_25+0x122>
     316:	fa 01       	movw	r30, r20
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	e6 5d       	subi	r30, 0xD6	; 214
     31e:	fc 4f       	sbci	r31, 0xFC	; 252
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	80 83       	st	Z, r24
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	82 2f       	mov	r24, r18
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 17       	cp	r16, r24
     332:	19 07       	cpc	r17, r25
     334:	dc f6       	brge	.-74     	; 0x2ec <__vector_25+0xe4>
     336:	30 c1       	rjmp	.+608    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     338:	f9 01       	movw	r30, r18
     33a:	e5 56       	subi	r30, 0x65	; 101
     33c:	fc 4f       	sbci	r31, 0xFC	; 252
     33e:	c0 80       	ld	r12, Z
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	c8 12       	cpse	r12, r24
     344:	09 c0       	rjmp	.+18     	; 0x358 <__vector_25+0x150>
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	e8 1a       	sub	r14, r24
     34a:	f8 0a       	sbc	r15, r24
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	e8 16       	cp	r14, r24
     350:	f1 04       	cpc	r15, r1
     352:	0c f0       	brlt	.+2      	; 0x356 <__vector_25+0x14e>
     354:	41 c0       	rjmp	.+130    	; 0x3d8 <__vector_25+0x1d0>
     356:	39 c0       	rjmp	.+114    	; 0x3ca <__vector_25+0x1c2>
     358:	e7 01       	movw	r28, r14
     35a:	cc 0f       	add	r28, r28
     35c:	dd 1f       	adc	r29, r29
     35e:	de 01       	movw	r26, r28
     360:	a6 5d       	subi	r26, 0xD6	; 214
     362:	bc 4f       	sbci	r27, 0xFC	; 252
     364:	fe 01       	movw	r30, r28
     366:	ec 5d       	subi	r30, 0xDC	; 220
     368:	fc 4f       	sbci	r31, 0xFC	; 252
     36a:	6d 91       	ld	r22, X+
     36c:	7c 91       	ld	r23, X
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	68 0f       	add	r22, r24
     374:	79 1f       	adc	r23, r25
     376:	62 1b       	sub	r22, r18
     378:	73 0b       	sbc	r23, r19
     37a:	07 2e       	mov	r0, r23
     37c:	00 0c       	add	r0, r0
     37e:	88 0b       	sbc	r24, r24
     380:	99 0b       	sbc	r25, r25
     382:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__floatsisf>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 e4       	ldi	r25, 0x41	; 65
     392:	0e 94 91 0b 	call	0x1722	; 0x1722 <pow>
     396:	c0 5d       	subi	r28, 0xD0	; 208
     398:	dc 4f       	sbci	r29, 0xFC	; 252
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	d1 d7       	rcall	.+4002   	; 0x1346 <__addsf3>
     3a4:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fixsfsi>
     3a8:	20 ed       	ldi	r18, 0xD0	; 208
     3aa:	2c 0d       	add	r18, r12
     3ac:	42 2f       	mov	r20, r18
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	46 9f       	mul	r20, r22
     3b2:	90 01       	movw	r18, r0
     3b4:	47 9f       	mul	r20, r23
     3b6:	30 0d       	add	r19, r0
     3b8:	56 9f       	mul	r21, r22
     3ba:	30 0d       	add	r19, r0
     3bc:	11 24       	eor	r1, r1
     3be:	88 81       	ld	r24, Y
     3c0:	99 81       	ldd	r25, Y+1	; 0x01
     3c2:	82 0f       	add	r24, r18
     3c4:	93 1f       	adc	r25, r19
     3c6:	99 83       	std	Y+1, r25	; 0x01
     3c8:	88 83       	st	Y, r24
     3ca:	d3 94       	inc	r13
     3cc:	2d 2d       	mov	r18, r13
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	02 17       	cp	r16, r18
     3d2:	13 07       	cpc	r17, r19
     3d4:	0c f0       	brlt	.+2      	; 0x3d8 <__vector_25+0x1d0>
     3d6:	b0 cf       	rjmp	.-160    	; 0x338 <__vector_25+0x130>
     3d8:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     3dc:	ee 23       	and	r30, r30
     3de:	09 f4       	brne	.+2      	; 0x3e2 <__vector_25+0x1da>
     3e0:	d2 c0       	rjmp	.+420    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     3e2:	8e 2f       	mov	r24, r30
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	fc 01       	movw	r30, r24
     3e8:	e1 56       	subi	r30, 0x61	; 97
     3ea:	f1 09       	sbc	r31, r1
     3ec:	ea 31       	cpi	r30, 0x1A	; 26
     3ee:	f1 05       	cpc	r31, r1
     3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__vector_25+0x1ec>
     3f2:	c9 c0       	rjmp	.+402    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     3f4:	88 27       	eor	r24, r24
     3f6:	ee 58       	subi	r30, 0x8E	; 142
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	8f 4f       	sbci	r24, 0xFF	; 255
     3fc:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__tablejump2__>
     400:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     404:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <rp6Data+0x2>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40c:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <rp6Data+0x2>
     410:	ba c0       	rjmp	.+372    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <rp6Data+0x2>
     418:	b6 c0       	rjmp	.+364    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     41a:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     41e:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <rp6Data+0x2>
     422:	8f 3f       	cpi	r24, 0xFF	; 255
     424:	19 f4       	brne	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     426:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <rp6Data+0x2>
     42a:	ad c0       	rjmp	.+346    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <rp6Data+0x2>
     432:	a9 c0       	rjmp	.+338    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     434:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     438:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     43c:	8f 3f       	cpi	r24, 0xFF	; 255
     43e:	19 f4       	brne	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     440:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <rp6Data+0x3>
     444:	a0 c0       	rjmp	.+320    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <rp6Data+0x3>
     44c:	9c c0       	rjmp	.+312    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     44e:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     452:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	19 f4       	brne	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45a:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <rp6Data+0x3>
     45e:	93 c0       	rjmp	.+294    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <rp6Data+0x3>
     466:	8f c0       	rjmp	.+286    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     468:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     46c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <number.1997>
     470:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <number.1997+0x1>
     474:	85 36       	cpi	r24, 0x65	; 101
     476:	91 05       	cpc	r25, r1
     478:	08 f0       	brcs	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	85 c0       	rjmp	.+266    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     47c:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <rp6Data+0x1>
     480:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <rp6Data>
     484:	80 c0       	rjmp	.+256    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     486:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     48a:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <number.1997>
     48e:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <number.1997+0x1>
     492:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <rp6Data+0x7>
     496:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <rp6Data+0x6>
     49a:	75 c0       	rjmp	.+234    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     49c:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     4a0:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <number.1997>
     4a4:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <number.1997+0x1>
     4a8:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <rp6Data+0x5>
     4ac:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <rp6Data+0x4>
     4b0:	6a c0       	rjmp	.+212    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     4b2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <programmedAmount>
     4b6:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <programmedAmount+0x1>
     4ba:	9c 01       	movw	r18, r24
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <programmedAmount+0x1>
     4c4:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <programmedAmount>
     4c8:	9c 01       	movw	r18, r24
     4ca:	22 0f       	add	r18, r18
     4cc:	33 1f       	adc	r19, r19
     4ce:	82 0f       	add	r24, r18
     4d0:	93 1f       	adc	r25, r19
     4d2:	fc 01       	movw	r30, r24
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	e4 56       	subi	r30, 0x64	; 100
     4da:	fb 4f       	sbci	r31, 0xFB	; 251
     4dc:	a0 e3       	ldi	r26, 0x30	; 48
     4de:	b3 e0       	ldi	r27, 0x03	; 3
     4e0:	2d 91       	ld	r18, X+
     4e2:	3c 91       	ld	r19, X
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	31 83       	std	Z+1, r19	; 0x01
     4e8:	20 83       	st	Z, r18
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e2 56       	subi	r30, 0x62	; 98
     4f2:	fb 4f       	sbci	r31, 0xFB	; 251
     4f4:	12 96       	adiw	r26, 0x02	; 2
     4f6:	2d 91       	ld	r18, X+
     4f8:	3c 91       	ld	r19, X
     4fa:	13 97       	sbiw	r26, 0x03	; 3
     4fc:	31 83       	std	Z+1, r19	; 0x01
     4fe:	20 83       	st	Z, r18
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	fc 01       	movw	r30, r24
     506:	e0 56       	subi	r30, 0x60	; 96
     508:	fb 4f       	sbci	r31, 0xFB	; 251
     50a:	14 96       	adiw	r26, 0x04	; 4
     50c:	8d 91       	ld	r24, X+
     50e:	9c 91       	ld	r25, X
     510:	15 97       	sbiw	r26, 0x05	; 5
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	80 83       	st	Z, r24
     516:	37 c0       	rjmp	.+110    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     518:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <programmedAmount>
     51c:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <programmedAmount+0x1>
     520:	18 16       	cp	r1, r24
     522:	19 06       	cpc	r1, r25
     524:	84 f5       	brge	.+96     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <programmedAmount+0x1>
     52c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <programmedAmount>
     530:	2a c0       	rjmp	.+84     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     532:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <number.1997>
     536:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <number.1997+0x1>
     53a:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <programmedAmount>
     53e:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <programmedAmount+0x1>
     542:	82 17       	cp	r24, r18
     544:	93 07       	cpc	r25, r19
     546:	f8 f4       	brcc	.+62     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     548:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <currentParcourLine+0x1>
     54c:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <currentParcourLine>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <runParcour>
     556:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <rp6Data+0xf>
     55a:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <rp6Data+0x10>
     55e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <startDegrees+0x1>
     562:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <startDegrees>
     566:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <parcourLineState>
     56a:	0d c0       	rjmp	.+26     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     56c:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <programmedAmount+0x1>
     570:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <programmedAmount>
     574:	08 c0       	rjmp	.+16     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     576:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <runParcour>
     57a:	e4 e8       	ldi	r30, 0x84	; 132
     57c:	f3 e0       	ldi	r31, 0x03	; 3
     57e:	11 82       	std	Z+1, r1	; 0x01
     580:	10 82       	st	Z, r1
     582:	13 82       	std	Z+3, r1	; 0x03
     584:	12 82       	std	Z+2, r1	; 0x02
     586:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	9f ef       	ldi	r25, 0xFF	; 255
     58e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     592:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	d1 2c       	mov	r13, r1
     59e:	e1 2c       	mov	r14, r1
     5a0:	f1 2c       	mov	r15, r1
     5a2:	ca ce       	rjmp	.-620    	; 0x338 <__vector_25+0x130>
     5a4:	ff 91       	pop	r31
     5a6:	ef 91       	pop	r30
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	7f 91       	pop	r23
     5b6:	6f 91       	pop	r22
     5b8:	5f 91       	pop	r21
     5ba:	4f 91       	pop	r20
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	0f 90       	pop	r0
     5ce:	0b be       	out	0x3b, r0	; 59
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <init_micros>:
     5da:	e1 e9       	ldi	r30, 0x91	; 145
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	81 60       	ori	r24, 0x01	; 1
     5e2:	80 83       	st	Z, r24
     5e4:	e1 e7       	ldi	r30, 0x71	; 113
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	81 60       	ori	r24, 0x01	; 1
     5ec:	80 83       	st	Z, r24
     5ee:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     5f2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     5f6:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <t3TotalOverflow>
     5fa:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <t3TotalOverflow+0x1>
     5fe:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <t3TotalOverflow+0x2>
     602:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <t3TotalOverflow+0x3>
     606:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <t3TotalOverflow+0x4>
     60a:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <t3TotalOverflow+0x5>
     60e:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <t3TotalOverflow+0x6>
     612:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <t3TotalOverflow+0x7>
     616:	08 95       	ret

00000618 <__vector_35>:
     618:	1f 92       	push	r1
     61a:	0f 92       	push	r0
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <t3TotalOverflow>
     638:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <t3TotalOverflow+0x1>
     63c:	40 91 60 03 	lds	r20, 0x0360	; 0x800360 <t3TotalOverflow+0x2>
     640:	50 91 61 03 	lds	r21, 0x0361	; 0x800361 <t3TotalOverflow+0x3>
     644:	60 91 62 03 	lds	r22, 0x0362	; 0x800362 <t3TotalOverflow+0x4>
     648:	70 91 63 03 	lds	r23, 0x0363	; 0x800363 <t3TotalOverflow+0x5>
     64c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <t3TotalOverflow+0x6>
     650:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <t3TotalOverflow+0x7>
     654:	a1 e0       	ldi	r26, 0x01	; 1
     656:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__adddi3_s8>
     65a:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <t3TotalOverflow>
     65e:	30 93 5f 03 	sts	0x035F, r19	; 0x80035f <t3TotalOverflow+0x1>
     662:	40 93 60 03 	sts	0x0360, r20	; 0x800360 <t3TotalOverflow+0x2>
     666:	50 93 61 03 	sts	0x0361, r21	; 0x800361 <t3TotalOverflow+0x3>
     66a:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <t3TotalOverflow+0x4>
     66e:	70 93 63 03 	sts	0x0363, r23	; 0x800363 <t3TotalOverflow+0x5>
     672:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <t3TotalOverflow+0x6>
     676:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <t3TotalOverflow+0x7>
     67a:	af 91       	pop	r26
     67c:	9f 91       	pop	r25
     67e:	8f 91       	pop	r24
     680:	7f 91       	pop	r23
     682:	6f 91       	pop	r22
     684:	5f 91       	pop	r21
     686:	4f 91       	pop	r20
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <micros>:
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     6b6:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     6ba:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <t3TotalOverflow>
     6be:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <t3TotalOverflow+0x1>
     6c2:	40 91 60 03 	lds	r20, 0x0360	; 0x800360 <t3TotalOverflow+0x2>
     6c6:	50 91 61 03 	lds	r21, 0x0361	; 0x800361 <t3TotalOverflow+0x3>
     6ca:	60 91 62 03 	lds	r22, 0x0362	; 0x800362 <t3TotalOverflow+0x4>
     6ce:	70 91 63 03 	lds	r23, 0x0363	; 0x800363 <t3TotalOverflow+0x5>
     6d2:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <t3TotalOverflow+0x6>
     6d6:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <t3TotalOverflow+0x7>
     6da:	98 2c       	mov	r9, r8
     6dc:	88 24       	eor	r8, r8
     6de:	99 0c       	add	r9, r9
     6e0:	99 0c       	add	r9, r9
     6e2:	99 0c       	add	r9, r9
     6e4:	99 0c       	add	r9, r9
     6e6:	09 2c       	mov	r0, r9
     6e8:	00 0c       	add	r0, r0
     6ea:	aa 08       	sbc	r10, r10
     6ec:	bb 08       	sbc	r11, r11
     6ee:	bb 20       	and	r11, r11
     6f0:	2c f4       	brge	.+10     	; 0x6fc <micros+0x66>
     6f2:	ef ef       	ldi	r30, 0xFF	; 255
     6f4:	8e 0e       	add	r8, r30
     6f6:	9e 1e       	adc	r9, r30
     6f8:	a1 1c       	adc	r10, r1
     6fa:	b1 1c       	adc	r11, r1
     6fc:	25 01       	movw	r4, r10
     6fe:	77 24       	eor	r7, r7
     700:	57 fc       	sbrc	r5, 7
     702:	70 94       	com	r7
     704:	67 2c       	mov	r6, r7
     706:	bb 0c       	add	r11, r11
     708:	88 08       	sbc	r8, r8
     70a:	98 2c       	mov	r9, r8
     70c:	54 01       	movw	r10, r8
     70e:	0c e0       	ldi	r16, 0x0C	; 12
     710:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__ashldi3>
     714:	f2 2f       	mov	r31, r18
     716:	e3 2f       	mov	r30, r19
     718:	c4 2e       	mov	r12, r20
     71a:	d5 2e       	mov	r13, r21
     71c:	e6 2e       	mov	r14, r22
     71e:	f7 2e       	mov	r15, r23
     720:	08 2f       	mov	r16, r24
     722:	19 2f       	mov	r17, r25
     724:	24 2d       	mov	r18, r4
     726:	35 2d       	mov	r19, r5
     728:	46 2d       	mov	r20, r6
     72a:	57 2d       	mov	r21, r7
     72c:	68 2d       	mov	r22, r8
     72e:	78 2d       	mov	r23, r8
     730:	88 2d       	mov	r24, r8
     732:	98 2d       	mov	r25, r8
     734:	af 2e       	mov	r10, r31
     736:	be 2e       	mov	r11, r30
     738:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__adddi3>
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	6f 90       	pop	r6
     754:	5f 90       	pop	r5
     756:	4f 90       	pop	r4
     758:	08 95       	ret

0000075a <init_TWI>:
     75a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     75e:	88 e4       	ldi	r24, 0x48	; 72
     760:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     764:	85 e0       	ldi	r24, 0x05	; 5
     766:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     76a:	08 95       	ret

0000076c <init_TWI_Timer2>:
     76c:	e1 eb       	ldi	r30, 0xB1	; 177
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	87 60       	ori	r24, 0x07	; 7
     774:	80 83       	st	Z, r24
     776:	e0 e7       	ldi	r30, 0x70	; 112
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	81 60       	ori	r24, 0x01	; 1
     77e:	80 83       	st	Z, r24
     780:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     784:	08 95       	ret

00000786 <init_arduinoData>:
     786:	e6 e6       	ldi	r30, 0x66	; 102
     788:	f3 e0       	ldi	r31, 0x03	; 3
     78a:	11 82       	std	Z+1, r1	; 0x01
     78c:	10 82       	st	Z, r1
     78e:	13 82       	std	Z+3, r1	; 0x03
     790:	12 82       	std	Z+2, r1	; 0x02
     792:	08 95       	ret

00000794 <init_rp6Data>:
     794:	e4 e8       	ldi	r30, 0x84	; 132
     796:	f3 e0       	ldi	r31, 0x03	; 3
     798:	11 82       	std	Z+1, r1	; 0x01
     79a:	10 82       	st	Z, r1
     79c:	12 82       	std	Z+2, r1	; 0x02
     79e:	13 82       	std	Z+3, r1	; 0x03
     7a0:	84 e2       	ldi	r24, 0x24	; 36
     7a2:	93 e1       	ldi	r25, 0x13	; 19
     7a4:	95 83       	std	Z+5, r25	; 0x05
     7a6:	84 83       	std	Z+4, r24	; 0x04
     7a8:	88 e2       	ldi	r24, 0x28	; 40
     7aa:	93 e2       	ldi	r25, 0x23	; 35
     7ac:	97 83       	std	Z+7, r25	; 0x07
     7ae:	86 83       	std	Z+6, r24	; 0x06
     7b0:	88 e8       	ldi	r24, 0x88	; 136
     7b2:	93 e1       	ldi	r25, 0x13	; 19
     7b4:	91 87       	std	Z+9, r25	; 0x09
     7b6:	80 87       	std	Z+8, r24	; 0x08
     7b8:	88 ec       	ldi	r24, 0xC8	; 200
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	a0 e0       	ldi	r26, 0x00	; 0
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	82 87       	std	Z+10, r24	; 0x0a
     7c2:	93 87       	std	Z+11, r25	; 0x0b
     7c4:	a4 87       	std	Z+12, r26	; 0x0c
     7c6:	b5 87       	std	Z+13, r27	; 0x0d
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	86 87       	std	Z+14, r24	; 0x0e
     7cc:	08 95       	ret

000007ce <arduinoDataInterpreter>:
     7ce:	a6 e6       	ldi	r26, 0x66	; 102
     7d0:	b3 e0       	ldi	r27, 0x03	; 3
     7d2:	ea e4       	ldi	r30, 0x4A	; 74
     7d4:	f3 e0       	ldi	r31, 0x03	; 3
     7d6:	81 81       	ldd	r24, Z+1	; 0x01
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	98 2f       	mov	r25, r24
     7dc:	88 27       	eor	r24, r24
     7de:	22 81       	ldd	r18, Z+2	; 0x02
     7e0:	82 0f       	add	r24, r18
     7e2:	91 1d       	adc	r25, r1
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	9c 93       	st	X, r25
     7e8:	8e 93       	st	-X, r24
     7ea:	83 81       	ldd	r24, Z+3	; 0x03
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	98 2f       	mov	r25, r24
     7f0:	88 27       	eor	r24, r24
     7f2:	24 81       	ldd	r18, Z+4	; 0x04
     7f4:	82 0f       	add	r24, r18
     7f6:	91 1d       	adc	r25, r1
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	85 81       	ldd	r24, Z+5	; 0x05
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	98 2f       	mov	r25, r24
     806:	88 27       	eor	r24, r24
     808:	26 81       	ldd	r18, Z+6	; 0x06
     80a:	82 0f       	add	r24, r18
     80c:	91 1d       	adc	r25, r1
     80e:	15 96       	adiw	r26, 0x05	; 5
     810:	9c 93       	st	X, r25
     812:	8e 93       	st	-X, r24
     814:	14 97       	sbiw	r26, 0x04	; 4
     816:	87 81       	ldd	r24, Z+7	; 0x07
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	98 2f       	mov	r25, r24
     81c:	88 27       	eor	r24, r24
     81e:	20 85       	ldd	r18, Z+8	; 0x08
     820:	82 0f       	add	r24, r18
     822:	91 1d       	adc	r25, r1
     824:	17 96       	adiw	r26, 0x07	; 7
     826:	9c 93       	st	X, r25
     828:	8e 93       	st	-X, r24
     82a:	16 97       	sbiw	r26, 0x06	; 6
     82c:	81 85       	ldd	r24, Z+9	; 0x09
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	98 2f       	mov	r25, r24
     832:	88 27       	eor	r24, r24
     834:	22 85       	ldd	r18, Z+10	; 0x0a
     836:	82 0f       	add	r24, r18
     838:	91 1d       	adc	r25, r1
     83a:	19 96       	adiw	r26, 0x09	; 9
     83c:	9c 93       	st	X, r25
     83e:	8e 93       	st	-X, r24
     840:	18 97       	sbiw	r26, 0x08	; 8
     842:	08 95       	ret

00000844 <I2C_receiveInterpreter>:
     844:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <receiveDataTWI>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	09 f4       	brne	.+2      	; 0x84e <I2C_receiveInterpreter+0xa>
     84c:	c0 cf       	rjmp	.-128    	; 0x7ce <arduinoDataInterpreter>
     84e:	08 95       	ret

00000850 <clearSendData>:
     850:	e0 e7       	ldi	r30, 0x70	; 112
     852:	f3 e0       	ldi	r31, 0x03	; 3
     854:	84 e8       	ldi	r24, 0x84	; 132
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	11 92       	st	Z+, r1
     85a:	e8 17       	cp	r30, r24
     85c:	f9 07       	cpc	r31, r25
     85e:	e1 f7       	brne	.-8      	; 0x858 <clearSendData+0x8>
     860:	08 95       	ret

00000862 <clearReceiveData>:
     862:	ea e4       	ldi	r30, 0x4A	; 74
     864:	f3 e0       	ldi	r31, 0x03	; 3
     866:	8e e5       	ldi	r24, 0x5E	; 94
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	11 92       	st	Z+, r1
     86c:	e8 17       	cp	r30, r24
     86e:	f9 07       	cpc	r31, r25
     870:	e1 f7       	brne	.-8      	; 0x86a <clearReceiveData+0x8>
     872:	08 95       	ret

00000874 <__vector_39>:
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	0b b6       	in	r0, 0x3b	; 59
     880:	0f 92       	push	r0
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	2f 93       	push	r18
     894:	3f 93       	push	r19
     896:	4f 93       	push	r20
     898:	5f 93       	push	r21
     89a:	6f 93       	push	r22
     89c:	7f 93       	push	r23
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	ef 93       	push	r30
     8ac:	ff 93       	push	r31
     8ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     8b2:	80 35       	cpi	r24, 0x50	; 80
     8b4:	c1 f0       	breq	.+48     	; 0x8e6 <__vector_39+0x72>
     8b6:	88 35       	cpi	r24, 0x58	; 88
     8b8:	a9 f1       	breq	.+106    	; 0x924 <__vector_39+0xb0>
     8ba:	80 34       	cpi	r24, 0x40	; 64
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <__vector_39+0x4c>
     8be:	8a c0       	rjmp	.+276    	; 0x9d4 <__vector_39+0x160>
     8c0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <compassFlag>
     8c4:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <compassFlag+0x1>
     8c8:	89 2b       	or	r24, r25
     8ca:	21 f0       	breq	.+8      	; 0x8d4 <__vector_39+0x60>
     8cc:	85 e8       	ldi	r24, 0x85	; 133
     8ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     8d2:	80 c0       	rjmp	.+256    	; 0x9d4 <__vector_39+0x160>
     8d4:	c6 df       	rcall	.-116    	; 0x862 <clearReceiveData>
     8d6:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <bytecounter.2060+0x1>
     8da:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <bytecounter.2060>
     8de:	85 ec       	ldi	r24, 0xC5	; 197
     8e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     8e4:	77 c0       	rjmp	.+238    	; 0x9d4 <__vector_39+0x160>
     8e6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <bytecounter.2060>
     8ea:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <bytecounter.2060+0x1>
     8ee:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     8f2:	fc 01       	movw	r30, r24
     8f4:	e6 5b       	subi	r30, 0xB6	; 182
     8f6:	fc 4f       	sbci	r31, 0xFC	; 252
     8f8:	20 83       	st	Z, r18
     8fa:	82 31       	cpi	r24, 0x12	; 18
     8fc:	91 05       	cpc	r25, r1
     8fe:	4c f4       	brge	.+18     	; 0x912 <__vector_39+0x9e>
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <bytecounter.2060+0x1>
     906:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <bytecounter.2060>
     90a:	85 ec       	ldi	r24, 0xC5	; 197
     90c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     910:	61 c0       	rjmp	.+194    	; 0x9d4 <__vector_39+0x160>
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <bytecounter.2060+0x1>
     918:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <bytecounter.2060>
     91c:	85 e8       	ldi	r24, 0x85	; 133
     91e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     922:	58 c0       	rjmp	.+176    	; 0x9d4 <__vector_39+0x160>
     924:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <compassFlag>
     928:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <compassFlag+0x1>
     92c:	89 2b       	or	r24, r25
     92e:	71 f4       	brne	.+28     	; 0x94c <__vector_39+0xd8>
     930:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     934:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <bytecounter.2060>
     938:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <bytecounter.2060+0x1>
     93c:	e6 5b       	subi	r30, 0xB6	; 182
     93e:	fc 4f       	sbci	r31, 0xFC	; 252
     940:	80 83       	st	Z, r24
     942:	85 e9       	ldi	r24, 0x95	; 149
     944:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     948:	7d df       	rcall	.-262    	; 0x844 <I2C_receiveInterpreter>
     94a:	44 c0       	rjmp	.+136    	; 0x9d4 <__vector_39+0x160>
     94c:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     950:	c4 e8       	ldi	r28, 0x84	; 132
     952:	d3 e0       	ldi	r29, 0x03	; 3
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	03 e0       	ldi	r16, 0x03	; 3
     964:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__ashldi3>
     968:	a2 2e       	mov	r10, r18
     96a:	b3 2e       	mov	r11, r19
     96c:	c4 2e       	mov	r12, r20
     96e:	d5 2e       	mov	r13, r21
     970:	e6 2e       	mov	r14, r22
     972:	f7 2e       	mov	r15, r23
     974:	e8 2f       	mov	r30, r24
     976:	19 2f       	mov	r17, r25
     978:	02 e0       	ldi	r16, 0x02	; 2
     97a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__ashldi3>
     97e:	0e 2f       	mov	r16, r30
     980:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__subdi3>
     984:	a2 2e       	mov	r10, r18
     986:	b3 2e       	mov	r11, r19
     988:	c4 2e       	mov	r12, r20
     98a:	d5 2e       	mov	r13, r21
     98c:	e6 2e       	mov	r14, r22
     98e:	f7 2e       	mov	r15, r23
     990:	e8 2f       	mov	r30, r24
     992:	19 2f       	mov	r17, r25
     994:	04 e0       	ldi	r16, 0x04	; 4
     996:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__ashldi3>
     99a:	0e 2f       	mov	r16, r30
     99c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__subdi3>
     9a0:	aa 24       	eor	r10, r10
     9a2:	aa 94       	dec	r10
     9a4:	b1 2c       	mov	r11, r1
     9a6:	c1 2c       	mov	r12, r1
     9a8:	d1 2c       	mov	r13, r1
     9aa:	e1 2c       	mov	r14, r1
     9ac:	f1 2c       	mov	r15, r1
     9ae:	00 e0       	ldi	r16, 0x00	; 0
     9b0:	10 e0       	ldi	r17, 0x00	; 0
     9b2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__udivdi3>
     9b6:	2f 87       	std	Y+15, r18	; 0x0f
     9b8:	38 8b       	std	Y+16, r19	; 0x10
     9ba:	49 8b       	std	Y+17, r20	; 0x11
     9bc:	5a 8b       	std	Y+18, r21	; 0x12
     9be:	6b 8b       	std	Y+19, r22	; 0x13
     9c0:	7c 8b       	std	Y+20, r23	; 0x14
     9c2:	8d 8b       	std	Y+21, r24	; 0x15
     9c4:	9e 8b       	std	Y+22, r25	; 0x16
     9c6:	85 e9       	ldi	r24, 0x95	; 149
     9c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9cc:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <compassFlag+0x1>
     9d0:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <compassFlag>
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	0f 90       	pop	r0
     a02:	0b be       	out	0x3b, r0	; 59
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <TWIwaitUntilReady>:


void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
     a0e:	ec eb       	ldi	r30, 0xBC	; 188
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	88 23       	and	r24, r24
     a16:	ec f7       	brge	.-6      	; 0xa12 <TWIwaitUntilReady+0x4>
}
     a18:	08 95       	ret

00000a1a <checkCode>:


void checkCode(uint8_t code){
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	cf 5f       	subi	r28, 0xFF	; 255
     a24:	d1 09       	sbc	r29, r1
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     a30:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
	while (!(TWCR & (1 << TWINT)));
}


void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
     a34:	98 7f       	andi	r25, 0xF8	; 248
     a36:	89 17       	cp	r24, r25
     a38:	89 f0       	breq	.+34     	; 0xa5c <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     a3a:	80 e1       	ldi	r24, 0x10	; 16
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	b6 d3       	rcall	.+1900   	; 0x11ac <writeString>
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     a40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a44:	88 7f       	andi	r24, 0xF8	; 248
     a46:	40 e1       	ldi	r20, 0x10	; 16
     a48:	be 01       	movw	r22, r28
     a4a:	6f 5f       	subi	r22, 0xFF	; 255
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__itoa_ncheck>

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
     a54:	ab d3       	rcall	.+1878   	; 0x11ac <writeString>
		writeString("\n\n\r");
     a56:	8b e3       	ldi	r24, 0x3B	; 59
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	a8 d3       	rcall	.+1872   	; 0x11ac <writeString>
	}
}
     a5c:	c1 50       	subi	r28, 0x01	; 1
     a5e:	df 4f       	sbci	r29, 0xFF	; 255
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	c8 2f       	mov	r28, r24
     a84:	8b 01       	movw	r16, r22
	
	TWISendStart();
     a86:	0f 2e       	mov	r0, r31
     a88:	fc eb       	ldi	r31, 0xBC	; 188
     a8a:	cf 2e       	mov	r12, r31
     a8c:	d1 2c       	mov	r13, r1
     a8e:	f0 2d       	mov	r31, r0
     a90:	85 ea       	ldi	r24, 0xA5	; 165
     a92:	f6 01       	movw	r30, r12
     a94:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     a96:	bb df       	rcall	.-138    	; 0xa0e <TWIwaitUntilReady>
	checkCode(0x08);
     a98:	88 e0       	ldi	r24, 0x08	; 8
     a9a:	bf df       	rcall	.-130    	; 0xa1a <checkCode>
	
	TWIWrite((address << 1));
     a9c:	cc 0f       	add	r28, r28
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     a9e:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     aa2:	85 e8       	ldi	r24, 0x85	; 133
     aa4:	f6 01       	movw	r30, r12
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
     aa6:	80 83       	st	Z, r24
	checkCode(0x18);
     aa8:	b2 df       	rcall	.-156    	; 0xa0e <TWIwaitUntilReady>
     aaa:	88 e1       	ldi	r24, 0x18	; 24
     aac:	b6 df       	rcall	.-148    	; 0xa1a <checkCode>
     aae:	e8 01       	movw	r28, r16
     ab0:	0c 5e       	subi	r16, 0xEC	; 236
     ab2:	1f 4f       	sbci	r17, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fb eb       	ldi	r31, 0xBB	; 187
     ab8:	af 2e       	mov	r10, r31
     aba:	b1 2c       	mov	r11, r1
     abc:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     abe:	0f 2e       	mov	r0, r31
     ac0:	f5 e8       	ldi	r31, 0x85	; 133
     ac2:	ff 2e       	mov	r15, r31
     ac4:	f0 2d       	mov	r31, r0
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
     ac6:	89 91       	ld	r24, Y+
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     ac8:	f5 01       	movw	r30, r10
	TWISendTransmit();
     aca:	80 83       	st	Z, r24
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
     acc:	f6 01       	movw	r30, r12
     ace:	f0 82       	st	Z, r15
		checkCode(0x28);
     ad0:	9e df       	rcall	.-196    	; 0xa0e <TWIwaitUntilReady>
     ad2:	88 e2       	ldi	r24, 0x28	; 40
     ad4:	a2 df       	rcall	.-188    	; 0xa1a <checkCode>
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
     ad6:	c0 17       	cp	r28, r16
     ad8:	d1 07       	cpc	r29, r17
     ada:	a9 f7       	brne	.-22     	; 0xac6 <writeToSlave+0x56>
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
		checkCode(0x28);
	}
	
	TWISendStop();
     adc:	85 e9       	ldi	r24, 0x95	; 149
     ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	08 95       	ret

00000af6 <rp6DataConstructor>:
	arduinoData.distanceDrivenR = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
	arduinoData.totalDistance = (receiveDataTWI[9] << 8) + receiveDataTWI[10];
}


void rp6DataConstructor(){
     af6:	0f 93       	push	r16
     af8:	cf 93       	push	r28
	clearSendData();
     afa:	aa de       	rcall	.-684    	; 0x850 <clearSendData>
	
	sendDataTWI[0] = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     b02:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data>
     b06:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <rp6Data+0x1>
     b0a:	85 36       	cpi	r24, 0x65	; 101
     b0c:	91 05       	cpc	r25, r1
     b0e:	30 f0       	brcs	.+12     	; 0xb1c <rp6DataConstructor+0x26>
     b10:	84 e6       	ldi	r24, 0x64	; 100
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <rp6Data+0x1>
     b18:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     b1c:	a0 e7       	ldi	r26, 0x70	; 112
     b1e:	b3 e0       	ldi	r27, 0x03	; 3
     b20:	e4 e8       	ldi	r30, 0x84	; 132
     b22:	f3 e0       	ldi	r31, 0x03	; 3
     b24:	80 81       	ld	r24, Z
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	8c 93       	st	X, r24
     b2a:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     b2c:	82 81       	ldd	r24, Z+2	; 0x02
     b2e:	8f 5f       	subi	r24, 0xFF	; 255
     b30:	12 96       	adiw	r26, 0x02	; 2
     b32:	8c 93       	st	X, r24
     b34:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     b36:	83 81       	ldd	r24, Z+3	; 0x03
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	8c 93       	st	X, r24
     b3e:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     b40:	84 81       	ldd	r24, Z+4	; 0x04
     b42:	95 81       	ldd	r25, Z+5	; 0x05
     b44:	14 96       	adiw	r26, 0x04	; 4
     b46:	9c 93       	st	X, r25
     b48:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     b4a:	15 96       	adiw	r26, 0x05	; 5
     b4c:	8c 93       	st	X, r24
     b4e:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     b50:	86 81       	ldd	r24, Z+6	; 0x06
     b52:	97 81       	ldd	r25, Z+7	; 0x07
     b54:	16 96       	adiw	r26, 0x06	; 6
     b56:	9c 93       	st	X, r25
     b58:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     b5a:	17 96       	adiw	r26, 0x07	; 7
     b5c:	8c 93       	st	X, r24
     b5e:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     b60:	80 85       	ldd	r24, Z+8	; 0x08
     b62:	91 85       	ldd	r25, Z+9	; 0x09
     b64:	18 96       	adiw	r26, 0x08	; 8
     b66:	9c 93       	st	X, r25
     b68:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     b6a:	19 96       	adiw	r26, 0x09	; 9
     b6c:	8c 93       	st	X, r24
     b6e:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     b70:	82 85       	ldd	r24, Z+10	; 0x0a
     b72:	93 85       	ldd	r25, Z+11	; 0x0b
     b74:	1a 96       	adiw	r26, 0x0a	; 10
     b76:	9c 93       	st	X, r25
     b78:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     b7a:	1b 96       	adiw	r26, 0x0b	; 11
     b7c:	8c 93       	st	X, r24
     b7e:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     b80:	86 85       	ldd	r24, Z+14	; 0x0e
     b82:	1c 96       	adiw	r26, 0x0c	; 12
     b84:	8c 93       	st	X, r24
     b86:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     b88:	c7 85       	ldd	r28, Z+15	; 0x0f
     b8a:	30 89       	ldd	r19, Z+16	; 0x10
     b8c:	41 89       	ldd	r20, Z+17	; 0x11
     b8e:	52 89       	ldd	r21, Z+18	; 0x12
     b90:	63 89       	ldd	r22, Z+19	; 0x13
     b92:	74 89       	ldd	r23, Z+20	; 0x14
     b94:	2c 2f       	mov	r18, r28
     b96:	85 89       	ldd	r24, Z+21	; 0x15
     b98:	96 89       	ldd	r25, Z+22	; 0x16
     b9a:	08 e0       	ldi	r16, 0x08	; 8
     b9c:	d4 d7       	rcall	.+4008   	; 0x1b46 <__lshrdi3>
     b9e:	1d 96       	adiw	r26, 0x0d	; 13
     ba0:	2c 93       	st	X, r18
     ba2:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     ba4:	1e 96       	adiw	r26, 0x0e	; 14
     ba6:	cc 93       	st	X, r28
     ba8:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     baa:	1f 96       	adiw	r26, 0x0f	; 15
     bac:	1c 92       	st	X, r1
     bae:	1f 97       	sbiw	r26, 0x0f	; 15
     bb0:	50 96       	adiw	r26, 0x10	; 16
     bb2:	1c 92       	st	X, r1
     bb4:	50 97       	sbiw	r26, 0x10	; 16
     bb6:	51 96       	adiw	r26, 0x11	; 17
     bb8:	1c 92       	st	X, r1
     bba:	51 97       	sbiw	r26, 0x11	; 17
     bbc:	52 96       	adiw	r26, 0x12	; 18
     bbe:	1c 92       	st	X, r1
     bc0:	52 97       	sbiw	r26, 0x12	; 18
     bc2:	53 96       	adiw	r26, 0x13	; 19
     bc4:	1c 92       	st	X, r1
     bc6:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     bc8:	bd 01       	movw	r22, r26
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	51 df       	rcall	.-350    	; 0xa70 <writeToSlave>
}
     bce:	cf 91       	pop	r28
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <readFromCompass>:
	TWISendStop();
	
}


void readFromCompass(){
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
	compassFlag = 1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <compassFlag+0x1>
     be8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <compassFlag>
	TWISendStart();
     bec:	cc eb       	ldi	r28, 0xBC	; 188
     bee:	d0 e0       	ldi	r29, 0x00	; 0
     bf0:	05 ea       	ldi	r16, 0xA5	; 165
     bf2:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     bf4:	0c df       	rcall	.-488    	; 0xa0e <TWIwaitUntilReady>
	checkCode(0x08);
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	10 df       	rcall	.-480    	; 0xa1a <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     bfa:	0f 2e       	mov	r0, r31
     bfc:	fb eb       	ldi	r31, 0xBB	; 187
     bfe:	ef 2e       	mov	r14, r31
     c00:	f1 2c       	mov	r15, r1
     c02:	f0 2d       	mov	r31, r0
     c04:	80 ec       	ldi	r24, 0xC0	; 192
     c06:	f7 01       	movw	r30, r14
     c08:	80 83       	st	Z, r24
	TWISendTransmit();
     c0a:	15 e8       	ldi	r17, 0x85	; 133
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite(0xC0);
	TWIwaitUntilReady();
     c0c:	18 83       	st	Y, r17
	checkCode(0x18);
     c0e:	ff de       	rcall	.-514    	; 0xa0e <TWIwaitUntilReady>
     c10:	88 e1       	ldi	r24, 0x18	; 24
     c12:	03 df       	rcall	.-506    	; 0xa1a <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	f7 01       	movw	r30, r14
	TWISendTransmit();
     c18:	80 83       	st	Z, r24
	TWIWrite(0xC0);
	TWIwaitUntilReady();
	checkCode(0x18);
	
	TWIWrite(1);
	TWIwaitUntilReady();
     c1a:	18 83       	st	Y, r17
	checkCode(0x28);
     c1c:	f8 de       	rcall	.-528    	; 0xa0e <TWIwaitUntilReady>
     c1e:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     c20:	fc de       	rcall	.-520    	; 0xa1a <checkCode>
	TWIwaitUntilReady();
     c22:	08 83       	st	Y, r16
	checkCode(0x10);
     c24:	f4 de       	rcall	.-536    	; 0xa0e <TWIwaitUntilReady>
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	f8 de       	rcall	.-528    	; 0xa1a <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c2a:	81 ec       	ldi	r24, 0xC1	; 193
     c2c:	f7 01       	movw	r30, r14
     c2e:	80 83       	st	Z, r24
	TWISendTransmit();
     c30:	18 83       	st	Y, r17
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x10);
	
	TWIWrite(0xC1);
	TWIwaitUntilReady();
     c32:	ed de       	rcall	.-550    	; 0xa0e <TWIwaitUntilReady>
     c34:	df 91       	pop	r29
}
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	08 95       	ret

00000c42 <readFromSlave>:
     c42:	0f 93       	push	r16


void readFromSlave(uint8_t address){
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	c8 2f       	mov	r28, r24
	
	TWISendStart();
     c4a:	0c eb       	ldi	r16, 0xBC	; 188
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	85 ea       	ldi	r24, 0xA5	; 165
     c50:	f8 01       	movw	r30, r16
     c52:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     c54:	dc de       	rcall	.-584    	; 0xa0e <TWIwaitUntilReady>
	checkCode(0x08);
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	e0 de       	rcall	.-576    	; 0xa1a <checkCode>
	
	TWIWrite( (address << 1) + 1 );
     c5a:	cc 0f       	add	r28, r28
     c5c:	cf 5f       	subi	r28, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c5e:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     c62:	85 e8       	ldi	r24, 0x85	; 133
     c64:	f8 01       	movw	r30, r16
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite( (address << 1) + 1 );
	TWIwaitUntilReady();
     c66:	80 83       	st	Z, r24
     c68:	d2 de       	rcall	.-604    	; 0xa0e <TWIwaitUntilReady>
	
}
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <__vector_15>:
		break;
	}
}


ISR(TIMER2_OVF_vect){
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	0b b6       	in	r0, 0x3b	; 59
     c7e:	0f 92       	push	r0
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 4){
     c98:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <counter.2071>
     c9c:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <counter.2071+0x1>
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	91 05       	cpc	r25, r1
     ca4:	11 f4       	brne	.+4      	; 0xcaa <__vector_15+0x38>
		rp6DataConstructor();
     ca6:	27 df       	rcall	.-434    	; 0xaf6 <rp6DataConstructor>
     ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <__vector_15+0x52>
	}else if(counter == 8){
     caa:	88 30       	cpi	r24, 0x08	; 8
     cac:	91 05       	cpc	r25, r1
		readFromCompass();
     cae:	11 f4       	brne	.+4      	; 0xcb4 <__vector_15+0x42>
     cb0:	91 df       	rcall	.-222    	; 0xbd4 <readFromCompass>
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <__vector_15+0x52>
	}else if(counter >= 12){
     cb4:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromSlave(RP6_ADDRESS);
     cb6:	34 f0       	brlt	.+12     	; 0xcc4 <__vector_15+0x52>
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	c3 df       	rcall	.-122    	; 0xc42 <readFromSlave>
		counter = 0;
     cbc:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <counter.2071+0x1>
     cc0:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <counter.2071>
	}
	
	counter++;
     cc4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <counter.2071>
     cc8:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <counter.2071+0x1>
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <counter.2071+0x1>
     cd2:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <counter.2071>
}
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0b be       	out	0x3b, r0	; 59
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <turnSignal>:
	TWIwaitUntilReady();
	
}


void turnSignal(){
     cfc:	4f 92       	push	r4
     cfe:	5f 92       	push	r5
     d00:	6f 92       	push	r6
     d02:	7f 92       	push	r7
     d04:	8f 92       	push	r8
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
     d18:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     d1a:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     d1c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     d20:	8f 3f       	cpi	r24, 0xFF	; 255
     d22:	a9 f5       	brne	.+106    	; 0xd8e <turnSignal+0x92>
		if(turnSignalStart < micros()){
     d24:	40 90 18 03 	lds	r4, 0x0318	; 0x800318 <__data_end>
     d28:	50 90 19 03 	lds	r5, 0x0319	; 0x800319 <__data_end+0x1>
     d2c:	60 90 1a 03 	lds	r6, 0x031A	; 0x80031a <__data_end+0x2>
     d30:	70 90 1b 03 	lds	r7, 0x031B	; 0x80031b <__data_end+0x3>
     d34:	b0 dc       	rcall	.-1696   	; 0x696 <micros>
     d36:	f2 2f       	mov	r31, r18
     d38:	e3 2f       	mov	r30, r19
     d3a:	c4 2e       	mov	r12, r20
     d3c:	d5 2e       	mov	r13, r21
     d3e:	e6 2e       	mov	r14, r22
     d40:	f7 2e       	mov	r15, r23
     d42:	08 2f       	mov	r16, r24
     d44:	19 2f       	mov	r17, r25
     d46:	24 2d       	mov	r18, r4
     d48:	35 2d       	mov	r19, r5
     d4a:	46 2d       	mov	r20, r6
     d4c:	57 2d       	mov	r21, r7
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	af 2e       	mov	r10, r31
     d58:	be 2e       	mov	r11, r30
     d5a:	2f d7       	rcall	.+3678   	; 0x1bba <__cmpdi2>
     d5c:	c0 f4       	brcc	.+48     	; 0xd8e <turnSignal+0x92>
			PORTC ^= (1 << PINC1);	
     d5e:	98 b1       	in	r25, 0x08	; 8
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
     d64:	88 b9       	out	0x08, r24	; 8
     d66:	97 dc       	rcall	.-1746   	; 0x696 <micros>
     d68:	82 2e       	mov	r8, r18
     d6a:	93 2e       	mov	r9, r19
     d6c:	a4 2e       	mov	r10, r20
     d6e:	b5 2e       	mov	r11, r21
     d70:	80 e2       	ldi	r24, 0x20	; 32
     d72:	88 0e       	add	r8, r24
     d74:	81 ea       	ldi	r24, 0xA1	; 161
     d76:	98 1e       	adc	r9, r24
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	a8 1e       	adc	r10, r24
     d7c:	b1 1c       	adc	r11, r1
     d7e:	80 92 18 03 	sts	0x0318, r8	; 0x800318 <__data_end>
     d82:	90 92 19 03 	sts	0x0319, r9	; 0x800319 <__data_end+0x1>
     d86:	a0 92 1a 03 	sts	0x031A, r10	; 0x80031a <__data_end+0x2>
     d8a:	b0 92 1b 03 	sts	0x031B, r11	; 0x80031b <__data_end+0x3>
		}
	}
	if(rp6Data.turnDirection == 1){
     d8e:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	a1 f5       	brne	.+104    	; 0xdfe <turnSignal+0x102>
		if(turnSignalStart < micros()){
     d96:	40 90 18 03 	lds	r4, 0x0318	; 0x800318 <__data_end>
     d9a:	50 90 19 03 	lds	r5, 0x0319	; 0x800319 <__data_end+0x1>
     d9e:	60 90 1a 03 	lds	r6, 0x031A	; 0x80031a <__data_end+0x2>
     da2:	70 90 1b 03 	lds	r7, 0x031B	; 0x80031b <__data_end+0x3>
     da6:	77 dc       	rcall	.-1810   	; 0x696 <micros>
     da8:	f2 2f       	mov	r31, r18
     daa:	e3 2f       	mov	r30, r19
     dac:	c4 2e       	mov	r12, r20
     dae:	d5 2e       	mov	r13, r21
     db0:	e6 2e       	mov	r14, r22
     db2:	f7 2e       	mov	r15, r23
     db4:	08 2f       	mov	r16, r24
     db6:	19 2f       	mov	r17, r25
     db8:	24 2d       	mov	r18, r4
     dba:	35 2d       	mov	r19, r5
     dbc:	46 2d       	mov	r20, r6
     dbe:	57 2d       	mov	r21, r7
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	af 2e       	mov	r10, r31
     dca:	be 2e       	mov	r11, r30
     dcc:	f6 d6       	rcall	.+3564   	; 0x1bba <__cmpdi2>
     dce:	b8 f4       	brcc	.+46     	; 0xdfe <turnSignal+0x102>
			PORTD ^= (1 << PIND7);
     dd0:	8b b1       	in	r24, 0x0b	; 11
     dd2:	80 58       	subi	r24, 0x80	; 128
     dd4:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     dd6:	5f dc       	rcall	.-1858   	; 0x696 <micros>
     dd8:	82 2e       	mov	r8, r18
     dda:	93 2e       	mov	r9, r19
     ddc:	a4 2e       	mov	r10, r20
     dde:	b5 2e       	mov	r11, r21
     de0:	80 e2       	ldi	r24, 0x20	; 32
     de2:	88 0e       	add	r8, r24
     de4:	81 ea       	ldi	r24, 0xA1	; 161
     de6:	98 1e       	adc	r9, r24
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	a8 1e       	adc	r10, r24
     dec:	b1 1c       	adc	r11, r1
     dee:	80 92 18 03 	sts	0x0318, r8	; 0x800318 <__data_end>
     df2:	90 92 19 03 	sts	0x0319, r9	; 0x800319 <__data_end+0x1>
     df6:	a0 92 1a 03 	sts	0x031A, r10	; 0x80031a <__data_end+0x2>
     dfa:	b0 92 1b 03 	sts	0x031B, r11	; 0x80031b <__data_end+0x3>
     dfe:	1f 91       	pop	r17
		}
	}
}
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	bf 90       	pop	r11
     e0c:	af 90       	pop	r10
     e0e:	9f 90       	pop	r9
     e10:	8f 90       	pop	r8
     e12:	7f 90       	pop	r7
     e14:	6f 90       	pop	r6
     e16:	5f 90       	pop	r5
     e18:	4f 90       	pop	r4
     e1a:	08 95       	ret

00000e1c <main>:
     e1c:	78 94       	sei
*/

int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
     e1e:	dd db       	rcall	.-2118   	; 0x5da <init_micros>
	init_USART();
     e20:	dd d9       	rcall	.-3142   	; 0x1dc <init_USART>
	init_TWI();
     e22:	9b dc       	rcall	.-1738   	; 0x75a <init_TWI>
	init_TWI_Timer2();
     e24:	a3 dc       	rcall	.-1722   	; 0x76c <init_TWI_Timer2>
	initBackBeep();
     e26:	f2 d1       	rcall	.+996    	; 0x120c <initBackBeep>
	init_rp6Data();
     e28:	b5 dc       	rcall	.-1686   	; 0x794 <init_rp6Data>
     e2a:	ad dc       	rcall	.-1702   	; 0x786 <init_arduinoData>
	init_arduinoData();
     e2c:	00 d2       	rcall	.+1024   	; 0x122e <initTimer>
     e2e:	d6 d9       	rcall	.-3156   	; 0x1dc <init_USART>
	initTimer();
     e30:	0f 2e       	mov	r0, r31
	init_USART();
     e32:	f4 e8       	ldi	r31, 0x84	; 132
     e34:	2f 2e       	mov	r2, r31
		if (ultrasonicSensorTimer < micros()) {
			writeString("\f\r");
			writeString("Distance to object: ");
			writeInt(ultrasonicSensor());
			writeString("mm\n\rCompass Angle: ");
			writeInt(rp6Data.compassAngle);
     e36:	f3 e0       	ldi	r31, 0x03	; 3
     e38:	3f 2e       	mov	r3, r31
     e3a:	f0 2d       	mov	r31, r0
     e3c:	5f df       	rcall	.-322    	; 0xcfc <turnSignal>
     e3e:	40 90 46 03 	lds	r4, 0x0346	; 0x800346 <ultrasonicSensorTimer>
	initTimer();
	init_USART();
	//-----------------------
	
	while (1){
		turnSignal();
     e42:	50 90 47 03 	lds	r5, 0x0347	; 0x800347 <ultrasonicSensorTimer+0x1>
		
		if(runParcour){
			hardcoreParcour();
		}
		
		if (ultrasonicSensorTimer < micros()) {
     e46:	60 90 48 03 	lds	r6, 0x0348	; 0x800348 <ultrasonicSensorTimer+0x2>
     e4a:	70 90 49 03 	lds	r7, 0x0349	; 0x800349 <ultrasonicSensorTimer+0x3>
     e4e:	23 dc       	rcall	.-1978   	; 0x696 <micros>
     e50:	f2 2f       	mov	r31, r18
     e52:	e3 2f       	mov	r30, r19
     e54:	c4 2e       	mov	r12, r20
     e56:	d5 2e       	mov	r13, r21
     e58:	e6 2e       	mov	r14, r22
     e5a:	f7 2e       	mov	r15, r23
     e5c:	08 2f       	mov	r16, r24
     e5e:	19 2f       	mov	r17, r25
     e60:	24 2d       	mov	r18, r4
     e62:	35 2d       	mov	r19, r5
     e64:	46 2d       	mov	r20, r6
     e66:	57 2d       	mov	r21, r7
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	af 2e       	mov	r10, r31
     e72:	be 2e       	mov	r11, r30
     e74:	a2 d6       	rcall	.+3396   	; 0x1bba <__cmpdi2>
     e76:	08 f0       	brcs	.+2      	; 0xe7a <main+0x5e>
     e78:	88 c0       	rjmp	.+272    	; 0xf8a <main+0x16e>
			writeString("\f\r");
     e7a:	8f e3       	ldi	r24, 0x3F	; 63
     e7c:	92 e0       	ldi	r25, 0x02	; 2
     e7e:	96 d1       	rcall	.+812    	; 0x11ac <writeString>
			writeString("Distance to object: ");
     e80:	82 e4       	ldi	r24, 0x42	; 66
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	93 d1       	rcall	.+806    	; 0x11ac <writeString>
			writeInt(ultrasonicSensor());
     e86:	dd d1       	rcall	.+954    	; 0x1242 <ultrasonicSensor>
     e88:	a6 d1       	rcall	.+844    	; 0x11d6 <writeInt>
     e8a:	87 e5       	ldi	r24, 0x57	; 87
			writeString("mm\n\rCompass Angle: ");
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	8e d1       	rcall	.+796    	; 0x11ac <writeString>
     e90:	f1 01       	movw	r30, r2
			writeInt(rp6Data.compassAngle);
     e92:	87 85       	ldd	r24, Z+15	; 0x0f
     e94:	90 89       	ldd	r25, Z+16	; 0x10
     e96:	9f d1       	rcall	.+830    	; 0x11d6 <writeInt>
     e98:	8b e6       	ldi	r24, 0x6B	; 107
     e9a:	92 e0       	ldi	r25, 0x02	; 2
			writeString(" degrees");
     e9c:	87 d1       	rcall	.+782    	; 0x11ac <writeString>
     e9e:	84 e7       	ldi	r24, 0x74	; 116
     ea0:	92 e0       	ldi	r25, 0x02	; 2
			writeString("\n\n\rSpeed: ");
     ea2:	84 d1       	rcall	.+776    	; 0x11ac <writeString>
     ea4:	f1 01       	movw	r30, r2
     ea6:	80 81       	ld	r24, Z
			writeInt(rp6Data.driveSpeed);
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	95 d1       	rcall	.+810    	; 0x11d6 <writeInt>
     eac:	8f e7       	ldi	r24, 0x7F	; 127
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	7d d1       	rcall	.+762    	; 0x11ac <writeString>
			writeString("%\n\n\rDirection: ");
     eb2:	f1 01       	movw	r30, r2
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	81 30       	cpi	r24, 0x01	; 1
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
     eb8:	21 f4       	brne	.+8      	; 0xec2 <main+0xa6>
     eba:	8f e8       	ldi	r24, 0x8F	; 143
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	76 d1       	rcall	.+748    	; 0x11ac <writeString>
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <main+0xbc>
     ec2:	81 11       	cpse	r24, r1
     ec4:	04 c0       	rjmp	.+8      	; 0xece <main+0xb2>
     ec6:	89 e9       	ldi	r24, 0x99	; 153
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	70 d1       	rcall	.+736    	; 0x11ac <writeString>
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <main+0xbc>
     ece:	8f 3f       	cpi	r24, 0xFF	; 255
     ed0:	19 f4       	brne	.+6      	; 0xed8 <main+0xbc>
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
     ed2:	86 ea       	ldi	r24, 0xA6	; 166
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	6a d1       	rcall	.+724    	; 0x11ac <writeString>
     ed8:	f1 01       	movw	r30, r2
     eda:	83 81       	ldd	r24, Z+3	; 0x03
			if(rp6Data.turnDirection == -1) writeString("turning left");
     edc:	8f 3f       	cpi	r24, 0xFF	; 255
     ede:	21 f4       	brne	.+8      	; 0xee8 <main+0xcc>
     ee0:	82 eb       	ldi	r24, 0xB2	; 178
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	63 d1       	rcall	.+710    	; 0x11ac <writeString>
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <main+0xe2>
     ee8:	81 11       	cpse	r24, r1
			else if(rp6Data.turnDirection == 0) writeString("going straight");
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <main+0xd8>
     eec:	8f eb       	ldi	r24, 0xBF	; 191
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	5d d1       	rcall	.+698    	; 0x11ac <writeString>
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <main+0xe2>
			else if(rp6Data.turnDirection == 1) writeString("turning right");
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	19 f4       	brne	.+6      	; 0xefe <main+0xe2>
     ef8:	8e ec       	ldi	r24, 0xCE	; 206
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	57 d1       	rcall	.+686    	; 0x11ac <writeString>
			writeString("\n\rAcceleration rate: ");
     efe:	8c ed       	ldi	r24, 0xDC	; 220
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	54 d1       	rcall	.+680    	; 0x11ac <writeString>
     f04:	f1 01       	movw	r30, r2
			writeInt(rp6Data.accelerationRate);
     f06:	84 81       	ldd	r24, Z+4	; 0x04
     f08:	95 81       	ldd	r25, Z+5	; 0x05
     f0a:	65 d1       	rcall	.+714    	; 0x11d6 <writeInt>
     f0c:	82 ef       	ldi	r24, 0xF2	; 242
			writeString("\n\rTurn rate: ");
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	4d d1       	rcall	.+666    	; 0x11ac <writeString>
     f12:	f1 01       	movw	r30, r2
     f14:	86 81       	ldd	r24, Z+6	; 0x06
			writeInt(rp6Data.turnRate);
     f16:	97 81       	ldd	r25, Z+7	; 0x07
     f18:	5e d1       	rcall	.+700    	; 0x11d6 <writeInt>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	93 e0       	ldi	r25, 0x03	; 3
			
			writeString("\n\n\rCommand: ");
     f1e:	46 d1       	rcall	.+652    	; 0x11ac <writeString>
     f20:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
     f24:	3b d1       	rcall	.+630    	; 0x119c <writeChar>
			writeChar(USARTcommand);
     f26:	8d e0       	ldi	r24, 0x0D	; 13
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	40 d1       	rcall	.+640    	; 0x11ac <writeString>
     f2c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
			writeString("\n\rValue: ");			
     f30:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     f34:	99 23       	and	r25, r25
			if(USARTinputPos >= 0){
     f36:	84 f0       	brlt	.+32     	; 0xf58 <main+0x13c>
     f38:	0b e9       	ldi	r16, 0x9B	; 155
     f3a:	13 e0       	ldi	r17, 0x03	; 3
     f3c:	c0 e0       	ldi	r28, 0x00	; 0
     f3e:	d0 e0       	ldi	r29, 0x00	; 0
     f40:	f8 01       	movw	r30, r16
     f42:	81 91       	ld	r24, Z+
     f44:	8f 01       	movw	r16, r30
     f46:	2a d1       	rcall	.+596    	; 0x119c <writeChar>
     f48:	21 96       	adiw	r28, 0x01	; 1
				for(int i = 0; i <= USARTinputPos; i++){
					writeChar(USARTinput[i]);
     f4a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     f4e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     f52:	8c 17       	cp	r24, r28
			
			writeString("\n\n\rCommand: ");
			writeChar(USARTcommand);
			writeString("\n\rValue: ");			
			if(USARTinputPos >= 0){
				for(int i = 0; i <= USARTinputPos; i++){
     f54:	9d 07       	cpc	r25, r29
     f56:	a4 f7       	brge	.-24     	; 0xf40 <main+0x124>
     f58:	9e db       	rcall	.-2244   	; 0x696 <micros>
     f5a:	82 2e       	mov	r8, r18
     f5c:	93 2e       	mov	r9, r19
     f5e:	a4 2e       	mov	r10, r20
     f60:	b5 2e       	mov	r11, r21
					writeChar(USARTinput[i]);
				}
			}
			
			ultrasonicSensorTimer = micros() + ultrasonicSensorSpeed;
     f62:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ultrasonicSensorSpeed>
     f66:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ultrasonicSensorSpeed+0x1>
     f6a:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ultrasonicSensorSpeed+0x2>
     f6e:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ultrasonicSensorSpeed+0x3>
     f72:	88 0e       	add	r8, r24
     f74:	99 1e       	adc	r9, r25
     f76:	aa 1e       	adc	r10, r26
     f78:	bb 1e       	adc	r11, r27
     f7a:	80 92 46 03 	sts	0x0346, r8	; 0x800346 <ultrasonicSensorTimer>
     f7e:	90 92 47 03 	sts	0x0347, r9	; 0x800347 <ultrasonicSensorTimer+0x1>
     f82:	a0 92 48 03 	sts	0x0348, r10	; 0x800348 <ultrasonicSensorTimer+0x2>
     f86:	b0 92 49 03 	sts	0x0349, r11	; 0x800349 <ultrasonicSensorTimer+0x3>
     f8a:	40 90 42 03 	lds	r4, 0x0342	; 0x800342 <stoptimer>
     f8e:	50 90 43 03 	lds	r5, 0x0343	; 0x800343 <stoptimer+0x1>
     f92:	60 90 44 03 	lds	r6, 0x0344	; 0x800344 <stoptimer+0x2>
		}
		
		if(stoptimer < micros()){
     f96:	70 90 45 03 	lds	r7, 0x0345	; 0x800345 <stoptimer+0x3>
     f9a:	7d db       	rcall	.-2310   	; 0x696 <micros>
     f9c:	f2 2f       	mov	r31, r18
     f9e:	e3 2f       	mov	r30, r19
     fa0:	c4 2e       	mov	r12, r20
     fa2:	d5 2e       	mov	r13, r21
     fa4:	e6 2e       	mov	r14, r22
     fa6:	f7 2e       	mov	r15, r23
     fa8:	08 2f       	mov	r16, r24
     faa:	19 2f       	mov	r17, r25
     fac:	24 2d       	mov	r18, r4
     fae:	35 2d       	mov	r19, r5
     fb0:	46 2d       	mov	r20, r6
     fb2:	57 2d       	mov	r21, r7
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	af 2e       	mov	r10, r31
     fbe:	be 2e       	mov	r11, r30
     fc0:	fc d5       	rcall	.+3064   	; 0x1bba <__cmpdi2>
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <main+0x1aa>
     fc4:	9c c0       	rjmp	.+312    	; 0x10fe <main+0x2e2>
     fc6:	e6 e6       	ldi	r30, 0x66	; 102
     fc8:	f3 e0       	ldi	r31, 0x03	; 3
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	89 2b       	or	r24, r25
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <main+0x1bc>
			
			if(arduinoData.bumperFlag) {
     fd2:	f1 01       	movw	r30, r2
     fd4:	11 82       	std	Z+1, r1	; 0x01
     fd6:	10 82       	st	Z, r1
     fd8:	34 d1       	rcall	.+616    	; 0x1242 <ultrasonicSensor>
     fda:	81 39       	cpi	r24, 0x91	; 145
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
				rp6Data.driveSpeed = 0;
     fde:	9f 07       	cpc	r25, r31
     fe0:	78 f0       	brcs	.+30     	; 0x1000 <main+0x1e4>
     fe2:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <stopState.2033>
			}
			
			uint16_t distance = ultrasonicSensor();
     fe6:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <stopState.2033+0x1>
			static int stopState = 0;
			static uint16_t tempAcceleration;
			
			if(distance > 400 && stopState == 1){
     fea:	21 30       	cpi	r18, 0x01	; 1
     fec:	31 05       	cpc	r19, r1
     fee:	41 f4       	brne	.+16     	; 0x1000 <main+0x1e4>
     ff0:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <tempAcceleration.2034>
     ff4:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <tempAcceleration.2034+0x1>
     ff8:	f1 01       	movw	r30, r2
     ffa:	35 83       	std	Z+5, r19	; 0x05
     ffc:	24 83       	std	Z+4, r18	; 0x04
				rp6Data.accelerationRate = tempAcceleration;
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <main+0x202>
    1000:	8d 32       	cpi	r24, 0x2D	; 45
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	9f 07       	cpc	r25, r31
    1006:	58 f0       	brcs	.+22     	; 0x101e <main+0x202>
    1008:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <stopState.2033>
    100c:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <stopState.2033+0x1>
			}else if(distance > 300 && stopState == 2){
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	21 f4       	brne	.+8      	; 0x101e <main+0x202>
    1016:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <stopState.2033+0x1>
    101a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <stopState.2033>
    101e:	9c 01       	movw	r18, r24
    1020:	2d 52       	subi	r18, 0x2D	; 45
    1022:	31 40       	sbci	r19, 0x01	; 1
				stopState = 0;
    1024:	23 36       	cpi	r18, 0x63	; 99
    1026:	31 05       	cpc	r19, r1
    1028:	70 f4       	brcc	.+28     	; 0x1046 <main+0x22a>
    102a:	f1 01       	movw	r30, r2
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
    102c:	20 81       	ld	r18, Z
    102e:	31 81       	ldd	r19, Z+1	; 0x01
    1030:	29 32       	cpi	r18, 0x29	; 41
    1032:	31 05       	cpc	r19, r1
    1034:	40 f0       	brcs	.+16     	; 0x1046 <main+0x22a>
    1036:	22 81       	ldd	r18, Z+2	; 0x02
    1038:	21 30       	cpi	r18, 0x01	; 1
    103a:	29 f4       	brne	.+10     	; 0x1046 <main+0x22a>
    103c:	88 e2       	ldi	r24, 0x28	; 40
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
    1044:	43 c0       	rjmp	.+134    	; 0x10cc <main+0x2b0>
    1046:	9c 01       	movw	r18, r24
    1048:	26 55       	subi	r18, 0x56	; 86
				rp6Data.driveSpeed = 40;
    104a:	31 09       	sbc	r19, r1
    104c:	26 3d       	cpi	r18, 0xD6	; 214
    104e:	31 05       	cpc	r19, r1
    1050:	70 f4       	brcc	.+28     	; 0x106e <main+0x252>
    1052:	f1 01       	movw	r30, r2
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
    1054:	20 81       	ld	r18, Z
    1056:	31 81       	ldd	r19, Z+1	; 0x01
    1058:	2a 31       	cpi	r18, 0x1A	; 26
    105a:	31 05       	cpc	r19, r1
    105c:	40 f0       	brcs	.+16     	; 0x106e <main+0x252>
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f5       	brne	.+104    	; 0x10cc <main+0x2b0>
    1064:	89 e1       	ldi	r24, 0x19	; 25
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24
    106c:	2f c0       	rjmp	.+94     	; 0x10cc <main+0x2b0>
    106e:	85 35       	cpi	r24, 0x55	; 85
    1070:	91 05       	cpc	r25, r1
				rp6Data.driveSpeed = 25;
    1072:	60 f5       	brcc	.+88     	; 0x10cc <main+0x2b0>
    1074:	f1 01       	movw	r30, r2
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	41 f5       	brne	.+80     	; 0x10cc <main+0x2b0>
			}else if(distance < 85 && rp6Data.driveDirection == 1){
    107c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <stopState.2033>
    1080:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <stopState.2033+0x1>
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	99 f4       	brne	.+38     	; 0x10ae <main+0x292>
    1088:	84 81       	ldd	r24, Z+4	; 0x04
				if(stopState == 0){
    108a:	95 81       	ldd	r25, Z+5	; 0x05
    108c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <tempAcceleration.2034+0x1>
    1090:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <tempAcceleration.2034>
					tempAcceleration = rp6Data.accelerationRate;
    1094:	88 e8       	ldi	r24, 0x88	; 136
    1096:	93 e1       	ldi	r25, 0x13	; 19
    1098:	95 83       	std	Z+5, r25	; 0x05
    109a:	84 83       	std	Z+4, r24	; 0x04
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
					rp6Data.accelerationRate = 5000;
    10a0:	e1 e0       	ldi	r30, 0x01	; 1
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	f0 93 23 03 	sts	0x0323, r31	; 0x800323 <stopState.2033+0x1>
					rp6Data.driveSpeed = 0;
    10a8:	e0 93 22 03 	sts	0x0322, r30	; 0x800322 <stopState.2033>
					stopState = 1;
    10ac:	0f c0       	rjmp	.+30     	; 0x10cc <main+0x2b0>
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	69 f4       	brne	.+26     	; 0x10cc <main+0x2b0>
    10b2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <tempAcceleration.2034>
    10b6:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <tempAcceleration.2034+0x1>
				}else if(stopState == 1){
    10ba:	f1 01       	movw	r30, r2
    10bc:	95 83       	std	Z+5, r25	; 0x05
					rp6Data.accelerationRate = tempAcceleration;
    10be:	84 83       	std	Z+4, r24	; 0x04
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <stopState.2033+0x1>
    10c8:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <stopState.2033>
					stopState = 2;
    10cc:	e4 da       	rcall	.-2616   	; 0x696 <micros>
    10ce:	82 2e       	mov	r8, r18
    10d0:	93 2e       	mov	r9, r19
    10d2:	a4 2e       	mov	r10, r20
    10d4:	b5 2e       	mov	r11, r21
				}
			}
			
			stoptimer = micros() + stoptimerspeed;
    10d6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <stoptimerspeed>
    10da:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <stoptimerspeed+0x1>
    10de:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <stoptimerspeed+0x2>
    10e2:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <stoptimerspeed+0x3>
    10e6:	88 0e       	add	r8, r24
    10e8:	99 1e       	adc	r9, r25
    10ea:	aa 1e       	adc	r10, r26
    10ec:	bb 1e       	adc	r11, r27
    10ee:	80 92 42 03 	sts	0x0342, r8	; 0x800342 <stoptimer>
    10f2:	90 92 43 03 	sts	0x0343, r9	; 0x800343 <stoptimer+0x1>
    10f6:	a0 92 44 03 	sts	0x0344, r10	; 0x800344 <stoptimer+0x2>
    10fa:	b0 92 45 03 	sts	0x0345, r11	; 0x800345 <stoptimer+0x3>
    10fe:	40 90 3e 03 	lds	r4, 0x033E	; 0x80033e <backBeepTimer>
    1102:	50 90 3f 03 	lds	r5, 0x033F	; 0x80033f <backBeepTimer+0x1>
    1106:	60 90 40 03 	lds	r6, 0x0340	; 0x800340 <backBeepTimer+0x2>
		}
		
		if (backBeepTimer < micros()) {
    110a:	70 90 41 03 	lds	r7, 0x0341	; 0x800341 <backBeepTimer+0x3>
    110e:	c3 da       	rcall	.-2682   	; 0x696 <micros>
    1110:	f2 2f       	mov	r31, r18
    1112:	e3 2f       	mov	r30, r19
    1114:	c4 2e       	mov	r12, r20
    1116:	d5 2e       	mov	r13, r21
    1118:	e6 2e       	mov	r14, r22
    111a:	f7 2e       	mov	r15, r23
    111c:	08 2f       	mov	r16, r24
    111e:	19 2f       	mov	r17, r25
    1120:	24 2d       	mov	r18, r4
    1122:	35 2d       	mov	r19, r5
    1124:	46 2d       	mov	r20, r6
    1126:	57 2d       	mov	r21, r7
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	af 2e       	mov	r10, r31
    1132:	be 2e       	mov	r11, r30
    1134:	42 d5       	rcall	.+2692   	; 0x1bba <__cmpdi2>
    1136:	08 f0       	brcs	.+2      	; 0x113a <main+0x31e>
    1138:	81 ce       	rjmp	.-766    	; 0xe3c <main+0x20>
    113a:	f1 01       	movw	r30, r2
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	8f 3f       	cpi	r24, 0xFF	; 255
    1140:	21 f4       	brne	.+8      	; 0x114a <main+0x32e>
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
			if ((rp6Data.driveDirection == -1 && rp6Data.driveSpeed > 20)  || arduinoData.bumperFlag) {
    1146:	45 97       	sbiw	r24, 0x15	; 21
    1148:	38 f4       	brcc	.+14     	; 0x1158 <main+0x33c>
    114a:	e6 e6       	ldi	r30, 0x66	; 102
    114c:	f3 e0       	ldi	r31, 0x03	; 3
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	89 2b       	or	r24, r25
    1154:	09 f4       	brne	.+2      	; 0x1158 <main+0x33c>
    1156:	72 ce       	rjmp	.-796    	; 0xe3c <main+0x20>
    1158:	e1 e0       	ldi	r30, 0x01	; 1
    115a:	f1 e0       	ldi	r31, 0x01	; 1
    115c:	80 81       	ld	r24, Z
    115e:	f8 e0       	ldi	r31, 0x08	; 8
    1160:	8f 27       	eor	r24, r31
    1162:	e1 e0       	ldi	r30, 0x01	; 1
				DDRH ^= (1 << BEEPER);
    1164:	f1 e0       	ldi	r31, 0x01	; 1
    1166:	80 83       	st	Z, r24
    1168:	96 da       	rcall	.-2772   	; 0x696 <micros>
    116a:	82 2e       	mov	r8, r18
    116c:	93 2e       	mov	r9, r19
    116e:	a4 2e       	mov	r10, r20
    1170:	b5 2e       	mov	r11, r21
    1172:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <backBeepSpeed>
				backBeepTimer = micros() + backBeepSpeed;
    1176:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <backBeepSpeed+0x1>
    117a:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <backBeepSpeed+0x2>
    117e:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <backBeepSpeed+0x3>
    1182:	88 0e       	add	r8, r24
    1184:	99 1e       	adc	r9, r25
    1186:	aa 1e       	adc	r10, r26
    1188:	bb 1e       	adc	r11, r27
    118a:	80 92 3e 03 	sts	0x033E, r8	; 0x80033e <backBeepTimer>
    118e:	90 92 3f 03 	sts	0x033F, r9	; 0x80033f <backBeepTimer+0x1>
    1192:	a0 92 40 03 	sts	0x0340, r10	; 0x800340 <backBeepTimer+0x2>
    1196:	b0 92 41 03 	sts	0x0341, r11	; 0x800341 <backBeepTimer+0x3>
    119a:	50 ce       	rjmp	.-864    	; 0xe3c <main+0x20>

0000119c <writeChar>:
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
    119c:	e0 ec       	ldi	r30, 0xC0	; 192
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	90 81       	ld	r25, Z
    11a2:	95 ff       	sbrs	r25, 5
    11a4:	fd cf       	rjmp	.-6      	; 0x11a0 <writeChar+0x4>
	UDR0 = x;
    11a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    11aa:	08 95       	ret

000011ac <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    11b4:	80 81       	ld	r24, Z
    11b6:	88 23       	and	r24, r24
    11b8:	51 f0       	breq	.+20     	; 0x11ce <writeString+0x22>
    11ba:	8f 01       	movw	r16, r30
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    11be:	ee df       	rcall	.-36     	; 0x119c <writeChar>
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    11c0:	cf 5f       	subi	r28, 0xFF	; 255
    11c2:	f8 01       	movw	r30, r16
    11c4:	ec 0f       	add	r30, r28
    11c6:	f1 1d       	adc	r31, r1
    11c8:	80 81       	ld	r24, Z
    11ca:	81 11       	cpse	r24, r1
    11cc:	f8 cf       	rjmp	.-16     	; 0x11be <writeString+0x12>
		writeChar( st[i] );
	}
}
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	28 97       	sbiw	r28, 0x08	; 8
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	4a e0       	ldi	r20, 0x0A	; 10
    11ec:	be 01       	movw	r22, r28
    11ee:	6f 5f       	subi	r22, 0xFF	; 255
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	fb d4       	rcall	.+2550   	; 0x1bea <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	d9 df       	rcall	.-78     	; 0x11ac <writeString>
}
    11fa:	28 96       	adiw	r28, 0x08	; 8
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <initBackBeep>:

#define PRESCALER 256

void initBackBeep() {
	
	TCCR4A |= (1 << COM4A0);				//Toggle OC1A on match
    120c:	e0 ea       	ldi	r30, 0xA0	; 160
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 64       	ori	r24, 0x40	; 64
    1214:	80 83       	st	Z, r24
	TCCR4B |= (1 << CS42) | (1 << WGM42);	//Prescaler 256, CTC mode
    1216:	e1 ea       	ldi	r30, 0xA1	; 161
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8c 60       	ori	r24, 0x0C	; 12
    121e:	80 83       	st	Z, r24
	OCR4A = freqToOCR(BEEP_FREQ);
    1220:	8e e4       	ldi	r24, 0x4E	; 78
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1228:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    122c:	08 95       	ret

0000122e <initTimer>:
#define PORT_REGISTER PORTL
#define PIN_REGISTER PINL

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
    122e:	e1 e8       	ldi	r30, 0x81	; 129
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	82 60       	ori	r24, 0x02	; 2
    1236:	80 83       	st	Z, r24
	TCNT1 = 0;
    1238:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    123c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1240:	08 95       	ret

00001242 <ultrasonicSensor>:
}

int ultrasonicSensor() {
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    1246:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    124a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER); //Set TRIGGER pin as output
    124e:	aa e0       	ldi	r26, 0x0A	; 10
    1250:	b1 e0       	ldi	r27, 0x01	; 1
    1252:	8c 91       	ld	r24, X
    1254:	82 60       	ori	r24, 0x02	; 2
    1256:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    1258:	eb e0       	ldi	r30, 0x0B	; 11
    125a:	f1 e0       	ldi	r31, 0x01	; 1
    125c:	80 81       	ld	r24, Z
    125e:	8d 7f       	andi	r24, 0xFD	; 253
    1260:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	2a 95       	dec	r18
    1266:	f1 f7       	brne	.-4      	; 0x1264 <ultrasonicSensor+0x22>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    126a:	80 81       	ld	r24, Z
    126c:	82 60       	ori	r24, 0x02	; 2
    126e:	80 83       	st	Z, r24
    1270:	8a e1       	ldi	r24, 0x1A	; 26
    1272:	8a 95       	dec	r24
    1274:	f1 f7       	brne	.-4      	; 0x1272 <ultrasonicSensor+0x30>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    1278:	80 81       	ld	r24, Z
    127a:	8d 7f       	andi	r24, 0xFD	; 253
    127c:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    127e:	8c 91       	ld	r24, X
    1280:	8d 7f       	andi	r24, 0xFD	; 253
    1282:	8c 93       	st	X, r24
	
	TCNT1 = 0; //Reset value of TCNT1
	
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	dc 01       	movw	r26, r24
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    128a:	e9 e0       	ldi	r30, 0x09	; 9
    128c:	f1 e0       	ldi	r31, 0x01	; 1
    128e:	0a c0       	rjmp	.+20     	; 0x12a4 <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	a1 1d       	adc	r26, r1
    1294:	b1 1d       	adc	r27, r1
    1296:	81 34       	cpi	r24, 0x41	; 65
    1298:	2c e9       	ldi	r18, 0x9C	; 156
    129a:	92 07       	cpc	r25, r18
    129c:	a1 05       	cpc	r26, r1
    129e:	b1 05       	cpc	r27, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <ultrasonicSensor+0x62>
    12a2:	45 c0       	rjmp	.+138    	; 0x132e <ultrasonicSensor+0xec>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    12a4:	20 81       	ld	r18, Z
    12a6:	21 fd       	sbrc	r18, 1
    12a8:	f3 cf       	rjmp	.-26     	; 0x1290 <ultrasonicSensor+0x4e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    12aa:	e9 e0       	ldi	r30, 0x09	; 9
    12ac:	f1 e0       	ldi	r31, 0x01	; 1
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    12b0:	ac 01       	movw	r20, r24
    12b2:	bd 01       	movw	r22, r26
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	6f 4f       	sbci	r22, 0xFF	; 255
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	80 34       	cpi	r24, 0x40	; 64
    12be:	9c 49       	sbci	r25, 0x9C	; 156
    12c0:	a1 05       	cpc	r26, r1
    12c2:	b1 05       	cpc	r27, r1
    12c4:	b9 f1       	breq	.+110    	; 0x1334 <ultrasonicSensor+0xf2>
    12c6:	db 01       	movw	r26, r22
    12c8:	ca 01       	movw	r24, r20
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    12ca:	20 81       	ld	r18, Z
    12cc:	21 ff       	sbrs	r18, 1
    12ce:	f0 cf       	rjmp	.-32     	; 0x12b0 <ultrasonicSensor+0x6e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
    12d0:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    12d4:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    12d8:	e9 e0       	ldi	r30, 0x09	; 9
    12da:	f1 e0       	ldi	r31, 0x01	; 1
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    12de:	ac 01       	movw	r20, r24
    12e0:	bd 01       	movw	r22, r26
    12e2:	4f 5f       	subi	r20, 0xFF	; 255
    12e4:	5f 4f       	sbci	r21, 0xFF	; 255
    12e6:	6f 4f       	sbci	r22, 0xFF	; 255
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	80 34       	cpi	r24, 0x40	; 64
    12ec:	9c 49       	sbci	r25, 0x9C	; 156
    12ee:	a1 05       	cpc	r26, r1
    12f0:	b1 05       	cpc	r27, r1
    12f2:	19 f1       	breq	.+70     	; 0x133a <ultrasonicSensor+0xf8>
    12f4:	db 01       	movw	r26, r22
    12f6:	ca 01       	movw	r24, r20
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    12f8:	20 81       	ld	r18, Z
    12fa:	21 fd       	sbrc	r18, 1
    12fc:	f0 cf       	rjmp	.-32     	; 0x12de <ultrasonicSensor+0x9c>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    12fe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1302:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
    1306:	c9 01       	movw	r24, r18
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	9c 01       	movw	r18, r24
    130e:	ad 01       	movw	r20, r26
    1310:	2c 1b       	sub	r18, r28
    1312:	3d 0b       	sbc	r19, r29
    1314:	41 09       	sbc	r20, r1
    1316:	51 09       	sbc	r21, r1
    1318:	a3 eb       	ldi	r26, 0xB3	; 179
    131a:	b6 e0       	ldi	r27, 0x06	; 6
    131c:	91 d3       	rcall	.+1826   	; 0x1a40 <__muluhisi3>
    131e:	20 e2       	ldi	r18, 0x20	; 32
    1320:	3e e4       	ldi	r19, 0x4E	; 78
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	62 d3       	rcall	.+1732   	; 0x19ec <__udivmodsi4>
    1328:	c9 01       	movw	r24, r18
    132a:	05 97       	sbiw	r24, 0x05	; 5
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    132c:	08 c0       	rjmp	.+16     	; 0x133e <ultrasonicSensor+0xfc>
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	05 c0       	rjmp	.+10     	; 0x133e <ultrasonicSensor+0xfc>
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <ultrasonicSensor+0xfc>
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <__subsf3>:
    1344:	50 58       	subi	r21, 0x80	; 128

00001346 <__addsf3>:
    1346:	bb 27       	eor	r27, r27
    1348:	aa 27       	eor	r26, r26
    134a:	0e d0       	rcall	.+28     	; 0x1368 <__addsf3x>
    134c:	4d c1       	rjmp	.+666    	; 0x15e8 <__fp_round>
    134e:	3e d1       	rcall	.+636    	; 0x15cc <__fp_pscA>
    1350:	30 f0       	brcs	.+12     	; 0x135e <__addsf3+0x18>
    1352:	43 d1       	rcall	.+646    	; 0x15da <__fp_pscB>
    1354:	20 f0       	brcs	.+8      	; 0x135e <__addsf3+0x18>
    1356:	31 f4       	brne	.+12     	; 0x1364 <__addsf3+0x1e>
    1358:	9f 3f       	cpi	r25, 0xFF	; 255
    135a:	11 f4       	brne	.+4      	; 0x1360 <__addsf3+0x1a>
    135c:	1e f4       	brtc	.+6      	; 0x1364 <__addsf3+0x1e>
    135e:	33 c1       	rjmp	.+614    	; 0x15c6 <__fp_nan>
    1360:	0e f4       	brtc	.+2      	; 0x1364 <__addsf3+0x1e>
    1362:	e0 95       	com	r30
    1364:	e7 fb       	bst	r30, 7
    1366:	29 c1       	rjmp	.+594    	; 0x15ba <__fp_inf>

00001368 <__addsf3x>:
    1368:	e9 2f       	mov	r30, r25
    136a:	4f d1       	rcall	.+670    	; 0x160a <__fp_split3>
    136c:	80 f3       	brcs	.-32     	; 0x134e <__addsf3+0x8>
    136e:	ba 17       	cp	r27, r26
    1370:	62 07       	cpc	r22, r18
    1372:	73 07       	cpc	r23, r19
    1374:	84 07       	cpc	r24, r20
    1376:	95 07       	cpc	r25, r21
    1378:	18 f0       	brcs	.+6      	; 0x1380 <__addsf3x+0x18>
    137a:	71 f4       	brne	.+28     	; 0x1398 <__addsf3x+0x30>
    137c:	9e f5       	brtc	.+102    	; 0x13e4 <__addsf3x+0x7c>
    137e:	67 c1       	rjmp	.+718    	; 0x164e <__fp_zero>
    1380:	0e f4       	brtc	.+2      	; 0x1384 <__addsf3x+0x1c>
    1382:	e0 95       	com	r30
    1384:	0b 2e       	mov	r0, r27
    1386:	ba 2f       	mov	r27, r26
    1388:	a0 2d       	mov	r26, r0
    138a:	0b 01       	movw	r0, r22
    138c:	b9 01       	movw	r22, r18
    138e:	90 01       	movw	r18, r0
    1390:	0c 01       	movw	r0, r24
    1392:	ca 01       	movw	r24, r20
    1394:	a0 01       	movw	r20, r0
    1396:	11 24       	eor	r1, r1
    1398:	ff 27       	eor	r31, r31
    139a:	59 1b       	sub	r21, r25
    139c:	99 f0       	breq	.+38     	; 0x13c4 <__addsf3x+0x5c>
    139e:	59 3f       	cpi	r21, 0xF9	; 249
    13a0:	50 f4       	brcc	.+20     	; 0x13b6 <__addsf3x+0x4e>
    13a2:	50 3e       	cpi	r21, 0xE0	; 224
    13a4:	68 f1       	brcs	.+90     	; 0x1400 <__addsf3x+0x98>
    13a6:	1a 16       	cp	r1, r26
    13a8:	f0 40       	sbci	r31, 0x00	; 0
    13aa:	a2 2f       	mov	r26, r18
    13ac:	23 2f       	mov	r18, r19
    13ae:	34 2f       	mov	r19, r20
    13b0:	44 27       	eor	r20, r20
    13b2:	58 5f       	subi	r21, 0xF8	; 248
    13b4:	f3 cf       	rjmp	.-26     	; 0x139c <__addsf3x+0x34>
    13b6:	46 95       	lsr	r20
    13b8:	37 95       	ror	r19
    13ba:	27 95       	ror	r18
    13bc:	a7 95       	ror	r26
    13be:	f0 40       	sbci	r31, 0x00	; 0
    13c0:	53 95       	inc	r21
    13c2:	c9 f7       	brne	.-14     	; 0x13b6 <__addsf3x+0x4e>
    13c4:	7e f4       	brtc	.+30     	; 0x13e4 <__addsf3x+0x7c>
    13c6:	1f 16       	cp	r1, r31
    13c8:	ba 0b       	sbc	r27, r26
    13ca:	62 0b       	sbc	r22, r18
    13cc:	73 0b       	sbc	r23, r19
    13ce:	84 0b       	sbc	r24, r20
    13d0:	ba f0       	brmi	.+46     	; 0x1400 <__addsf3x+0x98>
    13d2:	91 50       	subi	r25, 0x01	; 1
    13d4:	a1 f0       	breq	.+40     	; 0x13fe <__addsf3x+0x96>
    13d6:	ff 0f       	add	r31, r31
    13d8:	bb 1f       	adc	r27, r27
    13da:	66 1f       	adc	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	88 1f       	adc	r24, r24
    13e0:	c2 f7       	brpl	.-16     	; 0x13d2 <__addsf3x+0x6a>
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <__addsf3x+0x98>
    13e4:	ba 0f       	add	r27, r26
    13e6:	62 1f       	adc	r22, r18
    13e8:	73 1f       	adc	r23, r19
    13ea:	84 1f       	adc	r24, r20
    13ec:	48 f4       	brcc	.+18     	; 0x1400 <__addsf3x+0x98>
    13ee:	87 95       	ror	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b7 95       	ror	r27
    13f6:	f7 95       	ror	r31
    13f8:	9e 3f       	cpi	r25, 0xFE	; 254
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <__addsf3x+0x96>
    13fc:	b3 cf       	rjmp	.-154    	; 0x1364 <__addsf3+0x1e>
    13fe:	93 95       	inc	r25
    1400:	88 0f       	add	r24, r24
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__addsf3x+0x9e>
    1404:	99 27       	eor	r25, r25
    1406:	ee 0f       	add	r30, r30
    1408:	97 95       	ror	r25
    140a:	87 95       	ror	r24
    140c:	08 95       	ret

0000140e <__divsf3>:
    140e:	0c d0       	rcall	.+24     	; 0x1428 <__divsf3x>
    1410:	eb c0       	rjmp	.+470    	; 0x15e8 <__fp_round>
    1412:	e3 d0       	rcall	.+454    	; 0x15da <__fp_pscB>
    1414:	40 f0       	brcs	.+16     	; 0x1426 <__divsf3+0x18>
    1416:	da d0       	rcall	.+436    	; 0x15cc <__fp_pscA>
    1418:	30 f0       	brcs	.+12     	; 0x1426 <__divsf3+0x18>
    141a:	21 f4       	brne	.+8      	; 0x1424 <__divsf3+0x16>
    141c:	5f 3f       	cpi	r21, 0xFF	; 255
    141e:	19 f0       	breq	.+6      	; 0x1426 <__divsf3+0x18>
    1420:	cc c0       	rjmp	.+408    	; 0x15ba <__fp_inf>
    1422:	51 11       	cpse	r21, r1
    1424:	15 c1       	rjmp	.+554    	; 0x1650 <__fp_szero>
    1426:	cf c0       	rjmp	.+414    	; 0x15c6 <__fp_nan>

00001428 <__divsf3x>:
    1428:	f0 d0       	rcall	.+480    	; 0x160a <__fp_split3>
    142a:	98 f3       	brcs	.-26     	; 0x1412 <__divsf3+0x4>

0000142c <__divsf3_pse>:
    142c:	99 23       	and	r25, r25
    142e:	c9 f3       	breq	.-14     	; 0x1422 <__divsf3+0x14>
    1430:	55 23       	and	r21, r21
    1432:	b1 f3       	breq	.-20     	; 0x1420 <__divsf3+0x12>
    1434:	95 1b       	sub	r25, r21
    1436:	55 0b       	sbc	r21, r21
    1438:	bb 27       	eor	r27, r27
    143a:	aa 27       	eor	r26, r26
    143c:	62 17       	cp	r22, r18
    143e:	73 07       	cpc	r23, r19
    1440:	84 07       	cpc	r24, r20
    1442:	38 f0       	brcs	.+14     	; 0x1452 <__divsf3_pse+0x26>
    1444:	9f 5f       	subi	r25, 0xFF	; 255
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	44 1f       	adc	r20, r20
    144e:	aa 1f       	adc	r26, r26
    1450:	a9 f3       	breq	.-22     	; 0x143c <__divsf3_pse+0x10>
    1452:	33 d0       	rcall	.+102    	; 0x14ba <__divsf3_pse+0x8e>
    1454:	0e 2e       	mov	r0, r30
    1456:	3a f0       	brmi	.+14     	; 0x1466 <__divsf3_pse+0x3a>
    1458:	e0 e8       	ldi	r30, 0x80	; 128
    145a:	30 d0       	rcall	.+96     	; 0x14bc <__divsf3_pse+0x90>
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	50 40       	sbci	r21, 0x00	; 0
    1460:	e6 95       	lsr	r30
    1462:	00 1c       	adc	r0, r0
    1464:	ca f7       	brpl	.-14     	; 0x1458 <__divsf3_pse+0x2c>
    1466:	29 d0       	rcall	.+82     	; 0x14ba <__divsf3_pse+0x8e>
    1468:	fe 2f       	mov	r31, r30
    146a:	27 d0       	rcall	.+78     	; 0x14ba <__divsf3_pse+0x8e>
    146c:	66 0f       	add	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	bb 1f       	adc	r27, r27
    1474:	26 17       	cp	r18, r22
    1476:	37 07       	cpc	r19, r23
    1478:	48 07       	cpc	r20, r24
    147a:	ab 07       	cpc	r26, r27
    147c:	b0 e8       	ldi	r27, 0x80	; 128
    147e:	09 f0       	breq	.+2      	; 0x1482 <__divsf3_pse+0x56>
    1480:	bb 0b       	sbc	r27, r27
    1482:	80 2d       	mov	r24, r0
    1484:	bf 01       	movw	r22, r30
    1486:	ff 27       	eor	r31, r31
    1488:	93 58       	subi	r25, 0x83	; 131
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	2a f0       	brmi	.+10     	; 0x1498 <__divsf3_pse+0x6c>
    148e:	9e 3f       	cpi	r25, 0xFE	; 254
    1490:	51 05       	cpc	r21, r1
    1492:	68 f0       	brcs	.+26     	; 0x14ae <__divsf3_pse+0x82>
    1494:	92 c0       	rjmp	.+292    	; 0x15ba <__fp_inf>
    1496:	dc c0       	rjmp	.+440    	; 0x1650 <__fp_szero>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	ec f3       	brlt	.-6      	; 0x1496 <__divsf3_pse+0x6a>
    149c:	98 3e       	cpi	r25, 0xE8	; 232
    149e:	dc f3       	brlt	.-10     	; 0x1496 <__divsf3_pse+0x6a>
    14a0:	86 95       	lsr	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f7 95       	ror	r31
    14aa:	9f 5f       	subi	r25, 0xFF	; 255
    14ac:	c9 f7       	brne	.-14     	; 0x14a0 <__divsf3_pse+0x74>
    14ae:	88 0f       	add	r24, r24
    14b0:	91 1d       	adc	r25, r1
    14b2:	96 95       	lsr	r25
    14b4:	87 95       	ror	r24
    14b6:	97 f9       	bld	r25, 7
    14b8:	08 95       	ret
    14ba:	e1 e0       	ldi	r30, 0x01	; 1
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	bb 1f       	adc	r27, r27
    14c4:	62 17       	cp	r22, r18
    14c6:	73 07       	cpc	r23, r19
    14c8:	84 07       	cpc	r24, r20
    14ca:	ba 07       	cpc	r27, r26
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <__divsf3_pse+0xaa>
    14ce:	62 1b       	sub	r22, r18
    14d0:	73 0b       	sbc	r23, r19
    14d2:	84 0b       	sbc	r24, r20
    14d4:	ba 0b       	sbc	r27, r26
    14d6:	ee 1f       	adc	r30, r30
    14d8:	88 f7       	brcc	.-30     	; 0x14bc <__divsf3_pse+0x90>
    14da:	e0 95       	com	r30
    14dc:	08 95       	ret

000014de <__fixsfsi>:
    14de:	04 d0       	rcall	.+8      	; 0x14e8 <__fixunssfsi>
    14e0:	68 94       	set
    14e2:	b1 11       	cpse	r27, r1
    14e4:	b5 c0       	rjmp	.+362    	; 0x1650 <__fp_szero>
    14e6:	08 95       	ret

000014e8 <__fixunssfsi>:
    14e8:	98 d0       	rcall	.+304    	; 0x161a <__fp_splitA>
    14ea:	88 f0       	brcs	.+34     	; 0x150e <__fixunssfsi+0x26>
    14ec:	9f 57       	subi	r25, 0x7F	; 127
    14ee:	90 f0       	brcs	.+36     	; 0x1514 <__fixunssfsi+0x2c>
    14f0:	b9 2f       	mov	r27, r25
    14f2:	99 27       	eor	r25, r25
    14f4:	b7 51       	subi	r27, 0x17	; 23
    14f6:	a0 f0       	brcs	.+40     	; 0x1520 <__fixunssfsi+0x38>
    14f8:	d1 f0       	breq	.+52     	; 0x152e <__fixunssfsi+0x46>
    14fa:	66 0f       	add	r22, r22
    14fc:	77 1f       	adc	r23, r23
    14fe:	88 1f       	adc	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	1a f0       	brmi	.+6      	; 0x150a <__fixunssfsi+0x22>
    1504:	ba 95       	dec	r27
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__fixunssfsi+0x12>
    1508:	12 c0       	rjmp	.+36     	; 0x152e <__fixunssfsi+0x46>
    150a:	b1 30       	cpi	r27, 0x01	; 1
    150c:	81 f0       	breq	.+32     	; 0x152e <__fixunssfsi+0x46>
    150e:	9f d0       	rcall	.+318    	; 0x164e <__fp_zero>
    1510:	b1 e0       	ldi	r27, 0x01	; 1
    1512:	08 95       	ret
    1514:	9c c0       	rjmp	.+312    	; 0x164e <__fp_zero>
    1516:	67 2f       	mov	r22, r23
    1518:	78 2f       	mov	r23, r24
    151a:	88 27       	eor	r24, r24
    151c:	b8 5f       	subi	r27, 0xF8	; 248
    151e:	39 f0       	breq	.+14     	; 0x152e <__fixunssfsi+0x46>
    1520:	b9 3f       	cpi	r27, 0xF9	; 249
    1522:	cc f3       	brlt	.-14     	; 0x1516 <__fixunssfsi+0x2e>
    1524:	86 95       	lsr	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b3 95       	inc	r27
    152c:	d9 f7       	brne	.-10     	; 0x1524 <__fixunssfsi+0x3c>
    152e:	3e f4       	brtc	.+14     	; 0x153e <__fixunssfsi+0x56>
    1530:	90 95       	com	r25
    1532:	80 95       	com	r24
    1534:	70 95       	com	r23
    1536:	61 95       	neg	r22
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	8f 4f       	sbci	r24, 0xFF	; 255
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	08 95       	ret

00001540 <__floatunsisf>:
    1540:	e8 94       	clt
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <__floatsisf+0x12>

00001544 <__floatsisf>:
    1544:	97 fb       	bst	r25, 7
    1546:	3e f4       	brtc	.+14     	; 0x1556 <__floatsisf+0x12>
    1548:	90 95       	com	r25
    154a:	80 95       	com	r24
    154c:	70 95       	com	r23
    154e:	61 95       	neg	r22
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	99 23       	and	r25, r25
    1558:	a9 f0       	breq	.+42     	; 0x1584 <__floatsisf+0x40>
    155a:	f9 2f       	mov	r31, r25
    155c:	96 e9       	ldi	r25, 0x96	; 150
    155e:	bb 27       	eor	r27, r27
    1560:	93 95       	inc	r25
    1562:	f6 95       	lsr	r31
    1564:	87 95       	ror	r24
    1566:	77 95       	ror	r23
    1568:	67 95       	ror	r22
    156a:	b7 95       	ror	r27
    156c:	f1 11       	cpse	r31, r1
    156e:	f8 cf       	rjmp	.-16     	; 0x1560 <__floatsisf+0x1c>
    1570:	fa f4       	brpl	.+62     	; 0x15b0 <__floatsisf+0x6c>
    1572:	bb 0f       	add	r27, r27
    1574:	11 f4       	brne	.+4      	; 0x157a <__floatsisf+0x36>
    1576:	60 ff       	sbrs	r22, 0
    1578:	1b c0       	rjmp	.+54     	; 0x15b0 <__floatsisf+0x6c>
    157a:	6f 5f       	subi	r22, 0xFF	; 255
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	8f 4f       	sbci	r24, 0xFF	; 255
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	16 c0       	rjmp	.+44     	; 0x15b0 <__floatsisf+0x6c>
    1584:	88 23       	and	r24, r24
    1586:	11 f0       	breq	.+4      	; 0x158c <__floatsisf+0x48>
    1588:	96 e9       	ldi	r25, 0x96	; 150
    158a:	11 c0       	rjmp	.+34     	; 0x15ae <__floatsisf+0x6a>
    158c:	77 23       	and	r23, r23
    158e:	21 f0       	breq	.+8      	; 0x1598 <__floatsisf+0x54>
    1590:	9e e8       	ldi	r25, 0x8E	; 142
    1592:	87 2f       	mov	r24, r23
    1594:	76 2f       	mov	r23, r22
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <__floatsisf+0x5e>
    1598:	66 23       	and	r22, r22
    159a:	71 f0       	breq	.+28     	; 0x15b8 <__floatsisf+0x74>
    159c:	96 e8       	ldi	r25, 0x86	; 134
    159e:	86 2f       	mov	r24, r22
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	2a f0       	brmi	.+10     	; 0x15b0 <__floatsisf+0x6c>
    15a6:	9a 95       	dec	r25
    15a8:	66 0f       	add	r22, r22
    15aa:	77 1f       	adc	r23, r23
    15ac:	88 1f       	adc	r24, r24
    15ae:	da f7       	brpl	.-10     	; 0x15a6 <__floatsisf+0x62>
    15b0:	88 0f       	add	r24, r24
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	97 f9       	bld	r25, 7
    15b8:	08 95       	ret

000015ba <__fp_inf>:
    15ba:	97 f9       	bld	r25, 7
    15bc:	9f 67       	ori	r25, 0x7F	; 127
    15be:	80 e8       	ldi	r24, 0x80	; 128
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	08 95       	ret

000015c6 <__fp_nan>:
    15c6:	9f ef       	ldi	r25, 0xFF	; 255
    15c8:	80 ec       	ldi	r24, 0xC0	; 192
    15ca:	08 95       	ret

000015cc <__fp_pscA>:
    15cc:	00 24       	eor	r0, r0
    15ce:	0a 94       	dec	r0
    15d0:	16 16       	cp	r1, r22
    15d2:	17 06       	cpc	r1, r23
    15d4:	18 06       	cpc	r1, r24
    15d6:	09 06       	cpc	r0, r25
    15d8:	08 95       	ret

000015da <__fp_pscB>:
    15da:	00 24       	eor	r0, r0
    15dc:	0a 94       	dec	r0
    15de:	12 16       	cp	r1, r18
    15e0:	13 06       	cpc	r1, r19
    15e2:	14 06       	cpc	r1, r20
    15e4:	05 06       	cpc	r0, r21
    15e6:	08 95       	ret

000015e8 <__fp_round>:
    15e8:	09 2e       	mov	r0, r25
    15ea:	03 94       	inc	r0
    15ec:	00 0c       	add	r0, r0
    15ee:	11 f4       	brne	.+4      	; 0x15f4 <__fp_round+0xc>
    15f0:	88 23       	and	r24, r24
    15f2:	52 f0       	brmi	.+20     	; 0x1608 <__fp_round+0x20>
    15f4:	bb 0f       	add	r27, r27
    15f6:	40 f4       	brcc	.+16     	; 0x1608 <__fp_round+0x20>
    15f8:	bf 2b       	or	r27, r31
    15fa:	11 f4       	brne	.+4      	; 0x1600 <__fp_round+0x18>
    15fc:	60 ff       	sbrs	r22, 0
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <__fp_round+0x20>
    1600:	6f 5f       	subi	r22, 0xFF	; 255
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	8f 4f       	sbci	r24, 0xFF	; 255
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	08 95       	ret

0000160a <__fp_split3>:
    160a:	57 fd       	sbrc	r21, 7
    160c:	90 58       	subi	r25, 0x80	; 128
    160e:	44 0f       	add	r20, r20
    1610:	55 1f       	adc	r21, r21
    1612:	59 f0       	breq	.+22     	; 0x162a <__fp_splitA+0x10>
    1614:	5f 3f       	cpi	r21, 0xFF	; 255
    1616:	71 f0       	breq	.+28     	; 0x1634 <__fp_splitA+0x1a>
    1618:	47 95       	ror	r20

0000161a <__fp_splitA>:
    161a:	88 0f       	add	r24, r24
    161c:	97 fb       	bst	r25, 7
    161e:	99 1f       	adc	r25, r25
    1620:	61 f0       	breq	.+24     	; 0x163a <__fp_splitA+0x20>
    1622:	9f 3f       	cpi	r25, 0xFF	; 255
    1624:	79 f0       	breq	.+30     	; 0x1644 <__fp_splitA+0x2a>
    1626:	87 95       	ror	r24
    1628:	08 95       	ret
    162a:	12 16       	cp	r1, r18
    162c:	13 06       	cpc	r1, r19
    162e:	14 06       	cpc	r1, r20
    1630:	55 1f       	adc	r21, r21
    1632:	f2 cf       	rjmp	.-28     	; 0x1618 <__fp_split3+0xe>
    1634:	46 95       	lsr	r20
    1636:	f1 df       	rcall	.-30     	; 0x161a <__fp_splitA>
    1638:	08 c0       	rjmp	.+16     	; 0x164a <__fp_splitA+0x30>
    163a:	16 16       	cp	r1, r22
    163c:	17 06       	cpc	r1, r23
    163e:	18 06       	cpc	r1, r24
    1640:	99 1f       	adc	r25, r25
    1642:	f1 cf       	rjmp	.-30     	; 0x1626 <__fp_splitA+0xc>
    1644:	86 95       	lsr	r24
    1646:	71 05       	cpc	r23, r1
    1648:	61 05       	cpc	r22, r1
    164a:	08 94       	sec
    164c:	08 95       	ret

0000164e <__fp_zero>:
    164e:	e8 94       	clt

00001650 <__fp_szero>:
    1650:	bb 27       	eor	r27, r27
    1652:	66 27       	eor	r22, r22
    1654:	77 27       	eor	r23, r23
    1656:	cb 01       	movw	r24, r22
    1658:	97 f9       	bld	r25, 7
    165a:	08 95       	ret

0000165c <__mulsf3>:
    165c:	0b d0       	rcall	.+22     	; 0x1674 <__mulsf3x>
    165e:	c4 cf       	rjmp	.-120    	; 0x15e8 <__fp_round>
    1660:	b5 df       	rcall	.-150    	; 0x15cc <__fp_pscA>
    1662:	28 f0       	brcs	.+10     	; 0x166e <__mulsf3+0x12>
    1664:	ba df       	rcall	.-140    	; 0x15da <__fp_pscB>
    1666:	18 f0       	brcs	.+6      	; 0x166e <__mulsf3+0x12>
    1668:	95 23       	and	r25, r21
    166a:	09 f0       	breq	.+2      	; 0x166e <__mulsf3+0x12>
    166c:	a6 cf       	rjmp	.-180    	; 0x15ba <__fp_inf>
    166e:	ab cf       	rjmp	.-170    	; 0x15c6 <__fp_nan>
    1670:	11 24       	eor	r1, r1
    1672:	ee cf       	rjmp	.-36     	; 0x1650 <__fp_szero>

00001674 <__mulsf3x>:
    1674:	ca df       	rcall	.-108    	; 0x160a <__fp_split3>
    1676:	a0 f3       	brcs	.-24     	; 0x1660 <__mulsf3+0x4>

00001678 <__mulsf3_pse>:
    1678:	95 9f       	mul	r25, r21
    167a:	d1 f3       	breq	.-12     	; 0x1670 <__mulsf3+0x14>
    167c:	95 0f       	add	r25, r21
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	55 1f       	adc	r21, r21
    1682:	62 9f       	mul	r22, r18
    1684:	f0 01       	movw	r30, r0
    1686:	72 9f       	mul	r23, r18
    1688:	bb 27       	eor	r27, r27
    168a:	f0 0d       	add	r31, r0
    168c:	b1 1d       	adc	r27, r1
    168e:	63 9f       	mul	r22, r19
    1690:	aa 27       	eor	r26, r26
    1692:	f0 0d       	add	r31, r0
    1694:	b1 1d       	adc	r27, r1
    1696:	aa 1f       	adc	r26, r26
    1698:	64 9f       	mul	r22, r20
    169a:	66 27       	eor	r22, r22
    169c:	b0 0d       	add	r27, r0
    169e:	a1 1d       	adc	r26, r1
    16a0:	66 1f       	adc	r22, r22
    16a2:	82 9f       	mul	r24, r18
    16a4:	22 27       	eor	r18, r18
    16a6:	b0 0d       	add	r27, r0
    16a8:	a1 1d       	adc	r26, r1
    16aa:	62 1f       	adc	r22, r18
    16ac:	73 9f       	mul	r23, r19
    16ae:	b0 0d       	add	r27, r0
    16b0:	a1 1d       	adc	r26, r1
    16b2:	62 1f       	adc	r22, r18
    16b4:	83 9f       	mul	r24, r19
    16b6:	a0 0d       	add	r26, r0
    16b8:	61 1d       	adc	r22, r1
    16ba:	22 1f       	adc	r18, r18
    16bc:	74 9f       	mul	r23, r20
    16be:	33 27       	eor	r19, r19
    16c0:	a0 0d       	add	r26, r0
    16c2:	61 1d       	adc	r22, r1
    16c4:	23 1f       	adc	r18, r19
    16c6:	84 9f       	mul	r24, r20
    16c8:	60 0d       	add	r22, r0
    16ca:	21 1d       	adc	r18, r1
    16cc:	82 2f       	mov	r24, r18
    16ce:	76 2f       	mov	r23, r22
    16d0:	6a 2f       	mov	r22, r26
    16d2:	11 24       	eor	r1, r1
    16d4:	9f 57       	subi	r25, 0x7F	; 127
    16d6:	50 40       	sbci	r21, 0x00	; 0
    16d8:	8a f0       	brmi	.+34     	; 0x16fc <__mulsf3_pse+0x84>
    16da:	e1 f0       	breq	.+56     	; 0x1714 <__mulsf3_pse+0x9c>
    16dc:	88 23       	and	r24, r24
    16de:	4a f0       	brmi	.+18     	; 0x16f2 <__mulsf3_pse+0x7a>
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	bb 1f       	adc	r27, r27
    16e6:	66 1f       	adc	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	88 1f       	adc	r24, r24
    16ec:	91 50       	subi	r25, 0x01	; 1
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <__mulsf3_pse+0x64>
    16f2:	9e 3f       	cpi	r25, 0xFE	; 254
    16f4:	51 05       	cpc	r21, r1
    16f6:	70 f0       	brcs	.+28     	; 0x1714 <__mulsf3_pse+0x9c>
    16f8:	60 cf       	rjmp	.-320    	; 0x15ba <__fp_inf>
    16fa:	aa cf       	rjmp	.-172    	; 0x1650 <__fp_szero>
    16fc:	5f 3f       	cpi	r21, 0xFF	; 255
    16fe:	ec f3       	brlt	.-6      	; 0x16fa <__mulsf3_pse+0x82>
    1700:	98 3e       	cpi	r25, 0xE8	; 232
    1702:	dc f3       	brlt	.-10     	; 0x16fa <__mulsf3_pse+0x82>
    1704:	86 95       	lsr	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	b7 95       	ror	r27
    170c:	f7 95       	ror	r31
    170e:	e7 95       	ror	r30
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	c1 f7       	brne	.-16     	; 0x1704 <__mulsf3_pse+0x8c>
    1714:	fe 2b       	or	r31, r30
    1716:	88 0f       	add	r24, r24
    1718:	91 1d       	adc	r25, r1
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
    171e:	97 f9       	bld	r25, 7
    1720:	08 95       	ret

00001722 <pow>:
    1722:	fa 01       	movw	r30, r20
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	30 96       	adiw	r30, 0x00	; 0
    172a:	21 05       	cpc	r18, r1
    172c:	31 05       	cpc	r19, r1
    172e:	99 f1       	breq	.+102    	; 0x1796 <pow+0x74>
    1730:	61 15       	cp	r22, r1
    1732:	71 05       	cpc	r23, r1
    1734:	61 f4       	brne	.+24     	; 0x174e <pow+0x2c>
    1736:	80 38       	cpi	r24, 0x80	; 128
    1738:	bf e3       	ldi	r27, 0x3F	; 63
    173a:	9b 07       	cpc	r25, r27
    173c:	49 f1       	breq	.+82     	; 0x1790 <pow+0x6e>
    173e:	68 94       	set
    1740:	90 38       	cpi	r25, 0x80	; 128
    1742:	81 05       	cpc	r24, r1
    1744:	61 f0       	breq	.+24     	; 0x175e <pow+0x3c>
    1746:	80 38       	cpi	r24, 0x80	; 128
    1748:	bf ef       	ldi	r27, 0xFF	; 255
    174a:	9b 07       	cpc	r25, r27
    174c:	41 f0       	breq	.+16     	; 0x175e <pow+0x3c>
    174e:	99 23       	and	r25, r25
    1750:	42 f5       	brpl	.+80     	; 0x17a2 <pow+0x80>
    1752:	ff 3f       	cpi	r31, 0xFF	; 255
    1754:	e1 05       	cpc	r30, r1
    1756:	31 05       	cpc	r19, r1
    1758:	21 05       	cpc	r18, r1
    175a:	11 f1       	breq	.+68     	; 0x17a0 <pow+0x7e>
    175c:	e8 94       	clt
    175e:	08 94       	sec
    1760:	e7 95       	ror	r30
    1762:	d9 01       	movw	r26, r18
    1764:	aa 23       	and	r26, r26
    1766:	29 f4       	brne	.+10     	; 0x1772 <pow+0x50>
    1768:	ab 2f       	mov	r26, r27
    176a:	be 2f       	mov	r27, r30
    176c:	f8 5f       	subi	r31, 0xF8	; 248
    176e:	d0 f3       	brcs	.-12     	; 0x1764 <pow+0x42>
    1770:	10 c0       	rjmp	.+32     	; 0x1792 <pow+0x70>
    1772:	ff 5f       	subi	r31, 0xFF	; 255
    1774:	70 f4       	brcc	.+28     	; 0x1792 <pow+0x70>
    1776:	a6 95       	lsr	r26
    1778:	e0 f7       	brcc	.-8      	; 0x1772 <pow+0x50>
    177a:	f7 39       	cpi	r31, 0x97	; 151
    177c:	50 f0       	brcs	.+20     	; 0x1792 <pow+0x70>
    177e:	19 f0       	breq	.+6      	; 0x1786 <pow+0x64>
    1780:	ff 3a       	cpi	r31, 0xAF	; 175
    1782:	38 f4       	brcc	.+14     	; 0x1792 <pow+0x70>
    1784:	9f 77       	andi	r25, 0x7F	; 127
    1786:	9f 93       	push	r25
    1788:	0c d0       	rcall	.+24     	; 0x17a2 <pow+0x80>
    178a:	0f 90       	pop	r0
    178c:	07 fc       	sbrc	r0, 7
    178e:	90 58       	subi	r25, 0x80	; 128
    1790:	08 95       	ret
    1792:	3e f0       	brts	.+14     	; 0x17a2 <pow+0x80>
    1794:	18 cf       	rjmp	.-464    	; 0x15c6 <__fp_nan>
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	80 e8       	ldi	r24, 0x80	; 128
    179c:	9f e3       	ldi	r25, 0x3F	; 63
    179e:	08 95       	ret
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	9f 77       	andi	r25, 0x7F	; 127
    17a4:	5f 93       	push	r21
    17a6:	4f 93       	push	r20
    17a8:	3f 93       	push	r19
    17aa:	2f 93       	push	r18
    17ac:	9e d0       	rcall	.+316    	; 0x18ea <log>
    17ae:	2f 91       	pop	r18
    17b0:	3f 91       	pop	r19
    17b2:	4f 91       	pop	r20
    17b4:	5f 91       	pop	r21
    17b6:	52 df       	rcall	.-348    	; 0x165c <__mulsf3>
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <exp>
    17ba:	19 f4       	brne	.+6      	; 0x17c2 <pow+0xa0>
    17bc:	0e f0       	brts	.+2      	; 0x17c0 <pow+0x9e>
    17be:	fd ce       	rjmp	.-518    	; 0x15ba <__fp_inf>
    17c0:	46 cf       	rjmp	.-372    	; 0x164e <__fp_zero>
    17c2:	01 cf       	rjmp	.-510    	; 0x15c6 <__fp_nan>

000017c4 <exp>:
    17c4:	2a df       	rcall	.-428    	; 0x161a <__fp_splitA>
    17c6:	c8 f3       	brcs	.-14     	; 0x17ba <pow+0x98>
    17c8:	96 38       	cpi	r25, 0x86	; 134
    17ca:	c0 f7       	brcc	.-16     	; 0x17bc <pow+0x9a>
    17cc:	07 f8       	bld	r0, 7
    17ce:	0f 92       	push	r0
    17d0:	e8 94       	clt
    17d2:	2b e3       	ldi	r18, 0x3B	; 59
    17d4:	3a ea       	ldi	r19, 0xAA	; 170
    17d6:	48 eb       	ldi	r20, 0xB8	; 184
    17d8:	5f e7       	ldi	r21, 0x7F	; 127
    17da:	4e df       	rcall	.-356    	; 0x1678 <__mulsf3_pse>
    17dc:	0f 92       	push	r0
    17de:	0f 92       	push	r0
    17e0:	0f 92       	push	r0
    17e2:	4d b7       	in	r20, 0x3d	; 61
    17e4:	5e b7       	in	r21, 0x3e	; 62
    17e6:	0f 92       	push	r0
    17e8:	c0 d0       	rcall	.+384    	; 0x196a <modf>
    17ea:	e8 e1       	ldi	r30, 0x18	; 24
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	16 d0       	rcall	.+44     	; 0x181c <__fp_powser>
    17f0:	4f 91       	pop	r20
    17f2:	5f 91       	pop	r21
    17f4:	ef 91       	pop	r30
    17f6:	ff 91       	pop	r31
    17f8:	e5 95       	asr	r30
    17fa:	ee 1f       	adc	r30, r30
    17fc:	ff 1f       	adc	r31, r31
    17fe:	49 f0       	breq	.+18     	; 0x1812 <exp+0x4e>
    1800:	fe 57       	subi	r31, 0x7E	; 126
    1802:	e0 68       	ori	r30, 0x80	; 128
    1804:	44 27       	eor	r20, r20
    1806:	ee 0f       	add	r30, r30
    1808:	44 1f       	adc	r20, r20
    180a:	fa 95       	dec	r31
    180c:	e1 f7       	brne	.-8      	; 0x1806 <exp+0x42>
    180e:	41 95       	neg	r20
    1810:	55 0b       	sbc	r21, r21
    1812:	32 d0       	rcall	.+100    	; 0x1878 <ldexp>
    1814:	0f 90       	pop	r0
    1816:	07 fe       	sbrs	r0, 7
    1818:	26 c0       	rjmp	.+76     	; 0x1866 <inverse>
    181a:	08 95       	ret

0000181c <__fp_powser>:
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	1f 93       	push	r17
    1822:	0f 93       	push	r16
    1824:	ff 92       	push	r15
    1826:	ef 92       	push	r14
    1828:	df 92       	push	r13
    182a:	7b 01       	movw	r14, r22
    182c:	8c 01       	movw	r16, r24
    182e:	68 94       	set
    1830:	05 c0       	rjmp	.+10     	; 0x183c <__fp_powser+0x20>
    1832:	da 2e       	mov	r13, r26
    1834:	ef 01       	movw	r28, r30
    1836:	1e df       	rcall	.-452    	; 0x1674 <__mulsf3x>
    1838:	fe 01       	movw	r30, r28
    183a:	e8 94       	clt
    183c:	a5 91       	lpm	r26, Z+
    183e:	25 91       	lpm	r18, Z+
    1840:	35 91       	lpm	r19, Z+
    1842:	45 91       	lpm	r20, Z+
    1844:	55 91       	lpm	r21, Z+
    1846:	ae f3       	brts	.-22     	; 0x1832 <__fp_powser+0x16>
    1848:	ef 01       	movw	r28, r30
    184a:	8e dd       	rcall	.-1252   	; 0x1368 <__addsf3x>
    184c:	fe 01       	movw	r30, r28
    184e:	97 01       	movw	r18, r14
    1850:	a8 01       	movw	r20, r16
    1852:	da 94       	dec	r13
    1854:	79 f7       	brne	.-34     	; 0x1834 <__fp_powser+0x18>
    1856:	df 90       	pop	r13
    1858:	ef 90       	pop	r14
    185a:	ff 90       	pop	r15
    185c:	0f 91       	pop	r16
    185e:	1f 91       	pop	r17
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <inverse>:
    1866:	9b 01       	movw	r18, r22
    1868:	ac 01       	movw	r20, r24
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	80 e8       	ldi	r24, 0x80	; 128
    1870:	9f e3       	ldi	r25, 0x3F	; 63
    1872:	cd cd       	rjmp	.-1126   	; 0x140e <__divsf3>
    1874:	a2 ce       	rjmp	.-700    	; 0x15ba <__fp_inf>
    1876:	ac c0       	rjmp	.+344    	; 0x19d0 <__fp_mpack>

00001878 <ldexp>:
    1878:	d0 de       	rcall	.-608    	; 0x161a <__fp_splitA>
    187a:	e8 f3       	brcs	.-6      	; 0x1876 <inverse+0x10>
    187c:	99 23       	and	r25, r25
    187e:	d9 f3       	breq	.-10     	; 0x1876 <inverse+0x10>
    1880:	94 0f       	add	r25, r20
    1882:	51 1d       	adc	r21, r1
    1884:	bb f3       	brvs	.-18     	; 0x1874 <inverse+0xe>
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	50 40       	sbci	r21, 0x00	; 0
    188a:	94 f0       	brlt	.+36     	; 0x18b0 <ldexp+0x38>
    188c:	59 f0       	breq	.+22     	; 0x18a4 <ldexp+0x2c>
    188e:	88 23       	and	r24, r24
    1890:	32 f0       	brmi	.+12     	; 0x189e <ldexp+0x26>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	88 1f       	adc	r24, r24
    1898:	91 50       	subi	r25, 0x01	; 1
    189a:	50 40       	sbci	r21, 0x00	; 0
    189c:	c1 f7       	brne	.-16     	; 0x188e <ldexp+0x16>
    189e:	9e 3f       	cpi	r25, 0xFE	; 254
    18a0:	51 05       	cpc	r21, r1
    18a2:	44 f7       	brge	.-48     	; 0x1874 <inverse+0xe>
    18a4:	88 0f       	add	r24, r24
    18a6:	91 1d       	adc	r25, r1
    18a8:	96 95       	lsr	r25
    18aa:	87 95       	ror	r24
    18ac:	97 f9       	bld	r25, 7
    18ae:	08 95       	ret
    18b0:	5f 3f       	cpi	r21, 0xFF	; 255
    18b2:	ac f0       	brlt	.+42     	; 0x18de <ldexp+0x66>
    18b4:	98 3e       	cpi	r25, 0xE8	; 232
    18b6:	9c f0       	brlt	.+38     	; 0x18de <ldexp+0x66>
    18b8:	bb 27       	eor	r27, r27
    18ba:	86 95       	lsr	r24
    18bc:	77 95       	ror	r23
    18be:	67 95       	ror	r22
    18c0:	b7 95       	ror	r27
    18c2:	08 f4       	brcc	.+2      	; 0x18c6 <ldexp+0x4e>
    18c4:	b1 60       	ori	r27, 0x01	; 1
    18c6:	93 95       	inc	r25
    18c8:	c1 f7       	brne	.-16     	; 0x18ba <ldexp+0x42>
    18ca:	bb 0f       	add	r27, r27
    18cc:	58 f7       	brcc	.-42     	; 0x18a4 <ldexp+0x2c>
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <ldexp+0x5c>
    18d0:	60 ff       	sbrs	r22, 0
    18d2:	e8 cf       	rjmp	.-48     	; 0x18a4 <ldexp+0x2c>
    18d4:	6f 5f       	subi	r22, 0xFF	; 255
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	e3 cf       	rjmp	.-58     	; 0x18a4 <ldexp+0x2c>
    18de:	b8 ce       	rjmp	.-656    	; 0x1650 <__fp_szero>
    18e0:	0e f0       	brts	.+2      	; 0x18e4 <ldexp+0x6c>
    18e2:	76 c0       	rjmp	.+236    	; 0x19d0 <__fp_mpack>
    18e4:	70 ce       	rjmp	.-800    	; 0x15c6 <__fp_nan>
    18e6:	68 94       	set
    18e8:	68 ce       	rjmp	.-816    	; 0x15ba <__fp_inf>

000018ea <log>:
    18ea:	97 de       	rcall	.-722    	; 0x161a <__fp_splitA>
    18ec:	c8 f3       	brcs	.-14     	; 0x18e0 <ldexp+0x68>
    18ee:	99 23       	and	r25, r25
    18f0:	d1 f3       	breq	.-12     	; 0x18e6 <ldexp+0x6e>
    18f2:	c6 f3       	brts	.-16     	; 0x18e4 <ldexp+0x6c>
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	1f 93       	push	r17
    18fa:	0f 93       	push	r16
    18fc:	ff 92       	push	r15
    18fe:	c9 2f       	mov	r28, r25
    1900:	dd 27       	eor	r29, r29
    1902:	88 23       	and	r24, r24
    1904:	2a f0       	brmi	.+10     	; 0x1910 <log+0x26>
    1906:	21 97       	sbiw	r28, 0x01	; 1
    1908:	66 0f       	add	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	da f7       	brpl	.-10     	; 0x1906 <log+0x1c>
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f eb       	ldi	r21, 0xBF	; 191
    1918:	9f e3       	ldi	r25, 0x3F	; 63
    191a:	88 39       	cpi	r24, 0x98	; 152
    191c:	20 f0       	brcs	.+8      	; 0x1926 <log+0x3c>
    191e:	80 3e       	cpi	r24, 0xE0	; 224
    1920:	30 f0       	brcs	.+12     	; 0x192e <log+0x44>
    1922:	21 96       	adiw	r28, 0x01	; 1
    1924:	8f 77       	andi	r24, 0x7F	; 127
    1926:	0f dd       	rcall	.-1506   	; 0x1346 <__addsf3>
    1928:	e0 e4       	ldi	r30, 0x40	; 64
    192a:	f1 e0       	ldi	r31, 0x01	; 1
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <log+0x4a>
    192e:	0b dd       	rcall	.-1514   	; 0x1346 <__addsf3>
    1930:	ed e6       	ldi	r30, 0x6D	; 109
    1932:	f1 e0       	ldi	r31, 0x01	; 1
    1934:	73 df       	rcall	.-282    	; 0x181c <__fp_powser>
    1936:	8b 01       	movw	r16, r22
    1938:	be 01       	movw	r22, r28
    193a:	ec 01       	movw	r28, r24
    193c:	fb 2e       	mov	r15, r27
    193e:	6f 57       	subi	r22, 0x7F	; 127
    1940:	71 09       	sbc	r23, r1
    1942:	75 95       	asr	r23
    1944:	77 1f       	adc	r23, r23
    1946:	88 0b       	sbc	r24, r24
    1948:	99 0b       	sbc	r25, r25
    194a:	fc dd       	rcall	.-1032   	; 0x1544 <__floatsisf>
    194c:	28 e1       	ldi	r18, 0x18	; 24
    194e:	32 e7       	ldi	r19, 0x72	; 114
    1950:	41 e3       	ldi	r20, 0x31	; 49
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	8f de       	rcall	.-738    	; 0x1674 <__mulsf3x>
    1956:	af 2d       	mov	r26, r15
    1958:	98 01       	movw	r18, r16
    195a:	ae 01       	movw	r20, r28
    195c:	ff 90       	pop	r15
    195e:	0f 91       	pop	r16
    1960:	1f 91       	pop	r17
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	00 dd       	rcall	.-1536   	; 0x1368 <__addsf3x>
    1968:	3f ce       	rjmp	.-898    	; 0x15e8 <__fp_round>

0000196a <modf>:
    196a:	fa 01       	movw	r30, r20
    196c:	dc 01       	movw	r26, r24
    196e:	aa 0f       	add	r26, r26
    1970:	bb 1f       	adc	r27, r27
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	bf 57       	subi	r27, 0x7F	; 127
    1978:	28 f4       	brcc	.+10     	; 0x1984 <modf+0x1a>
    197a:	22 27       	eor	r18, r18
    197c:	33 27       	eor	r19, r19
    197e:	44 27       	eor	r20, r20
    1980:	50 78       	andi	r21, 0x80	; 128
    1982:	1f c0       	rjmp	.+62     	; 0x19c2 <modf+0x58>
    1984:	b7 51       	subi	r27, 0x17	; 23
    1986:	88 f4       	brcc	.+34     	; 0x19aa <modf+0x40>
    1988:	ab 2f       	mov	r26, r27
    198a:	00 24       	eor	r0, r0
    198c:	46 95       	lsr	r20
    198e:	37 95       	ror	r19
    1990:	27 95       	ror	r18
    1992:	01 1c       	adc	r0, r1
    1994:	a3 95       	inc	r26
    1996:	d2 f3       	brmi	.-12     	; 0x198c <modf+0x22>
    1998:	00 20       	and	r0, r0
    199a:	69 f0       	breq	.+26     	; 0x19b6 <modf+0x4c>
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	44 1f       	adc	r20, r20
    19a2:	b3 95       	inc	r27
    19a4:	da f3       	brmi	.-10     	; 0x199c <modf+0x32>
    19a6:	0d d0       	rcall	.+26     	; 0x19c2 <modf+0x58>
    19a8:	cd cc       	rjmp	.-1638   	; 0x1344 <__subsf3>
    19aa:	61 30       	cpi	r22, 0x01	; 1
    19ac:	71 05       	cpc	r23, r1
    19ae:	a0 e8       	ldi	r26, 0x80	; 128
    19b0:	8a 07       	cpc	r24, r26
    19b2:	b9 46       	sbci	r27, 0x69	; 105
    19b4:	30 f4       	brcc	.+12     	; 0x19c2 <modf+0x58>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	66 27       	eor	r22, r22
    19bc:	77 27       	eor	r23, r23
    19be:	88 27       	eor	r24, r24
    19c0:	90 78       	andi	r25, 0x80	; 128
    19c2:	30 96       	adiw	r30, 0x00	; 0
    19c4:	21 f0       	breq	.+8      	; 0x19ce <modf+0x64>
    19c6:	20 83       	st	Z, r18
    19c8:	31 83       	std	Z+1, r19	; 0x01
    19ca:	42 83       	std	Z+2, r20	; 0x02
    19cc:	53 83       	std	Z+3, r21	; 0x03
    19ce:	08 95       	ret

000019d0 <__fp_mpack>:
    19d0:	9f 3f       	cpi	r25, 0xFF	; 255
    19d2:	31 f0       	breq	.+12     	; 0x19e0 <__fp_mpack_finite+0xc>

000019d4 <__fp_mpack_finite>:
    19d4:	91 50       	subi	r25, 0x01	; 1
    19d6:	20 f4       	brcc	.+8      	; 0x19e0 <__fp_mpack_finite+0xc>
    19d8:	87 95       	ror	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	b7 95       	ror	r27
    19e0:	88 0f       	add	r24, r24
    19e2:	91 1d       	adc	r25, r1
    19e4:	96 95       	lsr	r25
    19e6:	87 95       	ror	r24
    19e8:	97 f9       	bld	r25, 7
    19ea:	08 95       	ret

000019ec <__udivmodsi4>:
    19ec:	a1 e2       	ldi	r26, 0x21	; 33
    19ee:	1a 2e       	mov	r1, r26
    19f0:	aa 1b       	sub	r26, r26
    19f2:	bb 1b       	sub	r27, r27
    19f4:	fd 01       	movw	r30, r26
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <__udivmodsi4_ep>

000019f8 <__udivmodsi4_loop>:
    19f8:	aa 1f       	adc	r26, r26
    19fa:	bb 1f       	adc	r27, r27
    19fc:	ee 1f       	adc	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	a2 17       	cp	r26, r18
    1a02:	b3 07       	cpc	r27, r19
    1a04:	e4 07       	cpc	r30, r20
    1a06:	f5 07       	cpc	r31, r21
    1a08:	20 f0       	brcs	.+8      	; 0x1a12 <__udivmodsi4_ep>
    1a0a:	a2 1b       	sub	r26, r18
    1a0c:	b3 0b       	sbc	r27, r19
    1a0e:	e4 0b       	sbc	r30, r20
    1a10:	f5 0b       	sbc	r31, r21

00001a12 <__udivmodsi4_ep>:
    1a12:	66 1f       	adc	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	1a 94       	dec	r1
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <__udivmodsi4_loop>
    1a1e:	60 95       	com	r22
    1a20:	70 95       	com	r23
    1a22:	80 95       	com	r24
    1a24:	90 95       	com	r25
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
    1a2a:	bd 01       	movw	r22, r26
    1a2c:	cf 01       	movw	r24, r30
    1a2e:	08 95       	ret

00001a30 <__tablejump2__>:
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	88 1f       	adc	r24, r24
    1a36:	8b bf       	out	0x3b, r24	; 59
    1a38:	07 90       	elpm	r0, Z+
    1a3a:	f6 91       	elpm	r31, Z
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	19 94       	eijmp

00001a40 <__muluhisi3>:
    1a40:	c5 d0       	rcall	.+394    	; 0x1bcc <__umulhisi3>
    1a42:	a5 9f       	mul	r26, r21
    1a44:	90 0d       	add	r25, r0
    1a46:	b4 9f       	mul	r27, r20
    1a48:	90 0d       	add	r25, r0
    1a4a:	a4 9f       	mul	r26, r20
    1a4c:	80 0d       	add	r24, r0
    1a4e:	91 1d       	adc	r25, r1
    1a50:	11 24       	eor	r1, r1
    1a52:	08 95       	ret

00001a54 <__umoddi3>:
    1a54:	68 94       	set
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <__udivdi3_umoddi3>

00001a58 <__udivdi3>:
    1a58:	e8 94       	clt

00001a5a <__udivdi3_umoddi3>:
    1a5a:	8f 92       	push	r8
    1a5c:	9f 92       	push	r9
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	05 d0       	rcall	.+10     	; 0x1a6e <__udivmod64>
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	08 95       	ret

00001a6e <__udivmod64>:
    1a6e:	88 24       	eor	r8, r8
    1a70:	99 24       	eor	r9, r9
    1a72:	f4 01       	movw	r30, r8
    1a74:	e4 01       	movw	r28, r8
    1a76:	b0 e4       	ldi	r27, 0x40	; 64
    1a78:	9f 93       	push	r25
    1a7a:	aa 27       	eor	r26, r26
    1a7c:	9a 15       	cp	r25, r10
    1a7e:	8b 04       	cpc	r8, r11
    1a80:	9c 04       	cpc	r9, r12
    1a82:	ed 05       	cpc	r30, r13
    1a84:	fe 05       	cpc	r31, r14
    1a86:	cf 05       	cpc	r28, r15
    1a88:	d0 07       	cpc	r29, r16
    1a8a:	a1 07       	cpc	r26, r17
    1a8c:	98 f4       	brcc	.+38     	; 0x1ab4 <__udivmod64+0x46>
    1a8e:	ad 2f       	mov	r26, r29
    1a90:	dc 2f       	mov	r29, r28
    1a92:	cf 2f       	mov	r28, r31
    1a94:	fe 2f       	mov	r31, r30
    1a96:	e9 2d       	mov	r30, r9
    1a98:	98 2c       	mov	r9, r8
    1a9a:	89 2e       	mov	r8, r25
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	87 2f       	mov	r24, r23
    1aa0:	76 2f       	mov	r23, r22
    1aa2:	65 2f       	mov	r22, r21
    1aa4:	54 2f       	mov	r21, r20
    1aa6:	43 2f       	mov	r20, r19
    1aa8:	32 2f       	mov	r19, r18
    1aaa:	22 27       	eor	r18, r18
    1aac:	b8 50       	subi	r27, 0x08	; 8
    1aae:	31 f7       	brne	.-52     	; 0x1a7c <__udivmod64+0xe>
    1ab0:	bf 91       	pop	r27
    1ab2:	27 c0       	rjmp	.+78     	; 0x1b02 <__udivmod64+0x94>
    1ab4:	1b 2e       	mov	r1, r27
    1ab6:	bf 91       	pop	r27
    1ab8:	bb 27       	eor	r27, r27
    1aba:	22 0f       	add	r18, r18
    1abc:	33 1f       	adc	r19, r19
    1abe:	44 1f       	adc	r20, r20
    1ac0:	55 1f       	adc	r21, r21
    1ac2:	66 1f       	adc	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	88 1c       	adc	r8, r8
    1acc:	99 1c       	adc	r9, r9
    1ace:	ee 1f       	adc	r30, r30
    1ad0:	ff 1f       	adc	r31, r31
    1ad2:	cc 1f       	adc	r28, r28
    1ad4:	dd 1f       	adc	r29, r29
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	8a 14       	cp	r8, r10
    1adc:	9b 04       	cpc	r9, r11
    1ade:	ec 05       	cpc	r30, r12
    1ae0:	fd 05       	cpc	r31, r13
    1ae2:	ce 05       	cpc	r28, r14
    1ae4:	df 05       	cpc	r29, r15
    1ae6:	a0 07       	cpc	r26, r16
    1ae8:	b1 07       	cpc	r27, r17
    1aea:	48 f0       	brcs	.+18     	; 0x1afe <__udivmod64+0x90>
    1aec:	8a 18       	sub	r8, r10
    1aee:	9b 08       	sbc	r9, r11
    1af0:	ec 09       	sbc	r30, r12
    1af2:	fd 09       	sbc	r31, r13
    1af4:	ce 09       	sbc	r28, r14
    1af6:	df 09       	sbc	r29, r15
    1af8:	a0 0b       	sbc	r26, r16
    1afa:	b1 0b       	sbc	r27, r17
    1afc:	21 60       	ori	r18, 0x01	; 1
    1afe:	1a 94       	dec	r1
    1b00:	e1 f6       	brne	.-72     	; 0x1aba <__udivmod64+0x4c>
    1b02:	2e f4       	brtc	.+10     	; 0x1b0e <__udivmod64+0xa0>
    1b04:	94 01       	movw	r18, r8
    1b06:	af 01       	movw	r20, r30
    1b08:	be 01       	movw	r22, r28
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	00 0c       	add	r0, r0
    1b0e:	08 95       	ret

00001b10 <__ashldi3>:
    1b10:	0f 93       	push	r16
    1b12:	08 30       	cpi	r16, 0x08	; 8
    1b14:	90 f0       	brcs	.+36     	; 0x1b3a <__ashldi3+0x2a>
    1b16:	98 2f       	mov	r25, r24
    1b18:	87 2f       	mov	r24, r23
    1b1a:	76 2f       	mov	r23, r22
    1b1c:	65 2f       	mov	r22, r21
    1b1e:	54 2f       	mov	r21, r20
    1b20:	43 2f       	mov	r20, r19
    1b22:	32 2f       	mov	r19, r18
    1b24:	22 27       	eor	r18, r18
    1b26:	08 50       	subi	r16, 0x08	; 8
    1b28:	f4 cf       	rjmp	.-24     	; 0x1b12 <__ashldi3+0x2>
    1b2a:	22 0f       	add	r18, r18
    1b2c:	33 1f       	adc	r19, r19
    1b2e:	44 1f       	adc	r20, r20
    1b30:	55 1f       	adc	r21, r21
    1b32:	66 1f       	adc	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 95       	dec	r16
    1b3c:	b2 f7       	brpl	.-20     	; 0x1b2a <__ashldi3+0x1a>
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <__ashrdi3>:
    1b42:	97 fb       	bst	r25, 7
    1b44:	10 f8       	bld	r1, 0

00001b46 <__lshrdi3>:
    1b46:	16 94       	lsr	r1
    1b48:	00 08       	sbc	r0, r0
    1b4a:	0f 93       	push	r16
    1b4c:	08 30       	cpi	r16, 0x08	; 8
    1b4e:	98 f0       	brcs	.+38     	; 0x1b76 <__lshrdi3+0x30>
    1b50:	08 50       	subi	r16, 0x08	; 8
    1b52:	23 2f       	mov	r18, r19
    1b54:	34 2f       	mov	r19, r20
    1b56:	45 2f       	mov	r20, r21
    1b58:	56 2f       	mov	r21, r22
    1b5a:	67 2f       	mov	r22, r23
    1b5c:	78 2f       	mov	r23, r24
    1b5e:	89 2f       	mov	r24, r25
    1b60:	90 2d       	mov	r25, r0
    1b62:	f4 cf       	rjmp	.-24     	; 0x1b4c <__lshrdi3+0x6>
    1b64:	05 94       	asr	r0
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	77 95       	ror	r23
    1b6c:	67 95       	ror	r22
    1b6e:	57 95       	ror	r21
    1b70:	47 95       	ror	r20
    1b72:	37 95       	ror	r19
    1b74:	27 95       	ror	r18
    1b76:	0a 95       	dec	r16
    1b78:	aa f7       	brpl	.-22     	; 0x1b64 <__lshrdi3+0x1e>
    1b7a:	0f 91       	pop	r16
    1b7c:	08 95       	ret

00001b7e <__adddi3>:
    1b7e:	2a 0d       	add	r18, r10
    1b80:	3b 1d       	adc	r19, r11
    1b82:	4c 1d       	adc	r20, r12
    1b84:	5d 1d       	adc	r21, r13
    1b86:	6e 1d       	adc	r22, r14
    1b88:	7f 1d       	adc	r23, r15
    1b8a:	80 1f       	adc	r24, r16
    1b8c:	91 1f       	adc	r25, r17
    1b8e:	08 95       	ret

00001b90 <__adddi3_s8>:
    1b90:	00 24       	eor	r0, r0
    1b92:	a7 fd       	sbrc	r26, 7
    1b94:	00 94       	com	r0
    1b96:	2a 0f       	add	r18, r26
    1b98:	30 1d       	adc	r19, r0
    1b9a:	40 1d       	adc	r20, r0
    1b9c:	50 1d       	adc	r21, r0
    1b9e:	60 1d       	adc	r22, r0
    1ba0:	70 1d       	adc	r23, r0
    1ba2:	80 1d       	adc	r24, r0
    1ba4:	90 1d       	adc	r25, r0
    1ba6:	08 95       	ret

00001ba8 <__subdi3>:
    1ba8:	2a 19       	sub	r18, r10
    1baa:	3b 09       	sbc	r19, r11
    1bac:	4c 09       	sbc	r20, r12
    1bae:	5d 09       	sbc	r21, r13
    1bb0:	6e 09       	sbc	r22, r14
    1bb2:	7f 09       	sbc	r23, r15
    1bb4:	80 0b       	sbc	r24, r16
    1bb6:	91 0b       	sbc	r25, r17
    1bb8:	08 95       	ret

00001bba <__cmpdi2>:
    1bba:	2a 15       	cp	r18, r10
    1bbc:	3b 05       	cpc	r19, r11
    1bbe:	4c 05       	cpc	r20, r12
    1bc0:	5d 05       	cpc	r21, r13
    1bc2:	6e 05       	cpc	r22, r14
    1bc4:	7f 05       	cpc	r23, r15
    1bc6:	80 07       	cpc	r24, r16
    1bc8:	91 07       	cpc	r25, r17
    1bca:	08 95       	ret

00001bcc <__umulhisi3>:
    1bcc:	a2 9f       	mul	r26, r18
    1bce:	b0 01       	movw	r22, r0
    1bd0:	b3 9f       	mul	r27, r19
    1bd2:	c0 01       	movw	r24, r0
    1bd4:	a3 9f       	mul	r26, r19
    1bd6:	70 0d       	add	r23, r0
    1bd8:	81 1d       	adc	r24, r1
    1bda:	11 24       	eor	r1, r1
    1bdc:	91 1d       	adc	r25, r1
    1bde:	b2 9f       	mul	r27, r18
    1be0:	70 0d       	add	r23, r0
    1be2:	81 1d       	adc	r24, r1
    1be4:	11 24       	eor	r1, r1
    1be6:	91 1d       	adc	r25, r1
    1be8:	08 95       	ret

00001bea <__itoa_ncheck>:
    1bea:	bb 27       	eor	r27, r27
    1bec:	4a 30       	cpi	r20, 0x0A	; 10
    1bee:	31 f4       	brne	.+12     	; 0x1bfc <__itoa_ncheck+0x12>
    1bf0:	99 23       	and	r25, r25
    1bf2:	22 f4       	brpl	.+8      	; 0x1bfc <__itoa_ncheck+0x12>
    1bf4:	bd e2       	ldi	r27, 0x2D	; 45
    1bf6:	90 95       	com	r25
    1bf8:	81 95       	neg	r24
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <__utoa_common>

00001bfe <__utoa_ncheck>:
    1bfe:	bb 27       	eor	r27, r27

00001c00 <__utoa_common>:
    1c00:	fb 01       	movw	r30, r22
    1c02:	55 27       	eor	r21, r21
    1c04:	aa 27       	eor	r26, r26
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	a4 17       	cp	r26, r20
    1c0e:	10 f0       	brcs	.+4      	; 0x1c14 <__utoa_common+0x14>
    1c10:	a4 1b       	sub	r26, r20
    1c12:	83 95       	inc	r24
    1c14:	50 51       	subi	r21, 0x10	; 16
    1c16:	b9 f7       	brne	.-18     	; 0x1c06 <__utoa_common+0x6>
    1c18:	a0 5d       	subi	r26, 0xD0	; 208
    1c1a:	aa 33       	cpi	r26, 0x3A	; 58
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <__utoa_common+0x20>
    1c1e:	a9 5d       	subi	r26, 0xD9	; 217
    1c20:	a1 93       	st	Z+, r26
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	79 f7       	brne	.-34     	; 0x1c04 <__utoa_common+0x4>
    1c26:	b1 11       	cpse	r27, r1
    1c28:	b1 93       	st	Z+, r27
    1c2a:	11 92       	st	Z+, r1
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	00 c0       	rjmp	.+0      	; 0x1c30 <strrev>

00001c30 <strrev>:
    1c30:	dc 01       	movw	r26, r24
    1c32:	fc 01       	movw	r30, r24
    1c34:	67 2f       	mov	r22, r23
    1c36:	71 91       	ld	r23, Z+
    1c38:	77 23       	and	r23, r23
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <strrev+0x4>
    1c3c:	32 97       	sbiw	r30, 0x02	; 2
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <strrev+0x18>
    1c40:	7c 91       	ld	r23, X
    1c42:	6d 93       	st	X+, r22
    1c44:	70 83       	st	Z, r23
    1c46:	62 91       	ld	r22, -Z
    1c48:	ae 17       	cp	r26, r30
    1c4a:	bf 07       	cpc	r27, r31
    1c4c:	c8 f3       	brcs	.-14     	; 0x1c40 <strrev+0x10>
    1c4e:	08 95       	ret

00001c50 <_exit>:
    1c50:	f8 94       	cli

00001c52 <__stop_program>:
    1c52:	ff cf       	rjmp	.-2      	; 0x1c52 <__stop_program>
