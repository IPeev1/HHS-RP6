
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .text         00001780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001780  00001814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  00800066  00800066  0000181a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1e  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a06  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  0000389c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00003bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5d  00000000  00000000  0000421c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004d79  2**0
=======
  0 .text         000017ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000017ae  00001842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  00800066  00800066  00001848  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1e  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3c  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000038fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066c  00000000  00000000  00003c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa5  00000000  00000000  00004290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004d35  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
<<<<<<< Updated upstream
      66:	e0 e8       	ldi	r30, 0x80	; 128
=======
      66:	ee ea       	ldi	r30, 0xAE	; 174
>>>>>>> Stashed changes
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
<<<<<<< Updated upstream
      86:	0e 94 49 09 	call	0x1292	; 0x1292 <main>
      8a:	0c 94 be 0b 	jmp	0x177c	; 0x177c <_exit>
=======
      86:	0e 94 60 09 	call	0x12c0	; 0x12c0 <main>
      8a:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <_exit>
>>>>>>> Stashed changes

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getBumperLeft>:

#define DISTANCE 0

int getBumperLeft() {
	
	PORT_L &= ~(1 << IO_L);
      92:	c0 98       	cbi	0x18, 0	; 24
	DDR_L &= ~(1 << IO_L);
      94:	b8 98       	cbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      96:	00 c0       	rjmp	.+0      	; 0x98 <getBumperLeft+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_L & (1 << IO_L);
      98:	86 b3       	in	r24, 0x16	; 22
	
	DDR_L |= (1 << IO_L);
      9a:	b8 9a       	sbi	0x17, 0	; 23
	PORT_L |= (1 <<  IO_L);
      9c:	c0 9a       	sbi	0x18, 0	; 24
	
	return pushed;
}
      9e:	81 70       	andi	r24, 0x01	; 1
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	08 95       	ret

000000a4 <getBumperRight>:

int getBumperRight() {
	
	PORT_R &= ~(1 << IO_R);
      a4:	ae 98       	cbi	0x15, 6	; 21
	DDR_R &= ~(1 << IO_R);
      a6:	a6 98       	cbi	0x14, 6	; 20
      a8:	00 c0       	rjmp	.+0      	; 0xaa <getBumperRight+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_R & (1 << IO_R);
      aa:	83 b3       	in	r24, 0x13	; 19
	
	DDR_R |= (1 << IO_R);
      ac:	a6 9a       	sbi	0x14, 6	; 20
	PORT_R |= (1 <<  IO_R);
      ae:	ae 9a       	sbi	0x15, 6	; 21
	
	return pushed;
      b0:	80 74       	andi	r24, 0x40	; 64
}
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	08 95       	ret

000000b6 <getBumpers>:

int getBumpers() {
	
	return getBumperLeft() || getBumperRight();
      b6:	0e 94 49 00 	call	0x92	; 0x92 <getBumperLeft>
      ba:	89 2b       	or	r24, r25
      bc:	51 f4       	brne	.+20     	; 0xd2 <getBumpers+0x1c>
      be:	0e 94 52 00 	call	0xa4	; 0xa4 <getBumperRight>
      c2:	31 e0       	ldi	r19, 0x01	; 1
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	89 2b       	or	r24, r25
      c8:	09 f4       	brne	.+2      	; 0xcc <getBumpers+0x16>
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	83 2f       	mov	r24, r19
      ce:	92 2f       	mov	r25, r18
      d0:	08 95       	ret
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	08 95       	ret

000000d8 <init_LED>:
	sei();									//Enable global interrupts
}


void init_LED(){
	DDRB |= 0b10000011;
      d8:	87 b3       	in	r24, 0x17	; 23
      da:	83 68       	ori	r24, 0x83	; 131
      dc:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      de:	84 b3       	in	r24, 0x14	; 20
      e0:	80 67       	ori	r24, 0x70	; 112
      e2:	84 bb       	out	0x14, r24	; 20
      e4:	08 95       	ret

000000e6 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      e6:	83 b7       	in	r24, 0x33	; 51
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      ec:	83 b7       	in	r24, 0x33	; 51
      ee:	82 60       	ori	r24, 0x02	; 2
      f0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      f2:	89 b7       	in	r24, 0x39	; 57
      f4:	81 60       	ori	r24, 0x01	; 1
      f6:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      f8:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      fa:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <t0TotalOverflow>
      fe:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <t0TotalOverflow+0x1>
     102:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <t0TotalOverflow+0x2>
     106:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t0TotalOverflow+0x3>
     10a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <t0TotalOverflow+0x4>
     10e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <t0TotalOverflow+0x5>
     112:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <t0TotalOverflow+0x6>
     116:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <t0TotalOverflow+0x7>
     11a:	08 95       	ret

0000011c <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
     126:	2f 93       	push	r18
     128:	3f 93       	push	r19
     12a:	4f 93       	push	r20
     12c:	5f 93       	push	r21
     12e:	6f 93       	push	r22
     130:	7f 93       	push	r23
     132:	8f 93       	push	r24
     134:	9f 93       	push	r25
     136:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
     138:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <t0TotalOverflow>
     13c:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x1>
     140:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x2>
     144:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <t0TotalOverflow+0x3>
     148:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <t0TotalOverflow+0x4>
     14c:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <t0TotalOverflow+0x5>
     150:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <t0TotalOverflow+0x6>
     154:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <t0TotalOverflow+0x7>
     158:	a1 e0       	ldi	r26, 0x01	; 1
<<<<<<< Updated upstream
     15a:	0e 94 85 0b 	call	0x170a	; 0x170a <__adddi3_s8>
=======
     15a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__adddi3_s8>
>>>>>>> Stashed changes
     15e:	20 93 b7 00 	sts	0x00B7, r18	; 0x8000b7 <t0TotalOverflow>
     162:	30 93 b8 00 	sts	0x00B8, r19	; 0x8000b8 <t0TotalOverflow+0x1>
     166:	40 93 b9 00 	sts	0x00B9, r20	; 0x8000b9 <t0TotalOverflow+0x2>
     16a:	50 93 ba 00 	sts	0x00BA, r21	; 0x8000ba <t0TotalOverflow+0x3>
     16e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <t0TotalOverflow+0x4>
     172:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <t0TotalOverflow+0x5>
     176:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <t0TotalOverflow+0x6>
     17a:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <t0TotalOverflow+0x7>
}
     17e:	af 91       	pop	r26
     180:	9f 91       	pop	r25
     182:	8f 91       	pop	r24
     184:	7f 91       	pop	r23
     186:	6f 91       	pop	r22
     188:	5f 91       	pop	r21
     18a:	4f 91       	pop	r20
     18c:	3f 91       	pop	r19
     18e:	2f 91       	pop	r18
     190:	0f 90       	pop	r0
     192:	0f be       	out	0x3f, r0	; 63
     194:	0f 90       	pop	r0
     196:	1f 90       	pop	r1
     198:	18 95       	reti

0000019a <micros>:


uint64_t micros(){
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     1aa:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     1ac:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <t0TotalOverflow>
     1b0:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x1>
     1b4:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x2>
     1b8:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <t0TotalOverflow+0x3>
     1bc:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <t0TotalOverflow+0x4>
     1c0:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <t0TotalOverflow+0x5>
     1c4:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <t0TotalOverflow+0x6>
     1c8:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     1cc:	e0 e0       	ldi	r30, 0x00	; 0
     1ce:	fa 2f       	mov	r31, r26
     1d0:	ff 0f       	add	r31, r31
     1d2:	ff 0f       	add	r31, r31
     1d4:	ff 0f       	add	r31, r31
     1d6:	ff 23       	and	r31, r31
     1d8:	14 f4       	brge	.+4      	; 0x1de <micros+0x44>
     1da:	e1 50       	subi	r30, 0x01	; 1
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	ef 2f       	mov	r30, r31
     1e0:	ee 0f       	add	r30, r30
     1e2:	ee 0b       	sbc	r30, r30
     1e4:	0b e0       	ldi	r16, 0x0B	; 11
<<<<<<< Updated upstream
     1e6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__ashldi3>
=======
     1e6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__ashldi3>
>>>>>>> Stashed changes
     1ea:	a2 2e       	mov	r10, r18
     1ec:	b3 2e       	mov	r11, r19
     1ee:	c4 2e       	mov	r12, r20
     1f0:	d5 2e       	mov	r13, r21
     1f2:	e6 2e       	mov	r14, r22
     1f4:	f7 2e       	mov	r15, r23
     1f6:	08 2f       	mov	r16, r24
     1f8:	19 2f       	mov	r17, r25
     1fa:	2f 2f       	mov	r18, r31
     1fc:	3e 2f       	mov	r19, r30
     1fe:	4e 2f       	mov	r20, r30
     200:	5e 2f       	mov	r21, r30
     202:	6e 2f       	mov	r22, r30
     204:	7e 2f       	mov	r23, r30
     206:	8e 2f       	mov	r24, r30
     208:	9e 2f       	mov	r25, r30
<<<<<<< Updated upstream
     20a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__adddi3>
=======
     20a:	0e 94 93 0b 	call	0x1726	; 0x1726 <__adddi3>
>>>>>>> Stashed changes
}
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	08 95       	ret

00000220 <init_TWI>:
//------------------------------------------------------
//I2C functions ----------------------------------------
void init_TWI(){
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);		//Enable TWI; Enable Acknowledge; Enable Interrupt
     220:	85 e4       	ldi	r24, 0x45	; 69
     222:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;											//No prescaling
     224:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);									//Set slave address
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;					//set SCL to 100kHz
     22a:	80 e2       	ldi	r24, 0x20	; 32
     22c:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;
     22e:	84 b3       	in	r24, 0x14	; 20
     230:	83 60       	ori	r24, 0x03	; 3
     232:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;
     234:	85 b3       	in	r24, 0x15	; 21
     236:	83 60       	ori	r24, 0x03	; 3
     238:	85 bb       	out	0x15, r24	; 21
     23a:	08 95       	ret

0000023c <init_rp6Data>:
}


void init_rp6Data(){
	rp6Data.driveSpeed = 0;
     23c:	e4 ea       	ldi	r30, 0xA4	; 164
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	10 82       	st	Z, r1
     242:	11 82       	std	Z+1, r1	; 0x01
     244:	12 82       	std	Z+2, r1	; 0x02
     246:	13 82       	std	Z+3, r1	; 0x03
	rp6Data.driveDirection = 1;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	84 83       	std	Z+4, r24	; 0x04
	rp6Data.turnDirection = 0;
     24c:	15 82       	std	Z+5, r1	; 0x05
	rp6Data.accelerationRate = 2000;
     24e:	20 ed       	ldi	r18, 0xD0	; 208
     250:	37 e0       	ldi	r19, 0x07	; 7
     252:	37 83       	std	Z+7, r19	; 0x07
     254:	26 83       	std	Z+6, r18	; 0x06
	rp6Data.turnRate = 2500;
     256:	24 ec       	ldi	r18, 0xC4	; 196
     258:	39 e0       	ldi	r19, 0x09	; 9
     25a:	31 87       	std	Z+9, r19	; 0x09
     25c:	20 87       	std	Z+8, r18	; 0x08
	rp6Data.driveSpeedThreshold = 7000;
     25e:	28 e5       	ldi	r18, 0x58	; 88
     260:	3b e1       	ldi	r19, 0x1B	; 27
     262:	33 87       	std	Z+11, r19	; 0x0b
     264:	22 87       	std	Z+10, r18	; 0x0a
	rp6Data.updateSpeed = 200;
     266:	48 ec       	ldi	r20, 0xC8	; 200
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	44 87       	std	Z+12, r20	; 0x0c
     270:	55 87       	std	Z+13, r21	; 0x0d
     272:	66 87       	std	Z+14, r22	; 0x0e
     274:	77 87       	std	Z+15, r23	; 0x0f
	rp6Data.enableBeeper = 1;
     276:	80 8b       	std	Z+16, r24	; 0x10
     278:	08 95       	ret

0000027a <init_bumpedData>:
}

void init_bumpedData() {
	bumpedData.driveSpeed = 0;
     27a:	ef eb       	ldi	r30, 0xBF	; 191
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	10 82       	st	Z, r1
     280:	11 82       	std	Z+1, r1	; 0x01
     282:	12 82       	std	Z+2, r1	; 0x02
     284:	13 82       	std	Z+3, r1	; 0x03
	bumpedData.driveDirection = 1;
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	84 83       	std	Z+4, r24	; 0x04
	bumpedData.turnDirection = 0;
     28a:	15 82       	std	Z+5, r1	; 0x05
	bumpedData.accelerationRate = 2000;
     28c:	20 ed       	ldi	r18, 0xD0	; 208
     28e:	37 e0       	ldi	r19, 0x07	; 7
     290:	37 83       	std	Z+7, r19	; 0x07
     292:	26 83       	std	Z+6, r18	; 0x06
	bumpedData.turnRate = 2500;
     294:	24 ec       	ldi	r18, 0xC4	; 196
     296:	39 e0       	ldi	r19, 0x09	; 9
     298:	31 87       	std	Z+9, r19	; 0x09
     29a:	20 87       	std	Z+8, r18	; 0x08
	bumpedData.driveSpeedThreshold = 7000;
     29c:	28 e5       	ldi	r18, 0x58	; 88
     29e:	3b e1       	ldi	r19, 0x1B	; 27
     2a0:	33 87       	std	Z+11, r19	; 0x0b
     2a2:	22 87       	std	Z+10, r18	; 0x0a
	bumpedData.updateSpeed = 200;
     2a4:	48 ec       	ldi	r20, 0xC8	; 200
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	44 87       	std	Z+12, r20	; 0x0c
     2ae:	55 87       	std	Z+13, r21	; 0x0d
     2b0:	66 87       	std	Z+14, r22	; 0x0e
     2b2:	77 87       	std	Z+15, r23	; 0x0f
	bumpedData.enableBeeper = 1;
     2b4:	80 8b       	std	Z+16, r24	; 0x10
     2b6:	08 95       	ret

000002b8 <init_arduinoData>:
	
}

void init_arduinoData(){
	arduinoData.bumperFlag = 0;
     2b8:	e6 e8       	ldi	r30, 0x86	; 134
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	11 82       	std	Z+1, r1	; 0x01
     2be:	10 82       	st	Z, r1
	arduinoData.actualDriveSpeed = 0;
     2c0:	13 82       	std	Z+3, r1	; 0x03
     2c2:	12 82       	std	Z+2, r1	; 0x02
	arduinoData.actualLeftMotorSpeed = 0;
     2c4:	15 82       	std	Z+5, r1	; 0x05
     2c6:	14 82       	std	Z+4, r1	; 0x04
	arduinoData.actualRightMotorSpeed = 0;
     2c8:	17 82       	std	Z+7, r1	; 0x07
     2ca:	16 82       	std	Z+6, r1	; 0x06
	arduinoData.totalDistance = 0;
     2cc:	11 86       	std	Z+9, r1	; 0x09
     2ce:	10 86       	std	Z+8, r1	; 0x08
     2d0:	08 95       	ret

000002d2 <clearSendData>:
	
	TWCR |= (1 << TWINT);
}


void clearSendData(){
     2d2:	e2 ed       	ldi	r30, 0xD2	; 210
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	86 ee       	ldi	r24, 0xE6	; 230
     2d8:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     2da:	11 92       	st	Z+, r1
	TWCR |= (1 << TWINT);
}


void clearSendData(){
	for(int i = 0; i < DATASIZE; i++){
     2dc:	e8 17       	cp	r30, r24
     2de:	f9 07       	cpc	r31, r25
     2e0:	e1 f7       	brne	.-8      	; 0x2da <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     2e2:	08 95       	ret

000002e4 <clearReceiveData>:


void clearReceiveData(){
     2e4:	e0 e9       	ldi	r30, 0x90	; 144
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	84 ea       	ldi	r24, 0xA4	; 164
     2ea:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     2ec:	11 92       	st	Z+, r1
	}
}


void clearReceiveData(){
	for(int i = 0; i < DATASIZE; i++){
     2ee:	e8 17       	cp	r30, r24
     2f0:	f9 07       	cpc	r31, r25
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     2f4:	08 95       	ret

000002f6 <rp6DataInterpreter>:
		case(1): rp6DataInterpreter(); break;
	}
}


void rp6DataInterpreter(){
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
	if(receiveData[2]-1 == 0){
     2fa:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <receiveData+0x2>
     2fe:	21 30       	cpi	r18, 0x01	; 1
     300:	49 f4       	brne	.+18     	; 0x314 <rp6DataInterpreter+0x1e>
		rp6Data.driveSpeed = 0;
     302:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <rp6Data>
     306:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <rp6Data+0x1>
     30a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <rp6Data+0x2>
     30e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <rp6Data+0x3>
     312:	12 c0       	rjmp	.+36     	; 0x338 <rp6DataInterpreter+0x42>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     314:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <receiveData+0x1>
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <rp6Data>
     322:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <rp6Data+0x1>
     326:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <rp6Data+0x2>
     32a:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <rp6Data+0x3>
	}
	
	if(receiveData[2] < 1){
     32e:	21 11       	cpse	r18, r1
     330:	03 c0       	rjmp	.+6      	; 0x338 <rp6DataInterpreter+0x42>
		rp6Data.driveDirection = 0;
     332:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <rp6Data+0x4>
     336:	03 c0       	rjmp	.+6      	; 0x33e <rp6DataInterpreter+0x48>
	}else{
		rp6Data.driveDirection = 1;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <rp6Data+0x4>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     33e:	c4 ea       	ldi	r28, 0xA4	; 164
     340:	d0 e0       	ldi	r29, 0x00	; 0
     342:	e0 e9       	ldi	r30, 0x90	; 144
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	83 81       	ldd	r24, Z+3	; 0x03
     348:	81 50       	subi	r24, 0x01	; 1
     34a:	8d 83       	std	Y+5, r24	; 0x05
	rp6Data.accelerationRate = (receiveData[4] << 8) + receiveData[5];
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	98 2f       	mov	r25, r24
     352:	88 27       	eor	r24, r24
     354:	25 81       	ldd	r18, Z+5	; 0x05
     356:	82 0f       	add	r24, r18
     358:	91 1d       	adc	r25, r1
     35a:	9f 83       	std	Y+7, r25	; 0x07
     35c:	8e 83       	std	Y+6, r24	; 0x06
	rp6Data.turnRate = (receiveData[6] << 8) + receiveData[7];
     35e:	86 81       	ldd	r24, Z+6	; 0x06
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	98 2f       	mov	r25, r24
     364:	88 27       	eor	r24, r24
     366:	27 81       	ldd	r18, Z+7	; 0x07
     368:	82 0f       	add	r24, r18
     36a:	91 1d       	adc	r25, r1
     36c:	99 87       	std	Y+9, r25	; 0x09
     36e:	88 87       	std	Y+8, r24	; 0x08
	rp6Data.driveSpeedThreshold = (receiveData[8] << 8) + receiveData[9];
     370:	80 85       	ldd	r24, Z+8	; 0x08
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	98 2f       	mov	r25, r24
     376:	88 27       	eor	r24, r24
     378:	21 85       	ldd	r18, Z+9	; 0x09
     37a:	82 0f       	add	r24, r18
     37c:	91 1d       	adc	r25, r1
     37e:	9b 87       	std	Y+11, r25	; 0x0b
     380:	8a 87       	std	Y+10, r24	; 0x0a
	rp6Data.updateSpeed = (receiveData[10] << 8) + receiveData[11];
     382:	82 85       	ldd	r24, Z+10	; 0x0a
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	98 2f       	mov	r25, r24
     388:	88 27       	eor	r24, r24
     38a:	23 85       	ldd	r18, Z+11	; 0x0b
     38c:	82 0f       	add	r24, r18
     38e:	91 1d       	adc	r25, r1
     390:	09 2e       	mov	r0, r25
     392:	00 0c       	add	r0, r0
     394:	aa 0b       	sbc	r26, r26
     396:	bb 0b       	sbc	r27, r27
     398:	8c 87       	std	Y+12, r24	; 0x0c
     39a:	9d 87       	std	Y+13, r25	; 0x0d
     39c:	ae 87       	std	Y+14, r26	; 0x0e
     39e:	bf 87       	std	Y+15, r27	; 0x0f
	rp6Data.enableBeeper = receiveData[12];
     3a0:	84 85       	ldd	r24, Z+12	; 0x0c
     3a2:	88 8b       	std	Y+16, r24	; 0x10
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
     3a4:	85 85       	ldd	r24, Z+13	; 0x0d
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	98 2f       	mov	r25, r24
     3aa:	88 27       	eor	r24, r24
     3ac:	26 85       	ldd	r18, Z+14	; 0x0e
     3ae:	82 0f       	add	r24, r18
     3b0:	91 1d       	adc	r25, r1
     3b2:	9a 8b       	std	Y+18, r25	; 0x12
     3b4:	89 8b       	std	Y+17, r24	; 0x11
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <I2C_receiveInterpreter>:
}


void I2C_receiveInterpreter(){
	int dataSet = receiveData[0];
	switch(dataSet){
     3bc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <receiveData>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <I2C_receiveInterpreter+0xc>
		case(1): rp6DataInterpreter(); break;
     3c4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <rp6DataInterpreter>
     3c8:	08 95       	ret

000003ca <arduinoDataConstructor>:
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
}


void arduinoDataConstructor(){
	clearSendData();
     3ca:	0e 94 69 01 	call	0x2d2	; 0x2d2 <clearSendData>
	
	sendData[0] = 1;
     3ce:	e2 ed       	ldi	r30, 0xD2	; 210
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 83       	st	Z, r24
	
	sendData[1] = (arduinoData.bumperFlag >> 8);
     3d6:	a6 e8       	ldi	r26, 0x86	; 134
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	8c 91       	ld	r24, X
     3dc:	11 96       	adiw	r26, 0x01	; 1
     3de:	9c 91       	ld	r25, X
     3e0:	11 97       	sbiw	r26, 0x01	; 1
     3e2:	91 83       	std	Z+1, r25	; 0x01
	sendData[2] = arduinoData.bumperFlag;
     3e4:	82 83       	std	Z+2, r24	; 0x02
	
	sendData[3] = (arduinoData.actualDriveSpeed >> 8);
     3e6:	12 96       	adiw	r26, 0x02	; 2
     3e8:	8c 91       	ld	r24, X
     3ea:	12 97       	sbiw	r26, 0x02	; 2
     3ec:	13 96       	adiw	r26, 0x03	; 3
     3ee:	9c 91       	ld	r25, X
     3f0:	13 97       	sbiw	r26, 0x03	; 3
     3f2:	93 83       	std	Z+3, r25	; 0x03
	sendData[4] = arduinoData.actualDriveSpeed;
     3f4:	84 83       	std	Z+4, r24	; 0x04
	
	sendData[5] = (arduinoData.actualLeftMotorSpeed >> 8);
     3f6:	14 96       	adiw	r26, 0x04	; 4
     3f8:	8c 91       	ld	r24, X
     3fa:	14 97       	sbiw	r26, 0x04	; 4
     3fc:	15 96       	adiw	r26, 0x05	; 5
     3fe:	9c 91       	ld	r25, X
     400:	15 97       	sbiw	r26, 0x05	; 5
     402:	95 83       	std	Z+5, r25	; 0x05
	sendData[6] = arduinoData.actualLeftMotorSpeed;
     404:	86 83       	std	Z+6, r24	; 0x06
	
	sendData[7] = (arduinoData.actualRightMotorSpeed >> 8);
     406:	16 96       	adiw	r26, 0x06	; 6
     408:	8c 91       	ld	r24, X
     40a:	16 97       	sbiw	r26, 0x06	; 6
     40c:	17 96       	adiw	r26, 0x07	; 7
     40e:	9c 91       	ld	r25, X
     410:	17 97       	sbiw	r26, 0x07	; 7
     412:	97 83       	std	Z+7, r25	; 0x07
	sendData[8] = arduinoData.actualRightMotorSpeed;
     414:	80 87       	std	Z+8, r24	; 0x08
	
	sendData[9] = (arduinoData.totalDistance >> 8);
     416:	18 96       	adiw	r26, 0x08	; 8
     418:	8c 91       	ld	r24, X
     41a:	18 97       	sbiw	r26, 0x08	; 8
     41c:	19 96       	adiw	r26, 0x09	; 9
     41e:	9c 91       	ld	r25, X
     420:	91 87       	std	Z+9, r25	; 0x09
	sendData[10] = arduinoData.totalDistance;
     422:	82 87       	std	Z+10, r24	; 0x0a
     424:	ed ed       	ldi	r30, 0xDD	; 221
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	86 ee       	ldi	r24, 0xE6	; 230
     42a:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i = 11; i < DATASIZE; i++){
		sendData[i] = 0;
     42c:	11 92       	st	Z+, r1
	sendData[8] = arduinoData.actualRightMotorSpeed;
	
	sendData[9] = (arduinoData.totalDistance >> 8);
	sendData[10] = arduinoData.totalDistance;
	
	for(int i = 11; i < DATASIZE; i++){
     42e:	e8 17       	cp	r30, r24
     430:	f9 07       	cpc	r31, r25
     432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		sendData[i] = 0;
	}
}
     434:	08 95       	ret

00000436 <__vector_19>:
	arduinoData.actualRightMotorSpeed = 0;
	arduinoData.totalDistance = 0;
}


ISR(TWI_vect){
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	5f 93       	push	r21
     448:	6f 93       	push	r22
     44a:	7f 93       	push	r23
     44c:	8f 93       	push	r24
     44e:	9f 93       	push	r25
     450:	af 93       	push	r26
     452:	bf 93       	push	r27
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
	static int byteCounter = 0;
	switch(TWSR){
     458:	81 b1       	in	r24, 0x01	; 1
     45a:	80 3a       	cpi	r24, 0xA0	; 160
     45c:	21 f1       	breq	.+72     	; 0x4a6 <__vector_19+0x70>
     45e:	28 f4       	brcc	.+10     	; 0x46a <__vector_19+0x34>
     460:	80 36       	cpi	r24, 0x60	; 96
     462:	41 f0       	breq	.+16     	; 0x474 <__vector_19+0x3e>
     464:	80 38       	cpi	r24, 0x80	; 128
     466:	69 f0       	breq	.+26     	; 0x482 <__vector_19+0x4c>
     468:	39 c0       	rjmp	.+114    	; 0x4dc <__vector_19+0xa6>
     46a:	88 3a       	cpi	r24, 0xA8	; 168
     46c:	f9 f0       	breq	.+62     	; 0x4ac <__vector_19+0x76>
     46e:	88 3b       	cpi	r24, 0xB8	; 184
     470:	39 f1       	breq	.+78     	; 0x4c0 <__vector_19+0x8a>
     472:	34 c0       	rjmp	.+104    	; 0x4dc <__vector_19+0xa6>
		case 0x60:
			clearReceiveData();
     474:	0e 94 72 01 	call	0x2e4	; 0x2e4 <clearReceiveData>
			byteCounter = 0;
     478:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1974+0x1>
     47c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <byteCounter.1974>
		break;
     480:	2d c0       	rjmp	.+90     	; 0x4dc <__vector_19+0xa6>
		
		case 0x80:
			if(byteCounter < 20){
     482:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <byteCounter.1974>
     486:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <byteCounter.1974+0x1>
     48a:	84 31       	cpi	r24, 0x14	; 20
     48c:	91 05       	cpc	r25, r1
     48e:	34 f5       	brge	.+76     	; 0x4dc <__vector_19+0xa6>
				receiveData[byteCounter] = TWDR;
     490:	23 b1       	in	r18, 0x03	; 3
     492:	fc 01       	movw	r30, r24
     494:	e0 57       	subi	r30, 0x70	; 112
     496:	ff 4f       	sbci	r31, 0xFF	; 255
     498:	20 83       	st	Z, r18
				byteCounter++;
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <byteCounter.1974+0x1>
     4a0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <byteCounter.1974>
     4a4:	1b c0       	rjmp	.+54     	; 0x4dc <__vector_19+0xa6>
			}
		break;
		
		case 0xA0:
			I2C_receiveInterpreter();
     4a6:	0e 94 de 01 	call	0x3bc	; 0x3bc <I2C_receiveInterpreter>
		break;
     4aa:	18 c0       	rjmp	.+48     	; 0x4dc <__vector_19+0xa6>
		
		case 0xA8:
			arduinoDataConstructor();
     4ac:	0e 94 e5 01 	call	0x3ca	; 0x3ca <arduinoDataConstructor>
			byteCounter = 0;
     4b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1974+0x1>
     4b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <byteCounter.1974>
			TWDR = sendData[byteCounter];
     4b8:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <sendData>
     4bc:	83 b9       	out	0x03, r24	; 3
		break;
     4be:	0e c0       	rjmp	.+28     	; 0x4dc <__vector_19+0xa6>
		
		case 0xB8:
			byteCounter++;
     4c0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <byteCounter.1974>
     4c4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <byteCounter.1974+0x1>
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <byteCounter.1974+0x1>
     4ce:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <byteCounter.1974>
			TWDR = sendData[byteCounter];
     4d2:	fc 01       	movw	r30, r24
     4d4:	ee 52       	subi	r30, 0x2E	; 46
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 81       	ld	r24, Z
     4da:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);
     4dc:	86 b7       	in	r24, 0x36	; 54
     4de:	80 68       	ori	r24, 0x80	; 128
     4e0:	86 bf       	out	0x36, r24	; 54
}
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	bf 91       	pop	r27
     4e8:	af 91       	pop	r26
     4ea:	9f 91       	pop	r25
     4ec:	8f 91       	pop	r24
     4ee:	7f 91       	pop	r23
     4f0:	6f 91       	pop	r22
     4f2:	5f 91       	pop	r21
     4f4:	4f 91       	pop	r20
     4f6:	3f 91       	pop	r19
     4f8:	2f 91       	pop	r18
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <init_motor_io>:
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     504:	81 b3       	in	r24, 0x11	; 17
     506:	80 63       	ori	r24, 0x30	; 48
     508:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     50a:	81 b3       	in	r24, 0x11	; 17
     50c:	83 7f       	andi	r24, 0xF3	; 243
     50e:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     510:	84 b3       	in	r24, 0x14	; 20
     512:	8c 60       	ori	r24, 0x0C	; 12
     514:	84 bb       	out	0x14, r24	; 20
     516:	08 95       	ret

00000518 <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     518:	8f b5       	in	r24, 0x2f	; 47
     51a:	80 68       	ori	r24, 0x80	; 128
     51c:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     51e:	8f b5       	in	r24, 0x2f	; 47
     520:	80 62       	ori	r24, 0x20	; 32
     522:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     524:	8f b5       	in	r24, 0x2f	; 47
     526:	82 60       	ori	r24, 0x02	; 2
     528:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     52a:	8e b5       	in	r24, 0x2e	; 46
     52c:	80 61       	ori	r24, 0x10	; 16
     52e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     530:	8e b5       	in	r24, 0x2e	; 46
     532:	81 60       	ori	r24, 0x01	; 1
     534:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	99 ef       	ldi	r25, 0xF9	; 249
     53a:	97 bd       	out	0x27, r25	; 39
     53c:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     53e:	1b bc       	out	0x2b, r1	; 43
     540:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     542:	19 bc       	out	0x29, r1	; 41
     544:	18 bc       	out	0x28, r1	; 40
     546:	08 95       	ret

00000548 <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     548:	0e 94 82 02 	call	0x504	; 0x504 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     54c:	0e 94 8c 02 	call	0x518	; 0x518 <init_motor_timer>
     550:	08 95       	ret

00000552 <motorDriver>:
	OCR1A = 0;						//Start the compare registers at 0, no signal
	OCR1B = 0;						//---^
}


int motorDriver(struct rp6DataBP rp6Data){	
     552:	2f 92       	push	r2
     554:	3f 92       	push	r3
     556:	4f 92       	push	r4
     558:	5f 92       	push	r5
     55a:	6f 92       	push	r6
     55c:	7f 92       	push	r7
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	e3 97       	sbiw	r28, 0x33	; 51
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	2c 96       	adiw	r28, 0x0c	; 12
     588:	ac ac       	ldd	r10, Y+60	; 0x3c
     58a:	bd ac       	ldd	r11, Y+61	; 0x3d
     58c:	ce ac       	ldd	r12, Y+62	; 0x3e
     58e:	df ac       	ldd	r13, Y+63	; 0x3f
     590:	2c 97       	sbiw	r28, 0x0c	; 12
     592:	aa 86       	std	Y+10, r10	; 0x0a
     594:	bb 86       	std	Y+11, r11	; 0x0b
     596:	cc 86       	std	Y+12, r12	; 0x0c
     598:	dd 86       	std	Y+13, r13	; 0x0d
     59a:	2d 96       	adiw	r28, 0x0d	; 13
     59c:	bf ac       	ldd	r11, Y+63	; 0x3f
     59e:	2d 97       	sbiw	r28, 0x0d	; 13
     5a0:	b9 86       	std	Y+9, r11	; 0x09
     5a2:	2e 96       	adiw	r28, 0x0e	; 14
     5a4:	cf ac       	ldd	r12, Y+63	; 0x3f
     5a6:	2e 97       	sbiw	r28, 0x0e	; 14
     5a8:	ce 86       	std	Y+14, r12	; 0x0e
     5aa:	60 96       	adiw	r28, 0x10	; 16
     5ac:	8e ac       	ldd	r8, Y+62	; 0x3e
     5ae:	9f ac       	ldd	r9, Y+63	; 0x3f
     5b0:	60 97       	sbiw	r28, 0x10	; 16
     5b2:	62 96       	adiw	r28, 0x12	; 18
     5b4:	ee ac       	ldd	r14, Y+62	; 0x3e
     5b6:	ff ac       	ldd	r15, Y+63	; 0x3f
     5b8:	62 97       	sbiw	r28, 0x12	; 18
     5ba:	ff 8e       	std	Y+31, r15	; 0x1f
     5bc:	ee 8e       	std	Y+30, r14	; 0x1e
     5be:	64 96       	adiw	r28, 0x14	; 20
     5c0:	2e ac       	ldd	r2, Y+62	; 0x3e
     5c2:	3f ac       	ldd	r3, Y+63	; 0x3f
     5c4:	64 97       	sbiw	r28, 0x14	; 20
     5c6:	68 96       	adiw	r28, 0x18	; 24
     5c8:	4c ac       	ldd	r4, Y+60	; 0x3c
     5ca:	5d ac       	ldd	r5, Y+61	; 0x3d
     5cc:	6e ac       	ldd	r6, Y+62	; 0x3e
     5ce:	7f ac       	ldd	r7, Y+63	; 0x3f
     5d0:	68 97       	sbiw	r28, 0x18	; 24
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	//Update timer
	rp6Data.updateSpeed = rp6Data.updateSpeed * 1000;
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
<<<<<<< Updated upstream
     5c6:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
     5ca:	a0 90 7c 00 	lds	r10, 0x007C	; 0x80007c <updateTimer.2015>
     5ce:	b0 90 7d 00 	lds	r11, 0x007D	; 0x80007d <updateTimer.2015+0x1>
     5d2:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <updateTimer.2015+0x2>
     5d6:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <updateTimer.2015+0x3>
     5da:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <updateTimer.2015+0x4>
     5de:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <updateTimer.2015+0x5>
     5e2:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <updateTimer.2015+0x6>
     5e6:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <updateTimer.2015+0x7>
     5ea:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
     5ee:	08 f4       	brcc	.+2      	; 0x5f2 <motorDriver+0xac>
     5f0:	85 c5       	rjmp	.+2826   	; 0x10fc <__stack+0x89d>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     5f2:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
     5f6:	a2 2e       	mov	r10, r18
     5f8:	b3 2e       	mov	r11, r19
     5fa:	c4 2e       	mov	r12, r20
     5fc:	d5 2e       	mov	r13, r21
     5fe:	e6 2f       	mov	r30, r22
     600:	f7 2f       	mov	r31, r23
     602:	8e 8b       	std	Y+22, r24	; 0x16
     604:	98 a3       	std	Y+32, r25	; 0x20
     606:	a8 ee       	ldi	r26, 0xE8	; 232
     608:	b3 e0       	ldi	r27, 0x03	; 3
     60a:	a3 01       	movw	r20, r6
     60c:	92 01       	movw	r18, r4
     60e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__muluhisi3>
     612:	7b 01       	movw	r14, r22
     614:	8c 01       	movw	r16, r24
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	a9 01       	movw	r20, r18
     61c:	2d 83       	std	Y+5, r18	; 0x05
     61e:	3e 83       	std	Y+6, r19	; 0x06
     620:	4f 83       	std	Y+7, r20	; 0x07
     622:	58 87       	std	Y+8, r21	; 0x08
     624:	26 2f       	mov	r18, r22
     626:	3f 2d       	mov	r19, r15
     628:	40 2f       	mov	r20, r16
     62a:	51 2f       	mov	r21, r17
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ee 2e       	mov	r14, r30
     636:	ff 2e       	mov	r15, r31
     638:	0e 89       	ldd	r16, Y+22	; 0x16
     63a:	18 a1       	ldd	r17, Y+32	; 0x20
     63c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__adddi3>
     640:	52 2e       	mov	r5, r18
     642:	63 2e       	mov	r6, r19
     644:	74 2e       	mov	r7, r20
     646:	5e 8b       	std	Y+22, r21	; 0x16
     648:	68 a3       	std	Y+32, r22	; 0x20
     64a:	79 a3       	std	Y+33, r23	; 0x21
     64c:	8a a3       	std	Y+34, r24	; 0x22
     64e:	9b a3       	std	Y+35, r25	; 0x23
     650:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.2015>
     654:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.2015+0x1>
     658:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.2015+0x2>
     65c:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.2015+0x3>
     660:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.2015+0x4>
     664:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.2015+0x5>
     668:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.2015+0x6>
     66c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.2015+0x7>
=======
     5d2:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
     5d6:	a0 90 7c 00 	lds	r10, 0x007C	; 0x80007c <updateTimer.2015>
     5da:	b0 90 7d 00 	lds	r11, 0x007D	; 0x80007d <updateTimer.2015+0x1>
     5de:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <updateTimer.2015+0x2>
     5e2:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <updateTimer.2015+0x3>
     5e6:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <updateTimer.2015+0x4>
     5ea:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <updateTimer.2015+0x5>
     5ee:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <updateTimer.2015+0x6>
     5f2:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <updateTimer.2015+0x7>
     5f6:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <motorDriver+0xac>
     5fc:	9c c5       	rjmp	.+2872   	; 0x1136 <__stack+0x8d7>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     5fe:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
     602:	a2 2e       	mov	r10, r18
     604:	b3 2e       	mov	r11, r19
     606:	c4 2e       	mov	r12, r20
     608:	d5 2e       	mov	r13, r21
     60a:	e6 2f       	mov	r30, r22
     60c:	f7 2f       	mov	r31, r23
     60e:	8e 8b       	std	Y+22, r24	; 0x16
     610:	98 a3       	std	Y+32, r25	; 0x20
     612:	a8 ee       	ldi	r26, 0xE8	; 232
     614:	b3 e0       	ldi	r27, 0x03	; 3
     616:	a3 01       	movw	r20, r6
     618:	92 01       	movw	r18, r4
     61a:	0e 94 6f 0b 	call	0x16de	; 0x16de <__muluhisi3>
     61e:	7b 01       	movw	r14, r22
     620:	8c 01       	movw	r16, r24
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	a9 01       	movw	r20, r18
     628:	2d 83       	std	Y+5, r18	; 0x05
     62a:	3e 83       	std	Y+6, r19	; 0x06
     62c:	4f 83       	std	Y+7, r20	; 0x07
     62e:	58 87       	std	Y+8, r21	; 0x08
     630:	26 2f       	mov	r18, r22
     632:	3f 2d       	mov	r19, r15
     634:	40 2f       	mov	r20, r16
     636:	51 2f       	mov	r21, r17
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	ee 2e       	mov	r14, r30
     642:	ff 2e       	mov	r15, r31
     644:	0e 89       	ldd	r16, Y+22	; 0x16
     646:	18 a1       	ldd	r17, Y+32	; 0x20
     648:	0e 94 93 0b 	call	0x1726	; 0x1726 <__adddi3>
     64c:	52 2e       	mov	r5, r18
     64e:	63 2e       	mov	r6, r19
     650:	74 2e       	mov	r7, r20
     652:	5e 8b       	std	Y+22, r21	; 0x16
     654:	68 a3       	std	Y+32, r22	; 0x20
     656:	79 a3       	std	Y+33, r23	; 0x21
     658:	8a a3       	std	Y+34, r24	; 0x22
     65a:	9b a3       	std	Y+35, r25	; 0x23
     65c:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.2015>
     660:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.2015+0x1>
     664:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.2015+0x2>
     668:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.2015+0x3>
     66c:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.2015+0x4>
     670:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.2015+0x5>
     674:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.2015+0x6>
     678:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.2015+0x7>
>>>>>>> Stashed changes
	}
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
<<<<<<< Updated upstream
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b4 e6       	ldi	r27, 0x64	; 100
     674:	2a 85       	ldd	r18, Y+10	; 0x0a
     676:	3b 85       	ldd	r19, Y+11	; 0x0b
     678:	4c 85       	ldd	r20, Y+12	; 0x0c
     67a:	5d 85       	ldd	r21, Y+13	; 0x0d
     67c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__muluhisi3>
     680:	24 e6       	ldi	r18, 0x64	; 100
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	0e 94 36 0b 	call	0x166c	; 0x166c <__udivmodsi4>
=======
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b4 e6       	ldi	r27, 0x64	; 100
     680:	2a 85       	ldd	r18, Y+10	; 0x0a
     682:	3b 85       	ldd	r19, Y+11	; 0x0b
     684:	4c 85       	ldd	r20, Y+12	; 0x0c
     686:	5d 85       	ldd	r21, Y+13	; 0x0d
     688:	0e 94 6f 0b 	call	0x16de	; 0x16de <__muluhisi3>
     68c:	24 e6       	ldi	r18, 0x64	; 100
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	0e 94 4d 0b 	call	0x169a	; 0x169a <__udivmodsi4>
>>>>>>> Stashed changes
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     698:	c1 01       	movw	r24, r2
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	28 17       	cp	r18, r24
     6a0:	39 07       	cpc	r19, r25
     6a2:	4a 07       	cpc	r20, r26
     6a4:	5b 07       	cpc	r21, r27
     6a6:	18 f4       	brcc	.+6      	; 0x6ae <motorDriver+0x15c>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	a9 01       	movw	r20, r18
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
<<<<<<< Updated upstream
     6a2:	f9 84       	ldd	r15, Y+9	; 0x09
     6a4:	ef 2d       	mov	r30, r15
     6a6:	ff 0c       	add	r15, r15
     6a8:	ff 0b       	sbc	r31, r31
     6aa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2016>
     6ae:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2016+0x1>
     6b2:	e8 17       	cp	r30, r24
     6b4:	f9 07       	cpc	r31, r25
     6b6:	91 f1       	breq	.+100    	; 0x71c <motorDriver+0x1d6>
     6b8:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     6bc:	09 83       	std	Y+1, r16	; 0x01
     6be:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     6c2:	1a 83       	std	Y+2, r17	; 0x02
     6c4:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     6c8:	2b 83       	std	Y+3, r18	; 0x03
     6ca:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     6ce:	3c 83       	std	Y+4, r19	; 0x04
     6d0:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     6d4:	4d 83       	std	Y+5, r20	; 0x05
     6d6:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     6da:	5e 83       	std	Y+6, r21	; 0x06
     6dc:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     6e0:	6f 83       	std	Y+7, r22	; 0x07
     6e2:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     6e6:	78 87       	std	Y+8, r23	; 0x08
     6e8:	20 2f       	mov	r18, r16
     6ea:	31 2f       	mov	r19, r17
     6ec:	4b 81       	ldd	r20, Y+3	; 0x03
     6ee:	5c 81       	ldd	r21, Y+4	; 0x04
     6f0:	6d 81       	ldd	r22, Y+5	; 0x05
     6f2:	7e 81       	ldd	r23, Y+6	; 0x06
     6f4:	8f 81       	ldd	r24, Y+7	; 0x07
     6f6:	98 85       	ldd	r25, Y+8	; 0x08
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__cmpdi2_s8>
     6fe:	59 f4       	brne	.+22     	; 0x716 <motorDriver+0x1d0>
=======
     6ae:	f9 84       	ldd	r15, Y+9	; 0x09
     6b0:	ef 2d       	mov	r30, r15
     6b2:	ff 0c       	add	r15, r15
     6b4:	ff 0b       	sbc	r31, r31
     6b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2016>
     6ba:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2016+0x1>
     6be:	e8 17       	cp	r30, r24
     6c0:	f9 07       	cpc	r31, r25
     6c2:	91 f1       	breq	.+100    	; 0x728 <motorDriver+0x1d6>
     6c4:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     6c8:	09 83       	std	Y+1, r16	; 0x01
     6ca:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     6ce:	1a 83       	std	Y+2, r17	; 0x02
     6d0:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     6d4:	2b 83       	std	Y+3, r18	; 0x03
     6d6:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     6da:	3c 83       	std	Y+4, r19	; 0x04
     6dc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     6e0:	4d 83       	std	Y+5, r20	; 0x05
     6e2:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     6e6:	5e 83       	std	Y+6, r21	; 0x06
     6e8:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     6ec:	6f 83       	std	Y+7, r22	; 0x07
     6ee:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     6f2:	78 87       	std	Y+8, r23	; 0x08
     6f4:	20 2f       	mov	r18, r16
     6f6:	31 2f       	mov	r19, r17
     6f8:	4b 81       	ldd	r20, Y+3	; 0x03
     6fa:	5c 81       	ldd	r21, Y+4	; 0x04
     6fc:	6d 81       	ldd	r22, Y+5	; 0x05
     6fe:	7e 81       	ldd	r23, Y+6	; 0x06
     700:	8f 81       	ldd	r24, Y+7	; 0x07
     702:	98 85       	ldd	r25, Y+8	; 0x08
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__cmpdi2_s8>
     70a:	59 f4       	brne	.+22     	; 0x722 <motorDriver+0x1d0>
>>>>>>> Stashed changes
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     70c:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2016+0x1>
     710:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2016>
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	if(rp6Data.accelerationRate >= 5000){
     714:	88 e8       	ldi	r24, 0x88	; 136
     716:	88 16       	cp	r8, r24
     718:	83 e1       	ldi	r24, 0x13	; 19
     71a:	98 06       	cpc	r9, r24
     71c:	08 f4       	brcc	.+2      	; 0x720 <motorDriver+0x1ce>
     71e:	71 c0       	rjmp	.+226    	; 0x802 <motorDriver+0x2b0>
     720:	09 c0       	rjmp	.+18     	; 0x734 <motorDriver+0x1e2>
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	a9 01       	movw	r20, r18
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	if(rp6Data.accelerationRate >= 5000){
     728:	98 e8       	ldi	r25, 0x88	; 136
     72a:	89 16       	cp	r8, r25
     72c:	93 e1       	ldi	r25, 0x13	; 19
     72e:	99 06       	cpc	r9, r25
     730:	b8 f0       	brcs	.+46     	; 0x760 <motorDriver+0x20e>
     732:	03 c0       	rjmp	.+6      	; 0x73a <motorDriver+0x1e8>
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	a9 01       	movw	r20, r18
	}
	
	if(rp6Data.accelerationRate >= 5000){
		currentDriveSpeed = rp6Data.driveSpeed;
     73a:	89 01       	movw	r16, r18
     73c:	9a 01       	movw	r18, r20
     73e:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <currentDriveSpeed.2019>
     742:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <currentDriveSpeed.2019+0x1>
     746:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <currentDriveSpeed.2019+0x2>
     74a:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <currentDriveSpeed.2019+0x3>
     74e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.2019+0x4>
     752:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.2019+0x5>
     756:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.2019+0x6>
     75a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.2019+0x7>
     75e:	94 c1       	rjmp	.+808    	; 0xa88 <__stack+0x229>
	}else{
		//Smoothly adjust current drive speed to requested drive speed
		speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
<<<<<<< Updated upstream
     754:	59 01       	movw	r10, r18
     756:	6a 01       	movw	r12, r20
     758:	e1 2c       	mov	r14, r1
     75a:	f1 2c       	mov	r15, r1
     75c:	87 01       	movw	r16, r14
     75e:	29 83       	std	Y+1, r18	; 0x01
     760:	ba 82       	std	Y+2, r11	; 0x02
     762:	cb 82       	std	Y+3, r12	; 0x03
     764:	dc 82       	std	Y+4, r13	; 0x04
     766:	ed 82       	std	Y+5, r14	; 0x05
     768:	fe 82       	std	Y+6, r15	; 0x06
     76a:	0f 83       	std	Y+7, r16	; 0x07
     76c:	18 87       	std	Y+8, r17	; 0x08
     76e:	b0 90 74 00 	lds	r11, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     772:	b9 86       	std	Y+9, r11	; 0x09
     774:	c0 90 75 00 	lds	r12, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     778:	ca 86       	std	Y+10, r12	; 0x0a
     77a:	d0 90 76 00 	lds	r13, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     77e:	dc a6       	std	Y+44, r13	; 0x2c
     780:	e0 90 77 00 	lds	r14, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     784:	ed a6       	std	Y+45, r14	; 0x2d
     786:	f0 90 78 00 	lds	r15, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     78a:	fe a6       	std	Y+46, r15	; 0x2e
     78c:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     790:	0f a7       	std	Y+47, r16	; 0x2f
     792:	10 91 7a 00 	lds	r17, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     796:	18 ab       	std	Y+48, r17	; 0x30
     798:	40 90 7b 00 	lds	r4, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     79c:	2a 2d       	mov	r18, r10
     79e:	3a 81       	ldd	r19, Y+2	; 0x02
     7a0:	4b 81       	ldd	r20, Y+3	; 0x03
     7a2:	5c 81       	ldd	r21, Y+4	; 0x04
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	ab 2c       	mov	r10, r11
     7ae:	bc 2c       	mov	r11, r12
     7b0:	cd 2c       	mov	r12, r13
     7b2:	de 2c       	mov	r13, r14
     7b4:	ef 2c       	mov	r14, r15
     7b6:	f0 2e       	mov	r15, r16
     7b8:	01 2f       	mov	r16, r17
     7ba:	14 2d       	mov	r17, r4
     7bc:	0e 94 91 0b 	call	0x1722	; 0x1722 <__subdi3>
     7c0:	2c a3       	std	Y+36, r18	; 0x24
     7c2:	39 ab       	std	Y+49, r19	; 0x31
     7c4:	4a ab       	std	Y+50, r20	; 0x32
     7c6:	5b ab       	std	Y+51, r21	; 0x33
     7c8:	a6 2e       	mov	r10, r22
     7ca:	b7 2e       	mov	r11, r23
     7cc:	08 2f       	mov	r16, r24
     7ce:	19 2f       	mov	r17, r25
     7d0:	0e 94 c9 09 	call	0x1392	; 0x1392 <__floatdisf>
     7d4:	6b 01       	movw	r12, r22
     7d6:	7c 01       	movw	r14, r24
     7d8:	a7 01       	movw	r20, r14
     7da:	96 01       	movw	r18, r12
     7dc:	c7 01       	movw	r24, r14
     7de:	b6 01       	movw	r22, r12
     7e0:	0e 94 46 0a 	call	0x148c	; 0x148c <__mulsf3>
     7e4:	0e 94 b9 0a 	call	0x1572	; 0x1572 <sqrt>
	
		if(speedDifference < 2000){														//If the difference is less than 2000
     7e8:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fixunssfsi>
     7ec:	60 3d       	cpi	r22, 0xD0	; 208
     7ee:	77 40       	sbci	r23, 0x07	; 7
     7f0:	81 05       	cpc	r24, r1
     7f2:	91 05       	cpc	r25, r1
     7f4:	c8 f4       	brcc	.+50     	; 0x828 <motorDriver+0x2e2>
=======
     760:	59 01       	movw	r10, r18
     762:	6a 01       	movw	r12, r20
     764:	e1 2c       	mov	r14, r1
     766:	f1 2c       	mov	r15, r1
     768:	87 01       	movw	r16, r14
     76a:	29 83       	std	Y+1, r18	; 0x01
     76c:	ba 82       	std	Y+2, r11	; 0x02
     76e:	cb 82       	std	Y+3, r12	; 0x03
     770:	dc 82       	std	Y+4, r13	; 0x04
     772:	ed 82       	std	Y+5, r14	; 0x05
     774:	fe 82       	std	Y+6, r15	; 0x06
     776:	0f 83       	std	Y+7, r16	; 0x07
     778:	18 87       	std	Y+8, r17	; 0x08
     77a:	b0 90 74 00 	lds	r11, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     77e:	b9 86       	std	Y+9, r11	; 0x09
     780:	c0 90 75 00 	lds	r12, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     784:	ca 86       	std	Y+10, r12	; 0x0a
     786:	d0 90 76 00 	lds	r13, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     78a:	dc a6       	std	Y+44, r13	; 0x2c
     78c:	e0 90 77 00 	lds	r14, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     790:	ed a6       	std	Y+45, r14	; 0x2d
     792:	f0 90 78 00 	lds	r15, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     796:	fe a6       	std	Y+46, r15	; 0x2e
     798:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     79c:	0f a7       	std	Y+47, r16	; 0x2f
     79e:	10 91 7a 00 	lds	r17, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     7a2:	18 ab       	std	Y+48, r17	; 0x30
     7a4:	40 90 7b 00 	lds	r4, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     7a8:	2a 2d       	mov	r18, r10
     7aa:	3a 81       	ldd	r19, Y+2	; 0x02
     7ac:	4b 81       	ldd	r20, Y+3	; 0x03
     7ae:	5c 81       	ldd	r21, Y+4	; 0x04
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	ab 2c       	mov	r10, r11
     7ba:	bc 2c       	mov	r11, r12
     7bc:	cd 2c       	mov	r12, r13
     7be:	de 2c       	mov	r13, r14
     7c0:	ef 2c       	mov	r14, r15
     7c2:	f0 2e       	mov	r15, r16
     7c4:	01 2f       	mov	r16, r17
     7c6:	14 2d       	mov	r17, r4
     7c8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__subdi3>
     7cc:	2c a3       	std	Y+36, r18	; 0x24
     7ce:	39 ab       	std	Y+49, r19	; 0x31
     7d0:	4a ab       	std	Y+50, r20	; 0x32
     7d2:	5b ab       	std	Y+51, r21	; 0x33
     7d4:	a6 2e       	mov	r10, r22
     7d6:	b7 2e       	mov	r11, r23
     7d8:	08 2f       	mov	r16, r24
     7da:	19 2f       	mov	r17, r25
     7dc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__floatdisf>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
     7e4:	a7 01       	movw	r20, r14
     7e6:	96 01       	movw	r18, r12
     7e8:	c7 01       	movw	r24, r14
     7ea:	b6 01       	movw	r22, r12
     7ec:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__mulsf3>
     7f0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <sqrt>
	
		if(speedDifference < 2000){														//If the difference is less than 2000
     7f4:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fixunssfsi>
     7f8:	60 3d       	cpi	r22, 0xD0	; 208
     7fa:	77 40       	sbci	r23, 0x07	; 7
     7fc:	81 05       	cpc	r24, r1
     7fe:	91 05       	cpc	r25, r1
     800:	c8 f4       	brcc	.+50     	; 0x834 <motorDriver+0x2e2>
>>>>>>> Stashed changes
			currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     802:	39 81       	ldd	r19, Y+1	; 0x01
     804:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <currentDriveSpeed.2019>
     808:	4a 81       	ldd	r20, Y+2	; 0x02
     80a:	40 93 75 00 	sts	0x0075, r20	; 0x800075 <currentDriveSpeed.2019+0x1>
     80e:	5b 81       	ldd	r21, Y+3	; 0x03
     810:	50 93 76 00 	sts	0x0076, r21	; 0x800076 <currentDriveSpeed.2019+0x2>
     814:	6c 81       	ldd	r22, Y+4	; 0x04
     816:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <currentDriveSpeed.2019+0x3>
     81a:	7d 81       	ldd	r23, Y+5	; 0x05
     81c:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <currentDriveSpeed.2019+0x4>
     820:	8e 81       	ldd	r24, Y+6	; 0x06
     822:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <currentDriveSpeed.2019+0x5>
     826:	9f 81       	ldd	r25, Y+7	; 0x07
     828:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <currentDriveSpeed.2019+0x6>
     82c:	a8 85       	ldd	r26, Y+8	; 0x08
     82e:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <currentDriveSpeed.2019+0x7>
     832:	2a c1       	rjmp	.+596    	; 0xa88 <__stack+0x229>
		}else{																			//If the difference is more than 2000
			if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
<<<<<<< Updated upstream
     828:	2c a1       	ldd	r18, Y+36	; 0x24
     82a:	39 a9       	ldd	r19, Y+49	; 0x31
     82c:	4a a9       	ldd	r20, Y+50	; 0x32
     82e:	5b a9       	ldd	r21, Y+51	; 0x33
     830:	6a 2d       	mov	r22, r10
     832:	7b 2d       	mov	r23, r11
     834:	80 2f       	mov	r24, r16
     836:	91 2f       	mov	r25, r17
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__cmpdi2_s8>
     83e:	0c f0       	brlt	.+2      	; 0x842 <motorDriver+0x2fc>
     840:	a3 c0       	rjmp	.+326    	; 0x988 <__stack+0x129>
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     842:	51 01       	movw	r10, r2
     844:	c1 2c       	mov	r12, r1
     846:	d1 2c       	mov	r13, r1
     848:	e1 2c       	mov	r14, r1
     84a:	f1 2c       	mov	r15, r1
     84c:	87 01       	movw	r16, r14
     84e:	29 85       	ldd	r18, Y+9	; 0x09
     850:	3a 85       	ldd	r19, Y+10	; 0x0a
     852:	4c a5       	ldd	r20, Y+44	; 0x2c
     854:	5d a5       	ldd	r21, Y+45	; 0x2d
     856:	6e a5       	ldd	r22, Y+46	; 0x2e
     858:	7f a5       	ldd	r23, Y+47	; 0x2f
     85a:	88 a9       	ldd	r24, Y+48	; 0x30
     85c:	94 2d       	mov	r25, r4
     85e:	2c a2       	std	Y+36, r2	; 0x24
     860:	bd a2       	std	Y+37, r11	; 0x25
     862:	ce a2       	std	Y+38, r12	; 0x26
     864:	df a2       	std	Y+39, r13	; 0x27
     866:	e8 a6       	std	Y+40, r14	; 0x28
     868:	f9 a6       	std	Y+41, r15	; 0x29
     86a:	0a a7       	std	Y+42, r16	; 0x2a
     86c:	1b a7       	std	Y+43, r17	; 0x2b
     86e:	c1 2c       	mov	r12, r1
     870:	d1 2c       	mov	r13, r1
     872:	e1 2c       	mov	r14, r1
     874:	f1 2c       	mov	r15, r1
     876:	00 e0       	ldi	r16, 0x00	; 0
     878:	10 e0       	ldi	r17, 0x00	; 0
     87a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
     87e:	cc f4       	brge	.+50     	; 0x8b2 <__stack+0x53>
=======
     834:	2c a1       	ldd	r18, Y+36	; 0x24
     836:	39 a9       	ldd	r19, Y+49	; 0x31
     838:	4a a9       	ldd	r20, Y+50	; 0x32
     83a:	5b a9       	ldd	r21, Y+51	; 0x33
     83c:	6a 2d       	mov	r22, r10
     83e:	7b 2d       	mov	r23, r11
     840:	80 2f       	mov	r24, r16
     842:	91 2f       	mov	r25, r17
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__cmpdi2_s8>
     84a:	0c f0       	brlt	.+2      	; 0x84e <motorDriver+0x2fc>
     84c:	63 c0       	rjmp	.+198    	; 0x914 <__stack+0xb5>
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     84e:	51 01       	movw	r10, r2
     850:	c1 2c       	mov	r12, r1
     852:	d1 2c       	mov	r13, r1
     854:	e1 2c       	mov	r14, r1
     856:	f1 2c       	mov	r15, r1
     858:	87 01       	movw	r16, r14
     85a:	29 85       	ldd	r18, Y+9	; 0x09
     85c:	3a 85       	ldd	r19, Y+10	; 0x0a
     85e:	4c a5       	ldd	r20, Y+44	; 0x2c
     860:	5d a5       	ldd	r21, Y+45	; 0x2d
     862:	6e a5       	ldd	r22, Y+46	; 0x2e
     864:	7f a5       	ldd	r23, Y+47	; 0x2f
     866:	88 a9       	ldd	r24, Y+48	; 0x30
     868:	94 2d       	mov	r25, r4
     86a:	2c a2       	std	Y+36, r2	; 0x24
     86c:	bd a2       	std	Y+37, r11	; 0x25
     86e:	ce a2       	std	Y+38, r12	; 0x26
     870:	df a2       	std	Y+39, r13	; 0x27
     872:	e8 a6       	std	Y+40, r14	; 0x28
     874:	f9 a6       	std	Y+41, r15	; 0x29
     876:	0a a7       	std	Y+42, r16	; 0x2a
     878:	1b a7       	std	Y+43, r17	; 0x2b
     87a:	c1 2c       	mov	r12, r1
     87c:	d1 2c       	mov	r13, r1
     87e:	e1 2c       	mov	r14, r1
     880:	f1 2c       	mov	r15, r1
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
     88a:	cc f4       	brge	.+50     	; 0x8be <__stack+0x5f>
>>>>>>> Stashed changes
					currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     88c:	b9 81       	ldd	r27, Y+1	; 0x01
     88e:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2019>
     892:	ea 81       	ldd	r30, Y+2	; 0x02
     894:	e0 93 75 00 	sts	0x0075, r30	; 0x800075 <currentDriveSpeed.2019+0x1>
     898:	ab 80       	ldd	r10, Y+3	; 0x03
     89a:	a0 92 76 00 	sts	0x0076, r10	; 0x800076 <currentDriveSpeed.2019+0x2>
     89e:	bc 80       	ldd	r11, Y+4	; 0x04
     8a0:	b0 92 77 00 	sts	0x0077, r11	; 0x800077 <currentDriveSpeed.2019+0x3>
     8a4:	cd 80       	ldd	r12, Y+5	; 0x05
     8a6:	c0 92 78 00 	sts	0x0078, r12	; 0x800078 <currentDriveSpeed.2019+0x4>
     8aa:	de 80       	ldd	r13, Y+6	; 0x06
     8ac:	d0 92 79 00 	sts	0x0079, r13	; 0x800079 <currentDriveSpeed.2019+0x5>
     8b0:	ef 80       	ldd	r14, Y+7	; 0x07
     8b2:	e0 92 7a 00 	sts	0x007A, r14	; 0x80007a <currentDriveSpeed.2019+0x6>
     8b6:	f8 84       	ldd	r15, Y+8	; 0x08
     8b8:	f0 92 7b 00 	sts	0x007B, r15	; 0x80007b <currentDriveSpeed.2019+0x7>
     8bc:	e5 c0       	rjmp	.+458    	; 0xa88 <__stack+0x229>
				}else{																			//If the current speed is higher than 5000
					currentDriveSpeed -= rp6Data.accelerationRate;							//Decelerate with a given percentage of the current speed, determined by accelerationRate
     8be:	84 01       	movw	r16, r8
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	ba 01       	movw	r22, r20
     8c6:	4d 83       	std	Y+5, r20	; 0x05
     8c8:	5e 83       	std	Y+6, r21	; 0x06
     8ca:	6f 83       	std	Y+7, r22	; 0x07
     8cc:	78 87       	std	Y+8, r23	; 0x08
     8ce:	29 85       	ldd	r18, Y+9	; 0x09
     8d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d2:	4c a5       	ldd	r20, Y+44	; 0x2c
     8d4:	5d a5       	ldd	r21, Y+45	; 0x2d
     8d6:	6e a5       	ldd	r22, Y+46	; 0x2e
     8d8:	7f a5       	ldd	r23, Y+47	; 0x2f
     8da:	88 a9       	ldd	r24, Y+48	; 0x30
     8dc:	94 2d       	mov	r25, r4
     8de:	a8 2c       	mov	r10, r8
     8e0:	b1 2e       	mov	r11, r17
     8e2:	c1 2c       	mov	r12, r1
     8e4:	d1 2c       	mov	r13, r1
     8e6:	e1 2c       	mov	r14, r1
     8e8:	f1 2c       	mov	r15, r1
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	10 e0       	ldi	r17, 0x00	; 0
<<<<<<< Updated upstream
     8ee:	98 01       	movw	r18, r16
     8f0:	0d 83       	std	Y+5, r16	; 0x05
     8f2:	1e 83       	std	Y+6, r17	; 0x06
     8f4:	2f 83       	std	Y+7, r18	; 0x07
     8f6:	38 87       	std	Y+8, r19	; 0x08
     8f8:	29 85       	ldd	r18, Y+9	; 0x09
     8fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     8fc:	a8 2c       	mov	r10, r8
     8fe:	bd 2c       	mov	r11, r13
     900:	c1 2c       	mov	r12, r1
     902:	d1 2c       	mov	r13, r1
     904:	e1 2c       	mov	r14, r1
     906:	f1 2c       	mov	r15, r1
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	0e 94 91 0b 	call	0x1722	; 0x1722 <__subdi3>
     910:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     914:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     918:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     91c:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     920:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     924:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     928:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     92c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
     930:	ed c0       	rjmp	.+474    	; 0xb0c <__stack+0x2ad>
					else{currentDriveSpeed -= rp6Data.accelerationRate;}							//Decelerate with a given percentage of the current speed, determined by accelerationRate
     932:	74 01       	movw	r14, r8
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	a9 01       	movw	r20, r18
     93a:	2d 83       	std	Y+5, r18	; 0x05
     93c:	3e 83       	std	Y+6, r19	; 0x06
     93e:	4f 83       	std	Y+7, r20	; 0x07
     940:	58 87       	std	Y+8, r21	; 0x08
     942:	29 85       	ldd	r18, Y+9	; 0x09
     944:	3a 85       	ldd	r19, Y+10	; 0x0a
     946:	4c a5       	ldd	r20, Y+44	; 0x2c
     948:	5d a5       	ldd	r21, Y+45	; 0x2d
     94a:	6e a5       	ldd	r22, Y+46	; 0x2e
     94c:	7f a5       	ldd	r23, Y+47	; 0x2f
     94e:	88 a9       	ldd	r24, Y+48	; 0x30
     950:	94 2d       	mov	r25, r4
     952:	a8 2c       	mov	r10, r8
     954:	bf 2c       	mov	r11, r15
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	e1 2c       	mov	r14, r1
     95c:	f1 2c       	mov	r15, r1
     95e:	00 e0       	ldi	r16, 0x00	; 0
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	0e 94 91 0b 	call	0x1722	; 0x1722 <__subdi3>
     966:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     96a:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     96e:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     972:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     976:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     97a:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     97e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     982:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
     986:	c2 c0       	rjmp	.+388    	; 0xb0c <__stack+0x2ad>
				}
			}else{																			//If we need to accelerate
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     988:	81 01       	movw	r16, r2
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	ba 01       	movw	r22, r20
     994:	2c a2       	std	Y+36, r2	; 0x24
     996:	1d a3       	std	Y+37, r17	; 0x25
     998:	2e a3       	std	Y+38, r18	; 0x26
     99a:	3f a3       	std	Y+39, r19	; 0x27
     99c:	48 a7       	std	Y+40, r20	; 0x28
     99e:	59 a7       	std	Y+41, r21	; 0x29
     9a0:	6a a7       	std	Y+42, r22	; 0x2a
     9a2:	7b a7       	std	Y+43, r23	; 0x2b
     9a4:	29 85       	ldd	r18, Y+9	; 0x09
     9a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a8:	4c a5       	ldd	r20, Y+44	; 0x2c
     9aa:	5d a5       	ldd	r21, Y+45	; 0x2d
     9ac:	6e a5       	ldd	r22, Y+46	; 0x2e
     9ae:	7f a5       	ldd	r23, Y+47	; 0x2f
     9b0:	88 a9       	ldd	r24, Y+48	; 0x30
     9b2:	94 2d       	mov	r25, r4
     9b4:	a2 2c       	mov	r10, r2
     9b6:	b1 2e       	mov	r11, r17
     9b8:	c1 2c       	mov	r12, r1
     9ba:	d1 2c       	mov	r13, r1
     9bc:	e1 2c       	mov	r14, r1
     9be:	f1 2c       	mov	r15, r1
     9c0:	00 e0       	ldi	r16, 0x00	; 0
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
     9c8:	9c f4       	brge	.+38     	; 0x9f0 <__stack+0x191>
					currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     9ca:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__adddi3>
     9ce:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     9d2:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     9d6:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     9da:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     9de:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     9e2:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     9e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     9ea:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
     9ee:	8e c0       	rjmp	.+284    	; 0xb0c <__stack+0x2ad>
=======
     8ee:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__subdi3>
     8f2:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     8f6:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     8fa:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     8fe:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     902:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     906:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     90a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     90e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
     912:	ba c0       	rjmp	.+372    	; 0xa88 <__stack+0x229>
				}
			}else{																			//If we need to accelerate
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     914:	91 01       	movw	r18, r2
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	cb 01       	movw	r24, r22
     920:	2c a2       	std	Y+36, r2	; 0x24
     922:	3d a3       	std	Y+37, r19	; 0x25
     924:	4e a3       	std	Y+38, r20	; 0x26
     926:	5f a3       	std	Y+39, r21	; 0x27
     928:	68 a7       	std	Y+40, r22	; 0x28
     92a:	79 a7       	std	Y+41, r23	; 0x29
     92c:	8a a7       	std	Y+42, r24	; 0x2a
     92e:	9b a7       	std	Y+43, r25	; 0x2b
     930:	29 85       	ldd	r18, Y+9	; 0x09
     932:	3a 85       	ldd	r19, Y+10	; 0x0a
     934:	4c a5       	ldd	r20, Y+44	; 0x2c
     936:	5d a5       	ldd	r21, Y+45	; 0x2d
     938:	6e a5       	ldd	r22, Y+46	; 0x2e
     93a:	7f a5       	ldd	r23, Y+47	; 0x2f
     93c:	88 a9       	ldd	r24, Y+48	; 0x30
     93e:	94 2d       	mov	r25, r4
     940:	ac a0       	ldd	r10, Y+36	; 0x24
     942:	bd a0       	ldd	r11, Y+37	; 0x25
     944:	c1 2c       	mov	r12, r1
     946:	d1 2c       	mov	r13, r1
     948:	e1 2c       	mov	r14, r1
     94a:	f1 2c       	mov	r15, r1
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
     954:	9c f4       	brge	.+38     	; 0x97c <__stack+0x11d>
					currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     956:	0e 94 93 0b 	call	0x1726	; 0x1726 <__adddi3>
     95a:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     95e:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     962:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     966:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     96a:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     96e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     972:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     976:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
     97a:	86 c0       	rjmp	.+268    	; 0xa88 <__stack+0x229>
>>>>>>> Stashed changes
				}else{																			//If we are at a speed higher than the threshold
					if(currentDriveSpeed < 7000){currentDriveSpeed += rp6Data.accelerationRate/4;}
<<<<<<< Updated upstream
     a00:	29 85       	ldd	r18, Y+9	; 0x09
     a02:	3a 85       	ldd	r19, Y+10	; 0x0a
     a04:	4c a5       	ldd	r20, Y+44	; 0x2c
     a06:	5d a5       	ldd	r21, Y+45	; 0x2d
     a08:	6e a5       	ldd	r22, Y+46	; 0x2e
     a0a:	7f a5       	ldd	r23, Y+47	; 0x2f
     a0c:	88 a9       	ldd	r24, Y+48	; 0x30
     a0e:	94 2d       	mov	r25, r4
     a10:	27 35       	cpi	r18, 0x57	; 87
     a12:	3b 41       	sbci	r19, 0x1B	; 27
     a14:	41 05       	cpc	r20, r1
     a16:	51 05       	cpc	r21, r1
     a18:	61 05       	cpc	r22, r1
     a1a:	71 05       	cpc	r23, r1
     a1c:	81 05       	cpc	r24, r1
     a1e:	91 05       	cpc	r25, r1
     a20:	09 f0       	breq	.+2      	; 0xa24 <__stack+0x1c5>
     a22:	3c f5       	brge	.+78     	; 0xa72 <__stack+0x213>
     a24:	96 94       	lsr	r9
     a26:	87 94       	ror	r8
     a28:	96 94       	lsr	r9
     a2a:	87 94       	ror	r8
     a2c:	28 2d       	mov	r18, r8
     a2e:	39 2d       	mov	r19, r9
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a9 84       	ldd	r10, Y+9	; 0x09
     a3e:	ba 84       	ldd	r11, Y+10	; 0x0a
     a40:	cc a4       	ldd	r12, Y+44	; 0x2c
     a42:	dd a4       	ldd	r13, Y+45	; 0x2d
     a44:	ee a4       	ldd	r14, Y+46	; 0x2e
     a46:	ff a4       	ldd	r15, Y+47	; 0x2f
     a48:	08 a9       	ldd	r16, Y+48	; 0x30
     a4a:	14 2d       	mov	r17, r4
     a4c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__adddi3>
     a50:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     a54:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     a58:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     a5c:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     a60:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     a64:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     a68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     a6c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
     a70:	22 c0       	rjmp	.+68     	; 0xab6 <__stack+0x257>
					else{currentDriveSpeed += rp6Data.accelerationRate;}							//Accelerate with a percentage of the current speed, determined by accelerationRate
     a72:	28 2d       	mov	r18, r8
     a74:	39 2d       	mov	r19, r9
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a9 84       	ldd	r10, Y+9	; 0x09
     a84:	ba 84       	ldd	r11, Y+10	; 0x0a
     a86:	cc a4       	ldd	r12, Y+44	; 0x2c
     a88:	dd a4       	ldd	r13, Y+45	; 0x2d
     a8a:	ee a4       	ldd	r14, Y+46	; 0x2e
     a8c:	ff a4       	ldd	r15, Y+47	; 0x2f
     a8e:	08 a9       	ldd	r16, Y+48	; 0x30
     a90:	14 2d       	mov	r17, r4
     a92:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__adddi3>
     a96:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     a9a:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     a9e:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     aa2:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     aa6:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     aaa:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     aae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     ab2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
					if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     ab6:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     aba:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     abe:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     ac2:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     ac6:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     aca:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     ace:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     ad2:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     ad6:	29 81       	ldd	r18, Y+1	; 0x01
     ad8:	3a 81       	ldd	r19, Y+2	; 0x02
     ada:	4b 81       	ldd	r20, Y+3	; 0x03
     adc:	5c 81       	ldd	r21, Y+4	; 0x04
     ade:	6d 81       	ldd	r22, Y+5	; 0x05
     ae0:	7e 81       	ldd	r23, Y+6	; 0x06
     ae2:	8f 81       	ldd	r24, Y+7	; 0x07
     ae4:	98 85       	ldd	r25, Y+8	; 0x08
     ae6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
     aea:	84 f4       	brge	.+32     	; 0xb0c <__stack+0x2ad>
     aec:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     af0:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     af4:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     af8:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     afc:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     b00:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     b04:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     b08:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
=======
     97c:	29 85       	ldd	r18, Y+9	; 0x09
     97e:	3a 85       	ldd	r19, Y+10	; 0x0a
     980:	4c a5       	ldd	r20, Y+44	; 0x2c
     982:	5d a5       	ldd	r21, Y+45	; 0x2d
     984:	6e a5       	ldd	r22, Y+46	; 0x2e
     986:	7f a5       	ldd	r23, Y+47	; 0x2f
     988:	88 a9       	ldd	r24, Y+48	; 0x30
     98a:	94 2d       	mov	r25, r4
     98c:	27 35       	cpi	r18, 0x57	; 87
     98e:	3b 41       	sbci	r19, 0x1B	; 27
     990:	41 05       	cpc	r20, r1
     992:	51 05       	cpc	r21, r1
     994:	61 05       	cpc	r22, r1
     996:	71 05       	cpc	r23, r1
     998:	81 05       	cpc	r24, r1
     99a:	91 05       	cpc	r25, r1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__stack+0x141>
     99e:	3c f5       	brge	.+78     	; 0x9ee <__stack+0x18f>
     9a0:	96 94       	lsr	r9
     9a2:	87 94       	ror	r8
     9a4:	96 94       	lsr	r9
     9a6:	87 94       	ror	r8
     9a8:	28 2d       	mov	r18, r8
     9aa:	39 2d       	mov	r19, r9
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a9 84       	ldd	r10, Y+9	; 0x09
     9ba:	ba 84       	ldd	r11, Y+10	; 0x0a
     9bc:	cc a4       	ldd	r12, Y+44	; 0x2c
     9be:	dd a4       	ldd	r13, Y+45	; 0x2d
     9c0:	ee a4       	ldd	r14, Y+46	; 0x2e
     9c2:	ff a4       	ldd	r15, Y+47	; 0x2f
     9c4:	08 a9       	ldd	r16, Y+48	; 0x30
     9c6:	14 2d       	mov	r17, r4
     9c8:	0e 94 93 0b 	call	0x1726	; 0x1726 <__adddi3>
     9cc:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     9d0:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     9d4:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     9d8:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     9dc:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     9e0:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     9e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     9e8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
     9ec:	22 c0       	rjmp	.+68     	; 0xa32 <__stack+0x1d3>
					else{currentDriveSpeed += rp6Data.accelerationRate;}							//Accelerate with a percentage of the current speed, determined by accelerationRate
     9ee:	28 2d       	mov	r18, r8
     9f0:	39 2d       	mov	r19, r9
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a9 84       	ldd	r10, Y+9	; 0x09
     a00:	ba 84       	ldd	r11, Y+10	; 0x0a
     a02:	cc a4       	ldd	r12, Y+44	; 0x2c
     a04:	dd a4       	ldd	r13, Y+45	; 0x2d
     a06:	ee a4       	ldd	r14, Y+46	; 0x2e
     a08:	ff a4       	ldd	r15, Y+47	; 0x2f
     a0a:	08 a9       	ldd	r16, Y+48	; 0x30
     a0c:	14 2d       	mov	r17, r4
     a0e:	0e 94 93 0b 	call	0x1726	; 0x1726 <__adddi3>
     a12:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     a16:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     a1a:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     a1e:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     a22:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     a26:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     a2a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     a2e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
					if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     a32:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     a36:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     a3a:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     a3e:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     a42:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     a46:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     a4a:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     a4e:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     a52:	29 81       	ldd	r18, Y+1	; 0x01
     a54:	3a 81       	ldd	r19, Y+2	; 0x02
     a56:	4b 81       	ldd	r20, Y+3	; 0x03
     a58:	5c 81       	ldd	r21, Y+4	; 0x04
     a5a:	6d 81       	ldd	r22, Y+5	; 0x05
     a5c:	7e 81       	ldd	r23, Y+6	; 0x06
     a5e:	8f 81       	ldd	r24, Y+7	; 0x07
     a60:	98 85       	ldd	r25, Y+8	; 0x08
     a62:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
     a66:	84 f4       	brge	.+32     	; 0xa88 <__stack+0x229>
     a68:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2019>
     a6c:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2019+0x1>
     a70:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2019+0x2>
     a74:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2019+0x3>
     a78:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2019+0x4>
     a7c:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2019+0x5>
     a80:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2019+0x6>
     a84:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2019+0x7>
			}
>>>>>>> Stashed changes
		}
	}
	
	
	if(currentDriveSpeed < 0){
     a88:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     a8c:	e0 90 75 00 	lds	r14, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     a90:	f0 90 76 00 	lds	r15, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     a94:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     a98:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     a9c:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     aa0:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     aa4:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     aa8:	2d 2d       	mov	r18, r13
     aaa:	3e 2d       	mov	r19, r14
     aac:	4f 2d       	mov	r20, r15
     aae:	50 2f       	mov	r21, r16
     ab0:	61 2f       	mov	r22, r17
     ab2:	7b 2f       	mov	r23, r27
     ab4:	8f 2f       	mov	r24, r31
     ab6:	9e 2f       	mov	r25, r30
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__cmpdi2_s8>
     abe:	8c f4       	brge	.+34     	; 0xae2 <__stack+0x283>
		currentDriveSpeed = 0;
     ac0:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <currentDriveSpeed.2019>
     ac4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <currentDriveSpeed.2019+0x1>
     ac8:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <currentDriveSpeed.2019+0x2>
     acc:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <currentDriveSpeed.2019+0x3>
     ad0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.2019+0x4>
     ad4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.2019+0x5>
     ad8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.2019+0x6>
     adc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.2019+0x7>
     ae0:	23 c0       	rjmp	.+70     	; 0xb28 <__stack+0x2c9>
	}else if(currentDriveSpeed > 25600){
     ae2:	2d 2d       	mov	r18, r13
     ae4:	3e 2d       	mov	r19, r14
     ae6:	4f 2d       	mov	r20, r15
     ae8:	50 2f       	mov	r21, r16
     aea:	61 2f       	mov	r22, r17
     aec:	7b 2f       	mov	r23, r27
     aee:	8f 2f       	mov	r24, r31
     af0:	9e 2f       	mov	r25, r30
     af2:	21 15       	cp	r18, r1
     af4:	34 46       	sbci	r19, 0x64	; 100
     af6:	41 05       	cpc	r20, r1
     af8:	51 05       	cpc	r21, r1
     afa:	61 05       	cpc	r22, r1
     afc:	71 05       	cpc	r23, r1
     afe:	81 05       	cpc	r24, r1
     b00:	91 05       	cpc	r25, r1
     b02:	91 f0       	breq	.+36     	; 0xb28 <__stack+0x2c9>
     b04:	8c f0       	brlt	.+34     	; 0xb28 <__stack+0x2c9>
		currentDriveSpeed = 25600;
     b06:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <currentDriveSpeed.2019>
     b0a:	84 e6       	ldi	r24, 0x64	; 100
     b0c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <currentDriveSpeed.2019+0x1>
     b10:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <currentDriveSpeed.2019+0x2>
     b14:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <currentDriveSpeed.2019+0x3>
     b18:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.2019+0x4>
     b1c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.2019+0x5>
     b20:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.2019+0x6>
     b24:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.2019+0x7>
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     b28:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2016>
     b2c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2016+0x1>
     b30:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2020+0x1>
     b34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2020>
	rightMotorDirection = currentDriveDirection;
     b38:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     b3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     b40:	90 90 74 00 	lds	r9, 0x0074	; 0x800074 <currentDriveSpeed.2019>
     b44:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
     b48:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <currentDriveSpeed.2019+0x2>
     b4c:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <currentDriveSpeed.2019+0x3>
     b50:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <currentDriveSpeed.2019+0x4>
     b54:	19 87       	std	Y+9, r17	; 0x09
     b56:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <currentDriveSpeed.2019+0x5>
     b5a:	2a 87       	std	Y+10, r18	; 0x0a
     b5c:	80 90 7a 00 	lds	r8, 0x007A	; 0x80007a <currentDriveSpeed.2019+0x6>
     b60:	40 90 7b 00 	lds	r4, 0x007B	; 0x80007b <currentDriveSpeed.2019+0x7>
     b64:	99 82       	std	Y+1, r9	; 0x01
     b66:	ba 83       	std	Y+2, r27	; 0x02
     b68:	fb 83       	std	Y+3, r31	; 0x03
     b6a:	ec 83       	std	Y+4, r30	; 0x04
     b6c:	90 92 70 00 	sts	0x0070, r9	; 0x800070 <leftMotorSpeed.2022>
     b70:	b0 93 71 00 	sts	0x0071, r27	; 0x800071 <leftMotorSpeed.2022+0x1>
     b74:	f0 93 72 00 	sts	0x0072, r31	; 0x800072 <leftMotorSpeed.2022+0x2>
     b78:	e0 93 73 00 	sts	0x0073, r30	; 0x800073 <leftMotorSpeed.2022+0x3>
	rightMotorSpeed = currentDriveSpeed;
     b7c:	90 92 6c 00 	sts	0x006C, r9	; 0x80006c <rightMotorSpeed.2023>
     b80:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <rightMotorSpeed.2023+0x1>
     b84:	f0 93 6e 00 	sts	0x006E, r31	; 0x80006e <rightMotorSpeed.2023+0x2>
     b88:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <rightMotorSpeed.2023+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     b8c:	3e 85       	ldd	r19, Y+14	; 0x0e
     b8e:	83 2f       	mov	r24, r19
     b90:	33 0f       	add	r19, r19
     b92:	99 0b       	sbc	r25, r25
     b94:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <currentTurnDirection.2017>
     b98:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <currentTurnDirection.2017+0x1>
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	29 f1       	breq	.+74     	; 0xbec <__stack+0x38d>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     ba2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <currentTurnDirection.2017+0x1>
     ba6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentTurnDirection.2017>
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     baa:	25 2d       	mov	r18, r5
     bac:	36 2d       	mov	r19, r6
     bae:	47 2d       	mov	r20, r7
     bb0:	5e 89       	ldd	r21, Y+22	; 0x16
     bb2:	68 a1       	ldd	r22, Y+32	; 0x20
     bb4:	79 a1       	ldd	r23, Y+33	; 0x21
     bb6:	8a a1       	ldd	r24, Y+34	; 0x22
     bb8:	9b a1       	ldd	r25, Y+35	; 0x23
     bba:	20 56       	subi	r18, 0x60	; 96
     bbc:	39 47       	sbci	r19, 0x79	; 121
     bbe:	4e 4f       	sbci	r20, 0xFE	; 254
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
     bc2:	6f 4f       	sbci	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	8f 4f       	sbci	r24, 0xFF	; 255
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.2015>
     bce:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.2015+0x1>
     bd2:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.2015+0x2>
     bd6:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.2015+0x3>
     bda:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.2015+0x4>
     bde:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.2015+0x5>
     be2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.2015+0x6>
     be6:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.2015+0x7>
     bea:	26 c2       	rjmp	.+1100   	; 0x1038 <__stack+0x7d9>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     bec:	8f 3f       	cpi	r24, 0xFF	; 255
     bee:	4f ef       	ldi	r20, 0xFF	; 255
     bf0:	94 07       	cpc	r25, r20
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <__stack+0x397>
     bf4:	0f c1       	rjmp	.+542    	; 0xe14 <__stack+0x5b5>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
<<<<<<< Updated upstream
     bda:	29 2d       	mov	r18, r9
     bdc:	3b 2f       	mov	r19, r27
     bde:	4f 2f       	mov	r20, r31
     be0:	5e 2f       	mov	r21, r30
     be2:	69 85       	ldd	r22, Y+9	; 0x09
     be4:	7a 85       	ldd	r23, Y+10	; 0x0a
     be6:	88 2d       	mov	r24, r8
     be8:	94 2d       	mov	r25, r4
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__cmpdi2_s8>
     bf0:	31 f5       	brne	.+76     	; 0xc3e <__stack+0x3df>
=======
     bf6:	29 2d       	mov	r18, r9
     bf8:	3b 2f       	mov	r19, r27
     bfa:	4f 2f       	mov	r20, r31
     bfc:	5e 2f       	mov	r21, r30
     bfe:	69 85       	ldd	r22, Y+9	; 0x09
     c00:	7a 85       	ldd	r23, Y+10	; 0x0a
     c02:	88 2d       	mov	r24, r8
     c04:	94 2d       	mov	r25, r4
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__cmpdi2_s8>
     c0c:	31 f5       	brne	.+76     	; 0xc5a <__stack+0x3fb>
>>>>>>> Stashed changes
			leftMotorDirection = 0;											//Turn the left motor backwards
     c0e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2020+0x1>
     c12:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2020>
			rightMotorDirection = 1;										//Turn the right motor forwards
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     c1e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//Set the speed to minimal + twice the turn rate
     c22:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c24:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c26:	36 95       	lsr	r19
     c28:	27 95       	ror	r18
     c2a:	c1 01       	movw	r24, r2
     c2c:	80 53       	subi	r24, 0x30	; 48
     c2e:	98 4f       	sbci	r25, 0xF8	; 248
     c30:	82 0f       	add	r24, r18
     c32:	93 1f       	adc	r25, r19
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
     c3c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
     c40:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
     c44:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//---^
     c48:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     c4c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     c50:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     c54:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
     c58:	0f c2       	rjmp	.+1054   	; 0x1078 <__stack+0x819>
		}else{															//If we are driving (Forward or backwards does not matter)
			
			if((currentDriveSpeed - rp6Data.turnRate) < (rp6Data.driveSpeedThreshold + 2000)){
<<<<<<< Updated upstream
     c3e:	ce 8c       	ldd	r12, Y+30	; 0x1e
     c40:	df 8c       	ldd	r13, Y+31	; 0x1f
     c42:	56 01       	movw	r10, r12
     c44:	c1 2c       	mov	r12, r1
     c46:	d1 2c       	mov	r13, r1
     c48:	e1 2c       	mov	r14, r1
     c4a:	f1 2c       	mov	r15, r1
     c4c:	87 01       	movw	r16, r14
     c4e:	ae 86       	std	Y+14, r10	; 0x0e
     c50:	bf 86       	std	Y+15, r11	; 0x0f
     c52:	c8 8a       	std	Y+16, r12	; 0x10
     c54:	d9 8a       	std	Y+17, r13	; 0x11
     c56:	ea 8a       	std	Y+18, r14	; 0x12
     c58:	fb 8a       	std	Y+19, r15	; 0x13
     c5a:	0c 8b       	std	Y+20, r16	; 0x14
     c5c:	1d 8b       	std	Y+21, r17	; 0x15
     c5e:	31 01       	movw	r6, r2
     c60:	00 e3       	ldi	r16, 0x30	; 48
     c62:	60 1a       	sub	r6, r16
     c64:	08 ef       	ldi	r16, 0xF8	; 248
     c66:	70 0a       	sbc	r7, r16
     c68:	29 2d       	mov	r18, r9
     c6a:	3b 2f       	mov	r19, r27
     c6c:	4f 2f       	mov	r20, r31
     c6e:	5e 2f       	mov	r21, r30
     c70:	69 85       	ldd	r22, Y+9	; 0x09
     c72:	7a 85       	ldd	r23, Y+10	; 0x0a
     c74:	88 2d       	mov	r24, r8
     c76:	94 2d       	mov	r25, r4
     c78:	c1 2c       	mov	r12, r1
     c7a:	d1 2c       	mov	r13, r1
     c7c:	e1 2c       	mov	r14, r1
     c7e:	f1 2c       	mov	r15, r1
     c80:	00 e0       	ldi	r16, 0x00	; 0
     c82:	10 e0       	ldi	r17, 0x00	; 0
     c84:	0e 94 91 0b 	call	0x1722	; 0x1722 <__subdi3>
     c88:	53 01       	movw	r10, r6
     c8a:	c1 2c       	mov	r12, r1
     c8c:	d1 2c       	mov	r13, r1
     c8e:	e1 2c       	mov	r14, r1
     c90:	f1 2c       	mov	r15, r1
     c92:	87 01       	movw	r16, r14
     c94:	6e 8a       	std	Y+22, r6	; 0x16
     c96:	bf 8a       	std	Y+23, r11	; 0x17
     c98:	c8 8e       	std	Y+24, r12	; 0x18
     c9a:	d9 8e       	std	Y+25, r13	; 0x19
     c9c:	ea 8e       	std	Y+26, r14	; 0x1a
     c9e:	fb 8e       	std	Y+27, r15	; 0x1b
     ca0:	0c 8f       	std	Y+28, r16	; 0x1c
     ca2:	1d 8f       	std	Y+29, r17	; 0x1d
     ca4:	c1 2c       	mov	r12, r1
     ca6:	d1 2c       	mov	r13, r1
     ca8:	e1 2c       	mov	r14, r1
     caa:	f1 2c       	mov	r15, r1
     cac:	00 e0       	ldi	r16, 0x00	; 0
     cae:	10 e0       	ldi	r17, 0x00	; 0
     cb0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
     cb4:	7c f5       	brge	.+94     	; 0xd14 <__stack+0x4b5>
=======
     c5a:	ce 8c       	ldd	r12, Y+30	; 0x1e
     c5c:	df 8c       	ldd	r13, Y+31	; 0x1f
     c5e:	56 01       	movw	r10, r12
     c60:	c1 2c       	mov	r12, r1
     c62:	d1 2c       	mov	r13, r1
     c64:	e1 2c       	mov	r14, r1
     c66:	f1 2c       	mov	r15, r1
     c68:	87 01       	movw	r16, r14
     c6a:	ae 86       	std	Y+14, r10	; 0x0e
     c6c:	bf 86       	std	Y+15, r11	; 0x0f
     c6e:	c8 8a       	std	Y+16, r12	; 0x10
     c70:	d9 8a       	std	Y+17, r13	; 0x11
     c72:	ea 8a       	std	Y+18, r14	; 0x12
     c74:	fb 8a       	std	Y+19, r15	; 0x13
     c76:	0c 8b       	std	Y+20, r16	; 0x14
     c78:	1d 8b       	std	Y+21, r17	; 0x15
     c7a:	31 01       	movw	r6, r2
     c7c:	00 e3       	ldi	r16, 0x30	; 48
     c7e:	60 1a       	sub	r6, r16
     c80:	08 ef       	ldi	r16, 0xF8	; 248
     c82:	70 0a       	sbc	r7, r16
     c84:	29 2d       	mov	r18, r9
     c86:	3b 2f       	mov	r19, r27
     c88:	4f 2f       	mov	r20, r31
     c8a:	5e 2f       	mov	r21, r30
     c8c:	69 85       	ldd	r22, Y+9	; 0x09
     c8e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c90:	88 2d       	mov	r24, r8
     c92:	94 2d       	mov	r25, r4
     c94:	c1 2c       	mov	r12, r1
     c96:	d1 2c       	mov	r13, r1
     c98:	e1 2c       	mov	r14, r1
     c9a:	f1 2c       	mov	r15, r1
     c9c:	00 e0       	ldi	r16, 0x00	; 0
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__subdi3>
     ca4:	53 01       	movw	r10, r6
     ca6:	c1 2c       	mov	r12, r1
     ca8:	d1 2c       	mov	r13, r1
     caa:	e1 2c       	mov	r14, r1
     cac:	f1 2c       	mov	r15, r1
     cae:	87 01       	movw	r16, r14
     cb0:	6e 8a       	std	Y+22, r6	; 0x16
     cb2:	bf 8a       	std	Y+23, r11	; 0x17
     cb4:	c8 8e       	std	Y+24, r12	; 0x18
     cb6:	d9 8e       	std	Y+25, r13	; 0x19
     cb8:	ea 8e       	std	Y+26, r14	; 0x1a
     cba:	fb 8e       	std	Y+27, r15	; 0x1b
     cbc:	0c 8f       	std	Y+28, r16	; 0x1c
     cbe:	1d 8f       	std	Y+29, r17	; 0x1d
     cc0:	c1 2c       	mov	r12, r1
     cc2:	d1 2c       	mov	r13, r1
     cc4:	e1 2c       	mov	r14, r1
     cc6:	f1 2c       	mov	r15, r1
     cc8:	00 e0       	ldi	r16, 0x00	; 0
     cca:	10 e0       	ldi	r17, 0x00	; 0
     ccc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
     cd0:	7c f5       	brge	.+94     	; 0xd30 <__stack+0x4d1>
>>>>>>> Stashed changes
				leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000;
     cd2:	c3 01       	movw	r24, r6
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
     cdc:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
     ce0:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
     ce4:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
				if((leftMotorSpeed + (rp6Data.turnRate * 2)) > 25600){
     ce8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     cea:	3f 8d       	ldd	r19, Y+31	; 0x1f
     cec:	22 0f       	add	r18, r18
     cee:	33 1f       	adc	r19, r19
     cf0:	82 0f       	add	r24, r18
     cf2:	93 1f       	adc	r25, r19
     cf4:	a1 1d       	adc	r26, r1
     cf6:	b1 1d       	adc	r27, r1
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	04 e6       	ldi	r16, 0x64	; 100
     cfc:	90 07       	cpc	r25, r16
     cfe:	a1 05       	cpc	r26, r1
     d00:	b1 05       	cpc	r27, r1
     d02:	68 f0       	brcs	.+26     	; 0xd1e <__stack+0x4bf>
					rightMotorSpeed = 25600;
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	94 e6       	ldi	r25, 0x64	; 100
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     d10:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     d14:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     d18:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
     d1c:	99 c1       	rjmp	.+818    	; 0x1050 <__stack+0x7f1>
				}else{
					rightMotorSpeed = (leftMotorSpeed + (rp6Data.turnRate * 2));
     d1e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     d22:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     d26:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     d2a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
     d2e:	90 c1       	rjmp	.+800    	; 0x1050 <__stack+0x7f1>
				}
			}else if((currentDriveSpeed + rp6Data.turnRate) > 25600){
<<<<<<< Updated upstream
     d14:	29 2d       	mov	r18, r9
     d16:	3b 2f       	mov	r19, r27
     d18:	4f 2f       	mov	r20, r31
     d1a:	5e 2f       	mov	r21, r30
     d1c:	69 85       	ldd	r22, Y+9	; 0x09
     d1e:	7a 85       	ldd	r23, Y+10	; 0x0a
     d20:	88 2d       	mov	r24, r8
     d22:	94 2d       	mov	r25, r4
     d24:	ae 84       	ldd	r10, Y+14	; 0x0e
     d26:	bf 84       	ldd	r11, Y+15	; 0x0f
     d28:	c1 2c       	mov	r12, r1
     d2a:	d1 2c       	mov	r13, r1
     d2c:	e1 2c       	mov	r14, r1
     d2e:	f1 2c       	mov	r15, r1
     d30:	00 e0       	ldi	r16, 0x00	; 0
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__adddi3>
     d38:	21 15       	cp	r18, r1
     d3a:	34 46       	sbci	r19, 0x64	; 100
     d3c:	41 05       	cpc	r20, r1
     d3e:	51 05       	cpc	r21, r1
     d40:	61 05       	cpc	r22, r1
     d42:	71 05       	cpc	r23, r1
     d44:	81 05       	cpc	r24, r1
     d46:	91 05       	cpc	r25, r1
     d48:	89 f1       	breq	.+98     	; 0xdac <__stack+0x54d>
     d4a:	84 f1       	brlt	.+96     	; 0xdac <__stack+0x54d>
=======
     d30:	29 2d       	mov	r18, r9
     d32:	3b 2f       	mov	r19, r27
     d34:	4f 2f       	mov	r20, r31
     d36:	5e 2f       	mov	r21, r30
     d38:	69 85       	ldd	r22, Y+9	; 0x09
     d3a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d3c:	88 2d       	mov	r24, r8
     d3e:	94 2d       	mov	r25, r4
     d40:	ae 84       	ldd	r10, Y+14	; 0x0e
     d42:	bf 84       	ldd	r11, Y+15	; 0x0f
     d44:	c1 2c       	mov	r12, r1
     d46:	d1 2c       	mov	r13, r1
     d48:	e1 2c       	mov	r14, r1
     d4a:	f1 2c       	mov	r15, r1
     d4c:	00 e0       	ldi	r16, 0x00	; 0
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	0e 94 93 0b 	call	0x1726	; 0x1726 <__adddi3>
     d54:	21 15       	cp	r18, r1
     d56:	34 46       	sbci	r19, 0x64	; 100
     d58:	41 05       	cpc	r20, r1
     d5a:	51 05       	cpc	r21, r1
     d5c:	61 05       	cpc	r22, r1
     d5e:	71 05       	cpc	r23, r1
     d60:	81 05       	cpc	r24, r1
     d62:	91 05       	cpc	r25, r1
     d64:	89 f1       	breq	.+98     	; 0xdc8 <__stack+0x569>
     d66:	84 f1       	brlt	.+96     	; 0xdc8 <__stack+0x569>
>>>>>>> Stashed changes
				rightMotorSpeed = 25600;
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	94 e6       	ldi	r25, 0x64	; 100
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     d74:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     d78:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     d7c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
				if((rightMotorSpeed - (rp6Data.turnRate * 2)) < (rp6Data.driveSpeedThreshold + 2000)){
     d80:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d82:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d84:	22 0f       	add	r18, r18
     d86:	33 1f       	adc	r19, r19
     d88:	ac 01       	movw	r20, r24
     d8a:	bd 01       	movw	r22, r26
     d8c:	42 1b       	sub	r20, r18
     d8e:	53 0b       	sbc	r21, r19
     d90:	61 09       	sbc	r22, r1
     d92:	71 09       	sbc	r23, r1
     d94:	c3 01       	movw	r24, r6
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	48 17       	cp	r20, r24
     d9c:	59 07       	cpc	r21, r25
     d9e:	6a 07       	cpc	r22, r26
     da0:	7b 07       	cpc	r23, r27
     da2:	48 f4       	brcc	.+18     	; 0xdb6 <__stack+0x557>
					leftMotorSpeed = (rp6Data.driveSpeedThreshold + 2000);
     da4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
     da8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
     dac:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
     db0:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
     db4:	4d c1       	rjmp	.+666    	; 0x1050 <__stack+0x7f1>
				}else{
					leftMotorSpeed = (rightMotorSpeed - (rp6Data.turnRate * 2));
     db6:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <leftMotorSpeed.2022>
     dba:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <leftMotorSpeed.2022+0x1>
     dbe:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <leftMotorSpeed.2022+0x2>
     dc2:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <leftMotorSpeed.2022+0x3>
     dc6:	44 c1       	rjmp	.+648    	; 0x1050 <__stack+0x7f1>
				}
			}else{
				leftMotorSpeed = (currentDriveSpeed - rp6Data.turnRate);
     dc8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     dca:	3f 8d       	ldd	r19, Y+31	; 0x1f
     dcc:	c9 01       	movw	r24, r18
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	49 81       	ldd	r20, Y+1	; 0x01
     dd4:	5a 81       	ldd	r21, Y+2	; 0x02
     dd6:	6b 81       	ldd	r22, Y+3	; 0x03
     dd8:	7c 81       	ldd	r23, Y+4	; 0x04
     dda:	48 1b       	sub	r20, r24
     ddc:	59 0b       	sbc	r21, r25
     dde:	6a 0b       	sbc	r22, r26
     de0:	7b 0b       	sbc	r23, r27
     de2:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <leftMotorSpeed.2022>
     de6:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <leftMotorSpeed.2022+0x1>
     dea:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <leftMotorSpeed.2022+0x2>
     dee:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <leftMotorSpeed.2022+0x3>
				rightMotorSpeed = (currentDriveSpeed + rp6Data.turnRate);
     df2:	49 81       	ldd	r20, Y+1	; 0x01
     df4:	5a 81       	ldd	r21, Y+2	; 0x02
     df6:	6b 81       	ldd	r22, Y+3	; 0x03
     df8:	7c 81       	ldd	r23, Y+4	; 0x04
     dfa:	84 0f       	add	r24, r20
     dfc:	95 1f       	adc	r25, r21
     dfe:	a6 1f       	adc	r26, r22
     e00:	b7 1f       	adc	r27, r23
     e02:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     e06:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     e0a:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     e0e:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
     e12:	1e c1       	rjmp	.+572    	; 0x1050 <__stack+0x7f1>
			}
		}
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	09 f0       	breq	.+2      	; 0xe1a <__stack+0x5bb>
     e18:	0f c1       	rjmp	.+542    	; 0x1038 <__stack+0x7d9>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
<<<<<<< Updated upstream
     dfe:	29 2d       	mov	r18, r9
     e00:	3b 2f       	mov	r19, r27
     e02:	4f 2f       	mov	r20, r31
     e04:	5e 2f       	mov	r21, r30
     e06:	69 85       	ldd	r22, Y+9	; 0x09
     e08:	7a 85       	ldd	r23, Y+10	; 0x0a
     e0a:	88 2d       	mov	r24, r8
     e0c:	94 2d       	mov	r25, r4
     e0e:	a0 e0       	ldi	r26, 0x00	; 0
     e10:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__cmpdi2_s8>
     e14:	31 f5       	brne	.+76     	; 0xe62 <__stack+0x603>
=======
     e1a:	29 2d       	mov	r18, r9
     e1c:	3b 2f       	mov	r19, r27
     e1e:	4f 2f       	mov	r20, r31
     e20:	5e 2f       	mov	r21, r30
     e22:	69 85       	ldd	r22, Y+9	; 0x09
     e24:	7a 85       	ldd	r23, Y+10	; 0x0a
     e26:	88 2d       	mov	r24, r8
     e28:	94 2d       	mov	r25, r4
     e2a:	a0 e0       	ldi	r26, 0x00	; 0
     e2c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__cmpdi2_s8>
     e30:	31 f5       	brne	.+76     	; 0xe7e <__stack+0x61f>
>>>>>>> Stashed changes
			leftMotorDirection = 1;											//Left motor forward
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2020+0x1>
     e3a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2020>
			rightMotorDirection = 0;										//Right motor backward
     e3e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     e42:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//set motor speed to minimal + twice the turn rate
     e46:	91 01       	movw	r18, r2
     e48:	20 53       	subi	r18, 0x30	; 48
     e4a:	38 4f       	sbci	r19, 0xF8	; 248
     e4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e50:	96 95       	lsr	r25
     e52:	87 95       	ror	r24
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
     e60:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
     e64:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
     e68:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//---^
     e6c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     e70:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     e74:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     e78:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
     e7c:	fd c0       	rjmp	.+506    	; 0x1078 <__stack+0x819>
		}else{														//If we are driving (Forward or backwards does not matter)
			
			if((currentDriveSpeed - rp6Data.turnRate) < (rp6Data.driveSpeedThreshold + 2000)){
<<<<<<< Updated upstream
     e62:	ce 8c       	ldd	r12, Y+30	; 0x1e
     e64:	df 8c       	ldd	r13, Y+31	; 0x1f
     e66:	56 01       	movw	r10, r12
     e68:	c1 2c       	mov	r12, r1
     e6a:	d1 2c       	mov	r13, r1
     e6c:	e1 2c       	mov	r14, r1
     e6e:	f1 2c       	mov	r15, r1
     e70:	87 01       	movw	r16, r14
     e72:	ae 86       	std	Y+14, r10	; 0x0e
     e74:	bf 86       	std	Y+15, r11	; 0x0f
     e76:	c8 8a       	std	Y+16, r12	; 0x10
     e78:	d9 8a       	std	Y+17, r13	; 0x11
     e7a:	ea 8a       	std	Y+18, r14	; 0x12
     e7c:	fb 8a       	std	Y+19, r15	; 0x13
     e7e:	0c 8b       	std	Y+20, r16	; 0x14
     e80:	1d 8b       	std	Y+21, r17	; 0x15
     e82:	31 01       	movw	r6, r2
     e84:	00 e3       	ldi	r16, 0x30	; 48
     e86:	60 1a       	sub	r6, r16
     e88:	08 ef       	ldi	r16, 0xF8	; 248
     e8a:	70 0a       	sbc	r7, r16
     e8c:	29 2d       	mov	r18, r9
     e8e:	3b 2f       	mov	r19, r27
     e90:	4f 2f       	mov	r20, r31
     e92:	5e 2f       	mov	r21, r30
     e94:	69 85       	ldd	r22, Y+9	; 0x09
     e96:	7a 85       	ldd	r23, Y+10	; 0x0a
     e98:	88 2d       	mov	r24, r8
     e9a:	94 2d       	mov	r25, r4
     e9c:	c1 2c       	mov	r12, r1
     e9e:	d1 2c       	mov	r13, r1
     ea0:	e1 2c       	mov	r14, r1
     ea2:	f1 2c       	mov	r15, r1
     ea4:	00 e0       	ldi	r16, 0x00	; 0
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	0e 94 91 0b 	call	0x1722	; 0x1722 <__subdi3>
     eac:	53 01       	movw	r10, r6
     eae:	c1 2c       	mov	r12, r1
     eb0:	d1 2c       	mov	r13, r1
     eb2:	e1 2c       	mov	r14, r1
     eb4:	f1 2c       	mov	r15, r1
     eb6:	87 01       	movw	r16, r14
     eb8:	6e 8a       	std	Y+22, r6	; 0x16
     eba:	bf 8a       	std	Y+23, r11	; 0x17
     ebc:	c8 8e       	std	Y+24, r12	; 0x18
     ebe:	d9 8e       	std	Y+25, r13	; 0x19
     ec0:	ea 8e       	std	Y+26, r14	; 0x1a
     ec2:	fb 8e       	std	Y+27, r15	; 0x1b
     ec4:	0c 8f       	std	Y+28, r16	; 0x1c
     ec6:	1d 8f       	std	Y+29, r17	; 0x1d
     ec8:	c1 2c       	mov	r12, r1
     eca:	d1 2c       	mov	r13, r1
     ecc:	e1 2c       	mov	r14, r1
     ece:	f1 2c       	mov	r15, r1
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	10 e0       	ldi	r17, 0x00	; 0
     ed4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
     ed8:	7c f5       	brge	.+94     	; 0xf38 <__stack+0x6d9>
=======
     e7e:	ce 8c       	ldd	r12, Y+30	; 0x1e
     e80:	df 8c       	ldd	r13, Y+31	; 0x1f
     e82:	56 01       	movw	r10, r12
     e84:	c1 2c       	mov	r12, r1
     e86:	d1 2c       	mov	r13, r1
     e88:	e1 2c       	mov	r14, r1
     e8a:	f1 2c       	mov	r15, r1
     e8c:	87 01       	movw	r16, r14
     e8e:	ae 86       	std	Y+14, r10	; 0x0e
     e90:	bf 86       	std	Y+15, r11	; 0x0f
     e92:	c8 8a       	std	Y+16, r12	; 0x10
     e94:	d9 8a       	std	Y+17, r13	; 0x11
     e96:	ea 8a       	std	Y+18, r14	; 0x12
     e98:	fb 8a       	std	Y+19, r15	; 0x13
     e9a:	0c 8b       	std	Y+20, r16	; 0x14
     e9c:	1d 8b       	std	Y+21, r17	; 0x15
     e9e:	31 01       	movw	r6, r2
     ea0:	00 e3       	ldi	r16, 0x30	; 48
     ea2:	60 1a       	sub	r6, r16
     ea4:	08 ef       	ldi	r16, 0xF8	; 248
     ea6:	70 0a       	sbc	r7, r16
     ea8:	29 2d       	mov	r18, r9
     eaa:	3b 2f       	mov	r19, r27
     eac:	4f 2f       	mov	r20, r31
     eae:	5e 2f       	mov	r21, r30
     eb0:	69 85       	ldd	r22, Y+9	; 0x09
     eb2:	7a 85       	ldd	r23, Y+10	; 0x0a
     eb4:	88 2d       	mov	r24, r8
     eb6:	94 2d       	mov	r25, r4
     eb8:	c1 2c       	mov	r12, r1
     eba:	d1 2c       	mov	r13, r1
     ebc:	e1 2c       	mov	r14, r1
     ebe:	f1 2c       	mov	r15, r1
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__subdi3>
     ec8:	53 01       	movw	r10, r6
     eca:	c1 2c       	mov	r12, r1
     ecc:	d1 2c       	mov	r13, r1
     ece:	e1 2c       	mov	r14, r1
     ed0:	f1 2c       	mov	r15, r1
     ed2:	87 01       	movw	r16, r14
     ed4:	6e 8a       	std	Y+22, r6	; 0x16
     ed6:	bf 8a       	std	Y+23, r11	; 0x17
     ed8:	c8 8e       	std	Y+24, r12	; 0x18
     eda:	d9 8e       	std	Y+25, r13	; 0x19
     edc:	ea 8e       	std	Y+26, r14	; 0x1a
     ede:	fb 8e       	std	Y+27, r15	; 0x1b
     ee0:	0c 8f       	std	Y+28, r16	; 0x1c
     ee2:	1d 8f       	std	Y+29, r17	; 0x1d
     ee4:	c1 2c       	mov	r12, r1
     ee6:	d1 2c       	mov	r13, r1
     ee8:	e1 2c       	mov	r14, r1
     eea:	f1 2c       	mov	r15, r1
     eec:	00 e0       	ldi	r16, 0x00	; 0
     eee:	10 e0       	ldi	r17, 0x00	; 0
     ef0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
     ef4:	7c f5       	brge	.+94     	; 0xf54 <__stack+0x6f5>
>>>>>>> Stashed changes
				rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000;
     ef6:	c3 01       	movw	r24, r6
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     f00:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     f04:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     f08:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
				if((rightMotorSpeed + (rp6Data.turnRate * 2)) > 25600){
     f0c:	2e 8d       	ldd	r18, Y+30	; 0x1e
     f0e:	3f 8d       	ldd	r19, Y+31	; 0x1f
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	a1 1d       	adc	r26, r1
     f1a:	b1 1d       	adc	r27, r1
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	04 e6       	ldi	r16, 0x64	; 100
     f20:	90 07       	cpc	r25, r16
     f22:	a1 05       	cpc	r26, r1
     f24:	b1 05       	cpc	r27, r1
     f26:	68 f0       	brcs	.+26     	; 0xf42 <__stack+0x6e3>
					leftMotorSpeed = 25600;
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	94 e6       	ldi	r25, 0x64	; 100
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
     f34:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
     f38:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
     f3c:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
     f40:	87 c0       	rjmp	.+270    	; 0x1050 <__stack+0x7f1>
				}else{
					leftMotorSpeed = (rightMotorSpeed + (rp6Data.turnRate * 2));
     f42:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
     f46:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
     f4a:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
     f4e:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
     f52:	7e c0       	rjmp	.+252    	; 0x1050 <__stack+0x7f1>
				}
			}else if((currentDriveSpeed + rp6Data.turnRate) > 25600){
<<<<<<< Updated upstream
     f38:	29 2d       	mov	r18, r9
     f3a:	3b 2f       	mov	r19, r27
     f3c:	4f 2f       	mov	r20, r31
     f3e:	5e 2f       	mov	r21, r30
     f40:	69 85       	ldd	r22, Y+9	; 0x09
     f42:	7a 85       	ldd	r23, Y+10	; 0x0a
     f44:	88 2d       	mov	r24, r8
     f46:	94 2d       	mov	r25, r4
     f48:	ae 84       	ldd	r10, Y+14	; 0x0e
     f4a:	bf 84       	ldd	r11, Y+15	; 0x0f
     f4c:	c1 2c       	mov	r12, r1
     f4e:	d1 2c       	mov	r13, r1
     f50:	e1 2c       	mov	r14, r1
     f52:	f1 2c       	mov	r15, r1
     f54:	00 e0       	ldi	r16, 0x00	; 0
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__adddi3>
     f5c:	21 15       	cp	r18, r1
     f5e:	34 46       	sbci	r19, 0x64	; 100
     f60:	41 05       	cpc	r20, r1
     f62:	51 05       	cpc	r21, r1
     f64:	61 05       	cpc	r22, r1
     f66:	71 05       	cpc	r23, r1
     f68:	81 05       	cpc	r24, r1
     f6a:	91 05       	cpc	r25, r1
     f6c:	89 f1       	breq	.+98     	; 0xfd0 <__stack+0x771>
     f6e:	84 f1       	brlt	.+96     	; 0xfd0 <__stack+0x771>
=======
     f54:	29 2d       	mov	r18, r9
     f56:	3b 2f       	mov	r19, r27
     f58:	4f 2f       	mov	r20, r31
     f5a:	5e 2f       	mov	r21, r30
     f5c:	69 85       	ldd	r22, Y+9	; 0x09
     f5e:	7a 85       	ldd	r23, Y+10	; 0x0a
     f60:	88 2d       	mov	r24, r8
     f62:	94 2d       	mov	r25, r4
     f64:	ae 84       	ldd	r10, Y+14	; 0x0e
     f66:	bf 84       	ldd	r11, Y+15	; 0x0f
     f68:	c1 2c       	mov	r12, r1
     f6a:	d1 2c       	mov	r13, r1
     f6c:	e1 2c       	mov	r14, r1
     f6e:	f1 2c       	mov	r15, r1
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	0e 94 93 0b 	call	0x1726	; 0x1726 <__adddi3>
     f78:	21 15       	cp	r18, r1
     f7a:	34 46       	sbci	r19, 0x64	; 100
     f7c:	41 05       	cpc	r20, r1
     f7e:	51 05       	cpc	r21, r1
     f80:	61 05       	cpc	r22, r1
     f82:	71 05       	cpc	r23, r1
     f84:	81 05       	cpc	r24, r1
     f86:	91 05       	cpc	r25, r1
     f88:	89 f1       	breq	.+98     	; 0xfec <__stack+0x78d>
     f8a:	84 f1       	brlt	.+96     	; 0xfec <__stack+0x78d>
>>>>>>> Stashed changes
				leftMotorSpeed = 25600;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	94 e6       	ldi	r25, 0x64	; 100
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
     f98:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
     f9c:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
     fa0:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
				if((leftMotorSpeed - (rp6Data.turnRate * 2)) < (rp6Data.driveSpeedThreshold + 2000)){
     fa4:	2e 8d       	ldd	r18, Y+30	; 0x1e
     fa6:	3f 8d       	ldd	r19, Y+31	; 0x1f
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	ac 01       	movw	r20, r24
     fae:	bd 01       	movw	r22, r26
     fb0:	42 1b       	sub	r20, r18
     fb2:	53 0b       	sbc	r21, r19
     fb4:	61 09       	sbc	r22, r1
     fb6:	71 09       	sbc	r23, r1
     fb8:	c3 01       	movw	r24, r6
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	48 17       	cp	r20, r24
     fc0:	59 07       	cpc	r21, r25
     fc2:	6a 07       	cpc	r22, r26
     fc4:	7b 07       	cpc	r23, r27
     fc6:	48 f4       	brcc	.+18     	; 0xfda <__stack+0x77b>
					rightMotorSpeed = (rp6Data.driveSpeedThreshold + 2000);
     fc8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
     fcc:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
     fd0:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
     fd4:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
     fd8:	3b c0       	rjmp	.+118    	; 0x1050 <__stack+0x7f1>
				}else{
					rightMotorSpeed = (leftMotorSpeed - (rp6Data.turnRate * 2));
     fda:	40 93 6c 00 	sts	0x006C, r20	; 0x80006c <rightMotorSpeed.2023>
     fde:	50 93 6d 00 	sts	0x006D, r21	; 0x80006d <rightMotorSpeed.2023+0x1>
     fe2:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <rightMotorSpeed.2023+0x2>
     fe6:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <rightMotorSpeed.2023+0x3>
     fea:	32 c0       	rjmp	.+100    	; 0x1050 <__stack+0x7f1>
				}
			}else{
				rightMotorSpeed = (currentDriveSpeed - rp6Data.turnRate);
     fec:	2e 8d       	ldd	r18, Y+30	; 0x1e
     fee:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ff0:	c9 01       	movw	r24, r18
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	49 81       	ldd	r20, Y+1	; 0x01
     ff8:	5a 81       	ldd	r21, Y+2	; 0x02
     ffa:	6b 81       	ldd	r22, Y+3	; 0x03
     ffc:	7c 81       	ldd	r23, Y+4	; 0x04
     ffe:	48 1b       	sub	r20, r24
    1000:	59 0b       	sbc	r21, r25
    1002:	6a 0b       	sbc	r22, r26
    1004:	7b 0b       	sbc	r23, r27
    1006:	40 93 6c 00 	sts	0x006C, r20	; 0x80006c <rightMotorSpeed.2023>
    100a:	50 93 6d 00 	sts	0x006D, r21	; 0x80006d <rightMotorSpeed.2023+0x1>
    100e:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <rightMotorSpeed.2023+0x2>
    1012:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <rightMotorSpeed.2023+0x3>
				leftMotorSpeed = (currentDriveSpeed + rp6Data.turnRate);
    1016:	49 81       	ldd	r20, Y+1	; 0x01
    1018:	5a 81       	ldd	r21, Y+2	; 0x02
    101a:	6b 81       	ldd	r22, Y+3	; 0x03
    101c:	7c 81       	ldd	r23, Y+4	; 0x04
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	a6 1f       	adc	r26, r22
    1024:	b7 1f       	adc	r27, r23
    1026:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
    102a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
    102e:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
    1032:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
    1036:	0c c0       	rjmp	.+24     	; 0x1050 <__stack+0x7f1>
			}
		}
	}
	
	//Slower left wheel correction
	if(currentDriveSpeed != 0){
<<<<<<< Updated upstream
    101c:	29 2d       	mov	r18, r9
    101e:	3b 2f       	mov	r19, r27
    1020:	4f 2f       	mov	r20, r31
    1022:	5e 2f       	mov	r21, r30
    1024:	69 85       	ldd	r22, Y+9	; 0x09
    1026:	7a 85       	ldd	r23, Y+10	; 0x0a
    1028:	88 2d       	mov	r24, r8
    102a:	94 2d       	mov	r25, r4
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__cmpdi2_s8>
    1032:	a1 f0       	breq	.+40     	; 0x105c <__stack+0x7fd>
=======
    1038:	29 2d       	mov	r18, r9
    103a:	3b 2f       	mov	r19, r27
    103c:	4f 2f       	mov	r20, r31
    103e:	5e 2f       	mov	r21, r30
    1040:	69 85       	ldd	r22, Y+9	; 0x09
    1042:	7a 85       	ldd	r23, Y+10	; 0x0a
    1044:	88 2d       	mov	r24, r8
    1046:	94 2d       	mov	r25, r4
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__cmpdi2_s8>
    104e:	a1 f0       	breq	.+40     	; 0x1078 <__stack+0x819>
>>>>>>> Stashed changes
		leftMotorSpeed += 750;
    1050:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2022>
    1054:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2022+0x1>
    1058:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <leftMotorSpeed.2022+0x2>
    105c:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <leftMotorSpeed.2022+0x3>
    1060:	82 51       	subi	r24, 0x12	; 18
    1062:	9d 4f       	sbci	r25, 0xFD	; 253
    1064:	af 4f       	sbci	r26, 0xFF	; 255
    1066:	bf 4f       	sbci	r27, 0xFF	; 255
    1068:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
    106c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
    1070:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
    1074:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
	}
	
	//Final safety check
	if(leftMotorSpeed > 27000){						//Check if we did not accidentally set a speed higher than allowed on the left motor
    1078:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2022>
    107c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2022+0x1>
    1080:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <leftMotorSpeed.2022+0x2>
    1084:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <leftMotorSpeed.2022+0x3>
    1088:	89 37       	cpi	r24, 0x79	; 121
    108a:	99 46       	sbci	r25, 0x69	; 105
    108c:	a1 05       	cpc	r26, r1
    108e:	b1 05       	cpc	r27, r1
    1090:	60 f0       	brcs	.+24     	; 0x10aa <__stack+0x84b>
		leftMotorSpeed = 27000;							//If we did, set it back to its max
    1092:	88 e7       	ldi	r24, 0x78	; 120
    1094:	99 e6       	ldi	r25, 0x69	; 105
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2022>
    109e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2022+0x1>
    10a2:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2022+0x2>
    10a6:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2022+0x3>
	}
	if(rightMotorSpeed > 25600){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
    10aa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rightMotorSpeed.2023>
    10ae:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rightMotorSpeed.2023+0x1>
    10b2:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <rightMotorSpeed.2023+0x2>
    10b6:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <rightMotorSpeed.2023+0x3>
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	94 46       	sbci	r25, 0x64	; 100
    10be:	a1 05       	cpc	r26, r1
    10c0:	b1 05       	cpc	r27, r1
    10c2:	60 f0       	brcs	.+24     	; 0x10dc <__stack+0x87d>
		rightMotorSpeed = 25600;						//Set it back to its max
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	94 e6       	ldi	r25, 0x64	; 100
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2023>
    10d0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2023+0x1>
    10d4:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2023+0x2>
    10d8:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2023+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
    10dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2020>
    10e0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2020+0x1>
    10e4:	89 2b       	or	r24, r25
    10e6:	11 f0       	breq	.+4      	; 0x10ec <__stack+0x88d>
		PORTC &= 0b11111011;
    10e8:	aa 98       	cbi	0x15, 2	; 21
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <__stack+0x88f>
	}else{
		PORTC |= 0b00000100;
    10ec:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
    10ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    10f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    10f6:	89 2b       	or	r24, r25
    10f8:	11 f0       	breq	.+4      	; 0x10fe <__stack+0x89f>
		PORTC &= 0b11110111;
    10fa:	ab 98       	cbi	0x15, 3	; 21
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <__stack+0x8a1>
	}else{
		PORTC |= 0b00001000;
    10fe:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	arduinoData.actualDriveSpeed = currentDriveSpeed;
    1100:	e6 e8       	ldi	r30, 0x86	; 134
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <currentDriveSpeed.2019>
    1108:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <currentDriveSpeed.2019+0x1>
    110c:	93 83       	std	Z+3, r25	; 0x03
    110e:	82 83       	std	Z+2, r24	; 0x02
	arduinoData.actualLeftMotorSpeed = leftMotorSpeed;
    1110:	a0 e7       	ldi	r26, 0x70	; 112
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	8d 91       	ld	r24, X+
    1116:	9c 91       	ld	r25, X
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	95 83       	std	Z+5, r25	; 0x05
    111c:	84 83       	std	Z+4, r24	; 0x04
	arduinoData.actualRightMotorSpeed = rightMotorSpeed;
    111e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rightMotorSpeed.2023>
    1122:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rightMotorSpeed.2023+0x1>
    1126:	97 83       	std	Z+7, r25	; 0x07
    1128:	86 83       	std	Z+6, r24	; 0x06
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
    112a:	9b bd       	out	0x2b, r25	; 43
    112c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
    112e:	8d 91       	ld	r24, X+
    1130:	9c 91       	ld	r25, X
    1132:	99 bd       	out	0x29, r25	; 41
    1134:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	e3 96       	adiw	r28, 0x33	; 51
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	7f 90       	pop	r7
    1160:	6f 90       	pop	r6
    1162:	5f 90       	pop	r5
    1164:	4f 90       	pop	r4
    1166:	3f 90       	pop	r3
    1168:	2f 90       	pop	r2
    116a:	08 95       	ret

0000116c <bumperCheck>:
//------------------------------------------------------

uint8_t bumperCheck() {
    116c:	2f 92       	push	r2
    116e:	3f 92       	push	r3
    1170:	4f 92       	push	r4
    1172:	5f 92       	push	r5
    1174:	6f 92       	push	r6
    1176:	7f 92       	push	r7
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	28 97       	sbiw	r28, 0x08	; 8
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
	
	static uint32_t bumperTimer = 0; //Used to determine how long the RP6 drives backwards
	//static uint8_t enable = 0; //if 1, RP6 drives backwards
	
<<<<<<< Updated upstream
	if (getBumpers() && !arduinoData.bumperFlag) { //If one or both bumpers are pushed
    1166:	0e 94 5b 00 	call	0xb6	; 0xb6 <getBumpers>
    116a:	89 2b       	or	r24, r25
    116c:	b1 f0       	breq	.+44     	; 0x119a <bumperCheck+0x68>
    116e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    1172:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <arduinoData+0x1>
    1176:	89 2b       	or	r24, r25
    1178:	b9 f4       	brne	.+46     	; 0x11a8 <bumperCheck+0x76>
		arduinoData.bumperFlag = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <arduinoData+0x1>
    1182:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <arduinoData>
		bumperTimer = micros();
    1186:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    118a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
    118e:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
    1192:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end+0x2>
    1196:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x3>
	}
		
	if (arduinoData.bumperFlag) {
    119a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    119e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <arduinoData+0x1>
    11a2:	89 2b       	or	r24, r25
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <bumperCheck+0x76>
    11a6:	5a c0       	rjmp	.+180    	; 0x125c <bumperCheck+0x12a>
		
		if (micros() < bumperTimer + BUMPED_STOP_TIME) {
    11a8:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    11ac:	f2 2f       	mov	r31, r18
    11ae:	e3 2f       	mov	r30, r19
    11b0:	40 90 66 00 	lds	r4, 0x0066	; 0x800066 <__data_end>
    11b4:	50 90 67 00 	lds	r5, 0x0067	; 0x800067 <__data_end+0x1>
    11b8:	60 90 68 00 	lds	r6, 0x0068	; 0x800068 <__data_end+0x2>
    11bc:	70 90 69 00 	lds	r7, 0x0069	; 0x800069 <__data_end+0x3>
    11c0:	93 01       	movw	r18, r6
    11c2:	82 01       	movw	r16, r4
    11c4:	00 59       	subi	r16, 0x90	; 144
    11c6:	1e 4e       	sbci	r17, 0xEE	; 238
    11c8:	2e 4f       	sbci	r18, 0xFE	; 254
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	48 01       	movw	r8, r16
    11ce:	59 01       	movw	r10, r18
    11d0:	ab 82       	std	Y+3, r10	; 0x03
    11d2:	bc 82       	std	Y+4, r11	; 0x04
    11d4:	2f 2f       	mov	r18, r31
    11d6:	3e 2f       	mov	r19, r30
    11d8:	a8 2c       	mov	r10, r8
    11da:	b9 2c       	mov	r11, r9
    11dc:	cb 80       	ldd	r12, Y+3	; 0x03
    11de:	dc 80       	ldd	r13, Y+4	; 0x04
    11e0:	e1 2c       	mov	r14, r1
    11e2:	f1 2c       	mov	r15, r1
    11e4:	00 e0       	ldi	r16, 0x00	; 0
    11e6:	10 e0       	ldi	r17, 0x00	; 0
    11e8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
    11ec:	58 f4       	brcc	.+22     	; 0x1204 <bumperCheck+0xd2>
			bumpedData.driveSpeed = 0;
    11ee:	ef eb       	ldi	r30, 0xBF	; 191
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	10 82       	st	Z, r1
    11f4:	11 82       	std	Z+1, r1	; 0x01
    11f6:	12 82       	std	Z+2, r1	; 0x02
    11f8:	13 82       	std	Z+3, r1	; 0x03
			bumpedData.accelerationRate = 5000;
    11fa:	88 e8       	ldi	r24, 0x88	; 136
    11fc:	93 e1       	ldi	r25, 0x13	; 19
    11fe:	97 83       	std	Z+7, r25	; 0x07
    1200:	86 83       	std	Z+6, r24	; 0x06
    1202:	2c c0       	rjmp	.+88     	; 0x125c <bumperCheck+0x12a>
		} else if (micros() < bumperTimer + BUMPED_BACK_TIME) {
    1204:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    1208:	e0 e4       	ldi	r30, 0x40	; 64
    120a:	4e 0e       	add	r4, r30
    120c:	e2 e4       	ldi	r30, 0x42	; 66
    120e:	5e 1e       	adc	r5, r30
    1210:	ef e0       	ldi	r30, 0x0F	; 15
    1212:	6e 1e       	adc	r6, r30
    1214:	71 1c       	adc	r7, r1
    1216:	12 01       	movw	r2, r4
    1218:	23 01       	movw	r4, r6
    121a:	a2 2c       	mov	r10, r2
    121c:	b3 2c       	mov	r11, r3
    121e:	c4 2c       	mov	r12, r4
    1220:	d5 2c       	mov	r13, r5
    1222:	e1 2c       	mov	r14, r1
    1224:	f1 2c       	mov	r15, r1
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__cmpdi2>
    122e:	90 f4       	brcc	.+36     	; 0x1254 <bumperCheck+0x122>
			bumpedData.driveSpeed = 30;
    1230:	ef eb       	ldi	r30, 0xBF	; 191
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8e e1       	ldi	r24, 0x1E	; 30
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	80 83       	st	Z, r24
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	a2 83       	std	Z+2, r26	; 0x02
    1242:	b3 83       	std	Z+3, r27	; 0x03
			bumpedData.driveDirection = 0;
    1244:	14 82       	std	Z+4, r1	; 0x04
			bumpedData.accelerationRate = rp6Data.accelerationRate;
    1246:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <rp6Data+0x6>
    124a:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <rp6Data+0x7>
    124e:	97 83       	std	Z+7, r25	; 0x07
    1250:	86 83       	std	Z+6, r24	; 0x06
    1252:	04 c0       	rjmp	.+8      	; 0x125c <bumperCheck+0x12a>
		} else {
			arduinoData.bumperFlag = 0;
    1254:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <arduinoData+0x1>
    1258:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <arduinoData>
=======
	if (getBumpers()) { //If one or both bumpers are pushed
    11a0:	0e 94 5b 00 	call	0xb6	; 0xb6 <getBumpers>
    11a4:	89 2b       	or	r24, r25
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <bumperCheck+0x5c>
		arduinoData.bumperFlag = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <arduinoData+0x1>
    11b0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <arduinoData>
		bumperTimer = micros();
    11b4:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    11b8:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
    11bc:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
    11c0:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end+0x2>
    11c4:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x3>
	}
		
	if (arduinoData.bumperFlag) {
    11c8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    11cc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <arduinoData+0x1>
    11d0:	89 2b       	or	r24, r25
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <bumperCheck+0x6a>
    11d4:	5a c0       	rjmp	.+180    	; 0x128a <bumperCheck+0x11e>
		
		if (micros() < bumperTimer + BUMPED_STOP_TIME) {
    11d6:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    11da:	f2 2f       	mov	r31, r18
    11dc:	e3 2f       	mov	r30, r19
    11de:	40 90 66 00 	lds	r4, 0x0066	; 0x800066 <__data_end>
    11e2:	50 90 67 00 	lds	r5, 0x0067	; 0x800067 <__data_end+0x1>
    11e6:	60 90 68 00 	lds	r6, 0x0068	; 0x800068 <__data_end+0x2>
    11ea:	70 90 69 00 	lds	r7, 0x0069	; 0x800069 <__data_end+0x3>
    11ee:	93 01       	movw	r18, r6
    11f0:	82 01       	movw	r16, r4
    11f2:	00 59       	subi	r16, 0x90	; 144
    11f4:	1e 4e       	sbci	r17, 0xEE	; 238
    11f6:	2e 4f       	sbci	r18, 0xFE	; 254
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	48 01       	movw	r8, r16
    11fc:	59 01       	movw	r10, r18
    11fe:	ab 82       	std	Y+3, r10	; 0x03
    1200:	bc 82       	std	Y+4, r11	; 0x04
    1202:	2f 2f       	mov	r18, r31
    1204:	3e 2f       	mov	r19, r30
    1206:	a8 2c       	mov	r10, r8
    1208:	b9 2c       	mov	r11, r9
    120a:	cb 80       	ldd	r12, Y+3	; 0x03
    120c:	dc 80       	ldd	r13, Y+4	; 0x04
    120e:	e1 2c       	mov	r14, r1
    1210:	f1 2c       	mov	r15, r1
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
    121a:	58 f4       	brcc	.+22     	; 0x1232 <bumperCheck+0xc6>
			bumpedData.driveSpeed = 0;
    121c:	ef eb       	ldi	r30, 0xBF	; 191
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	10 82       	st	Z, r1
    1222:	11 82       	std	Z+1, r1	; 0x01
    1224:	12 82       	std	Z+2, r1	; 0x02
    1226:	13 82       	std	Z+3, r1	; 0x03
			bumpedData.accelerationRate = 5000;
    1228:	88 e8       	ldi	r24, 0x88	; 136
    122a:	93 e1       	ldi	r25, 0x13	; 19
    122c:	97 83       	std	Z+7, r25	; 0x07
    122e:	86 83       	std	Z+6, r24	; 0x06
    1230:	2c c0       	rjmp	.+88     	; 0x128a <bumperCheck+0x11e>
		} else if (micros() < bumperTimer + BUMPED_BACK_TIME) {
    1232:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    1236:	e0 ec       	ldi	r30, 0xC0	; 192
    1238:	4e 0e       	add	r4, r30
    123a:	e6 ec       	ldi	r30, 0xC6	; 198
    123c:	5e 1e       	adc	r5, r30
    123e:	ed e2       	ldi	r30, 0x2D	; 45
    1240:	6e 1e       	adc	r6, r30
    1242:	71 1c       	adc	r7, r1
    1244:	12 01       	movw	r2, r4
    1246:	23 01       	movw	r4, r6
    1248:	a2 2c       	mov	r10, r2
    124a:	b3 2c       	mov	r11, r3
    124c:	c4 2c       	mov	r12, r4
    124e:	d5 2c       	mov	r13, r5
    1250:	e1 2c       	mov	r14, r1
    1252:	f1 2c       	mov	r15, r1
    1254:	00 e0       	ldi	r16, 0x00	; 0
    1256:	10 e0       	ldi	r17, 0x00	; 0
    1258:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpdi2>
    125c:	90 f4       	brcc	.+36     	; 0x1282 <bumperCheck+0x116>
			bumpedData.driveSpeed = 30;
    125e:	ef eb       	ldi	r30, 0xBF	; 191
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8e e1       	ldi	r24, 0x1E	; 30
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 e0       	ldi	r26, 0x00	; 0
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	80 83       	st	Z, r24
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	a2 83       	std	Z+2, r26	; 0x02
    1270:	b3 83       	std	Z+3, r27	; 0x03
			bumpedData.driveDirection = 0;
    1272:	14 82       	std	Z+4, r1	; 0x04
			bumpedData.accelerationRate = rp6Data.accelerationRate;
    1274:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <rp6Data+0x6>
    1278:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <rp6Data+0x7>
    127c:	97 83       	std	Z+7, r25	; 0x07
    127e:	86 83       	std	Z+6, r24	; 0x06
    1280:	04 c0       	rjmp	.+8      	; 0x128a <bumperCheck+0x11e>
		} else {
			arduinoData.bumperFlag = 0;
    1282:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <arduinoData+0x1>
    1286:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <arduinoData>
>>>>>>> Stashed changes
		}
	}
	
	return arduinoData.bumperFlag;
<<<<<<< Updated upstream
    125c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    1260:	28 96       	adiw	r28, 0x08	; 8
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	bf 90       	pop	r11
    127e:	af 90       	pop	r10
    1280:	9f 90       	pop	r9
    1282:	8f 90       	pop	r8
    1284:	7f 90       	pop	r7
    1286:	6f 90       	pop	r6
    1288:	5f 90       	pop	r5
    128a:	4f 90       	pop	r4
    128c:	3f 90       	pop	r3
    128e:	2f 90       	pop	r2
    1290:	08 95       	ret

00001292 <main>:
=======
    128a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    128e:	28 96       	adiw	r28, 0x08	; 8
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	9f 90       	pop	r9
    12b0:	8f 90       	pop	r8
    12b2:	7f 90       	pop	r7
    12b4:	6f 90       	pop	r6
    12b6:	5f 90       	pop	r5
    12b8:	4f 90       	pop	r4
    12ba:	3f 90       	pop	r3
    12bc:	2f 90       	pop	r2
    12be:	08 95       	ret

000012c0 <main>:
>>>>>>> Stashed changes
	}
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
<<<<<<< Updated upstream
    1292:	78 94       	sei
=======
    12c0:	78 94       	sei
>>>>>>> Stashed changes

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
<<<<<<< Updated upstream
    1294:	0e 94 73 00 	call	0xe6	; 0xe6 <init_micros>
	
	init_motor();
    1298:	0e 94 9e 02 	call	0x53c	; 0x53c <init_motor>
	init_LED();
    129c:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_LED>
	
	init_rp6Data();
    12a0:	0e 94 1e 01 	call	0x23c	; 0x23c <init_rp6Data>
	init_bumpedData();
    12a4:	0e 94 3d 01 	call	0x27a	; 0x27a <init_bumpedData>
	init_arduinoData();
    12a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <init_arduinoData>
	
	init_TWI();
    12ac:	0e 94 10 01 	call	0x220	; 0x220 <init_TWI>
	
	clearSendData();
    12b0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clearSendData>
	clearReceiveData();
    12b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <clearReceiveData>
		
	while(1){
		if (bumperCheck()) {
    12b8:	0e 94 99 08 	call	0x1132	; 0x1132 <bumperCheck>
    12bc:	88 23       	and	r24, r24
    12be:	e9 f0       	breq	.+58     	; 0x12fa <main+0x68>
			motorDriver(bumpedData);
    12c0:	8d b7       	in	r24, 0x3d	; 61
    12c2:	9e b7       	in	r25, 0x3e	; 62
    12c4:	43 97       	sbiw	r24, 0x13	; 19
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	9e bf       	out	0x3e, r25	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	8d bf       	out	0x3d, r24	; 61
    12d0:	ad b7       	in	r26, 0x3d	; 61
    12d2:	be b7       	in	r27, 0x3e	; 62
    12d4:	11 96       	adiw	r26, 0x01	; 1
    12d6:	83 e1       	ldi	r24, 0x13	; 19
    12d8:	ef eb       	ldi	r30, 0xBF	; 191
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	01 90       	ld	r0, Z+
    12de:	0d 92       	st	X+, r0
    12e0:	8a 95       	dec	r24
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <main+0x4a>
    12e4:	0e 94 a3 02 	call	0x546	; 0x546 <motorDriver>
    12e8:	8d b7       	in	r24, 0x3d	; 61
    12ea:	9e b7       	in	r25, 0x3e	; 62
    12ec:	43 96       	adiw	r24, 0x13	; 19
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	9e bf       	out	0x3e, r25	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	8d bf       	out	0x3d, r24	; 61
    12f8:	df cf       	rjmp	.-66     	; 0x12b8 <main+0x26>
		} else {
			motorDriver(rp6Data);
    12fa:	8d b7       	in	r24, 0x3d	; 61
    12fc:	9e b7       	in	r25, 0x3e	; 62
    12fe:	43 97       	sbiw	r24, 0x13	; 19
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	9e bf       	out	0x3e, r25	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	8d bf       	out	0x3d, r24	; 61
    130a:	ad b7       	in	r26, 0x3d	; 61
    130c:	be b7       	in	r27, 0x3e	; 62
    130e:	11 96       	adiw	r26, 0x01	; 1
    1310:	83 e1       	ldi	r24, 0x13	; 19
    1312:	e4 ea       	ldi	r30, 0xA4	; 164
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	01 90       	ld	r0, Z+
    1318:	0d 92       	st	X+, r0
    131a:	8a 95       	dec	r24
    131c:	e1 f7       	brne	.-8      	; 0x1316 <main+0x84>
    131e:	0e 94 a3 02 	call	0x546	; 0x546 <motorDriver>
    1322:	8d b7       	in	r24, 0x3d	; 61
    1324:	9e b7       	in	r25, 0x3e	; 62
    1326:	43 96       	adiw	r24, 0x13	; 19
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	9e bf       	out	0x3e, r25	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	8d bf       	out	0x3d, r24	; 61
    1332:	c2 cf       	rjmp	.-124    	; 0x12b8 <main+0x26>

00001334 <__fixunssfsi>:
    1334:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_splitA>
    1338:	88 f0       	brcs	.+34     	; 0x135c <__fixunssfsi+0x28>
    133a:	9f 57       	subi	r25, 0x7F	; 127
    133c:	98 f0       	brcs	.+38     	; 0x1364 <__fixunssfsi+0x30>
    133e:	b9 2f       	mov	r27, r25
    1340:	99 27       	eor	r25, r25
    1342:	b7 51       	subi	r27, 0x17	; 23
    1344:	b0 f0       	brcs	.+44     	; 0x1372 <__fixunssfsi+0x3e>
    1346:	e1 f0       	breq	.+56     	; 0x1380 <__fixunssfsi+0x4c>
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	1a f0       	brmi	.+6      	; 0x1358 <__fixunssfsi+0x24>
    1352:	ba 95       	dec	r27
    1354:	c9 f7       	brne	.-14     	; 0x1348 <__fixunssfsi+0x14>
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <__fixunssfsi+0x4c>
    1358:	b1 30       	cpi	r27, 0x01	; 1
    135a:	91 f0       	breq	.+36     	; 0x1380 <__fixunssfsi+0x4c>
    135c:	0e 94 3f 0a 	call	0x147e	; 0x147e <__fp_zero>
    1360:	b1 e0       	ldi	r27, 0x01	; 1
    1362:	08 95       	ret
    1364:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__fp_zero>
    1368:	67 2f       	mov	r22, r23
    136a:	78 2f       	mov	r23, r24
    136c:	88 27       	eor	r24, r24
    136e:	b8 5f       	subi	r27, 0xF8	; 248
    1370:	39 f0       	breq	.+14     	; 0x1380 <__fixunssfsi+0x4c>
    1372:	b9 3f       	cpi	r27, 0xF9	; 249
    1374:	cc f3       	brlt	.-14     	; 0x1368 <__fixunssfsi+0x34>
    1376:	86 95       	lsr	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	b3 95       	inc	r27
    137e:	d9 f7       	brne	.-10     	; 0x1376 <__fixunssfsi+0x42>
    1380:	3e f4       	brtc	.+14     	; 0x1390 <__fixunssfsi+0x5c>
    1382:	90 95       	com	r25
    1384:	80 95       	com	r24
    1386:	70 95       	com	r23
    1388:	61 95       	neg	r22
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	08 95       	ret

00001392 <__floatdisf>:
    1392:	97 fb       	bst	r25, 7
    1394:	16 f4       	brtc	.+4      	; 0x139a <__floatdisf+0x8>
    1396:	0e 94 0d 0a 	call	0x141a	; 0x141a <__fp_negdi>
    139a:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_di2sf>

0000139e <__floatundisf>:
    139e:	e8 94       	clt

000013a0 <__fp_di2sf>:
    13a0:	f9 2f       	mov	r31, r25
    13a2:	96 eb       	ldi	r25, 0xB6	; 182
    13a4:	ff 23       	and	r31, r31
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <__fp_di2sf+0x28>
    13a8:	12 16       	cp	r1, r18
    13aa:	13 06       	cpc	r1, r19
    13ac:	14 06       	cpc	r1, r20
    13ae:	44 0b       	sbc	r20, r20
    13b0:	93 95       	inc	r25
    13b2:	f6 95       	lsr	r31
    13b4:	87 95       	ror	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	57 95       	ror	r21
    13bc:	40 40       	sbci	r20, 0x00	; 0
    13be:	ff 23       	and	r31, r31
    13c0:	b9 f7       	brne	.-18     	; 0x13b0 <__fp_di2sf+0x10>
    13c2:	1b c0       	rjmp	.+54     	; 0x13fa <__fp_di2sf+0x5a>
    13c4:	99 27       	eor	r25, r25
    13c6:	08 95       	ret
    13c8:	88 23       	and	r24, r24
    13ca:	51 f4       	brne	.+20     	; 0x13e0 <__fp_di2sf+0x40>
    13cc:	98 50       	subi	r25, 0x08	; 8
    13ce:	d2 f7       	brpl	.-12     	; 0x13c4 <__fp_di2sf+0x24>
    13d0:	87 2b       	or	r24, r23
    13d2:	76 2f       	mov	r23, r22
    13d4:	65 2f       	mov	r22, r21
    13d6:	54 2f       	mov	r21, r20
    13d8:	43 2f       	mov	r20, r19
    13da:	32 2f       	mov	r19, r18
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	b1 f3       	breq	.-20     	; 0x13cc <__fp_di2sf+0x2c>
    13e0:	12 16       	cp	r1, r18
    13e2:	13 06       	cpc	r1, r19
    13e4:	14 06       	cpc	r1, r20
    13e6:	44 0b       	sbc	r20, r20
    13e8:	88 23       	and	r24, r24
    13ea:	3a f0       	brmi	.+14     	; 0x13fa <__fp_di2sf+0x5a>
    13ec:	9a 95       	dec	r25
    13ee:	44 0f       	add	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	66 1f       	adc	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	ca f7       	brpl	.-14     	; 0x13ec <__fp_di2sf+0x4c>
    13fa:	55 23       	and	r21, r21
    13fc:	4a f4       	brpl	.+18     	; 0x1410 <__fp_di2sf+0x70>
    13fe:	44 0f       	add	r20, r20
    1400:	55 1f       	adc	r21, r21
    1402:	11 f4       	brne	.+4      	; 0x1408 <__fp_di2sf+0x68>
    1404:	60 ff       	sbrs	r22, 0
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <__fp_di2sf+0x70>
    1408:	6f 5f       	subi	r22, 0xFF	; 255
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	8f 4f       	sbci	r24, 0xFF	; 255
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	88 0f       	add	r24, r24
    1412:	96 95       	lsr	r25
    1414:	87 95       	ror	r24
    1416:	97 f9       	bld	r25, 7
    1418:	08 95       	ret

0000141a <__fp_negdi>:
    141a:	90 95       	com	r25
    141c:	80 95       	com	r24
    141e:	70 95       	com	r23
    1420:	60 95       	com	r22
    1422:	50 95       	com	r21
    1424:	40 95       	com	r20
    1426:	30 95       	com	r19
    1428:	21 95       	neg	r18
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	4f 4f       	sbci	r20, 0xFF	; 255
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	6f 4f       	sbci	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	08 95       	ret

0000143a <__fp_split3>:
    143a:	57 fd       	sbrc	r21, 7
    143c:	90 58       	subi	r25, 0x80	; 128
    143e:	44 0f       	add	r20, r20
    1440:	55 1f       	adc	r21, r21
    1442:	59 f0       	breq	.+22     	; 0x145a <__fp_splitA+0x10>
    1444:	5f 3f       	cpi	r21, 0xFF	; 255
    1446:	71 f0       	breq	.+28     	; 0x1464 <__fp_splitA+0x1a>
    1448:	47 95       	ror	r20

0000144a <__fp_splitA>:
    144a:	88 0f       	add	r24, r24
    144c:	97 fb       	bst	r25, 7
    144e:	99 1f       	adc	r25, r25
    1450:	61 f0       	breq	.+24     	; 0x146a <__fp_splitA+0x20>
    1452:	9f 3f       	cpi	r25, 0xFF	; 255
    1454:	79 f0       	breq	.+30     	; 0x1474 <__fp_splitA+0x2a>
    1456:	87 95       	ror	r24
    1458:	08 95       	ret
    145a:	12 16       	cp	r1, r18
    145c:	13 06       	cpc	r1, r19
    145e:	14 06       	cpc	r1, r20
    1460:	55 1f       	adc	r21, r21
    1462:	f2 cf       	rjmp	.-28     	; 0x1448 <__fp_split3+0xe>
    1464:	46 95       	lsr	r20
    1466:	f1 df       	rcall	.-30     	; 0x144a <__fp_splitA>
    1468:	08 c0       	rjmp	.+16     	; 0x147a <__fp_splitA+0x30>
    146a:	16 16       	cp	r1, r22
    146c:	17 06       	cpc	r1, r23
    146e:	18 06       	cpc	r1, r24
    1470:	99 1f       	adc	r25, r25
    1472:	f1 cf       	rjmp	.-30     	; 0x1456 <__fp_splitA+0xc>
    1474:	86 95       	lsr	r24
    1476:	71 05       	cpc	r23, r1
    1478:	61 05       	cpc	r22, r1
    147a:	08 94       	sec
    147c:	08 95       	ret

0000147e <__fp_zero>:
    147e:	e8 94       	clt

00001480 <__fp_szero>:
    1480:	bb 27       	eor	r27, r27
    1482:	66 27       	eor	r22, r22
    1484:	77 27       	eor	r23, r23
    1486:	cb 01       	movw	r24, r22
    1488:	97 f9       	bld	r25, 7
    148a:	08 95       	ret

0000148c <__mulsf3>:
    148c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__mulsf3x>
    1490:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_round>
    1494:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_pscA>
    1498:	38 f0       	brcs	.+14     	; 0x14a8 <__mulsf3+0x1c>
    149a:	0e 94 1e 0b 	call	0x163c	; 0x163c <__fp_pscB>
    149e:	20 f0       	brcs	.+8      	; 0x14a8 <__mulsf3+0x1c>
    14a0:	95 23       	and	r25, r21
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <__mulsf3+0x1c>
    14a4:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_inf>
    14a8:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_nan>
    14ac:	11 24       	eor	r1, r1
    14ae:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_szero>

000014b2 <__mulsf3x>:
    14b2:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fp_split3>
    14b6:	70 f3       	brcs	.-36     	; 0x1494 <__mulsf3+0x8>

000014b8 <__mulsf3_pse>:
    14b8:	95 9f       	mul	r25, r21
    14ba:	c1 f3       	breq	.-16     	; 0x14ac <__mulsf3+0x20>
    14bc:	95 0f       	add	r25, r21
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	55 1f       	adc	r21, r21
    14c2:	62 9f       	mul	r22, r18
    14c4:	f0 01       	movw	r30, r0
    14c6:	72 9f       	mul	r23, r18
    14c8:	bb 27       	eor	r27, r27
    14ca:	f0 0d       	add	r31, r0
    14cc:	b1 1d       	adc	r27, r1
    14ce:	63 9f       	mul	r22, r19
    14d0:	aa 27       	eor	r26, r26
    14d2:	f0 0d       	add	r31, r0
    14d4:	b1 1d       	adc	r27, r1
    14d6:	aa 1f       	adc	r26, r26
    14d8:	64 9f       	mul	r22, r20
    14da:	66 27       	eor	r22, r22
    14dc:	b0 0d       	add	r27, r0
    14de:	a1 1d       	adc	r26, r1
    14e0:	66 1f       	adc	r22, r22
    14e2:	82 9f       	mul	r24, r18
    14e4:	22 27       	eor	r18, r18
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	62 1f       	adc	r22, r18
    14ec:	73 9f       	mul	r23, r19
    14ee:	b0 0d       	add	r27, r0
    14f0:	a1 1d       	adc	r26, r1
    14f2:	62 1f       	adc	r22, r18
    14f4:	83 9f       	mul	r24, r19
    14f6:	a0 0d       	add	r26, r0
    14f8:	61 1d       	adc	r22, r1
    14fa:	22 1f       	adc	r18, r18
    14fc:	74 9f       	mul	r23, r20
    14fe:	33 27       	eor	r19, r19
    1500:	a0 0d       	add	r26, r0
    1502:	61 1d       	adc	r22, r1
    1504:	23 1f       	adc	r18, r19
    1506:	84 9f       	mul	r24, r20
    1508:	60 0d       	add	r22, r0
    150a:	21 1d       	adc	r18, r1
    150c:	82 2f       	mov	r24, r18
    150e:	76 2f       	mov	r23, r22
    1510:	6a 2f       	mov	r22, r26
    1512:	11 24       	eor	r1, r1
    1514:	9f 57       	subi	r25, 0x7F	; 127
    1516:	50 40       	sbci	r21, 0x00	; 0
    1518:	9a f0       	brmi	.+38     	; 0x1540 <__mulsf3_pse+0x88>
    151a:	f1 f0       	breq	.+60     	; 0x1558 <__mulsf3_pse+0xa0>
    151c:	88 23       	and	r24, r24
    151e:	4a f0       	brmi	.+18     	; 0x1532 <__mulsf3_pse+0x7a>
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	bb 1f       	adc	r27, r27
    1526:	66 1f       	adc	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	88 1f       	adc	r24, r24
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	50 40       	sbci	r21, 0x00	; 0
    1530:	a9 f7       	brne	.-22     	; 0x151c <__mulsf3_pse+0x64>
    1532:	9e 3f       	cpi	r25, 0xFE	; 254
    1534:	51 05       	cpc	r21, r1
    1536:	80 f0       	brcs	.+32     	; 0x1558 <__mulsf3_pse+0xa0>
    1538:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_inf>
    153c:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__fp_szero>
    1540:	5f 3f       	cpi	r21, 0xFF	; 255
    1542:	e4 f3       	brlt	.-8      	; 0x153c <__mulsf3_pse+0x84>
    1544:	98 3e       	cpi	r25, 0xE8	; 232
    1546:	d4 f3       	brlt	.-12     	; 0x153c <__mulsf3_pse+0x84>
    1548:	86 95       	lsr	r24
    154a:	77 95       	ror	r23
    154c:	67 95       	ror	r22
    154e:	b7 95       	ror	r27
    1550:	f7 95       	ror	r31
    1552:	e7 95       	ror	r30
    1554:	9f 5f       	subi	r25, 0xFF	; 255
    1556:	c1 f7       	brne	.-16     	; 0x1548 <__mulsf3_pse+0x90>
    1558:	fe 2b       	or	r31, r30
    155a:	88 0f       	add	r24, r24
    155c:	91 1d       	adc	r25, r1
    155e:	96 95       	lsr	r25
    1560:	87 95       	ror	r24
    1562:	97 f9       	bld	r25, 7
    1564:	08 95       	ret
    1566:	19 f4       	brne	.+6      	; 0x156e <__mulsf3_pse+0xb6>
    1568:	16 f4       	brtc	.+4      	; 0x156e <__mulsf3_pse+0xb6>
    156a:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_nan>
    156e:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__fp_mpack>

00001572 <sqrt>:
    1572:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_splitA>
    1576:	b8 f3       	brcs	.-18     	; 0x1566 <__mulsf3_pse+0xae>
    1578:	99 23       	and	r25, r25
    157a:	c9 f3       	breq	.-14     	; 0x156e <__mulsf3_pse+0xb6>
    157c:	b6 f3       	brts	.-20     	; 0x156a <__mulsf3_pse+0xb2>
    157e:	9f 57       	subi	r25, 0x7F	; 127
    1580:	55 0b       	sbc	r21, r21
    1582:	87 ff       	sbrs	r24, 7
    1584:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_norm2>
    1588:	00 24       	eor	r0, r0
    158a:	a0 e6       	ldi	r26, 0x60	; 96
    158c:	40 ea       	ldi	r20, 0xA0	; 160
    158e:	90 01       	movw	r18, r0
    1590:	80 58       	subi	r24, 0x80	; 128
    1592:	56 95       	lsr	r21
    1594:	97 95       	ror	r25
    1596:	28 f4       	brcc	.+10     	; 0x15a2 <sqrt+0x30>
    1598:	80 5c       	subi	r24, 0xC0	; 192
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <sqrt+0x38>
    15a2:	26 17       	cp	r18, r22
    15a4:	37 07       	cpc	r19, r23
    15a6:	48 07       	cpc	r20, r24
    15a8:	30 f4       	brcc	.+12     	; 0x15b6 <sqrt+0x44>
    15aa:	62 1b       	sub	r22, r18
    15ac:	73 0b       	sbc	r23, r19
    15ae:	84 0b       	sbc	r24, r20
    15b0:	20 29       	or	r18, r0
    15b2:	31 29       	or	r19, r1
    15b4:	4a 2b       	or	r20, r26
    15b6:	a6 95       	lsr	r26
    15b8:	17 94       	ror	r1
    15ba:	07 94       	ror	r0
    15bc:	20 25       	eor	r18, r0
    15be:	31 25       	eor	r19, r1
    15c0:	4a 27       	eor	r20, r26
    15c2:	58 f7       	brcc	.-42     	; 0x159a <sqrt+0x28>
    15c4:	66 0f       	add	r22, r22
    15c6:	77 1f       	adc	r23, r23
    15c8:	88 1f       	adc	r24, r24
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <sqrt+0x62>
    15cc:	26 17       	cp	r18, r22
    15ce:	37 07       	cpc	r19, r23
    15d0:	48 07       	cpc	r20, r24
    15d2:	30 f4       	brcc	.+12     	; 0x15e0 <sqrt+0x6e>
    15d4:	62 0b       	sbc	r22, r18
    15d6:	73 0b       	sbc	r23, r19
    15d8:	84 0b       	sbc	r24, r20
    15da:	20 0d       	add	r18, r0
    15dc:	31 1d       	adc	r19, r1
    15de:	41 1d       	adc	r20, r1
    15e0:	a0 95       	com	r26
    15e2:	81 f7       	brne	.-32     	; 0x15c4 <sqrt+0x52>
    15e4:	b9 01       	movw	r22, r18
    15e6:	84 2f       	mov	r24, r20
    15e8:	91 58       	subi	r25, 0x81	; 129
    15ea:	88 0f       	add	r24, r24
    15ec:	96 95       	lsr	r25
    15ee:	87 95       	ror	r24
    15f0:	08 95       	ret

000015f2 <__fp_inf>:
    15f2:	97 f9       	bld	r25, 7
    15f4:	9f 67       	ori	r25, 0x7F	; 127
    15f6:	80 e8       	ldi	r24, 0x80	; 128
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	08 95       	ret

000015fe <__fp_mpack>:
    15fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1600:	31 f0       	breq	.+12     	; 0x160e <__fp_mpack_finite+0xc>

00001602 <__fp_mpack_finite>:
    1602:	91 50       	subi	r25, 0x01	; 1
    1604:	20 f4       	brcc	.+8      	; 0x160e <__fp_mpack_finite+0xc>
    1606:	87 95       	ror	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	b7 95       	ror	r27
    160e:	88 0f       	add	r24, r24
    1610:	91 1d       	adc	r25, r1
    1612:	96 95       	lsr	r25
    1614:	87 95       	ror	r24
    1616:	97 f9       	bld	r25, 7
    1618:	08 95       	ret

0000161a <__fp_nan>:
    161a:	9f ef       	ldi	r25, 0xFF	; 255
    161c:	80 ec       	ldi	r24, 0xC0	; 192
    161e:	08 95       	ret

00001620 <__fp_norm2>:
    1620:	91 50       	subi	r25, 0x01	; 1
    1622:	50 40       	sbci	r21, 0x00	; 0
    1624:	66 0f       	add	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	d2 f7       	brpl	.-12     	; 0x1620 <__fp_norm2>
    162c:	08 95       	ret

0000162e <__fp_pscA>:
    162e:	00 24       	eor	r0, r0
    1630:	0a 94       	dec	r0
    1632:	16 16       	cp	r1, r22
    1634:	17 06       	cpc	r1, r23
    1636:	18 06       	cpc	r1, r24
    1638:	09 06       	cpc	r0, r25
    163a:	08 95       	ret

0000163c <__fp_pscB>:
    163c:	00 24       	eor	r0, r0
    163e:	0a 94       	dec	r0
    1640:	12 16       	cp	r1, r18
    1642:	13 06       	cpc	r1, r19
    1644:	14 06       	cpc	r1, r20
    1646:	05 06       	cpc	r0, r21
    1648:	08 95       	ret

0000164a <__fp_round>:
    164a:	09 2e       	mov	r0, r25
    164c:	03 94       	inc	r0
    164e:	00 0c       	add	r0, r0
    1650:	11 f4       	brne	.+4      	; 0x1656 <__fp_round+0xc>
    1652:	88 23       	and	r24, r24
    1654:	52 f0       	brmi	.+20     	; 0x166a <__fp_round+0x20>
    1656:	bb 0f       	add	r27, r27
    1658:	40 f4       	brcc	.+16     	; 0x166a <__fp_round+0x20>
    165a:	bf 2b       	or	r27, r31
    165c:	11 f4       	brne	.+4      	; 0x1662 <__fp_round+0x18>
    165e:	60 ff       	sbrs	r22, 0
    1660:	04 c0       	rjmp	.+8      	; 0x166a <__fp_round+0x20>
    1662:	6f 5f       	subi	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	08 95       	ret

0000166c <__udivmodsi4>:
    166c:	a1 e2       	ldi	r26, 0x21	; 33
    166e:	1a 2e       	mov	r1, r26
    1670:	aa 1b       	sub	r26, r26
    1672:	bb 1b       	sub	r27, r27
    1674:	fd 01       	movw	r30, r26
    1676:	0d c0       	rjmp	.+26     	; 0x1692 <__udivmodsi4_ep>

00001678 <__udivmodsi4_loop>:
    1678:	aa 1f       	adc	r26, r26
    167a:	bb 1f       	adc	r27, r27
    167c:	ee 1f       	adc	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	a2 17       	cp	r26, r18
    1682:	b3 07       	cpc	r27, r19
    1684:	e4 07       	cpc	r30, r20
    1686:	f5 07       	cpc	r31, r21
    1688:	20 f0       	brcs	.+8      	; 0x1692 <__udivmodsi4_ep>
    168a:	a2 1b       	sub	r26, r18
    168c:	b3 0b       	sbc	r27, r19
    168e:	e4 0b       	sbc	r30, r20
    1690:	f5 0b       	sbc	r31, r21

00001692 <__udivmodsi4_ep>:
    1692:	66 1f       	adc	r22, r22
    1694:	77 1f       	adc	r23, r23
    1696:	88 1f       	adc	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	1a 94       	dec	r1
    169c:	69 f7       	brne	.-38     	; 0x1678 <__udivmodsi4_loop>
    169e:	60 95       	com	r22
    16a0:	70 95       	com	r23
    16a2:	80 95       	com	r24
    16a4:	90 95       	com	r25
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	bd 01       	movw	r22, r26
    16ac:	cf 01       	movw	r24, r30
    16ae:	08 95       	ret

000016b0 <__muluhisi3>:
    16b0:	0e 94 af 0b 	call	0x175e	; 0x175e <__umulhisi3>
    16b4:	a5 9f       	mul	r26, r21
    16b6:	90 0d       	add	r25, r0
    16b8:	b4 9f       	mul	r27, r20
    16ba:	90 0d       	add	r25, r0
    16bc:	a4 9f       	mul	r26, r20
    16be:	80 0d       	add	r24, r0
    16c0:	91 1d       	adc	r25, r1
    16c2:	11 24       	eor	r1, r1
    16c4:	08 95       	ret

000016c6 <__ashldi3>:
    16c6:	0f 93       	push	r16
    16c8:	08 30       	cpi	r16, 0x08	; 8
    16ca:	90 f0       	brcs	.+36     	; 0x16f0 <__ashldi3+0x2a>
    16cc:	98 2f       	mov	r25, r24
    16ce:	87 2f       	mov	r24, r23
    16d0:	76 2f       	mov	r23, r22
    16d2:	65 2f       	mov	r22, r21
    16d4:	54 2f       	mov	r21, r20
    16d6:	43 2f       	mov	r20, r19
    16d8:	32 2f       	mov	r19, r18
    16da:	22 27       	eor	r18, r18
    16dc:	08 50       	subi	r16, 0x08	; 8
    16de:	f4 cf       	rjmp	.-24     	; 0x16c8 <__ashldi3+0x2>
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	44 1f       	adc	r20, r20
    16e6:	55 1f       	adc	r21, r21
    16e8:	66 1f       	adc	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	88 1f       	adc	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 95       	dec	r16
    16f2:	b2 f7       	brpl	.-20     	; 0x16e0 <__ashldi3+0x1a>
    16f4:	0f 91       	pop	r16
    16f6:	08 95       	ret

000016f8 <__adddi3>:
    16f8:	2a 0d       	add	r18, r10
    16fa:	3b 1d       	adc	r19, r11
    16fc:	4c 1d       	adc	r20, r12
    16fe:	5d 1d       	adc	r21, r13
    1700:	6e 1d       	adc	r22, r14
    1702:	7f 1d       	adc	r23, r15
    1704:	80 1f       	adc	r24, r16
    1706:	91 1f       	adc	r25, r17
    1708:	08 95       	ret

0000170a <__adddi3_s8>:
    170a:	00 24       	eor	r0, r0
    170c:	a7 fd       	sbrc	r26, 7
    170e:	00 94       	com	r0
    1710:	2a 0f       	add	r18, r26
    1712:	30 1d       	adc	r19, r0
    1714:	40 1d       	adc	r20, r0
    1716:	50 1d       	adc	r21, r0
    1718:	60 1d       	adc	r22, r0
    171a:	70 1d       	adc	r23, r0
    171c:	80 1d       	adc	r24, r0
    171e:	90 1d       	adc	r25, r0
    1720:	08 95       	ret

00001722 <__subdi3>:
    1722:	2a 19       	sub	r18, r10
    1724:	3b 09       	sbc	r19, r11
    1726:	4c 09       	sbc	r20, r12
    1728:	5d 09       	sbc	r21, r13
    172a:	6e 09       	sbc	r22, r14
    172c:	7f 09       	sbc	r23, r15
    172e:	80 0b       	sbc	r24, r16
    1730:	91 0b       	sbc	r25, r17
    1732:	08 95       	ret

00001734 <__cmpdi2>:
    1734:	2a 15       	cp	r18, r10
    1736:	3b 05       	cpc	r19, r11
    1738:	4c 05       	cpc	r20, r12
    173a:	5d 05       	cpc	r21, r13
    173c:	6e 05       	cpc	r22, r14
    173e:	7f 05       	cpc	r23, r15
    1740:	80 07       	cpc	r24, r16
    1742:	91 07       	cpc	r25, r17
    1744:	08 95       	ret

00001746 <__cmpdi2_s8>:
    1746:	00 24       	eor	r0, r0
    1748:	a7 fd       	sbrc	r26, 7
    174a:	00 94       	com	r0
    174c:	2a 17       	cp	r18, r26
    174e:	30 05       	cpc	r19, r0
    1750:	40 05       	cpc	r20, r0
    1752:	50 05       	cpc	r21, r0
    1754:	60 05       	cpc	r22, r0
    1756:	70 05       	cpc	r23, r0
    1758:	80 05       	cpc	r24, r0
    175a:	90 05       	cpc	r25, r0
    175c:	08 95       	ret

0000175e <__umulhisi3>:
    175e:	a2 9f       	mul	r26, r18
    1760:	b0 01       	movw	r22, r0
    1762:	b3 9f       	mul	r27, r19
    1764:	c0 01       	movw	r24, r0
    1766:	a3 9f       	mul	r26, r19
    1768:	70 0d       	add	r23, r0
    176a:	81 1d       	adc	r24, r1
    176c:	11 24       	eor	r1, r1
    176e:	91 1d       	adc	r25, r1
    1770:	b2 9f       	mul	r27, r18
    1772:	70 0d       	add	r23, r0
    1774:	81 1d       	adc	r24, r1
    1776:	11 24       	eor	r1, r1
    1778:	91 1d       	adc	r25, r1
    177a:	08 95       	ret

0000177c <_exit>:
    177c:	f8 94       	cli

0000177e <__stop_program>:
    177e:	ff cf       	rjmp	.-2      	; 0x177e <__stop_program>
=======
    12c2:	0e 94 73 00 	call	0xe6	; 0xe6 <init_micros>
	
	init_motor();
    12c6:	0e 94 a4 02 	call	0x548	; 0x548 <init_motor>
	init_LED();
    12ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_LED>
	
	init_rp6Data();
    12ce:	0e 94 1e 01 	call	0x23c	; 0x23c <init_rp6Data>
	init_bumpedData();
    12d2:	0e 94 3d 01 	call	0x27a	; 0x27a <init_bumpedData>
	init_arduinoData();
    12d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <init_arduinoData>
	
	init_TWI();
    12da:	0e 94 10 01 	call	0x220	; 0x220 <init_TWI>
	
	clearSendData();
    12de:	0e 94 69 01 	call	0x2d2	; 0x2d2 <clearSendData>
	clearReceiveData();
    12e2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <clearReceiveData>
		
	while(1){
		if (bumperCheck()) {
    12e6:	0e 94 b6 08 	call	0x116c	; 0x116c <bumperCheck>
    12ea:	88 23       	and	r24, r24
    12ec:	e9 f0       	breq	.+58     	; 0x1328 <main+0x68>
			motorDriver(bumpedData);
    12ee:	8d b7       	in	r24, 0x3d	; 61
    12f0:	9e b7       	in	r25, 0x3e	; 62
    12f2:	43 97       	sbiw	r24, 0x13	; 19
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	9e bf       	out	0x3e, r25	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	8d bf       	out	0x3d, r24	; 61
    12fe:	ad b7       	in	r26, 0x3d	; 61
    1300:	be b7       	in	r27, 0x3e	; 62
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	83 e1       	ldi	r24, 0x13	; 19
    1306:	ef eb       	ldi	r30, 0xBF	; 191
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	01 90       	ld	r0, Z+
    130c:	0d 92       	st	X+, r0
    130e:	8a 95       	dec	r24
    1310:	e1 f7       	brne	.-8      	; 0x130a <main+0x4a>
    1312:	0e 94 a9 02 	call	0x552	; 0x552 <motorDriver>
    1316:	8d b7       	in	r24, 0x3d	; 61
    1318:	9e b7       	in	r25, 0x3e	; 62
    131a:	43 96       	adiw	r24, 0x13	; 19
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	9e bf       	out	0x3e, r25	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	8d bf       	out	0x3d, r24	; 61
    1326:	df cf       	rjmp	.-66     	; 0x12e6 <main+0x26>
		} else {
			motorDriver(rp6Data);
    1328:	8d b7       	in	r24, 0x3d	; 61
    132a:	9e b7       	in	r25, 0x3e	; 62
    132c:	43 97       	sbiw	r24, 0x13	; 19
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	9e bf       	out	0x3e, r25	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	8d bf       	out	0x3d, r24	; 61
    1338:	ad b7       	in	r26, 0x3d	; 61
    133a:	be b7       	in	r27, 0x3e	; 62
    133c:	11 96       	adiw	r26, 0x01	; 1
    133e:	83 e1       	ldi	r24, 0x13	; 19
    1340:	e4 ea       	ldi	r30, 0xA4	; 164
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	01 90       	ld	r0, Z+
    1346:	0d 92       	st	X+, r0
    1348:	8a 95       	dec	r24
    134a:	e1 f7       	brne	.-8      	; 0x1344 <main+0x84>
    134c:	0e 94 a9 02 	call	0x552	; 0x552 <motorDriver>
    1350:	8d b7       	in	r24, 0x3d	; 61
    1352:	9e b7       	in	r25, 0x3e	; 62
    1354:	43 96       	adiw	r24, 0x13	; 19
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	9e bf       	out	0x3e, r25	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	8d bf       	out	0x3d, r24	; 61
    1360:	c2 cf       	rjmp	.-124    	; 0x12e6 <main+0x26>

00001362 <__fixunssfsi>:
    1362:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_splitA>
    1366:	88 f0       	brcs	.+34     	; 0x138a <__fixunssfsi+0x28>
    1368:	9f 57       	subi	r25, 0x7F	; 127
    136a:	98 f0       	brcs	.+38     	; 0x1392 <__fixunssfsi+0x30>
    136c:	b9 2f       	mov	r27, r25
    136e:	99 27       	eor	r25, r25
    1370:	b7 51       	subi	r27, 0x17	; 23
    1372:	b0 f0       	brcs	.+44     	; 0x13a0 <__fixunssfsi+0x3e>
    1374:	e1 f0       	breq	.+56     	; 0x13ae <__fixunssfsi+0x4c>
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	1a f0       	brmi	.+6      	; 0x1386 <__fixunssfsi+0x24>
    1380:	ba 95       	dec	r27
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__fixunssfsi+0x14>
    1384:	14 c0       	rjmp	.+40     	; 0x13ae <__fixunssfsi+0x4c>
    1386:	b1 30       	cpi	r27, 0x01	; 1
    1388:	91 f0       	breq	.+36     	; 0x13ae <__fixunssfsi+0x4c>
    138a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fp_zero>
    138e:	b1 e0       	ldi	r27, 0x01	; 1
    1390:	08 95       	ret
    1392:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_zero>
    1396:	67 2f       	mov	r22, r23
    1398:	78 2f       	mov	r23, r24
    139a:	88 27       	eor	r24, r24
    139c:	b8 5f       	subi	r27, 0xF8	; 248
    139e:	39 f0       	breq	.+14     	; 0x13ae <__fixunssfsi+0x4c>
    13a0:	b9 3f       	cpi	r27, 0xF9	; 249
    13a2:	cc f3       	brlt	.-14     	; 0x1396 <__fixunssfsi+0x34>
    13a4:	86 95       	lsr	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	b3 95       	inc	r27
    13ac:	d9 f7       	brne	.-10     	; 0x13a4 <__fixunssfsi+0x42>
    13ae:	3e f4       	brtc	.+14     	; 0x13be <__fixunssfsi+0x5c>
    13b0:	90 95       	com	r25
    13b2:	80 95       	com	r24
    13b4:	70 95       	com	r23
    13b6:	61 95       	neg	r22
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	8f 4f       	sbci	r24, 0xFF	; 255
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	08 95       	ret

000013c0 <__floatdisf>:
    13c0:	97 fb       	bst	r25, 7
    13c2:	16 f4       	brtc	.+4      	; 0x13c8 <__floatdisf+0x8>
    13c4:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_negdi>
    13c8:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_di2sf>

000013cc <__floatundisf>:
    13cc:	e8 94       	clt

000013ce <__fp_di2sf>:
    13ce:	f9 2f       	mov	r31, r25
    13d0:	96 eb       	ldi	r25, 0xB6	; 182
    13d2:	ff 23       	and	r31, r31
    13d4:	81 f0       	breq	.+32     	; 0x13f6 <__fp_di2sf+0x28>
    13d6:	12 16       	cp	r1, r18
    13d8:	13 06       	cpc	r1, r19
    13da:	14 06       	cpc	r1, r20
    13dc:	44 0b       	sbc	r20, r20
    13de:	93 95       	inc	r25
    13e0:	f6 95       	lsr	r31
    13e2:	87 95       	ror	r24
    13e4:	77 95       	ror	r23
    13e6:	67 95       	ror	r22
    13e8:	57 95       	ror	r21
    13ea:	40 40       	sbci	r20, 0x00	; 0
    13ec:	ff 23       	and	r31, r31
    13ee:	b9 f7       	brne	.-18     	; 0x13de <__fp_di2sf+0x10>
    13f0:	1b c0       	rjmp	.+54     	; 0x1428 <__fp_di2sf+0x5a>
    13f2:	99 27       	eor	r25, r25
    13f4:	08 95       	ret
    13f6:	88 23       	and	r24, r24
    13f8:	51 f4       	brne	.+20     	; 0x140e <__fp_di2sf+0x40>
    13fa:	98 50       	subi	r25, 0x08	; 8
    13fc:	d2 f7       	brpl	.-12     	; 0x13f2 <__fp_di2sf+0x24>
    13fe:	87 2b       	or	r24, r23
    1400:	76 2f       	mov	r23, r22
    1402:	65 2f       	mov	r22, r21
    1404:	54 2f       	mov	r21, r20
    1406:	43 2f       	mov	r20, r19
    1408:	32 2f       	mov	r19, r18
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	b1 f3       	breq	.-20     	; 0x13fa <__fp_di2sf+0x2c>
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	14 06       	cpc	r1, r20
    1414:	44 0b       	sbc	r20, r20
    1416:	88 23       	and	r24, r24
    1418:	3a f0       	brmi	.+14     	; 0x1428 <__fp_di2sf+0x5a>
    141a:	9a 95       	dec	r25
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	66 1f       	adc	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	ca f7       	brpl	.-14     	; 0x141a <__fp_di2sf+0x4c>
    1428:	55 23       	and	r21, r21
    142a:	4a f4       	brpl	.+18     	; 0x143e <__fp_di2sf+0x70>
    142c:	44 0f       	add	r20, r20
    142e:	55 1f       	adc	r21, r21
    1430:	11 f4       	brne	.+4      	; 0x1436 <__fp_di2sf+0x68>
    1432:	60 ff       	sbrs	r22, 0
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__fp_di2sf+0x70>
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	88 0f       	add	r24, r24
    1440:	96 95       	lsr	r25
    1442:	87 95       	ror	r24
    1444:	97 f9       	bld	r25, 7
    1446:	08 95       	ret

00001448 <__fp_negdi>:
    1448:	90 95       	com	r25
    144a:	80 95       	com	r24
    144c:	70 95       	com	r23
    144e:	60 95       	com	r22
    1450:	50 95       	com	r21
    1452:	40 95       	com	r20
    1454:	30 95       	com	r19
    1456:	21 95       	neg	r18
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	4f 4f       	sbci	r20, 0xFF	; 255
    145c:	5f 4f       	sbci	r21, 0xFF	; 255
    145e:	6f 4f       	sbci	r22, 0xFF	; 255
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	8f 4f       	sbci	r24, 0xFF	; 255
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	08 95       	ret

00001468 <__fp_split3>:
    1468:	57 fd       	sbrc	r21, 7
    146a:	90 58       	subi	r25, 0x80	; 128
    146c:	44 0f       	add	r20, r20
    146e:	55 1f       	adc	r21, r21
    1470:	59 f0       	breq	.+22     	; 0x1488 <__fp_splitA+0x10>
    1472:	5f 3f       	cpi	r21, 0xFF	; 255
    1474:	71 f0       	breq	.+28     	; 0x1492 <__fp_splitA+0x1a>
    1476:	47 95       	ror	r20

00001478 <__fp_splitA>:
    1478:	88 0f       	add	r24, r24
    147a:	97 fb       	bst	r25, 7
    147c:	99 1f       	adc	r25, r25
    147e:	61 f0       	breq	.+24     	; 0x1498 <__fp_splitA+0x20>
    1480:	9f 3f       	cpi	r25, 0xFF	; 255
    1482:	79 f0       	breq	.+30     	; 0x14a2 <__fp_splitA+0x2a>
    1484:	87 95       	ror	r24
    1486:	08 95       	ret
    1488:	12 16       	cp	r1, r18
    148a:	13 06       	cpc	r1, r19
    148c:	14 06       	cpc	r1, r20
    148e:	55 1f       	adc	r21, r21
    1490:	f2 cf       	rjmp	.-28     	; 0x1476 <__fp_split3+0xe>
    1492:	46 95       	lsr	r20
    1494:	f1 df       	rcall	.-30     	; 0x1478 <__fp_splitA>
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <__fp_splitA+0x30>
    1498:	16 16       	cp	r1, r22
    149a:	17 06       	cpc	r1, r23
    149c:	18 06       	cpc	r1, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	f1 cf       	rjmp	.-30     	; 0x1484 <__fp_splitA+0xc>
    14a2:	86 95       	lsr	r24
    14a4:	71 05       	cpc	r23, r1
    14a6:	61 05       	cpc	r22, r1
    14a8:	08 94       	sec
    14aa:	08 95       	ret

000014ac <__fp_zero>:
    14ac:	e8 94       	clt

000014ae <__fp_szero>:
    14ae:	bb 27       	eor	r27, r27
    14b0:	66 27       	eor	r22, r22
    14b2:	77 27       	eor	r23, r23
    14b4:	cb 01       	movw	r24, r22
    14b6:	97 f9       	bld	r25, 7
    14b8:	08 95       	ret

000014ba <__mulsf3>:
    14ba:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3x>
    14be:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__fp_round>
    14c2:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscA>
    14c6:	38 f0       	brcs	.+14     	; 0x14d6 <__mulsf3+0x1c>
    14c8:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscB>
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <__mulsf3+0x1c>
    14ce:	95 23       	and	r25, r21
    14d0:	11 f0       	breq	.+4      	; 0x14d6 <__mulsf3+0x1c>
    14d2:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_inf>
    14d6:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_nan>
    14da:	11 24       	eor	r1, r1
    14dc:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_szero>

000014e0 <__mulsf3x>:
    14e0:	0e 94 34 0a 	call	0x1468	; 0x1468 <__fp_split3>
    14e4:	70 f3       	brcs	.-36     	; 0x14c2 <__mulsf3+0x8>

000014e6 <__mulsf3_pse>:
    14e6:	95 9f       	mul	r25, r21
    14e8:	c1 f3       	breq	.-16     	; 0x14da <__mulsf3+0x20>
    14ea:	95 0f       	add	r25, r21
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	55 1f       	adc	r21, r21
    14f0:	62 9f       	mul	r22, r18
    14f2:	f0 01       	movw	r30, r0
    14f4:	72 9f       	mul	r23, r18
    14f6:	bb 27       	eor	r27, r27
    14f8:	f0 0d       	add	r31, r0
    14fa:	b1 1d       	adc	r27, r1
    14fc:	63 9f       	mul	r22, r19
    14fe:	aa 27       	eor	r26, r26
    1500:	f0 0d       	add	r31, r0
    1502:	b1 1d       	adc	r27, r1
    1504:	aa 1f       	adc	r26, r26
    1506:	64 9f       	mul	r22, r20
    1508:	66 27       	eor	r22, r22
    150a:	b0 0d       	add	r27, r0
    150c:	a1 1d       	adc	r26, r1
    150e:	66 1f       	adc	r22, r22
    1510:	82 9f       	mul	r24, r18
    1512:	22 27       	eor	r18, r18
    1514:	b0 0d       	add	r27, r0
    1516:	a1 1d       	adc	r26, r1
    1518:	62 1f       	adc	r22, r18
    151a:	73 9f       	mul	r23, r19
    151c:	b0 0d       	add	r27, r0
    151e:	a1 1d       	adc	r26, r1
    1520:	62 1f       	adc	r22, r18
    1522:	83 9f       	mul	r24, r19
    1524:	a0 0d       	add	r26, r0
    1526:	61 1d       	adc	r22, r1
    1528:	22 1f       	adc	r18, r18
    152a:	74 9f       	mul	r23, r20
    152c:	33 27       	eor	r19, r19
    152e:	a0 0d       	add	r26, r0
    1530:	61 1d       	adc	r22, r1
    1532:	23 1f       	adc	r18, r19
    1534:	84 9f       	mul	r24, r20
    1536:	60 0d       	add	r22, r0
    1538:	21 1d       	adc	r18, r1
    153a:	82 2f       	mov	r24, r18
    153c:	76 2f       	mov	r23, r22
    153e:	6a 2f       	mov	r22, r26
    1540:	11 24       	eor	r1, r1
    1542:	9f 57       	subi	r25, 0x7F	; 127
    1544:	50 40       	sbci	r21, 0x00	; 0
    1546:	9a f0       	brmi	.+38     	; 0x156e <__mulsf3_pse+0x88>
    1548:	f1 f0       	breq	.+60     	; 0x1586 <__mulsf3_pse+0xa0>
    154a:	88 23       	and	r24, r24
    154c:	4a f0       	brmi	.+18     	; 0x1560 <__mulsf3_pse+0x7a>
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	bb 1f       	adc	r27, r27
    1554:	66 1f       	adc	r22, r22
    1556:	77 1f       	adc	r23, r23
    1558:	88 1f       	adc	r24, r24
    155a:	91 50       	subi	r25, 0x01	; 1
    155c:	50 40       	sbci	r21, 0x00	; 0
    155e:	a9 f7       	brne	.-22     	; 0x154a <__mulsf3_pse+0x64>
    1560:	9e 3f       	cpi	r25, 0xFE	; 254
    1562:	51 05       	cpc	r21, r1
    1564:	80 f0       	brcs	.+32     	; 0x1586 <__mulsf3_pse+0xa0>
    1566:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_inf>
    156a:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_szero>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	e4 f3       	brlt	.-8      	; 0x156a <__mulsf3_pse+0x84>
    1572:	98 3e       	cpi	r25, 0xE8	; 232
    1574:	d4 f3       	brlt	.-12     	; 0x156a <__mulsf3_pse+0x84>
    1576:	86 95       	lsr	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b7 95       	ror	r27
    157e:	f7 95       	ror	r31
    1580:	e7 95       	ror	r30
    1582:	9f 5f       	subi	r25, 0xFF	; 255
    1584:	c1 f7       	brne	.-16     	; 0x1576 <__mulsf3_pse+0x90>
    1586:	fe 2b       	or	r31, r30
    1588:	88 0f       	add	r24, r24
    158a:	91 1d       	adc	r25, r1
    158c:	96 95       	lsr	r25
    158e:	87 95       	ror	r24
    1590:	97 f9       	bld	r25, 7
    1592:	08 95       	ret
    1594:	19 f4       	brne	.+6      	; 0x159c <__mulsf3_pse+0xb6>
    1596:	16 f4       	brtc	.+4      	; 0x159c <__mulsf3_pse+0xb6>
    1598:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_nan>
    159c:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_mpack>

000015a0 <sqrt>:
    15a0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_splitA>
    15a4:	b8 f3       	brcs	.-18     	; 0x1594 <__mulsf3_pse+0xae>
    15a6:	99 23       	and	r25, r25
    15a8:	c9 f3       	breq	.-14     	; 0x159c <__mulsf3_pse+0xb6>
    15aa:	b6 f3       	brts	.-20     	; 0x1598 <__mulsf3_pse+0xb2>
    15ac:	9f 57       	subi	r25, 0x7F	; 127
    15ae:	55 0b       	sbc	r21, r21
    15b0:	87 ff       	sbrs	r24, 7
    15b2:	0e 94 27 0b 	call	0x164e	; 0x164e <__fp_norm2>
    15b6:	00 24       	eor	r0, r0
    15b8:	a0 e6       	ldi	r26, 0x60	; 96
    15ba:	40 ea       	ldi	r20, 0xA0	; 160
    15bc:	90 01       	movw	r18, r0
    15be:	80 58       	subi	r24, 0x80	; 128
    15c0:	56 95       	lsr	r21
    15c2:	97 95       	ror	r25
    15c4:	28 f4       	brcc	.+10     	; 0x15d0 <sqrt+0x30>
    15c6:	80 5c       	subi	r24, 0xC0	; 192
    15c8:	66 0f       	add	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	20 f0       	brcs	.+8      	; 0x15d8 <sqrt+0x38>
    15d0:	26 17       	cp	r18, r22
    15d2:	37 07       	cpc	r19, r23
    15d4:	48 07       	cpc	r20, r24
    15d6:	30 f4       	brcc	.+12     	; 0x15e4 <sqrt+0x44>
    15d8:	62 1b       	sub	r22, r18
    15da:	73 0b       	sbc	r23, r19
    15dc:	84 0b       	sbc	r24, r20
    15de:	20 29       	or	r18, r0
    15e0:	31 29       	or	r19, r1
    15e2:	4a 2b       	or	r20, r26
    15e4:	a6 95       	lsr	r26
    15e6:	17 94       	ror	r1
    15e8:	07 94       	ror	r0
    15ea:	20 25       	eor	r18, r0
    15ec:	31 25       	eor	r19, r1
    15ee:	4a 27       	eor	r20, r26
    15f0:	58 f7       	brcc	.-42     	; 0x15c8 <sqrt+0x28>
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	20 f0       	brcs	.+8      	; 0x1602 <sqrt+0x62>
    15fa:	26 17       	cp	r18, r22
    15fc:	37 07       	cpc	r19, r23
    15fe:	48 07       	cpc	r20, r24
    1600:	30 f4       	brcc	.+12     	; 0x160e <sqrt+0x6e>
    1602:	62 0b       	sbc	r22, r18
    1604:	73 0b       	sbc	r23, r19
    1606:	84 0b       	sbc	r24, r20
    1608:	20 0d       	add	r18, r0
    160a:	31 1d       	adc	r19, r1
    160c:	41 1d       	adc	r20, r1
    160e:	a0 95       	com	r26
    1610:	81 f7       	brne	.-32     	; 0x15f2 <sqrt+0x52>
    1612:	b9 01       	movw	r22, r18
    1614:	84 2f       	mov	r24, r20
    1616:	91 58       	subi	r25, 0x81	; 129
    1618:	88 0f       	add	r24, r24
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	08 95       	ret

00001620 <__fp_inf>:
    1620:	97 f9       	bld	r25, 7
    1622:	9f 67       	ori	r25, 0x7F	; 127
    1624:	80 e8       	ldi	r24, 0x80	; 128
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	08 95       	ret

0000162c <__fp_mpack>:
    162c:	9f 3f       	cpi	r25, 0xFF	; 255
    162e:	31 f0       	breq	.+12     	; 0x163c <__fp_mpack_finite+0xc>

00001630 <__fp_mpack_finite>:
    1630:	91 50       	subi	r25, 0x01	; 1
    1632:	20 f4       	brcc	.+8      	; 0x163c <__fp_mpack_finite+0xc>
    1634:	87 95       	ror	r24
    1636:	77 95       	ror	r23
    1638:	67 95       	ror	r22
    163a:	b7 95       	ror	r27
    163c:	88 0f       	add	r24, r24
    163e:	91 1d       	adc	r25, r1
    1640:	96 95       	lsr	r25
    1642:	87 95       	ror	r24
    1644:	97 f9       	bld	r25, 7
    1646:	08 95       	ret

00001648 <__fp_nan>:
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	80 ec       	ldi	r24, 0xC0	; 192
    164c:	08 95       	ret

0000164e <__fp_norm2>:
    164e:	91 50       	subi	r25, 0x01	; 1
    1650:	50 40       	sbci	r21, 0x00	; 0
    1652:	66 0f       	add	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	88 1f       	adc	r24, r24
    1658:	d2 f7       	brpl	.-12     	; 0x164e <__fp_norm2>
    165a:	08 95       	ret

0000165c <__fp_pscA>:
    165c:	00 24       	eor	r0, r0
    165e:	0a 94       	dec	r0
    1660:	16 16       	cp	r1, r22
    1662:	17 06       	cpc	r1, r23
    1664:	18 06       	cpc	r1, r24
    1666:	09 06       	cpc	r0, r25
    1668:	08 95       	ret

0000166a <__fp_pscB>:
    166a:	00 24       	eor	r0, r0
    166c:	0a 94       	dec	r0
    166e:	12 16       	cp	r1, r18
    1670:	13 06       	cpc	r1, r19
    1672:	14 06       	cpc	r1, r20
    1674:	05 06       	cpc	r0, r21
    1676:	08 95       	ret

00001678 <__fp_round>:
    1678:	09 2e       	mov	r0, r25
    167a:	03 94       	inc	r0
    167c:	00 0c       	add	r0, r0
    167e:	11 f4       	brne	.+4      	; 0x1684 <__fp_round+0xc>
    1680:	88 23       	and	r24, r24
    1682:	52 f0       	brmi	.+20     	; 0x1698 <__fp_round+0x20>
    1684:	bb 0f       	add	r27, r27
    1686:	40 f4       	brcc	.+16     	; 0x1698 <__fp_round+0x20>
    1688:	bf 2b       	or	r27, r31
    168a:	11 f4       	brne	.+4      	; 0x1690 <__fp_round+0x18>
    168c:	60 ff       	sbrs	r22, 0
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <__fp_round+0x20>
    1690:	6f 5f       	subi	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	08 95       	ret

0000169a <__udivmodsi4>:
    169a:	a1 e2       	ldi	r26, 0x21	; 33
    169c:	1a 2e       	mov	r1, r26
    169e:	aa 1b       	sub	r26, r26
    16a0:	bb 1b       	sub	r27, r27
    16a2:	fd 01       	movw	r30, r26
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <__udivmodsi4_ep>

000016a6 <__udivmodsi4_loop>:
    16a6:	aa 1f       	adc	r26, r26
    16a8:	bb 1f       	adc	r27, r27
    16aa:	ee 1f       	adc	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	a2 17       	cp	r26, r18
    16b0:	b3 07       	cpc	r27, r19
    16b2:	e4 07       	cpc	r30, r20
    16b4:	f5 07       	cpc	r31, r21
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <__udivmodsi4_ep>
    16b8:	a2 1b       	sub	r26, r18
    16ba:	b3 0b       	sbc	r27, r19
    16bc:	e4 0b       	sbc	r30, r20
    16be:	f5 0b       	sbc	r31, r21

000016c0 <__udivmodsi4_ep>:
    16c0:	66 1f       	adc	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	1a 94       	dec	r1
    16ca:	69 f7       	brne	.-38     	; 0x16a6 <__udivmodsi4_loop>
    16cc:	60 95       	com	r22
    16ce:	70 95       	com	r23
    16d0:	80 95       	com	r24
    16d2:	90 95       	com	r25
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	bd 01       	movw	r22, r26
    16da:	cf 01       	movw	r24, r30
    16dc:	08 95       	ret

000016de <__muluhisi3>:
    16de:	0e 94 c6 0b 	call	0x178c	; 0x178c <__umulhisi3>
    16e2:	a5 9f       	mul	r26, r21
    16e4:	90 0d       	add	r25, r0
    16e6:	b4 9f       	mul	r27, r20
    16e8:	90 0d       	add	r25, r0
    16ea:	a4 9f       	mul	r26, r20
    16ec:	80 0d       	add	r24, r0
    16ee:	91 1d       	adc	r25, r1
    16f0:	11 24       	eor	r1, r1
    16f2:	08 95       	ret

000016f4 <__ashldi3>:
    16f4:	0f 93       	push	r16
    16f6:	08 30       	cpi	r16, 0x08	; 8
    16f8:	90 f0       	brcs	.+36     	; 0x171e <__ashldi3+0x2a>
    16fa:	98 2f       	mov	r25, r24
    16fc:	87 2f       	mov	r24, r23
    16fe:	76 2f       	mov	r23, r22
    1700:	65 2f       	mov	r22, r21
    1702:	54 2f       	mov	r21, r20
    1704:	43 2f       	mov	r20, r19
    1706:	32 2f       	mov	r19, r18
    1708:	22 27       	eor	r18, r18
    170a:	08 50       	subi	r16, 0x08	; 8
    170c:	f4 cf       	rjmp	.-24     	; 0x16f6 <__ashldi3+0x2>
    170e:	22 0f       	add	r18, r18
    1710:	33 1f       	adc	r19, r19
    1712:	44 1f       	adc	r20, r20
    1714:	55 1f       	adc	r21, r21
    1716:	66 1f       	adc	r22, r22
    1718:	77 1f       	adc	r23, r23
    171a:	88 1f       	adc	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 95       	dec	r16
    1720:	b2 f7       	brpl	.-20     	; 0x170e <__ashldi3+0x1a>
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <__adddi3>:
    1726:	2a 0d       	add	r18, r10
    1728:	3b 1d       	adc	r19, r11
    172a:	4c 1d       	adc	r20, r12
    172c:	5d 1d       	adc	r21, r13
    172e:	6e 1d       	adc	r22, r14
    1730:	7f 1d       	adc	r23, r15
    1732:	80 1f       	adc	r24, r16
    1734:	91 1f       	adc	r25, r17
    1736:	08 95       	ret

00001738 <__adddi3_s8>:
    1738:	00 24       	eor	r0, r0
    173a:	a7 fd       	sbrc	r26, 7
    173c:	00 94       	com	r0
    173e:	2a 0f       	add	r18, r26
    1740:	30 1d       	adc	r19, r0
    1742:	40 1d       	adc	r20, r0
    1744:	50 1d       	adc	r21, r0
    1746:	60 1d       	adc	r22, r0
    1748:	70 1d       	adc	r23, r0
    174a:	80 1d       	adc	r24, r0
    174c:	90 1d       	adc	r25, r0
    174e:	08 95       	ret

00001750 <__subdi3>:
    1750:	2a 19       	sub	r18, r10
    1752:	3b 09       	sbc	r19, r11
    1754:	4c 09       	sbc	r20, r12
    1756:	5d 09       	sbc	r21, r13
    1758:	6e 09       	sbc	r22, r14
    175a:	7f 09       	sbc	r23, r15
    175c:	80 0b       	sbc	r24, r16
    175e:	91 0b       	sbc	r25, r17
    1760:	08 95       	ret

00001762 <__cmpdi2>:
    1762:	2a 15       	cp	r18, r10
    1764:	3b 05       	cpc	r19, r11
    1766:	4c 05       	cpc	r20, r12
    1768:	5d 05       	cpc	r21, r13
    176a:	6e 05       	cpc	r22, r14
    176c:	7f 05       	cpc	r23, r15
    176e:	80 07       	cpc	r24, r16
    1770:	91 07       	cpc	r25, r17
    1772:	08 95       	ret

00001774 <__cmpdi2_s8>:
    1774:	00 24       	eor	r0, r0
    1776:	a7 fd       	sbrc	r26, 7
    1778:	00 94       	com	r0
    177a:	2a 17       	cp	r18, r26
    177c:	30 05       	cpc	r19, r0
    177e:	40 05       	cpc	r20, r0
    1780:	50 05       	cpc	r21, r0
    1782:	60 05       	cpc	r22, r0
    1784:	70 05       	cpc	r23, r0
    1786:	80 05       	cpc	r24, r0
    1788:	90 05       	cpc	r25, r0
    178a:	08 95       	ret

0000178c <__umulhisi3>:
    178c:	a2 9f       	mul	r26, r18
    178e:	b0 01       	movw	r22, r0
    1790:	b3 9f       	mul	r27, r19
    1792:	c0 01       	movw	r24, r0
    1794:	a3 9f       	mul	r26, r19
    1796:	70 0d       	add	r23, r0
    1798:	81 1d       	adc	r24, r1
    179a:	11 24       	eor	r1, r1
    179c:	91 1d       	adc	r25, r1
    179e:	b2 9f       	mul	r27, r18
    17a0:	70 0d       	add	r23, r0
    17a2:	81 1d       	adc	r24, r1
    17a4:	11 24       	eor	r1, r1
    17a6:	91 1d       	adc	r25, r1
    17a8:	08 95       	ret

000017aa <_exit>:
    17aa:	f8 94       	cli

000017ac <__stop_program>:
    17ac:	ff cf       	rjmp	.-2      	; 0x17ac <__stop_program>
>>>>>>> Stashed changes
