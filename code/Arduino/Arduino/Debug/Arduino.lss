
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800200  00001e24  00001eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063b  00800314  00800314  00001fcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021c7  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ed  00000000  00000000  0000437b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000117a  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  000066e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b69  00000000  00000000  00006cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a3  00000000  00000000  00007861  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c7       	rjmp	.+3592   	; 0xe46 <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__vector_25>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 c2       	rjmp	.+1448   	; 0x636 <__vector_35>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c4       	rjmp	.+2474   	; 0xa48 <__vector_39>
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b5 c3       	rjmp	.+1898   	; 0x814 <__vector_42>
      aa:	00 00       	nop
      ac:	96 c0       	rjmp	.+300    	; 0x1da <__bad_interrupt>
      ae:	00 00       	nop
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	92 c0       	rjmp	.+292    	; 0x1da <__bad_interrupt>
      b6:	00 00       	nop
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1b 02       	muls	r17, r27
      e6:	d2 02       	muls	r29, r18
      e8:	c5 02       	muls	r28, r21
      ea:	28 02       	muls	r18, r24
      ec:	d2 02       	muls	r29, r18
      ee:	d2 02       	muls	r29, r18
      f0:	d2 02       	muls	r29, r18
      f2:	d2 02       	muls	r29, r18
      f4:	d2 02       	muls	r29, r18
      f6:	d2 02       	muls	r29, r18
      f8:	d2 02       	muls	r29, r18
      fa:	d2 02       	muls	r29, r18
      fc:	5a 02       	muls	r21, r26
      fe:	b7 02       	muls	r27, r23
     100:	d2 02       	muls	r29, r18
     102:	9a 02       	muls	r25, r26
     104:	4f 02       	muls	r20, r31
     106:	44 02       	muls	r20, r20
     108:	0e 02       	muls	r16, r30
     10a:	35 02       	muls	r19, r21
     10c:	8d 02       	muls	r24, r29
     10e:	d2 02       	muls	r29, r18
     110:	01 02       	muls	r16, r17
     112:	d2 02       	muls	r29, r18
     114:	d2 02       	muls	r29, r18
     116:	bc 02       	muls	r27, r28
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
     190:	01 c4       	rjmp	.+2050   	; 0x994 <__vector_42+0x180>
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e4 e2       	ldi	r30, 0x24	; 36
     1b2:	fe e1       	ldi	r31, 0x1E	; 30
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a4 31       	cpi	r26, 0x14	; 20
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	29 e0       	ldi	r18, 0x09	; 9
     1c6:	a4 e1       	ldi	r26, 0x14	; 20
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	af 34       	cpi	r26, 0x4F	; 79
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0d d7       	rcall	.+3610   	; 0xff0 <main>
     1d6:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <init_USART>:
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
}
     1dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e0:	e1 ec       	ldi	r30, 0xC1	; 193
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 69       	ori	r24, 0x90	; 144
     1e8:	80 83       	st	Z, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 60       	ori	r24, 0x08	; 8
     1ee:	80 83       	st	Z, r24
     1f0:	e2 ec       	ldi	r30, 0xC2	; 194
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	86 60       	ori	r24, 0x06	; 6
     1f8:	80 83       	st	Z, r24
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     206:	08 95       	ret

00000208 <__vector_25>:
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
     23e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     242:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTreceived>
     246:	90 ed       	ldi	r25, 0xD0	; 208
     248:	98 0f       	add	r25, r24
     24a:	9a 30       	cpi	r25, 0x0A	; 10
     24c:	10 f0       	brcs	.+4      	; 0x252 <__vector_25+0x4a>
     24e:	80 32       	cpi	r24, 0x20	; 32
     250:	99 f4       	brne	.+38     	; 0x278 <__vector_25+0x70>
     252:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <USARTinputPos>
     256:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <USARTinputPos+0x1>
     25a:	2f 3f       	cpi	r18, 0xFF	; 255
     25c:	31 05       	cpc	r19, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <__vector_25+0x5a>
     260:	b0 c1       	rjmp	.+864    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <USARTinputPos+0x1>
     26a:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <USARTinputPos>
     26e:	f9 01       	movw	r30, r18
     270:	e4 56       	subi	r30, 0x64	; 100
     272:	fc 4f       	sbci	r31, 0xFC	; 252
     274:	80 83       	st	Z, r24
     276:	a5 c1       	rjmp	.+842    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     278:	9f e9       	ldi	r25, 0x9F	; 159
     27a:	98 0f       	add	r25, r24
     27c:	9a 31       	cpi	r25, 0x1A	; 26
     27e:	28 f4       	brcc	.+10     	; 0x28a <__vector_25+0x82>
     280:	82 36       	cpi	r24, 0x62	; 98
     282:	29 f0       	breq	.+10     	; 0x28e <__vector_25+0x86>
     284:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     288:	9c c1       	rjmp	.+824    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     28a:	82 36       	cpi	r24, 0x62	; 98
     28c:	51 f4       	brne	.+20     	; 0x2a2 <__vector_25+0x9a>
     28e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     292:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     29c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     2a0:	90 c1       	rjmp	.+800    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     2a2:	8d 30       	cpi	r24, 0x0D	; 13
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_25+0xa0>
     2a6:	8d c1       	rjmp	.+794    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     2a8:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <USARTinputPos>
     2ac:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USARTinputPos+0x1>
     2b0:	11 23       	and	r17, r17
     2b2:	0c f4       	brge	.+2      	; 0x2b6 <__vector_25+0xae>
     2b4:	92 c0       	rjmp	.+292    	; 0x3da <__vector_25+0x1d2>
     2b6:	e4 e3       	ldi	r30, 0x34	; 52
     2b8:	f3 e0       	ldi	r31, 0x03	; 3
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	10 82       	st	Z, r1
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	15 82       	std	Z+5, r1	; 0x05
     2c4:	14 82       	std	Z+4, r1	; 0x04
     2c6:	ee e2       	ldi	r30, 0x2E	; 46
     2c8:	f3 e0       	ldi	r31, 0x03	; 3
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	9f ef       	ldi	r25, 0xFF	; 255
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	80 83       	st	Z, r24
     2d2:	93 83       	std	Z+3, r25	; 0x03
     2d4:	82 83       	std	Z+2, r24	; 0x02
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <numberStart.1997+0x1>
     2de:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <numberStart.1997>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	e4 56       	subi	r30, 0x64	; 100
     2f0:	fc 4f       	sbci	r31, 0xFC	; 252
     2f2:	30 81       	ld	r19, Z
     2f4:	30 32       	cpi	r19, 0x20	; 32
     2f6:	79 f4       	brne	.+30     	; 0x316 <__vector_25+0x10e>
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	fa 01       	movw	r30, r20
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	e8 5d       	subi	r30, 0xD8	; 216
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	43 30       	cpi	r20, 0x03	; 3
     30e:	51 05       	cpc	r21, r1
     310:	0c f0       	brlt	.+2      	; 0x314 <__vector_25+0x10c>
     312:	51 c1       	rjmp	.+674    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     314:	0a c0       	rjmp	.+20     	; 0x32a <__vector_25+0x122>
     316:	fa 01       	movw	r30, r20
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	e2 5d       	subi	r30, 0xD2	; 210
     31e:	fc 4f       	sbci	r31, 0xFC	; 252
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	80 83       	st	Z, r24
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	82 2f       	mov	r24, r18
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 17       	cp	r16, r24
     332:	19 07       	cpc	r17, r25
     334:	dc f6       	brge	.-74     	; 0x2ec <__vector_25+0xe4>
     336:	3f c1       	rjmp	.+638    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     338:	f9 01       	movw	r30, r18
     33a:	e4 56       	subi	r30, 0x64	; 100
     33c:	fc 4f       	sbci	r31, 0xFC	; 252
     33e:	c0 80       	ld	r12, Z
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	c8 12       	cpse	r12, r24
     344:	09 c0       	rjmp	.+18     	; 0x358 <__vector_25+0x150>
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	e8 1a       	sub	r14, r24
     34a:	f8 0a       	sbc	r15, r24
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	e8 16       	cp	r14, r24
     350:	f1 04       	cpc	r15, r1
     352:	0c f0       	brlt	.+2      	; 0x356 <__vector_25+0x14e>
     354:	42 c0       	rjmp	.+132    	; 0x3da <__vector_25+0x1d2>
     356:	3a c0       	rjmp	.+116    	; 0x3cc <__vector_25+0x1c4>
     358:	e7 01       	movw	r28, r14
     35a:	cc 0f       	add	r28, r28
     35c:	dd 1f       	adc	r29, r29
     35e:	de 01       	movw	r26, r28
     360:	a2 5d       	subi	r26, 0xD2	; 210
     362:	bc 4f       	sbci	r27, 0xFC	; 252
     364:	fe 01       	movw	r30, r28
     366:	e8 5d       	subi	r30, 0xD8	; 216
     368:	fc 4f       	sbci	r31, 0xFC	; 252
     36a:	6d 91       	ld	r22, X+
     36c:	7c 91       	ld	r23, X
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	68 0f       	add	r22, r24
     374:	79 1f       	adc	r23, r25
     376:	62 1b       	sub	r22, r18
     378:	73 0b       	sbc	r23, r19
     37a:	07 2e       	mov	r0, r23
     37c:	00 0c       	add	r0, r0
     37e:	88 0b       	sbc	r24, r24
     380:	99 0b       	sbc	r25, r25
     382:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 e4       	ldi	r25, 0x41	; 65
     392:	0e 94 ae 0b 	call	0x175c	; 0x175c <pow>
     396:	cc 5c       	subi	r28, 0xCC	; 204
     398:	dc 4f       	sbci	r29, 0xFC	; 252
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__addsf3>
     3a6:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fixsfsi>
     3aa:	20 ed       	ldi	r18, 0xD0	; 208
     3ac:	2c 0d       	add	r18, r12
     3ae:	42 2f       	mov	r20, r18
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	46 9f       	mul	r20, r22
     3b4:	90 01       	movw	r18, r0
     3b6:	47 9f       	mul	r20, r23
     3b8:	30 0d       	add	r19, r0
     3ba:	56 9f       	mul	r21, r22
     3bc:	30 0d       	add	r19, r0
     3be:	11 24       	eor	r1, r1
     3c0:	88 81       	ld	r24, Y
     3c2:	99 81       	ldd	r25, Y+1	; 0x01
     3c4:	82 0f       	add	r24, r18
     3c6:	93 1f       	adc	r25, r19
     3c8:	99 83       	std	Y+1, r25	; 0x01
     3ca:	88 83       	st	Y, r24
     3cc:	d3 94       	inc	r13
     3ce:	2d 2d       	mov	r18, r13
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	02 17       	cp	r16, r18
     3d4:	13 07       	cpc	r17, r19
     3d6:	0c f0       	brlt	.+2      	; 0x3da <__vector_25+0x1d2>
     3d8:	af cf       	rjmp	.-162    	; 0x338 <__vector_25+0x130>
     3da:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     3de:	ee 23       	and	r30, r30
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <__vector_25+0x1dc>
     3e2:	e0 c0       	rjmp	.+448    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     3e4:	8e 2f       	mov	r24, r30
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	fc 01       	movw	r30, r24
     3ea:	e1 56       	subi	r30, 0x61	; 97
     3ec:	f1 09       	sbc	r31, r1
     3ee:	ea 31       	cpi	r30, 0x1A	; 26
     3f0:	f1 05       	cpc	r31, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__vector_25+0x1ee>
     3f4:	d7 c0       	rjmp	.+430    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     3f6:	88 27       	eor	r24, r24
     3f8:	ee 58       	subi	r30, 0x8E	; 142
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	8f 4f       	sbci	r24, 0xFF	; 255
     3fe:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__tablejump2__>
     402:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     406:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x2>
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	19 f4       	brne	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40e:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <rp6Data+0x2>
     412:	c8 c0       	rjmp	.+400    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <rp6Data+0x2>
     41a:	c4 c0       	rjmp	.+392    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     41c:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     420:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x2>
     424:	8f 3f       	cpi	r24, 0xFF	; 255
     426:	19 f4       	brne	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     428:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <rp6Data+0x2>
     42c:	bb c0       	rjmp	.+374    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <rp6Data+0x2>
     434:	b7 c0       	rjmp	.+366    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     436:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     43a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <rp6Data+0x3>
     43e:	8f 3f       	cpi	r24, 0xFF	; 255
     440:	19 f4       	brne	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     442:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <rp6Data+0x3>
     446:	ae c0       	rjmp	.+348    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <rp6Data+0x3>
     44e:	aa c0       	rjmp	.+340    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     450:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     454:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <rp6Data+0x3>
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	19 f4       	brne	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45c:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <rp6Data+0x3>
     460:	a1 c0       	rjmp	.+322    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <rp6Data+0x3>
     468:	9d c0       	rjmp	.+314    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     46a:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     46e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1995>
     472:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1995+0x1>
     476:	85 36       	cpi	r24, 0x65	; 101
     478:	91 05       	cpc	r25, r1
     47a:	08 f0       	brcs	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47c:	93 c0       	rjmp	.+294    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     47e:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <rp6Data+0x1>
     482:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <rp6Data>
     486:	8e c0       	rjmp	.+284    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     488:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     48c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1995>
     490:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1995+0x1>
     494:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <rp6Data+0x7>
     498:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <rp6Data+0x6>
     49c:	83 c0       	rjmp	.+262    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     49e:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     4a2:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1995>
     4a6:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1995+0x1>
     4aa:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <rp6Data+0x5>
     4ae:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <rp6Data+0x4>
     4b2:	78 c0       	rjmp	.+240    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     4b4:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <programmedAmount>
     4b8:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <programmedAmount+0x1>
     4bc:	9c 01       	movw	r18, r24
     4be:	2f 5f       	subi	r18, 0xFF	; 255
     4c0:	3f 4f       	sbci	r19, 0xFF	; 255
     4c2:	30 93 3f 03 	sts	0x033F, r19	; 0x80033f <programmedAmount+0x1>
     4c6:	20 93 3e 03 	sts	0x033E, r18	; 0x80033e <programmedAmount>
     4ca:	9c 01       	movw	r18, r24
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	fc 01       	movw	r30, r24
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	e3 56       	subi	r30, 0x63	; 99
     4dc:	fb 4f       	sbci	r31, 0xFB	; 251
     4de:	a4 e3       	ldi	r26, 0x34	; 52
     4e0:	b3 e0       	ldi	r27, 0x03	; 3
     4e2:	2d 91       	ld	r18, X+
     4e4:	3c 91       	ld	r19, X
     4e6:	11 97       	sbiw	r26, 0x01	; 1
     4e8:	31 83       	std	Z+1, r19	; 0x01
     4ea:	20 83       	st	Z, r18
     4ec:	fc 01       	movw	r30, r24
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	e1 56       	subi	r30, 0x61	; 97
     4f4:	fb 4f       	sbci	r31, 0xFB	; 251
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	2d 91       	ld	r18, X+
     4fa:	3c 91       	ld	r19, X
     4fc:	13 97       	sbiw	r26, 0x03	; 3
     4fe:	31 83       	std	Z+1, r19	; 0x01
     500:	20 83       	st	Z, r18
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	fc 01       	movw	r30, r24
     508:	ef 55       	subi	r30, 0x5F	; 95
     50a:	fb 4f       	sbci	r31, 0xFB	; 251
     50c:	14 96       	adiw	r26, 0x04	; 4
     50e:	8d 91       	ld	r24, X+
     510:	9c 91       	ld	r25, X
     512:	15 97       	sbiw	r26, 0x05	; 5
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	45 c0       	rjmp	.+138    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     51a:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <programmedAmount>
     51e:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <programmedAmount+0x1>
     522:	18 16       	cp	r1, r24
     524:	19 06       	cpc	r1, r25
     526:	f4 f5       	brge	.+124    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <programmedAmount+0x1>
     52e:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <programmedAmount>
     532:	38 c0       	rjmp	.+112    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     534:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1995>
     538:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1995+0x1>
     53c:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <programmedAmount>
     540:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <programmedAmount+0x1>
     544:	82 17       	cp	r24, r18
     546:	93 07       	cpc	r25, r19
     548:	68 f5       	brcc	.+90     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     54a:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <currentParcourLine+0x1>
     54e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <currentParcourLine>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <runParcour>
     558:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <rp6Data+0xf>
     55c:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <rp6Data+0x10>
     560:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <startDegrees+0x1>
     564:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <startDegrees>
     568:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <parcourLineState>
     56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     56e:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <programmedAmount+0x1>
     572:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <programmedAmount>
     576:	16 c0       	rjmp	.+44     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     578:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     57c:	e5 e8       	ldi	r30, 0x85	; 133
     57e:	f3 e0       	ldi	r31, 0x03	; 3
     580:	11 82       	std	Z+1, r1	; 0x01
     582:	10 82       	st	Z, r1
     584:	13 82       	std	Z+3, r1	; 0x03
     586:	12 82       	std	Z+2, r1	; 0x02
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     58a:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     58e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1995>
     592:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1995+0x1>
     596:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <globalTurnDegree+0x1>
     59a:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <globalTurnDegree>
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <turnToDegree>
     5a4:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	9f ef       	ldi	r25, 0xFF	; 255
     5ac:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     5b0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	d1 2c       	mov	r13, r1
     5bc:	e1 2c       	mov	r14, r1
     5be:	f1 2c       	mov	r15, r1
     5c0:	bb ce       	rjmp	.-650    	; 0x338 <__vector_25+0x130>
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	7f 91       	pop	r23
     5d4:	6f 91       	pop	r22
     5d6:	5f 91       	pop	r21
     5d8:	4f 91       	pop	r20
     5da:	3f 91       	pop	r19
     5dc:	2f 91       	pop	r18
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	0f 90       	pop	r0
     5ec:	0b be       	out	0x3b, r0	; 59
     5ee:	0f 90       	pop	r0
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	0f 90       	pop	r0
     5f4:	1f 90       	pop	r1
     5f6:	18 95       	reti

000005f8 <init_micros>:
     5f8:	e1 e9       	ldi	r30, 0x91	; 145
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	81 60       	ori	r24, 0x01	; 1
     600:	80 83       	st	Z, r24
     602:	e1 e7       	ldi	r30, 0x71	; 113
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	81 60       	ori	r24, 0x01	; 1
     60a:	80 83       	st	Z, r24
     60c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     610:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     614:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <t3TotalOverflow>
     618:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <t3TotalOverflow+0x1>
     61c:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <t3TotalOverflow+0x2>
     620:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <t3TotalOverflow+0x3>
     624:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <t3TotalOverflow+0x4>
     628:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <t3TotalOverflow+0x5>
     62c:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <t3TotalOverflow+0x6>
     630:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <t3TotalOverflow+0x7>
     634:	08 95       	ret

00000636 <__vector_35>:
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <t3TotalOverflow>
     656:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <t3TotalOverflow+0x1>
     65a:	40 91 61 03 	lds	r20, 0x0361	; 0x800361 <t3TotalOverflow+0x2>
     65e:	50 91 62 03 	lds	r21, 0x0362	; 0x800362 <t3TotalOverflow+0x3>
     662:	60 91 63 03 	lds	r22, 0x0363	; 0x800363 <t3TotalOverflow+0x4>
     666:	70 91 64 03 	lds	r23, 0x0364	; 0x800364 <t3TotalOverflow+0x5>
     66a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <t3TotalOverflow+0x6>
     66e:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <t3TotalOverflow+0x7>
     672:	a1 e0       	ldi	r26, 0x01	; 1
     674:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__adddi3_s8>
     678:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <t3TotalOverflow>
     67c:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <t3TotalOverflow+0x1>
     680:	40 93 61 03 	sts	0x0361, r20	; 0x800361 <t3TotalOverflow+0x2>
     684:	50 93 62 03 	sts	0x0362, r21	; 0x800362 <t3TotalOverflow+0x3>
     688:	60 93 63 03 	sts	0x0363, r22	; 0x800363 <t3TotalOverflow+0x4>
     68c:	70 93 64 03 	sts	0x0364, r23	; 0x800364 <t3TotalOverflow+0x5>
     690:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <t3TotalOverflow+0x6>
     694:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <t3TotalOverflow+0x7>
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <micros>:
     6b4:	4f 92       	push	r4
     6b6:	5f 92       	push	r5
     6b8:	6f 92       	push	r6
     6ba:	7f 92       	push	r7
     6bc:	8f 92       	push	r8
     6be:	9f 92       	push	r9
     6c0:	af 92       	push	r10
     6c2:	bf 92       	push	r11
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     6d4:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     6d8:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <t3TotalOverflow>
     6dc:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <t3TotalOverflow+0x1>
     6e0:	40 91 61 03 	lds	r20, 0x0361	; 0x800361 <t3TotalOverflow+0x2>
     6e4:	50 91 62 03 	lds	r21, 0x0362	; 0x800362 <t3TotalOverflow+0x3>
     6e8:	60 91 63 03 	lds	r22, 0x0363	; 0x800363 <t3TotalOverflow+0x4>
     6ec:	70 91 64 03 	lds	r23, 0x0364	; 0x800364 <t3TotalOverflow+0x5>
     6f0:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <t3TotalOverflow+0x6>
     6f4:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <t3TotalOverflow+0x7>
     6f8:	98 2c       	mov	r9, r8
     6fa:	88 24       	eor	r8, r8
     6fc:	99 0c       	add	r9, r9
     6fe:	99 0c       	add	r9, r9
     700:	99 0c       	add	r9, r9
     702:	99 0c       	add	r9, r9
     704:	09 2c       	mov	r0, r9
     706:	00 0c       	add	r0, r0
     708:	aa 08       	sbc	r10, r10
     70a:	bb 08       	sbc	r11, r11
     70c:	bb 20       	and	r11, r11
     70e:	2c f4       	brge	.+10     	; 0x71a <micros+0x66>
     710:	ef ef       	ldi	r30, 0xFF	; 255
     712:	8e 0e       	add	r8, r30
     714:	9e 1e       	adc	r9, r30
     716:	a1 1c       	adc	r10, r1
     718:	b1 1c       	adc	r11, r1
     71a:	25 01       	movw	r4, r10
     71c:	77 24       	eor	r7, r7
     71e:	57 fc       	sbrc	r5, 7
     720:	70 94       	com	r7
     722:	67 2c       	mov	r6, r7
     724:	bb 0c       	add	r11, r11
     726:	88 08       	sbc	r8, r8
     728:	98 2c       	mov	r9, r8
     72a:	54 01       	movw	r10, r8
     72c:	0c e0       	ldi	r16, 0x0C	; 12
     72e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__ashldi3>
     732:	f2 2f       	mov	r31, r18
     734:	e3 2f       	mov	r30, r19
     736:	c4 2e       	mov	r12, r20
     738:	d5 2e       	mov	r13, r21
     73a:	e6 2e       	mov	r14, r22
     73c:	f7 2e       	mov	r15, r23
     73e:	08 2f       	mov	r16, r24
     740:	19 2f       	mov	r17, r25
     742:	24 2d       	mov	r18, r4
     744:	35 2d       	mov	r19, r5
     746:	46 2d       	mov	r20, r6
     748:	57 2d       	mov	r21, r7
     74a:	68 2d       	mov	r22, r8
     74c:	78 2d       	mov	r23, r8
     74e:	88 2d       	mov	r24, r8
     750:	98 2d       	mov	r25, r8
     752:	af 2e       	mov	r10, r31
     754:	be 2e       	mov	r11, r30
     756:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__adddi3>
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	08 95       	ret

00000778 <init_TWI>:
     778:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     77c:	88 e4       	ldi	r24, 0x48	; 72
     77e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     788:	08 95       	ret

0000078a <init_TWI_Timer2>:
     78a:	e1 eb       	ldi	r30, 0xB1	; 177
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	87 60       	ori	r24, 0x07	; 7
     792:	80 83       	st	Z, r24
     794:	e0 e7       	ldi	r30, 0x70	; 112
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	81 60       	ori	r24, 0x01	; 1
     79c:	80 83       	st	Z, r24
     79e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     7a2:	08 95       	ret

000007a4 <init_PWM_Timer4>:
     7a4:	88 e0       	ldi	r24, 0x08	; 8
     7a6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     7aa:	a0 ea       	ldi	r26, 0xA0	; 160
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	1c 92       	st	X, r1
     7b0:	e1 ea       	ldi	r30, 0xA1	; 161
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	10 82       	st	Z, r1
     7b6:	82 e8       	ldi	r24, 0x82	; 130
     7b8:	8c 93       	st	X, r24
     7ba:	81 e1       	ldi	r24, 0x11	; 17
     7bc:	80 83       	st	Z, r24
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	9f e1       	ldi	r25, 0x1F	; 31
     7c2:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     7c6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     7ca:	08 95       	ret

000007cc <init_arduinoData>:
     7cc:	e7 e6       	ldi	r30, 0x67	; 103
     7ce:	f3 e0       	ldi	r31, 0x03	; 3
     7d0:	11 82       	std	Z+1, r1	; 0x01
     7d2:	10 82       	st	Z, r1
     7d4:	13 82       	std	Z+3, r1	; 0x03
     7d6:	12 82       	std	Z+2, r1	; 0x02
     7d8:	08 95       	ret

000007da <init_rp6Data>:
     7da:	e5 e8       	ldi	r30, 0x85	; 133
     7dc:	f3 e0       	ldi	r31, 0x03	; 3
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	10 82       	st	Z, r1
     7e2:	12 82       	std	Z+2, r1	; 0x02
     7e4:	13 82       	std	Z+3, r1	; 0x03
     7e6:	84 e2       	ldi	r24, 0x24	; 36
     7e8:	93 e1       	ldi	r25, 0x13	; 19
     7ea:	95 83       	std	Z+5, r25	; 0x05
     7ec:	84 83       	std	Z+4, r24	; 0x04
     7ee:	88 e2       	ldi	r24, 0x28	; 40
     7f0:	93 e2       	ldi	r25, 0x23	; 35
     7f2:	97 83       	std	Z+7, r25	; 0x07
     7f4:	86 83       	std	Z+6, r24	; 0x06
     7f6:	88 e8       	ldi	r24, 0x88	; 136
     7f8:	93 e1       	ldi	r25, 0x13	; 19
     7fa:	91 87       	std	Z+9, r25	; 0x09
     7fc:	80 87       	std	Z+8, r24	; 0x08
     7fe:	88 ec       	ldi	r24, 0xC8	; 200
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	82 87       	std	Z+10, r24	; 0x0a
     808:	93 87       	std	Z+11, r25	; 0x0b
     80a:	a4 87       	std	Z+12, r26	; 0x0c
     80c:	b5 87       	std	Z+13, r27	; 0x0d
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	86 87       	std	Z+14, r24	; 0x0e
     812:	08 95       	ret

00000814 <__vector_42>:
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	0b b6       	in	r0, 0x3b	; 59
     820:	0f 92       	push	r0
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	6f 93       	push	r22
     840:	7f 93       	push	r23
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
     852:	30 df       	rcall	.-416    	; 0x6b4 <micros>
     854:	a2 2e       	mov	r10, r18
     856:	b3 2e       	mov	r11, r19
     858:	c4 2e       	mov	r12, r20
     85a:	d5 2e       	mov	r13, r21
     85c:	e6 2e       	mov	r14, r22
     85e:	f7 2e       	mov	r15, r23
     860:	08 2f       	mov	r16, r24
     862:	19 2f       	mov	r17, r25
     864:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x2>
     868:	8f 3f       	cpi	r24, 0xFF	; 255
     86a:	09 f0       	breq	.+2      	; 0x86e <__vector_42+0x5a>
     86c:	46 c0       	rjmp	.+140    	; 0x8fa <__vector_42+0xe6>
     86e:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <rp6Data>
     872:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <rp6Data+0x1>
     876:	89 2b       	or	r24, r25
     878:	09 f4       	brne	.+2      	; 0x87c <__vector_42+0x68>
     87a:	3f c0       	rjmp	.+126    	; 0x8fa <__vector_42+0xe6>
     87c:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <microsPassed.2078>
     880:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <microsPassed.2078+0x1>
     884:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <microsPassed.2078+0x2>
     888:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <microsPassed.2078+0x3>
     88c:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <microsPassed.2078+0x4>
     890:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <microsPassed.2078+0x5>
     894:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <microsPassed.2078+0x6>
     898:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <microsPassed.2078+0x7>
     89c:	23 3f       	cpi	r18, 0xF3	; 243
     89e:	31 40       	sbci	r19, 0x01	; 1
     8a0:	41 05       	cpc	r20, r1
     8a2:	51 05       	cpc	r21, r1
     8a4:	61 05       	cpc	r22, r1
     8a6:	71 05       	cpc	r23, r1
     8a8:	81 05       	cpc	r24, r1
     8aa:	91 05       	cpc	r25, r1
     8ac:	31 f1       	breq	.+76     	; 0x8fa <__vector_42+0xe6>
     8ae:	28 f1       	brcs	.+74     	; 0x8fa <__vector_42+0xe6>
     8b0:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <microsPassed.2078>
     8b4:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <microsPassed.2078+0x1>
     8b8:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <microsPassed.2078+0x2>
     8bc:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <microsPassed.2078+0x3>
     8c0:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <microsPassed.2078+0x4>
     8c4:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <microsPassed.2078+0x5>
     8c8:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <microsPassed.2078+0x6>
     8cc:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <microsPassed.2078+0x7>
     8d0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     8d4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     8d8:	89 2b       	or	r24, r25
     8da:	59 f4       	brne	.+22     	; 0x8f2 <__vector_42+0xde>
     8dc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     8e0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     8ec:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__vector_42+0xe6>
     8f2:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     8f6:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     8fa:	dc de       	rcall	.-584    	; 0x6b4 <micros>
     8fc:	82 2e       	mov	r8, r18
     8fe:	93 2e       	mov	r9, r19
     900:	d4 2f       	mov	r29, r20
     902:	c5 2f       	mov	r28, r21
     904:	b6 2f       	mov	r27, r22
     906:	a7 2f       	mov	r26, r23
     908:	f8 2f       	mov	r31, r24
     90a:	e9 2f       	mov	r30, r25
     90c:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <microsPassed.2078>
     910:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <microsPassed.2078+0x1>
     914:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <microsPassed.2078+0x2>
     918:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <microsPassed.2078+0x3>
     91c:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <microsPassed.2078+0x4>
     920:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <microsPassed.2078+0x5>
     924:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <microsPassed.2078+0x6>
     928:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <microsPassed.2078+0x7>
     92c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__subdi3>
     930:	a8 2c       	mov	r10, r8
     932:	b9 2c       	mov	r11, r9
     934:	cd 2e       	mov	r12, r29
     936:	dc 2e       	mov	r13, r28
     938:	eb 2e       	mov	r14, r27
     93a:	fa 2e       	mov	r15, r26
     93c:	0f 2f       	mov	r16, r31
     93e:	1e 2f       	mov	r17, r30
     940:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__adddi3>
     944:	20 93 18 03 	sts	0x0318, r18	; 0x800318 <microsPassed.2078>
     948:	30 93 19 03 	sts	0x0319, r19	; 0x800319 <microsPassed.2078+0x1>
     94c:	40 93 1a 03 	sts	0x031A, r20	; 0x80031a <microsPassed.2078+0x2>
     950:	50 93 1b 03 	sts	0x031B, r21	; 0x80031b <microsPassed.2078+0x3>
     954:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <microsPassed.2078+0x4>
     958:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <microsPassed.2078+0x5>
     95c:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <microsPassed.2078+0x6>
     960:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <microsPassed.2078+0x7>
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	bf 91       	pop	r27
     96e:	af 91       	pop	r26
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	7f 91       	pop	r23
     976:	6f 91       	pop	r22
     978:	5f 91       	pop	r21
     97a:	4f 91       	pop	r20
     97c:	3f 91       	pop	r19
     97e:	2f 91       	pop	r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	0f 90       	pop	r0
     996:	0b be       	out	0x3b, r0	; 59
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <arduinoDataInterpreter>:
     9a2:	a7 e6       	ldi	r26, 0x67	; 103
     9a4:	b3 e0       	ldi	r27, 0x03	; 3
     9a6:	eb e4       	ldi	r30, 0x4B	; 75
     9a8:	f3 e0       	ldi	r31, 0x03	; 3
     9aa:	81 81       	ldd	r24, Z+1	; 0x01
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	98 2f       	mov	r25, r24
     9b0:	88 27       	eor	r24, r24
     9b2:	22 81       	ldd	r18, Z+2	; 0x02
     9b4:	82 0f       	add	r24, r18
     9b6:	91 1d       	adc	r25, r1
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	9c 93       	st	X, r25
     9bc:	8e 93       	st	-X, r24
     9be:	83 81       	ldd	r24, Z+3	; 0x03
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	98 2f       	mov	r25, r24
     9c4:	88 27       	eor	r24, r24
     9c6:	24 81       	ldd	r18, Z+4	; 0x04
     9c8:	82 0f       	add	r24, r18
     9ca:	91 1d       	adc	r25, r1
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	9c 93       	st	X, r25
     9d0:	8e 93       	st	-X, r24
     9d2:	12 97       	sbiw	r26, 0x02	; 2
     9d4:	85 81       	ldd	r24, Z+5	; 0x05
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	98 2f       	mov	r25, r24
     9da:	88 27       	eor	r24, r24
     9dc:	26 81       	ldd	r18, Z+6	; 0x06
     9de:	82 0f       	add	r24, r18
     9e0:	91 1d       	adc	r25, r1
     9e2:	15 96       	adiw	r26, 0x05	; 5
     9e4:	9c 93       	st	X, r25
     9e6:	8e 93       	st	-X, r24
     9e8:	14 97       	sbiw	r26, 0x04	; 4
     9ea:	87 81       	ldd	r24, Z+7	; 0x07
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	98 2f       	mov	r25, r24
     9f0:	88 27       	eor	r24, r24
     9f2:	20 85       	ldd	r18, Z+8	; 0x08
     9f4:	82 0f       	add	r24, r18
     9f6:	91 1d       	adc	r25, r1
     9f8:	17 96       	adiw	r26, 0x07	; 7
     9fa:	9c 93       	st	X, r25
     9fc:	8e 93       	st	-X, r24
     9fe:	16 97       	sbiw	r26, 0x06	; 6
     a00:	81 85       	ldd	r24, Z+9	; 0x09
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	98 2f       	mov	r25, r24
     a06:	88 27       	eor	r24, r24
     a08:	22 85       	ldd	r18, Z+10	; 0x0a
     a0a:	82 0f       	add	r24, r18
     a0c:	91 1d       	adc	r25, r1
     a0e:	19 96       	adiw	r26, 0x09	; 9
     a10:	9c 93       	st	X, r25
     a12:	8e 93       	st	-X, r24
     a14:	18 97       	sbiw	r26, 0x08	; 8
     a16:	08 95       	ret

00000a18 <I2C_receiveInterpreter>:
     a18:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <receiveDataTWI>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	09 f4       	brne	.+2      	; 0xa22 <I2C_receiveInterpreter+0xa>
     a20:	c0 cf       	rjmp	.-128    	; 0x9a2 <arduinoDataInterpreter>
     a22:	08 95       	ret

00000a24 <clearSendData>:
     a24:	e1 e7       	ldi	r30, 0x71	; 113
     a26:	f3 e0       	ldi	r31, 0x03	; 3
     a28:	85 e8       	ldi	r24, 0x85	; 133
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	11 92       	st	Z+, r1
     a2e:	e8 17       	cp	r30, r24
     a30:	f9 07       	cpc	r31, r25
     a32:	e1 f7       	brne	.-8      	; 0xa2c <clearSendData+0x8>
     a34:	08 95       	ret

00000a36 <clearReceiveData>:
     a36:	eb e4       	ldi	r30, 0x4B	; 75
     a38:	f3 e0       	ldi	r31, 0x03	; 3
     a3a:	8f e5       	ldi	r24, 0x5F	; 95
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	11 92       	st	Z+, r1
     a40:	e8 17       	cp	r30, r24
     a42:	f9 07       	cpc	r31, r25
     a44:	e1 f7       	brne	.-8      	; 0xa3e <clearReceiveData+0x8>
     a46:	08 95       	ret

00000a48 <__vector_39>:
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	0b b6       	in	r0, 0x3b	; 59
     a54:	0f 92       	push	r0
     a56:	af 92       	push	r10
     a58:	bf 92       	push	r11
     a5a:	cf 92       	push	r12
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
     a82:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     a86:	80 35       	cpi	r24, 0x50	; 80
     a88:	c1 f0       	breq	.+48     	; 0xaba <__vector_39+0x72>
     a8a:	88 35       	cpi	r24, 0x58	; 88
     a8c:	a9 f1       	breq	.+106    	; 0xaf8 <__vector_39+0xb0>
     a8e:	80 34       	cpi	r24, 0x40	; 64
     a90:	09 f0       	breq	.+2      	; 0xa94 <__vector_39+0x4c>
     a92:	8a c0       	rjmp	.+276    	; 0xba8 <__vector_39+0x160>
     a94:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <compassFlag>
     a98:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <compassFlag+0x1>
     a9c:	89 2b       	or	r24, r25
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__vector_39+0x60>
     aa0:	85 e8       	ldi	r24, 0x85	; 133
     aa2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     aa6:	80 c0       	rjmp	.+256    	; 0xba8 <__vector_39+0x160>
     aa8:	c6 df       	rcall	.-116    	; 0xa36 <clearReceiveData>
     aaa:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <bytecounter.2061+0x1>
     aae:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <bytecounter.2061>
     ab2:	85 ec       	ldi	r24, 0xC5	; 197
     ab4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ab8:	77 c0       	rjmp	.+238    	; 0xba8 <__vector_39+0x160>
     aba:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <bytecounter.2061>
     abe:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <bytecounter.2061+0x1>
     ac2:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ac6:	fc 01       	movw	r30, r24
     ac8:	e5 5b       	subi	r30, 0xB5	; 181
     aca:	fc 4f       	sbci	r31, 0xFC	; 252
     acc:	20 83       	st	Z, r18
     ace:	82 31       	cpi	r24, 0x12	; 18
     ad0:	91 05       	cpc	r25, r1
     ad2:	4c f4       	brge	.+18     	; 0xae6 <__vector_39+0x9e>
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <bytecounter.2061+0x1>
     ada:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <bytecounter.2061>
     ade:	85 ec       	ldi	r24, 0xC5	; 197
     ae0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ae4:	61 c0       	rjmp	.+194    	; 0xba8 <__vector_39+0x160>
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <bytecounter.2061+0x1>
     aec:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <bytecounter.2061>
     af0:	85 e8       	ldi	r24, 0x85	; 133
     af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     af6:	58 c0       	rjmp	.+176    	; 0xba8 <__vector_39+0x160>
     af8:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <compassFlag>
     afc:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <compassFlag+0x1>
     b00:	89 2b       	or	r24, r25
     b02:	71 f4       	brne	.+28     	; 0xb20 <__vector_39+0xd8>
     b04:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b08:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <bytecounter.2061>
     b0c:	f0 91 23 03 	lds	r31, 0x0323	; 0x800323 <bytecounter.2061+0x1>
     b10:	e5 5b       	subi	r30, 0xB5	; 181
     b12:	fc 4f       	sbci	r31, 0xFC	; 252
     b14:	80 83       	st	Z, r24
     b16:	85 e9       	ldi	r24, 0x95	; 149
     b18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b1c:	7d df       	rcall	.-262    	; 0xa18 <I2C_receiveInterpreter>
     b1e:	44 c0       	rjmp	.+136    	; 0xba8 <__vector_39+0x160>
     b20:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b24:	c5 e8       	ldi	r28, 0x85	; 133
     b26:	d3 e0       	ldi	r29, 0x03	; 3
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	03 e0       	ldi	r16, 0x03	; 3
     b38:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__ashldi3>
     b3c:	a2 2e       	mov	r10, r18
     b3e:	b3 2e       	mov	r11, r19
     b40:	c4 2e       	mov	r12, r20
     b42:	d5 2e       	mov	r13, r21
     b44:	e6 2e       	mov	r14, r22
     b46:	f7 2e       	mov	r15, r23
     b48:	e8 2f       	mov	r30, r24
     b4a:	19 2f       	mov	r17, r25
     b4c:	02 e0       	ldi	r16, 0x02	; 2
     b4e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__ashldi3>
     b52:	0e 2f       	mov	r16, r30
     b54:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__subdi3>
     b58:	a2 2e       	mov	r10, r18
     b5a:	b3 2e       	mov	r11, r19
     b5c:	c4 2e       	mov	r12, r20
     b5e:	d5 2e       	mov	r13, r21
     b60:	e6 2e       	mov	r14, r22
     b62:	f7 2e       	mov	r15, r23
     b64:	e8 2f       	mov	r30, r24
     b66:	19 2f       	mov	r17, r25
     b68:	04 e0       	ldi	r16, 0x04	; 4
     b6a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__ashldi3>
     b6e:	0e 2f       	mov	r16, r30
     b70:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__subdi3>
     b74:	aa 24       	eor	r10, r10
     b76:	aa 94       	dec	r10
     b78:	b1 2c       	mov	r11, r1
     b7a:	c1 2c       	mov	r12, r1
     b7c:	d1 2c       	mov	r13, r1
     b7e:	e1 2c       	mov	r14, r1
     b80:	f1 2c       	mov	r15, r1
     b82:	00 e0       	ldi	r16, 0x00	; 0
     b84:	10 e0       	ldi	r17, 0x00	; 0
     b86:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__udivdi3>
     b8a:	2f 87       	std	Y+15, r18	; 0x0f
     b8c:	38 8b       	std	Y+16, r19	; 0x10
     b8e:	49 8b       	std	Y+17, r20	; 0x11
     b90:	5a 8b       	std	Y+18, r21	; 0x12
     b92:	6b 8b       	std	Y+19, r22	; 0x13
     b94:	7c 8b       	std	Y+20, r23	; 0x14
     b96:	8d 8b       	std	Y+21, r24	; 0x15
     b98:	9e 8b       	std	Y+22, r25	; 0x16
     b9a:	85 e9       	ldi	r24, 0x95	; 149
     b9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ba0:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <compassFlag+0x1>
     ba4:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <compassFlag>
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	bf 91       	pop	r27
     bb2:	af 91       	pop	r26
     bb4:	9f 91       	pop	r25
     bb6:	8f 91       	pop	r24
     bb8:	7f 91       	pop	r23
     bba:	6f 91       	pop	r22
     bbc:	5f 91       	pop	r21
     bbe:	4f 91       	pop	r20
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	bf 90       	pop	r11
     bd2:	af 90       	pop	r10
     bd4:	0f 90       	pop	r0
     bd6:	0b be       	out	0x3b, r0	; 59
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <TWIwaitUntilReady>:


void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
     be2:	ec eb       	ldi	r30, 0xBC	; 188
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	88 23       	and	r24, r24
     bea:	ec f7       	brge	.-6      	; 0xbe6 <TWIwaitUntilReady+0x4>
}
     bec:	08 95       	ret

00000bee <checkCode>:


void checkCode(uint8_t code){
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	cf 5f       	subi	r28, 0xFF	; 255
     bf8:	d1 09       	sbc	r29, r1
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     c04:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
	while (!(TWCR & (1 << TWINT)));
}


void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
     c08:	98 7f       	andi	r25, 0xF8	; 248
     c0a:	89 17       	cp	r24, r25
     c0c:	89 f0       	breq	.+34     	; 0xc30 <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     c0e:	8c e0       	ldi	r24, 0x0C	; 12
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	c5 d3       	rcall	.+1930   	; 0x139e <writeString>
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     c14:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     c18:	88 7f       	andi	r24, 0xF8	; 248
     c1a:	40 e1       	ldi	r20, 0x10	; 16
     c1c:	be 01       	movw	r22, r28
     c1e:	6f 5f       	subi	r22, 0xFF	; 255
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__itoa_ncheck>

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
     c28:	ba d3       	rcall	.+1908   	; 0x139e <writeString>
		writeString("\n\n\r");
     c2a:	87 e3       	ldi	r24, 0x37	; 55
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	b7 d3       	rcall	.+1902   	; 0x139e <writeString>
	}
}
     c30:	c1 50       	subi	r28, 0x01	; 1
     c32:	df 4f       	sbci	r29, 0xFF	; 255
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	c8 2f       	mov	r28, r24
     c58:	8b 01       	movw	r16, r22
	
	TWISendStart();
     c5a:	0f 2e       	mov	r0, r31
     c5c:	fc eb       	ldi	r31, 0xBC	; 188
     c5e:	cf 2e       	mov	r12, r31
     c60:	d1 2c       	mov	r13, r1
     c62:	f0 2d       	mov	r31, r0
     c64:	85 ea       	ldi	r24, 0xA5	; 165
     c66:	f6 01       	movw	r30, r12
     c68:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     c6a:	bb df       	rcall	.-138    	; 0xbe2 <TWIwaitUntilReady>
	checkCode(0x08);
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	bf df       	rcall	.-130    	; 0xbee <checkCode>
	
	TWIWrite((address << 1));
     c70:	cc 0f       	add	r28, r28
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c72:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     c76:	85 e8       	ldi	r24, 0x85	; 133
     c78:	f6 01       	movw	r30, r12
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
     c7a:	80 83       	st	Z, r24
	checkCode(0x18);
     c7c:	b2 df       	rcall	.-156    	; 0xbe2 <TWIwaitUntilReady>
     c7e:	88 e1       	ldi	r24, 0x18	; 24
     c80:	b6 df       	rcall	.-148    	; 0xbee <checkCode>
     c82:	e8 01       	movw	r28, r16
     c84:	0c 5e       	subi	r16, 0xEC	; 236
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c88:	0f 2e       	mov	r0, r31
     c8a:	fb eb       	ldi	r31, 0xBB	; 187
     c8c:	af 2e       	mov	r10, r31
     c8e:	b1 2c       	mov	r11, r1
     c90:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     c92:	0f 2e       	mov	r0, r31
     c94:	f5 e8       	ldi	r31, 0x85	; 133
     c96:	ff 2e       	mov	r15, r31
     c98:	f0 2d       	mov	r31, r0
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
     c9a:	89 91       	ld	r24, Y+
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c9c:	f5 01       	movw	r30, r10
	TWISendTransmit();
     c9e:	80 83       	st	Z, r24
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
     ca0:	f6 01       	movw	r30, r12
     ca2:	f0 82       	st	Z, r15
		checkCode(0x28);
     ca4:	9e df       	rcall	.-196    	; 0xbe2 <TWIwaitUntilReady>
     ca6:	88 e2       	ldi	r24, 0x28	; 40
     ca8:	a2 df       	rcall	.-188    	; 0xbee <checkCode>
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
     caa:	c0 17       	cp	r28, r16
     cac:	d1 07       	cpc	r29, r17
     cae:	a9 f7       	brne	.-22     	; 0xc9a <writeToSlave+0x56>
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
		checkCode(0x28);
	}
	
	TWISendStop();
     cb0:	85 e9       	ldi	r24, 0x95	; 149
     cb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	08 95       	ret

00000cca <rp6DataConstructor>:
	arduinoData.distanceDrivenR = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
	arduinoData.totalDistance = (receiveDataTWI[9] << 8) + receiveDataTWI[10];
}


void rp6DataConstructor(){
     cca:	0f 93       	push	r16
     ccc:	cf 93       	push	r28
	clearSendData();
     cce:	aa de       	rcall	.-684    	; 0xa24 <clearSendData>
	
	sendDataTWI[0] = 1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     cd6:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <rp6Data>
     cda:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <rp6Data+0x1>
     cde:	85 36       	cpi	r24, 0x65	; 101
     ce0:	91 05       	cpc	r25, r1
     ce2:	30 f0       	brcs	.+12     	; 0xcf0 <rp6DataConstructor+0x26>
     ce4:	84 e6       	ldi	r24, 0x64	; 100
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <rp6Data+0x1>
     cec:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     cf0:	a1 e7       	ldi	r26, 0x71	; 113
     cf2:	b3 e0       	ldi	r27, 0x03	; 3
     cf4:	e5 e8       	ldi	r30, 0x85	; 133
     cf6:	f3 e0       	ldi	r31, 0x03	; 3
     cf8:	80 81       	ld	r24, Z
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	8c 93       	st	X, r24
     cfe:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	8c 93       	st	X, r24
     d08:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     d0a:	83 81       	ldd	r24, Z+3	; 0x03
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	13 96       	adiw	r26, 0x03	; 3
     d10:	8c 93       	st	X, r24
     d12:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     d14:	84 81       	ldd	r24, Z+4	; 0x04
     d16:	95 81       	ldd	r25, Z+5	; 0x05
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	9c 93       	st	X, r25
     d1c:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     d1e:	15 96       	adiw	r26, 0x05	; 5
     d20:	8c 93       	st	X, r24
     d22:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	97 81       	ldd	r25, Z+7	; 0x07
     d28:	16 96       	adiw	r26, 0x06	; 6
     d2a:	9c 93       	st	X, r25
     d2c:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     d2e:	17 96       	adiw	r26, 0x07	; 7
     d30:	8c 93       	st	X, r24
     d32:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     d34:	80 85       	ldd	r24, Z+8	; 0x08
     d36:	91 85       	ldd	r25, Z+9	; 0x09
     d38:	18 96       	adiw	r26, 0x08	; 8
     d3a:	9c 93       	st	X, r25
     d3c:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     d3e:	19 96       	adiw	r26, 0x09	; 9
     d40:	8c 93       	st	X, r24
     d42:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     d44:	82 85       	ldd	r24, Z+10	; 0x0a
     d46:	93 85       	ldd	r25, Z+11	; 0x0b
     d48:	1a 96       	adiw	r26, 0x0a	; 10
     d4a:	9c 93       	st	X, r25
     d4c:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     d4e:	1b 96       	adiw	r26, 0x0b	; 11
     d50:	8c 93       	st	X, r24
     d52:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     d54:	86 85       	ldd	r24, Z+14	; 0x0e
     d56:	1c 96       	adiw	r26, 0x0c	; 12
     d58:	8c 93       	st	X, r24
     d5a:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     d5c:	c7 85       	ldd	r28, Z+15	; 0x0f
     d5e:	30 89       	ldd	r19, Z+16	; 0x10
     d60:	41 89       	ldd	r20, Z+17	; 0x11
     d62:	52 89       	ldd	r21, Z+18	; 0x12
     d64:	63 89       	ldd	r22, Z+19	; 0x13
     d66:	74 89       	ldd	r23, Z+20	; 0x14
     d68:	2c 2f       	mov	r18, r28
     d6a:	85 89       	ldd	r24, Z+21	; 0x15
     d6c:	96 89       	ldd	r25, Z+22	; 0x16
     d6e:	08 e0       	ldi	r16, 0x08	; 8
     d70:	d2 d7       	rcall	.+4004   	; 0x1d16 <__lshrdi3>
     d72:	1d 96       	adiw	r26, 0x0d	; 13
     d74:	2c 93       	st	X, r18
     d76:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     d78:	1e 96       	adiw	r26, 0x0e	; 14
     d7a:	cc 93       	st	X, r28
     d7c:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     d7e:	1f 96       	adiw	r26, 0x0f	; 15
     d80:	1c 92       	st	X, r1
     d82:	1f 97       	sbiw	r26, 0x0f	; 15
     d84:	50 96       	adiw	r26, 0x10	; 16
     d86:	1c 92       	st	X, r1
     d88:	50 97       	sbiw	r26, 0x10	; 16
     d8a:	51 96       	adiw	r26, 0x11	; 17
     d8c:	1c 92       	st	X, r1
     d8e:	51 97       	sbiw	r26, 0x11	; 17
     d90:	52 96       	adiw	r26, 0x12	; 18
     d92:	1c 92       	st	X, r1
     d94:	52 97       	sbiw	r26, 0x12	; 18
     d96:	53 96       	adiw	r26, 0x13	; 19
     d98:	1c 92       	st	X, r1
     d9a:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     d9c:	bd 01       	movw	r22, r26
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	51 df       	rcall	.-350    	; 0xc44 <writeToSlave>
}
     da2:	cf 91       	pop	r28
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <readFromCompass>:
	TWISendStop();
	
}


void readFromCompass(){
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
	compassFlag = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <compassFlag+0x1>
     dbc:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <compassFlag>
	TWISendStart();
     dc0:	cc eb       	ldi	r28, 0xBC	; 188
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
     dc4:	05 ea       	ldi	r16, 0xA5	; 165
     dc6:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     dc8:	0c df       	rcall	.-488    	; 0xbe2 <TWIwaitUntilReady>
	checkCode(0x08);
     dca:	88 e0       	ldi	r24, 0x08	; 8
     dcc:	10 df       	rcall	.-480    	; 0xbee <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     dce:	0f 2e       	mov	r0, r31
     dd0:	fb eb       	ldi	r31, 0xBB	; 187
     dd2:	ef 2e       	mov	r14, r31
     dd4:	f1 2c       	mov	r15, r1
     dd6:	f0 2d       	mov	r31, r0
     dd8:	80 ec       	ldi	r24, 0xC0	; 192
     dda:	f7 01       	movw	r30, r14
     ddc:	80 83       	st	Z, r24
	TWISendTransmit();
     dde:	15 e8       	ldi	r17, 0x85	; 133
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite(0xC0);
	TWIwaitUntilReady();
     de0:	18 83       	st	Y, r17
	checkCode(0x18);
     de2:	ff de       	rcall	.-514    	; 0xbe2 <TWIwaitUntilReady>
     de4:	88 e1       	ldi	r24, 0x18	; 24
     de6:	03 df       	rcall	.-506    	; 0xbee <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	f7 01       	movw	r30, r14
	TWISendTransmit();
     dec:	80 83       	st	Z, r24
	TWIWrite(0xC0);
	TWIwaitUntilReady();
	checkCode(0x18);
	
	TWIWrite(1);
	TWIwaitUntilReady();
     dee:	18 83       	st	Y, r17
	checkCode(0x28);
     df0:	f8 de       	rcall	.-528    	; 0xbe2 <TWIwaitUntilReady>
     df2:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     df4:	fc de       	rcall	.-520    	; 0xbee <checkCode>
	TWIwaitUntilReady();
     df6:	08 83       	st	Y, r16
	checkCode(0x10);
     df8:	f4 de       	rcall	.-536    	; 0xbe2 <TWIwaitUntilReady>
     dfa:	80 e1       	ldi	r24, 0x10	; 16
     dfc:	f8 de       	rcall	.-528    	; 0xbee <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     dfe:	81 ec       	ldi	r24, 0xC1	; 193
     e00:	f7 01       	movw	r30, r14
     e02:	80 83       	st	Z, r24
	TWISendTransmit();
     e04:	18 83       	st	Y, r17
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x10);
	
	TWIWrite(0xC1);
	TWIwaitUntilReady();
     e06:	ed de       	rcall	.-550    	; 0xbe2 <TWIwaitUntilReady>
     e08:	df 91       	pop	r29
}
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	08 95       	ret

00000e16 <readFromSlave>:
     e16:	0f 93       	push	r16


void readFromSlave(uint8_t address){
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	c8 2f       	mov	r28, r24
	
	TWISendStart();
     e1e:	0c eb       	ldi	r16, 0xBC	; 188
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	85 ea       	ldi	r24, 0xA5	; 165
     e24:	f8 01       	movw	r30, r16
     e26:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     e28:	dc de       	rcall	.-584    	; 0xbe2 <TWIwaitUntilReady>
	checkCode(0x08);
     e2a:	88 e0       	ldi	r24, 0x08	; 8
     e2c:	e0 de       	rcall	.-576    	; 0xbee <checkCode>
	
	TWIWrite( (address << 1) + 1 );
     e2e:	cc 0f       	add	r28, r28
     e30:	cf 5f       	subi	r28, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     e32:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     e36:	85 e8       	ldi	r24, 0x85	; 133
     e38:	f8 01       	movw	r30, r16
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite( (address << 1) + 1 );
	TWIwaitUntilReady();
     e3a:	80 83       	st	Z, r24
     e3c:	d2 de       	rcall	.-604    	; 0xbe2 <TWIwaitUntilReady>
	
}
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <__vector_15>:
		break;
	}
}


ISR(TIMER2_OVF_vect){
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	0b b6       	in	r0, 0x3b	; 59
     e52:	0f 92       	push	r0
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 4){
     e6c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <counter.2072>
     e70:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <counter.2072+0x1>
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	91 05       	cpc	r25, r1
     e78:	11 f4       	brne	.+4      	; 0xe7e <__vector_15+0x38>
		rp6DataConstructor();
     e7a:	27 df       	rcall	.-434    	; 0xcca <rp6DataConstructor>
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <__vector_15+0x52>
	}else if(counter == 8){
     e7e:	88 30       	cpi	r24, 0x08	; 8
     e80:	91 05       	cpc	r25, r1
		readFromCompass();
     e82:	11 f4       	brne	.+4      	; 0xe88 <__vector_15+0x42>
     e84:	91 df       	rcall	.-222    	; 0xda8 <readFromCompass>
     e86:	08 c0       	rjmp	.+16     	; 0xe98 <__vector_15+0x52>
	}else if(counter >= 12){
     e88:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromSlave(RP6_ADDRESS);
     e8a:	34 f0       	brlt	.+12     	; 0xe98 <__vector_15+0x52>
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	c3 df       	rcall	.-122    	; 0xe16 <readFromSlave>
		counter = 0;
     e90:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter.2072+0x1>
     e94:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <counter.2072>
	}
	
	counter++;
     e98:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <counter.2072>
     e9c:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <counter.2072+0x1>
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <counter.2072+0x1>
     ea6:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <counter.2072>
}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0b be       	out	0x3b, r0	; 59
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <turnSignal>:
	TWIwaitUntilReady();
	
}


void turnSignal(){
     ed0:	4f 92       	push	r4
     ed2:	5f 92       	push	r5
     ed4:	6f 92       	push	r6
     ed6:	7f 92       	push	r7
     ed8:	8f 92       	push	r8
     eda:	9f 92       	push	r9
     edc:	af 92       	push	r10
     ede:	bf 92       	push	r11
     ee0:	cf 92       	push	r12
     ee2:	df 92       	push	r13
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
     eec:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     eee:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     ef0:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <rp6Data+0x3>
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	a9 f5       	brne	.+106    	; 0xf62 <turnSignal+0x92>
		if(turnSignalStart < micros()){
     ef8:	40 90 14 03 	lds	r4, 0x0314	; 0x800314 <__data_end>
     efc:	50 90 15 03 	lds	r5, 0x0315	; 0x800315 <__data_end+0x1>
     f00:	60 90 16 03 	lds	r6, 0x0316	; 0x800316 <__data_end+0x2>
     f04:	70 90 17 03 	lds	r7, 0x0317	; 0x800317 <__data_end+0x3>
     f08:	d5 db       	rcall	.-2134   	; 0x6b4 <micros>
     f0a:	f2 2f       	mov	r31, r18
     f0c:	e3 2f       	mov	r30, r19
     f0e:	c4 2e       	mov	r12, r20
     f10:	d5 2e       	mov	r13, r21
     f12:	e6 2e       	mov	r14, r22
     f14:	f7 2e       	mov	r15, r23
     f16:	08 2f       	mov	r16, r24
     f18:	19 2f       	mov	r17, r25
     f1a:	24 2d       	mov	r18, r4
     f1c:	35 2d       	mov	r19, r5
     f1e:	46 2d       	mov	r20, r6
     f20:	57 2d       	mov	r21, r7
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	af 2e       	mov	r10, r31
     f2c:	be 2e       	mov	r11, r30
     f2e:	2d d7       	rcall	.+3674   	; 0x1d8a <__cmpdi2>
     f30:	c0 f4       	brcc	.+48     	; 0xf62 <turnSignal+0x92>
			PORTC ^= (1 << PINC1);	
     f32:	98 b1       	in	r25, 0x08	; 8
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
     f38:	88 b9       	out	0x08, r24	; 8
     f3a:	bc db       	rcall	.-2184   	; 0x6b4 <micros>
     f3c:	82 2e       	mov	r8, r18
     f3e:	93 2e       	mov	r9, r19
     f40:	a4 2e       	mov	r10, r20
     f42:	b5 2e       	mov	r11, r21
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	88 0e       	add	r8, r24
     f48:	81 ea       	ldi	r24, 0xA1	; 161
     f4a:	98 1e       	adc	r9, r24
     f4c:	87 e0       	ldi	r24, 0x07	; 7
     f4e:	a8 1e       	adc	r10, r24
     f50:	b1 1c       	adc	r11, r1
     f52:	80 92 14 03 	sts	0x0314, r8	; 0x800314 <__data_end>
     f56:	90 92 15 03 	sts	0x0315, r9	; 0x800315 <__data_end+0x1>
     f5a:	a0 92 16 03 	sts	0x0316, r10	; 0x800316 <__data_end+0x2>
     f5e:	b0 92 17 03 	sts	0x0317, r11	; 0x800317 <__data_end+0x3>
		}
	}
	if(rp6Data.turnDirection == 1){
     f62:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <rp6Data+0x3>
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	a1 f5       	brne	.+104    	; 0xfd2 <turnSignal+0x102>
		if(turnSignalStart < micros()){
     f6a:	40 90 14 03 	lds	r4, 0x0314	; 0x800314 <__data_end>
     f6e:	50 90 15 03 	lds	r5, 0x0315	; 0x800315 <__data_end+0x1>
     f72:	60 90 16 03 	lds	r6, 0x0316	; 0x800316 <__data_end+0x2>
     f76:	70 90 17 03 	lds	r7, 0x0317	; 0x800317 <__data_end+0x3>
     f7a:	9c db       	rcall	.-2248   	; 0x6b4 <micros>
     f7c:	f2 2f       	mov	r31, r18
     f7e:	e3 2f       	mov	r30, r19
     f80:	c4 2e       	mov	r12, r20
     f82:	d5 2e       	mov	r13, r21
     f84:	e6 2e       	mov	r14, r22
     f86:	f7 2e       	mov	r15, r23
     f88:	08 2f       	mov	r16, r24
     f8a:	19 2f       	mov	r17, r25
     f8c:	24 2d       	mov	r18, r4
     f8e:	35 2d       	mov	r19, r5
     f90:	46 2d       	mov	r20, r6
     f92:	57 2d       	mov	r21, r7
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	af 2e       	mov	r10, r31
     f9e:	be 2e       	mov	r11, r30
     fa0:	f4 d6       	rcall	.+3560   	; 0x1d8a <__cmpdi2>
     fa2:	b8 f4       	brcc	.+46     	; 0xfd2 <turnSignal+0x102>
			PORTD ^= (1 << PIND7);
     fa4:	8b b1       	in	r24, 0x0b	; 11
     fa6:	80 58       	subi	r24, 0x80	; 128
     fa8:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     faa:	84 db       	rcall	.-2296   	; 0x6b4 <micros>
     fac:	82 2e       	mov	r8, r18
     fae:	93 2e       	mov	r9, r19
     fb0:	a4 2e       	mov	r10, r20
     fb2:	b5 2e       	mov	r11, r21
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	88 0e       	add	r8, r24
     fb8:	81 ea       	ldi	r24, 0xA1	; 161
     fba:	98 1e       	adc	r9, r24
     fbc:	87 e0       	ldi	r24, 0x07	; 7
     fbe:	a8 1e       	adc	r10, r24
     fc0:	b1 1c       	adc	r11, r1
     fc2:	80 92 14 03 	sts	0x0314, r8	; 0x800314 <__data_end>
     fc6:	90 92 15 03 	sts	0x0315, r9	; 0x800315 <__data_end+0x1>
     fca:	a0 92 16 03 	sts	0x0316, r10	; 0x800316 <__data_end+0x2>
     fce:	b0 92 17 03 	sts	0x0317, r11	; 0x800317 <__data_end+0x3>
     fd2:	1f 91       	pop	r17
		}
	}
}
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	9f 90       	pop	r9
     fe4:	8f 90       	pop	r8
     fe6:	7f 90       	pop	r7
     fe8:	6f 90       	pop	r6
     fea:	5f 90       	pop	r5
     fec:	4f 90       	pop	r4
     fee:	08 95       	ret

00000ff0 <main>:
     ff0:	cf 93       	push	r28
		}
	}
}
*/

int main(void){
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	27 97       	sbiw	r28, 0x07	; 7
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
uint8_t parcourLineState = 0;
void hardcoreParcour();

//Other functions ---------------------------------
void init_interrupt(){
	sei();									//Enable global interrupts
    1004:	78 94       	sei
*/

int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
    1006:	f8 da       	rcall	.-2576   	; 0x5f8 <init_micros>
	init_USART();
    1008:	e9 d8       	rcall	.-3630   	; 0x1dc <init_USART>
	init_TWI();
    100a:	b6 db       	rcall	.-2196   	; 0x778 <init_TWI>
	init_TWI_Timer2();
    100c:	be db       	rcall	.-2180   	; 0x78a <init_TWI_Timer2>
	init_PWM_Timer4();
    100e:	ca db       	rcall	.-2156   	; 0x7a4 <init_PWM_Timer4>
	init_rp6Data();
    1010:	e4 db       	rcall	.-2104   	; 0x7da <init_rp6Data>
    1012:	dc db       	rcall	.-2120   	; 0x7cc <init_arduinoData>
	init_arduinoData();
    1014:	f4 d1       	rcall	.+1000   	; 0x13fe <initTimer>
    1016:	e2 d8       	rcall	.-3644   	; 0x1dc <init_USART>
	initTimer();
    1018:	5b df       	rcall	.-330    	; 0xed0 <turnSignal>
    101a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <turnToDegree>
	init_USART();
    101e:	88 23       	and	r24, r24
	//-----------------------
	
	while (1){
		
		turnSignal();
    1020:	09 f4       	brne	.+2      	; 0x1024 <main+0x34>
    1022:	3e c0       	rjmp	.+124    	; 0x10a0 <main+0xb0>
		if(turnToDegree){
    1024:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <rp6Data+0xf>
    1028:	e9 83       	std	Y+1, r30	; 0x01
    102a:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <rp6Data+0x10>
			if(!(rp6Data.compassAngle >= (globalTurnDegree - 15) && rp6Data.compassAngle <= (globalTurnDegree + 15))){
    102e:	fa 83       	std	Y+2, r31	; 0x02
    1030:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <rp6Data+0x11>
    1034:	eb 83       	std	Y+3, r30	; 0x03
    1036:	f0 91 97 03 	lds	r31, 0x0397	; 0x800397 <rp6Data+0x12>
    103a:	fc 83       	std	Y+4, r31	; 0x04
    103c:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <rp6Data+0x13>
    1040:	ef 83       	std	Y+7, r30	; 0x07
    1042:	f0 91 99 03 	lds	r31, 0x0399	; 0x800399 <rp6Data+0x14>
    1046:	fd 83       	std	Y+5, r31	; 0x05
    1048:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <rp6Data+0x15>
    104c:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <rp6Data+0x16>
    1050:	e0 91 4d 09 	lds	r30, 0x094D	; 0x80094d <globalTurnDegree>
    1054:	f0 91 4e 09 	lds	r31, 0x094E	; 0x80094e <globalTurnDegree+0x1>
    1058:	cf 01       	movw	r24, r30
    105a:	0f 97       	sbiw	r24, 0x0f	; 15
    105c:	1c 01       	movw	r2, r24
    105e:	29 81       	ldd	r18, Y+1	; 0x01
    1060:	3a 81       	ldd	r19, Y+2	; 0x02
    1062:	4b 81       	ldd	r20, Y+3	; 0x03
    1064:	5c 81       	ldd	r21, Y+4	; 0x04
    1066:	6f 81       	ldd	r22, Y+7	; 0x07
    1068:	7d 81       	ldd	r23, Y+5	; 0x05
    106a:	8b 2f       	mov	r24, r27
    106c:	9a 2f       	mov	r25, r26
    106e:	a2 2c       	mov	r10, r2
    1070:	b3 2c       	mov	r11, r3
    1072:	c1 2c       	mov	r12, r1
    1074:	d1 2c       	mov	r13, r1
    1076:	e1 2c       	mov	r14, r1
    1078:	f1 2c       	mov	r15, r1
    107a:	00 e0       	ldi	r16, 0x00	; 0
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	85 d6       	rcall	.+3338   	; 0x1d8a <__cmpdi2>
    1080:	38 f0       	brcs	.+14     	; 0x1090 <main+0xa0>
    1082:	3f 96       	adiw	r30, 0x0f	; 15
    1084:	1f 01       	movw	r2, r30
    1086:	ae 2e       	mov	r10, r30
    1088:	b3 2c       	mov	r11, r3
    108a:	7f d6       	rcall	.+3326   	; 0x1d8a <__cmpdi2>
    108c:	29 f0       	breq	.+10     	; 0x1098 <main+0xa8>
    108e:	20 f0       	brcs	.+8      	; 0x1098 <main+0xa8>
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <rp6Data+0x3>
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <main+0xb0>
    1098:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <rp6Data+0x3>
			rp6Data.turnDirection = 1;	
    109c:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <turnToDegree>
    10a0:	40 90 47 03 	lds	r4, 0x0347	; 0x800347 <ultrasonicSensorTimer>
			}else{
			rp6Data.turnDirection = 0;	
			turnToDegree = 0;
    10a4:	50 90 48 03 	lds	r5, 0x0348	; 0x800348 <ultrasonicSensorTimer+0x1>
		}
		if(runParcour){
			hardcoreParcour();
		}
		
		if (ultrasonicSensorTimer < micros()) {
    10a8:	60 90 49 03 	lds	r6, 0x0349	; 0x800349 <ultrasonicSensorTimer+0x2>
    10ac:	70 90 4a 03 	lds	r7, 0x034A	; 0x80034a <ultrasonicSensorTimer+0x3>
    10b0:	01 db       	rcall	.-2558   	; 0x6b4 <micros>
    10b2:	f2 2f       	mov	r31, r18
    10b4:	e3 2f       	mov	r30, r19
    10b6:	c4 2e       	mov	r12, r20
    10b8:	d5 2e       	mov	r13, r21
    10ba:	e6 2e       	mov	r14, r22
    10bc:	f7 2e       	mov	r15, r23
    10be:	08 2f       	mov	r16, r24
    10c0:	19 2f       	mov	r17, r25
    10c2:	24 2d       	mov	r18, r4
    10c4:	35 2d       	mov	r19, r5
    10c6:	46 2d       	mov	r20, r6
    10c8:	57 2d       	mov	r21, r7
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	af 2e       	mov	r10, r31
    10d4:	be 2e       	mov	r11, r30
    10d6:	59 d6       	rcall	.+3250   	; 0x1d8a <__cmpdi2>
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <main+0xec>
    10da:	91 c0       	rjmp	.+290    	; 0x11fe <main+0x20e>
    10dc:	8b e3       	ldi	r24, 0x3B	; 59
			writeString("\f\r");
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	5e d1       	rcall	.+700    	; 0x139e <writeString>
    10e2:	8e e3       	ldi	r24, 0x3E	; 62
			writeString("Distance to object: ");
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	5b d1       	rcall	.+694    	; 0x139e <writeString>
    10e8:	94 d1       	rcall	.+808    	; 0x1412 <ultrasonicSensor>
			writeInt(ultrasonicSensor());
    10ea:	6e d1       	rcall	.+732    	; 0x13c8 <writeInt>
    10ec:	83 e5       	ldi	r24, 0x53	; 83
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	56 d1       	rcall	.+684    	; 0x139e <writeString>
			writeString("mm\n\rCompass Angle: ");
    10f2:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <rp6Data+0xf>
    10f6:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <rp6Data+0x10>
			writeInt(rp6Data.compassAngle);
    10fa:	66 d1       	rcall	.+716    	; 0x13c8 <writeInt>
    10fc:	87 e6       	ldi	r24, 0x67	; 103
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	4e d1       	rcall	.+668    	; 0x139e <writeString>
    1102:	80 e7       	ldi	r24, 0x70	; 112
			writeString(" degrees");
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	4b d1       	rcall	.+662    	; 0x139e <writeString>
    1108:	e5 e8       	ldi	r30, 0x85	; 133
			writeString("\n\n\rSpeed: ");
    110a:	f3 e0       	ldi	r31, 0x03	; 3
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
			writeInt(rp6Data.driveSpeed);
    1110:	5b d1       	rcall	.+694    	; 0x13c8 <writeInt>
    1112:	8b e7       	ldi	r24, 0x7B	; 123
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	43 d1       	rcall	.+646    	; 0x139e <writeString>
    1118:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x2>
			writeString("%\n\n\rDirection: ");
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	21 f4       	brne	.+8      	; 0x1128 <main+0x138>
    1120:	8b e8       	ldi	r24, 0x8B	; 139
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	3c d1       	rcall	.+632    	; 0x139e <writeString>
    1126:	0b c0       	rjmp	.+22     	; 0x113e <main+0x14e>
    1128:	81 11       	cpse	r24, r1
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <main+0x144>
    112c:	85 e9       	ldi	r24, 0x95	; 149
    112e:	92 e0       	ldi	r25, 0x02	; 2
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
    1130:	36 d1       	rcall	.+620    	; 0x139e <writeString>
    1132:	05 c0       	rjmp	.+10     	; 0x113e <main+0x14e>
    1134:	8f 3f       	cpi	r24, 0xFF	; 255
    1136:	19 f4       	brne	.+6      	; 0x113e <main+0x14e>
    1138:	82 ea       	ldi	r24, 0xA2	; 162
    113a:	92 e0       	ldi	r25, 0x02	; 2
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
    113c:	30 d1       	rcall	.+608    	; 0x139e <writeString>
    113e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <rp6Data+0x3>
    1142:	8f 3f       	cpi	r24, 0xFF	; 255
			if(rp6Data.turnDirection == -1) writeString("turning left");
    1144:	21 f4       	brne	.+8      	; 0x114e <main+0x15e>
    1146:	8e ea       	ldi	r24, 0xAE	; 174
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	29 d1       	rcall	.+594    	; 0x139e <writeString>
    114c:	0b c0       	rjmp	.+22     	; 0x1164 <main+0x174>
    114e:	81 11       	cpse	r24, r1
    1150:	04 c0       	rjmp	.+8      	; 0x115a <main+0x16a>
			else if(rp6Data.turnDirection == 0) writeString("going straight");
    1152:	8b eb       	ldi	r24, 0xBB	; 187
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	23 d1       	rcall	.+582    	; 0x139e <writeString>
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <main+0x174>
    115a:	81 30       	cpi	r24, 0x01	; 1
			else if(rp6Data.turnDirection == 1) writeString("turning right");
    115c:	19 f4       	brne	.+6      	; 0x1164 <main+0x174>
    115e:	8a ec       	ldi	r24, 0xCA	; 202
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	1d d1       	rcall	.+570    	; 0x139e <writeString>
    1164:	88 ed       	ldi	r24, 0xD8	; 216
			writeString("\n\rAcceleration rate: ");
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	1a d1       	rcall	.+564    	; 0x139e <writeString>
    116a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <rp6Data+0x4>
			writeInt(rp6Data.accelerationRate);
    116e:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <rp6Data+0x5>
    1172:	2a d1       	rcall	.+596    	; 0x13c8 <writeInt>
    1174:	8e ee       	ldi	r24, 0xEE	; 238
    1176:	92 e0       	ldi	r25, 0x02	; 2
			writeString("\n\rTurn rate: ");
    1178:	12 d1       	rcall	.+548    	; 0x139e <writeString>
    117a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rp6Data+0x6>
    117e:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <rp6Data+0x7>
			writeInt(rp6Data.turnRate);
    1182:	22 d1       	rcall	.+580    	; 0x13c8 <writeInt>
    1184:	8c ef       	ldi	r24, 0xFC	; 252
    1186:	92 e0       	ldi	r25, 0x02	; 2
    1188:	0a d1       	rcall	.+532    	; 0x139e <writeString>
    118a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
			
			writeString("\n\n\rCommand: ");
    118e:	ff d0       	rcall	.+510    	; 0x138e <writeChar>
    1190:	89 e0       	ldi	r24, 0x09	; 9
			writeChar(USARTcommand);
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	04 d1       	rcall	.+520    	; 0x139e <writeString>
    1196:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
			writeString("\n\rValue: ");			
    119a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    119e:	99 23       	and	r25, r25
    11a0:	ac f0       	brlt	.+42     	; 0x11cc <main+0x1dc>
			if(USARTinputPos >= 0){
    11a2:	0c e9       	ldi	r16, 0x9C	; 156
    11a4:	13 e0       	ldi	r17, 0x03	; 3
    11a6:	1e 82       	std	Y+6, r1	; 0x06
    11a8:	1d 82       	std	Y+5, r1	; 0x05
    11aa:	f8 01       	movw	r30, r16
    11ac:	81 91       	ld	r24, Z+
    11ae:	8f 01       	movw	r16, r30
    11b0:	ee d0       	rcall	.+476    	; 0x138e <writeChar>
    11b2:	2d 81       	ldd	r18, Y+5	; 0x05
    11b4:	3e 81       	ldd	r19, Y+6	; 0x06
				for(int i = 0; i <= USARTinputPos; i++){
					writeChar(USARTinput[i]);
    11b6:	2f 5f       	subi	r18, 0xFF	; 255
    11b8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ba:	3e 83       	std	Y+6, r19	; 0x06
    11bc:	2d 83       	std	Y+5, r18	; 0x05
    11be:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
			
			writeString("\n\n\rCommand: ");
			writeChar(USARTcommand);
			writeString("\n\rValue: ");			
			if(USARTinputPos >= 0){
				for(int i = 0; i <= USARTinputPos; i++){
    11c2:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    11c6:	82 17       	cp	r24, r18
    11c8:	93 07       	cpc	r25, r19
    11ca:	7c f7       	brge	.-34     	; 0x11aa <main+0x1ba>
    11cc:	73 da       	rcall	.-2842   	; 0x6b4 <micros>
    11ce:	82 2e       	mov	r8, r18
    11d0:	93 2e       	mov	r9, r19
    11d2:	a4 2e       	mov	r10, r20
    11d4:	b5 2e       	mov	r11, r21
    11d6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ultrasonicSensorSpeed>
					writeChar(USARTinput[i]);
				}
			}
			
			ultrasonicSensorTimer = micros() + ultrasonicSensorSpeed;
    11da:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ultrasonicSensorSpeed+0x1>
    11de:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ultrasonicSensorSpeed+0x2>
    11e2:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ultrasonicSensorSpeed+0x3>
    11e6:	88 0e       	add	r8, r24
    11e8:	99 1e       	adc	r9, r25
    11ea:	aa 1e       	adc	r10, r26
    11ec:	bb 1e       	adc	r11, r27
    11ee:	80 92 47 03 	sts	0x0347, r8	; 0x800347 <ultrasonicSensorTimer>
    11f2:	90 92 48 03 	sts	0x0348, r9	; 0x800348 <ultrasonicSensorTimer+0x1>
    11f6:	a0 92 49 03 	sts	0x0349, r10	; 0x800349 <ultrasonicSensorTimer+0x2>
    11fa:	b0 92 4a 03 	sts	0x034A, r11	; 0x80034a <ultrasonicSensorTimer+0x3>
    11fe:	40 90 43 03 	lds	r4, 0x0343	; 0x800343 <stoptimer>
    1202:	50 90 44 03 	lds	r5, 0x0344	; 0x800344 <stoptimer+0x1>
    1206:	60 90 45 03 	lds	r6, 0x0345	; 0x800345 <stoptimer+0x2>
		}
		
		if(stoptimer < micros()){
    120a:	70 90 46 03 	lds	r7, 0x0346	; 0x800346 <stoptimer+0x3>
    120e:	52 da       	rcall	.-2908   	; 0x6b4 <micros>
    1210:	f2 2f       	mov	r31, r18
    1212:	e3 2f       	mov	r30, r19
    1214:	c4 2e       	mov	r12, r20
    1216:	d5 2e       	mov	r13, r21
    1218:	e6 2e       	mov	r14, r22
    121a:	f7 2e       	mov	r15, r23
    121c:	08 2f       	mov	r16, r24
    121e:	19 2f       	mov	r17, r25
    1220:	24 2d       	mov	r18, r4
    1222:	35 2d       	mov	r19, r5
    1224:	46 2d       	mov	r20, r6
    1226:	57 2d       	mov	r21, r7
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	af 2e       	mov	r10, r31
    1232:	be 2e       	mov	r11, r30
    1234:	aa d5       	rcall	.+2900   	; 0x1d8a <__cmpdi2>
    1236:	08 f0       	brcs	.+2      	; 0x123a <main+0x24a>
    1238:	ef ce       	rjmp	.-546    	; 0x1018 <main+0x28>
    123a:	e7 e6       	ldi	r30, 0x67	; 103
    123c:	f3 e0       	ldi	r31, 0x03	; 3
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	89 2b       	or	r24, r25
    1244:	21 f0       	breq	.+8      	; 0x124e <main+0x25e>
    1246:	e5 e8       	ldi	r30, 0x85	; 133
			
			if(arduinoData.bumperFlag) {
    1248:	f3 e0       	ldi	r31, 0x03	; 3
    124a:	11 82       	std	Z+1, r1	; 0x01
    124c:	10 82       	st	Z, r1
    124e:	e1 d0       	rcall	.+450    	; 0x1412 <ultrasonicSensor>
    1250:	81 39       	cpi	r24, 0x91	; 145
    1252:	f1 e0       	ldi	r31, 0x01	; 1
				rp6Data.driveSpeed = 0;
    1254:	9f 07       	cpc	r25, r31
    1256:	80 f0       	brcs	.+32     	; 0x1278 <main+0x288>
    1258:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <stopState.2032>
			}
			
			uint16_t distance = ultrasonicSensor();
    125c:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <stopState.2032+0x1>
			static int stopState = 0;
			static uint16_t tempAcceleration;
			
			if(distance > 400 && stopState == 1){
    1260:	21 30       	cpi	r18, 0x01	; 1
    1262:	31 05       	cpc	r19, r1
    1264:	49 f4       	brne	.+18     	; 0x1278 <main+0x288>
    1266:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <tempAcceleration.2033>
    126a:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <tempAcceleration.2033+0x1>
    126e:	30 93 8a 03 	sts	0x038A, r19	; 0x80038a <rp6Data+0x5>
    1272:	20 93 89 03 	sts	0x0389, r18	; 0x800389 <rp6Data+0x4>
				rp6Data.accelerationRate = tempAcceleration;
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <main+0x2a6>
    1278:	8d 32       	cpi	r24, 0x2D	; 45
    127a:	21 e0       	ldi	r18, 0x01	; 1
    127c:	92 07       	cpc	r25, r18
    127e:	58 f0       	brcs	.+22     	; 0x1296 <main+0x2a6>
    1280:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <stopState.2032>
    1284:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <stopState.2032+0x1>
			}else if(distance > 300 && stopState == 2){
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	21 f4       	brne	.+8      	; 0x1296 <main+0x2a6>
    128e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <stopState.2032+0x1>
    1292:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <stopState.2032>
    1296:	9c 01       	movw	r18, r24
    1298:	2d 52       	subi	r18, 0x2D	; 45
    129a:	31 40       	sbci	r19, 0x01	; 1
    129c:	23 36       	cpi	r18, 0x63	; 99
				stopState = 0;
    129e:	31 05       	cpc	r19, r1
    12a0:	80 f4       	brcc	.+32     	; 0x12c2 <main+0x2d2>
    12a2:	e5 e8       	ldi	r30, 0x85	; 133
    12a4:	f3 e0       	ldi	r31, 0x03	; 3
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
    12a6:	20 81       	ld	r18, Z
    12a8:	31 81       	ldd	r19, Z+1	; 0x01
    12aa:	29 32       	cpi	r18, 0x29	; 41
    12ac:	31 05       	cpc	r19, r1
    12ae:	48 f0       	brcs	.+18     	; 0x12c2 <main+0x2d2>
    12b0:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <rp6Data+0x2>
    12b4:	21 30       	cpi	r18, 0x01	; 1
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <main+0x2d2>
    12b8:	28 e2       	ldi	r18, 0x28	; 40
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	31 83       	std	Z+1, r19	; 0x01
    12be:	20 83       	st	Z, r18
    12c0:	4c c0       	rjmp	.+152    	; 0x135a <main+0x36a>
    12c2:	9c 01       	movw	r18, r24
    12c4:	26 55       	subi	r18, 0x56	; 86
    12c6:	31 09       	sbc	r19, r1
				rp6Data.driveSpeed = 40;
    12c8:	26 3d       	cpi	r18, 0xD6	; 214
    12ca:	31 05       	cpc	r19, r1
    12cc:	80 f4       	brcc	.+32     	; 0x12ee <main+0x2fe>
    12ce:	e5 e8       	ldi	r30, 0x85	; 133
    12d0:	f3 e0       	ldi	r31, 0x03	; 3
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
    12d2:	20 81       	ld	r18, Z
    12d4:	31 81       	ldd	r19, Z+1	; 0x01
    12d6:	2a 31       	cpi	r18, 0x1A	; 26
    12d8:	31 05       	cpc	r19, r1
    12da:	48 f0       	brcs	.+18     	; 0x12ee <main+0x2fe>
    12dc:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x2>
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	d9 f5       	brne	.+118    	; 0x135a <main+0x36a>
    12e4:	29 e1       	ldi	r18, 0x19	; 25
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	31 83       	std	Z+1, r19	; 0x01
    12ea:	20 83       	st	Z, r18
    12ec:	36 c0       	rjmp	.+108    	; 0x135a <main+0x36a>
    12ee:	85 35       	cpi	r24, 0x55	; 85
    12f0:	91 05       	cpc	r25, r1
    12f2:	98 f5       	brcc	.+102    	; 0x135a <main+0x36a>
				rp6Data.driveSpeed = 25;
    12f4:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x2>
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	79 f5       	brne	.+94     	; 0x135a <main+0x36a>
    12fc:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <stopState.2032>
			}else if(distance < 85 && rp6Data.driveDirection == 1){
    1300:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <stopState.2032+0x1>
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	c9 f4       	brne	.+50     	; 0x133a <main+0x34a>
    1308:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <rp6Data+0x4>
				if(stopState == 0){
    130c:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <rp6Data+0x5>
    1310:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <tempAcceleration.2033+0x1>
    1314:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <tempAcceleration.2033>
					tempAcceleration = rp6Data.accelerationRate;
    1318:	88 e8       	ldi	r24, 0x88	; 136
    131a:	93 e1       	ldi	r25, 0x13	; 19
    131c:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <rp6Data+0x5>
    1320:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <rp6Data+0x4>
    1324:	e5 e8       	ldi	r30, 0x85	; 133
					rp6Data.accelerationRate = 5000;
    1326:	f3 e0       	ldi	r31, 0x03	; 3
    1328:	11 82       	std	Z+1, r1	; 0x01
    132a:	10 82       	st	Z, r1
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	30 93 27 03 	sts	0x0327, r19	; 0x800327 <stopState.2032+0x1>
					rp6Data.driveSpeed = 0;
    1334:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <stopState.2032>
    1338:	10 c0       	rjmp	.+32     	; 0x135a <main+0x36a>
					stopState = 1;
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	71 f4       	brne	.+28     	; 0x135a <main+0x36a>
    133e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tempAcceleration.2033>
    1342:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tempAcceleration.2033+0x1>
    1346:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <rp6Data+0x5>
				}else if(stopState == 1){
    134a:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <rp6Data+0x4>
					rp6Data.accelerationRate = tempAcceleration;
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <stopState.2032+0x1>
    1356:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <stopState.2032>
    135a:	ac d9       	rcall	.-3240   	; 0x6b4 <micros>
					stopState = 2;
    135c:	82 2e       	mov	r8, r18
    135e:	93 2e       	mov	r9, r19
    1360:	a4 2e       	mov	r10, r20
    1362:	b5 2e       	mov	r11, r21
    1364:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stoptimerspeed>
				}
			}
			
			stoptimer = micros() + stoptimerspeed;
    1368:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stoptimerspeed+0x1>
    136c:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <stoptimerspeed+0x2>
    1370:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <stoptimerspeed+0x3>
    1374:	88 0e       	add	r8, r24
    1376:	99 1e       	adc	r9, r25
    1378:	aa 1e       	adc	r10, r26
    137a:	bb 1e       	adc	r11, r27
    137c:	80 92 43 03 	sts	0x0343, r8	; 0x800343 <stoptimer>
    1380:	90 92 44 03 	sts	0x0344, r9	; 0x800344 <stoptimer+0x1>
    1384:	a0 92 45 03 	sts	0x0345, r10	; 0x800345 <stoptimer+0x2>
    1388:	b0 92 46 03 	sts	0x0346, r11	; 0x800346 <stoptimer+0x3>
    138c:	45 ce       	rjmp	.-886    	; 0x1018 <main+0x28>

0000138e <writeChar>:
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
    138e:	e0 ec       	ldi	r30, 0xC0	; 192
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	90 81       	ld	r25, Z
    1394:	95 ff       	sbrs	r25, 5
    1396:	fd cf       	rjmp	.-6      	; 0x1392 <writeChar+0x4>
	UDR0 = x;
    1398:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    139c:	08 95       	ret

0000139e <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    13a6:	80 81       	ld	r24, Z
    13a8:	88 23       	and	r24, r24
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <writeString+0x22>
    13ac:	8f 01       	movw	r16, r30
    13ae:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    13b0:	ee df       	rcall	.-36     	; 0x138e <writeChar>
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    13b2:	cf 5f       	subi	r28, 0xFF	; 255
    13b4:	f8 01       	movw	r30, r16
    13b6:	ec 0f       	add	r30, r28
    13b8:	f1 1d       	adc	r31, r1
    13ba:	80 81       	ld	r24, Z
    13bc:	81 11       	cpse	r24, r1
    13be:	f8 cf       	rjmp	.-16     	; 0x13b0 <writeString+0x12>
		writeChar( st[i] );
	}
}
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	28 97       	sbiw	r28, 0x08	; 8
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	4a e0       	ldi	r20, 0x0A	; 10
    13de:	be 01       	movw	r22, r28
    13e0:	6f 5f       	subi	r22, 0xFF	; 255
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	ea d4       	rcall	.+2516   	; 0x1dba <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	d9 df       	rcall	.-78     	; 0x139e <writeString>
}
    13ec:	28 96       	adiw	r28, 0x08	; 8
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <initTimer>:
#define PORT_REGISTER PORTL
#define PIN_REGISTER PINL

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
    13fe:	e1 e8       	ldi	r30, 0x81	; 129
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	82 60       	ori	r24, 0x02	; 2
    1406:	80 83       	st	Z, r24
	TCNT1 = 0;
    1408:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    140c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1410:	08 95       	ret

00001412 <ultrasonicSensor>:
}

int ultrasonicSensor() {
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    1416:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    141a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER); //Set TRIGGER pin as output
    141e:	aa e0       	ldi	r26, 0x0A	; 10
    1420:	b1 e0       	ldi	r27, 0x01	; 1
    1422:	8c 91       	ld	r24, X
    1424:	82 60       	ori	r24, 0x02	; 2
    1426:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    1428:	eb e0       	ldi	r30, 0x0B	; 11
    142a:	f1 e0       	ldi	r31, 0x01	; 1
    142c:	80 81       	ld	r24, Z
    142e:	8d 7f       	andi	r24, 0xFD	; 253
    1430:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1432:	2a e0       	ldi	r18, 0x0A	; 10
    1434:	2a 95       	dec	r18
    1436:	f1 f7       	brne	.-4      	; 0x1434 <ultrasonicSensor+0x22>
    1438:	00 c0       	rjmp	.+0      	; 0x143a <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    143a:	80 81       	ld	r24, Z
    143c:	82 60       	ori	r24, 0x02	; 2
    143e:	80 83       	st	Z, r24
    1440:	8a e1       	ldi	r24, 0x1A	; 26
    1442:	8a 95       	dec	r24
    1444:	f1 f7       	brne	.-4      	; 0x1442 <ultrasonicSensor+0x30>
    1446:	00 c0       	rjmp	.+0      	; 0x1448 <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    1448:	80 81       	ld	r24, Z
    144a:	8d 7f       	andi	r24, 0xFD	; 253
    144c:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    144e:	8c 91       	ld	r24, X
    1450:	8d 7f       	andi	r24, 0xFD	; 253
    1452:	8c 93       	st	X, r24
	
	TCNT1 = 0; //Reset value of TCNT1
	
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	dc 01       	movw	r26, r24
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    145a:	e9 e0       	ldi	r30, 0x09	; 9
    145c:	f1 e0       	ldi	r31, 0x01	; 1
    145e:	0a c0       	rjmp	.+20     	; 0x1474 <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	81 34       	cpi	r24, 0x41	; 65
    1468:	2c e9       	ldi	r18, 0x9C	; 156
    146a:	92 07       	cpc	r25, r18
    146c:	a1 05       	cpc	r26, r1
    146e:	b1 05       	cpc	r27, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <ultrasonicSensor+0x62>
    1472:	45 c0       	rjmp	.+138    	; 0x14fe <ultrasonicSensor+0xec>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    1474:	20 81       	ld	r18, Z
    1476:	21 fd       	sbrc	r18, 1
    1478:	f3 cf       	rjmp	.-26     	; 0x1460 <ultrasonicSensor+0x4e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    147a:	e9 e0       	ldi	r30, 0x09	; 9
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	0d c0       	rjmp	.+26     	; 0x149a <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    1480:	ac 01       	movw	r20, r24
    1482:	bd 01       	movw	r22, r26
    1484:	4f 5f       	subi	r20, 0xFF	; 255
    1486:	5f 4f       	sbci	r21, 0xFF	; 255
    1488:	6f 4f       	sbci	r22, 0xFF	; 255
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	80 34       	cpi	r24, 0x40	; 64
    148e:	9c 49       	sbci	r25, 0x9C	; 156
    1490:	a1 05       	cpc	r26, r1
    1492:	b1 05       	cpc	r27, r1
    1494:	b9 f1       	breq	.+110    	; 0x1504 <ultrasonicSensor+0xf2>
    1496:	db 01       	movw	r26, r22
    1498:	ca 01       	movw	r24, r20
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    149a:	20 81       	ld	r18, Z
    149c:	21 ff       	sbrs	r18, 1
    149e:	f0 cf       	rjmp	.-32     	; 0x1480 <ultrasonicSensor+0x6e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
    14a0:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    14a4:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    14a8:	e9 e0       	ldi	r30, 0x09	; 9
    14aa:	f1 e0       	ldi	r31, 0x01	; 1
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    14ae:	ac 01       	movw	r20, r24
    14b0:	bd 01       	movw	r22, r26
    14b2:	4f 5f       	subi	r20, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	6f 4f       	sbci	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	80 34       	cpi	r24, 0x40	; 64
    14bc:	9c 49       	sbci	r25, 0x9C	; 156
    14be:	a1 05       	cpc	r26, r1
    14c0:	b1 05       	cpc	r27, r1
    14c2:	19 f1       	breq	.+70     	; 0x150a <ultrasonicSensor+0xf8>
    14c4:	db 01       	movw	r26, r22
    14c6:	ca 01       	movw	r24, r20
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    14c8:	20 81       	ld	r18, Z
    14ca:	21 fd       	sbrc	r18, 1
    14cc:	f0 cf       	rjmp	.-32     	; 0x14ae <ultrasonicSensor+0x9c>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    14ce:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    14d2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
    14d6:	c9 01       	movw	r24, r18
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	9c 01       	movw	r18, r24
    14de:	ad 01       	movw	r20, r26
    14e0:	2c 1b       	sub	r18, r28
    14e2:	3d 0b       	sbc	r19, r29
    14e4:	41 09       	sbc	r20, r1
    14e6:	51 09       	sbc	r21, r1
    14e8:	a3 eb       	ldi	r26, 0xB3	; 179
    14ea:	b6 e0       	ldi	r27, 0x06	; 6
    14ec:	91 d3       	rcall	.+1826   	; 0x1c10 <__muluhisi3>
    14ee:	20 e2       	ldi	r18, 0x20	; 32
    14f0:	3e e4       	ldi	r19, 0x4E	; 78
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	62 d3       	rcall	.+1732   	; 0x1bbc <__udivmodsi4>
    14f8:	c9 01       	movw	r24, r18
    14fa:	05 97       	sbiw	r24, 0x05	; 5
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    14fc:	08 c0       	rjmp	.+16     	; 0x150e <ultrasonicSensor+0xfc>
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	05 c0       	rjmp	.+10     	; 0x150e <ultrasonicSensor+0xfc>
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <ultrasonicSensor+0xfc>
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <__subsf3>:
    1514:	50 58       	subi	r21, 0x80	; 128

00001516 <__addsf3>:
    1516:	bb 27       	eor	r27, r27
    1518:	aa 27       	eor	r26, r26
    151a:	0e d0       	rcall	.+28     	; 0x1538 <__addsf3x>
    151c:	e5 c0       	rjmp	.+458    	; 0x16e8 <__fp_round>
    151e:	d6 d0       	rcall	.+428    	; 0x16cc <__fp_pscA>
    1520:	30 f0       	brcs	.+12     	; 0x152e <__addsf3+0x18>
    1522:	db d0       	rcall	.+438    	; 0x16da <__fp_pscB>
    1524:	20 f0       	brcs	.+8      	; 0x152e <__addsf3+0x18>
    1526:	31 f4       	brne	.+12     	; 0x1534 <__addsf3+0x1e>
    1528:	9f 3f       	cpi	r25, 0xFF	; 255
    152a:	11 f4       	brne	.+4      	; 0x1530 <__addsf3+0x1a>
    152c:	1e f4       	brtc	.+6      	; 0x1534 <__addsf3+0x1e>
    152e:	cb c0       	rjmp	.+406    	; 0x16c6 <__fp_nan>
    1530:	0e f4       	brtc	.+2      	; 0x1534 <__addsf3+0x1e>
    1532:	e0 95       	com	r30
    1534:	e7 fb       	bst	r30, 7
    1536:	c1 c0       	rjmp	.+386    	; 0x16ba <__fp_inf>

00001538 <__addsf3x>:
    1538:	e9 2f       	mov	r30, r25
    153a:	e7 d0       	rcall	.+462    	; 0x170a <__fp_split3>
    153c:	80 f3       	brcs	.-32     	; 0x151e <__addsf3+0x8>
    153e:	ba 17       	cp	r27, r26
    1540:	62 07       	cpc	r22, r18
    1542:	73 07       	cpc	r23, r19
    1544:	84 07       	cpc	r24, r20
    1546:	95 07       	cpc	r25, r21
    1548:	18 f0       	brcs	.+6      	; 0x1550 <__addsf3x+0x18>
    154a:	71 f4       	brne	.+28     	; 0x1568 <__addsf3x+0x30>
    154c:	9e f5       	brtc	.+102    	; 0x15b4 <__addsf3x+0x7c>
    154e:	ff c0       	rjmp	.+510    	; 0x174e <__fp_zero>
    1550:	0e f4       	brtc	.+2      	; 0x1554 <__addsf3x+0x1c>
    1552:	e0 95       	com	r30
    1554:	0b 2e       	mov	r0, r27
    1556:	ba 2f       	mov	r27, r26
    1558:	a0 2d       	mov	r26, r0
    155a:	0b 01       	movw	r0, r22
    155c:	b9 01       	movw	r22, r18
    155e:	90 01       	movw	r18, r0
    1560:	0c 01       	movw	r0, r24
    1562:	ca 01       	movw	r24, r20
    1564:	a0 01       	movw	r20, r0
    1566:	11 24       	eor	r1, r1
    1568:	ff 27       	eor	r31, r31
    156a:	59 1b       	sub	r21, r25
    156c:	99 f0       	breq	.+38     	; 0x1594 <__addsf3x+0x5c>
    156e:	59 3f       	cpi	r21, 0xF9	; 249
    1570:	50 f4       	brcc	.+20     	; 0x1586 <__addsf3x+0x4e>
    1572:	50 3e       	cpi	r21, 0xE0	; 224
    1574:	68 f1       	brcs	.+90     	; 0x15d0 <__addsf3x+0x98>
    1576:	1a 16       	cp	r1, r26
    1578:	f0 40       	sbci	r31, 0x00	; 0
    157a:	a2 2f       	mov	r26, r18
    157c:	23 2f       	mov	r18, r19
    157e:	34 2f       	mov	r19, r20
    1580:	44 27       	eor	r20, r20
    1582:	58 5f       	subi	r21, 0xF8	; 248
    1584:	f3 cf       	rjmp	.-26     	; 0x156c <__addsf3x+0x34>
    1586:	46 95       	lsr	r20
    1588:	37 95       	ror	r19
    158a:	27 95       	ror	r18
    158c:	a7 95       	ror	r26
    158e:	f0 40       	sbci	r31, 0x00	; 0
    1590:	53 95       	inc	r21
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__addsf3x+0x4e>
    1594:	7e f4       	brtc	.+30     	; 0x15b4 <__addsf3x+0x7c>
    1596:	1f 16       	cp	r1, r31
    1598:	ba 0b       	sbc	r27, r26
    159a:	62 0b       	sbc	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	ba f0       	brmi	.+46     	; 0x15d0 <__addsf3x+0x98>
    15a2:	91 50       	subi	r25, 0x01	; 1
    15a4:	a1 f0       	breq	.+40     	; 0x15ce <__addsf3x+0x96>
    15a6:	ff 0f       	add	r31, r31
    15a8:	bb 1f       	adc	r27, r27
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	c2 f7       	brpl	.-16     	; 0x15a2 <__addsf3x+0x6a>
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <__addsf3x+0x98>
    15b4:	ba 0f       	add	r27, r26
    15b6:	62 1f       	adc	r22, r18
    15b8:	73 1f       	adc	r23, r19
    15ba:	84 1f       	adc	r24, r20
    15bc:	48 f4       	brcc	.+18     	; 0x15d0 <__addsf3x+0x98>
    15be:	87 95       	ror	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b7 95       	ror	r27
    15c6:	f7 95       	ror	r31
    15c8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <__addsf3x+0x96>
    15cc:	b3 cf       	rjmp	.-154    	; 0x1534 <__addsf3+0x1e>
    15ce:	93 95       	inc	r25
    15d0:	88 0f       	add	r24, r24
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <__addsf3x+0x9e>
    15d4:	99 27       	eor	r25, r25
    15d6:	ee 0f       	add	r30, r30
    15d8:	97 95       	ror	r25
    15da:	87 95       	ror	r24
    15dc:	08 95       	ret

000015de <__fixsfsi>:
    15de:	04 d0       	rcall	.+8      	; 0x15e8 <__fixunssfsi>
    15e0:	68 94       	set
    15e2:	b1 11       	cpse	r27, r1
    15e4:	b5 c0       	rjmp	.+362    	; 0x1750 <__fp_szero>
    15e6:	08 95       	ret

000015e8 <__fixunssfsi>:
    15e8:	98 d0       	rcall	.+304    	; 0x171a <__fp_splitA>
    15ea:	88 f0       	brcs	.+34     	; 0x160e <__fixunssfsi+0x26>
    15ec:	9f 57       	subi	r25, 0x7F	; 127
    15ee:	90 f0       	brcs	.+36     	; 0x1614 <__fixunssfsi+0x2c>
    15f0:	b9 2f       	mov	r27, r25
    15f2:	99 27       	eor	r25, r25
    15f4:	b7 51       	subi	r27, 0x17	; 23
    15f6:	a0 f0       	brcs	.+40     	; 0x1620 <__fixunssfsi+0x38>
    15f8:	d1 f0       	breq	.+52     	; 0x162e <__fixunssfsi+0x46>
    15fa:	66 0f       	add	r22, r22
    15fc:	77 1f       	adc	r23, r23
    15fe:	88 1f       	adc	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	1a f0       	brmi	.+6      	; 0x160a <__fixunssfsi+0x22>
    1604:	ba 95       	dec	r27
    1606:	c9 f7       	brne	.-14     	; 0x15fa <__fixunssfsi+0x12>
    1608:	12 c0       	rjmp	.+36     	; 0x162e <__fixunssfsi+0x46>
    160a:	b1 30       	cpi	r27, 0x01	; 1
    160c:	81 f0       	breq	.+32     	; 0x162e <__fixunssfsi+0x46>
    160e:	9f d0       	rcall	.+318    	; 0x174e <__fp_zero>
    1610:	b1 e0       	ldi	r27, 0x01	; 1
    1612:	08 95       	ret
    1614:	9c c0       	rjmp	.+312    	; 0x174e <__fp_zero>
    1616:	67 2f       	mov	r22, r23
    1618:	78 2f       	mov	r23, r24
    161a:	88 27       	eor	r24, r24
    161c:	b8 5f       	subi	r27, 0xF8	; 248
    161e:	39 f0       	breq	.+14     	; 0x162e <__fixunssfsi+0x46>
    1620:	b9 3f       	cpi	r27, 0xF9	; 249
    1622:	cc f3       	brlt	.-14     	; 0x1616 <__fixunssfsi+0x2e>
    1624:	86 95       	lsr	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b3 95       	inc	r27
    162c:	d9 f7       	brne	.-10     	; 0x1624 <__fixunssfsi+0x3c>
    162e:	3e f4       	brtc	.+14     	; 0x163e <__fixunssfsi+0x56>
    1630:	90 95       	com	r25
    1632:	80 95       	com	r24
    1634:	70 95       	com	r23
    1636:	61 95       	neg	r22
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	08 95       	ret

00001640 <__floatunsisf>:
    1640:	e8 94       	clt
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <__floatsisf+0x12>

00001644 <__floatsisf>:
    1644:	97 fb       	bst	r25, 7
    1646:	3e f4       	brtc	.+14     	; 0x1656 <__floatsisf+0x12>
    1648:	90 95       	com	r25
    164a:	80 95       	com	r24
    164c:	70 95       	com	r23
    164e:	61 95       	neg	r22
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	99 23       	and	r25, r25
    1658:	a9 f0       	breq	.+42     	; 0x1684 <__floatsisf+0x40>
    165a:	f9 2f       	mov	r31, r25
    165c:	96 e9       	ldi	r25, 0x96	; 150
    165e:	bb 27       	eor	r27, r27
    1660:	93 95       	inc	r25
    1662:	f6 95       	lsr	r31
    1664:	87 95       	ror	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b7 95       	ror	r27
    166c:	f1 11       	cpse	r31, r1
    166e:	f8 cf       	rjmp	.-16     	; 0x1660 <__floatsisf+0x1c>
    1670:	fa f4       	brpl	.+62     	; 0x16b0 <__floatsisf+0x6c>
    1672:	bb 0f       	add	r27, r27
    1674:	11 f4       	brne	.+4      	; 0x167a <__floatsisf+0x36>
    1676:	60 ff       	sbrs	r22, 0
    1678:	1b c0       	rjmp	.+54     	; 0x16b0 <__floatsisf+0x6c>
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	16 c0       	rjmp	.+44     	; 0x16b0 <__floatsisf+0x6c>
    1684:	88 23       	and	r24, r24
    1686:	11 f0       	breq	.+4      	; 0x168c <__floatsisf+0x48>
    1688:	96 e9       	ldi	r25, 0x96	; 150
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <__floatsisf+0x6a>
    168c:	77 23       	and	r23, r23
    168e:	21 f0       	breq	.+8      	; 0x1698 <__floatsisf+0x54>
    1690:	9e e8       	ldi	r25, 0x8E	; 142
    1692:	87 2f       	mov	r24, r23
    1694:	76 2f       	mov	r23, r22
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <__floatsisf+0x5e>
    1698:	66 23       	and	r22, r22
    169a:	71 f0       	breq	.+28     	; 0x16b8 <__floatsisf+0x74>
    169c:	96 e8       	ldi	r25, 0x86	; 134
    169e:	86 2f       	mov	r24, r22
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	2a f0       	brmi	.+10     	; 0x16b0 <__floatsisf+0x6c>
    16a6:	9a 95       	dec	r25
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	da f7       	brpl	.-10     	; 0x16a6 <__floatsisf+0x62>
    16b0:	88 0f       	add	r24, r24
    16b2:	96 95       	lsr	r25
    16b4:	87 95       	ror	r24
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret

000016ba <__fp_inf>:
    16ba:	97 f9       	bld	r25, 7
    16bc:	9f 67       	ori	r25, 0x7F	; 127
    16be:	80 e8       	ldi	r24, 0x80	; 128
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	08 95       	ret

000016c6 <__fp_nan>:
    16c6:	9f ef       	ldi	r25, 0xFF	; 255
    16c8:	80 ec       	ldi	r24, 0xC0	; 192
    16ca:	08 95       	ret

000016cc <__fp_pscA>:
    16cc:	00 24       	eor	r0, r0
    16ce:	0a 94       	dec	r0
    16d0:	16 16       	cp	r1, r22
    16d2:	17 06       	cpc	r1, r23
    16d4:	18 06       	cpc	r1, r24
    16d6:	09 06       	cpc	r0, r25
    16d8:	08 95       	ret

000016da <__fp_pscB>:
    16da:	00 24       	eor	r0, r0
    16dc:	0a 94       	dec	r0
    16de:	12 16       	cp	r1, r18
    16e0:	13 06       	cpc	r1, r19
    16e2:	14 06       	cpc	r1, r20
    16e4:	05 06       	cpc	r0, r21
    16e6:	08 95       	ret

000016e8 <__fp_round>:
    16e8:	09 2e       	mov	r0, r25
    16ea:	03 94       	inc	r0
    16ec:	00 0c       	add	r0, r0
    16ee:	11 f4       	brne	.+4      	; 0x16f4 <__fp_round+0xc>
    16f0:	88 23       	and	r24, r24
    16f2:	52 f0       	brmi	.+20     	; 0x1708 <__fp_round+0x20>
    16f4:	bb 0f       	add	r27, r27
    16f6:	40 f4       	brcc	.+16     	; 0x1708 <__fp_round+0x20>
    16f8:	bf 2b       	or	r27, r31
    16fa:	11 f4       	brne	.+4      	; 0x1700 <__fp_round+0x18>
    16fc:	60 ff       	sbrs	r22, 0
    16fe:	04 c0       	rjmp	.+8      	; 0x1708 <__fp_round+0x20>
    1700:	6f 5f       	subi	r22, 0xFF	; 255
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	08 95       	ret

0000170a <__fp_split3>:
    170a:	57 fd       	sbrc	r21, 7
    170c:	90 58       	subi	r25, 0x80	; 128
    170e:	44 0f       	add	r20, r20
    1710:	55 1f       	adc	r21, r21
    1712:	59 f0       	breq	.+22     	; 0x172a <__fp_splitA+0x10>
    1714:	5f 3f       	cpi	r21, 0xFF	; 255
    1716:	71 f0       	breq	.+28     	; 0x1734 <__fp_splitA+0x1a>
    1718:	47 95       	ror	r20

0000171a <__fp_splitA>:
    171a:	88 0f       	add	r24, r24
    171c:	97 fb       	bst	r25, 7
    171e:	99 1f       	adc	r25, r25
    1720:	61 f0       	breq	.+24     	; 0x173a <__fp_splitA+0x20>
    1722:	9f 3f       	cpi	r25, 0xFF	; 255
    1724:	79 f0       	breq	.+30     	; 0x1744 <__fp_splitA+0x2a>
    1726:	87 95       	ror	r24
    1728:	08 95       	ret
    172a:	12 16       	cp	r1, r18
    172c:	13 06       	cpc	r1, r19
    172e:	14 06       	cpc	r1, r20
    1730:	55 1f       	adc	r21, r21
    1732:	f2 cf       	rjmp	.-28     	; 0x1718 <__fp_split3+0xe>
    1734:	46 95       	lsr	r20
    1736:	f1 df       	rcall	.-30     	; 0x171a <__fp_splitA>
    1738:	08 c0       	rjmp	.+16     	; 0x174a <__fp_splitA+0x30>
    173a:	16 16       	cp	r1, r22
    173c:	17 06       	cpc	r1, r23
    173e:	18 06       	cpc	r1, r24
    1740:	99 1f       	adc	r25, r25
    1742:	f1 cf       	rjmp	.-30     	; 0x1726 <__fp_splitA+0xc>
    1744:	86 95       	lsr	r24
    1746:	71 05       	cpc	r23, r1
    1748:	61 05       	cpc	r22, r1
    174a:	08 94       	sec
    174c:	08 95       	ret

0000174e <__fp_zero>:
    174e:	e8 94       	clt

00001750 <__fp_szero>:
    1750:	bb 27       	eor	r27, r27
    1752:	66 27       	eor	r22, r22
    1754:	77 27       	eor	r23, r23
    1756:	cb 01       	movw	r24, r22
    1758:	97 f9       	bld	r25, 7
    175a:	08 95       	ret

0000175c <pow>:
    175c:	fa 01       	movw	r30, r20
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	30 96       	adiw	r30, 0x00	; 0
    1764:	21 05       	cpc	r18, r1
    1766:	31 05       	cpc	r19, r1
    1768:	99 f1       	breq	.+102    	; 0x17d0 <pow+0x74>
    176a:	61 15       	cp	r22, r1
    176c:	71 05       	cpc	r23, r1
    176e:	61 f4       	brne	.+24     	; 0x1788 <pow+0x2c>
    1770:	80 38       	cpi	r24, 0x80	; 128
    1772:	bf e3       	ldi	r27, 0x3F	; 63
    1774:	9b 07       	cpc	r25, r27
    1776:	49 f1       	breq	.+82     	; 0x17ca <pow+0x6e>
    1778:	68 94       	set
    177a:	90 38       	cpi	r25, 0x80	; 128
    177c:	81 05       	cpc	r24, r1
    177e:	61 f0       	breq	.+24     	; 0x1798 <pow+0x3c>
    1780:	80 38       	cpi	r24, 0x80	; 128
    1782:	bf ef       	ldi	r27, 0xFF	; 255
    1784:	9b 07       	cpc	r25, r27
    1786:	41 f0       	breq	.+16     	; 0x1798 <pow+0x3c>
    1788:	99 23       	and	r25, r25
    178a:	42 f5       	brpl	.+80     	; 0x17dc <pow+0x80>
    178c:	ff 3f       	cpi	r31, 0xFF	; 255
    178e:	e1 05       	cpc	r30, r1
    1790:	31 05       	cpc	r19, r1
    1792:	21 05       	cpc	r18, r1
    1794:	11 f1       	breq	.+68     	; 0x17da <pow+0x7e>
    1796:	e8 94       	clt
    1798:	08 94       	sec
    179a:	e7 95       	ror	r30
    179c:	d9 01       	movw	r26, r18
    179e:	aa 23       	and	r26, r26
    17a0:	29 f4       	brne	.+10     	; 0x17ac <pow+0x50>
    17a2:	ab 2f       	mov	r26, r27
    17a4:	be 2f       	mov	r27, r30
    17a6:	f8 5f       	subi	r31, 0xF8	; 248
    17a8:	d0 f3       	brcs	.-12     	; 0x179e <pow+0x42>
    17aa:	10 c0       	rjmp	.+32     	; 0x17cc <pow+0x70>
    17ac:	ff 5f       	subi	r31, 0xFF	; 255
    17ae:	70 f4       	brcc	.+28     	; 0x17cc <pow+0x70>
    17b0:	a6 95       	lsr	r26
    17b2:	e0 f7       	brcc	.-8      	; 0x17ac <pow+0x50>
    17b4:	f7 39       	cpi	r31, 0x97	; 151
    17b6:	50 f0       	brcs	.+20     	; 0x17cc <pow+0x70>
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <pow+0x64>
    17ba:	ff 3a       	cpi	r31, 0xAF	; 175
    17bc:	38 f4       	brcc	.+14     	; 0x17cc <pow+0x70>
    17be:	9f 77       	andi	r25, 0x7F	; 127
    17c0:	9f 93       	push	r25
    17c2:	0c d0       	rcall	.+24     	; 0x17dc <pow+0x80>
    17c4:	0f 90       	pop	r0
    17c6:	07 fc       	sbrc	r0, 7
    17c8:	90 58       	subi	r25, 0x80	; 128
    17ca:	08 95       	ret
    17cc:	3e f0       	brts	.+14     	; 0x17dc <pow+0x80>
    17ce:	7b cf       	rjmp	.-266    	; 0x16c6 <__fp_nan>
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	80 e8       	ldi	r24, 0x80	; 128
    17d6:	9f e3       	ldi	r25, 0x3F	; 63
    17d8:	08 95       	ret
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	9f 77       	andi	r25, 0x7F	; 127
    17de:	5f 93       	push	r21
    17e0:	4f 93       	push	r20
    17e2:	3f 93       	push	r19
    17e4:	2f 93       	push	r18
    17e6:	9e d0       	rcall	.+316    	; 0x1924 <log>
    17e8:	2f 91       	pop	r18
    17ea:	3f 91       	pop	r19
    17ec:	4f 91       	pop	r20
    17ee:	5f 91       	pop	r21
    17f0:	0c d1       	rcall	.+536    	; 0x1a0a <__mulsf3>
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <exp>
    17f4:	19 f4       	brne	.+6      	; 0x17fc <pow+0xa0>
    17f6:	0e f0       	brts	.+2      	; 0x17fa <pow+0x9e>
    17f8:	60 cf       	rjmp	.-320    	; 0x16ba <__fp_inf>
    17fa:	a9 cf       	rjmp	.-174    	; 0x174e <__fp_zero>
    17fc:	64 cf       	rjmp	.-312    	; 0x16c6 <__fp_nan>

000017fe <exp>:
    17fe:	8d df       	rcall	.-230    	; 0x171a <__fp_splitA>
    1800:	c8 f3       	brcs	.-14     	; 0x17f4 <pow+0x98>
    1802:	96 38       	cpi	r25, 0x86	; 134
    1804:	c0 f7       	brcc	.-16     	; 0x17f6 <pow+0x9a>
    1806:	07 f8       	bld	r0, 7
    1808:	0f 92       	push	r0
    180a:	e8 94       	clt
    180c:	2b e3       	ldi	r18, 0x3B	; 59
    180e:	3a ea       	ldi	r19, 0xAA	; 170
    1810:	48 eb       	ldi	r20, 0xB8	; 184
    1812:	5f e7       	ldi	r21, 0x7F	; 127
    1814:	08 d1       	rcall	.+528    	; 0x1a26 <__mulsf3_pse>
    1816:	0f 92       	push	r0
    1818:	0f 92       	push	r0
    181a:	0f 92       	push	r0
    181c:	4d b7       	in	r20, 0x3d	; 61
    181e:	5e b7       	in	r21, 0x3e	; 62
    1820:	0f 92       	push	r0
    1822:	c0 d0       	rcall	.+384    	; 0x19a4 <modf>
    1824:	e8 e1       	ldi	r30, 0x18	; 24
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	16 d0       	rcall	.+44     	; 0x1856 <__fp_powser>
    182a:	4f 91       	pop	r20
    182c:	5f 91       	pop	r21
    182e:	ef 91       	pop	r30
    1830:	ff 91       	pop	r31
    1832:	e5 95       	asr	r30
    1834:	ee 1f       	adc	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	49 f0       	breq	.+18     	; 0x184c <exp+0x4e>
    183a:	fe 57       	subi	r31, 0x7E	; 126
    183c:	e0 68       	ori	r30, 0x80	; 128
    183e:	44 27       	eor	r20, r20
    1840:	ee 0f       	add	r30, r30
    1842:	44 1f       	adc	r20, r20
    1844:	fa 95       	dec	r31
    1846:	e1 f7       	brne	.-8      	; 0x1840 <exp+0x42>
    1848:	41 95       	neg	r20
    184a:	55 0b       	sbc	r21, r21
    184c:	32 d0       	rcall	.+100    	; 0x18b2 <ldexp>
    184e:	0f 90       	pop	r0
    1850:	07 fe       	sbrs	r0, 7
    1852:	26 c0       	rjmp	.+76     	; 0x18a0 <inverse>
    1854:	08 95       	ret

00001856 <__fp_powser>:
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	1f 93       	push	r17
    185c:	0f 93       	push	r16
    185e:	ff 92       	push	r15
    1860:	ef 92       	push	r14
    1862:	df 92       	push	r13
    1864:	7b 01       	movw	r14, r22
    1866:	8c 01       	movw	r16, r24
    1868:	68 94       	set
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <__fp_powser+0x20>
    186c:	da 2e       	mov	r13, r26
    186e:	ef 01       	movw	r28, r30
    1870:	d8 d0       	rcall	.+432    	; 0x1a22 <__mulsf3x>
    1872:	fe 01       	movw	r30, r28
    1874:	e8 94       	clt
    1876:	a5 91       	lpm	r26, Z+
    1878:	25 91       	lpm	r18, Z+
    187a:	35 91       	lpm	r19, Z+
    187c:	45 91       	lpm	r20, Z+
    187e:	55 91       	lpm	r21, Z+
    1880:	ae f3       	brts	.-22     	; 0x186c <__fp_powser+0x16>
    1882:	ef 01       	movw	r28, r30
    1884:	59 de       	rcall	.-846    	; 0x1538 <__addsf3x>
    1886:	fe 01       	movw	r30, r28
    1888:	97 01       	movw	r18, r14
    188a:	a8 01       	movw	r20, r16
    188c:	da 94       	dec	r13
    188e:	79 f7       	brne	.-34     	; 0x186e <__fp_powser+0x18>
    1890:	df 90       	pop	r13
    1892:	ef 90       	pop	r14
    1894:	ff 90       	pop	r15
    1896:	0f 91       	pop	r16
    1898:	1f 91       	pop	r17
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <inverse>:
    18a0:	9b 01       	movw	r18, r22
    18a2:	ac 01       	movw	r20, r24
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	80 e8       	ldi	r24, 0x80	; 128
    18aa:	9f e3       	ldi	r25, 0x3F	; 63
    18ac:	11 c1       	rjmp	.+546    	; 0x1ad0 <__divsf3>
    18ae:	05 cf       	rjmp	.-502    	; 0x16ba <__fp_inf>
    18b0:	77 c1       	rjmp	.+750    	; 0x1ba0 <__fp_mpack>

000018b2 <ldexp>:
    18b2:	33 df       	rcall	.-410    	; 0x171a <__fp_splitA>
    18b4:	e8 f3       	brcs	.-6      	; 0x18b0 <inverse+0x10>
    18b6:	99 23       	and	r25, r25
    18b8:	d9 f3       	breq	.-10     	; 0x18b0 <inverse+0x10>
    18ba:	94 0f       	add	r25, r20
    18bc:	51 1d       	adc	r21, r1
    18be:	bb f3       	brvs	.-18     	; 0x18ae <inverse+0xe>
    18c0:	91 50       	subi	r25, 0x01	; 1
    18c2:	50 40       	sbci	r21, 0x00	; 0
    18c4:	94 f0       	brlt	.+36     	; 0x18ea <ldexp+0x38>
    18c6:	59 f0       	breq	.+22     	; 0x18de <ldexp+0x2c>
    18c8:	88 23       	and	r24, r24
    18ca:	32 f0       	brmi	.+12     	; 0x18d8 <ldexp+0x26>
    18cc:	66 0f       	add	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	88 1f       	adc	r24, r24
    18d2:	91 50       	subi	r25, 0x01	; 1
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	c1 f7       	brne	.-16     	; 0x18c8 <ldexp+0x16>
    18d8:	9e 3f       	cpi	r25, 0xFE	; 254
    18da:	51 05       	cpc	r21, r1
    18dc:	44 f7       	brge	.-48     	; 0x18ae <inverse+0xe>
    18de:	88 0f       	add	r24, r24
    18e0:	91 1d       	adc	r25, r1
    18e2:	96 95       	lsr	r25
    18e4:	87 95       	ror	r24
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret
    18ea:	5f 3f       	cpi	r21, 0xFF	; 255
    18ec:	ac f0       	brlt	.+42     	; 0x1918 <ldexp+0x66>
    18ee:	98 3e       	cpi	r25, 0xE8	; 232
    18f0:	9c f0       	brlt	.+38     	; 0x1918 <ldexp+0x66>
    18f2:	bb 27       	eor	r27, r27
    18f4:	86 95       	lsr	r24
    18f6:	77 95       	ror	r23
    18f8:	67 95       	ror	r22
    18fa:	b7 95       	ror	r27
    18fc:	08 f4       	brcc	.+2      	; 0x1900 <ldexp+0x4e>
    18fe:	b1 60       	ori	r27, 0x01	; 1
    1900:	93 95       	inc	r25
    1902:	c1 f7       	brne	.-16     	; 0x18f4 <ldexp+0x42>
    1904:	bb 0f       	add	r27, r27
    1906:	58 f7       	brcc	.-42     	; 0x18de <ldexp+0x2c>
    1908:	11 f4       	brne	.+4      	; 0x190e <ldexp+0x5c>
    190a:	60 ff       	sbrs	r22, 0
    190c:	e8 cf       	rjmp	.-48     	; 0x18de <ldexp+0x2c>
    190e:	6f 5f       	subi	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	8f 4f       	sbci	r24, 0xFF	; 255
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	e3 cf       	rjmp	.-58     	; 0x18de <ldexp+0x2c>
    1918:	1b cf       	rjmp	.-458    	; 0x1750 <__fp_szero>
    191a:	0e f0       	brts	.+2      	; 0x191e <ldexp+0x6c>
    191c:	41 c1       	rjmp	.+642    	; 0x1ba0 <__fp_mpack>
    191e:	d3 ce       	rjmp	.-602    	; 0x16c6 <__fp_nan>
    1920:	68 94       	set
    1922:	cb ce       	rjmp	.-618    	; 0x16ba <__fp_inf>

00001924 <log>:
    1924:	fa de       	rcall	.-524    	; 0x171a <__fp_splitA>
    1926:	c8 f3       	brcs	.-14     	; 0x191a <ldexp+0x68>
    1928:	99 23       	and	r25, r25
    192a:	d1 f3       	breq	.-12     	; 0x1920 <ldexp+0x6e>
    192c:	c6 f3       	brts	.-16     	; 0x191e <ldexp+0x6c>
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	1f 93       	push	r17
    1934:	0f 93       	push	r16
    1936:	ff 92       	push	r15
    1938:	c9 2f       	mov	r28, r25
    193a:	dd 27       	eor	r29, r29
    193c:	88 23       	and	r24, r24
    193e:	2a f0       	brmi	.+10     	; 0x194a <log+0x26>
    1940:	21 97       	sbiw	r28, 0x01	; 1
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	da f7       	brpl	.-10     	; 0x1940 <log+0x1c>
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f eb       	ldi	r21, 0xBF	; 191
    1952:	9f e3       	ldi	r25, 0x3F	; 63
    1954:	88 39       	cpi	r24, 0x98	; 152
    1956:	20 f0       	brcs	.+8      	; 0x1960 <log+0x3c>
    1958:	80 3e       	cpi	r24, 0xE0	; 224
    195a:	30 f0       	brcs	.+12     	; 0x1968 <log+0x44>
    195c:	21 96       	adiw	r28, 0x01	; 1
    195e:	8f 77       	andi	r24, 0x7F	; 127
    1960:	da dd       	rcall	.-1100   	; 0x1516 <__addsf3>
    1962:	e0 e4       	ldi	r30, 0x40	; 64
    1964:	f1 e0       	ldi	r31, 0x01	; 1
    1966:	03 c0       	rjmp	.+6      	; 0x196e <log+0x4a>
    1968:	d6 dd       	rcall	.-1108   	; 0x1516 <__addsf3>
    196a:	ed e6       	ldi	r30, 0x6D	; 109
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	73 df       	rcall	.-282    	; 0x1856 <__fp_powser>
    1970:	8b 01       	movw	r16, r22
    1972:	be 01       	movw	r22, r28
    1974:	ec 01       	movw	r28, r24
    1976:	fb 2e       	mov	r15, r27
    1978:	6f 57       	subi	r22, 0x7F	; 127
    197a:	71 09       	sbc	r23, r1
    197c:	75 95       	asr	r23
    197e:	77 1f       	adc	r23, r23
    1980:	88 0b       	sbc	r24, r24
    1982:	99 0b       	sbc	r25, r25
    1984:	5f de       	rcall	.-834    	; 0x1644 <__floatsisf>
    1986:	28 e1       	ldi	r18, 0x18	; 24
    1988:	32 e7       	ldi	r19, 0x72	; 114
    198a:	41 e3       	ldi	r20, 0x31	; 49
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	49 d0       	rcall	.+146    	; 0x1a22 <__mulsf3x>
    1990:	af 2d       	mov	r26, r15
    1992:	98 01       	movw	r18, r16
    1994:	ae 01       	movw	r20, r28
    1996:	ff 90       	pop	r15
    1998:	0f 91       	pop	r16
    199a:	1f 91       	pop	r17
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	cb dd       	rcall	.-1130   	; 0x1538 <__addsf3x>
    19a2:	a2 ce       	rjmp	.-700    	; 0x16e8 <__fp_round>

000019a4 <modf>:
    19a4:	fa 01       	movw	r30, r20
    19a6:	dc 01       	movw	r26, r24
    19a8:	aa 0f       	add	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	9b 01       	movw	r18, r22
    19ae:	ac 01       	movw	r20, r24
    19b0:	bf 57       	subi	r27, 0x7F	; 127
    19b2:	28 f4       	brcc	.+10     	; 0x19be <modf+0x1a>
    19b4:	22 27       	eor	r18, r18
    19b6:	33 27       	eor	r19, r19
    19b8:	44 27       	eor	r20, r20
    19ba:	50 78       	andi	r21, 0x80	; 128
    19bc:	1f c0       	rjmp	.+62     	; 0x19fc <modf+0x58>
    19be:	b7 51       	subi	r27, 0x17	; 23
    19c0:	88 f4       	brcc	.+34     	; 0x19e4 <modf+0x40>
    19c2:	ab 2f       	mov	r26, r27
    19c4:	00 24       	eor	r0, r0
    19c6:	46 95       	lsr	r20
    19c8:	37 95       	ror	r19
    19ca:	27 95       	ror	r18
    19cc:	01 1c       	adc	r0, r1
    19ce:	a3 95       	inc	r26
    19d0:	d2 f3       	brmi	.-12     	; 0x19c6 <modf+0x22>
    19d2:	00 20       	and	r0, r0
    19d4:	69 f0       	breq	.+26     	; 0x19f0 <modf+0x4c>
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	44 1f       	adc	r20, r20
    19dc:	b3 95       	inc	r27
    19de:	da f3       	brmi	.-10     	; 0x19d6 <modf+0x32>
    19e0:	0d d0       	rcall	.+26     	; 0x19fc <modf+0x58>
    19e2:	98 cd       	rjmp	.-1232   	; 0x1514 <__subsf3>
    19e4:	61 30       	cpi	r22, 0x01	; 1
    19e6:	71 05       	cpc	r23, r1
    19e8:	a0 e8       	ldi	r26, 0x80	; 128
    19ea:	8a 07       	cpc	r24, r26
    19ec:	b9 46       	sbci	r27, 0x69	; 105
    19ee:	30 f4       	brcc	.+12     	; 0x19fc <modf+0x58>
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	66 27       	eor	r22, r22
    19f6:	77 27       	eor	r23, r23
    19f8:	88 27       	eor	r24, r24
    19fa:	90 78       	andi	r25, 0x80	; 128
    19fc:	30 96       	adiw	r30, 0x00	; 0
    19fe:	21 f0       	breq	.+8      	; 0x1a08 <modf+0x64>
    1a00:	20 83       	st	Z, r18
    1a02:	31 83       	std	Z+1, r19	; 0x01
    1a04:	42 83       	std	Z+2, r20	; 0x02
    1a06:	53 83       	std	Z+3, r21	; 0x03
    1a08:	08 95       	ret

00001a0a <__mulsf3>:
    1a0a:	0b d0       	rcall	.+22     	; 0x1a22 <__mulsf3x>
    1a0c:	6d ce       	rjmp	.-806    	; 0x16e8 <__fp_round>
    1a0e:	5e de       	rcall	.-836    	; 0x16cc <__fp_pscA>
    1a10:	28 f0       	brcs	.+10     	; 0x1a1c <__mulsf3+0x12>
    1a12:	63 de       	rcall	.-826    	; 0x16da <__fp_pscB>
    1a14:	18 f0       	brcs	.+6      	; 0x1a1c <__mulsf3+0x12>
    1a16:	95 23       	and	r25, r21
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <__mulsf3+0x12>
    1a1a:	4f ce       	rjmp	.-866    	; 0x16ba <__fp_inf>
    1a1c:	54 ce       	rjmp	.-856    	; 0x16c6 <__fp_nan>
    1a1e:	11 24       	eor	r1, r1
    1a20:	97 ce       	rjmp	.-722    	; 0x1750 <__fp_szero>

00001a22 <__mulsf3x>:
    1a22:	73 de       	rcall	.-794    	; 0x170a <__fp_split3>
    1a24:	a0 f3       	brcs	.-24     	; 0x1a0e <__mulsf3+0x4>

00001a26 <__mulsf3_pse>:
    1a26:	95 9f       	mul	r25, r21
    1a28:	d1 f3       	breq	.-12     	; 0x1a1e <__mulsf3+0x14>
    1a2a:	95 0f       	add	r25, r21
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	55 1f       	adc	r21, r21
    1a30:	62 9f       	mul	r22, r18
    1a32:	f0 01       	movw	r30, r0
    1a34:	72 9f       	mul	r23, r18
    1a36:	bb 27       	eor	r27, r27
    1a38:	f0 0d       	add	r31, r0
    1a3a:	b1 1d       	adc	r27, r1
    1a3c:	63 9f       	mul	r22, r19
    1a3e:	aa 27       	eor	r26, r26
    1a40:	f0 0d       	add	r31, r0
    1a42:	b1 1d       	adc	r27, r1
    1a44:	aa 1f       	adc	r26, r26
    1a46:	64 9f       	mul	r22, r20
    1a48:	66 27       	eor	r22, r22
    1a4a:	b0 0d       	add	r27, r0
    1a4c:	a1 1d       	adc	r26, r1
    1a4e:	66 1f       	adc	r22, r22
    1a50:	82 9f       	mul	r24, r18
    1a52:	22 27       	eor	r18, r18
    1a54:	b0 0d       	add	r27, r0
    1a56:	a1 1d       	adc	r26, r1
    1a58:	62 1f       	adc	r22, r18
    1a5a:	73 9f       	mul	r23, r19
    1a5c:	b0 0d       	add	r27, r0
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	62 1f       	adc	r22, r18
    1a62:	83 9f       	mul	r24, r19
    1a64:	a0 0d       	add	r26, r0
    1a66:	61 1d       	adc	r22, r1
    1a68:	22 1f       	adc	r18, r18
    1a6a:	74 9f       	mul	r23, r20
    1a6c:	33 27       	eor	r19, r19
    1a6e:	a0 0d       	add	r26, r0
    1a70:	61 1d       	adc	r22, r1
    1a72:	23 1f       	adc	r18, r19
    1a74:	84 9f       	mul	r24, r20
    1a76:	60 0d       	add	r22, r0
    1a78:	21 1d       	adc	r18, r1
    1a7a:	82 2f       	mov	r24, r18
    1a7c:	76 2f       	mov	r23, r22
    1a7e:	6a 2f       	mov	r22, r26
    1a80:	11 24       	eor	r1, r1
    1a82:	9f 57       	subi	r25, 0x7F	; 127
    1a84:	50 40       	sbci	r21, 0x00	; 0
    1a86:	8a f0       	brmi	.+34     	; 0x1aaa <__mulsf3_pse+0x84>
    1a88:	e1 f0       	breq	.+56     	; 0x1ac2 <__mulsf3_pse+0x9c>
    1a8a:	88 23       	and	r24, r24
    1a8c:	4a f0       	brmi	.+18     	; 0x1aa0 <__mulsf3_pse+0x7a>
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	bb 1f       	adc	r27, r27
    1a94:	66 1f       	adc	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	91 50       	subi	r25, 0x01	; 1
    1a9c:	50 40       	sbci	r21, 0x00	; 0
    1a9e:	a9 f7       	brne	.-22     	; 0x1a8a <__mulsf3_pse+0x64>
    1aa0:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	70 f0       	brcs	.+28     	; 0x1ac2 <__mulsf3_pse+0x9c>
    1aa6:	09 ce       	rjmp	.-1006   	; 0x16ba <__fp_inf>
    1aa8:	53 ce       	rjmp	.-858    	; 0x1750 <__fp_szero>
    1aaa:	5f 3f       	cpi	r21, 0xFF	; 255
    1aac:	ec f3       	brlt	.-6      	; 0x1aa8 <__mulsf3_pse+0x82>
    1aae:	98 3e       	cpi	r25, 0xE8	; 232
    1ab0:	dc f3       	brlt	.-10     	; 0x1aa8 <__mulsf3_pse+0x82>
    1ab2:	86 95       	lsr	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	b7 95       	ror	r27
    1aba:	f7 95       	ror	r31
    1abc:	e7 95       	ror	r30
    1abe:	9f 5f       	subi	r25, 0xFF	; 255
    1ac0:	c1 f7       	brne	.-16     	; 0x1ab2 <__mulsf3_pse+0x8c>
    1ac2:	fe 2b       	or	r31, r30
    1ac4:	88 0f       	add	r24, r24
    1ac6:	91 1d       	adc	r25, r1
    1ac8:	96 95       	lsr	r25
    1aca:	87 95       	ror	r24
    1acc:	97 f9       	bld	r25, 7
    1ace:	08 95       	ret

00001ad0 <__divsf3>:
    1ad0:	0c d0       	rcall	.+24     	; 0x1aea <__divsf3x>
    1ad2:	0a ce       	rjmp	.-1004   	; 0x16e8 <__fp_round>
    1ad4:	02 de       	rcall	.-1020   	; 0x16da <__fp_pscB>
    1ad6:	40 f0       	brcs	.+16     	; 0x1ae8 <__divsf3+0x18>
    1ad8:	f9 dd       	rcall	.-1038   	; 0x16cc <__fp_pscA>
    1ada:	30 f0       	brcs	.+12     	; 0x1ae8 <__divsf3+0x18>
    1adc:	21 f4       	brne	.+8      	; 0x1ae6 <__divsf3+0x16>
    1ade:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae0:	19 f0       	breq	.+6      	; 0x1ae8 <__divsf3+0x18>
    1ae2:	eb cd       	rjmp	.-1066   	; 0x16ba <__fp_inf>
    1ae4:	51 11       	cpse	r21, r1
    1ae6:	34 ce       	rjmp	.-920    	; 0x1750 <__fp_szero>
    1ae8:	ee cd       	rjmp	.-1060   	; 0x16c6 <__fp_nan>

00001aea <__divsf3x>:
    1aea:	0f de       	rcall	.-994    	; 0x170a <__fp_split3>
    1aec:	98 f3       	brcs	.-26     	; 0x1ad4 <__divsf3+0x4>

00001aee <__divsf3_pse>:
    1aee:	99 23       	and	r25, r25
    1af0:	c9 f3       	breq	.-14     	; 0x1ae4 <__divsf3+0x14>
    1af2:	55 23       	and	r21, r21
    1af4:	b1 f3       	breq	.-20     	; 0x1ae2 <__divsf3+0x12>
    1af6:	95 1b       	sub	r25, r21
    1af8:	55 0b       	sbc	r21, r21
    1afa:	bb 27       	eor	r27, r27
    1afc:	aa 27       	eor	r26, r26
    1afe:	62 17       	cp	r22, r18
    1b00:	73 07       	cpc	r23, r19
    1b02:	84 07       	cpc	r24, r20
    1b04:	38 f0       	brcs	.+14     	; 0x1b14 <__divsf3_pse+0x26>
    1b06:	9f 5f       	subi	r25, 0xFF	; 255
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	22 0f       	add	r18, r18
    1b0c:	33 1f       	adc	r19, r19
    1b0e:	44 1f       	adc	r20, r20
    1b10:	aa 1f       	adc	r26, r26
    1b12:	a9 f3       	breq	.-22     	; 0x1afe <__divsf3_pse+0x10>
    1b14:	33 d0       	rcall	.+102    	; 0x1b7c <__divsf3_pse+0x8e>
    1b16:	0e 2e       	mov	r0, r30
    1b18:	3a f0       	brmi	.+14     	; 0x1b28 <__divsf3_pse+0x3a>
    1b1a:	e0 e8       	ldi	r30, 0x80	; 128
    1b1c:	30 d0       	rcall	.+96     	; 0x1b7e <__divsf3_pse+0x90>
    1b1e:	91 50       	subi	r25, 0x01	; 1
    1b20:	50 40       	sbci	r21, 0x00	; 0
    1b22:	e6 95       	lsr	r30
    1b24:	00 1c       	adc	r0, r0
    1b26:	ca f7       	brpl	.-14     	; 0x1b1a <__divsf3_pse+0x2c>
    1b28:	29 d0       	rcall	.+82     	; 0x1b7c <__divsf3_pse+0x8e>
    1b2a:	fe 2f       	mov	r31, r30
    1b2c:	27 d0       	rcall	.+78     	; 0x1b7c <__divsf3_pse+0x8e>
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	bb 1f       	adc	r27, r27
    1b36:	26 17       	cp	r18, r22
    1b38:	37 07       	cpc	r19, r23
    1b3a:	48 07       	cpc	r20, r24
    1b3c:	ab 07       	cpc	r26, r27
    1b3e:	b0 e8       	ldi	r27, 0x80	; 128
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <__divsf3_pse+0x56>
    1b42:	bb 0b       	sbc	r27, r27
    1b44:	80 2d       	mov	r24, r0
    1b46:	bf 01       	movw	r22, r30
    1b48:	ff 27       	eor	r31, r31
    1b4a:	93 58       	subi	r25, 0x83	; 131
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	2a f0       	brmi	.+10     	; 0x1b5a <__divsf3_pse+0x6c>
    1b50:	9e 3f       	cpi	r25, 0xFE	; 254
    1b52:	51 05       	cpc	r21, r1
    1b54:	68 f0       	brcs	.+26     	; 0x1b70 <__divsf3_pse+0x82>
    1b56:	b1 cd       	rjmp	.-1182   	; 0x16ba <__fp_inf>
    1b58:	fb cd       	rjmp	.-1034   	; 0x1750 <__fp_szero>
    1b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5c:	ec f3       	brlt	.-6      	; 0x1b58 <__divsf3_pse+0x6a>
    1b5e:	98 3e       	cpi	r25, 0xE8	; 232
    1b60:	dc f3       	brlt	.-10     	; 0x1b58 <__divsf3_pse+0x6a>
    1b62:	86 95       	lsr	r24
    1b64:	77 95       	ror	r23
    1b66:	67 95       	ror	r22
    1b68:	b7 95       	ror	r27
    1b6a:	f7 95       	ror	r31
    1b6c:	9f 5f       	subi	r25, 0xFF	; 255
    1b6e:	c9 f7       	brne	.-14     	; 0x1b62 <__divsf3_pse+0x74>
    1b70:	88 0f       	add	r24, r24
    1b72:	91 1d       	adc	r25, r1
    1b74:	96 95       	lsr	r25
    1b76:	87 95       	ror	r24
    1b78:	97 f9       	bld	r25, 7
    1b7a:	08 95       	ret
    1b7c:	e1 e0       	ldi	r30, 0x01	; 1
    1b7e:	66 0f       	add	r22, r22
    1b80:	77 1f       	adc	r23, r23
    1b82:	88 1f       	adc	r24, r24
    1b84:	bb 1f       	adc	r27, r27
    1b86:	62 17       	cp	r22, r18
    1b88:	73 07       	cpc	r23, r19
    1b8a:	84 07       	cpc	r24, r20
    1b8c:	ba 07       	cpc	r27, r26
    1b8e:	20 f0       	brcs	.+8      	; 0x1b98 <__divsf3_pse+0xaa>
    1b90:	62 1b       	sub	r22, r18
    1b92:	73 0b       	sbc	r23, r19
    1b94:	84 0b       	sbc	r24, r20
    1b96:	ba 0b       	sbc	r27, r26
    1b98:	ee 1f       	adc	r30, r30
    1b9a:	88 f7       	brcc	.-30     	; 0x1b7e <__divsf3_pse+0x90>
    1b9c:	e0 95       	com	r30
    1b9e:	08 95       	ret

00001ba0 <__fp_mpack>:
    1ba0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba2:	31 f0       	breq	.+12     	; 0x1bb0 <__fp_mpack_finite+0xc>

00001ba4 <__fp_mpack_finite>:
    1ba4:	91 50       	subi	r25, 0x01	; 1
    1ba6:	20 f4       	brcc	.+8      	; 0x1bb0 <__fp_mpack_finite+0xc>
    1ba8:	87 95       	ror	r24
    1baa:	77 95       	ror	r23
    1bac:	67 95       	ror	r22
    1bae:	b7 95       	ror	r27
    1bb0:	88 0f       	add	r24, r24
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	96 95       	lsr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	97 f9       	bld	r25, 7
    1bba:	08 95       	ret

00001bbc <__udivmodsi4>:
    1bbc:	a1 e2       	ldi	r26, 0x21	; 33
    1bbe:	1a 2e       	mov	r1, r26
    1bc0:	aa 1b       	sub	r26, r26
    1bc2:	bb 1b       	sub	r27, r27
    1bc4:	fd 01       	movw	r30, r26
    1bc6:	0d c0       	rjmp	.+26     	; 0x1be2 <__udivmodsi4_ep>

00001bc8 <__udivmodsi4_loop>:
    1bc8:	aa 1f       	adc	r26, r26
    1bca:	bb 1f       	adc	r27, r27
    1bcc:	ee 1f       	adc	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	a2 17       	cp	r26, r18
    1bd2:	b3 07       	cpc	r27, r19
    1bd4:	e4 07       	cpc	r30, r20
    1bd6:	f5 07       	cpc	r31, r21
    1bd8:	20 f0       	brcs	.+8      	; 0x1be2 <__udivmodsi4_ep>
    1bda:	a2 1b       	sub	r26, r18
    1bdc:	b3 0b       	sbc	r27, r19
    1bde:	e4 0b       	sbc	r30, r20
    1be0:	f5 0b       	sbc	r31, r21

00001be2 <__udivmodsi4_ep>:
    1be2:	66 1f       	adc	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	1a 94       	dec	r1
    1bec:	69 f7       	brne	.-38     	; 0x1bc8 <__udivmodsi4_loop>
    1bee:	60 95       	com	r22
    1bf0:	70 95       	com	r23
    1bf2:	80 95       	com	r24
    1bf4:	90 95       	com	r25
    1bf6:	9b 01       	movw	r18, r22
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	bd 01       	movw	r22, r26
    1bfc:	cf 01       	movw	r24, r30
    1bfe:	08 95       	ret

00001c00 <__tablejump2__>:
    1c00:	ee 0f       	add	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	88 1f       	adc	r24, r24
    1c06:	8b bf       	out	0x3b, r24	; 59
    1c08:	07 90       	elpm	r0, Z+
    1c0a:	f6 91       	elpm	r31, Z
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	19 94       	eijmp

00001c10 <__muluhisi3>:
    1c10:	c5 d0       	rcall	.+394    	; 0x1d9c <__umulhisi3>
    1c12:	a5 9f       	mul	r26, r21
    1c14:	90 0d       	add	r25, r0
    1c16:	b4 9f       	mul	r27, r20
    1c18:	90 0d       	add	r25, r0
    1c1a:	a4 9f       	mul	r26, r20
    1c1c:	80 0d       	add	r24, r0
    1c1e:	91 1d       	adc	r25, r1
    1c20:	11 24       	eor	r1, r1
    1c22:	08 95       	ret

00001c24 <__umoddi3>:
    1c24:	68 94       	set
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <__udivdi3_umoddi3>

00001c28 <__udivdi3>:
    1c28:	e8 94       	clt

00001c2a <__udivdi3_umoddi3>:
    1c2a:	8f 92       	push	r8
    1c2c:	9f 92       	push	r9
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	05 d0       	rcall	.+10     	; 0x1c3e <__udivmod64>
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	9f 90       	pop	r9
    1c3a:	8f 90       	pop	r8
    1c3c:	08 95       	ret

00001c3e <__udivmod64>:
    1c3e:	88 24       	eor	r8, r8
    1c40:	99 24       	eor	r9, r9
    1c42:	f4 01       	movw	r30, r8
    1c44:	e4 01       	movw	r28, r8
    1c46:	b0 e4       	ldi	r27, 0x40	; 64
    1c48:	9f 93       	push	r25
    1c4a:	aa 27       	eor	r26, r26
    1c4c:	9a 15       	cp	r25, r10
    1c4e:	8b 04       	cpc	r8, r11
    1c50:	9c 04       	cpc	r9, r12
    1c52:	ed 05       	cpc	r30, r13
    1c54:	fe 05       	cpc	r31, r14
    1c56:	cf 05       	cpc	r28, r15
    1c58:	d0 07       	cpc	r29, r16
    1c5a:	a1 07       	cpc	r26, r17
    1c5c:	98 f4       	brcc	.+38     	; 0x1c84 <__udivmod64+0x46>
    1c5e:	ad 2f       	mov	r26, r29
    1c60:	dc 2f       	mov	r29, r28
    1c62:	cf 2f       	mov	r28, r31
    1c64:	fe 2f       	mov	r31, r30
    1c66:	e9 2d       	mov	r30, r9
    1c68:	98 2c       	mov	r9, r8
    1c6a:	89 2e       	mov	r8, r25
    1c6c:	98 2f       	mov	r25, r24
    1c6e:	87 2f       	mov	r24, r23
    1c70:	76 2f       	mov	r23, r22
    1c72:	65 2f       	mov	r22, r21
    1c74:	54 2f       	mov	r21, r20
    1c76:	43 2f       	mov	r20, r19
    1c78:	32 2f       	mov	r19, r18
    1c7a:	22 27       	eor	r18, r18
    1c7c:	b8 50       	subi	r27, 0x08	; 8
    1c7e:	31 f7       	brne	.-52     	; 0x1c4c <__udivmod64+0xe>
    1c80:	bf 91       	pop	r27
    1c82:	27 c0       	rjmp	.+78     	; 0x1cd2 <__udivmod64+0x94>
    1c84:	1b 2e       	mov	r1, r27
    1c86:	bf 91       	pop	r27
    1c88:	bb 27       	eor	r27, r27
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	44 1f       	adc	r20, r20
    1c90:	55 1f       	adc	r21, r21
    1c92:	66 1f       	adc	r22, r22
    1c94:	77 1f       	adc	r23, r23
    1c96:	88 1f       	adc	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	88 1c       	adc	r8, r8
    1c9c:	99 1c       	adc	r9, r9
    1c9e:	ee 1f       	adc	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	cc 1f       	adc	r28, r28
    1ca4:	dd 1f       	adc	r29, r29
    1ca6:	aa 1f       	adc	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	8a 14       	cp	r8, r10
    1cac:	9b 04       	cpc	r9, r11
    1cae:	ec 05       	cpc	r30, r12
    1cb0:	fd 05       	cpc	r31, r13
    1cb2:	ce 05       	cpc	r28, r14
    1cb4:	df 05       	cpc	r29, r15
    1cb6:	a0 07       	cpc	r26, r16
    1cb8:	b1 07       	cpc	r27, r17
    1cba:	48 f0       	brcs	.+18     	; 0x1cce <__udivmod64+0x90>
    1cbc:	8a 18       	sub	r8, r10
    1cbe:	9b 08       	sbc	r9, r11
    1cc0:	ec 09       	sbc	r30, r12
    1cc2:	fd 09       	sbc	r31, r13
    1cc4:	ce 09       	sbc	r28, r14
    1cc6:	df 09       	sbc	r29, r15
    1cc8:	a0 0b       	sbc	r26, r16
    1cca:	b1 0b       	sbc	r27, r17
    1ccc:	21 60       	ori	r18, 0x01	; 1
    1cce:	1a 94       	dec	r1
    1cd0:	e1 f6       	brne	.-72     	; 0x1c8a <__udivmod64+0x4c>
    1cd2:	2e f4       	brtc	.+10     	; 0x1cde <__udivmod64+0xa0>
    1cd4:	94 01       	movw	r18, r8
    1cd6:	af 01       	movw	r20, r30
    1cd8:	be 01       	movw	r22, r28
    1cda:	cd 01       	movw	r24, r26
    1cdc:	00 0c       	add	r0, r0
    1cde:	08 95       	ret

00001ce0 <__ashldi3>:
    1ce0:	0f 93       	push	r16
    1ce2:	08 30       	cpi	r16, 0x08	; 8
    1ce4:	90 f0       	brcs	.+36     	; 0x1d0a <__ashldi3+0x2a>
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	87 2f       	mov	r24, r23
    1cea:	76 2f       	mov	r23, r22
    1cec:	65 2f       	mov	r22, r21
    1cee:	54 2f       	mov	r21, r20
    1cf0:	43 2f       	mov	r20, r19
    1cf2:	32 2f       	mov	r19, r18
    1cf4:	22 27       	eor	r18, r18
    1cf6:	08 50       	subi	r16, 0x08	; 8
    1cf8:	f4 cf       	rjmp	.-24     	; 0x1ce2 <__ashldi3+0x2>
    1cfa:	22 0f       	add	r18, r18
    1cfc:	33 1f       	adc	r19, r19
    1cfe:	44 1f       	adc	r20, r20
    1d00:	55 1f       	adc	r21, r21
    1d02:	66 1f       	adc	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 1f       	adc	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 95       	dec	r16
    1d0c:	b2 f7       	brpl	.-20     	; 0x1cfa <__ashldi3+0x1a>
    1d0e:	0f 91       	pop	r16
    1d10:	08 95       	ret

00001d12 <__ashrdi3>:
    1d12:	97 fb       	bst	r25, 7
    1d14:	10 f8       	bld	r1, 0

00001d16 <__lshrdi3>:
    1d16:	16 94       	lsr	r1
    1d18:	00 08       	sbc	r0, r0
    1d1a:	0f 93       	push	r16
    1d1c:	08 30       	cpi	r16, 0x08	; 8
    1d1e:	98 f0       	brcs	.+38     	; 0x1d46 <__lshrdi3+0x30>
    1d20:	08 50       	subi	r16, 0x08	; 8
    1d22:	23 2f       	mov	r18, r19
    1d24:	34 2f       	mov	r19, r20
    1d26:	45 2f       	mov	r20, r21
    1d28:	56 2f       	mov	r21, r22
    1d2a:	67 2f       	mov	r22, r23
    1d2c:	78 2f       	mov	r23, r24
    1d2e:	89 2f       	mov	r24, r25
    1d30:	90 2d       	mov	r25, r0
    1d32:	f4 cf       	rjmp	.-24     	; 0x1d1c <__lshrdi3+0x6>
    1d34:	05 94       	asr	r0
    1d36:	97 95       	ror	r25
    1d38:	87 95       	ror	r24
    1d3a:	77 95       	ror	r23
    1d3c:	67 95       	ror	r22
    1d3e:	57 95       	ror	r21
    1d40:	47 95       	ror	r20
    1d42:	37 95       	ror	r19
    1d44:	27 95       	ror	r18
    1d46:	0a 95       	dec	r16
    1d48:	aa f7       	brpl	.-22     	; 0x1d34 <__lshrdi3+0x1e>
    1d4a:	0f 91       	pop	r16
    1d4c:	08 95       	ret

00001d4e <__adddi3>:
    1d4e:	2a 0d       	add	r18, r10
    1d50:	3b 1d       	adc	r19, r11
    1d52:	4c 1d       	adc	r20, r12
    1d54:	5d 1d       	adc	r21, r13
    1d56:	6e 1d       	adc	r22, r14
    1d58:	7f 1d       	adc	r23, r15
    1d5a:	80 1f       	adc	r24, r16
    1d5c:	91 1f       	adc	r25, r17
    1d5e:	08 95       	ret

00001d60 <__adddi3_s8>:
    1d60:	00 24       	eor	r0, r0
    1d62:	a7 fd       	sbrc	r26, 7
    1d64:	00 94       	com	r0
    1d66:	2a 0f       	add	r18, r26
    1d68:	30 1d       	adc	r19, r0
    1d6a:	40 1d       	adc	r20, r0
    1d6c:	50 1d       	adc	r21, r0
    1d6e:	60 1d       	adc	r22, r0
    1d70:	70 1d       	adc	r23, r0
    1d72:	80 1d       	adc	r24, r0
    1d74:	90 1d       	adc	r25, r0
    1d76:	08 95       	ret

00001d78 <__subdi3>:
    1d78:	2a 19       	sub	r18, r10
    1d7a:	3b 09       	sbc	r19, r11
    1d7c:	4c 09       	sbc	r20, r12
    1d7e:	5d 09       	sbc	r21, r13
    1d80:	6e 09       	sbc	r22, r14
    1d82:	7f 09       	sbc	r23, r15
    1d84:	80 0b       	sbc	r24, r16
    1d86:	91 0b       	sbc	r25, r17
    1d88:	08 95       	ret

00001d8a <__cmpdi2>:
    1d8a:	2a 15       	cp	r18, r10
    1d8c:	3b 05       	cpc	r19, r11
    1d8e:	4c 05       	cpc	r20, r12
    1d90:	5d 05       	cpc	r21, r13
    1d92:	6e 05       	cpc	r22, r14
    1d94:	7f 05       	cpc	r23, r15
    1d96:	80 07       	cpc	r24, r16
    1d98:	91 07       	cpc	r25, r17
    1d9a:	08 95       	ret

00001d9c <__umulhisi3>:
    1d9c:	a2 9f       	mul	r26, r18
    1d9e:	b0 01       	movw	r22, r0
    1da0:	b3 9f       	mul	r27, r19
    1da2:	c0 01       	movw	r24, r0
    1da4:	a3 9f       	mul	r26, r19
    1da6:	70 0d       	add	r23, r0
    1da8:	81 1d       	adc	r24, r1
    1daa:	11 24       	eor	r1, r1
    1dac:	91 1d       	adc	r25, r1
    1dae:	b2 9f       	mul	r27, r18
    1db0:	70 0d       	add	r23, r0
    1db2:	81 1d       	adc	r24, r1
    1db4:	11 24       	eor	r1, r1
    1db6:	91 1d       	adc	r25, r1
    1db8:	08 95       	ret

00001dba <__itoa_ncheck>:
    1dba:	bb 27       	eor	r27, r27
    1dbc:	4a 30       	cpi	r20, 0x0A	; 10
    1dbe:	31 f4       	brne	.+12     	; 0x1dcc <__itoa_ncheck+0x12>
    1dc0:	99 23       	and	r25, r25
    1dc2:	22 f4       	brpl	.+8      	; 0x1dcc <__itoa_ncheck+0x12>
    1dc4:	bd e2       	ldi	r27, 0x2D	; 45
    1dc6:	90 95       	com	r25
    1dc8:	81 95       	neg	r24
    1dca:	9f 4f       	sbci	r25, 0xFF	; 255
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <__utoa_common>

00001dce <__utoa_ncheck>:
    1dce:	bb 27       	eor	r27, r27

00001dd0 <__utoa_common>:
    1dd0:	fb 01       	movw	r30, r22
    1dd2:	55 27       	eor	r21, r21
    1dd4:	aa 27       	eor	r26, r26
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	aa 1f       	adc	r26, r26
    1ddc:	a4 17       	cp	r26, r20
    1dde:	10 f0       	brcs	.+4      	; 0x1de4 <__utoa_common+0x14>
    1de0:	a4 1b       	sub	r26, r20
    1de2:	83 95       	inc	r24
    1de4:	50 51       	subi	r21, 0x10	; 16
    1de6:	b9 f7       	brne	.-18     	; 0x1dd6 <__utoa_common+0x6>
    1de8:	a0 5d       	subi	r26, 0xD0	; 208
    1dea:	aa 33       	cpi	r26, 0x3A	; 58
    1dec:	08 f0       	brcs	.+2      	; 0x1df0 <__utoa_common+0x20>
    1dee:	a9 5d       	subi	r26, 0xD9	; 217
    1df0:	a1 93       	st	Z+, r26
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	79 f7       	brne	.-34     	; 0x1dd4 <__utoa_common+0x4>
    1df6:	b1 11       	cpse	r27, r1
    1df8:	b1 93       	st	Z+, r27
    1dfa:	11 92       	st	Z+, r1
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <strrev>

00001e00 <strrev>:
    1e00:	dc 01       	movw	r26, r24
    1e02:	fc 01       	movw	r30, r24
    1e04:	67 2f       	mov	r22, r23
    1e06:	71 91       	ld	r23, Z+
    1e08:	77 23       	and	r23, r23
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <strrev+0x4>
    1e0c:	32 97       	sbiw	r30, 0x02	; 2
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <strrev+0x18>
    1e10:	7c 91       	ld	r23, X
    1e12:	6d 93       	st	X+, r22
    1e14:	70 83       	st	Z, r23
    1e16:	62 91       	ld	r22, -Z
    1e18:	ae 17       	cp	r26, r30
    1e1a:	bf 07       	cpc	r27, r31
    1e1c:	c8 f3       	brcs	.-14     	; 0x1e10 <strrev+0x10>
    1e1e:	08 95       	ret

00001e20 <_exit>:
    1e20:	f8 94       	cli

00001e22 <__stop_program>:
    1e22:	ff cf       	rjmp	.-2      	; 0x1e22 <__stop_program>
