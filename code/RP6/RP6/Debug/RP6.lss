
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000017a2  00001836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007e  00800066  00800066  0000183c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6c  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ad  00000000  00000000  00002dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  0000375c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000616  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8e  00000000  00000000  0000405e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
      8a:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getBumperLeft>:

#define DISTANCE 0

int getBumperLeft() {
	
	PORT_L &= ~(1 << IO_L);
      92:	c0 98       	cbi	0x18, 0	; 24
	DDR_L &= ~(1 << IO_L);
      94:	b8 98       	cbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      96:	00 c0       	rjmp	.+0      	; 0x98 <getBumperLeft+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_L & (1 << IO_L);
      98:	86 b3       	in	r24, 0x16	; 22
	
	DDR_L |= (1 << IO_L);
      9a:	b8 9a       	sbi	0x17, 0	; 23
	PORT_L |= (1 <<  IO_L);
      9c:	c0 9a       	sbi	0x18, 0	; 24
	
	return pushed;
}
      9e:	81 70       	andi	r24, 0x01	; 1
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	08 95       	ret

000000a4 <getBumperRight>:

int getBumperRight() {
	
	PORT_R &= ~(1 << IO_R);
      a4:	ae 98       	cbi	0x15, 6	; 21
	DDR_R &= ~(1 << IO_R);
      a6:	a6 98       	cbi	0x14, 6	; 20
      a8:	00 c0       	rjmp	.+0      	; 0xaa <getBumperRight+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_R & (1 << IO_R);
      aa:	83 b3       	in	r24, 0x13	; 19
	
	DDR_R |= (1 << IO_R);
      ac:	a6 9a       	sbi	0x14, 6	; 20
	PORT_R |= (1 <<  IO_R);
      ae:	ae 9a       	sbi	0x15, 6	; 21
	
	return pushed;
      b0:	80 74       	andi	r24, 0x40	; 64
}
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	08 95       	ret

000000b6 <getBumpers>:

int getBumpers() {
	
	return getBumperLeft() || getBumperRight();
      b6:	0e 94 49 00 	call	0x92	; 0x92 <getBumperLeft>
      ba:	89 2b       	or	r24, r25
      bc:	51 f4       	brne	.+20     	; 0xd2 <getBumpers+0x1c>
      be:	0e 94 52 00 	call	0xa4	; 0xa4 <getBumperRight>
      c2:	31 e0       	ldi	r19, 0x01	; 1
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	89 2b       	or	r24, r25
      c8:	09 f4       	brne	.+2      	; 0xcc <getBumpers+0x16>
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	83 2f       	mov	r24, r19
      ce:	92 2f       	mov	r25, r18
      d0:	08 95       	ret
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	08 95       	ret

000000d8 <init_micros>:
	sei();																//Enable global interrupts
}

//Micros
void init_micros(){													//Configure timer 0
	TCCR0 |= (1 << CS00);												//Set a timer prescaler of '64'
      d8:	83 b7       	in	r24, 0x33	; 51
      da:	81 60       	ori	r24, 0x01	; 1
      dc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);												//---^
      de:	83 b7       	in	r24, 0x33	; 51
      e0:	82 60       	ori	r24, 0x02	; 2
      e2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);												//Enable overflow interrupts
      e4:	89 b7       	in	r24, 0x39	; 57
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;															//Initialize the timer by setting it to 0
      ea:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;												//Initialize the overflow counter by setting it to 0
      ec:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t0TotalOverflow>
      f0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t0TotalOverflow+0x1>
      f4:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <t0TotalOverflow+0x2>
      f8:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <t0TotalOverflow+0x3>
      fc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <t0TotalOverflow+0x4>
     100:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t0TotalOverflow+0x5>
     104:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <t0TotalOverflow+0x6>
     108:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <t0TotalOverflow+0x7>
     10c:	08 95       	ret

0000010e <__vector_11>:
}

ISR(TIMER0_OVF_vect){												//Interrupt for Timer0, for micros()
     10e:	1f 92       	push	r1
     110:	0f 92       	push	r0
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	2f 93       	push	r18
     11a:	3f 93       	push	r19
     11c:	4f 93       	push	r20
     11e:	5f 93       	push	r21
     120:	6f 93       	push	r22
     122:	7f 93       	push	r23
     124:	8f 93       	push	r24
     126:	9f 93       	push	r25
     128:	af 93       	push	r26
	t0TotalOverflow++;													//Increase the total overflow counter
     12a:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <t0TotalOverflow>
     12e:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x1>
     132:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x2>
     136:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x3>
     13a:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x4>
     13e:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <t0TotalOverflow+0x5>
     142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <t0TotalOverflow+0x6>
     146:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <t0TotalOverflow+0x7>
     14a:	a1 e0       	ldi	r26, 0x01	; 1
     14c:	0e 94 96 0b 	call	0x172c	; 0x172c <__adddi3_s8>
     150:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <t0TotalOverflow>
     154:	30 93 b6 00 	sts	0x00B6, r19	; 0x8000b6 <t0TotalOverflow+0x1>
     158:	40 93 b7 00 	sts	0x00B7, r20	; 0x8000b7 <t0TotalOverflow+0x2>
     15c:	50 93 b8 00 	sts	0x00B8, r21	; 0x8000b8 <t0TotalOverflow+0x3>
     160:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <t0TotalOverflow+0x4>
     164:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <t0TotalOverflow+0x5>
     168:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <t0TotalOverflow+0x6>
     16c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <t0TotalOverflow+0x7>
}
     170:	af 91       	pop	r26
     172:	9f 91       	pop	r25
     174:	8f 91       	pop	r24
     176:	7f 91       	pop	r23
     178:	6f 91       	pop	r22
     17a:	5f 91       	pop	r21
     17c:	4f 91       	pop	r20
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0f be       	out	0x3f, r0	; 63
     186:	0f 90       	pop	r0
     188:	1f 90       	pop	r1
     18a:	18 95       	reti

0000018c <micros>:

uint64_t micros(){
     18c:	af 92       	push	r10
     18e:	bf 92       	push	r11
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     19c:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     19e:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <t0TotalOverflow>
     1a2:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x1>
     1a6:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x2>
     1aa:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x3>
     1ae:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x4>
     1b2:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <t0TotalOverflow+0x5>
     1b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <t0TotalOverflow+0x6>
     1ba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     1be:	e0 e0       	ldi	r30, 0x00	; 0
     1c0:	fa 2f       	mov	r31, r26
     1c2:	ff 0f       	add	r31, r31
     1c4:	ff 0f       	add	r31, r31
     1c6:	ff 0f       	add	r31, r31
     1c8:	ff 23       	and	r31, r31
     1ca:	14 f4       	brge	.+4      	; 0x1d0 <micros+0x44>
     1cc:	e1 50       	subi	r30, 0x01	; 1
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	ef 2f       	mov	r30, r31
     1d2:	ee 0f       	add	r30, r30
     1d4:	ee 0b       	sbc	r30, r30
     1d6:	0b e0       	ldi	r16, 0x0B	; 11
     1d8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__ashldi3>
     1dc:	a2 2e       	mov	r10, r18
     1de:	b3 2e       	mov	r11, r19
     1e0:	c4 2e       	mov	r12, r20
     1e2:	d5 2e       	mov	r13, r21
     1e4:	e6 2e       	mov	r14, r22
     1e6:	f7 2e       	mov	r15, r23
     1e8:	08 2f       	mov	r16, r24
     1ea:	19 2f       	mov	r17, r25
     1ec:	2f 2f       	mov	r18, r31
     1ee:	3e 2f       	mov	r19, r30
     1f0:	4e 2f       	mov	r20, r30
     1f2:	5e 2f       	mov	r21, r30
     1f4:	6e 2f       	mov	r22, r30
     1f6:	7e 2f       	mov	r23, r30
     1f8:	8e 2f       	mov	r24, r30
     1fa:	9e 2f       	mov	r25, r30
     1fc:	0e 94 8d 0b 	call	0x171a	; 0x171a <__adddi3>
}
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	08 95       	ret

00000212 <init_TWI>:

//I2C
void init_TWI(){													//Initialize the TWI registers
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);						//Enable TWI; Enable Acknowledge; Enable Interrupt
     212:	85 e4       	ldi	r24, 0x45	; 69
     214:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;															//No prescaling
     216:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);											//Set slave address
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;									//set TWI clock speed
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;													//Set SDA and SCL on output
     220:	84 b3       	in	r24, 0x14	; 20
     222:	83 60       	ori	r24, 0x03	; 3
     224:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;												//Set pull up resistor
     226:	85 b3       	in	r24, 0x15	; 21
     228:	83 60       	ori	r24, 0x03	; 3
     22a:	85 bb       	out	0x15, r24	; 21
     22c:	08 95       	ret

0000022e <init_rp6Data>:
}

void init_rp6Data(){												//Initialize the default values of the RP6 struct
	rp6Data.driveSpeed = 0;
     22e:	ed e9       	ldi	r30, 0x9D	; 157
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	10 82       	st	Z, r1
     234:	11 82       	std	Z+1, r1	; 0x01
     236:	12 82       	std	Z+2, r1	; 0x02
     238:	13 82       	std	Z+3, r1	; 0x03
	rp6Data.driveDirection = 1;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	84 83       	std	Z+4, r24	; 0x04
	rp6Data.turnDirection = 0;
     23e:	15 82       	std	Z+5, r1	; 0x05
	rp6Data.accelerationRate = 2000;
     240:	80 ed       	ldi	r24, 0xD0	; 208
     242:	97 e0       	ldi	r25, 0x07	; 7
     244:	97 83       	std	Z+7, r25	; 0x07
     246:	86 83       	std	Z+6, r24	; 0x06
	rp6Data.turnRate = 2500;
     248:	84 ec       	ldi	r24, 0xC4	; 196
     24a:	99 e0       	ldi	r25, 0x09	; 9
     24c:	91 87       	std	Z+9, r25	; 0x09
     24e:	80 87       	std	Z+8, r24	; 0x08
	rp6Data.driveSpeedThreshold = 7000;
     250:	88 e5       	ldi	r24, 0x58	; 88
     252:	9b e1       	ldi	r25, 0x1B	; 27
     254:	93 87       	std	Z+11, r25	; 0x0b
     256:	82 87       	std	Z+10, r24	; 0x0a
	rp6Data.updateSpeed = 200;
     258:	88 ec       	ldi	r24, 0xC8	; 200
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	a0 e0       	ldi	r26, 0x00	; 0
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	84 87       	std	Z+12, r24	; 0x0c
     262:	95 87       	std	Z+13, r25	; 0x0d
     264:	a6 87       	std	Z+14, r26	; 0x0e
     266:	b7 87       	std	Z+15, r27	; 0x0f
     268:	08 95       	ret

0000026a <init_arduinoData>:
}

void init_arduinoData(){											//Initialize the default values of the Arduino struct
	arduinoData.bumperFlag = 0;
     26a:	e6 e8       	ldi	r30, 0x86	; 134
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	11 82       	std	Z+1, r1	; 0x01
     270:	10 82       	st	Z, r1
	arduinoData.actualDriveSpeed = 0;
     272:	13 82       	std	Z+3, r1	; 0x03
     274:	12 82       	std	Z+2, r1	; 0x02
	arduinoData.actualLeftMotorSpeed = 0;
     276:	15 82       	std	Z+5, r1	; 0x05
     278:	14 82       	std	Z+4, r1	; 0x04
	arduinoData.actualRightMotorSpeed = 0;
     27a:	17 82       	std	Z+7, r1	; 0x07
     27c:	16 82       	std	Z+6, r1	; 0x06
     27e:	08 95       	ret

00000280 <clearSendData>:
	}
	
	TWCR |= (1 << TWINT);												//Execute the current register settings
}

void clearSendData(){												//Clear the array used for sending data
     280:	e5 ed       	ldi	r30, 0xD5	; 213
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	84 ee       	ldi	r24, 0xE4	; 228
     286:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     288:	11 92       	st	Z+, r1
	
	TWCR |= (1 << TWINT);												//Execute the current register settings
}

void clearSendData(){												//Clear the array used for sending data
	for(int i = 0; i < DATASIZE; i++){
     28a:	e8 17       	cp	r30, r24
     28c:	f9 07       	cpc	r31, r25
     28e:	e1 f7       	brne	.-8      	; 0x288 <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     290:	08 95       	ret

00000292 <clearReceiveData>:

void clearReceiveData(){											//Clear the array used for incoming data
     292:	ee e8       	ldi	r30, 0x8E	; 142
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	8d e9       	ldi	r24, 0x9D	; 157
     298:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     29a:	11 92       	st	Z+, r1
		sendData[i] = 0;
	}
}

void clearReceiveData(){											//Clear the array used for incoming data
	for(int i = 0; i < DATASIZE; i++){
     29c:	e8 17       	cp	r30, r24
     29e:	f9 07       	cpc	r31, r25
     2a0:	e1 f7       	brne	.-8      	; 0x29a <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     2a2:	08 95       	ret

000002a4 <rp6DataInterpreter>:

void rp6DataInterpreter(){											//Interprets the array of data retrieved from the Arduino
	if(receiveData[2]-1 == 0){
     2a4:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <receiveData+0x2>
     2a8:	21 30       	cpi	r18, 0x01	; 1
     2aa:	49 f4       	brne	.+18     	; 0x2be <rp6DataInterpreter+0x1a>
		rp6Data.driveSpeed = 0;
     2ac:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <rp6Data>
     2b0:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <rp6Data+0x1>
     2b4:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <rp6Data+0x2>
     2b8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <rp6Data+0x3>
     2bc:	12 c0       	rjmp	.+36     	; 0x2e2 <rp6DataInterpreter+0x3e>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     2be:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <receiveData+0x1>
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	a0 e0       	ldi	r26, 0x00	; 0
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <rp6Data>
     2cc:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <rp6Data+0x1>
     2d0:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <rp6Data+0x2>
     2d4:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <rp6Data+0x3>
	}
	
	if(receiveData[2] < 1){
     2d8:	21 11       	cpse	r18, r1
     2da:	03 c0       	rjmp	.+6      	; 0x2e2 <rp6DataInterpreter+0x3e>
		rp6Data.driveDirection = 0;
     2dc:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <rp6Data+0x4>
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <rp6DataInterpreter+0x44>
	}else{
		rp6Data.driveDirection = 1;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <rp6Data+0x4>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     2e8:	ed e9       	ldi	r30, 0x9D	; 157
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	ae e8       	ldi	r26, 0x8E	; 142
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	13 96       	adiw	r26, 0x03	; 3
     2f2:	8c 91       	ld	r24, X
     2f4:	13 97       	sbiw	r26, 0x03	; 3
     2f6:	81 50       	subi	r24, 0x01	; 1
     2f8:	85 83       	std	Z+5, r24	; 0x05
	rp6Data.accelerationRate = (receiveData[4] << 8) + receiveData[5];
     2fa:	14 96       	adiw	r26, 0x04	; 4
     2fc:	8c 91       	ld	r24, X
     2fe:	14 97       	sbiw	r26, 0x04	; 4
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	98 2f       	mov	r25, r24
     304:	88 27       	eor	r24, r24
     306:	15 96       	adiw	r26, 0x05	; 5
     308:	2c 91       	ld	r18, X
     30a:	15 97       	sbiw	r26, 0x05	; 5
     30c:	82 0f       	add	r24, r18
     30e:	91 1d       	adc	r25, r1
     310:	97 83       	std	Z+7, r25	; 0x07
     312:	86 83       	std	Z+6, r24	; 0x06
	rp6Data.turnRate = (receiveData[6] << 8) + receiveData[7];
     314:	16 96       	adiw	r26, 0x06	; 6
     316:	8c 91       	ld	r24, X
     318:	16 97       	sbiw	r26, 0x06	; 6
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	98 2f       	mov	r25, r24
     31e:	88 27       	eor	r24, r24
     320:	17 96       	adiw	r26, 0x07	; 7
     322:	2c 91       	ld	r18, X
     324:	17 97       	sbiw	r26, 0x07	; 7
     326:	82 0f       	add	r24, r18
     328:	91 1d       	adc	r25, r1
     32a:	91 87       	std	Z+9, r25	; 0x09
     32c:	80 87       	std	Z+8, r24	; 0x08
	rp6Data.driveSpeedThreshold = (receiveData[8] << 8) + receiveData[9];
     32e:	18 96       	adiw	r26, 0x08	; 8
     330:	8c 91       	ld	r24, X
     332:	18 97       	sbiw	r26, 0x08	; 8
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	98 2f       	mov	r25, r24
     338:	88 27       	eor	r24, r24
     33a:	19 96       	adiw	r26, 0x09	; 9
     33c:	2c 91       	ld	r18, X
     33e:	19 97       	sbiw	r26, 0x09	; 9
     340:	82 0f       	add	r24, r18
     342:	91 1d       	adc	r25, r1
     344:	93 87       	std	Z+11, r25	; 0x0b
     346:	82 87       	std	Z+10, r24	; 0x0a
	rp6Data.updateSpeed = (receiveData[10] << 8) + receiveData[11];
     348:	1a 96       	adiw	r26, 0x0a	; 10
     34a:	4c 91       	ld	r20, X
     34c:	1a 97       	sbiw	r26, 0x0a	; 10
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	54 2f       	mov	r21, r20
     352:	44 27       	eor	r20, r20
     354:	1b 96       	adiw	r26, 0x0b	; 11
     356:	8c 91       	ld	r24, X
     358:	1b 97       	sbiw	r26, 0x0b	; 11
     35a:	48 0f       	add	r20, r24
     35c:	51 1d       	adc	r21, r1
     35e:	05 2e       	mov	r0, r21
     360:	00 0c       	add	r0, r0
     362:	66 0b       	sbc	r22, r22
     364:	77 0b       	sbc	r23, r23
     366:	44 87       	std	Z+12, r20	; 0x0c
     368:	55 87       	std	Z+13, r21	; 0x0d
     36a:	66 87       	std	Z+14, r22	; 0x0e
     36c:	77 87       	std	Z+15, r23	; 0x0f
	rp6Data.compassAngle = (receiveData[12] << 8) + receiveData[13];
     36e:	1c 96       	adiw	r26, 0x0c	; 12
     370:	8c 91       	ld	r24, X
     372:	1c 97       	sbiw	r26, 0x0c	; 12
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	98 2f       	mov	r25, r24
     378:	88 27       	eor	r24, r24
     37a:	1d 96       	adiw	r26, 0x0d	; 13
     37c:	2c 91       	ld	r18, X
     37e:	82 0f       	add	r24, r18
     380:	91 1d       	adc	r25, r1
     382:	29 2f       	mov	r18, r25
     384:	22 0f       	add	r18, r18
     386:	22 0b       	sbc	r18, r18
     388:	80 8b       	std	Z+16, r24	; 0x10
     38a:	91 8b       	std	Z+17, r25	; 0x11
     38c:	22 8b       	std	Z+18, r18	; 0x12
     38e:	23 8b       	std	Z+19, r18	; 0x13
     390:	24 8b       	std	Z+20, r18	; 0x14
     392:	25 8b       	std	Z+21, r18	; 0x15
     394:	26 8b       	std	Z+22, r18	; 0x16
     396:	27 8b       	std	Z+23, r18	; 0x17
     398:	08 95       	ret

0000039a <arduinoDataConstructor>:
}

void arduinoDataConstructor(){										//Constructs an array of data from the struct, to send to the Arduino
	clearSendData();
     39a:	0e 94 40 01 	call	0x280	; 0x280 <clearSendData>
	
	sendData[0] = 1;
     39e:	e5 ed       	ldi	r30, 0xD5	; 213
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 83       	st	Z, r24
	
	sendData[1] = (arduinoData.bumperFlag >> 8);
     3a6:	a6 e8       	ldi	r26, 0x86	; 134
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	8c 91       	ld	r24, X
     3ac:	11 96       	adiw	r26, 0x01	; 1
     3ae:	9c 91       	ld	r25, X
     3b0:	11 97       	sbiw	r26, 0x01	; 1
     3b2:	91 83       	std	Z+1, r25	; 0x01
	sendData[2] = arduinoData.bumperFlag;
     3b4:	82 83       	std	Z+2, r24	; 0x02
	
	sendData[3] = (arduinoData.actualDriveSpeed >> 8);
     3b6:	12 96       	adiw	r26, 0x02	; 2
     3b8:	8c 91       	ld	r24, X
     3ba:	12 97       	sbiw	r26, 0x02	; 2
     3bc:	13 96       	adiw	r26, 0x03	; 3
     3be:	9c 91       	ld	r25, X
     3c0:	13 97       	sbiw	r26, 0x03	; 3
     3c2:	93 83       	std	Z+3, r25	; 0x03
	sendData[4] = arduinoData.actualDriveSpeed;
     3c4:	84 83       	std	Z+4, r24	; 0x04
	
	sendData[5] = (arduinoData.actualLeftMotorSpeed >> 8);
     3c6:	14 96       	adiw	r26, 0x04	; 4
     3c8:	8c 91       	ld	r24, X
     3ca:	14 97       	sbiw	r26, 0x04	; 4
     3cc:	15 96       	adiw	r26, 0x05	; 5
     3ce:	9c 91       	ld	r25, X
     3d0:	15 97       	sbiw	r26, 0x05	; 5
     3d2:	95 83       	std	Z+5, r25	; 0x05
	sendData[6] = arduinoData.actualLeftMotorSpeed;
     3d4:	86 83       	std	Z+6, r24	; 0x06
	
	sendData[7] = (arduinoData.actualRightMotorSpeed >> 8);
     3d6:	16 96       	adiw	r26, 0x06	; 6
     3d8:	8c 91       	ld	r24, X
     3da:	16 97       	sbiw	r26, 0x06	; 6
     3dc:	17 96       	adiw	r26, 0x07	; 7
     3de:	9c 91       	ld	r25, X
     3e0:	97 83       	std	Z+7, r25	; 0x07
	sendData[8] = arduinoData.actualRightMotorSpeed;
     3e2:	80 87       	std	Z+8, r24	; 0x08
	
	for(int i = 9; i < DATASIZE; i++){
		sendData[i] = 0;
     3e4:	11 86       	std	Z+9, r1	; 0x09
     3e6:	12 86       	std	Z+10, r1	; 0x0a
     3e8:	13 86       	std	Z+11, r1	; 0x0b
     3ea:	14 86       	std	Z+12, r1	; 0x0c
     3ec:	15 86       	std	Z+13, r1	; 0x0d
     3ee:	16 86       	std	Z+14, r1	; 0x0e
     3f0:	08 95       	ret

000003f2 <__vector_19>:
	arduinoData.actualDriveSpeed = 0;
	arduinoData.actualLeftMotorSpeed = 0;
	arduinoData.actualRightMotorSpeed = 0;
}

ISR(TWI_vect){														//ISR used for responding to certain TWI status codes
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
	static int byteCounter = 0;											//Define a counter to track how many bytes have been send or received
	switch(TWSR){														//Switch on the status code in the status register
     414:	81 b1       	in	r24, 0x01	; 1
     416:	80 3a       	cpi	r24, 0xA0	; 160
     418:	21 f1       	breq	.+72     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     41a:	28 f4       	brcc	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41c:	80 36       	cpi	r24, 0x60	; 96
     41e:	41 f0       	breq	.+16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     420:	80 38       	cpi	r24, 0x80	; 128
     422:	69 f0       	breq	.+26     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     424:	39 c0       	rjmp	.+114    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     426:	88 3a       	cpi	r24, 0xA8	; 168
     428:	f9 f0       	breq	.+62     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     42a:	88 3b       	cpi	r24, 0xB8	; 184
     42c:	39 f1       	breq	.+78     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     42e:	34 c0       	rjmp	.+104    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		case 0x60:															//0x60 Own SLA+W has been received; ACK has been returned
			clearReceiveData();													//Clear the array for receiving data
     430:	0e 94 49 01 	call	0x292	; 0x292 <clearReceiveData>
			byteCounter = 0;													//Reset the byte counter
     434:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1961+0x1>
     438:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <byteCounter.1961>
		break;
     43c:	2d c0       	rjmp	.+90     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		
		case 0x80:															//0x80 Previously addressed with own SLA+W; data has been received; ACK has been returned
			if(byteCounter <= DATASIZE){										//If the counter is less or equal to the max value
     43e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <byteCounter.1961>
     442:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <byteCounter.1961+0x1>
     446:	80 31       	cpi	r24, 0x10	; 16
     448:	91 05       	cpc	r25, r1
     44a:	34 f5       	brge	.+76     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				receiveData[byteCounter] = TWDR;									//Add the received byte to the array
     44c:	23 b1       	in	r18, 0x03	; 3
     44e:	fc 01       	movw	r30, r24
     450:	e2 57       	subi	r30, 0x72	; 114
     452:	ff 4f       	sbci	r31, 0xFF	; 255
     454:	20 83       	st	Z, r18
				byteCounter++;														//Up the counter by 1
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <byteCounter.1961+0x1>
     45c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <byteCounter.1961>
     460:	1b c0       	rjmp	.+54     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			}
		break;
		
		case 0xA0:															//0xA0 A STOP condition or repeated START condition has been received while still addressed as Slave
			rp6DataInterpreter();												//Interpret the received data and place it in the struct
     462:	0e 94 52 01 	call	0x2a4	; 0x2a4 <rp6DataInterpreter>
		break;
     466:	18 c0       	rjmp	.+48     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		
		case 0xA8:															//0xA8 Own SLA+R has been received; ACK has been returned
			arduinoDataConstructor();											//Construct the send array with the data from the struct
     468:	0e 94 cd 01 	call	0x39a	; 0x39a <arduinoDataConstructor>
			byteCounter = 0;													//Reset the byte counter
     46c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1961+0x1>
     470:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <byteCounter.1961>
			TWDR = sendData[byteCounter];										//Set the first byte in the TWI data register
     474:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <sendData>
     478:	83 b9       	out	0x03, r24	; 3
		break;
     47a:	0e c0       	rjmp	.+28     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		
		case 0xB8:															//0xB8 Data byte in TWDRn has been transmitted; ACK has been received
			byteCounter++;														//Up the counter
     47c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <byteCounter.1961>
     480:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <byteCounter.1961+0x1>
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <byteCounter.1961+0x1>
     48a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <byteCounter.1961>
			TWDR = sendData[byteCounter];										//Send the data
     48e:	fc 01       	movw	r30, r24
     490:	eb 52       	subi	r30, 0x2B	; 43
     492:	ff 4f       	sbci	r31, 0xFF	; 255
     494:	80 81       	ld	r24, Z
     496:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);												//Execute the current register settings
     498:	86 b7       	in	r24, 0x36	; 54
     49a:	80 68       	ori	r24, 0x80	; 128
     49c:	86 bf       	out	0x36, r24	; 54
}
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <init_motor_io>:
	}
}

//Motor
void init_motor_io(){												//Initialize all inputs and outputs needed for the motors
	DDRD |= 0b00110000;													//Set D5 and D4 on output, these are the motors
     4c0:	81 b3       	in	r24, 0x11	; 17
     4c2:	80 63       	ori	r24, 0x30	; 48
     4c4:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;													//Set C2 and C3 on output, these are the motor directions
     4c6:	84 b3       	in	r24, 0x14	; 20
     4c8:	8c 60       	ori	r24, 0x0C	; 12
     4ca:	84 bb       	out	0x14, r24	; 20
     4cc:	08 95       	ret

000004ce <init_motor_timer>:
}

void init_motor_timer(){											//Initialize the timer needed to create a PWM signal for the motors
	TCCR1A |= (1 << COM1A1);											//Clear PWM on compare match while counting up, and set when counting down
     4ce:	8f b5       	in	r24, 0x2f	; 47
     4d0:	80 68       	ori	r24, 0x80	; 128
     4d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);											//Same for B
     4d4:	8f b5       	in	r24, 0x2f	; 47
     4d6:	80 62       	ori	r24, 0x20	; 32
     4d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);												//Set a Phase correct ICR1 topped PWM signal
     4da:	8f b5       	in	r24, 0x2f	; 47
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);												//---^
     4e0:	8e b5       	in	r24, 0x2e	; 46
     4e2:	80 61       	ori	r24, 0x10	; 16
     4e4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);												//Enable without prescaler
     4e6:	8e b5       	in	r24, 0x2e	; 46
     4e8:	81 60       	ori	r24, 0x01	; 1
     4ea:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;														//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	99 ef       	ldi	r25, 0xF9	; 249
     4f0:	97 bd       	out	0x27, r25	; 39
     4f2:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;															//Start the compare registers at 0, no signal
     4f4:	1b bc       	out	0x2b, r1	; 43
     4f6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;															//---^
     4f8:	19 bc       	out	0x29, r1	; 41
     4fa:	18 bc       	out	0x28, r1	; 40
     4fc:	08 95       	ret

000004fe <motorDriver>:
}

int motorDriver(struct rp6DataBP rp6Data){							//Calculate the PWM signal for the motors based on the struct data
     4fe:	2f 92       	push	r2
     500:	3f 92       	push	r3
     502:	4f 92       	push	r4
     504:	5f 92       	push	r5
     506:	6f 92       	push	r6
     508:	7f 92       	push	r7
     50a:	8f 92       	push	r8
     50c:	9f 92       	push	r9
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	e3 97       	sbiw	r28, 0x33	; 51
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	2c 96       	adiw	r28, 0x0c	; 12
     534:	ac ac       	ldd	r10, Y+60	; 0x3c
     536:	bd ac       	ldd	r11, Y+61	; 0x3d
     538:	ce ac       	ldd	r12, Y+62	; 0x3e
     53a:	df ac       	ldd	r13, Y+63	; 0x3f
     53c:	2c 97       	sbiw	r28, 0x0c	; 12
     53e:	aa 86       	std	Y+10, r10	; 0x0a
     540:	bb 86       	std	Y+11, r11	; 0x0b
     542:	cc 86       	std	Y+12, r12	; 0x0c
     544:	dd 86       	std	Y+13, r13	; 0x0d
     546:	2d 96       	adiw	r28, 0x0d	; 13
     548:	bf ac       	ldd	r11, Y+63	; 0x3f
     54a:	2d 97       	sbiw	r28, 0x0d	; 13
     54c:	b9 86       	std	Y+9, r11	; 0x09
     54e:	2e 96       	adiw	r28, 0x0e	; 14
     550:	cf ac       	ldd	r12, Y+63	; 0x3f
     552:	2e 97       	sbiw	r28, 0x0e	; 14
     554:	ce 86       	std	Y+14, r12	; 0x0e
     556:	60 96       	adiw	r28, 0x10	; 16
     558:	8e ac       	ldd	r8, Y+62	; 0x3e
     55a:	9f ac       	ldd	r9, Y+63	; 0x3f
     55c:	60 97       	sbiw	r28, 0x10	; 16
     55e:	62 96       	adiw	r28, 0x12	; 18
     560:	ee ac       	ldd	r14, Y+62	; 0x3e
     562:	ff ac       	ldd	r15, Y+63	; 0x3f
     564:	62 97       	sbiw	r28, 0x12	; 18
     566:	ff 8e       	std	Y+31, r15	; 0x1f
     568:	ee 8e       	std	Y+30, r14	; 0x1e
     56a:	64 96       	adiw	r28, 0x14	; 20
     56c:	2e ac       	ldd	r2, Y+62	; 0x3e
     56e:	3f ac       	ldd	r3, Y+63	; 0x3f
     570:	64 97       	sbiw	r28, 0x14	; 20
     572:	68 96       	adiw	r28, 0x18	; 24
     574:	4c ac       	ldd	r4, Y+60	; 0x3c
     576:	5d ac       	ldd	r5, Y+61	; 0x3d
     578:	6e ac       	ldd	r6, Y+62	; 0x3e
     57a:	7f ac       	ldd	r7, Y+63	; 0x3f
     57c:	68 97       	sbiw	r28, 0x18	; 24
	//-------------------------
	
	//Update timer
	rp6Data.updateSpeed = rp6Data.updateSpeed * 1000;											//Multiply the update speed with 1000 to go from milliseconds to microseconds
	
	if(updateTimer > micros()){																	//Only execute motor update code if the timer has passed
     57e:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
     582:	a0 90 7c 00 	lds	r10, 0x007C	; 0x80007c <updateTimer.1995>
     586:	b0 90 7d 00 	lds	r11, 0x007D	; 0x80007d <updateTimer.1995+0x1>
     58a:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <updateTimer.1995+0x2>
     58e:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <updateTimer.1995+0x3>
     592:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <updateTimer.1995+0x4>
     596:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <updateTimer.1995+0x5>
     59a:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <updateTimer.1995+0x6>
     59e:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <updateTimer.1995+0x7>
     5a2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
     5a6:	08 f4       	brcc	.+2      	; 0x5aa <motorDriver+0xac>
     5a8:	9c c5       	rjmp	.+2872   	; 0x10e2 <__stack+0x883>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;												//If the timer has passed, set new timer and execute the code
     5aa:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
     5ae:	a2 2e       	mov	r10, r18
     5b0:	b3 2e       	mov	r11, r19
     5b2:	c4 2e       	mov	r12, r20
     5b4:	d5 2e       	mov	r13, r21
     5b6:	e6 2f       	mov	r30, r22
     5b8:	f7 2f       	mov	r31, r23
     5ba:	8e 8b       	std	Y+22, r24	; 0x16
     5bc:	98 a3       	std	Y+32, r25	; 0x20
     5be:	a8 ee       	ldi	r26, 0xE8	; 232
     5c0:	b3 e0       	ldi	r27, 0x03	; 3
     5c2:	a3 01       	movw	r20, r6
     5c4:	92 01       	movw	r18, r4
     5c6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__muluhisi3>
     5ca:	7b 01       	movw	r14, r22
     5cc:	8c 01       	movw	r16, r24
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	a9 01       	movw	r20, r18
     5d4:	2d 83       	std	Y+5, r18	; 0x05
     5d6:	3e 83       	std	Y+6, r19	; 0x06
     5d8:	4f 83       	std	Y+7, r20	; 0x07
     5da:	58 87       	std	Y+8, r21	; 0x08
     5dc:	26 2f       	mov	r18, r22
     5de:	3f 2d       	mov	r19, r15
     5e0:	40 2f       	mov	r20, r16
     5e2:	51 2f       	mov	r21, r17
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	ee 2e       	mov	r14, r30
     5ee:	ff 2e       	mov	r15, r31
     5f0:	0e 89       	ldd	r16, Y+22	; 0x16
     5f2:	18 a1       	ldd	r17, Y+32	; 0x20
     5f4:	0e 94 8d 0b 	call	0x171a	; 0x171a <__adddi3>
     5f8:	52 2e       	mov	r5, r18
     5fa:	63 2e       	mov	r6, r19
     5fc:	74 2e       	mov	r7, r20
     5fe:	5e 8b       	std	Y+22, r21	; 0x16
     600:	68 a3       	std	Y+32, r22	; 0x20
     602:	79 a3       	std	Y+33, r23	; 0x21
     604:	8a a3       	std	Y+34, r24	; 0x22
     606:	9b a3       	std	Y+35, r25	; 0x23
     608:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.1995>
     60c:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.1995+0x1>
     610:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.1995+0x2>
     614:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.1995+0x3>
     618:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.1995+0x4>
     61c:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.1995+0x5>
     620:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.1995+0x6>
     624:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.1995+0x7>
	}
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;									//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     628:	a0 e0       	ldi	r26, 0x00	; 0
     62a:	b4 e6       	ldi	r27, 0x64	; 100
     62c:	2a 85       	ldd	r18, Y+10	; 0x0a
     62e:	3b 85       	ldd	r19, Y+11	; 0x0b
     630:	4c 85       	ldd	r20, Y+12	; 0x0c
     632:	5d 85       	ldd	r21, Y+13	; 0x0d
     634:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__muluhisi3>
     638:	24 e6       	ldi	r18, 0x64	; 100
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	0e 94 47 0b 	call	0x168e	; 0x168e <__udivmodsi4>
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}				//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive
     644:	c1 01       	movw	r24, r2
     646:	a0 e0       	ldi	r26, 0x00	; 0
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	28 17       	cp	r18, r24
     64c:	39 07       	cpc	r19, r25
     64e:	4a 07       	cpc	r20, r26
     650:	5b 07       	cpc	r21, r27
     652:	18 f4       	brcc	.+6      	; 0x65a <motorDriver+0x15c>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	a9 01       	movw	r20, r18
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){				//If the drive direction differs from what we are currently driving and we are not standing still
     65a:	f9 84       	ldd	r15, Y+9	; 0x09
     65c:	ef 2d       	mov	r30, r15
     65e:	ff 0c       	add	r15, r15
     660:	ff 0b       	sbc	r31, r31
     662:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1996>
     666:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1996+0x1>
     66a:	e8 17       	cp	r30, r24
     66c:	f9 07       	cpc	r31, r25
     66e:	91 f1       	breq	.+100    	; 0x6d4 <motorDriver+0x1d6>
     670:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <currentDriveSpeed.1999>
     674:	09 83       	std	Y+1, r16	; 0x01
     676:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <currentDriveSpeed.1999+0x1>
     67a:	1a 83       	std	Y+2, r17	; 0x02
     67c:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <currentDriveSpeed.1999+0x2>
     680:	2b 83       	std	Y+3, r18	; 0x03
     682:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <currentDriveSpeed.1999+0x3>
     686:	3c 83       	std	Y+4, r19	; 0x04
     688:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <currentDriveSpeed.1999+0x4>
     68c:	4d 83       	std	Y+5, r20	; 0x05
     68e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <currentDriveSpeed.1999+0x5>
     692:	5e 83       	std	Y+6, r21	; 0x06
     694:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <currentDriveSpeed.1999+0x6>
     698:	6f 83       	std	Y+7, r22	; 0x07
     69a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <currentDriveSpeed.1999+0x7>
     69e:	78 87       	std	Y+8, r23	; 0x08
     6a0:	20 2f       	mov	r18, r16
     6a2:	31 2f       	mov	r19, r17
     6a4:	4b 81       	ldd	r20, Y+3	; 0x03
     6a6:	5c 81       	ldd	r21, Y+4	; 0x04
     6a8:	6d 81       	ldd	r22, Y+5	; 0x05
     6aa:	7e 81       	ldd	r23, Y+6	; 0x06
     6ac:	8f 81       	ldd	r24, Y+7	; 0x07
     6ae:	98 85       	ldd	r25, Y+8	; 0x08
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__cmpdi2_s8>
     6b6:	59 f4       	brne	.+22     	; 0x6ce <motorDriver+0x1d0>
		rp6Data.driveSpeed = 0;																		//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){		//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;												//Reverse the driving direction
     6b8:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.1996+0x1>
     6bc:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.1996>
		rp6Data.driveSpeed = 0;																		//And remain stationary for this update cycle
	}
	
	//Smoothly adjust current drive speed to requested drive speed
	if(rp6Data.accelerationRate >= 5000){														//If the acceleration rate has been set to 5000 or more, smooth acceleration is disabled and the current drive speed is set to the requested speed straight away
     6c0:	88 e8       	ldi	r24, 0x88	; 136
     6c2:	88 16       	cp	r8, r24
     6c4:	83 e1       	ldi	r24, 0x13	; 19
     6c6:	98 06       	cpc	r9, r24
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <motorDriver+0x1ce>
     6ca:	71 c0       	rjmp	.+226    	; 0x7ae <motorDriver+0x2b0>
     6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <motorDriver+0x1e2>
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;									//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}				//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){				//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																		//Set the requested speed to 0
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	a9 01       	movw	r20, r18
		currentDriveDirection = rp6Data.driveDirection;												//Reverse the driving direction
		rp6Data.driveSpeed = 0;																		//And remain stationary for this update cycle
	}
	
	//Smoothly adjust current drive speed to requested drive speed
	if(rp6Data.accelerationRate >= 5000){														//If the acceleration rate has been set to 5000 or more, smooth acceleration is disabled and the current drive speed is set to the requested speed straight away
     6d4:	98 e8       	ldi	r25, 0x88	; 136
     6d6:	89 16       	cp	r8, r25
     6d8:	93 e1       	ldi	r25, 0x13	; 19
     6da:	99 06       	cpc	r9, r25
     6dc:	b8 f0       	brcs	.+46     	; 0x70c <motorDriver+0x20e>
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <motorDriver+0x1e8>
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){				//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																		//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){		//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;												//Reverse the driving direction
		rp6Data.driveSpeed = 0;																		//And remain stationary for this update cycle
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
	}
	
	//Smoothly adjust current drive speed to requested drive speed
	if(rp6Data.accelerationRate >= 5000){														//If the acceleration rate has been set to 5000 or more, smooth acceleration is disabled and the current drive speed is set to the requested speed straight away
		currentDriveSpeed = rp6Data.driveSpeed;														//Set the current drive speed
     6e6:	89 01       	movw	r16, r18
     6e8:	9a 01       	movw	r18, r20
     6ea:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <currentDriveSpeed.1999>
     6ee:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <currentDriveSpeed.1999+0x1>
     6f2:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <currentDriveSpeed.1999+0x2>
     6f6:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <currentDriveSpeed.1999+0x3>
     6fa:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.1999+0x4>
     6fe:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.1999+0x5>
     702:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.1999+0x6>
     706:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.1999+0x7>
     70a:	94 c1       	rjmp	.+808    	; 0xa34 <__stack+0x1d5>
	}else{																						//If a regular acceleration rate is set
		speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));					//Calculate the speed difference (always positive)
     70c:	59 01       	movw	r10, r18
     70e:	6a 01       	movw	r12, r20
     710:	e1 2c       	mov	r14, r1
     712:	f1 2c       	mov	r15, r1
     714:	87 01       	movw	r16, r14
     716:	29 83       	std	Y+1, r18	; 0x01
     718:	ba 82       	std	Y+2, r11	; 0x02
     71a:	cb 82       	std	Y+3, r12	; 0x03
     71c:	dc 82       	std	Y+4, r13	; 0x04
     71e:	ed 82       	std	Y+5, r14	; 0x05
     720:	fe 82       	std	Y+6, r15	; 0x06
     722:	0f 83       	std	Y+7, r16	; 0x07
     724:	18 87       	std	Y+8, r17	; 0x08
     726:	b0 90 74 00 	lds	r11, 0x0074	; 0x800074 <currentDriveSpeed.1999>
     72a:	b9 86       	std	Y+9, r11	; 0x09
     72c:	c0 90 75 00 	lds	r12, 0x0075	; 0x800075 <currentDriveSpeed.1999+0x1>
     730:	ca 86       	std	Y+10, r12	; 0x0a
     732:	d0 90 76 00 	lds	r13, 0x0076	; 0x800076 <currentDriveSpeed.1999+0x2>
     736:	dc a6       	std	Y+44, r13	; 0x2c
     738:	e0 90 77 00 	lds	r14, 0x0077	; 0x800077 <currentDriveSpeed.1999+0x3>
     73c:	ed a6       	std	Y+45, r14	; 0x2d
     73e:	f0 90 78 00 	lds	r15, 0x0078	; 0x800078 <currentDriveSpeed.1999+0x4>
     742:	fe a6       	std	Y+46, r15	; 0x2e
     744:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <currentDriveSpeed.1999+0x5>
     748:	0f a7       	std	Y+47, r16	; 0x2f
     74a:	10 91 7a 00 	lds	r17, 0x007A	; 0x80007a <currentDriveSpeed.1999+0x6>
     74e:	18 ab       	std	Y+48, r17	; 0x30
     750:	40 90 7b 00 	lds	r4, 0x007B	; 0x80007b <currentDriveSpeed.1999+0x7>
     754:	2a 2d       	mov	r18, r10
     756:	3a 81       	ldd	r19, Y+2	; 0x02
     758:	4b 81       	ldd	r20, Y+3	; 0x03
     75a:	5c 81       	ldd	r21, Y+4	; 0x04
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	ab 2c       	mov	r10, r11
     766:	bc 2c       	mov	r11, r12
     768:	cd 2c       	mov	r12, r13
     76a:	de 2c       	mov	r13, r14
     76c:	ef 2c       	mov	r14, r15
     76e:	f0 2e       	mov	r15, r16
     770:	01 2f       	mov	r16, r17
     772:	14 2d       	mov	r17, r4
     774:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__subdi3>
     778:	2c a3       	std	Y+36, r18	; 0x24
     77a:	39 ab       	std	Y+49, r19	; 0x31
     77c:	4a ab       	std	Y+50, r20	; 0x32
     77e:	5b ab       	std	Y+51, r21	; 0x33
     780:	a6 2e       	mov	r10, r22
     782:	b7 2e       	mov	r11, r23
     784:	08 2f       	mov	r16, r24
     786:	19 2f       	mov	r17, r25
     788:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__floatdisf>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	a7 01       	movw	r20, r14
     792:	96 01       	movw	r18, r12
     794:	c7 01       	movw	r24, r14
     796:	b6 01       	movw	r22, r12
     798:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     79c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <sqrt>
	
		if(speedDifference < 2000){																	//If the difference is less than 2000
     7a0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fixunssfsi>
     7a4:	60 3d       	cpi	r22, 0xD0	; 208
     7a6:	77 40       	sbci	r23, 0x07	; 7
     7a8:	81 05       	cpc	r24, r1
     7aa:	91 05       	cpc	r25, r1
     7ac:	c8 f4       	brcc	.+50     	; 0x7e0 <motorDriver+0x2e2>
			currentDriveSpeed = rp6Data.driveSpeed;														//Set the current speed to the requested value
     7ae:	39 81       	ldd	r19, Y+1	; 0x01
     7b0:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <currentDriveSpeed.1999>
     7b4:	4a 81       	ldd	r20, Y+2	; 0x02
     7b6:	40 93 75 00 	sts	0x0075, r20	; 0x800075 <currentDriveSpeed.1999+0x1>
     7ba:	5b 81       	ldd	r21, Y+3	; 0x03
     7bc:	50 93 76 00 	sts	0x0076, r21	; 0x800076 <currentDriveSpeed.1999+0x2>
     7c0:	6c 81       	ldd	r22, Y+4	; 0x04
     7c2:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <currentDriveSpeed.1999+0x3>
     7c6:	7d 81       	ldd	r23, Y+5	; 0x05
     7c8:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <currentDriveSpeed.1999+0x4>
     7cc:	8e 81       	ldd	r24, Y+6	; 0x06
     7ce:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <currentDriveSpeed.1999+0x5>
     7d2:	9f 81       	ldd	r25, Y+7	; 0x07
     7d4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <currentDriveSpeed.1999+0x6>
     7d8:	a8 85       	ldd	r26, Y+8	; 0x08
     7da:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <currentDriveSpeed.1999+0x7>
     7de:	2a c1       	rjmp	.+596    	; 0xa34 <__stack+0x1d5>
		}else{																						//If the difference is more than 2000
			if(rp6Data.driveSpeed - currentDriveSpeed < 0){												//Check if we need to accelerate or decelerate, if we need to decelerate
     7e0:	2c a1       	ldd	r18, Y+36	; 0x24
     7e2:	39 a9       	ldd	r19, Y+49	; 0x31
     7e4:	4a a9       	ldd	r20, Y+50	; 0x32
     7e6:	5b a9       	ldd	r21, Y+51	; 0x33
     7e8:	6a 2d       	mov	r22, r10
     7ea:	7b 2d       	mov	r23, r11
     7ec:	80 2f       	mov	r24, r16
     7ee:	91 2f       	mov	r25, r17
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__cmpdi2_s8>
     7f6:	0c f0       	brlt	.+2      	; 0x7fa <motorDriver+0x2fc>
     7f8:	63 c0       	rjmp	.+198    	; 0x8c0 <__stack+0x61>
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){										//If the speed is less than the threshold
     7fa:	51 01       	movw	r10, r2
     7fc:	c1 2c       	mov	r12, r1
     7fe:	d1 2c       	mov	r13, r1
     800:	e1 2c       	mov	r14, r1
     802:	f1 2c       	mov	r15, r1
     804:	87 01       	movw	r16, r14
     806:	29 85       	ldd	r18, Y+9	; 0x09
     808:	3a 85       	ldd	r19, Y+10	; 0x0a
     80a:	4c a5       	ldd	r20, Y+44	; 0x2c
     80c:	5d a5       	ldd	r21, Y+45	; 0x2d
     80e:	6e a5       	ldd	r22, Y+46	; 0x2e
     810:	7f a5       	ldd	r23, Y+47	; 0x2f
     812:	88 a9       	ldd	r24, Y+48	; 0x30
     814:	94 2d       	mov	r25, r4
     816:	2c a2       	std	Y+36, r2	; 0x24
     818:	bd a2       	std	Y+37, r11	; 0x25
     81a:	ce a2       	std	Y+38, r12	; 0x26
     81c:	df a2       	std	Y+39, r13	; 0x27
     81e:	e8 a6       	std	Y+40, r14	; 0x28
     820:	f9 a6       	std	Y+41, r15	; 0x29
     822:	0a a7       	std	Y+42, r16	; 0x2a
     824:	1b a7       	std	Y+43, r17	; 0x2b
     826:	c1 2c       	mov	r12, r1
     828:	d1 2c       	mov	r13, r1
     82a:	e1 2c       	mov	r14, r1
     82c:	f1 2c       	mov	r15, r1
     82e:	00 e0       	ldi	r16, 0x00	; 0
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
     836:	cc f4       	brge	.+50     	; 0x86a <__stack+0xb>
					currentDriveSpeed = rp6Data.driveSpeed;														//Set the speed to the requested value (Probably 0)
     838:	b9 81       	ldd	r27, Y+1	; 0x01
     83a:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.1999>
     83e:	ea 81       	ldd	r30, Y+2	; 0x02
     840:	e0 93 75 00 	sts	0x0075, r30	; 0x800075 <currentDriveSpeed.1999+0x1>
     844:	ab 80       	ldd	r10, Y+3	; 0x03
     846:	a0 92 76 00 	sts	0x0076, r10	; 0x800076 <currentDriveSpeed.1999+0x2>
     84a:	bc 80       	ldd	r11, Y+4	; 0x04
     84c:	b0 92 77 00 	sts	0x0077, r11	; 0x800077 <currentDriveSpeed.1999+0x3>
     850:	cd 80       	ldd	r12, Y+5	; 0x05
     852:	c0 92 78 00 	sts	0x0078, r12	; 0x800078 <currentDriveSpeed.1999+0x4>
     856:	de 80       	ldd	r13, Y+6	; 0x06
     858:	d0 92 79 00 	sts	0x0079, r13	; 0x800079 <currentDriveSpeed.1999+0x5>
     85c:	ef 80       	ldd	r14, Y+7	; 0x07
     85e:	e0 92 7a 00 	sts	0x007A, r14	; 0x80007a <currentDriveSpeed.1999+0x6>
     862:	f8 84       	ldd	r15, Y+8	; 0x08
     864:	f0 92 7b 00 	sts	0x007B, r15	; 0x80007b <currentDriveSpeed.1999+0x7>
     868:	e5 c0       	rjmp	.+458    	; 0xa34 <__stack+0x1d5>
				}else{																						//If the current speed is higher than the threshold
					currentDriveSpeed -= rp6Data.accelerationRate;												//Decelerate with the set acceleration rate
     86a:	84 01       	movw	r16, r8
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	ba 01       	movw	r22, r20
     872:	4d 83       	std	Y+5, r20	; 0x05
     874:	5e 83       	std	Y+6, r21	; 0x06
     876:	6f 83       	std	Y+7, r22	; 0x07
     878:	78 87       	std	Y+8, r23	; 0x08
     87a:	29 85       	ldd	r18, Y+9	; 0x09
     87c:	3a 85       	ldd	r19, Y+10	; 0x0a
     87e:	4c a5       	ldd	r20, Y+44	; 0x2c
     880:	5d a5       	ldd	r21, Y+45	; 0x2d
     882:	6e a5       	ldd	r22, Y+46	; 0x2e
     884:	7f a5       	ldd	r23, Y+47	; 0x2f
     886:	88 a9       	ldd	r24, Y+48	; 0x30
     888:	94 2d       	mov	r25, r4
     88a:	a8 2c       	mov	r10, r8
     88c:	b1 2e       	mov	r11, r17
     88e:	c1 2c       	mov	r12, r1
     890:	d1 2c       	mov	r13, r1
     892:	e1 2c       	mov	r14, r1
     894:	f1 2c       	mov	r15, r1
     896:	00 e0       	ldi	r16, 0x00	; 0
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__subdi3>
     89e:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.1999>
     8a2:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.1999+0x1>
     8a6:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.1999+0x2>
     8aa:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.1999+0x3>
     8ae:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.1999+0x4>
     8b2:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.1999+0x5>
     8b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.1999+0x6>
     8ba:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.1999+0x7>
     8be:	ba c0       	rjmp	.+372    	; 0xa34 <__stack+0x1d5>
				}
			}else{																						//If we need to accelerate
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){										//And we are still at a speed lower than the threshold
     8c0:	91 01       	movw	r18, r2
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	cb 01       	movw	r24, r22
     8cc:	2c a2       	std	Y+36, r2	; 0x24
     8ce:	3d a3       	std	Y+37, r19	; 0x25
     8d0:	4e a3       	std	Y+38, r20	; 0x26
     8d2:	5f a3       	std	Y+39, r21	; 0x27
     8d4:	68 a7       	std	Y+40, r22	; 0x28
     8d6:	79 a7       	std	Y+41, r23	; 0x29
     8d8:	8a a7       	std	Y+42, r24	; 0x2a
     8da:	9b a7       	std	Y+43, r25	; 0x2b
     8dc:	29 85       	ldd	r18, Y+9	; 0x09
     8de:	3a 85       	ldd	r19, Y+10	; 0x0a
     8e0:	4c a5       	ldd	r20, Y+44	; 0x2c
     8e2:	5d a5       	ldd	r21, Y+45	; 0x2d
     8e4:	6e a5       	ldd	r22, Y+46	; 0x2e
     8e6:	7f a5       	ldd	r23, Y+47	; 0x2f
     8e8:	88 a9       	ldd	r24, Y+48	; 0x30
     8ea:	94 2d       	mov	r25, r4
     8ec:	ac a0       	ldd	r10, Y+36	; 0x24
     8ee:	bd a0       	ldd	r11, Y+37	; 0x25
     8f0:	c1 2c       	mov	r12, r1
     8f2:	d1 2c       	mov	r13, r1
     8f4:	e1 2c       	mov	r14, r1
     8f6:	f1 2c       	mov	r15, r1
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
     900:	9c f4       	brge	.+38     	; 0x928 <__stack+0xc9>
					currentDriveSpeed += rp6Data.driveSpeedThreshold;											//Speed up with the minimum threshold
     902:	0e 94 8d 0b 	call	0x171a	; 0x171a <__adddi3>
     906:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.1999>
     90a:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.1999+0x1>
     90e:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.1999+0x2>
     912:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.1999+0x3>
     916:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.1999+0x4>
     91a:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.1999+0x5>
     91e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.1999+0x6>
     922:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.1999+0x7>
     926:	86 c0       	rjmp	.+268    	; 0xa34 <__stack+0x1d5>
				}else{																						//If we are at a speed higher than the threshold
					if(currentDriveSpeed < 7000){currentDriveSpeed += rp6Data.accelerationRate/4;}				//Accelerate slower when the speed is low
     928:	29 85       	ldd	r18, Y+9	; 0x09
     92a:	3a 85       	ldd	r19, Y+10	; 0x0a
     92c:	4c a5       	ldd	r20, Y+44	; 0x2c
     92e:	5d a5       	ldd	r21, Y+45	; 0x2d
     930:	6e a5       	ldd	r22, Y+46	; 0x2e
     932:	7f a5       	ldd	r23, Y+47	; 0x2f
     934:	88 a9       	ldd	r24, Y+48	; 0x30
     936:	94 2d       	mov	r25, r4
     938:	27 35       	cpi	r18, 0x57	; 87
     93a:	3b 41       	sbci	r19, 0x1B	; 27
     93c:	41 05       	cpc	r20, r1
     93e:	51 05       	cpc	r21, r1
     940:	61 05       	cpc	r22, r1
     942:	71 05       	cpc	r23, r1
     944:	81 05       	cpc	r24, r1
     946:	91 05       	cpc	r25, r1
     948:	09 f0       	breq	.+2      	; 0x94c <__stack+0xed>
     94a:	3c f5       	brge	.+78     	; 0x99a <__stack+0x13b>
     94c:	96 94       	lsr	r9
     94e:	87 94       	ror	r8
     950:	96 94       	lsr	r9
     952:	87 94       	ror	r8
     954:	28 2d       	mov	r18, r8
     956:	39 2d       	mov	r19, r9
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a9 84       	ldd	r10, Y+9	; 0x09
     966:	ba 84       	ldd	r11, Y+10	; 0x0a
     968:	cc a4       	ldd	r12, Y+44	; 0x2c
     96a:	dd a4       	ldd	r13, Y+45	; 0x2d
     96c:	ee a4       	ldd	r14, Y+46	; 0x2e
     96e:	ff a4       	ldd	r15, Y+47	; 0x2f
     970:	08 a9       	ldd	r16, Y+48	; 0x30
     972:	14 2d       	mov	r17, r4
     974:	0e 94 8d 0b 	call	0x171a	; 0x171a <__adddi3>
     978:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.1999>
     97c:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.1999+0x1>
     980:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.1999+0x2>
     984:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.1999+0x3>
     988:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.1999+0x4>
     98c:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.1999+0x5>
     990:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.1999+0x6>
     994:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.1999+0x7>
     998:	22 c0       	rjmp	.+68     	; 0x9de <__stack+0x17f>
					else{currentDriveSpeed += rp6Data.accelerationRate;}										//Accelerate with the set acceleration rate
     99a:	28 2d       	mov	r18, r8
     99c:	39 2d       	mov	r19, r9
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a9 84       	ldd	r10, Y+9	; 0x09
     9ac:	ba 84       	ldd	r11, Y+10	; 0x0a
     9ae:	cc a4       	ldd	r12, Y+44	; 0x2c
     9b0:	dd a4       	ldd	r13, Y+45	; 0x2d
     9b2:	ee a4       	ldd	r14, Y+46	; 0x2e
     9b4:	ff a4       	ldd	r15, Y+47	; 0x2f
     9b6:	08 a9       	ldd	r16, Y+48	; 0x30
     9b8:	14 2d       	mov	r17, r4
     9ba:	0e 94 8d 0b 	call	0x171a	; 0x171a <__adddi3>
     9be:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.1999>
     9c2:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.1999+0x1>
     9c6:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.1999+0x2>
     9ca:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.1999+0x3>
     9ce:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.1999+0x4>
     9d2:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.1999+0x5>
     9d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.1999+0x6>
     9da:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.1999+0x7>
					if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}			//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     9de:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <currentDriveSpeed.1999>
     9e2:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <currentDriveSpeed.1999+0x1>
     9e6:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <currentDriveSpeed.1999+0x2>
     9ea:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <currentDriveSpeed.1999+0x3>
     9ee:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <currentDriveSpeed.1999+0x4>
     9f2:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <currentDriveSpeed.1999+0x5>
     9f6:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <currentDriveSpeed.1999+0x6>
     9fa:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <currentDriveSpeed.1999+0x7>
     9fe:	29 81       	ldd	r18, Y+1	; 0x01
     a00:	3a 81       	ldd	r19, Y+2	; 0x02
     a02:	4b 81       	ldd	r20, Y+3	; 0x03
     a04:	5c 81       	ldd	r21, Y+4	; 0x04
     a06:	6d 81       	ldd	r22, Y+5	; 0x05
     a08:	7e 81       	ldd	r23, Y+6	; 0x06
     a0a:	8f 81       	ldd	r24, Y+7	; 0x07
     a0c:	98 85       	ldd	r25, Y+8	; 0x08
     a0e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
     a12:	84 f4       	brge	.+32     	; 0xa34 <__stack+0x1d5>
     a14:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.1999>
     a18:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.1999+0x1>
     a1c:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.1999+0x2>
     a20:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.1999+0x3>
     a24:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.1999+0x4>
     a28:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.1999+0x5>
     a2c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.1999+0x6>
     a30:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.1999+0x7>
			}
		}
	}
	
	//Middle safety check
	if(currentDriveSpeed < 0){					//If the current drive speed is somehow lower than 0
     a34:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <currentDriveSpeed.1999>
     a38:	e0 90 75 00 	lds	r14, 0x0075	; 0x800075 <currentDriveSpeed.1999+0x1>
     a3c:	f0 90 76 00 	lds	r15, 0x0076	; 0x800076 <currentDriveSpeed.1999+0x2>
     a40:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <currentDriveSpeed.1999+0x3>
     a44:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <currentDriveSpeed.1999+0x4>
     a48:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <currentDriveSpeed.1999+0x5>
     a4c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <currentDriveSpeed.1999+0x6>
     a50:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <currentDriveSpeed.1999+0x7>
     a54:	2d 2d       	mov	r18, r13
     a56:	3e 2d       	mov	r19, r14
     a58:	4f 2d       	mov	r20, r15
     a5a:	50 2f       	mov	r21, r16
     a5c:	61 2f       	mov	r22, r17
     a5e:	7b 2f       	mov	r23, r27
     a60:	8f 2f       	mov	r24, r31
     a62:	9e 2f       	mov	r25, r30
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__cmpdi2_s8>
     a6a:	8c f4       	brge	.+34     	; 0xa8e <__stack+0x22f>
		currentDriveSpeed = 0;						//Set it back to 0
     a6c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <currentDriveSpeed.1999>
     a70:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <currentDriveSpeed.1999+0x1>
     a74:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <currentDriveSpeed.1999+0x2>
     a78:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <currentDriveSpeed.1999+0x3>
     a7c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.1999+0x4>
     a80:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.1999+0x5>
     a84:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.1999+0x6>
     a88:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.1999+0x7>
     a8c:	23 c0       	rjmp	.+70     	; 0xad4 <__stack+0x275>
	}else if(currentDriveSpeed > 25600){		//If it is higher than the max allowed value
     a8e:	2d 2d       	mov	r18, r13
     a90:	3e 2d       	mov	r19, r14
     a92:	4f 2d       	mov	r20, r15
     a94:	50 2f       	mov	r21, r16
     a96:	61 2f       	mov	r22, r17
     a98:	7b 2f       	mov	r23, r27
     a9a:	8f 2f       	mov	r24, r31
     a9c:	9e 2f       	mov	r25, r30
     a9e:	21 15       	cp	r18, r1
     aa0:	34 46       	sbci	r19, 0x64	; 100
     aa2:	41 05       	cpc	r20, r1
     aa4:	51 05       	cpc	r21, r1
     aa6:	61 05       	cpc	r22, r1
     aa8:	71 05       	cpc	r23, r1
     aaa:	81 05       	cpc	r24, r1
     aac:	91 05       	cpc	r25, r1
     aae:	91 f0       	breq	.+36     	; 0xad4 <__stack+0x275>
     ab0:	8c f0       	brlt	.+34     	; 0xad4 <__stack+0x275>
		currentDriveSpeed = 25600;					//Set it back to the max allowed value
     ab2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <currentDriveSpeed.1999>
     ab6:	84 e6       	ldi	r24, 0x64	; 100
     ab8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <currentDriveSpeed.1999+0x1>
     abc:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <currentDriveSpeed.1999+0x2>
     ac0:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <currentDriveSpeed.1999+0x3>
     ac4:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.1999+0x4>
     ac8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.1999+0x5>
     acc:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.1999+0x6>
     ad0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.1999+0x7>
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     ad4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1996>
     ad8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1996+0x1>
     adc:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2000+0x1>
     ae0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2000>
	rightMotorDirection = currentDriveDirection;
     ae4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     ae8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     aec:	90 90 74 00 	lds	r9, 0x0074	; 0x800074 <currentDriveSpeed.1999>
     af0:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <currentDriveSpeed.1999+0x1>
     af4:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <currentDriveSpeed.1999+0x2>
     af8:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <currentDriveSpeed.1999+0x3>
     afc:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <currentDriveSpeed.1999+0x4>
     b00:	19 87       	std	Y+9, r17	; 0x09
     b02:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <currentDriveSpeed.1999+0x5>
     b06:	2a 87       	std	Y+10, r18	; 0x0a
     b08:	80 90 7a 00 	lds	r8, 0x007A	; 0x80007a <currentDriveSpeed.1999+0x6>
     b0c:	40 90 7b 00 	lds	r4, 0x007B	; 0x80007b <currentDriveSpeed.1999+0x7>
     b10:	99 82       	std	Y+1, r9	; 0x01
     b12:	ba 83       	std	Y+2, r27	; 0x02
     b14:	fb 83       	std	Y+3, r31	; 0x03
     b16:	ec 83       	std	Y+4, r30	; 0x04
     b18:	90 92 70 00 	sts	0x0070, r9	; 0x800070 <leftMotorSpeed.2002>
     b1c:	b0 93 71 00 	sts	0x0071, r27	; 0x800071 <leftMotorSpeed.2002+0x1>
     b20:	f0 93 72 00 	sts	0x0072, r31	; 0x800072 <leftMotorSpeed.2002+0x2>
     b24:	e0 93 73 00 	sts	0x0073, r30	; 0x800073 <leftMotorSpeed.2002+0x3>
	rightMotorSpeed = currentDriveSpeed;
     b28:	90 92 6c 00 	sts	0x006C, r9	; 0x80006c <rightMotorSpeed.2003>
     b2c:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <rightMotorSpeed.2003+0x1>
     b30:	f0 93 6e 00 	sts	0x006E, r31	; 0x80006e <rightMotorSpeed.2003+0x2>
     b34:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <rightMotorSpeed.2003+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){												//If the turn direction is changed
     b38:	3e 85       	ldd	r19, Y+14	; 0x0e
     b3a:	83 2f       	mov	r24, r19
     b3c:	33 0f       	add	r19, r19
     b3e:	99 0b       	sbc	r25, r25
     b40:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <currentTurnDirection.1997>
     b44:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <currentTurnDirection.1997+0x1>
     b48:	82 17       	cp	r24, r18
     b4a:	93 07       	cpc	r25, r19
     b4c:	29 f1       	breq	.+74     	; 0xb98 <__stack+0x339>
		
		leftMotorSpeed = currentDriveSpeed;																//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;															//---^
		currentTurnDirection = rp6Data.turnDirection;													//Set the new turn direction
     b4e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <currentTurnDirection.1997+0x1>
     b52:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentTurnDirection.1997>
		updateTimer += 100000;																			//Add an extra delay to decrease wear and tear on the gears
     b56:	25 2d       	mov	r18, r5
     b58:	36 2d       	mov	r19, r6
     b5a:	47 2d       	mov	r20, r7
     b5c:	5e 89       	ldd	r21, Y+22	; 0x16
     b5e:	68 a1       	ldd	r22, Y+32	; 0x20
     b60:	79 a1       	ldd	r23, Y+33	; 0x21
     b62:	8a a1       	ldd	r24, Y+34	; 0x22
     b64:	9b a1       	ldd	r25, Y+35	; 0x23
     b66:	20 56       	subi	r18, 0x60	; 96
     b68:	39 47       	sbci	r19, 0x79	; 121
     b6a:	4e 4f       	sbci	r20, 0xFE	; 254
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	6f 4f       	sbci	r22, 0xFF	; 255
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.1995>
     b7a:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.1995+0x1>
     b7e:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.1995+0x2>
     b82:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.1995+0x3>
     b86:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.1995+0x4>
     b8a:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.1995+0x5>
     b8e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.1995+0x6>
     b92:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.1995+0x7>
     b96:	26 c2       	rjmp	.+1100   	; 0xfe4 <__stack+0x785>
		
	}else if(currentTurnDirection == -1){															//If the turn direction is -1, we go left
     b98:	8f 3f       	cpi	r24, 0xFF	; 255
     b9a:	4f ef       	ldi	r20, 0xFF	; 255
     b9c:	94 07       	cpc	r25, r20
     b9e:	09 f0       	breq	.+2      	; 0xba2 <__stack+0x343>
     ba0:	0f c1       	rjmp	.+542    	; 0xdc0 <__stack+0x561>
		
		if(currentDriveSpeed == 0){																		//If the speed is 0, we need to turn around our axle
     ba2:	29 2d       	mov	r18, r9
     ba4:	3b 2f       	mov	r19, r27
     ba6:	4f 2f       	mov	r20, r31
     ba8:	5e 2f       	mov	r21, r30
     baa:	69 85       	ldd	r22, Y+9	; 0x09
     bac:	7a 85       	ldd	r23, Y+10	; 0x0a
     bae:	88 2d       	mov	r24, r8
     bb0:	94 2d       	mov	r25, r4
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__cmpdi2_s8>
     bb8:	31 f5       	brne	.+76     	; 0xc06 <__stack+0x3a7>
			leftMotorDirection = 0;																			//Turn the left motor backwards
     bba:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2000+0x1>
     bbe:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2000>
			rightMotorDirection = 1;																		//Turn the right motor forwards
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     bca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);					//Set the speed to minimal + a little extra for compensation + half the turn rate
     bce:	2e 8d       	ldd	r18, Y+30	; 0x1e
     bd0:	3f 8d       	ldd	r19, Y+31	; 0x1f
     bd2:	36 95       	lsr	r19
     bd4:	27 95       	ror	r18
     bd6:	c1 01       	movw	r24, r2
     bd8:	80 53       	subi	r24, 0x30	; 48
     bda:	98 4f       	sbci	r25, 0xF8	; 248
     bdc:	82 0f       	add	r24, r18
     bde:	93 1f       	adc	r25, r19
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     be8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     bec:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     bf0:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);					//---^
     bf4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     bf8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     bfc:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     c00:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
     c04:	0f c2       	rjmp	.+1054   	; 0x1024 <__stack+0x7c5>
		}else{																							//If we are driving (Forward or backwards does not matter)
			if((currentDriveSpeed - rp6Data.turnRate) < (rp6Data.driveSpeedThreshold + 2000)){				//If the current drive speed minus the turn rate is lower than the threshold (with compensation)
     c06:	ce 8c       	ldd	r12, Y+30	; 0x1e
     c08:	df 8c       	ldd	r13, Y+31	; 0x1f
     c0a:	56 01       	movw	r10, r12
     c0c:	c1 2c       	mov	r12, r1
     c0e:	d1 2c       	mov	r13, r1
     c10:	e1 2c       	mov	r14, r1
     c12:	f1 2c       	mov	r15, r1
     c14:	87 01       	movw	r16, r14
     c16:	ae 86       	std	Y+14, r10	; 0x0e
     c18:	bf 86       	std	Y+15, r11	; 0x0f
     c1a:	c8 8a       	std	Y+16, r12	; 0x10
     c1c:	d9 8a       	std	Y+17, r13	; 0x11
     c1e:	ea 8a       	std	Y+18, r14	; 0x12
     c20:	fb 8a       	std	Y+19, r15	; 0x13
     c22:	0c 8b       	std	Y+20, r16	; 0x14
     c24:	1d 8b       	std	Y+21, r17	; 0x15
     c26:	31 01       	movw	r6, r2
     c28:	00 e3       	ldi	r16, 0x30	; 48
     c2a:	60 1a       	sub	r6, r16
     c2c:	08 ef       	ldi	r16, 0xF8	; 248
     c2e:	70 0a       	sbc	r7, r16
     c30:	29 2d       	mov	r18, r9
     c32:	3b 2f       	mov	r19, r27
     c34:	4f 2f       	mov	r20, r31
     c36:	5e 2f       	mov	r21, r30
     c38:	69 85       	ldd	r22, Y+9	; 0x09
     c3a:	7a 85       	ldd	r23, Y+10	; 0x0a
     c3c:	88 2d       	mov	r24, r8
     c3e:	94 2d       	mov	r25, r4
     c40:	c1 2c       	mov	r12, r1
     c42:	d1 2c       	mov	r13, r1
     c44:	e1 2c       	mov	r14, r1
     c46:	f1 2c       	mov	r15, r1
     c48:	00 e0       	ldi	r16, 0x00	; 0
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     c4c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__subdi3>
     c50:	53 01       	movw	r10, r6
     c52:	c1 2c       	mov	r12, r1
     c54:	d1 2c       	mov	r13, r1
     c56:	e1 2c       	mov	r14, r1
     c58:	f1 2c       	mov	r15, r1
     c5a:	87 01       	movw	r16, r14
     c5c:	6e 8a       	std	Y+22, r6	; 0x16
     c5e:	bf 8a       	std	Y+23, r11	; 0x17
     c60:	c8 8e       	std	Y+24, r12	; 0x18
     c62:	d9 8e       	std	Y+25, r13	; 0x19
     c64:	ea 8e       	std	Y+26, r14	; 0x1a
     c66:	fb 8e       	std	Y+27, r15	; 0x1b
     c68:	0c 8f       	std	Y+28, r16	; 0x1c
     c6a:	1d 8f       	std	Y+29, r17	; 0x1d
     c6c:	c1 2c       	mov	r12, r1
     c6e:	d1 2c       	mov	r13, r1
     c70:	e1 2c       	mov	r14, r1
     c72:	f1 2c       	mov	r15, r1
     c74:	00 e0       	ldi	r16, 0x00	; 0
     c76:	10 e0       	ldi	r17, 0x00	; 0
     c78:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
     c7c:	7c f5       	brge	.+94     	; 0xcdc <__stack+0x47d>
				leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000;											//Then the left motor is set on the threshold plus compensation
     c7e:	c3 01       	movw	r24, r6
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     c88:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     c8c:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     c90:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
				if((leftMotorSpeed + (rp6Data.turnRate * 2)) > 25600){											//If the left motor speed plus twice the turn rate is more than the max allowed
     c94:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c96:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c98:	22 0f       	add	r18, r18
     c9a:	33 1f       	adc	r19, r19
     c9c:	82 0f       	add	r24, r18
     c9e:	93 1f       	adc	r25, r19
     ca0:	a1 1d       	adc	r26, r1
     ca2:	b1 1d       	adc	r27, r1
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	04 e6       	ldi	r16, 0x64	; 100
     ca8:	90 07       	cpc	r25, r16
     caa:	a1 05       	cpc	r26, r1
     cac:	b1 05       	cpc	r27, r1
     cae:	68 f0       	brcs	.+26     	; 0xcca <__stack+0x46b>
					rightMotorSpeed = 25600;																		//Set the right to the max allowed
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	94 e6       	ldi	r25, 0x64	; 100
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     cbc:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     cc0:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     cc4:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
     cc8:	99 c1       	rjmp	.+818    	; 0xffc <__stack+0x79d>
				}else{																							//If not
					rightMotorSpeed = (leftMotorSpeed + (rp6Data.turnRate * 2));									//Set the right motor speed on the left plus twice the turn rate
     cca:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     cce:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     cd2:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     cd6:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
     cda:	90 c1       	rjmp	.+800    	; 0xffc <__stack+0x79d>
				}
			}else if((currentDriveSpeed + rp6Data.turnRate) > 25600){										//If the current speed plus the turn rate is more than allowed
     cdc:	29 2d       	mov	r18, r9
     cde:	3b 2f       	mov	r19, r27
     ce0:	4f 2f       	mov	r20, r31
     ce2:	5e 2f       	mov	r21, r30
     ce4:	69 85       	ldd	r22, Y+9	; 0x09
     ce6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ce8:	88 2d       	mov	r24, r8
     cea:	94 2d       	mov	r25, r4
     cec:	ae 84       	ldd	r10, Y+14	; 0x0e
     cee:	bf 84       	ldd	r11, Y+15	; 0x0f
     cf0:	c1 2c       	mov	r12, r1
     cf2:	d1 2c       	mov	r13, r1
     cf4:	e1 2c       	mov	r14, r1
     cf6:	f1 2c       	mov	r15, r1
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	0e 94 8d 0b 	call	0x171a	; 0x171a <__adddi3>
     d00:	21 15       	cp	r18, r1
     d02:	34 46       	sbci	r19, 0x64	; 100
     d04:	41 05       	cpc	r20, r1
     d06:	51 05       	cpc	r21, r1
     d08:	61 05       	cpc	r22, r1
     d0a:	71 05       	cpc	r23, r1
     d0c:	81 05       	cpc	r24, r1
     d0e:	91 05       	cpc	r25, r1
     d10:	89 f1       	breq	.+98     	; 0xd74 <__stack+0x515>
     d12:	84 f1       	brlt	.+96     	; 0xd74 <__stack+0x515>
				rightMotorSpeed = 25600;																		//Set the right motor to max speed
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	94 e6       	ldi	r25, 0x64	; 100
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     d20:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     d24:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     d28:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
				if((rightMotorSpeed - (rp6Data.turnRate * 2)) < (rp6Data.driveSpeedThreshold + 2000)){			//If the right motor speed minus twice the turn rate is lower than the threshold plus compensation
     d2c:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d2e:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	ac 01       	movw	r20, r24
     d36:	bd 01       	movw	r22, r26
     d38:	42 1b       	sub	r20, r18
     d3a:	53 0b       	sbc	r21, r19
     d3c:	61 09       	sbc	r22, r1
     d3e:	71 09       	sbc	r23, r1
     d40:	c3 01       	movw	r24, r6
     d42:	a0 e0       	ldi	r26, 0x00	; 0
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	48 17       	cp	r20, r24
     d48:	59 07       	cpc	r21, r25
     d4a:	6a 07       	cpc	r22, r26
     d4c:	7b 07       	cpc	r23, r27
     d4e:	48 f4       	brcc	.+18     	; 0xd62 <__stack+0x503>
					leftMotorSpeed = (rp6Data.driveSpeedThreshold + 2000);											//Set the left motor on the threshold plus compensation
     d50:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     d54:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     d58:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     d5c:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
     d60:	4d c1       	rjmp	.+666    	; 0xffc <__stack+0x79d>
				}else{																							//If not
					leftMotorSpeed = (rightMotorSpeed - (rp6Data.turnRate * 2));									//Set the left motor speed on the right speed minus twice the turn rate
     d62:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <leftMotorSpeed.2002>
     d66:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <leftMotorSpeed.2002+0x1>
     d6a:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <leftMotorSpeed.2002+0x2>
     d6e:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <leftMotorSpeed.2002+0x3>
     d72:	44 c1       	rjmp	.+648    	; 0xffc <__stack+0x79d>
				}
			}else{																							//If turning remains within the margins
				leftMotorSpeed = (currentDriveSpeed - rp6Data.turnRate);										//Set the left motor on the current speed minus the turn rate
     d74:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d76:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d78:	c9 01       	movw	r24, r18
     d7a:	a0 e0       	ldi	r26, 0x00	; 0
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	49 81       	ldd	r20, Y+1	; 0x01
     d80:	5a 81       	ldd	r21, Y+2	; 0x02
     d82:	6b 81       	ldd	r22, Y+3	; 0x03
     d84:	7c 81       	ldd	r23, Y+4	; 0x04
     d86:	48 1b       	sub	r20, r24
     d88:	59 0b       	sbc	r21, r25
     d8a:	6a 0b       	sbc	r22, r26
     d8c:	7b 0b       	sbc	r23, r27
     d8e:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <leftMotorSpeed.2002>
     d92:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <leftMotorSpeed.2002+0x1>
     d96:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <leftMotorSpeed.2002+0x2>
     d9a:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <leftMotorSpeed.2002+0x3>
				rightMotorSpeed = (currentDriveSpeed + rp6Data.turnRate);										//Set the right motor on the current speed plus the turn rate
     d9e:	49 81       	ldd	r20, Y+1	; 0x01
     da0:	5a 81       	ldd	r21, Y+2	; 0x02
     da2:	6b 81       	ldd	r22, Y+3	; 0x03
     da4:	7c 81       	ldd	r23, Y+4	; 0x04
     da6:	84 0f       	add	r24, r20
     da8:	95 1f       	adc	r25, r21
     daa:	a6 1f       	adc	r26, r22
     dac:	b7 1f       	adc	r27, r23
     dae:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     db2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     db6:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     dba:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
     dbe:	1e c1       	rjmp	.+572    	; 0xffc <__stack+0x79d>
			}
		}
		
	}else if(currentTurnDirection == 1){															//If the turn direction is 1, we go to the right
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <__stack+0x567>
     dc4:	0f c1       	rjmp	.+542    	; 0xfe4 <__stack+0x785>
		
		if(currentDriveSpeed == 0){																		//If we stand still, we turn around our axle
     dc6:	29 2d       	mov	r18, r9
     dc8:	3b 2f       	mov	r19, r27
     dca:	4f 2f       	mov	r20, r31
     dcc:	5e 2f       	mov	r21, r30
     dce:	69 85       	ldd	r22, Y+9	; 0x09
     dd0:	7a 85       	ldd	r23, Y+10	; 0x0a
     dd2:	88 2d       	mov	r24, r8
     dd4:	94 2d       	mov	r25, r4
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__cmpdi2_s8>
     ddc:	31 f5       	brne	.+76     	; 0xe2a <__stack+0x5cb>
			leftMotorDirection = 1;																			//Left motor forward
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2000+0x1>
     de6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2000>
			rightMotorDirection = 0;																		//Right motor backward
     dea:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     dee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);					//Set the speed to minimal + a little extra for compensation + half the turn rate
     df2:	91 01       	movw	r18, r2
     df4:	20 53       	subi	r18, 0x30	; 48
     df6:	38 4f       	sbci	r19, 0xF8	; 248
     df8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	82 0f       	add	r24, r18
     e02:	93 1f       	adc	r25, r19
     e04:	a0 e0       	ldi	r26, 0x00	; 0
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     e0c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     e10:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     e14:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);					//---^
     e18:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     e1c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     e20:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     e24:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
     e28:	fd c0       	rjmp	.+506    	; 0x1024 <__stack+0x7c5>
		}else{																							//If we are driving (Forward or backwards does not matter)
			if((currentDriveSpeed - rp6Data.turnRate) < (rp6Data.driveSpeedThreshold + 2000)){				//If the current drive speed minus the turn rate is lower than the threshold (with compensation)
     e2a:	ce 8c       	ldd	r12, Y+30	; 0x1e
     e2c:	df 8c       	ldd	r13, Y+31	; 0x1f
     e2e:	56 01       	movw	r10, r12
     e30:	c1 2c       	mov	r12, r1
     e32:	d1 2c       	mov	r13, r1
     e34:	e1 2c       	mov	r14, r1
     e36:	f1 2c       	mov	r15, r1
     e38:	87 01       	movw	r16, r14
     e3a:	ae 86       	std	Y+14, r10	; 0x0e
     e3c:	bf 86       	std	Y+15, r11	; 0x0f
     e3e:	c8 8a       	std	Y+16, r12	; 0x10
     e40:	d9 8a       	std	Y+17, r13	; 0x11
     e42:	ea 8a       	std	Y+18, r14	; 0x12
     e44:	fb 8a       	std	Y+19, r15	; 0x13
     e46:	0c 8b       	std	Y+20, r16	; 0x14
     e48:	1d 8b       	std	Y+21, r17	; 0x15
     e4a:	31 01       	movw	r6, r2
     e4c:	00 e3       	ldi	r16, 0x30	; 48
     e4e:	60 1a       	sub	r6, r16
     e50:	08 ef       	ldi	r16, 0xF8	; 248
     e52:	70 0a       	sbc	r7, r16
     e54:	29 2d       	mov	r18, r9
     e56:	3b 2f       	mov	r19, r27
     e58:	4f 2f       	mov	r20, r31
     e5a:	5e 2f       	mov	r21, r30
     e5c:	69 85       	ldd	r22, Y+9	; 0x09
     e5e:	7a 85       	ldd	r23, Y+10	; 0x0a
     e60:	88 2d       	mov	r24, r8
     e62:	94 2d       	mov	r25, r4
     e64:	c1 2c       	mov	r12, r1
     e66:	d1 2c       	mov	r13, r1
     e68:	e1 2c       	mov	r14, r1
     e6a:	f1 2c       	mov	r15, r1
     e6c:	00 e0       	ldi	r16, 0x00	; 0
     e6e:	10 e0       	ldi	r17, 0x00	; 0
     e70:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__subdi3>
     e74:	53 01       	movw	r10, r6
     e76:	c1 2c       	mov	r12, r1
     e78:	d1 2c       	mov	r13, r1
     e7a:	e1 2c       	mov	r14, r1
     e7c:	f1 2c       	mov	r15, r1
     e7e:	87 01       	movw	r16, r14
     e80:	6e 8a       	std	Y+22, r6	; 0x16
     e82:	bf 8a       	std	Y+23, r11	; 0x17
     e84:	c8 8e       	std	Y+24, r12	; 0x18
     e86:	d9 8e       	std	Y+25, r13	; 0x19
     e88:	ea 8e       	std	Y+26, r14	; 0x1a
     e8a:	fb 8e       	std	Y+27, r15	; 0x1b
     e8c:	0c 8f       	std	Y+28, r16	; 0x1c
     e8e:	1d 8f       	std	Y+29, r17	; 0x1d
     e90:	c1 2c       	mov	r12, r1
     e92:	d1 2c       	mov	r13, r1
     e94:	e1 2c       	mov	r14, r1
     e96:	f1 2c       	mov	r15, r1
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
     ea0:	7c f5       	brge	.+94     	; 0xf00 <__stack+0x6a1>
				rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000;											//Then the right motor is set on the threshold plus compensation
     ea2:	c3 01       	movw	r24, r6
     ea4:	a0 e0       	ldi	r26, 0x00	; 0
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     eac:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     eb0:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     eb4:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
				if((rightMotorSpeed + (rp6Data.turnRate * 2)) > 25600){											//If the right motor speed plus twice the turn rate is more than the max allowed
     eb8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     eba:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ebc:	22 0f       	add	r18, r18
     ebe:	33 1f       	adc	r19, r19
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	a1 1d       	adc	r26, r1
     ec6:	b1 1d       	adc	r27, r1
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	04 e6       	ldi	r16, 0x64	; 100
     ecc:	90 07       	cpc	r25, r16
     ece:	a1 05       	cpc	r26, r1
     ed0:	b1 05       	cpc	r27, r1
     ed2:	68 f0       	brcs	.+26     	; 0xeee <__stack+0x68f>
					leftMotorSpeed = 25600;																			//Set the left to the max allowed
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	94 e6       	ldi	r25, 0x64	; 100
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     ee0:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     ee4:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     ee8:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
     eec:	87 c0       	rjmp	.+270    	; 0xffc <__stack+0x79d>
				}else{																							//If not
					leftMotorSpeed = (rightMotorSpeed + (rp6Data.turnRate * 2));									//Set the left motor speed on the left plus twice the turn rate
     eee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     ef2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     ef6:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     efa:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
     efe:	7e c0       	rjmp	.+252    	; 0xffc <__stack+0x79d>
				}
			}else if((currentDriveSpeed + rp6Data.turnRate) > 25600){										//If the current speed plus the turn rate is more than allowed
     f00:	29 2d       	mov	r18, r9
     f02:	3b 2f       	mov	r19, r27
     f04:	4f 2f       	mov	r20, r31
     f06:	5e 2f       	mov	r21, r30
     f08:	69 85       	ldd	r22, Y+9	; 0x09
     f0a:	7a 85       	ldd	r23, Y+10	; 0x0a
     f0c:	88 2d       	mov	r24, r8
     f0e:	94 2d       	mov	r25, r4
     f10:	ae 84       	ldd	r10, Y+14	; 0x0e
     f12:	bf 84       	ldd	r11, Y+15	; 0x0f
     f14:	c1 2c       	mov	r12, r1
     f16:	d1 2c       	mov	r13, r1
     f18:	e1 2c       	mov	r14, r1
     f1a:	f1 2c       	mov	r15, r1
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	0e 94 8d 0b 	call	0x171a	; 0x171a <__adddi3>
     f24:	21 15       	cp	r18, r1
     f26:	34 46       	sbci	r19, 0x64	; 100
     f28:	41 05       	cpc	r20, r1
     f2a:	51 05       	cpc	r21, r1
     f2c:	61 05       	cpc	r22, r1
     f2e:	71 05       	cpc	r23, r1
     f30:	81 05       	cpc	r24, r1
     f32:	91 05       	cpc	r25, r1
     f34:	89 f1       	breq	.+98     	; 0xf98 <__stack+0x739>
     f36:	84 f1       	brlt	.+96     	; 0xf98 <__stack+0x739>
				leftMotorSpeed = 25600;																			//Set the left motor to max speed
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	94 e6       	ldi	r25, 0x64	; 100
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     f44:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     f48:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     f4c:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
				if((leftMotorSpeed - (rp6Data.turnRate * 2)) < (rp6Data.driveSpeedThreshold + 2000)){			//If the left motor speed minus twice the turn rate is lower than the threshold plus compensation
     f50:	2e 8d       	ldd	r18, Y+30	; 0x1e
     f52:	3f 8d       	ldd	r19, Y+31	; 0x1f
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	ac 01       	movw	r20, r24
     f5a:	bd 01       	movw	r22, r26
     f5c:	42 1b       	sub	r20, r18
     f5e:	53 0b       	sbc	r21, r19
     f60:	61 09       	sbc	r22, r1
     f62:	71 09       	sbc	r23, r1
     f64:	c3 01       	movw	r24, r6
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	48 17       	cp	r20, r24
     f6c:	59 07       	cpc	r21, r25
     f6e:	6a 07       	cpc	r22, r26
     f70:	7b 07       	cpc	r23, r27
     f72:	48 f4       	brcc	.+18     	; 0xf86 <__stack+0x727>
					rightMotorSpeed = (rp6Data.driveSpeedThreshold + 2000);											//Set the right motor on the threshold plus compensation
     f74:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
     f78:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
     f7c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
     f80:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
     f84:	3b c0       	rjmp	.+118    	; 0xffc <__stack+0x79d>
				}else{																							//If not
					rightMotorSpeed = (leftMotorSpeed - (rp6Data.turnRate * 2));									//Set the right motor speed on the left speed minus twice the turn rate
     f86:	40 93 6c 00 	sts	0x006C, r20	; 0x80006c <rightMotorSpeed.2003>
     f8a:	50 93 6d 00 	sts	0x006D, r21	; 0x80006d <rightMotorSpeed.2003+0x1>
     f8e:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <rightMotorSpeed.2003+0x2>
     f92:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <rightMotorSpeed.2003+0x3>
     f96:	32 c0       	rjmp	.+100    	; 0xffc <__stack+0x79d>
				}
			}else{																							//If turning remains within the margins
				rightMotorSpeed = (currentDriveSpeed - rp6Data.turnRate);										//Set the right motor on the current speed minus the turn rate
     f98:	2e 8d       	ldd	r18, Y+30	; 0x1e
     f9a:	3f 8d       	ldd	r19, Y+31	; 0x1f
     f9c:	c9 01       	movw	r24, r18
     f9e:	a0 e0       	ldi	r26, 0x00	; 0
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	49 81       	ldd	r20, Y+1	; 0x01
     fa4:	5a 81       	ldd	r21, Y+2	; 0x02
     fa6:	6b 81       	ldd	r22, Y+3	; 0x03
     fa8:	7c 81       	ldd	r23, Y+4	; 0x04
     faa:	48 1b       	sub	r20, r24
     fac:	59 0b       	sbc	r21, r25
     fae:	6a 0b       	sbc	r22, r26
     fb0:	7b 0b       	sbc	r23, r27
     fb2:	40 93 6c 00 	sts	0x006C, r20	; 0x80006c <rightMotorSpeed.2003>
     fb6:	50 93 6d 00 	sts	0x006D, r21	; 0x80006d <rightMotorSpeed.2003+0x1>
     fba:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <rightMotorSpeed.2003+0x2>
     fbe:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <rightMotorSpeed.2003+0x3>
				leftMotorSpeed = (currentDriveSpeed + rp6Data.turnRate);										//Set the left motor on the current speed plus the turn rate
     fc2:	49 81       	ldd	r20, Y+1	; 0x01
     fc4:	5a 81       	ldd	r21, Y+2	; 0x02
     fc6:	6b 81       	ldd	r22, Y+3	; 0x03
     fc8:	7c 81       	ldd	r23, Y+4	; 0x04
     fca:	84 0f       	add	r24, r20
     fcc:	95 1f       	adc	r25, r21
     fce:	a6 1f       	adc	r26, r22
     fd0:	b7 1f       	adc	r27, r23
     fd2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
     fd6:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
     fda:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
     fde:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
     fe2:	0c c0       	rjmp	.+24     	; 0xffc <__stack+0x79d>
		}
		
	}
	
	//Slower left wheel correction
	if(currentDriveSpeed != 0){
     fe4:	29 2d       	mov	r18, r9
     fe6:	3b 2f       	mov	r19, r27
     fe8:	4f 2f       	mov	r20, r31
     fea:	5e 2f       	mov	r21, r30
     fec:	69 85       	ldd	r22, Y+9	; 0x09
     fee:	7a 85       	ldd	r23, Y+10	; 0x0a
     ff0:	88 2d       	mov	r24, r8
     ff2:	94 2d       	mov	r25, r4
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__cmpdi2_s8>
     ffa:	a1 f0       	breq	.+40     	; 0x1024 <__stack+0x7c5>
		leftMotorSpeed += 750;
     ffc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2002>
    1000:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2002+0x1>
    1004:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <leftMotorSpeed.2002+0x2>
    1008:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <leftMotorSpeed.2002+0x3>
    100c:	82 51       	subi	r24, 0x12	; 18
    100e:	9d 4f       	sbci	r25, 0xFD	; 253
    1010:	af 4f       	sbci	r26, 0xFF	; 255
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
    1018:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
    101c:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
    1020:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
	}
	
	//Final safety check
	if(leftMotorSpeed > 27000){						//Check if we did not accidentally set a speed higher than allowed on the left motor
    1024:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2002>
    1028:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2002+0x1>
    102c:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <leftMotorSpeed.2002+0x2>
    1030:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <leftMotorSpeed.2002+0x3>
    1034:	89 37       	cpi	r24, 0x79	; 121
    1036:	99 46       	sbci	r25, 0x69	; 105
    1038:	a1 05       	cpc	r26, r1
    103a:	b1 05       	cpc	r27, r1
    103c:	60 f0       	brcs	.+24     	; 0x1056 <__stack+0x7f7>
		leftMotorSpeed = 27000;							//If we did, set it back to its max
    103e:	88 e7       	ldi	r24, 0x78	; 120
    1040:	99 e6       	ldi	r25, 0x69	; 105
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2002>
    104a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2002+0x1>
    104e:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2002+0x2>
    1052:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2002+0x3>
	}
	if(rightMotorSpeed > 25600){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
    1056:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rightMotorSpeed.2003>
    105a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rightMotorSpeed.2003+0x1>
    105e:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <rightMotorSpeed.2003+0x2>
    1062:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <rightMotorSpeed.2003+0x3>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	94 46       	sbci	r25, 0x64	; 100
    106a:	a1 05       	cpc	r26, r1
    106c:	b1 05       	cpc	r27, r1
    106e:	60 f0       	brcs	.+24     	; 0x1088 <__stack+0x829>
		rightMotorSpeed = 25600;						//Set it back to its max
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	94 e6       	ldi	r25, 0x64	; 100
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2003>
    107c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2003+0x1>
    1080:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2003+0x2>
    1084:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2003+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
    1088:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2000>
    108c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2000+0x1>
    1090:	89 2b       	or	r24, r25
    1092:	11 f0       	breq	.+4      	; 0x1098 <__stack+0x839>
		PORTC &= 0b11111011;
    1094:	aa 98       	cbi	0x15, 2	; 21
    1096:	01 c0       	rjmp	.+2      	; 0x109a <__stack+0x83b>
	}else{
		PORTC |= 0b00000100;
    1098:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
    109a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    109e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    10a2:	89 2b       	or	r24, r25
    10a4:	11 f0       	breq	.+4      	; 0x10aa <__stack+0x84b>
		PORTC &= 0b11110111;
    10a6:	ab 98       	cbi	0x15, 3	; 21
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <__stack+0x84d>
	}else{
		PORTC |= 0b00001000;
    10aa:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	//Set the struct values so the Arduino can see what the actual values are
	arduinoData.actualDriveSpeed = currentDriveSpeed;
    10ac:	e6 e8       	ldi	r30, 0x86	; 134
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <currentDriveSpeed.1999>
    10b4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <currentDriveSpeed.1999+0x1>
    10b8:	93 83       	std	Z+3, r25	; 0x03
    10ba:	82 83       	std	Z+2, r24	; 0x02
	arduinoData.actualLeftMotorSpeed = leftMotorSpeed;
    10bc:	a0 e7       	ldi	r26, 0x70	; 112
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	8d 91       	ld	r24, X+
    10c2:	9c 91       	ld	r25, X
    10c4:	11 97       	sbiw	r26, 0x01	; 1
    10c6:	95 83       	std	Z+5, r25	; 0x05
    10c8:	84 83       	std	Z+4, r24	; 0x04
	arduinoData.actualRightMotorSpeed = rightMotorSpeed;
    10ca:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rightMotorSpeed.2003>
    10ce:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rightMotorSpeed.2003+0x1>
    10d2:	97 83       	std	Z+7, r25	; 0x07
    10d4:	86 83       	std	Z+6, r24	; 0x06
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
    10d6:	9b bd       	out	0x2b, r25	; 43
    10d8:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
    10da:	8d 91       	ld	r24, X+
    10dc:	9c 91       	ld	r25, X
    10de:	99 bd       	out	0x29, r25	; 41
    10e0:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	e3 96       	adiw	r28, 0x33	; 51
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	bf 90       	pop	r11
    1104:	af 90       	pop	r10
    1106:	9f 90       	pop	r9
    1108:	8f 90       	pop	r8
    110a:	7f 90       	pop	r7
    110c:	6f 90       	pop	r6
    110e:	5f 90       	pop	r5
    1110:	4f 90       	pop	r4
    1112:	3f 90       	pop	r3
    1114:	2f 90       	pop	r2
    1116:	08 95       	ret

00001118 <init_bumpedData>:

//Bumpers
void init_bumpedData() {
	bumpedData.driveSpeed = 0;
    1118:	ed eb       	ldi	r30, 0xBD	; 189
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	10 82       	st	Z, r1
    111e:	11 82       	std	Z+1, r1	; 0x01
    1120:	12 82       	std	Z+2, r1	; 0x02
    1122:	13 82       	std	Z+3, r1	; 0x03
	bumpedData.driveDirection = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	84 83       	std	Z+4, r24	; 0x04
	bumpedData.turnDirection = 0;
    1128:	15 82       	std	Z+5, r1	; 0x05
	bumpedData.accelerationRate = 2000;
    112a:	80 ed       	ldi	r24, 0xD0	; 208
    112c:	97 e0       	ldi	r25, 0x07	; 7
    112e:	97 83       	std	Z+7, r25	; 0x07
    1130:	86 83       	std	Z+6, r24	; 0x06
	bumpedData.turnRate = 2500;
    1132:	84 ec       	ldi	r24, 0xC4	; 196
    1134:	99 e0       	ldi	r25, 0x09	; 9
    1136:	91 87       	std	Z+9, r25	; 0x09
    1138:	80 87       	std	Z+8, r24	; 0x08
	bumpedData.driveSpeedThreshold = 7000;
    113a:	88 e5       	ldi	r24, 0x58	; 88
    113c:	9b e1       	ldi	r25, 0x1B	; 27
    113e:	93 87       	std	Z+11, r25	; 0x0b
    1140:	82 87       	std	Z+10, r24	; 0x0a
	bumpedData.updateSpeed = 200;
    1142:	88 ec       	ldi	r24, 0xC8	; 200
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a0 e0       	ldi	r26, 0x00	; 0
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	84 87       	std	Z+12, r24	; 0x0c
    114c:	95 87       	std	Z+13, r25	; 0x0d
    114e:	a6 87       	std	Z+14, r26	; 0x0e
    1150:	b7 87       	std	Z+15, r27	; 0x0f
    1152:	08 95       	ret

00001154 <bumperCheck>:
}

uint8_t bumperCheck() {
    1154:	2f 92       	push	r2
    1156:	3f 92       	push	r3
    1158:	4f 92       	push	r4
    115a:	5f 92       	push	r5
    115c:	6f 92       	push	r6
    115e:	7f 92       	push	r7
    1160:	8f 92       	push	r8
    1162:	9f 92       	push	r9
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	28 97       	sbiw	r28, 0x08	; 8
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
	
	static uint32_t bumperTimer = 0; //Used to determine how long the RP6 drives backwards
	//static uint8_t enable = 0; //if 1, RP6 drives backwards
	
	if (getBumpers() && !arduinoData.bumperFlag) { //If one or both bumpers are pushed
    1188:	0e 94 5b 00 	call	0xb6	; 0xb6 <getBumpers>
    118c:	89 2b       	or	r24, r25
    118e:	b1 f0       	breq	.+44     	; 0x11bc <bumperCheck+0x68>
    1190:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    1194:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <arduinoData+0x1>
    1198:	89 2b       	or	r24, r25
    119a:	b9 f4       	brne	.+46     	; 0x11ca <bumperCheck+0x76>
		arduinoData.bumperFlag = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <arduinoData+0x1>
    11a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <arduinoData>
		bumperTimer = micros();
    11a8:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
    11ac:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
    11b0:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
    11b4:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end+0x2>
    11b8:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x3>
	}
		
	if (arduinoData.bumperFlag) {
    11bc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    11c0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <arduinoData+0x1>
    11c4:	89 2b       	or	r24, r25
    11c6:	09 f4       	brne	.+2      	; 0x11ca <bumperCheck+0x76>
    11c8:	5a c0       	rjmp	.+180    	; 0x127e <bumperCheck+0x12a>
		
		if (micros() < bumperTimer + BUMPED_STOP_TIME) {
    11ca:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
    11ce:	f2 2f       	mov	r31, r18
    11d0:	e3 2f       	mov	r30, r19
    11d2:	40 90 66 00 	lds	r4, 0x0066	; 0x800066 <__data_end>
    11d6:	50 90 67 00 	lds	r5, 0x0067	; 0x800067 <__data_end+0x1>
    11da:	60 90 68 00 	lds	r6, 0x0068	; 0x800068 <__data_end+0x2>
    11de:	70 90 69 00 	lds	r7, 0x0069	; 0x800069 <__data_end+0x3>
    11e2:	93 01       	movw	r18, r6
    11e4:	82 01       	movw	r16, r4
    11e6:	00 59       	subi	r16, 0x90	; 144
    11e8:	1e 4e       	sbci	r17, 0xEE	; 238
    11ea:	2e 4f       	sbci	r18, 0xFE	; 254
    11ec:	3f 4f       	sbci	r19, 0xFF	; 255
    11ee:	48 01       	movw	r8, r16
    11f0:	59 01       	movw	r10, r18
    11f2:	ab 82       	std	Y+3, r10	; 0x03
    11f4:	bc 82       	std	Y+4, r11	; 0x04
    11f6:	2f 2f       	mov	r18, r31
    11f8:	3e 2f       	mov	r19, r30
    11fa:	a8 2c       	mov	r10, r8
    11fc:	b9 2c       	mov	r11, r9
    11fe:	cb 80       	ldd	r12, Y+3	; 0x03
    1200:	dc 80       	ldd	r13, Y+4	; 0x04
    1202:	e1 2c       	mov	r14, r1
    1204:	f1 2c       	mov	r15, r1
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
    120e:	58 f4       	brcc	.+22     	; 0x1226 <bumperCheck+0xd2>
			bumpedData.driveSpeed = 0;
    1210:	ed eb       	ldi	r30, 0xBD	; 189
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	10 82       	st	Z, r1
    1216:	11 82       	std	Z+1, r1	; 0x01
    1218:	12 82       	std	Z+2, r1	; 0x02
    121a:	13 82       	std	Z+3, r1	; 0x03
			bumpedData.accelerationRate = 5000;
    121c:	88 e8       	ldi	r24, 0x88	; 136
    121e:	93 e1       	ldi	r25, 0x13	; 19
    1220:	97 83       	std	Z+7, r25	; 0x07
    1222:	86 83       	std	Z+6, r24	; 0x06
    1224:	2c c0       	rjmp	.+88     	; 0x127e <bumperCheck+0x12a>
		} else if (micros() < bumperTimer + BUMPED_BACK_TIME) {
    1226:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
    122a:	e0 e4       	ldi	r30, 0x40	; 64
    122c:	4e 0e       	add	r4, r30
    122e:	e2 e4       	ldi	r30, 0x42	; 66
    1230:	5e 1e       	adc	r5, r30
    1232:	ef e0       	ldi	r30, 0x0F	; 15
    1234:	6e 1e       	adc	r6, r30
    1236:	71 1c       	adc	r7, r1
    1238:	12 01       	movw	r2, r4
    123a:	23 01       	movw	r4, r6
    123c:	a2 2c       	mov	r10, r2
    123e:	b3 2c       	mov	r11, r3
    1240:	c4 2c       	mov	r12, r4
    1242:	d5 2c       	mov	r13, r5
    1244:	e1 2c       	mov	r14, r1
    1246:	f1 2c       	mov	r15, r1
    1248:	00 e0       	ldi	r16, 0x00	; 0
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__cmpdi2>
    1250:	90 f4       	brcc	.+36     	; 0x1276 <bumperCheck+0x122>
			bumpedData.driveSpeed = 30;
    1252:	ed eb       	ldi	r30, 0xBD	; 189
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8e e1       	ldi	r24, 0x1E	; 30
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	80 83       	st	Z, r24
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	a2 83       	std	Z+2, r26	; 0x02
    1264:	b3 83       	std	Z+3, r27	; 0x03
			bumpedData.driveDirection = 0;
    1266:	14 82       	std	Z+4, r1	; 0x04
			bumpedData.accelerationRate = rp6Data.accelerationRate;
    1268:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <rp6Data+0x6>
    126c:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <rp6Data+0x7>
    1270:	97 83       	std	Z+7, r25	; 0x07
    1272:	86 83       	std	Z+6, r24	; 0x06
    1274:	04 c0       	rjmp	.+8      	; 0x127e <bumperCheck+0x12a>
		} else {
			arduinoData.bumperFlag = 0;
    1276:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <arduinoData+0x1>
    127a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <arduinoData>
		}
	}
	
	return arduinoData.bumperFlag;
}
    127e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    1282:	28 96       	adiw	r28, 0x08	; 8
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	9f 90       	pop	r9
    12a4:	8f 90       	pop	r8
    12a6:	7f 90       	pop	r7
    12a8:	6f 90       	pop	r6
    12aa:	5f 90       	pop	r5
    12ac:	4f 90       	pop	r4
    12ae:	3f 90       	pop	r3
    12b0:	2f 90       	pop	r2
    12b2:	08 95       	ret

000012b4 <main>:
//////////////////////////////////////////////////

//Function definitions ---------------------------
//General
void init_interrupt(){												//Globally enable the use of interrupts
	sei();																//Enable global interrupts
    12b4:	78 94       	sei
////////////////// MAIN PROGRAM //////////////////
int main(void) {
	//Initialize all functions
	init_interrupt();
	
	init_micros();
    12b6:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_micros>
	
	init_TWI();
    12ba:	0e 94 09 01 	call	0x212	; 0x212 <init_TWI>
	init_rp6Data();
    12be:	0e 94 17 01 	call	0x22e	; 0x22e <init_rp6Data>
	init_arduinoData();
    12c2:	0e 94 35 01 	call	0x26a	; 0x26a <init_arduinoData>
	clearSendData();
    12c6:	0e 94 40 01 	call	0x280	; 0x280 <clearSendData>
	clearReceiveData();
    12ca:	0e 94 49 01 	call	0x292	; 0x292 <clearReceiveData>
	
	init_motor_io();
    12ce:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init_motor_io>
	init_motor_timer();
    12d2:	0e 94 67 02 	call	0x4ce	; 0x4ce <init_motor_timer>
	
	init_bumpedData();
    12d6:	0e 94 8c 08 	call	0x1118	; 0x1118 <init_bumpedData>
	//------------------------
		
	while(1){										
		if (bumperCheck()) {							//If the bumpers are hit, if so
    12da:	0e 94 aa 08 	call	0x1154	; 0x1154 <bumperCheck>
    12de:	88 23       	and	r24, r24
    12e0:	e9 f0       	breq	.+58     	; 0x131c <main+0x68>
			motorDriver(bumpedData);						//Run the motor driver with special input
    12e2:	8d b7       	in	r24, 0x3d	; 61
    12e4:	9e b7       	in	r25, 0x3e	; 62
    12e6:	48 97       	sbiw	r24, 0x18	; 24
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	9e bf       	out	0x3e, r25	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	8d bf       	out	0x3d, r24	; 61
    12f2:	ad b7       	in	r26, 0x3d	; 61
    12f4:	be b7       	in	r27, 0x3e	; 62
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	88 e1       	ldi	r24, 0x18	; 24
    12fa:	ed eb       	ldi	r30, 0xBD	; 189
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	01 90       	ld	r0, Z+
    1300:	0d 92       	st	X+, r0
    1302:	8a 95       	dec	r24
    1304:	e1 f7       	brne	.-8      	; 0x12fe <main+0x4a>
    1306:	0e 94 7f 02 	call	0x4fe	; 0x4fe <motorDriver>
    130a:	8d b7       	in	r24, 0x3d	; 61
    130c:	9e b7       	in	r25, 0x3e	; 62
    130e:	48 96       	adiw	r24, 0x18	; 24
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	9e bf       	out	0x3e, r25	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	8d bf       	out	0x3d, r24	; 61
    131a:	df cf       	rjmp	.-66     	; 0x12da <main+0x26>
		} else {										//Otherwise
			motorDriver(rp6Data);							//Run the motor driver with the global struct data
    131c:	8d b7       	in	r24, 0x3d	; 61
    131e:	9e b7       	in	r25, 0x3e	; 62
    1320:	48 97       	sbiw	r24, 0x18	; 24
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	9e bf       	out	0x3e, r25	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	8d bf       	out	0x3d, r24	; 61
    132c:	ad b7       	in	r26, 0x3d	; 61
    132e:	be b7       	in	r27, 0x3e	; 62
    1330:	11 96       	adiw	r26, 0x01	; 1
    1332:	88 e1       	ldi	r24, 0x18	; 24
    1334:	ed e9       	ldi	r30, 0x9D	; 157
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	01 90       	ld	r0, Z+
    133a:	0d 92       	st	X+, r0
    133c:	8a 95       	dec	r24
    133e:	e1 f7       	brne	.-8      	; 0x1338 <main+0x84>
    1340:	0e 94 7f 02 	call	0x4fe	; 0x4fe <motorDriver>
    1344:	8d b7       	in	r24, 0x3d	; 61
    1346:	9e b7       	in	r25, 0x3e	; 62
    1348:	48 96       	adiw	r24, 0x18	; 24
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	9e bf       	out	0x3e, r25	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	8d bf       	out	0x3d, r24	; 61
    1354:	c2 cf       	rjmp	.-124    	; 0x12da <main+0x26>

00001356 <__fixunssfsi>:
    1356:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_splitA>
    135a:	88 f0       	brcs	.+34     	; 0x137e <__fixunssfsi+0x28>
    135c:	9f 57       	subi	r25, 0x7F	; 127
    135e:	98 f0       	brcs	.+38     	; 0x1386 <__fixunssfsi+0x30>
    1360:	b9 2f       	mov	r27, r25
    1362:	99 27       	eor	r25, r25
    1364:	b7 51       	subi	r27, 0x17	; 23
    1366:	b0 f0       	brcs	.+44     	; 0x1394 <__fixunssfsi+0x3e>
    1368:	e1 f0       	breq	.+56     	; 0x13a2 <__fixunssfsi+0x4c>
    136a:	66 0f       	add	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	88 1f       	adc	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	1a f0       	brmi	.+6      	; 0x137a <__fixunssfsi+0x24>
    1374:	ba 95       	dec	r27
    1376:	c9 f7       	brne	.-14     	; 0x136a <__fixunssfsi+0x14>
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <__fixunssfsi+0x4c>
    137a:	b1 30       	cpi	r27, 0x01	; 1
    137c:	91 f0       	breq	.+36     	; 0x13a2 <__fixunssfsi+0x4c>
    137e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_zero>
    1382:	b1 e0       	ldi	r27, 0x01	; 1
    1384:	08 95       	ret
    1386:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_zero>
    138a:	67 2f       	mov	r22, r23
    138c:	78 2f       	mov	r23, r24
    138e:	88 27       	eor	r24, r24
    1390:	b8 5f       	subi	r27, 0xF8	; 248
    1392:	39 f0       	breq	.+14     	; 0x13a2 <__fixunssfsi+0x4c>
    1394:	b9 3f       	cpi	r27, 0xF9	; 249
    1396:	cc f3       	brlt	.-14     	; 0x138a <__fixunssfsi+0x34>
    1398:	86 95       	lsr	r24
    139a:	77 95       	ror	r23
    139c:	67 95       	ror	r22
    139e:	b3 95       	inc	r27
    13a0:	d9 f7       	brne	.-10     	; 0x1398 <__fixunssfsi+0x42>
    13a2:	3e f4       	brtc	.+14     	; 0x13b2 <__fixunssfsi+0x5c>
    13a4:	90 95       	com	r25
    13a6:	80 95       	com	r24
    13a8:	70 95       	com	r23
    13aa:	61 95       	neg	r22
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	8f 4f       	sbci	r24, 0xFF	; 255
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	08 95       	ret

000013b4 <__floatdisf>:
    13b4:	97 fb       	bst	r25, 7
    13b6:	16 f4       	brtc	.+4      	; 0x13bc <__floatdisf+0x8>
    13b8:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fp_negdi>
    13bc:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_di2sf>

000013c0 <__floatundisf>:
    13c0:	e8 94       	clt

000013c2 <__fp_di2sf>:
    13c2:	f9 2f       	mov	r31, r25
    13c4:	96 eb       	ldi	r25, 0xB6	; 182
    13c6:	ff 23       	and	r31, r31
    13c8:	81 f0       	breq	.+32     	; 0x13ea <__fp_di2sf+0x28>
    13ca:	12 16       	cp	r1, r18
    13cc:	13 06       	cpc	r1, r19
    13ce:	14 06       	cpc	r1, r20
    13d0:	44 0b       	sbc	r20, r20
    13d2:	93 95       	inc	r25
    13d4:	f6 95       	lsr	r31
    13d6:	87 95       	ror	r24
    13d8:	77 95       	ror	r23
    13da:	67 95       	ror	r22
    13dc:	57 95       	ror	r21
    13de:	40 40       	sbci	r20, 0x00	; 0
    13e0:	ff 23       	and	r31, r31
    13e2:	b9 f7       	brne	.-18     	; 0x13d2 <__fp_di2sf+0x10>
    13e4:	1b c0       	rjmp	.+54     	; 0x141c <__fp_di2sf+0x5a>
    13e6:	99 27       	eor	r25, r25
    13e8:	08 95       	ret
    13ea:	88 23       	and	r24, r24
    13ec:	51 f4       	brne	.+20     	; 0x1402 <__fp_di2sf+0x40>
    13ee:	98 50       	subi	r25, 0x08	; 8
    13f0:	d2 f7       	brpl	.-12     	; 0x13e6 <__fp_di2sf+0x24>
    13f2:	87 2b       	or	r24, r23
    13f4:	76 2f       	mov	r23, r22
    13f6:	65 2f       	mov	r22, r21
    13f8:	54 2f       	mov	r21, r20
    13fa:	43 2f       	mov	r20, r19
    13fc:	32 2f       	mov	r19, r18
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	b1 f3       	breq	.-20     	; 0x13ee <__fp_di2sf+0x2c>
    1402:	12 16       	cp	r1, r18
    1404:	13 06       	cpc	r1, r19
    1406:	14 06       	cpc	r1, r20
    1408:	44 0b       	sbc	r20, r20
    140a:	88 23       	and	r24, r24
    140c:	3a f0       	brmi	.+14     	; 0x141c <__fp_di2sf+0x5a>
    140e:	9a 95       	dec	r25
    1410:	44 0f       	add	r20, r20
    1412:	55 1f       	adc	r21, r21
    1414:	66 1f       	adc	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	88 1f       	adc	r24, r24
    141a:	ca f7       	brpl	.-14     	; 0x140e <__fp_di2sf+0x4c>
    141c:	55 23       	and	r21, r21
    141e:	4a f4       	brpl	.+18     	; 0x1432 <__fp_di2sf+0x70>
    1420:	44 0f       	add	r20, r20
    1422:	55 1f       	adc	r21, r21
    1424:	11 f4       	brne	.+4      	; 0x142a <__fp_di2sf+0x68>
    1426:	60 ff       	sbrs	r22, 0
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <__fp_di2sf+0x70>
    142a:	6f 5f       	subi	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	8f 4f       	sbci	r24, 0xFF	; 255
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	88 0f       	add	r24, r24
    1434:	96 95       	lsr	r25
    1436:	87 95       	ror	r24
    1438:	97 f9       	bld	r25, 7
    143a:	08 95       	ret

0000143c <__fp_negdi>:
    143c:	90 95       	com	r25
    143e:	80 95       	com	r24
    1440:	70 95       	com	r23
    1442:	60 95       	com	r22
    1444:	50 95       	com	r21
    1446:	40 95       	com	r20
    1448:	30 95       	com	r19
    144a:	21 95       	neg	r18
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	4f 4f       	sbci	r20, 0xFF	; 255
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	6f 4f       	sbci	r22, 0xFF	; 255
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__fp_split3>:
    145c:	57 fd       	sbrc	r21, 7
    145e:	90 58       	subi	r25, 0x80	; 128
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	59 f0       	breq	.+22     	; 0x147c <__fp_splitA+0x10>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	71 f0       	breq	.+28     	; 0x1486 <__fp_splitA+0x1a>
    146a:	47 95       	ror	r20

0000146c <__fp_splitA>:
    146c:	88 0f       	add	r24, r24
    146e:	97 fb       	bst	r25, 7
    1470:	99 1f       	adc	r25, r25
    1472:	61 f0       	breq	.+24     	; 0x148c <__fp_splitA+0x20>
    1474:	9f 3f       	cpi	r25, 0xFF	; 255
    1476:	79 f0       	breq	.+30     	; 0x1496 <__fp_splitA+0x2a>
    1478:	87 95       	ror	r24
    147a:	08 95       	ret
    147c:	12 16       	cp	r1, r18
    147e:	13 06       	cpc	r1, r19
    1480:	14 06       	cpc	r1, r20
    1482:	55 1f       	adc	r21, r21
    1484:	f2 cf       	rjmp	.-28     	; 0x146a <__fp_split3+0xe>
    1486:	46 95       	lsr	r20
    1488:	f1 df       	rcall	.-30     	; 0x146c <__fp_splitA>
    148a:	08 c0       	rjmp	.+16     	; 0x149c <__fp_splitA+0x30>
    148c:	16 16       	cp	r1, r22
    148e:	17 06       	cpc	r1, r23
    1490:	18 06       	cpc	r1, r24
    1492:	99 1f       	adc	r25, r25
    1494:	f1 cf       	rjmp	.-30     	; 0x1478 <__fp_splitA+0xc>
    1496:	86 95       	lsr	r24
    1498:	71 05       	cpc	r23, r1
    149a:	61 05       	cpc	r22, r1
    149c:	08 94       	sec
    149e:	08 95       	ret

000014a0 <__fp_zero>:
    14a0:	e8 94       	clt

000014a2 <__fp_szero>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	66 27       	eor	r22, r22
    14a6:	77 27       	eor	r23, r23
    14a8:	cb 01       	movw	r24, r22
    14aa:	97 f9       	bld	r25, 7
    14ac:	08 95       	ret

000014ae <__mulsf3>:
    14ae:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__mulsf3x>
    14b2:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_round>
    14b6:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_pscA>
    14ba:	38 f0       	brcs	.+14     	; 0x14ca <__mulsf3+0x1c>
    14bc:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscB>
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__mulsf3+0x1c>
    14c2:	95 23       	and	r25, r21
    14c4:	11 f0       	breq	.+4      	; 0x14ca <__mulsf3+0x1c>
    14c6:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_inf>
    14ca:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_nan>
    14ce:	11 24       	eor	r1, r1
    14d0:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>

000014d4 <__mulsf3x>:
    14d4:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    14d8:	70 f3       	brcs	.-36     	; 0x14b6 <__mulsf3+0x8>

000014da <__mulsf3_pse>:
    14da:	95 9f       	mul	r25, r21
    14dc:	c1 f3       	breq	.-16     	; 0x14ce <__mulsf3+0x20>
    14de:	95 0f       	add	r25, r21
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	55 1f       	adc	r21, r21
    14e4:	62 9f       	mul	r22, r18
    14e6:	f0 01       	movw	r30, r0
    14e8:	72 9f       	mul	r23, r18
    14ea:	bb 27       	eor	r27, r27
    14ec:	f0 0d       	add	r31, r0
    14ee:	b1 1d       	adc	r27, r1
    14f0:	63 9f       	mul	r22, r19
    14f2:	aa 27       	eor	r26, r26
    14f4:	f0 0d       	add	r31, r0
    14f6:	b1 1d       	adc	r27, r1
    14f8:	aa 1f       	adc	r26, r26
    14fa:	64 9f       	mul	r22, r20
    14fc:	66 27       	eor	r22, r22
    14fe:	b0 0d       	add	r27, r0
    1500:	a1 1d       	adc	r26, r1
    1502:	66 1f       	adc	r22, r22
    1504:	82 9f       	mul	r24, r18
    1506:	22 27       	eor	r18, r18
    1508:	b0 0d       	add	r27, r0
    150a:	a1 1d       	adc	r26, r1
    150c:	62 1f       	adc	r22, r18
    150e:	73 9f       	mul	r23, r19
    1510:	b0 0d       	add	r27, r0
    1512:	a1 1d       	adc	r26, r1
    1514:	62 1f       	adc	r22, r18
    1516:	83 9f       	mul	r24, r19
    1518:	a0 0d       	add	r26, r0
    151a:	61 1d       	adc	r22, r1
    151c:	22 1f       	adc	r18, r18
    151e:	74 9f       	mul	r23, r20
    1520:	33 27       	eor	r19, r19
    1522:	a0 0d       	add	r26, r0
    1524:	61 1d       	adc	r22, r1
    1526:	23 1f       	adc	r18, r19
    1528:	84 9f       	mul	r24, r20
    152a:	60 0d       	add	r22, r0
    152c:	21 1d       	adc	r18, r1
    152e:	82 2f       	mov	r24, r18
    1530:	76 2f       	mov	r23, r22
    1532:	6a 2f       	mov	r22, r26
    1534:	11 24       	eor	r1, r1
    1536:	9f 57       	subi	r25, 0x7F	; 127
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	9a f0       	brmi	.+38     	; 0x1562 <__mulsf3_pse+0x88>
    153c:	f1 f0       	breq	.+60     	; 0x157a <__mulsf3_pse+0xa0>
    153e:	88 23       	and	r24, r24
    1540:	4a f0       	brmi	.+18     	; 0x1554 <__mulsf3_pse+0x7a>
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	bb 1f       	adc	r27, r27
    1548:	66 1f       	adc	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	88 1f       	adc	r24, r24
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	50 40       	sbci	r21, 0x00	; 0
    1552:	a9 f7       	brne	.-22     	; 0x153e <__mulsf3_pse+0x64>
    1554:	9e 3f       	cpi	r25, 0xFE	; 254
    1556:	51 05       	cpc	r21, r1
    1558:	80 f0       	brcs	.+32     	; 0x157a <__mulsf3_pse+0xa0>
    155a:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_inf>
    155e:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	e4 f3       	brlt	.-8      	; 0x155e <__mulsf3_pse+0x84>
    1566:	98 3e       	cpi	r25, 0xE8	; 232
    1568:	d4 f3       	brlt	.-12     	; 0x155e <__mulsf3_pse+0x84>
    156a:	86 95       	lsr	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f7 95       	ror	r31
    1574:	e7 95       	ror	r30
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	c1 f7       	brne	.-16     	; 0x156a <__mulsf3_pse+0x90>
    157a:	fe 2b       	or	r31, r30
    157c:	88 0f       	add	r24, r24
    157e:	91 1d       	adc	r25, r1
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	97 f9       	bld	r25, 7
    1586:	08 95       	ret
    1588:	19 f4       	brne	.+6      	; 0x1590 <__mulsf3_pse+0xb6>
    158a:	16 f4       	brtc	.+4      	; 0x1590 <__mulsf3_pse+0xb6>
    158c:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_nan>
    1590:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_mpack>

00001594 <sqrt>:
    1594:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_splitA>
    1598:	b8 f3       	brcs	.-18     	; 0x1588 <__mulsf3_pse+0xae>
    159a:	99 23       	and	r25, r25
    159c:	c9 f3       	breq	.-14     	; 0x1590 <__mulsf3_pse+0xb6>
    159e:	b6 f3       	brts	.-20     	; 0x158c <__mulsf3_pse+0xb2>
    15a0:	9f 57       	subi	r25, 0x7F	; 127
    15a2:	55 0b       	sbc	r21, r21
    15a4:	87 ff       	sbrs	r24, 7
    15a6:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fp_norm2>
    15aa:	00 24       	eor	r0, r0
    15ac:	a0 e6       	ldi	r26, 0x60	; 96
    15ae:	40 ea       	ldi	r20, 0xA0	; 160
    15b0:	90 01       	movw	r18, r0
    15b2:	80 58       	subi	r24, 0x80	; 128
    15b4:	56 95       	lsr	r21
    15b6:	97 95       	ror	r25
    15b8:	28 f4       	brcc	.+10     	; 0x15c4 <sqrt+0x30>
    15ba:	80 5c       	subi	r24, 0xC0	; 192
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <sqrt+0x38>
    15c4:	26 17       	cp	r18, r22
    15c6:	37 07       	cpc	r19, r23
    15c8:	48 07       	cpc	r20, r24
    15ca:	30 f4       	brcc	.+12     	; 0x15d8 <sqrt+0x44>
    15cc:	62 1b       	sub	r22, r18
    15ce:	73 0b       	sbc	r23, r19
    15d0:	84 0b       	sbc	r24, r20
    15d2:	20 29       	or	r18, r0
    15d4:	31 29       	or	r19, r1
    15d6:	4a 2b       	or	r20, r26
    15d8:	a6 95       	lsr	r26
    15da:	17 94       	ror	r1
    15dc:	07 94       	ror	r0
    15de:	20 25       	eor	r18, r0
    15e0:	31 25       	eor	r19, r1
    15e2:	4a 27       	eor	r20, r26
    15e4:	58 f7       	brcc	.-42     	; 0x15bc <sqrt+0x28>
    15e6:	66 0f       	add	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	20 f0       	brcs	.+8      	; 0x15f6 <sqrt+0x62>
    15ee:	26 17       	cp	r18, r22
    15f0:	37 07       	cpc	r19, r23
    15f2:	48 07       	cpc	r20, r24
    15f4:	30 f4       	brcc	.+12     	; 0x1602 <sqrt+0x6e>
    15f6:	62 0b       	sbc	r22, r18
    15f8:	73 0b       	sbc	r23, r19
    15fa:	84 0b       	sbc	r24, r20
    15fc:	20 0d       	add	r18, r0
    15fe:	31 1d       	adc	r19, r1
    1600:	41 1d       	adc	r20, r1
    1602:	a0 95       	com	r26
    1604:	81 f7       	brne	.-32     	; 0x15e6 <sqrt+0x52>
    1606:	b9 01       	movw	r22, r18
    1608:	84 2f       	mov	r24, r20
    160a:	91 58       	subi	r25, 0x81	; 129
    160c:	88 0f       	add	r24, r24
    160e:	96 95       	lsr	r25
    1610:	87 95       	ror	r24
    1612:	08 95       	ret

00001614 <__fp_inf>:
    1614:	97 f9       	bld	r25, 7
    1616:	9f 67       	ori	r25, 0x7F	; 127
    1618:	80 e8       	ldi	r24, 0x80	; 128
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	08 95       	ret

00001620 <__fp_mpack>:
    1620:	9f 3f       	cpi	r25, 0xFF	; 255
    1622:	31 f0       	breq	.+12     	; 0x1630 <__fp_mpack_finite+0xc>

00001624 <__fp_mpack_finite>:
    1624:	91 50       	subi	r25, 0x01	; 1
    1626:	20 f4       	brcc	.+8      	; 0x1630 <__fp_mpack_finite+0xc>
    1628:	87 95       	ror	r24
    162a:	77 95       	ror	r23
    162c:	67 95       	ror	r22
    162e:	b7 95       	ror	r27
    1630:	88 0f       	add	r24, r24
    1632:	91 1d       	adc	r25, r1
    1634:	96 95       	lsr	r25
    1636:	87 95       	ror	r24
    1638:	97 f9       	bld	r25, 7
    163a:	08 95       	ret

0000163c <__fp_nan>:
    163c:	9f ef       	ldi	r25, 0xFF	; 255
    163e:	80 ec       	ldi	r24, 0xC0	; 192
    1640:	08 95       	ret

00001642 <__fp_norm2>:
    1642:	91 50       	subi	r25, 0x01	; 1
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	d2 f7       	brpl	.-12     	; 0x1642 <__fp_norm2>
    164e:	08 95       	ret

00001650 <__fp_pscA>:
    1650:	00 24       	eor	r0, r0
    1652:	0a 94       	dec	r0
    1654:	16 16       	cp	r1, r22
    1656:	17 06       	cpc	r1, r23
    1658:	18 06       	cpc	r1, r24
    165a:	09 06       	cpc	r0, r25
    165c:	08 95       	ret

0000165e <__fp_pscB>:
    165e:	00 24       	eor	r0, r0
    1660:	0a 94       	dec	r0
    1662:	12 16       	cp	r1, r18
    1664:	13 06       	cpc	r1, r19
    1666:	14 06       	cpc	r1, r20
    1668:	05 06       	cpc	r0, r21
    166a:	08 95       	ret

0000166c <__fp_round>:
    166c:	09 2e       	mov	r0, r25
    166e:	03 94       	inc	r0
    1670:	00 0c       	add	r0, r0
    1672:	11 f4       	brne	.+4      	; 0x1678 <__fp_round+0xc>
    1674:	88 23       	and	r24, r24
    1676:	52 f0       	brmi	.+20     	; 0x168c <__fp_round+0x20>
    1678:	bb 0f       	add	r27, r27
    167a:	40 f4       	brcc	.+16     	; 0x168c <__fp_round+0x20>
    167c:	bf 2b       	or	r27, r31
    167e:	11 f4       	brne	.+4      	; 0x1684 <__fp_round+0x18>
    1680:	60 ff       	sbrs	r22, 0
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__fp_round+0x20>
    1684:	6f 5f       	subi	r22, 0xFF	; 255
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8f 4f       	sbci	r24, 0xFF	; 255
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	08 95       	ret

0000168e <__udivmodsi4>:
    168e:	a1 e2       	ldi	r26, 0x21	; 33
    1690:	1a 2e       	mov	r1, r26
    1692:	aa 1b       	sub	r26, r26
    1694:	bb 1b       	sub	r27, r27
    1696:	fd 01       	movw	r30, r26
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <__udivmodsi4_ep>

0000169a <__udivmodsi4_loop>:
    169a:	aa 1f       	adc	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	ee 1f       	adc	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	a2 17       	cp	r26, r18
    16a4:	b3 07       	cpc	r27, r19
    16a6:	e4 07       	cpc	r30, r20
    16a8:	f5 07       	cpc	r31, r21
    16aa:	20 f0       	brcs	.+8      	; 0x16b4 <__udivmodsi4_ep>
    16ac:	a2 1b       	sub	r26, r18
    16ae:	b3 0b       	sbc	r27, r19
    16b0:	e4 0b       	sbc	r30, r20
    16b2:	f5 0b       	sbc	r31, r21

000016b4 <__udivmodsi4_ep>:
    16b4:	66 1f       	adc	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	88 1f       	adc	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	1a 94       	dec	r1
    16be:	69 f7       	brne	.-38     	; 0x169a <__udivmodsi4_loop>
    16c0:	60 95       	com	r22
    16c2:	70 95       	com	r23
    16c4:	80 95       	com	r24
    16c6:	90 95       	com	r25
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	bd 01       	movw	r22, r26
    16ce:	cf 01       	movw	r24, r30
    16d0:	08 95       	ret

000016d2 <__muluhisi3>:
    16d2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
    16d6:	a5 9f       	mul	r26, r21
    16d8:	90 0d       	add	r25, r0
    16da:	b4 9f       	mul	r27, r20
    16dc:	90 0d       	add	r25, r0
    16de:	a4 9f       	mul	r26, r20
    16e0:	80 0d       	add	r24, r0
    16e2:	91 1d       	adc	r25, r1
    16e4:	11 24       	eor	r1, r1
    16e6:	08 95       	ret

000016e8 <__ashldi3>:
    16e8:	0f 93       	push	r16
    16ea:	08 30       	cpi	r16, 0x08	; 8
    16ec:	90 f0       	brcs	.+36     	; 0x1712 <__ashldi3+0x2a>
    16ee:	98 2f       	mov	r25, r24
    16f0:	87 2f       	mov	r24, r23
    16f2:	76 2f       	mov	r23, r22
    16f4:	65 2f       	mov	r22, r21
    16f6:	54 2f       	mov	r21, r20
    16f8:	43 2f       	mov	r20, r19
    16fa:	32 2f       	mov	r19, r18
    16fc:	22 27       	eor	r18, r18
    16fe:	08 50       	subi	r16, 0x08	; 8
    1700:	f4 cf       	rjmp	.-24     	; 0x16ea <__ashldi3+0x2>
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	44 1f       	adc	r20, r20
    1708:	55 1f       	adc	r21, r21
    170a:	66 1f       	adc	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 95       	dec	r16
    1714:	b2 f7       	brpl	.-20     	; 0x1702 <__ashldi3+0x1a>
    1716:	0f 91       	pop	r16
    1718:	08 95       	ret

0000171a <__adddi3>:
    171a:	2a 0d       	add	r18, r10
    171c:	3b 1d       	adc	r19, r11
    171e:	4c 1d       	adc	r20, r12
    1720:	5d 1d       	adc	r21, r13
    1722:	6e 1d       	adc	r22, r14
    1724:	7f 1d       	adc	r23, r15
    1726:	80 1f       	adc	r24, r16
    1728:	91 1f       	adc	r25, r17
    172a:	08 95       	ret

0000172c <__adddi3_s8>:
    172c:	00 24       	eor	r0, r0
    172e:	a7 fd       	sbrc	r26, 7
    1730:	00 94       	com	r0
    1732:	2a 0f       	add	r18, r26
    1734:	30 1d       	adc	r19, r0
    1736:	40 1d       	adc	r20, r0
    1738:	50 1d       	adc	r21, r0
    173a:	60 1d       	adc	r22, r0
    173c:	70 1d       	adc	r23, r0
    173e:	80 1d       	adc	r24, r0
    1740:	90 1d       	adc	r25, r0
    1742:	08 95       	ret

00001744 <__subdi3>:
    1744:	2a 19       	sub	r18, r10
    1746:	3b 09       	sbc	r19, r11
    1748:	4c 09       	sbc	r20, r12
    174a:	5d 09       	sbc	r21, r13
    174c:	6e 09       	sbc	r22, r14
    174e:	7f 09       	sbc	r23, r15
    1750:	80 0b       	sbc	r24, r16
    1752:	91 0b       	sbc	r25, r17
    1754:	08 95       	ret

00001756 <__cmpdi2>:
    1756:	2a 15       	cp	r18, r10
    1758:	3b 05       	cpc	r19, r11
    175a:	4c 05       	cpc	r20, r12
    175c:	5d 05       	cpc	r21, r13
    175e:	6e 05       	cpc	r22, r14
    1760:	7f 05       	cpc	r23, r15
    1762:	80 07       	cpc	r24, r16
    1764:	91 07       	cpc	r25, r17
    1766:	08 95       	ret

00001768 <__cmpdi2_s8>:
    1768:	00 24       	eor	r0, r0
    176a:	a7 fd       	sbrc	r26, 7
    176c:	00 94       	com	r0
    176e:	2a 17       	cp	r18, r26
    1770:	30 05       	cpc	r19, r0
    1772:	40 05       	cpc	r20, r0
    1774:	50 05       	cpc	r21, r0
    1776:	60 05       	cpc	r22, r0
    1778:	70 05       	cpc	r23, r0
    177a:	80 05       	cpc	r24, r0
    177c:	90 05       	cpc	r25, r0
    177e:	08 95       	ret

00001780 <__umulhisi3>:
    1780:	a2 9f       	mul	r26, r18
    1782:	b0 01       	movw	r22, r0
    1784:	b3 9f       	mul	r27, r19
    1786:	c0 01       	movw	r24, r0
    1788:	a3 9f       	mul	r26, r19
    178a:	70 0d       	add	r23, r0
    178c:	81 1d       	adc	r24, r1
    178e:	11 24       	eor	r1, r1
    1790:	91 1d       	adc	r25, r1
    1792:	b2 9f       	mul	r27, r18
    1794:	70 0d       	add	r23, r0
    1796:	81 1d       	adc	r24, r1
    1798:	11 24       	eor	r1, r1
    179a:	91 1d       	adc	r25, r1
    179c:	08 95       	ret

0000179e <_exit>:
    179e:	f8 94       	cli

000017a0 <__stop_program>:
    17a0:	ff cf       	rjmp	.-2      	; 0x17a0 <__stop_program>
