
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000552  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000552  000005e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  0080009e  0080009e  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110b  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c1  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bd  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000771  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074c  00000000  00000000  00003611  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003d5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_1>
   8:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3f       	cpi	r26, 0xF8	; 248
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 af 01 	call	0x35e	; 0x35e <main>
  8a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_i2c_slave>:

void I2C_sendArray(uint8_t I2Cdata[]){
	for(int i = 0; i <= 19; i++){
		//verzenden(8, I2Cdata[i]);
	}
}
  92:	11 b8       	out	0x01, r1	; 1
  94:	90 e2       	ldi	r25, 0x20	; 32
  96:	90 b9       	out	0x00, r25	; 0
  98:	95 e4       	ldi	r25, 0x45	; 69
  9a:	96 bf       	out	0x36, r25	; 54
  9c:	88 0f       	add	r24, r24
  9e:	82 b9       	out	0x02, r24	; 2
  a0:	08 95       	ret

000000a2 <slaaftwi>:
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	80 3a       	cpi	r24, 0xA0	; 160
  a6:	d1 f0       	breq	.+52     	; 0xdc <slaaftwi+0x3a>
  a8:	28 f4       	brcc	.+10     	; 0xb4 <slaaftwi+0x12>
  aa:	80 36       	cpi	r24, 0x60	; 96
  ac:	41 f0       	breq	.+16     	; 0xbe <slaaftwi+0x1c>
  ae:	80 38       	cpi	r24, 0x80	; 128
  b0:	49 f0       	breq	.+18     	; 0xc4 <slaaftwi+0x22>
  b2:	35 c0       	rjmp	.+106    	; 0x11e <slaaftwi+0x7c>
  b4:	88 3a       	cpi	r24, 0xA8	; 168
  b6:	21 f1       	breq	.+72     	; 0x100 <slaaftwi+0x5e>
  b8:	88 3b       	cpi	r24, 0xB8	; 184
  ba:	59 f1       	breq	.+86     	; 0x112 <slaaftwi+0x70>
  bc:	30 c0       	rjmp	.+96     	; 0x11e <slaaftwi+0x7c>
  be:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <teller.1905>
  c2:	2d c0       	rjmp	.+90     	; 0x11e <slaaftwi+0x7c>
  c4:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <teller.1905>
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8e 0f       	add	r24, r30
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <teller.1905>
  d0:	83 b1       	in	r24, 0x03	; 3
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e2 56       	subi	r30, 0x62	; 98
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 83       	st	Z, r24
  da:	21 c0       	rjmp	.+66     	; 0x11e <slaaftwi+0x7c>
  dc:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <ontfunc>
  e0:	f0 91 e3 00 	lds	r31, 0x00E3	; 0x8000e3 <ontfunc+0x1>
  e4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <teller.1905>
  e8:	8e e9       	ldi	r24, 0x9E	; 158
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	09 95       	icall
  ee:	ee e9       	ldi	r30, 0x9E	; 158
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	82 eb       	ldi	r24, 0xB2	; 178
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	11 92       	st	Z+, r1
  f8:	e8 17       	cp	r30, r24
  fa:	f9 07       	cpc	r31, r25
  fc:	e1 f7       	brne	.-8      	; 0xf6 <slaaftwi+0x54>
  fe:	0f c0       	rjmp	.+30     	; 0x11e <slaaftwi+0x7c>
 100:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <teller.1905>
 104:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <verfunc>
 108:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <verfunc+0x1>
 10c:	09 95       	icall
 10e:	83 b9       	out	0x03, r24	; 3
 110:	06 c0       	rjmp	.+12     	; 0x11e <slaaftwi+0x7c>
 112:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <verfunc>
 116:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <verfunc+0x1>
 11a:	09 95       	icall
 11c:	83 b9       	out	0x03, r24	; 3
 11e:	86 b7       	in	r24, 0x36	; 54
 120:	80 68       	ori	r24, 0x80	; 128
 122:	86 bf       	out	0x36, r24	; 54
 124:	08 95       	ret

00000126 <__vector_19>:
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
 148:	0e 94 51 00 	call	0xa2	; 0xa2 <slaaftwi>
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <initUSART>:
 16e:	10 bc       	out	0x20, r1	; 32
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	89 b9       	out	0x09, r24	; 9
 174:	1b b8       	out	0x0b, r1	; 11
 176:	86 e8       	ldi	r24, 0x86	; 134
 178:	80 bd       	out	0x20, r24	; 32
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	8a b9       	out	0x0a, r24	; 10
 17e:	08 95       	ret

00000180 <writeChar>:
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <writeChar>
 184:	8c b9       	out	0x0c, r24	; 12
 186:	08 95       	ret

00000188 <writeString>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	88 81       	ld	r24, Y
 190:	88 23       	and	r24, r24
 192:	31 f0       	breq	.+12     	; 0x1a0 <writeString+0x18>
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	0e 94 c0 00 	call	0x180	; 0x180 <writeChar>
 19a:	89 91       	ld	r24, Y+
 19c:	81 11       	cpse	r24, r1
 19e:	fb cf       	rjmp	.-10     	; 0x196 <writeString+0xe>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <writeInteger>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	61 97       	sbiw	r28, 0x11	; 17
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	46 2f       	mov	r20, r22
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	be 01       	movw	r22, r28
 1c0:	6f 5f       	subi	r22, 0xFF	; 255
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	0e 94 67 02 	call	0x4ce	; 0x4ce <itoa>
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
 1d0:	61 96       	adiw	r28, 0x11	; 17
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <init_LED>:
 1e2:	87 b3       	in	r24, 0x17	; 23
 1e4:	83 68       	ori	r24, 0x83	; 131
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	84 b3       	in	r24, 0x14	; 20
 1ea:	80 67       	ori	r24, 0x70	; 112
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret

000001f0 <init_micros>:
 1f0:	83 b7       	in	r24, 0x33	; 51
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	83 bf       	out	0x33, r24	; 51
 1f6:	83 b7       	in	r24, 0x33	; 51
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	83 bf       	out	0x33, r24	; 51
 1fc:	89 b7       	in	r24, 0x39	; 57
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	89 bf       	out	0x39, r24	; 57
 202:	12 be       	out	0x32, r1	; 50
 204:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <t0TotalOverflow>
 208:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <t0TotalOverflow+0x1>
 20c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <t0TotalOverflow+0x2>
 210:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <t0TotalOverflow+0x3>
 214:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <t0TotalOverflow+0x4>
 218:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <t0TotalOverflow+0x5>
 21c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <t0TotalOverflow+0x6>
 220:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <t0TotalOverflow+0x7>
 224:	08 95       	ret

00000226 <__vector_11>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	20 91 d8 00 	lds	r18, 0x00D8	; 0x8000d8 <t0TotalOverflow>
 246:	30 91 d9 00 	lds	r19, 0x00D9	; 0x8000d9 <t0TotalOverflow+0x1>
 24a:	40 91 da 00 	lds	r20, 0x00DA	; 0x8000da <t0TotalOverflow+0x2>
 24e:	50 91 db 00 	lds	r21, 0x00DB	; 0x8000db <t0TotalOverflow+0x3>
 252:	60 91 dc 00 	lds	r22, 0x00DC	; 0x8000dc <t0TotalOverflow+0x4>
 256:	70 91 dd 00 	lds	r23, 0x00DD	; 0x8000dd <t0TotalOverflow+0x5>
 25a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <t0TotalOverflow+0x6>
 25e:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <t0TotalOverflow+0x7>
 262:	a1 e0       	ldi	r26, 0x01	; 1
 264:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__adddi3_s8>
 268:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <t0TotalOverflow>
 26c:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <t0TotalOverflow+0x1>
 270:	40 93 da 00 	sts	0x00DA, r20	; 0x8000da <t0TotalOverflow+0x2>
 274:	50 93 db 00 	sts	0x00DB, r21	; 0x8000db <t0TotalOverflow+0x3>
 278:	60 93 dc 00 	sts	0x00DC, r22	; 0x8000dc <t0TotalOverflow+0x4>
 27c:	70 93 dd 00 	sts	0x00DD, r23	; 0x8000dd <t0TotalOverflow+0x5>
 280:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <t0TotalOverflow+0x6>
 284:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <t0TotalOverflow+0x7>
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <init_rp6Data>:
 2a4:	eb ec       	ldi	r30, 0xCB	; 203
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	10 82       	st	Z, r1
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	81 83       	std	Z+1, r24	; 0x01
 2ae:	12 82       	std	Z+2, r1	; 0x02
 2b0:	9e e1       	ldi	r25, 0x1E	; 30
 2b2:	93 83       	std	Z+3, r25	; 0x03
 2b4:	28 eb       	ldi	r18, 0xB8	; 184
 2b6:	3b e0       	ldi	r19, 0x0B	; 11
 2b8:	35 83       	std	Z+5, r19	; 0x05
 2ba:	24 83       	std	Z+4, r18	; 0x04
 2bc:	28 e8       	ldi	r18, 0x88	; 136
 2be:	33 e1       	ldi	r19, 0x13	; 19
 2c0:	37 83       	std	Z+7, r19	; 0x07
 2c2:	26 83       	std	Z+6, r18	; 0x06
 2c4:	40 e4       	ldi	r20, 0x40	; 64
 2c6:	5d e0       	ldi	r21, 0x0D	; 13
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	40 87       	std	Z+8, r20	; 0x08
 2ce:	51 87       	std	Z+9, r21	; 0x09
 2d0:	62 87       	std	Z+10, r22	; 0x0a
 2d2:	73 87       	std	Z+11, r23	; 0x0b
 2d4:	84 87       	std	Z+12, r24	; 0x0c
 2d6:	08 95       	ret

000002d8 <init_arduinoData>:
 2d8:	e7 ec       	ldi	r30, 0xC7	; 199
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	11 82       	std	Z+1, r1	; 0x01
 2de:	10 82       	st	Z, r1
 2e0:	13 82       	std	Z+3, r1	; 0x03
 2e2:	12 82       	std	Z+2, r1	; 0x02
 2e4:	08 95       	ret

000002e6 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
 2e6:	81 b3       	in	r24, 0x11	; 17
 2e8:	80 63       	ori	r24, 0x30	; 48
 2ea:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
 2ec:	81 b3       	in	r24, 0x11	; 17
 2ee:	83 7f       	andi	r24, 0xF3	; 243
 2f0:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
 2f2:	84 b3       	in	r24, 0x14	; 20
 2f4:	8c 60       	ori	r24, 0x0C	; 12
 2f6:	84 bb       	out	0x14, r24	; 20
 2f8:	08 95       	ret

000002fa <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
 2fa:	8f b5       	in	r24, 0x2f	; 47
 2fc:	80 68       	ori	r24, 0x80	; 128
 2fe:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
 300:	8f b5       	in	r24, 0x2f	; 47
 302:	80 62       	ori	r24, 0x20	; 32
 304:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
 306:	8f b5       	in	r24, 0x2f	; 47
 308:	82 60       	ori	r24, 0x02	; 2
 30a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
 30c:	8e b5       	in	r24, 0x2e	; 46
 30e:	80 61       	ori	r24, 0x10	; 16
 310:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
 312:	8e b5       	in	r24, 0x2e	; 46
 314:	81 60       	ori	r24, 0x01	; 1
 316:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	99 ef       	ldi	r25, 0xF9	; 249
 31c:	97 bd       	out	0x27, r25	; 39
 31e:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
 320:	1b bc       	out	0x2b, r1	; 43
 322:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
 324:	19 bc       	out	0x29, r1	; 41
 326:	18 bc       	out	0x28, r1	; 40
 328:	08 95       	ret

0000032a <init_motor_encoder>:
}


void init_motor_encoder(){
	arduinoData.motorEncoderLVal = 0;				//Reset the motor encoder variable
 32a:	e7 ec       	ldi	r30, 0xC7	; 199
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	11 82       	std	Z+1, r1	; 0x01
 330:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;				//---^
 332:	13 82       	std	Z+3, r1	; 0x03
 334:	12 82       	std	Z+2, r1	; 0x02
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
 336:	85 b7       	in	r24, 0x35	; 53
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
 33c:	85 b7       	in	r24, 0x35	; 53
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
 342:	8b b7       	in	r24, 0x3b	; 59
 344:	80 64       	ori	r24, 0x40	; 64
 346:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
 348:	8b b7       	in	r24, 0x3b	; 59
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	8b bf       	out	0x3b, r24	; 59
 34e:	08 95       	ret

00000350 <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
 350:	0e 94 73 01 	call	0x2e6	; 0x2e6 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
 354:	0e 94 7d 01 	call	0x2fa	; 0x2fa <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
 358:	0e 94 95 01 	call	0x32a	; 0x32a <init_motor_encoder>
 35c:	08 95       	ret

0000035e <main>:
	return databyte++;
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
 35e:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
 360:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_micros>
	
	init_motor();
 364:	0e 94 a8 01 	call	0x350	; 0x350 <init_motor>
	init_LED();
 368:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <init_LED>
	
	init_i2c_slave(8);
 36c:	88 e0       	ldi	r24, 0x08	; 8
 36e:	0e 94 49 00 	call	0x92	; 0x92 <init_i2c_slave>
	
	init_rp6Data();
 372:	0e 94 52 01 	call	0x2a4	; 0x2a4 <init_rp6Data>
	init_arduinoData();
 376:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <init_arduinoData>
	
	initUSART();
 37a:	0e 94 b7 00 	call	0x16e	; 0x16e <initUSART>
	//-----------------------
	writeString("Start!");
 37e:	80 e6       	ldi	r24, 0x60	; 96
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>

	while(1){
		writeString("Start 2!");
		_delay_ms(250);
		writeString("Start 3!");
		writeInteger(rp6Data.driveSpeed, 10);
 386:	cb ec       	ldi	r28, 0xCB	; 203
 388:	d0 e0       	ldi	r29, 0x00	; 0
	initUSART();
	//-----------------------
	writeString("Start!");

	while(1){
		writeString("Start 2!");
 38a:	87 e6       	ldi	r24, 0x67	; 103
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 392:	2f e7       	ldi	r18, 0x7F	; 127
 394:	8a e1       	ldi	r24, 0x1A	; 26
 396:	96 e0       	ldi	r25, 0x06	; 6
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x3a>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x44>
 3a2:	00 00       	nop
		_delay_ms(250);
		writeString("Start 3!");
 3a4:	80 e7       	ldi	r24, 0x70	; 112
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.driveSpeed, 10);
 3ac:	88 81       	ld	r24, Y
 3ae:	6a e0       	ldi	r22, 0x0A	; 10
 3b0:	08 2e       	mov	r0, r24
 3b2:	00 0c       	add	r0, r0
 3b4:	99 0b       	sbc	r25, r25
 3b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("Start 4!");
 3ba:	89 e7       	ldi	r24, 0x79	; 121
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeString("\n");
 3c2:	8c e9       	ldi	r24, 0x9C	; 156
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.driveDirection, 10);
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
 3ce:	08 2e       	mov	r0, r24
 3d0:	00 0c       	add	r0, r0
 3d2:	99 0b       	sbc	r25, r25
 3d4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("\n");
 3d8:	8c e9       	ldi	r24, 0x9C	; 156
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.turnDirection, 10);
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	6a e0       	ldi	r22, 0x0A	; 10
 3e4:	08 2e       	mov	r0, r24
 3e6:	00 0c       	add	r0, r0
 3e8:	99 0b       	sbc	r25, r25
 3ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("\n");
 3ee:	8c e9       	ldi	r24, 0x9C	; 156
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.accelerationRate, 10);
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	6a e0       	ldi	r22, 0x0A	; 10
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("\n");
 400:	8c e9       	ldi	r24, 0x9C	; 156
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.turnRate, 10);
 408:	6a e0       	ldi	r22, 0x0A	; 10
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	9d 81       	ldd	r25, Y+5	; 0x05
 40e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("\n");
 412:	8c e9       	ldi	r24, 0x9C	; 156
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.driveSpeedThreshold, 10);
 41a:	6a e0       	ldi	r22, 0x0A	; 10
 41c:	8e 81       	ldd	r24, Y+6	; 0x06
 41e:	9f 81       	ldd	r25, Y+7	; 0x07
 420:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("\n");
 424:	8c e9       	ldi	r24, 0x9C	; 156
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.updateSpeed, 10);
 42c:	6a e0       	ldi	r22, 0x0A	; 10
 42e:	88 85       	ldd	r24, Y+8	; 0x08
 430:	99 85       	ldd	r25, Y+9	; 0x09
 432:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("\n");
 436:	8c e9       	ldi	r24, 0x9C	; 156
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
		writeInteger(rp6Data.enableBeeper, 10);
 43e:	8c 85       	ldd	r24, Y+12	; 0x0c
 440:	6a e0       	ldi	r22, 0x0A	; 10
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <writeInteger>
		writeString("\n-------------------------\n");
 448:	82 e8       	ldi	r24, 0x82	; 130
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 c4 00 	call	0x188	; 0x188 <writeString>
 450:	9c cf       	rjmp	.-200    	; 0x38a <main+0x2c>

00000452 <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	arduinoData.motorEncoderLVal++;							//Increase the encoder variable
 464:	e7 ec       	ldi	r30, 0xC7	; 199
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	91 81       	ldd	r25, Z+1	; 0x01
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	91 83       	std	Z+1, r25	; 0x01
 470:	80 83       	st	Z, r24
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	9f 91       	pop	r25
 478:	8f 91       	pop	r24
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <__vector_2>:


ISR(INT1_vect){
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
	arduinoData.motorEncoderRVal++;							//Increase the encoder variable
 496:	e7 ec       	ldi	r30, 0xC7	; 199
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	82 81       	ldd	r24, Z+2	; 0x02
 49c:	93 81       	ldd	r25, Z+3	; 0x03
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	93 83       	std	Z+3, r25	; 0x03
 4a2:	82 83       	std	Z+2, r24	; 0x02
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__adddi3_s8>:
 4b6:	00 24       	eor	r0, r0
 4b8:	a7 fd       	sbrc	r26, 7
 4ba:	00 94       	com	r0
 4bc:	2a 0f       	add	r18, r26
 4be:	30 1d       	adc	r19, r0
 4c0:	40 1d       	adc	r20, r0
 4c2:	50 1d       	adc	r21, r0
 4c4:	60 1d       	adc	r22, r0
 4c6:	70 1d       	adc	r23, r0
 4c8:	80 1d       	adc	r24, r0
 4ca:	90 1d       	adc	r25, r0
 4cc:	08 95       	ret

000004ce <itoa>:
 4ce:	45 32       	cpi	r20, 0x25	; 37
 4d0:	51 05       	cpc	r21, r1
 4d2:	20 f4       	brcc	.+8      	; 0x4dc <itoa+0xe>
 4d4:	42 30       	cpi	r20, 0x02	; 2
 4d6:	10 f0       	brcs	.+4      	; 0x4dc <itoa+0xe>
 4d8:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__itoa_ncheck>
 4dc:	fb 01       	movw	r30, r22
 4de:	10 82       	st	Z, r1
 4e0:	cb 01       	movw	r24, r22
 4e2:	08 95       	ret

000004e4 <__itoa_ncheck>:
 4e4:	bb 27       	eor	r27, r27
 4e6:	4a 30       	cpi	r20, 0x0A	; 10
 4e8:	31 f4       	brne	.+12     	; 0x4f6 <__itoa_ncheck+0x12>
 4ea:	99 23       	and	r25, r25
 4ec:	22 f4       	brpl	.+8      	; 0x4f6 <__itoa_ncheck+0x12>
 4ee:	bd e2       	ldi	r27, 0x2D	; 45
 4f0:	90 95       	com	r25
 4f2:	81 95       	neg	r24
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__utoa_common>

000004fa <__utoa_ncheck>:
 4fa:	bb 27       	eor	r27, r27

000004fc <__utoa_common>:
 4fc:	fb 01       	movw	r30, r22
 4fe:	55 27       	eor	r21, r21
 500:	aa 27       	eor	r26, r26
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	aa 1f       	adc	r26, r26
 508:	a4 17       	cp	r26, r20
 50a:	10 f0       	brcs	.+4      	; 0x510 <__utoa_common+0x14>
 50c:	a4 1b       	sub	r26, r20
 50e:	83 95       	inc	r24
 510:	50 51       	subi	r21, 0x10	; 16
 512:	b9 f7       	brne	.-18     	; 0x502 <__utoa_common+0x6>
 514:	a0 5d       	subi	r26, 0xD0	; 208
 516:	aa 33       	cpi	r26, 0x3A	; 58
 518:	08 f0       	brcs	.+2      	; 0x51c <__utoa_common+0x20>
 51a:	a9 5d       	subi	r26, 0xD9	; 217
 51c:	a1 93       	st	Z+, r26
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	79 f7       	brne	.-34     	; 0x500 <__utoa_common+0x4>
 522:	b1 11       	cpse	r27, r1
 524:	b1 93       	st	Z+, r27
 526:	11 92       	st	Z+, r1
 528:	cb 01       	movw	r24, r22
 52a:	0c 94 97 02 	jmp	0x52e	; 0x52e <strrev>

0000052e <strrev>:
 52e:	dc 01       	movw	r26, r24
 530:	fc 01       	movw	r30, r24
 532:	67 2f       	mov	r22, r23
 534:	71 91       	ld	r23, Z+
 536:	77 23       	and	r23, r23
 538:	e1 f7       	brne	.-8      	; 0x532 <strrev+0x4>
 53a:	32 97       	sbiw	r30, 0x02	; 2
 53c:	04 c0       	rjmp	.+8      	; 0x546 <strrev+0x18>
 53e:	7c 91       	ld	r23, X
 540:	6d 93       	st	X+, r22
 542:	70 83       	st	Z, r23
 544:	62 91       	ld	r22, -Z
 546:	ae 17       	cp	r26, r30
 548:	bf 07       	cpc	r27, r31
 54a:	c8 f3       	brcs	.-14     	; 0x53e <strrev+0x10>
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
