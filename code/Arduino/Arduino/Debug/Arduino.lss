
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00000c0a  00000c9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  00800228  00800228  00000cc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001252  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e72  00000000  00000000  0000200a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d1  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bb  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a2  00000000  00000000  00003dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000434d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
   2:	00 00       	nop
   4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
   6:	00 00       	nop
   8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
   a:	00 00       	nop
   c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
   e:	00 00       	nop
  10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
  12:	00 00       	nop
  14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
  16:	00 00       	nop
  18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	bf c0       	rjmp	.+382    	; 0x1a0 <__bad_interrupt>
  22:	00 00       	nop
  24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>
  26:	00 00       	nop
  28:	bb c0       	rjmp	.+374    	; 0x1a0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b9 c0       	rjmp	.+370    	; 0x1a0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__bad_interrupt>
  32:	00 00       	nop
  34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__bad_interrupt>
  36:	00 00       	nop
  38:	b3 c0       	rjmp	.+358    	; 0x1a0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b1 c0       	rjmp	.+354    	; 0x1a0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	af c0       	rjmp	.+350    	; 0x1a0 <__bad_interrupt>
  42:	00 00       	nop
  44:	ad c0       	rjmp	.+346    	; 0x1a0 <__bad_interrupt>
  46:	00 00       	nop
  48:	ab c0       	rjmp	.+342    	; 0x1a0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a9 c0       	rjmp	.+338    	; 0x1a0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a7 c0       	rjmp	.+334    	; 0x1a0 <__bad_interrupt>
  52:	00 00       	nop
  54:	a5 c0       	rjmp	.+330    	; 0x1a0 <__bad_interrupt>
  56:	00 00       	nop
  58:	a3 c0       	rjmp	.+326    	; 0x1a0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a1 c0       	rjmp	.+322    	; 0x1a0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9f c0       	rjmp	.+318    	; 0x1a0 <__bad_interrupt>
  62:	00 00       	nop
  64:	c8 c0       	rjmp	.+400    	; 0x1f6 <__vector_25>
  66:	00 00       	nop
  68:	9b c0       	rjmp	.+310    	; 0x1a0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	99 c0       	rjmp	.+306    	; 0x1a0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	97 c0       	rjmp	.+302    	; 0x1a0 <__bad_interrupt>
  72:	00 00       	nop
  74:	95 c0       	rjmp	.+298    	; 0x1a0 <__bad_interrupt>
  76:	00 00       	nop
  78:	93 c0       	rjmp	.+294    	; 0x1a0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	91 c0       	rjmp	.+290    	; 0x1a0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8f c0       	rjmp	.+286    	; 0x1a0 <__bad_interrupt>
  82:	00 00       	nop
  84:	8d c0       	rjmp	.+282    	; 0x1a0 <__bad_interrupt>
  86:	00 00       	nop
  88:	8b c0       	rjmp	.+278    	; 0x1a0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	89 c0       	rjmp	.+274    	; 0x1a0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	87 c0       	rjmp	.+270    	; 0x1a0 <__bad_interrupt>
  92:	00 00       	nop
  94:	85 c0       	rjmp	.+266    	; 0x1a0 <__bad_interrupt>
  96:	00 00       	nop
  98:	83 c0       	rjmp	.+262    	; 0x1a0 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	81 c0       	rjmp	.+258    	; 0x1a0 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7f c0       	rjmp	.+254    	; 0x1a0 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7d c0       	rjmp	.+250    	; 0x1a0 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7b c0       	rjmp	.+246    	; 0x1a0 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	79 c0       	rjmp	.+242    	; 0x1a0 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	77 c0       	rjmp	.+238    	; 0x1a0 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	75 c0       	rjmp	.+234    	; 0x1a0 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	73 c0       	rjmp	.+230    	; 0x1a0 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	71 c0       	rjmp	.+226    	; 0x1a0 <__bad_interrupt>
  be:	00 00       	nop
  c0:	6f c0       	rjmp	.+222    	; 0x1a0 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	6d c0       	rjmp	.+218    	; 0x1a0 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	6b c0       	rjmp	.+214    	; 0x1a0 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	69 c0       	rjmp	.+210    	; 0x1a0 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	67 c0       	rjmp	.+206    	; 0x1a0 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	65 c0       	rjmp	.+202    	; 0x1a0 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	63 c0       	rjmp	.+198    	; 0x1a0 <__bad_interrupt>
  da:	00 00       	nop
  dc:	61 c0       	rjmp	.+194    	; 0x1a0 <__bad_interrupt>
  de:	00 00       	nop
  e0:	5f c0       	rjmp	.+190    	; 0x1a0 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	07 63       	ori	r16, 0x37	; 55
  e6:	42 36       	cpi	r20, 0x62	; 98
  e8:	b7 9b       	sbis	0x16, 7	; 22
  ea:	d8 a7       	std	Y+40, r29	; 0x28
  ec:	1a 39       	cpi	r17, 0x9A	; 154
  ee:	68 56       	subi	r22, 0x68	; 104
  f0:	18 ae       	std	Y+56, r1	; 0x38
  f2:	ba ab       	std	Y+50, r27	; 0x32
  f4:	55 8c       	ldd	r5, Z+29	; 0x1d
  f6:	1d 3c       	cpi	r17, 0xCD	; 205
  f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
  fa:	57 63       	ori	r21, 0x37	; 55
  fc:	bd 6d       	ori	r27, 0xDD	; 221
  fe:	ed fd       	.word	0xfded	; ????
 100:	75 3e       	cpi	r23, 0xE5	; 229
 102:	f6 17       	cp	r31, r22
 104:	72 31       	cpi	r23, 0x12	; 18
 106:	bf 00       	.word	0x00bf	; ????
 108:	00 00       	nop
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 00       	nop
 110:	be 92       	st	-X, r11
 112:	24 49       	sbci	r18, 0x94	; 148
 114:	12 3e       	cpi	r17, 0xE2	; 226
 116:	ab aa       	std	Y+51, r10	; 0x33
 118:	aa 2a       	or	r10, r26
 11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
 11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 11e:	4c 3e       	cpi	r20, 0xEC	; 236
 120:	00 00       	nop
 122:	00 80       	ld	r0, Z
 124:	be ab       	std	Y+54, r27	; 0x36
 126:	aa aa       	std	Y+50, r10	; 0x32
 128:	aa 3e       	cpi	r26, 0xEA	; 234
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	bf 00       	.word	0x00bf	; ????
 130:	00 00       	nop
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	00 00       	nop
 136:	00 00       	nop
 138:	00 08       	sbc	r0, r0
 13a:	41 78       	andi	r20, 0x81	; 129
 13c:	d3 bb       	out	0x13, r29	; 19
 13e:	43 87       	std	Z+11, r20	; 0x0b
 140:	d1 13       	cpse	r29, r17
 142:	3d 19       	sub	r19, r13
 144:	0e 3c       	cpi	r16, 0xCE	; 206
 146:	c3 bd       	out	0x23, r28	; 35
 148:	42 82       	std	Z+2, r4	; 0x02
 14a:	ad 2b       	or	r26, r29
 14c:	3e 68       	ori	r19, 0x8E	; 142
 14e:	ec 82       	std	Y+4, r14	; 0x04
 150:	76 be       	out	0x36, r7	; 54
 152:	d9 8f       	std	Y+25, r29	; 0x19
 154:	e1 a9       	ldd	r30, Z+49	; 0x31
 156:	3e 4c       	sbci	r19, 0xCE	; 206
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	ff be       	out	0x3f, r15	; 63
 15c:	01 c4       	rjmp	.+2050   	; 0x960 <log+0x58>
 15e:	ff 7f       	andi	r31, 0xFF	; 255
 160:	3f 00       	.word	0x003f	; ????
 162:	00 00       	nop
	...

00000166 <__ctors_end>:
 166:	11 24       	eor	r1, r1
 168:	1f be       	out	0x3f, r1	; 63
 16a:	cf ef       	ldi	r28, 0xFF	; 255
 16c:	d1 e2       	ldi	r29, 0x21	; 33
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
 172:	12 e0       	ldi	r17, 0x02	; 2
 174:	a0 e0       	ldi	r26, 0x00	; 0
 176:	b2 e0       	ldi	r27, 0x02	; 2
 178:	ea e0       	ldi	r30, 0x0A	; 10
 17a:	fc e0       	ldi	r31, 0x0C	; 12
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	0b bf       	out	0x3b, r16	; 59
 180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
 182:	07 90       	elpm	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	a8 32       	cpi	r26, 0x28	; 40
 188:	b1 07       	cpc	r27, r17
 18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
 18c:	23 e0       	ldi	r18, 0x03	; 3
 18e:	a8 e2       	ldi	r26, 0x28	; 40
 190:	b2 e0       	ldi	r27, 0x02	; 2
 192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
 194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
 196:	ab 32       	cpi	r26, 0x2B	; 43
 198:	b2 07       	cpc	r27, r18
 19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
 19c:	2d d1       	rcall	.+602    	; 0x3f8 <main>
 19e:	33 c5       	rjmp	.+2662   	; 0xc06 <_exit>

000001a0 <__bad_interrupt>:
 1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <init_master>:
//   for(uint8_t i=0;i<tel;++i) {
//	 writeString("\n\r");writeInteger(op[i],16);
//	 writeString(" data ");writeInteger(b[i],10);
//   }

}
 1a2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a6:	88 e4       	ldi	r24, 0x48	; 72
 1a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1b2:	08 95       	ret

000001b4 <verzenden>:

void verzenden(uint8_t ad,uint8_t b) {
//  uint8_t op[5];

	TWCR |= (1<<TWSTA);
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	90 81       	ld	r25, Z
 1ba:	90 62       	ori	r25, 0x20	; 32
 1bc:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT)));
 1be:	90 81       	ld	r25, Z
 1c0:	99 23       	and	r25, r25
 1c2:	ec f7       	brge	.-6      	; 0x1be <verzenden+0xa>
 //   op[0] = TWSR;
	TWDR=(ad<<1);
 1c4:	88 0f       	add	r24, r24
 1c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	ec f7       	brge	.-6      	; 0x1d4 <verzenden+0x20>
//    op[1] = TWSR;

	TWDR=b;
 1da:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 1de:	84 e8       	ldi	r24, 0x84	; 132
 1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 1e4:	ec eb       	ldi	r30, 0xBC	; 188
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	ec f7       	brge	.-6      	; 0x1e8 <verzenden+0x34>
  //  op[2] = TWSR;

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 1ee:	84 e9       	ldi	r24, 0x94	; 148
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f4:	08 95       	ret

000001f6 <__vector_25>:
int8_t globalDriveDirection;		// Value -1, 0 or 1
int8_t globalTurnDirection;			// Value -1, 0 or 1
int8_t globalDriveThrottle;			//value between 0 - 100


ISR(USART_INTERRUPT_VECTOR) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	0b b6       	in	r0, 0x3b	; 59
 202:	0f 92       	push	r0
 204:	df 92       	push	r13
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
	static char buffer[BUFFER_SIZE];											//Character buffer to store numerals
	static int bufferPos = -1;													//Represents which buffer positions are currently in use to store numerals
	static char received = 0;													//Stores the last character received through USART
	static char command = 0;													//Stores a character that represents a command. Default value is null
	
	received = UDR0;
 22a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	if ('0' <= received && received <= '9') {									//If received contains a a numeral
 22e:	90 ed       	ldi	r25, 0xD0	; 208
 230:	98 0f       	add	r25, r24
 232:	9a 30       	cpi	r25, 0x0A	; 10
 234:	c0 f4       	brcc	.+48     	; 0x266 <__vector_25+0x70>
		
		if (command == 't') {													//If command 't' is currently set
 236:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <command.1922>
 23a:	94 37       	cpi	r25, 0x74	; 116
 23c:	09 f0       	breq	.+2      	; 0x240 <__vector_25+0x4a>
 23e:	c2 c0       	rjmp	.+388    	; 0x3c4 <__vector_25+0x1ce>
			if (bufferPos < BUFFER_SIZE)										//Check to prevent overflow of the buffer
 240:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 244:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 248:	2f 3f       	cpi	r18, 0xFF	; 255
 24a:	31 05       	cpc	r19, r1
 24c:	0c f0       	brlt	.+2      	; 0x250 <__vector_25+0x5a>
 24e:	ba c0       	rjmp	.+372    	; 0x3c4 <__vector_25+0x1ce>
				buffer[++bufferPos] = received;									//Add numeral to buffer
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	3f 4f       	sbci	r19, 0xFF	; 255
 254:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 258:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
 25c:	f9 01       	movw	r30, r18
 25e:	e8 5d       	subi	r30, 0xD8	; 216
 260:	fd 4f       	sbci	r31, 0xFD	; 253
 262:	80 83       	st	Z, r24
 264:	af c0       	rjmp	.+350    	; 0x3c4 <__vector_25+0x1ce>
		}
			
	} else if ('a' <= received && received <= 'z') {							//If received contains a (lower case) letter
 266:	9f e9       	ldi	r25, 0x9F	; 159
 268:	98 0f       	add	r25, r24
 26a:	9a 31       	cpi	r25, 0x1A	; 26
 26c:	80 f4       	brcc	.+32     	; 0x28e <__vector_25+0x98>
		
		switch(received) {														//Each valid command is represented by a case
 26e:	85 37       	cpi	r24, 0x75	; 117
 270:	40 f4       	brcc	.+16     	; 0x282 <__vector_25+0x8c>
 272:	83 37       	cpi	r24, 0x73	; 115
 274:	48 f4       	brcc	.+18     	; 0x288 <__vector_25+0x92>
 276:	81 36       	cpi	r24, 0x61	; 97
 278:	39 f0       	breq	.+14     	; 0x288 <__vector_25+0x92>
 27a:	84 36       	cpi	r24, 0x64	; 100
 27c:	09 f0       	breq	.+2      	; 0x280 <__vector_25+0x8a>
 27e:	a2 c0       	rjmp	.+324    	; 0x3c4 <__vector_25+0x1ce>
 280:	03 c0       	rjmp	.+6      	; 0x288 <__vector_25+0x92>
 282:	87 37       	cpi	r24, 0x77	; 119
 284:	09 f0       	breq	.+2      	; 0x288 <__vector_25+0x92>
 286:	9e c0       	rjmp	.+316    	; 0x3c4 <__vector_25+0x1ce>
			case 'w':
			case 'a':
			case 's':
			case 'd':
			case 't':
			command = received;
 288:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <command.1922>
 28c:	9b c0       	rjmp	.+310    	; 0x3c4 <__vector_25+0x1ce>
		}
	} else if (received == '\r') {												//If received contains a carriage return
 28e:	8d 30       	cpi	r24, 0x0D	; 13
 290:	09 f0       	breq	.+2      	; 0x294 <__vector_25+0x9e>
 292:	98 c0       	rjmp	.+304    	; 0x3c4 <__vector_25+0x1ce>
		
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
 294:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <command.1922>
 298:	84 37       	cpi	r24, 0x74	; 116
 29a:	b1 f5       	brne	.+108    	; 0x308 <__vector_25+0x112>
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
 29c:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <__data_start>
 2a0:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <__data_start+0x1>
 2a4:	11 23       	and	r17, r17
 2a6:	0c f4       	brge	.+2      	; 0x2aa <__vector_25+0xb4>
 2a8:	71 c0       	rjmp	.+226    	; 0x38c <__vector_25+0x196>
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	d1 2c       	mov	r13, r1
 2b0:	e1 2c       	mov	r14, r1
 2b2:	f1 2c       	mov	r15, r1
				charToInt = (int) (buffer[i] - '0');
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
 2b4:	b8 01       	movw	r22, r16
 2b6:	6c 1b       	sub	r22, r28
 2b8:	7d 0b       	sbc	r23, r29
 2ba:	07 2e       	mov	r0, r23
 2bc:	00 0c       	add	r0, r0
 2be:	88 0b       	sbc	r24, r24
 2c0:	99 0b       	sbc	r25, r25
 2c2:	b2 d1       	rcall	.+868    	; 0x628 <__floatsisf>
 2c4:	9b 01       	movw	r18, r22
 2c6:	ac 01       	movw	r20, r24
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	91 e4       	ldi	r25, 0x41	; 65
 2d0:	37 d2       	rcall	.+1134   	; 0x740 <pow>
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
				charToInt = (int) (buffer[i] - '0');
 2d2:	c8 5d       	subi	r28, 0xD8	; 216
 2d4:	dd 4f       	sbci	r29, 0xFD	; 253
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
 2d6:	c8 81       	ld	r28, Y
 2d8:	c0 53       	subi	r28, 0x30	; 48
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	5f e3       	ldi	r21, 0x3F	; 63
 2e4:	0a d1       	rcall	.+532    	; 0x4fa <__addsf3>
 2e6:	6d d1       	rcall	.+730    	; 0x5c2 <__fixsfsi>
 2e8:	c6 9f       	mul	r28, r22
 2ea:	90 01       	movw	r18, r0
 2ec:	c7 9f       	mul	r28, r23
 2ee:	30 0d       	add	r19, r0
 2f0:	d6 9f       	mul	r29, r22
 2f2:	30 0d       	add	r19, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	e2 0e       	add	r14, r18
 2f8:	f3 1e       	adc	r15, r19
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
 2fa:	d3 94       	inc	r13
 2fc:	cd 2d       	mov	r28, r13
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	0c 17       	cp	r16, r28
 302:	1d 07       	cpc	r17, r29
 304:	bc f6       	brge	.-82     	; 0x2b4 <__vector_25+0xbe>
 306:	3d c0       	rjmp	.+122    	; 0x382 <__vector_25+0x18c>
				charToInt = (int) (buffer[i] - '0');
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
			}
			
		}
		if (command) {															//Only if a command is set is data transmitted
 308:	88 23       	and	r24, r24
 30a:	09 f4       	brne	.+2      	; 0x30e <__vector_25+0x118>
 30c:	5b c0       	rjmp	.+182    	; 0x3c4 <__vector_25+0x1ce>
			
			switch (command) {
 30e:	83 37       	cpi	r24, 0x73	; 115
 310:	01 f1       	breq	.+64     	; 0x352 <__vector_25+0x15c>
 312:	28 f4       	brcc	.+10     	; 0x31e <__vector_25+0x128>
 314:	81 36       	cpi	r24, 0x61	; 97
 316:	91 f0       	breq	.+36     	; 0x33c <__vector_25+0x146>
 318:	84 36       	cpi	r24, 0x64	; 100
 31a:	31 f1       	breq	.+76     	; 0x368 <__vector_25+0x172>
 31c:	3b c0       	rjmp	.+118    	; 0x394 <__vector_25+0x19e>
 31e:	84 37       	cpi	r24, 0x74	; 116
 320:	71 f1       	breq	.+92     	; 0x37e <__vector_25+0x188>
 322:	87 37       	cpi	r24, 0x77	; 119
 324:	b9 f5       	brne	.+110    	; 0x394 <__vector_25+0x19e>
				
				case 'w':
				if (globalDriveDirection == 1) {
 326:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <globalDriveDirection>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	19 f4       	brne	.+6      	; 0x334 <__vector_25+0x13e>
					globalDriveDirection = 0;
 32e:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <globalDriveDirection>
 332:	30 c0       	rjmp	.+96     	; 0x394 <__vector_25+0x19e>
				} else {
					globalDriveDirection = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <globalDriveDirection>
 33a:	2c c0       	rjmp	.+88     	; 0x394 <__vector_25+0x19e>
				}
				break;
				
				case 'a':
				if (globalTurnDirection == -1) {
 33c:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <globalTurnDirection>
 340:	8f 3f       	cpi	r24, 0xFF	; 255
 342:	19 f4       	brne	.+6      	; 0x34a <__vector_25+0x154>
					globalTurnDirection = 0;
 344:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <globalTurnDirection>
 348:	25 c0       	rjmp	.+74     	; 0x394 <__vector_25+0x19e>
					} else {
					globalTurnDirection = -1;
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <globalTurnDirection>
 350:	21 c0       	rjmp	.+66     	; 0x394 <__vector_25+0x19e>
				}
				break;
				
				case 's':
				if (globalDriveDirection == -1) {
 352:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <globalDriveDirection>
 356:	8f 3f       	cpi	r24, 0xFF	; 255
 358:	19 f4       	brne	.+6      	; 0x360 <__vector_25+0x16a>
					globalDriveDirection = 0;
 35a:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <globalDriveDirection>
 35e:	1a c0       	rjmp	.+52     	; 0x394 <__vector_25+0x19e>
				} else {
					globalDriveDirection = -1;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <globalDriveDirection>
 366:	16 c0       	rjmp	.+44     	; 0x394 <__vector_25+0x19e>
				}
				break;
				
				case 'd':
				if (globalTurnDirection == 1) {
 368:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <globalTurnDirection>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	19 f4       	brne	.+6      	; 0x376 <__vector_25+0x180>
					globalTurnDirection = 0;
 370:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <globalTurnDirection>
 374:	0f c0       	rjmp	.+30     	; 0x394 <__vector_25+0x19e>
					} else {
					globalTurnDirection = 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <globalTurnDirection>
 37c:	0b c0       	rjmp	.+22     	; 0x394 <__vector_25+0x19e>
			case 't':
			command = received;
		}
	} else if (received == '\r') {												//If received contains a carriage return
		
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
 37e:	e1 2c       	mov	r14, r1
 380:	f1 2c       	mov	r15, r1
					globalTurnDirection = 1;
				}
				break;
				
				case 't':
				if (intValue <= 100) {
 382:	85 e6       	ldi	r24, 0x65	; 101
 384:	e8 16       	cp	r14, r24
 386:	f1 04       	cpc	r15, r1
 388:	28 f4       	brcc	.+10     	; 0x394 <__vector_25+0x19e>
 38a:	02 c0       	rjmp	.+4      	; 0x390 <__vector_25+0x19a>
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
 38c:	e1 2c       	mov	r14, r1
 38e:	f1 2c       	mov	r15, r1
				}
				break;
				
				case 't':
				if (intValue <= 100) {
					globalDriveThrottle = intValue;
 390:	e0 92 29 03 	sts	0x0329, r14	; 0x800329 <globalDriveThrottle>
				}
				break;
			}
		
			command = 0;														//Reset command
 394:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <command.1922>
			bufferPos = -1;													//Reset buffer position
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	9f ef       	ldi	r25, 0xFF	; 255
 39c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 3a0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			
			globalVariablesTransmitUSART(globalDriveDirection, globalTurnDirection, globalDriveThrottle);
 3a4:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <globalDriveThrottle>
 3a8:	04 2e       	mov	r0, r20
 3aa:	00 0c       	add	r0, r0
 3ac:	55 0b       	sbc	r21, r21
 3ae:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <globalTurnDirection>
 3b2:	06 2e       	mov	r0, r22
 3b4:	00 0c       	add	r0, r0
 3b6:	77 0b       	sbc	r23, r23
 3b8:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <globalDriveDirection>
 3bc:	08 2e       	mov	r0, r24
 3be:	00 0c       	add	r0, r0
 3c0:	99 0b       	sbc	r25, r25
 3c2:	78 d0       	rcall	.+240    	; 0x4b4 <globalVariablesTransmitUSART>
		}
	}
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	0f 90       	pop	r0
 3ec:	0b be       	out	0x3b, r0	; 59
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <main>:

int main(void)
{	
	//USART initialization
	UCSR0A = 0x00;								
 3f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B |= (1 << RXCIE0 | 1 << RXEN0);		//Enable USART receiver, receiver interrupt
 3fc:	e1 ec       	ldi	r30, 0xC1	; 193
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	80 69       	ori	r24, 0x90	; 144
 404:	80 83       	st	Z, r24
	UCSR0B |= 1 << TXEN0;	/*Transmitter enabled for testing*/
 406:	80 81       	ld	r24, Z
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01 | 1 << UCSZ00);		//Asynchronous USART, Parity none, 1 Stop bit, 8-bit character size
 40c:	e2 ec       	ldi	r30, 0xC2	; 194
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	86 60       	ori	r24, 0x06	; 6
 414:	80 83       	st	Z, r24
	UBRR0H = 00;
 416:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103;								//Baudrate 9600
 41a:	87 e6       	ldi	r24, 0x67	; 103
 41c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	sei();										//Enable interrupt routines
 420:	78 94       	sei
	init_master(); //enable i2c
 422:	bf de       	rcall	.-642    	; 0x1a2 <init_master>
	PORTD |= 0b00000011; //Pullup SDA and SCL
 424:	8b b1       	in	r24, 0x0b	; 11
 426:	83 60       	ori	r24, 0x03	; 3
 428:	8b b9       	out	0x0b, r24	; 11
	
    while (1) 
    {
	verzenden(8, globalDriveThrottle);
 42a:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <globalDriveThrottle>
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	c1 de       	rcall	.-638    	; 0x1b4 <verzenden>
	verzenden(8, globalDriveDirection);
 432:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <globalDriveDirection>
 436:	88 e0       	ldi	r24, 0x08	; 8
 438:	bd de       	rcall	.-646    	; 0x1b4 <verzenden>
	verzenden(8, globalTurnDirection);
 43a:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <globalTurnDirection>
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	b9 de       	rcall	.-654    	; 0x1b4 <verzenden>
 442:	f3 cf       	rjmp	.-26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

00000444 <writeChar>:
 444:	e0 ec       	ldi	r30, 0xC0	; 192
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	90 81       	ld	r25, Z
 44a:	95 ff       	sbrs	r25, 5
 44c:	fd cf       	rjmp	.-6      	; 0x448 <writeChar+0x4>
 44e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 452:	08 95       	ret

00000454 <writeString>:
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	fc 01       	movw	r30, r24
 45c:	80 81       	ld	r24, Z
 45e:	88 23       	and	r24, r24
 460:	51 f0       	breq	.+20     	; 0x476 <writeString+0x22>
 462:	8f 01       	movw	r16, r30
 464:	c0 e0       	ldi	r28, 0x00	; 0
 466:	ee df       	rcall	.-36     	; 0x444 <writeChar>
 468:	cf 5f       	subi	r28, 0xFF	; 255
 46a:	f8 01       	movw	r30, r16
 46c:	ec 0f       	add	r30, r28
 46e:	f1 1d       	adc	r31, r1
 470:	80 81       	ld	r24, Z
 472:	81 11       	cpse	r24, r1
 474:	f8 cf       	rjmp	.-16     	; 0x466 <writeString+0x12>
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <writeInt>:
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	28 97       	sbiw	r28, 0x08	; 8
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	4a e0       	ldi	r20, 0x0A	; 10
 494:	be 01       	movw	r22, r28
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	82 d3       	rcall	.+1796   	; 0xba0 <__itoa_ncheck>
 49c:	ce 01       	movw	r24, r28
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	d9 df       	rcall	.-78     	; 0x454 <writeString>
 4a2:	28 96       	adiw	r28, 0x08	; 8
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <globalVariablesTransmitUSART>:
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	7c 01       	movw	r14, r24
 4c2:	8b 01       	movw	r16, r22
 4c4:	ea 01       	movw	r28, r20
 4c6:	85 e0       	ldi	r24, 0x05	; 5
 4c8:	92 e0       	ldi	r25, 0x02	; 2
 4ca:	c4 df       	rcall	.-120    	; 0x454 <writeString>
 4cc:	c7 01       	movw	r24, r14
 4ce:	d7 df       	rcall	.-82     	; 0x47e <writeInt>
 4d0:	81 e1       	ldi	r24, 0x11	; 17
 4d2:	92 e0       	ldi	r25, 0x02	; 2
 4d4:	bf df       	rcall	.-130    	; 0x454 <writeString>
 4d6:	c8 01       	movw	r24, r16
 4d8:	d2 df       	rcall	.-92     	; 0x47e <writeInt>
 4da:	8a e1       	ldi	r24, 0x1A	; 26
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	ba df       	rcall	.-140    	; 0x454 <writeString>
 4e0:	ce 01       	movw	r24, r28
 4e2:	cd df       	rcall	.-102    	; 0x47e <writeInt>
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	b5 df       	rcall	.-150    	; 0x454 <writeString>
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <__subsf3>:
 4f8:	50 58       	subi	r21, 0x80	; 128

000004fa <__addsf3>:
 4fa:	bb 27       	eor	r27, r27
 4fc:	aa 27       	eor	r26, r26
 4fe:	0e d0       	rcall	.+28     	; 0x51c <__addsf3x>
 500:	e5 c0       	rjmp	.+458    	; 0x6cc <__fp_round>
 502:	d6 d0       	rcall	.+428    	; 0x6b0 <__fp_pscA>
 504:	30 f0       	brcs	.+12     	; 0x512 <__addsf3+0x18>
 506:	db d0       	rcall	.+438    	; 0x6be <__fp_pscB>
 508:	20 f0       	brcs	.+8      	; 0x512 <__addsf3+0x18>
 50a:	31 f4       	brne	.+12     	; 0x518 <__addsf3+0x1e>
 50c:	9f 3f       	cpi	r25, 0xFF	; 255
 50e:	11 f4       	brne	.+4      	; 0x514 <__addsf3+0x1a>
 510:	1e f4       	brtc	.+6      	; 0x518 <__addsf3+0x1e>
 512:	cb c0       	rjmp	.+406    	; 0x6aa <__fp_nan>
 514:	0e f4       	brtc	.+2      	; 0x518 <__addsf3+0x1e>
 516:	e0 95       	com	r30
 518:	e7 fb       	bst	r30, 7
 51a:	c1 c0       	rjmp	.+386    	; 0x69e <__fp_inf>

0000051c <__addsf3x>:
 51c:	e9 2f       	mov	r30, r25
 51e:	e7 d0       	rcall	.+462    	; 0x6ee <__fp_split3>
 520:	80 f3       	brcs	.-32     	; 0x502 <__addsf3+0x8>
 522:	ba 17       	cp	r27, r26
 524:	62 07       	cpc	r22, r18
 526:	73 07       	cpc	r23, r19
 528:	84 07       	cpc	r24, r20
 52a:	95 07       	cpc	r25, r21
 52c:	18 f0       	brcs	.+6      	; 0x534 <__addsf3x+0x18>
 52e:	71 f4       	brne	.+28     	; 0x54c <__addsf3x+0x30>
 530:	9e f5       	brtc	.+102    	; 0x598 <__addsf3x+0x7c>
 532:	ff c0       	rjmp	.+510    	; 0x732 <__fp_zero>
 534:	0e f4       	brtc	.+2      	; 0x538 <__addsf3x+0x1c>
 536:	e0 95       	com	r30
 538:	0b 2e       	mov	r0, r27
 53a:	ba 2f       	mov	r27, r26
 53c:	a0 2d       	mov	r26, r0
 53e:	0b 01       	movw	r0, r22
 540:	b9 01       	movw	r22, r18
 542:	90 01       	movw	r18, r0
 544:	0c 01       	movw	r0, r24
 546:	ca 01       	movw	r24, r20
 548:	a0 01       	movw	r20, r0
 54a:	11 24       	eor	r1, r1
 54c:	ff 27       	eor	r31, r31
 54e:	59 1b       	sub	r21, r25
 550:	99 f0       	breq	.+38     	; 0x578 <__addsf3x+0x5c>
 552:	59 3f       	cpi	r21, 0xF9	; 249
 554:	50 f4       	brcc	.+20     	; 0x56a <__addsf3x+0x4e>
 556:	50 3e       	cpi	r21, 0xE0	; 224
 558:	68 f1       	brcs	.+90     	; 0x5b4 <__addsf3x+0x98>
 55a:	1a 16       	cp	r1, r26
 55c:	f0 40       	sbci	r31, 0x00	; 0
 55e:	a2 2f       	mov	r26, r18
 560:	23 2f       	mov	r18, r19
 562:	34 2f       	mov	r19, r20
 564:	44 27       	eor	r20, r20
 566:	58 5f       	subi	r21, 0xF8	; 248
 568:	f3 cf       	rjmp	.-26     	; 0x550 <__addsf3x+0x34>
 56a:	46 95       	lsr	r20
 56c:	37 95       	ror	r19
 56e:	27 95       	ror	r18
 570:	a7 95       	ror	r26
 572:	f0 40       	sbci	r31, 0x00	; 0
 574:	53 95       	inc	r21
 576:	c9 f7       	brne	.-14     	; 0x56a <__addsf3x+0x4e>
 578:	7e f4       	brtc	.+30     	; 0x598 <__addsf3x+0x7c>
 57a:	1f 16       	cp	r1, r31
 57c:	ba 0b       	sbc	r27, r26
 57e:	62 0b       	sbc	r22, r18
 580:	73 0b       	sbc	r23, r19
 582:	84 0b       	sbc	r24, r20
 584:	ba f0       	brmi	.+46     	; 0x5b4 <__addsf3x+0x98>
 586:	91 50       	subi	r25, 0x01	; 1
 588:	a1 f0       	breq	.+40     	; 0x5b2 <__addsf3x+0x96>
 58a:	ff 0f       	add	r31, r31
 58c:	bb 1f       	adc	r27, r27
 58e:	66 1f       	adc	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	c2 f7       	brpl	.-16     	; 0x586 <__addsf3x+0x6a>
 596:	0e c0       	rjmp	.+28     	; 0x5b4 <__addsf3x+0x98>
 598:	ba 0f       	add	r27, r26
 59a:	62 1f       	adc	r22, r18
 59c:	73 1f       	adc	r23, r19
 59e:	84 1f       	adc	r24, r20
 5a0:	48 f4       	brcc	.+18     	; 0x5b4 <__addsf3x+0x98>
 5a2:	87 95       	ror	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	b7 95       	ror	r27
 5aa:	f7 95       	ror	r31
 5ac:	9e 3f       	cpi	r25, 0xFE	; 254
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <__addsf3x+0x96>
 5b0:	b3 cf       	rjmp	.-154    	; 0x518 <__addsf3+0x1e>
 5b2:	93 95       	inc	r25
 5b4:	88 0f       	add	r24, r24
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <__addsf3x+0x9e>
 5b8:	99 27       	eor	r25, r25
 5ba:	ee 0f       	add	r30, r30
 5bc:	97 95       	ror	r25
 5be:	87 95       	ror	r24
 5c0:	08 95       	ret

000005c2 <__fixsfsi>:
 5c2:	04 d0       	rcall	.+8      	; 0x5cc <__fixunssfsi>
 5c4:	68 94       	set
 5c6:	b1 11       	cpse	r27, r1
 5c8:	b5 c0       	rjmp	.+362    	; 0x734 <__fp_szero>
 5ca:	08 95       	ret

000005cc <__fixunssfsi>:
 5cc:	98 d0       	rcall	.+304    	; 0x6fe <__fp_splitA>
 5ce:	88 f0       	brcs	.+34     	; 0x5f2 <__fixunssfsi+0x26>
 5d0:	9f 57       	subi	r25, 0x7F	; 127
 5d2:	90 f0       	brcs	.+36     	; 0x5f8 <__fixunssfsi+0x2c>
 5d4:	b9 2f       	mov	r27, r25
 5d6:	99 27       	eor	r25, r25
 5d8:	b7 51       	subi	r27, 0x17	; 23
 5da:	a0 f0       	brcs	.+40     	; 0x604 <__fixunssfsi+0x38>
 5dc:	d1 f0       	breq	.+52     	; 0x612 <__fixunssfsi+0x46>
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	1a f0       	brmi	.+6      	; 0x5ee <__fixunssfsi+0x22>
 5e8:	ba 95       	dec	r27
 5ea:	c9 f7       	brne	.-14     	; 0x5de <__fixunssfsi+0x12>
 5ec:	12 c0       	rjmp	.+36     	; 0x612 <__fixunssfsi+0x46>
 5ee:	b1 30       	cpi	r27, 0x01	; 1
 5f0:	81 f0       	breq	.+32     	; 0x612 <__fixunssfsi+0x46>
 5f2:	9f d0       	rcall	.+318    	; 0x732 <__fp_zero>
 5f4:	b1 e0       	ldi	r27, 0x01	; 1
 5f6:	08 95       	ret
 5f8:	9c c0       	rjmp	.+312    	; 0x732 <__fp_zero>
 5fa:	67 2f       	mov	r22, r23
 5fc:	78 2f       	mov	r23, r24
 5fe:	88 27       	eor	r24, r24
 600:	b8 5f       	subi	r27, 0xF8	; 248
 602:	39 f0       	breq	.+14     	; 0x612 <__fixunssfsi+0x46>
 604:	b9 3f       	cpi	r27, 0xF9	; 249
 606:	cc f3       	brlt	.-14     	; 0x5fa <__fixunssfsi+0x2e>
 608:	86 95       	lsr	r24
 60a:	77 95       	ror	r23
 60c:	67 95       	ror	r22
 60e:	b3 95       	inc	r27
 610:	d9 f7       	brne	.-10     	; 0x608 <__fixunssfsi+0x3c>
 612:	3e f4       	brtc	.+14     	; 0x622 <__fixunssfsi+0x56>
 614:	90 95       	com	r25
 616:	80 95       	com	r24
 618:	70 95       	com	r23
 61a:	61 95       	neg	r22
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	08 95       	ret

00000624 <__floatunsisf>:
 624:	e8 94       	clt
 626:	09 c0       	rjmp	.+18     	; 0x63a <__floatsisf+0x12>

00000628 <__floatsisf>:
 628:	97 fb       	bst	r25, 7
 62a:	3e f4       	brtc	.+14     	; 0x63a <__floatsisf+0x12>
 62c:	90 95       	com	r25
 62e:	80 95       	com	r24
 630:	70 95       	com	r23
 632:	61 95       	neg	r22
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	99 23       	and	r25, r25
 63c:	a9 f0       	breq	.+42     	; 0x668 <__floatsisf+0x40>
 63e:	f9 2f       	mov	r31, r25
 640:	96 e9       	ldi	r25, 0x96	; 150
 642:	bb 27       	eor	r27, r27
 644:	93 95       	inc	r25
 646:	f6 95       	lsr	r31
 648:	87 95       	ror	r24
 64a:	77 95       	ror	r23
 64c:	67 95       	ror	r22
 64e:	b7 95       	ror	r27
 650:	f1 11       	cpse	r31, r1
 652:	f8 cf       	rjmp	.-16     	; 0x644 <__floatsisf+0x1c>
 654:	fa f4       	brpl	.+62     	; 0x694 <__floatsisf+0x6c>
 656:	bb 0f       	add	r27, r27
 658:	11 f4       	brne	.+4      	; 0x65e <__floatsisf+0x36>
 65a:	60 ff       	sbrs	r22, 0
 65c:	1b c0       	rjmp	.+54     	; 0x694 <__floatsisf+0x6c>
 65e:	6f 5f       	subi	r22, 0xFF	; 255
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	8f 4f       	sbci	r24, 0xFF	; 255
 664:	9f 4f       	sbci	r25, 0xFF	; 255
 666:	16 c0       	rjmp	.+44     	; 0x694 <__floatsisf+0x6c>
 668:	88 23       	and	r24, r24
 66a:	11 f0       	breq	.+4      	; 0x670 <__floatsisf+0x48>
 66c:	96 e9       	ldi	r25, 0x96	; 150
 66e:	11 c0       	rjmp	.+34     	; 0x692 <__floatsisf+0x6a>
 670:	77 23       	and	r23, r23
 672:	21 f0       	breq	.+8      	; 0x67c <__floatsisf+0x54>
 674:	9e e8       	ldi	r25, 0x8E	; 142
 676:	87 2f       	mov	r24, r23
 678:	76 2f       	mov	r23, r22
 67a:	05 c0       	rjmp	.+10     	; 0x686 <__floatsisf+0x5e>
 67c:	66 23       	and	r22, r22
 67e:	71 f0       	breq	.+28     	; 0x69c <__floatsisf+0x74>
 680:	96 e8       	ldi	r25, 0x86	; 134
 682:	86 2f       	mov	r24, r22
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	2a f0       	brmi	.+10     	; 0x694 <__floatsisf+0x6c>
 68a:	9a 95       	dec	r25
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	da f7       	brpl	.-10     	; 0x68a <__floatsisf+0x62>
 694:	88 0f       	add	r24, r24
 696:	96 95       	lsr	r25
 698:	87 95       	ror	r24
 69a:	97 f9       	bld	r25, 7
 69c:	08 95       	ret

0000069e <__fp_inf>:
 69e:	97 f9       	bld	r25, 7
 6a0:	9f 67       	ori	r25, 0x7F	; 127
 6a2:	80 e8       	ldi	r24, 0x80	; 128
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	08 95       	ret

000006aa <__fp_nan>:
 6aa:	9f ef       	ldi	r25, 0xFF	; 255
 6ac:	80 ec       	ldi	r24, 0xC0	; 192
 6ae:	08 95       	ret

000006b0 <__fp_pscA>:
 6b0:	00 24       	eor	r0, r0
 6b2:	0a 94       	dec	r0
 6b4:	16 16       	cp	r1, r22
 6b6:	17 06       	cpc	r1, r23
 6b8:	18 06       	cpc	r1, r24
 6ba:	09 06       	cpc	r0, r25
 6bc:	08 95       	ret

000006be <__fp_pscB>:
 6be:	00 24       	eor	r0, r0
 6c0:	0a 94       	dec	r0
 6c2:	12 16       	cp	r1, r18
 6c4:	13 06       	cpc	r1, r19
 6c6:	14 06       	cpc	r1, r20
 6c8:	05 06       	cpc	r0, r21
 6ca:	08 95       	ret

000006cc <__fp_round>:
 6cc:	09 2e       	mov	r0, r25
 6ce:	03 94       	inc	r0
 6d0:	00 0c       	add	r0, r0
 6d2:	11 f4       	brne	.+4      	; 0x6d8 <__fp_round+0xc>
 6d4:	88 23       	and	r24, r24
 6d6:	52 f0       	brmi	.+20     	; 0x6ec <__fp_round+0x20>
 6d8:	bb 0f       	add	r27, r27
 6da:	40 f4       	brcc	.+16     	; 0x6ec <__fp_round+0x20>
 6dc:	bf 2b       	or	r27, r31
 6de:	11 f4       	brne	.+4      	; 0x6e4 <__fp_round+0x18>
 6e0:	60 ff       	sbrs	r22, 0
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <__fp_round+0x20>
 6e4:	6f 5f       	subi	r22, 0xFF	; 255
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	08 95       	ret

000006ee <__fp_split3>:
 6ee:	57 fd       	sbrc	r21, 7
 6f0:	90 58       	subi	r25, 0x80	; 128
 6f2:	44 0f       	add	r20, r20
 6f4:	55 1f       	adc	r21, r21
 6f6:	59 f0       	breq	.+22     	; 0x70e <__fp_splitA+0x10>
 6f8:	5f 3f       	cpi	r21, 0xFF	; 255
 6fa:	71 f0       	breq	.+28     	; 0x718 <__fp_splitA+0x1a>
 6fc:	47 95       	ror	r20

000006fe <__fp_splitA>:
 6fe:	88 0f       	add	r24, r24
 700:	97 fb       	bst	r25, 7
 702:	99 1f       	adc	r25, r25
 704:	61 f0       	breq	.+24     	; 0x71e <__fp_splitA+0x20>
 706:	9f 3f       	cpi	r25, 0xFF	; 255
 708:	79 f0       	breq	.+30     	; 0x728 <__fp_splitA+0x2a>
 70a:	87 95       	ror	r24
 70c:	08 95       	ret
 70e:	12 16       	cp	r1, r18
 710:	13 06       	cpc	r1, r19
 712:	14 06       	cpc	r1, r20
 714:	55 1f       	adc	r21, r21
 716:	f2 cf       	rjmp	.-28     	; 0x6fc <__fp_split3+0xe>
 718:	46 95       	lsr	r20
 71a:	f1 df       	rcall	.-30     	; 0x6fe <__fp_splitA>
 71c:	08 c0       	rjmp	.+16     	; 0x72e <__fp_splitA+0x30>
 71e:	16 16       	cp	r1, r22
 720:	17 06       	cpc	r1, r23
 722:	18 06       	cpc	r1, r24
 724:	99 1f       	adc	r25, r25
 726:	f1 cf       	rjmp	.-30     	; 0x70a <__fp_splitA+0xc>
 728:	86 95       	lsr	r24
 72a:	71 05       	cpc	r23, r1
 72c:	61 05       	cpc	r22, r1
 72e:	08 94       	sec
 730:	08 95       	ret

00000732 <__fp_zero>:
 732:	e8 94       	clt

00000734 <__fp_szero>:
 734:	bb 27       	eor	r27, r27
 736:	66 27       	eor	r22, r22
 738:	77 27       	eor	r23, r23
 73a:	cb 01       	movw	r24, r22
 73c:	97 f9       	bld	r25, 7
 73e:	08 95       	ret

00000740 <pow>:
 740:	fa 01       	movw	r30, r20
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	30 96       	adiw	r30, 0x00	; 0
 748:	21 05       	cpc	r18, r1
 74a:	31 05       	cpc	r19, r1
 74c:	99 f1       	breq	.+102    	; 0x7b4 <pow+0x74>
 74e:	61 15       	cp	r22, r1
 750:	71 05       	cpc	r23, r1
 752:	61 f4       	brne	.+24     	; 0x76c <pow+0x2c>
 754:	80 38       	cpi	r24, 0x80	; 128
 756:	bf e3       	ldi	r27, 0x3F	; 63
 758:	9b 07       	cpc	r25, r27
 75a:	49 f1       	breq	.+82     	; 0x7ae <pow+0x6e>
 75c:	68 94       	set
 75e:	90 38       	cpi	r25, 0x80	; 128
 760:	81 05       	cpc	r24, r1
 762:	61 f0       	breq	.+24     	; 0x77c <pow+0x3c>
 764:	80 38       	cpi	r24, 0x80	; 128
 766:	bf ef       	ldi	r27, 0xFF	; 255
 768:	9b 07       	cpc	r25, r27
 76a:	41 f0       	breq	.+16     	; 0x77c <pow+0x3c>
 76c:	99 23       	and	r25, r25
 76e:	42 f5       	brpl	.+80     	; 0x7c0 <pow+0x80>
 770:	ff 3f       	cpi	r31, 0xFF	; 255
 772:	e1 05       	cpc	r30, r1
 774:	31 05       	cpc	r19, r1
 776:	21 05       	cpc	r18, r1
 778:	11 f1       	breq	.+68     	; 0x7be <pow+0x7e>
 77a:	e8 94       	clt
 77c:	08 94       	sec
 77e:	e7 95       	ror	r30
 780:	d9 01       	movw	r26, r18
 782:	aa 23       	and	r26, r26
 784:	29 f4       	brne	.+10     	; 0x790 <pow+0x50>
 786:	ab 2f       	mov	r26, r27
 788:	be 2f       	mov	r27, r30
 78a:	f8 5f       	subi	r31, 0xF8	; 248
 78c:	d0 f3       	brcs	.-12     	; 0x782 <pow+0x42>
 78e:	10 c0       	rjmp	.+32     	; 0x7b0 <pow+0x70>
 790:	ff 5f       	subi	r31, 0xFF	; 255
 792:	70 f4       	brcc	.+28     	; 0x7b0 <pow+0x70>
 794:	a6 95       	lsr	r26
 796:	e0 f7       	brcc	.-8      	; 0x790 <pow+0x50>
 798:	f7 39       	cpi	r31, 0x97	; 151
 79a:	50 f0       	brcs	.+20     	; 0x7b0 <pow+0x70>
 79c:	19 f0       	breq	.+6      	; 0x7a4 <pow+0x64>
 79e:	ff 3a       	cpi	r31, 0xAF	; 175
 7a0:	38 f4       	brcc	.+14     	; 0x7b0 <pow+0x70>
 7a2:	9f 77       	andi	r25, 0x7F	; 127
 7a4:	9f 93       	push	r25
 7a6:	0c d0       	rcall	.+24     	; 0x7c0 <pow+0x80>
 7a8:	0f 90       	pop	r0
 7aa:	07 fc       	sbrc	r0, 7
 7ac:	90 58       	subi	r25, 0x80	; 128
 7ae:	08 95       	ret
 7b0:	3e f0       	brts	.+14     	; 0x7c0 <pow+0x80>
 7b2:	7b cf       	rjmp	.-266    	; 0x6aa <__fp_nan>
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	80 e8       	ldi	r24, 0x80	; 128
 7ba:	9f e3       	ldi	r25, 0x3F	; 63
 7bc:	08 95       	ret
 7be:	4f e7       	ldi	r20, 0x7F	; 127
 7c0:	9f 77       	andi	r25, 0x7F	; 127
 7c2:	5f 93       	push	r21
 7c4:	4f 93       	push	r20
 7c6:	3f 93       	push	r19
 7c8:	2f 93       	push	r18
 7ca:	9e d0       	rcall	.+316    	; 0x908 <log>
 7cc:	2f 91       	pop	r18
 7ce:	3f 91       	pop	r19
 7d0:	4f 91       	pop	r20
 7d2:	5f 91       	pop	r21
 7d4:	0c d1       	rcall	.+536    	; 0x9ee <__mulsf3>
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <exp>
 7d8:	19 f4       	brne	.+6      	; 0x7e0 <pow+0xa0>
 7da:	0e f0       	brts	.+2      	; 0x7de <pow+0x9e>
 7dc:	60 cf       	rjmp	.-320    	; 0x69e <__fp_inf>
 7de:	a9 cf       	rjmp	.-174    	; 0x732 <__fp_zero>
 7e0:	64 cf       	rjmp	.-312    	; 0x6aa <__fp_nan>

000007e2 <exp>:
 7e2:	8d df       	rcall	.-230    	; 0x6fe <__fp_splitA>
 7e4:	c8 f3       	brcs	.-14     	; 0x7d8 <pow+0x98>
 7e6:	96 38       	cpi	r25, 0x86	; 134
 7e8:	c0 f7       	brcc	.-16     	; 0x7da <pow+0x9a>
 7ea:	07 f8       	bld	r0, 7
 7ec:	0f 92       	push	r0
 7ee:	e8 94       	clt
 7f0:	2b e3       	ldi	r18, 0x3B	; 59
 7f2:	3a ea       	ldi	r19, 0xAA	; 170
 7f4:	48 eb       	ldi	r20, 0xB8	; 184
 7f6:	5f e7       	ldi	r21, 0x7F	; 127
 7f8:	08 d1       	rcall	.+528    	; 0xa0a <__mulsf3_pse>
 7fa:	0f 92       	push	r0
 7fc:	0f 92       	push	r0
 7fe:	0f 92       	push	r0
 800:	4d b7       	in	r20, 0x3d	; 61
 802:	5e b7       	in	r21, 0x3e	; 62
 804:	0f 92       	push	r0
 806:	c0 d0       	rcall	.+384    	; 0x988 <modf>
 808:	e4 ee       	ldi	r30, 0xE4	; 228
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	16 d0       	rcall	.+44     	; 0x83a <__fp_powser>
 80e:	4f 91       	pop	r20
 810:	5f 91       	pop	r21
 812:	ef 91       	pop	r30
 814:	ff 91       	pop	r31
 816:	e5 95       	asr	r30
 818:	ee 1f       	adc	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	49 f0       	breq	.+18     	; 0x830 <exp+0x4e>
 81e:	fe 57       	subi	r31, 0x7E	; 126
 820:	e0 68       	ori	r30, 0x80	; 128
 822:	44 27       	eor	r20, r20
 824:	ee 0f       	add	r30, r30
 826:	44 1f       	adc	r20, r20
 828:	fa 95       	dec	r31
 82a:	e1 f7       	brne	.-8      	; 0x824 <exp+0x42>
 82c:	41 95       	neg	r20
 82e:	55 0b       	sbc	r21, r21
 830:	32 d0       	rcall	.+100    	; 0x896 <ldexp>
 832:	0f 90       	pop	r0
 834:	07 fe       	sbrs	r0, 7
 836:	26 c0       	rjmp	.+76     	; 0x884 <inverse>
 838:	08 95       	ret

0000083a <__fp_powser>:
 83a:	df 93       	push	r29
 83c:	cf 93       	push	r28
 83e:	1f 93       	push	r17
 840:	0f 93       	push	r16
 842:	ff 92       	push	r15
 844:	ef 92       	push	r14
 846:	df 92       	push	r13
 848:	7b 01       	movw	r14, r22
 84a:	8c 01       	movw	r16, r24
 84c:	68 94       	set
 84e:	05 c0       	rjmp	.+10     	; 0x85a <__fp_powser+0x20>
 850:	da 2e       	mov	r13, r26
 852:	ef 01       	movw	r28, r30
 854:	d8 d0       	rcall	.+432    	; 0xa06 <__mulsf3x>
 856:	fe 01       	movw	r30, r28
 858:	e8 94       	clt
 85a:	a5 91       	lpm	r26, Z+
 85c:	25 91       	lpm	r18, Z+
 85e:	35 91       	lpm	r19, Z+
 860:	45 91       	lpm	r20, Z+
 862:	55 91       	lpm	r21, Z+
 864:	ae f3       	brts	.-22     	; 0x850 <__fp_powser+0x16>
 866:	ef 01       	movw	r28, r30
 868:	59 de       	rcall	.-846    	; 0x51c <__addsf3x>
 86a:	fe 01       	movw	r30, r28
 86c:	97 01       	movw	r18, r14
 86e:	a8 01       	movw	r20, r16
 870:	da 94       	dec	r13
 872:	79 f7       	brne	.-34     	; 0x852 <__fp_powser+0x18>
 874:	df 90       	pop	r13
 876:	ef 90       	pop	r14
 878:	ff 90       	pop	r15
 87a:	0f 91       	pop	r16
 87c:	1f 91       	pop	r17
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <inverse>:
 884:	9b 01       	movw	r18, r22
 886:	ac 01       	movw	r20, r24
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	80 e8       	ldi	r24, 0x80	; 128
 88e:	9f e3       	ldi	r25, 0x3F	; 63
 890:	11 c1       	rjmp	.+546    	; 0xab4 <__divsf3>
 892:	05 cf       	rjmp	.-502    	; 0x69e <__fp_inf>
 894:	77 c1       	rjmp	.+750    	; 0xb84 <__fp_mpack>

00000896 <ldexp>:
 896:	33 df       	rcall	.-410    	; 0x6fe <__fp_splitA>
 898:	e8 f3       	brcs	.-6      	; 0x894 <inverse+0x10>
 89a:	99 23       	and	r25, r25
 89c:	d9 f3       	breq	.-10     	; 0x894 <inverse+0x10>
 89e:	94 0f       	add	r25, r20
 8a0:	51 1d       	adc	r21, r1
 8a2:	bb f3       	brvs	.-18     	; 0x892 <inverse+0xe>
 8a4:	91 50       	subi	r25, 0x01	; 1
 8a6:	50 40       	sbci	r21, 0x00	; 0
 8a8:	94 f0       	brlt	.+36     	; 0x8ce <ldexp+0x38>
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <ldexp+0x2c>
 8ac:	88 23       	and	r24, r24
 8ae:	32 f0       	brmi	.+12     	; 0x8bc <ldexp+0x26>
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	91 50       	subi	r25, 0x01	; 1
 8b8:	50 40       	sbci	r21, 0x00	; 0
 8ba:	c1 f7       	brne	.-16     	; 0x8ac <ldexp+0x16>
 8bc:	9e 3f       	cpi	r25, 0xFE	; 254
 8be:	51 05       	cpc	r21, r1
 8c0:	44 f7       	brge	.-48     	; 0x892 <inverse+0xe>
 8c2:	88 0f       	add	r24, r24
 8c4:	91 1d       	adc	r25, r1
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret
 8ce:	5f 3f       	cpi	r21, 0xFF	; 255
 8d0:	ac f0       	brlt	.+42     	; 0x8fc <ldexp+0x66>
 8d2:	98 3e       	cpi	r25, 0xE8	; 232
 8d4:	9c f0       	brlt	.+38     	; 0x8fc <ldexp+0x66>
 8d6:	bb 27       	eor	r27, r27
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b7 95       	ror	r27
 8e0:	08 f4       	brcc	.+2      	; 0x8e4 <ldexp+0x4e>
 8e2:	b1 60       	ori	r27, 0x01	; 1
 8e4:	93 95       	inc	r25
 8e6:	c1 f7       	brne	.-16     	; 0x8d8 <ldexp+0x42>
 8e8:	bb 0f       	add	r27, r27
 8ea:	58 f7       	brcc	.-42     	; 0x8c2 <ldexp+0x2c>
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <ldexp+0x5c>
 8ee:	60 ff       	sbrs	r22, 0
 8f0:	e8 cf       	rjmp	.-48     	; 0x8c2 <ldexp+0x2c>
 8f2:	6f 5f       	subi	r22, 0xFF	; 255
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	e3 cf       	rjmp	.-58     	; 0x8c2 <ldexp+0x2c>
 8fc:	1b cf       	rjmp	.-458    	; 0x734 <__fp_szero>
 8fe:	0e f0       	brts	.+2      	; 0x902 <ldexp+0x6c>
 900:	41 c1       	rjmp	.+642    	; 0xb84 <__fp_mpack>
 902:	d3 ce       	rjmp	.-602    	; 0x6aa <__fp_nan>
 904:	68 94       	set
 906:	cb ce       	rjmp	.-618    	; 0x69e <__fp_inf>

00000908 <log>:
 908:	fa de       	rcall	.-524    	; 0x6fe <__fp_splitA>
 90a:	c8 f3       	brcs	.-14     	; 0x8fe <ldexp+0x68>
 90c:	99 23       	and	r25, r25
 90e:	d1 f3       	breq	.-12     	; 0x904 <ldexp+0x6e>
 910:	c6 f3       	brts	.-16     	; 0x902 <ldexp+0x6c>
 912:	df 93       	push	r29
 914:	cf 93       	push	r28
 916:	1f 93       	push	r17
 918:	0f 93       	push	r16
 91a:	ff 92       	push	r15
 91c:	c9 2f       	mov	r28, r25
 91e:	dd 27       	eor	r29, r29
 920:	88 23       	and	r24, r24
 922:	2a f0       	brmi	.+10     	; 0x92e <log+0x26>
 924:	21 97       	sbiw	r28, 0x01	; 1
 926:	66 0f       	add	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	da f7       	brpl	.-10     	; 0x924 <log+0x1c>
 92e:	20 e0       	ldi	r18, 0x00	; 0
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	40 e8       	ldi	r20, 0x80	; 128
 934:	5f eb       	ldi	r21, 0xBF	; 191
 936:	9f e3       	ldi	r25, 0x3F	; 63
 938:	88 39       	cpi	r24, 0x98	; 152
 93a:	20 f0       	brcs	.+8      	; 0x944 <log+0x3c>
 93c:	80 3e       	cpi	r24, 0xE0	; 224
 93e:	30 f0       	brcs	.+12     	; 0x94c <log+0x44>
 940:	21 96       	adiw	r28, 0x01	; 1
 942:	8f 77       	andi	r24, 0x7F	; 127
 944:	da dd       	rcall	.-1100   	; 0x4fa <__addsf3>
 946:	ec e0       	ldi	r30, 0x0C	; 12
 948:	f1 e0       	ldi	r31, 0x01	; 1
 94a:	03 c0       	rjmp	.+6      	; 0x952 <log+0x4a>
 94c:	d6 dd       	rcall	.-1108   	; 0x4fa <__addsf3>
 94e:	e9 e3       	ldi	r30, 0x39	; 57
 950:	f1 e0       	ldi	r31, 0x01	; 1
 952:	73 df       	rcall	.-282    	; 0x83a <__fp_powser>
 954:	8b 01       	movw	r16, r22
 956:	be 01       	movw	r22, r28
 958:	ec 01       	movw	r28, r24
 95a:	fb 2e       	mov	r15, r27
 95c:	6f 57       	subi	r22, 0x7F	; 127
 95e:	71 09       	sbc	r23, r1
 960:	75 95       	asr	r23
 962:	77 1f       	adc	r23, r23
 964:	88 0b       	sbc	r24, r24
 966:	99 0b       	sbc	r25, r25
 968:	5f de       	rcall	.-834    	; 0x628 <__floatsisf>
 96a:	28 e1       	ldi	r18, 0x18	; 24
 96c:	32 e7       	ldi	r19, 0x72	; 114
 96e:	41 e3       	ldi	r20, 0x31	; 49
 970:	5f e3       	ldi	r21, 0x3F	; 63
 972:	49 d0       	rcall	.+146    	; 0xa06 <__mulsf3x>
 974:	af 2d       	mov	r26, r15
 976:	98 01       	movw	r18, r16
 978:	ae 01       	movw	r20, r28
 97a:	ff 90       	pop	r15
 97c:	0f 91       	pop	r16
 97e:	1f 91       	pop	r17
 980:	cf 91       	pop	r28
 982:	df 91       	pop	r29
 984:	cb dd       	rcall	.-1130   	; 0x51c <__addsf3x>
 986:	a2 ce       	rjmp	.-700    	; 0x6cc <__fp_round>

00000988 <modf>:
 988:	fa 01       	movw	r30, r20
 98a:	dc 01       	movw	r26, r24
 98c:	aa 0f       	add	r26, r26
 98e:	bb 1f       	adc	r27, r27
 990:	9b 01       	movw	r18, r22
 992:	ac 01       	movw	r20, r24
 994:	bf 57       	subi	r27, 0x7F	; 127
 996:	28 f4       	brcc	.+10     	; 0x9a2 <modf+0x1a>
 998:	22 27       	eor	r18, r18
 99a:	33 27       	eor	r19, r19
 99c:	44 27       	eor	r20, r20
 99e:	50 78       	andi	r21, 0x80	; 128
 9a0:	1f c0       	rjmp	.+62     	; 0x9e0 <modf+0x58>
 9a2:	b7 51       	subi	r27, 0x17	; 23
 9a4:	88 f4       	brcc	.+34     	; 0x9c8 <modf+0x40>
 9a6:	ab 2f       	mov	r26, r27
 9a8:	00 24       	eor	r0, r0
 9aa:	46 95       	lsr	r20
 9ac:	37 95       	ror	r19
 9ae:	27 95       	ror	r18
 9b0:	01 1c       	adc	r0, r1
 9b2:	a3 95       	inc	r26
 9b4:	d2 f3       	brmi	.-12     	; 0x9aa <modf+0x22>
 9b6:	00 20       	and	r0, r0
 9b8:	69 f0       	breq	.+26     	; 0x9d4 <modf+0x4c>
 9ba:	22 0f       	add	r18, r18
 9bc:	33 1f       	adc	r19, r19
 9be:	44 1f       	adc	r20, r20
 9c0:	b3 95       	inc	r27
 9c2:	da f3       	brmi	.-10     	; 0x9ba <modf+0x32>
 9c4:	0d d0       	rcall	.+26     	; 0x9e0 <modf+0x58>
 9c6:	98 cd       	rjmp	.-1232   	; 0x4f8 <__subsf3>
 9c8:	61 30       	cpi	r22, 0x01	; 1
 9ca:	71 05       	cpc	r23, r1
 9cc:	a0 e8       	ldi	r26, 0x80	; 128
 9ce:	8a 07       	cpc	r24, r26
 9d0:	b9 46       	sbci	r27, 0x69	; 105
 9d2:	30 f4       	brcc	.+12     	; 0x9e0 <modf+0x58>
 9d4:	9b 01       	movw	r18, r22
 9d6:	ac 01       	movw	r20, r24
 9d8:	66 27       	eor	r22, r22
 9da:	77 27       	eor	r23, r23
 9dc:	88 27       	eor	r24, r24
 9de:	90 78       	andi	r25, 0x80	; 128
 9e0:	30 96       	adiw	r30, 0x00	; 0
 9e2:	21 f0       	breq	.+8      	; 0x9ec <modf+0x64>
 9e4:	20 83       	st	Z, r18
 9e6:	31 83       	std	Z+1, r19	; 0x01
 9e8:	42 83       	std	Z+2, r20	; 0x02
 9ea:	53 83       	std	Z+3, r21	; 0x03
 9ec:	08 95       	ret

000009ee <__mulsf3>:
 9ee:	0b d0       	rcall	.+22     	; 0xa06 <__mulsf3x>
 9f0:	6d ce       	rjmp	.-806    	; 0x6cc <__fp_round>
 9f2:	5e de       	rcall	.-836    	; 0x6b0 <__fp_pscA>
 9f4:	28 f0       	brcs	.+10     	; 0xa00 <__mulsf3+0x12>
 9f6:	63 de       	rcall	.-826    	; 0x6be <__fp_pscB>
 9f8:	18 f0       	brcs	.+6      	; 0xa00 <__mulsf3+0x12>
 9fa:	95 23       	and	r25, r21
 9fc:	09 f0       	breq	.+2      	; 0xa00 <__mulsf3+0x12>
 9fe:	4f ce       	rjmp	.-866    	; 0x69e <__fp_inf>
 a00:	54 ce       	rjmp	.-856    	; 0x6aa <__fp_nan>
 a02:	11 24       	eor	r1, r1
 a04:	97 ce       	rjmp	.-722    	; 0x734 <__fp_szero>

00000a06 <__mulsf3x>:
 a06:	73 de       	rcall	.-794    	; 0x6ee <__fp_split3>
 a08:	a0 f3       	brcs	.-24     	; 0x9f2 <__mulsf3+0x4>

00000a0a <__mulsf3_pse>:
 a0a:	95 9f       	mul	r25, r21
 a0c:	d1 f3       	breq	.-12     	; 0xa02 <__mulsf3+0x14>
 a0e:	95 0f       	add	r25, r21
 a10:	50 e0       	ldi	r21, 0x00	; 0
 a12:	55 1f       	adc	r21, r21
 a14:	62 9f       	mul	r22, r18
 a16:	f0 01       	movw	r30, r0
 a18:	72 9f       	mul	r23, r18
 a1a:	bb 27       	eor	r27, r27
 a1c:	f0 0d       	add	r31, r0
 a1e:	b1 1d       	adc	r27, r1
 a20:	63 9f       	mul	r22, r19
 a22:	aa 27       	eor	r26, r26
 a24:	f0 0d       	add	r31, r0
 a26:	b1 1d       	adc	r27, r1
 a28:	aa 1f       	adc	r26, r26
 a2a:	64 9f       	mul	r22, r20
 a2c:	66 27       	eor	r22, r22
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	66 1f       	adc	r22, r22
 a34:	82 9f       	mul	r24, r18
 a36:	22 27       	eor	r18, r18
 a38:	b0 0d       	add	r27, r0
 a3a:	a1 1d       	adc	r26, r1
 a3c:	62 1f       	adc	r22, r18
 a3e:	73 9f       	mul	r23, r19
 a40:	b0 0d       	add	r27, r0
 a42:	a1 1d       	adc	r26, r1
 a44:	62 1f       	adc	r22, r18
 a46:	83 9f       	mul	r24, r19
 a48:	a0 0d       	add	r26, r0
 a4a:	61 1d       	adc	r22, r1
 a4c:	22 1f       	adc	r18, r18
 a4e:	74 9f       	mul	r23, r20
 a50:	33 27       	eor	r19, r19
 a52:	a0 0d       	add	r26, r0
 a54:	61 1d       	adc	r22, r1
 a56:	23 1f       	adc	r18, r19
 a58:	84 9f       	mul	r24, r20
 a5a:	60 0d       	add	r22, r0
 a5c:	21 1d       	adc	r18, r1
 a5e:	82 2f       	mov	r24, r18
 a60:	76 2f       	mov	r23, r22
 a62:	6a 2f       	mov	r22, r26
 a64:	11 24       	eor	r1, r1
 a66:	9f 57       	subi	r25, 0x7F	; 127
 a68:	50 40       	sbci	r21, 0x00	; 0
 a6a:	8a f0       	brmi	.+34     	; 0xa8e <__mulsf3_pse+0x84>
 a6c:	e1 f0       	breq	.+56     	; 0xaa6 <__mulsf3_pse+0x9c>
 a6e:	88 23       	and	r24, r24
 a70:	4a f0       	brmi	.+18     	; 0xa84 <__mulsf3_pse+0x7a>
 a72:	ee 0f       	add	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	bb 1f       	adc	r27, r27
 a78:	66 1f       	adc	r22, r22
 a7a:	77 1f       	adc	r23, r23
 a7c:	88 1f       	adc	r24, r24
 a7e:	91 50       	subi	r25, 0x01	; 1
 a80:	50 40       	sbci	r21, 0x00	; 0
 a82:	a9 f7       	brne	.-22     	; 0xa6e <__mulsf3_pse+0x64>
 a84:	9e 3f       	cpi	r25, 0xFE	; 254
 a86:	51 05       	cpc	r21, r1
 a88:	70 f0       	brcs	.+28     	; 0xaa6 <__mulsf3_pse+0x9c>
 a8a:	09 ce       	rjmp	.-1006   	; 0x69e <__fp_inf>
 a8c:	53 ce       	rjmp	.-858    	; 0x734 <__fp_szero>
 a8e:	5f 3f       	cpi	r21, 0xFF	; 255
 a90:	ec f3       	brlt	.-6      	; 0xa8c <__mulsf3_pse+0x82>
 a92:	98 3e       	cpi	r25, 0xE8	; 232
 a94:	dc f3       	brlt	.-10     	; 0xa8c <__mulsf3_pse+0x82>
 a96:	86 95       	lsr	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	b7 95       	ror	r27
 a9e:	f7 95       	ror	r31
 aa0:	e7 95       	ror	r30
 aa2:	9f 5f       	subi	r25, 0xFF	; 255
 aa4:	c1 f7       	brne	.-16     	; 0xa96 <__mulsf3_pse+0x8c>
 aa6:	fe 2b       	or	r31, r30
 aa8:	88 0f       	add	r24, r24
 aaa:	91 1d       	adc	r25, r1
 aac:	96 95       	lsr	r25
 aae:	87 95       	ror	r24
 ab0:	97 f9       	bld	r25, 7
 ab2:	08 95       	ret

00000ab4 <__divsf3>:
 ab4:	0c d0       	rcall	.+24     	; 0xace <__divsf3x>
 ab6:	0a ce       	rjmp	.-1004   	; 0x6cc <__fp_round>
 ab8:	02 de       	rcall	.-1020   	; 0x6be <__fp_pscB>
 aba:	40 f0       	brcs	.+16     	; 0xacc <__divsf3+0x18>
 abc:	f9 dd       	rcall	.-1038   	; 0x6b0 <__fp_pscA>
 abe:	30 f0       	brcs	.+12     	; 0xacc <__divsf3+0x18>
 ac0:	21 f4       	brne	.+8      	; 0xaca <__divsf3+0x16>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	19 f0       	breq	.+6      	; 0xacc <__divsf3+0x18>
 ac6:	eb cd       	rjmp	.-1066   	; 0x69e <__fp_inf>
 ac8:	51 11       	cpse	r21, r1
 aca:	34 ce       	rjmp	.-920    	; 0x734 <__fp_szero>
 acc:	ee cd       	rjmp	.-1060   	; 0x6aa <__fp_nan>

00000ace <__divsf3x>:
 ace:	0f de       	rcall	.-994    	; 0x6ee <__fp_split3>
 ad0:	98 f3       	brcs	.-26     	; 0xab8 <__divsf3+0x4>

00000ad2 <__divsf3_pse>:
 ad2:	99 23       	and	r25, r25
 ad4:	c9 f3       	breq	.-14     	; 0xac8 <__divsf3+0x14>
 ad6:	55 23       	and	r21, r21
 ad8:	b1 f3       	breq	.-20     	; 0xac6 <__divsf3+0x12>
 ada:	95 1b       	sub	r25, r21
 adc:	55 0b       	sbc	r21, r21
 ade:	bb 27       	eor	r27, r27
 ae0:	aa 27       	eor	r26, r26
 ae2:	62 17       	cp	r22, r18
 ae4:	73 07       	cpc	r23, r19
 ae6:	84 07       	cpc	r24, r20
 ae8:	38 f0       	brcs	.+14     	; 0xaf8 <__divsf3_pse+0x26>
 aea:	9f 5f       	subi	r25, 0xFF	; 255
 aec:	5f 4f       	sbci	r21, 0xFF	; 255
 aee:	22 0f       	add	r18, r18
 af0:	33 1f       	adc	r19, r19
 af2:	44 1f       	adc	r20, r20
 af4:	aa 1f       	adc	r26, r26
 af6:	a9 f3       	breq	.-22     	; 0xae2 <__divsf3_pse+0x10>
 af8:	33 d0       	rcall	.+102    	; 0xb60 <__divsf3_pse+0x8e>
 afa:	0e 2e       	mov	r0, r30
 afc:	3a f0       	brmi	.+14     	; 0xb0c <__divsf3_pse+0x3a>
 afe:	e0 e8       	ldi	r30, 0x80	; 128
 b00:	30 d0       	rcall	.+96     	; 0xb62 <__divsf3_pse+0x90>
 b02:	91 50       	subi	r25, 0x01	; 1
 b04:	50 40       	sbci	r21, 0x00	; 0
 b06:	e6 95       	lsr	r30
 b08:	00 1c       	adc	r0, r0
 b0a:	ca f7       	brpl	.-14     	; 0xafe <__divsf3_pse+0x2c>
 b0c:	29 d0       	rcall	.+82     	; 0xb60 <__divsf3_pse+0x8e>
 b0e:	fe 2f       	mov	r31, r30
 b10:	27 d0       	rcall	.+78     	; 0xb60 <__divsf3_pse+0x8e>
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	bb 1f       	adc	r27, r27
 b1a:	26 17       	cp	r18, r22
 b1c:	37 07       	cpc	r19, r23
 b1e:	48 07       	cpc	r20, r24
 b20:	ab 07       	cpc	r26, r27
 b22:	b0 e8       	ldi	r27, 0x80	; 128
 b24:	09 f0       	breq	.+2      	; 0xb28 <__divsf3_pse+0x56>
 b26:	bb 0b       	sbc	r27, r27
 b28:	80 2d       	mov	r24, r0
 b2a:	bf 01       	movw	r22, r30
 b2c:	ff 27       	eor	r31, r31
 b2e:	93 58       	subi	r25, 0x83	; 131
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	2a f0       	brmi	.+10     	; 0xb3e <__divsf3_pse+0x6c>
 b34:	9e 3f       	cpi	r25, 0xFE	; 254
 b36:	51 05       	cpc	r21, r1
 b38:	68 f0       	brcs	.+26     	; 0xb54 <__divsf3_pse+0x82>
 b3a:	b1 cd       	rjmp	.-1182   	; 0x69e <__fp_inf>
 b3c:	fb cd       	rjmp	.-1034   	; 0x734 <__fp_szero>
 b3e:	5f 3f       	cpi	r21, 0xFF	; 255
 b40:	ec f3       	brlt	.-6      	; 0xb3c <__divsf3_pse+0x6a>
 b42:	98 3e       	cpi	r25, 0xE8	; 232
 b44:	dc f3       	brlt	.-10     	; 0xb3c <__divsf3_pse+0x6a>
 b46:	86 95       	lsr	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f7 95       	ror	r31
 b50:	9f 5f       	subi	r25, 0xFF	; 255
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__divsf3_pse+0x74>
 b54:	88 0f       	add	r24, r24
 b56:	91 1d       	adc	r25, r1
 b58:	96 95       	lsr	r25
 b5a:	87 95       	ror	r24
 b5c:	97 f9       	bld	r25, 7
 b5e:	08 95       	ret
 b60:	e1 e0       	ldi	r30, 0x01	; 1
 b62:	66 0f       	add	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	bb 1f       	adc	r27, r27
 b6a:	62 17       	cp	r22, r18
 b6c:	73 07       	cpc	r23, r19
 b6e:	84 07       	cpc	r24, r20
 b70:	ba 07       	cpc	r27, r26
 b72:	20 f0       	brcs	.+8      	; 0xb7c <__divsf3_pse+0xaa>
 b74:	62 1b       	sub	r22, r18
 b76:	73 0b       	sbc	r23, r19
 b78:	84 0b       	sbc	r24, r20
 b7a:	ba 0b       	sbc	r27, r26
 b7c:	ee 1f       	adc	r30, r30
 b7e:	88 f7       	brcc	.-30     	; 0xb62 <__divsf3_pse+0x90>
 b80:	e0 95       	com	r30
 b82:	08 95       	ret

00000b84 <__fp_mpack>:
 b84:	9f 3f       	cpi	r25, 0xFF	; 255
 b86:	31 f0       	breq	.+12     	; 0xb94 <__fp_mpack_finite+0xc>

00000b88 <__fp_mpack_finite>:
 b88:	91 50       	subi	r25, 0x01	; 1
 b8a:	20 f4       	brcc	.+8      	; 0xb94 <__fp_mpack_finite+0xc>
 b8c:	87 95       	ror	r24
 b8e:	77 95       	ror	r23
 b90:	67 95       	ror	r22
 b92:	b7 95       	ror	r27
 b94:	88 0f       	add	r24, r24
 b96:	91 1d       	adc	r25, r1
 b98:	96 95       	lsr	r25
 b9a:	87 95       	ror	r24
 b9c:	97 f9       	bld	r25, 7
 b9e:	08 95       	ret

00000ba0 <__itoa_ncheck>:
 ba0:	bb 27       	eor	r27, r27
 ba2:	4a 30       	cpi	r20, 0x0A	; 10
 ba4:	31 f4       	brne	.+12     	; 0xbb2 <__itoa_ncheck+0x12>
 ba6:	99 23       	and	r25, r25
 ba8:	22 f4       	brpl	.+8      	; 0xbb2 <__itoa_ncheck+0x12>
 baa:	bd e2       	ldi	r27, 0x2D	; 45
 bac:	90 95       	com	r25
 bae:	81 95       	neg	r24
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <__utoa_common>

00000bb4 <__utoa_ncheck>:
 bb4:	bb 27       	eor	r27, r27

00000bb6 <__utoa_common>:
 bb6:	fb 01       	movw	r30, r22
 bb8:	55 27       	eor	r21, r21
 bba:	aa 27       	eor	r26, r26
 bbc:	88 0f       	add	r24, r24
 bbe:	99 1f       	adc	r25, r25
 bc0:	aa 1f       	adc	r26, r26
 bc2:	a4 17       	cp	r26, r20
 bc4:	10 f0       	brcs	.+4      	; 0xbca <__utoa_common+0x14>
 bc6:	a4 1b       	sub	r26, r20
 bc8:	83 95       	inc	r24
 bca:	50 51       	subi	r21, 0x10	; 16
 bcc:	b9 f7       	brne	.-18     	; 0xbbc <__utoa_common+0x6>
 bce:	a0 5d       	subi	r26, 0xD0	; 208
 bd0:	aa 33       	cpi	r26, 0x3A	; 58
 bd2:	08 f0       	brcs	.+2      	; 0xbd6 <__utoa_common+0x20>
 bd4:	a9 5d       	subi	r26, 0xD9	; 217
 bd6:	a1 93       	st	Z+, r26
 bd8:	00 97       	sbiw	r24, 0x00	; 0
 bda:	79 f7       	brne	.-34     	; 0xbba <__utoa_common+0x4>
 bdc:	b1 11       	cpse	r27, r1
 bde:	b1 93       	st	Z+, r27
 be0:	11 92       	st	Z+, r1
 be2:	cb 01       	movw	r24, r22
 be4:	00 c0       	rjmp	.+0      	; 0xbe6 <strrev>

00000be6 <strrev>:
 be6:	dc 01       	movw	r26, r24
 be8:	fc 01       	movw	r30, r24
 bea:	67 2f       	mov	r22, r23
 bec:	71 91       	ld	r23, Z+
 bee:	77 23       	and	r23, r23
 bf0:	e1 f7       	brne	.-8      	; 0xbea <strrev+0x4>
 bf2:	32 97       	sbiw	r30, 0x02	; 2
 bf4:	04 c0       	rjmp	.+8      	; 0xbfe <strrev+0x18>
 bf6:	7c 91       	ld	r23, X
 bf8:	6d 93       	st	X+, r22
 bfa:	70 83       	st	Z, r23
 bfc:	62 91       	ld	r22, -Z
 bfe:	ae 17       	cp	r26, r30
 c00:	bf 07       	cpc	r27, r31
 c02:	c8 f3       	brcs	.-14     	; 0xbf6 <strrev+0x10>
 c04:	08 95       	ret

00000c06 <_exit>:
 c06:	f8 94       	cli

00000c08 <__stop_program>:
 c08:	ff cf       	rjmp	.-2      	; 0xc08 <__stop_program>
