
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800200  00001c26  00001cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000630  00800314  00800314  00001dce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002166  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f6  00000000  00000000  0000411e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001116  00000000  00000000  00005314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  0000642c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2b  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001108  00000000  00000000  000074eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000085f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c6       	rjmp	.+3260   	; 0xcfa <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__vector_25>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c5 c2       	rjmp	.+1418   	; 0x618 <__vector_35>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
      9c:	30 c4       	rjmp	.+2144   	; 0x8fe <__vector_39>
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
      a8:	aa c3       	rjmp	.+1876   	; 0x7fe <__vector_42>
      aa:	00 00       	nop
      ac:	96 c0       	rjmp	.+300    	; 0x1da <__bad_interrupt>
      ae:	00 00       	nop
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	92 c0       	rjmp	.+292    	; 0x1da <__bad_interrupt>
      b6:	00 00       	nop
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1a 02       	muls	r17, r26
      e6:	c3 02       	muls	r28, r19
      e8:	c3 02       	muls	r28, r19
      ea:	27 02       	muls	r18, r23
      ec:	c3 02       	muls	r28, r19
      ee:	c3 02       	muls	r28, r19
      f0:	c3 02       	muls	r28, r19
      f2:	c3 02       	muls	r28, r19
      f4:	c3 02       	muls	r28, r19
      f6:	c3 02       	muls	r28, r19
      f8:	c3 02       	muls	r28, r19
      fa:	c3 02       	muls	r28, r19
      fc:	59 02       	muls	r21, r25
      fe:	b6 02       	muls	r27, r22
     100:	c3 02       	muls	r28, r19
     102:	99 02       	muls	r25, r25
     104:	4e 02       	muls	r20, r30
     106:	43 02       	muls	r20, r19
     108:	0d 02       	muls	r16, r29
     10a:	34 02       	muls	r19, r20
     10c:	8c 02       	muls	r24, r28
     10e:	c3 02       	muls	r28, r19
     110:	00 02       	muls	r16, r16
     112:	c3 02       	muls	r28, r19
     114:	c3 02       	muls	r28, r19
     116:	bb 02       	muls	r27, r27
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
     190:	01 c4       	rjmp	.+2050   	; 0x994 <__vector_39+0x96>
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e6 e2       	ldi	r30, 0x26	; 38
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a4 31       	cpi	r26, 0x14	; 20
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	29 e0       	ldi	r18, 0x09	; 9
     1c6:	a4 e1       	ldi	r26, 0x14	; 20
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a4 34       	cpi	r26, 0x44	; 68
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	67 d6       	rcall	.+3278   	; 0xea4 <main>
     1d6:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <init_USART>:
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
}
     1dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e0:	e1 ec       	ldi	r30, 0xC1	; 193
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 69       	ori	r24, 0x90	; 144
     1e8:	80 83       	st	Z, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 60       	ori	r24, 0x08	; 8
     1ee:	80 83       	st	Z, r24
     1f0:	e2 ec       	ldi	r30, 0xC2	; 194
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	86 60       	ori	r24, 0x06	; 6
     1f8:	80 83       	st	Z, r24
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     206:	08 95       	ret

00000208 <__vector_25>:
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
     23e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     242:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTreceived>
     246:	90 ed       	ldi	r25, 0xD0	; 208
     248:	98 0f       	add	r25, r24
     24a:	9a 30       	cpi	r25, 0x0A	; 10
     24c:	10 f0       	brcs	.+4      	; 0x252 <__vector_25+0x4a>
     24e:	80 32       	cpi	r24, 0x20	; 32
     250:	99 f4       	brne	.+38     	; 0x278 <__vector_25+0x70>
     252:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <USARTinputPos>
     256:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <USARTinputPos+0x1>
     25a:	2f 3f       	cpi	r18, 0xFF	; 255
     25c:	31 05       	cpc	r19, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <__vector_25+0x5a>
     260:	a1 c1       	rjmp	.+834    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <USARTinputPos+0x1>
     26a:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <USARTinputPos>
     26e:	f9 01       	movw	r30, r18
     270:	ed 56       	subi	r30, 0x6D	; 109
     272:	fc 4f       	sbci	r31, 0xFC	; 252
     274:	80 83       	st	Z, r24
     276:	96 c1       	rjmp	.+812    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     278:	9f e9       	ldi	r25, 0x9F	; 159
     27a:	98 0f       	add	r25, r24
     27c:	9a 31       	cpi	r25, 0x1A	; 26
     27e:	28 f4       	brcc	.+10     	; 0x28a <__vector_25+0x82>
     280:	82 36       	cpi	r24, 0x62	; 98
     282:	29 f0       	breq	.+10     	; 0x28e <__vector_25+0x86>
     284:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     288:	8d c1       	rjmp	.+794    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     28a:	82 36       	cpi	r24, 0x62	; 98
     28c:	51 f4       	brne	.+20     	; 0x2a2 <__vector_25+0x9a>
     28e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     292:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     29c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     2a0:	81 c1       	rjmp	.+770    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     2a2:	8d 30       	cpi	r24, 0x0D	; 13
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_25+0xa0>
     2a6:	7e c1       	rjmp	.+764    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     2a8:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <USARTinputPos>
     2ac:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USARTinputPos+0x1>
     2b0:	11 23       	and	r17, r17
     2b2:	0c f4       	brge	.+2      	; 0x2b6 <__vector_25+0xae>
     2b4:	91 c0       	rjmp	.+290    	; 0x3d8 <__vector_25+0x1d0>
     2b6:	ec e2       	ldi	r30, 0x2C	; 44
     2b8:	f3 e0       	ldi	r31, 0x03	; 3
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	10 82       	st	Z, r1
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	15 82       	std	Z+5, r1	; 0x05
     2c4:	14 82       	std	Z+4, r1	; 0x04
     2c6:	e6 e2       	ldi	r30, 0x26	; 38
     2c8:	f3 e0       	ldi	r31, 0x03	; 3
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	9f ef       	ldi	r25, 0xFF	; 255
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	80 83       	st	Z, r24
     2d2:	93 83       	std	Z+3, r25	; 0x03
     2d4:	82 83       	std	Z+2, r24	; 0x02
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <numberStart.1995+0x1>
     2de:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <numberStart.1995>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	ed 56       	subi	r30, 0x6D	; 109
     2f0:	fc 4f       	sbci	r31, 0xFC	; 252
     2f2:	30 81       	ld	r19, Z
     2f4:	30 32       	cpi	r19, 0x20	; 32
     2f6:	79 f4       	brne	.+30     	; 0x316 <__vector_25+0x10e>
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	fa 01       	movw	r30, r20
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	e0 5e       	subi	r30, 0xE0	; 224
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	43 30       	cpi	r20, 0x03	; 3
     30e:	51 05       	cpc	r21, r1
     310:	0c f0       	brlt	.+2      	; 0x314 <__vector_25+0x10c>
     312:	42 c1       	rjmp	.+644    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     314:	0a c0       	rjmp	.+20     	; 0x32a <__vector_25+0x122>
     316:	fa 01       	movw	r30, r20
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	ea 5d       	subi	r30, 0xDA	; 218
     31e:	fc 4f       	sbci	r31, 0xFC	; 252
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	80 83       	st	Z, r24
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	82 2f       	mov	r24, r18
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 17       	cp	r16, r24
     332:	19 07       	cpc	r17, r25
     334:	dc f6       	brge	.-74     	; 0x2ec <__vector_25+0xe4>
     336:	30 c1       	rjmp	.+608    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     338:	f9 01       	movw	r30, r18
     33a:	ed 56       	subi	r30, 0x6D	; 109
     33c:	fc 4f       	sbci	r31, 0xFC	; 252
     33e:	c0 80       	ld	r12, Z
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	c8 12       	cpse	r12, r24
     344:	09 c0       	rjmp	.+18     	; 0x358 <__vector_25+0x150>
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	e8 1a       	sub	r14, r24
     34a:	f8 0a       	sbc	r15, r24
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	e8 16       	cp	r14, r24
     350:	f1 04       	cpc	r15, r1
     352:	0c f0       	brlt	.+2      	; 0x356 <__vector_25+0x14e>
     354:	41 c0       	rjmp	.+130    	; 0x3d8 <__vector_25+0x1d0>
     356:	39 c0       	rjmp	.+114    	; 0x3ca <__vector_25+0x1c2>
     358:	e7 01       	movw	r28, r14
     35a:	cc 0f       	add	r28, r28
     35c:	dd 1f       	adc	r29, r29
     35e:	de 01       	movw	r26, r28
     360:	aa 5d       	subi	r26, 0xDA	; 218
     362:	bc 4f       	sbci	r27, 0xFC	; 252
     364:	fe 01       	movw	r30, r28
     366:	e0 5e       	subi	r30, 0xE0	; 224
     368:	fc 4f       	sbci	r31, 0xFC	; 252
     36a:	6d 91       	ld	r22, X+
     36c:	7c 91       	ld	r23, X
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	68 0f       	add	r22, r24
     374:	79 1f       	adc	r23, r25
     376:	62 1b       	sub	r22, r18
     378:	73 0b       	sbc	r23, r19
     37a:	07 2e       	mov	r0, r23
     37c:	00 0c       	add	r0, r0
     37e:	88 0b       	sbc	r24, r24
     380:	99 0b       	sbc	r25, r25
     382:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 e4       	ldi	r25, 0x41	; 65
     392:	0e 94 af 0a 	call	0x155e	; 0x155e <pow>
     396:	c4 5d       	subi	r28, 0xD4	; 212
     398:	dc 4f       	sbci	r29, 0xFC	; 252
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	ba d7       	rcall	.+3956   	; 0x1318 <__addsf3>
     3a4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixsfsi>
     3a8:	20 ed       	ldi	r18, 0xD0	; 208
     3aa:	2c 0d       	add	r18, r12
     3ac:	42 2f       	mov	r20, r18
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	46 9f       	mul	r20, r22
     3b2:	90 01       	movw	r18, r0
     3b4:	47 9f       	mul	r20, r23
     3b6:	30 0d       	add	r19, r0
     3b8:	56 9f       	mul	r21, r22
     3ba:	30 0d       	add	r19, r0
     3bc:	11 24       	eor	r1, r1
     3be:	88 81       	ld	r24, Y
     3c0:	99 81       	ldd	r25, Y+1	; 0x01
     3c2:	82 0f       	add	r24, r18
     3c4:	93 1f       	adc	r25, r19
     3c6:	99 83       	std	Y+1, r25	; 0x01
     3c8:	88 83       	st	Y, r24
     3ca:	d3 94       	inc	r13
     3cc:	2d 2d       	mov	r18, r13
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	02 17       	cp	r16, r18
     3d2:	13 07       	cpc	r17, r19
     3d4:	0c f0       	brlt	.+2      	; 0x3d8 <__vector_25+0x1d0>
     3d6:	b0 cf       	rjmp	.-160    	; 0x338 <__vector_25+0x130>
     3d8:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     3dc:	ee 23       	and	r30, r30
     3de:	09 f4       	brne	.+2      	; 0x3e2 <__vector_25+0x1da>
     3e0:	d2 c0       	rjmp	.+420    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     3e2:	8e 2f       	mov	r24, r30
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	fc 01       	movw	r30, r24
     3e8:	e1 56       	subi	r30, 0x61	; 97
     3ea:	f1 09       	sbc	r31, r1
     3ec:	ea 31       	cpi	r30, 0x1A	; 26
     3ee:	f1 05       	cpc	r31, r1
     3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__vector_25+0x1ec>
     3f2:	c9 c0       	rjmp	.+402    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     3f4:	88 27       	eor	r24, r24
     3f6:	ee 58       	subi	r30, 0x8E	; 142
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	8f 4f       	sbci	r24, 0xFF	; 255
     3fc:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__tablejump2__>
     400:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     404:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <rp6Data+0x2>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40c:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <rp6Data+0x2>
     410:	ba c0       	rjmp	.+372    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <rp6Data+0x2>
     418:	b6 c0       	rjmp	.+364    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     41a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     41e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <rp6Data+0x2>
     422:	8f 3f       	cpi	r24, 0xFF	; 255
     424:	19 f4       	brne	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     426:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <rp6Data+0x2>
     42a:	ad c0       	rjmp	.+346    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <rp6Data+0x2>
     432:	a9 c0       	rjmp	.+338    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     434:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     438:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <rp6Data+0x3>
     43c:	8f 3f       	cpi	r24, 0xFF	; 255
     43e:	19 f4       	brne	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     440:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <rp6Data+0x3>
     444:	a0 c0       	rjmp	.+320    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <rp6Data+0x3>
     44c:	9c c0       	rjmp	.+312    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     44e:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     452:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <rp6Data+0x3>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	19 f4       	brne	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45a:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <rp6Data+0x3>
     45e:	93 c0       	rjmp	.+294    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <rp6Data+0x3>
     466:	8f c0       	rjmp	.+286    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     468:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     46c:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number.1993>
     470:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number.1993+0x1>
     474:	85 36       	cpi	r24, 0x65	; 101
     476:	91 05       	cpc	r25, r1
     478:	08 f0       	brcs	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	85 c0       	rjmp	.+266    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     47c:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <rp6Data+0x1>
     480:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <rp6Data>
     484:	80 c0       	rjmp	.+256    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     486:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     48a:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number.1993>
     48e:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number.1993+0x1>
     492:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <rp6Data+0x7>
     496:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <rp6Data+0x6>
     49a:	75 c0       	rjmp	.+234    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     49c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     4a0:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number.1993>
     4a4:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number.1993+0x1>
     4a8:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <rp6Data+0x5>
     4ac:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <rp6Data+0x4>
     4b0:	6a c0       	rjmp	.+212    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     4b2:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <programmedAmount>
     4b6:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <programmedAmount+0x1>
     4ba:	9c 01       	movw	r18, r24
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	30 93 37 03 	sts	0x0337, r19	; 0x800337 <programmedAmount+0x1>
     4c4:	20 93 36 03 	sts	0x0336, r18	; 0x800336 <programmedAmount>
     4c8:	9c 01       	movw	r18, r24
     4ca:	22 0f       	add	r18, r18
     4cc:	33 1f       	adc	r19, r19
     4ce:	82 0f       	add	r24, r18
     4d0:	93 1f       	adc	r25, r19
     4d2:	fc 01       	movw	r30, r24
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	ec 56       	subi	r30, 0x6C	; 108
     4da:	fb 4f       	sbci	r31, 0xFB	; 251
     4dc:	ac e2       	ldi	r26, 0x2C	; 44
     4de:	b3 e0       	ldi	r27, 0x03	; 3
     4e0:	2d 91       	ld	r18, X+
     4e2:	3c 91       	ld	r19, X
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	31 83       	std	Z+1, r19	; 0x01
     4e8:	20 83       	st	Z, r18
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	ea 56       	subi	r30, 0x6A	; 106
     4f2:	fb 4f       	sbci	r31, 0xFB	; 251
     4f4:	12 96       	adiw	r26, 0x02	; 2
     4f6:	2d 91       	ld	r18, X+
     4f8:	3c 91       	ld	r19, X
     4fa:	13 97       	sbiw	r26, 0x03	; 3
     4fc:	31 83       	std	Z+1, r19	; 0x01
     4fe:	20 83       	st	Z, r18
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	fc 01       	movw	r30, r24
     506:	e8 56       	subi	r30, 0x68	; 104
     508:	fb 4f       	sbci	r31, 0xFB	; 251
     50a:	14 96       	adiw	r26, 0x04	; 4
     50c:	8d 91       	ld	r24, X+
     50e:	9c 91       	ld	r25, X
     510:	15 97       	sbiw	r26, 0x05	; 5
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	80 83       	st	Z, r24
     516:	37 c0       	rjmp	.+110    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     518:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <programmedAmount>
     51c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <programmedAmount+0x1>
     520:	18 16       	cp	r1, r24
     522:	19 06       	cpc	r1, r25
     524:	84 f5       	brge	.+96     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <programmedAmount+0x1>
     52c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <programmedAmount>
     530:	2a c0       	rjmp	.+84     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     532:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number.1993>
     536:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number.1993+0x1>
     53a:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <programmedAmount>
     53e:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <programmedAmount+0x1>
     542:	82 17       	cp	r24, r18
     544:	93 07       	cpc	r25, r19
     546:	f8 f4       	brcc	.+62     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     548:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <currentParcourLine+0x1>
     54c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <currentParcourLine>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <runParcour>
     556:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rp6Data+0xf>
     55a:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <rp6Data+0x10>
     55e:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <startDegrees+0x1>
     562:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <startDegrees>
     566:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <parcourLineState>
     56a:	0d c0       	rjmp	.+26     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     56c:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <programmedAmount+0x1>
     570:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <programmedAmount>
     574:	08 c0       	rjmp	.+16     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     576:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <runParcour>
     57a:	ec e7       	ldi	r30, 0x7C	; 124
     57c:	f3 e0       	ldi	r31, 0x03	; 3
     57e:	11 82       	std	Z+1, r1	; 0x01
     580:	10 82       	st	Z, r1
     582:	13 82       	std	Z+3, r1	; 0x03
     584:	12 82       	std	Z+2, r1	; 0x02
     586:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	9f ef       	ldi	r25, 0xFF	; 255
     58e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     592:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	d1 2c       	mov	r13, r1
     59e:	e1 2c       	mov	r14, r1
     5a0:	f1 2c       	mov	r15, r1
     5a2:	ca ce       	rjmp	.-620    	; 0x338 <__vector_25+0x130>
     5a4:	ff 91       	pop	r31
     5a6:	ef 91       	pop	r30
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	7f 91       	pop	r23
     5b6:	6f 91       	pop	r22
     5b8:	5f 91       	pop	r21
     5ba:	4f 91       	pop	r20
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	0f 90       	pop	r0
     5ce:	0b be       	out	0x3b, r0	; 59
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <init_micros>:
     5da:	e1 e9       	ldi	r30, 0x91	; 145
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	81 60       	ori	r24, 0x01	; 1
     5e2:	80 83       	st	Z, r24
     5e4:	e1 e7       	ldi	r30, 0x71	; 113
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	81 60       	ori	r24, 0x01	; 1
     5ec:	80 83       	st	Z, r24
     5ee:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     5f2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     5f6:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <t3TotalOverflow>
     5fa:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <t3TotalOverflow+0x1>
     5fe:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <t3TotalOverflow+0x2>
     602:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <t3TotalOverflow+0x3>
     606:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <t3TotalOverflow+0x4>
     60a:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <t3TotalOverflow+0x5>
     60e:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <t3TotalOverflow+0x6>
     612:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <t3TotalOverflow+0x7>
     616:	08 95       	ret

00000618 <__vector_35>:
     618:	1f 92       	push	r1
     61a:	0f 92       	push	r0
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <t3TotalOverflow>
     638:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <t3TotalOverflow+0x1>
     63c:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <t3TotalOverflow+0x2>
     640:	50 91 59 03 	lds	r21, 0x0359	; 0x800359 <t3TotalOverflow+0x3>
     644:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <t3TotalOverflow+0x4>
     648:	70 91 5b 03 	lds	r23, 0x035B	; 0x80035b <t3TotalOverflow+0x5>
     64c:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <t3TotalOverflow+0x6>
     650:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <t3TotalOverflow+0x7>
     654:	a1 e0       	ldi	r26, 0x01	; 1
     656:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__adddi3_s8>
     65a:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <t3TotalOverflow>
     65e:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <t3TotalOverflow+0x1>
     662:	40 93 58 03 	sts	0x0358, r20	; 0x800358 <t3TotalOverflow+0x2>
     666:	50 93 59 03 	sts	0x0359, r21	; 0x800359 <t3TotalOverflow+0x3>
     66a:	60 93 5a 03 	sts	0x035A, r22	; 0x80035a <t3TotalOverflow+0x4>
     66e:	70 93 5b 03 	sts	0x035B, r23	; 0x80035b <t3TotalOverflow+0x5>
     672:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <t3TotalOverflow+0x6>
     676:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <t3TotalOverflow+0x7>
     67a:	af 91       	pop	r26
     67c:	9f 91       	pop	r25
     67e:	8f 91       	pop	r24
     680:	7f 91       	pop	r23
     682:	6f 91       	pop	r22
     684:	5f 91       	pop	r21
     686:	4f 91       	pop	r20
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <micros>:
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     6b6:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     6ba:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <t3TotalOverflow>
     6be:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <t3TotalOverflow+0x1>
     6c2:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <t3TotalOverflow+0x2>
     6c6:	50 91 59 03 	lds	r21, 0x0359	; 0x800359 <t3TotalOverflow+0x3>
     6ca:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <t3TotalOverflow+0x4>
     6ce:	70 91 5b 03 	lds	r23, 0x035B	; 0x80035b <t3TotalOverflow+0x5>
     6d2:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <t3TotalOverflow+0x6>
     6d6:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <t3TotalOverflow+0x7>
     6da:	98 2c       	mov	r9, r8
     6dc:	88 24       	eor	r8, r8
     6de:	99 0c       	add	r9, r9
     6e0:	99 0c       	add	r9, r9
     6e2:	99 0c       	add	r9, r9
     6e4:	99 0c       	add	r9, r9
     6e6:	09 2c       	mov	r0, r9
     6e8:	00 0c       	add	r0, r0
     6ea:	aa 08       	sbc	r10, r10
     6ec:	bb 08       	sbc	r11, r11
     6ee:	bb 20       	and	r11, r11
     6f0:	2c f4       	brge	.+10     	; 0x6fc <micros+0x66>
     6f2:	ef ef       	ldi	r30, 0xFF	; 255
     6f4:	8e 0e       	add	r8, r30
     6f6:	9e 1e       	adc	r9, r30
     6f8:	a1 1c       	adc	r10, r1
     6fa:	b1 1c       	adc	r11, r1
     6fc:	25 01       	movw	r4, r10
     6fe:	77 24       	eor	r7, r7
     700:	57 fc       	sbrc	r5, 7
     702:	70 94       	com	r7
     704:	67 2c       	mov	r6, r7
     706:	bb 0c       	add	r11, r11
     708:	88 08       	sbc	r8, r8
     70a:	98 2c       	mov	r9, r8
     70c:	54 01       	movw	r10, r8
     70e:	0c e0       	ldi	r16, 0x0C	; 12
     710:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__ashldi3>
     714:	f2 2f       	mov	r31, r18
     716:	e3 2f       	mov	r30, r19
     718:	c4 2e       	mov	r12, r20
     71a:	d5 2e       	mov	r13, r21
     71c:	e6 2e       	mov	r14, r22
     71e:	f7 2e       	mov	r15, r23
     720:	08 2f       	mov	r16, r24
     722:	19 2f       	mov	r17, r25
     724:	24 2d       	mov	r18, r4
     726:	35 2d       	mov	r19, r5
     728:	46 2d       	mov	r20, r6
     72a:	57 2d       	mov	r21, r7
     72c:	68 2d       	mov	r22, r8
     72e:	78 2d       	mov	r23, r8
     730:	88 2d       	mov	r24, r8
     732:	98 2d       	mov	r25, r8
     734:	af 2e       	mov	r10, r31
     736:	be 2e       	mov	r11, r30
     738:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__adddi3>
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	6f 90       	pop	r6
     754:	5f 90       	pop	r5
     756:	4f 90       	pop	r4
     758:	08 95       	ret

0000075a <init_TWI>:
     75a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     75e:	88 e4       	ldi	r24, 0x48	; 72
     760:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     764:	85 e0       	ldi	r24, 0x05	; 5
     766:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     76a:	08 95       	ret

0000076c <init_TWI_Timer2>:
     76c:	e1 eb       	ldi	r30, 0xB1	; 177
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	87 60       	ori	r24, 0x07	; 7
     774:	80 83       	st	Z, r24
     776:	e0 e7       	ldi	r30, 0x70	; 112
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	81 60       	ori	r24, 0x01	; 1
     77e:	80 83       	st	Z, r24
     780:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     784:	08 95       	ret

00000786 <init_PWM_Timer4>:
     786:	83 e8       	ldi	r24, 0x83	; 131
     788:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     78c:	84 e1       	ldi	r24, 0x14	; 20
     78e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     798:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     79c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
     7a0:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     7a4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	9f e1       	ldi	r25, 0x1F	; 31
     7ac:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     7b0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     7b4:	08 95       	ret

000007b6 <init_arduinoData>:
     7b6:	ee e5       	ldi	r30, 0x5E	; 94
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	11 82       	std	Z+1, r1	; 0x01
     7bc:	10 82       	st	Z, r1
     7be:	13 82       	std	Z+3, r1	; 0x03
     7c0:	12 82       	std	Z+2, r1	; 0x02
     7c2:	08 95       	ret

000007c4 <init_rp6Data>:
     7c4:	ec e7       	ldi	r30, 0x7C	; 124
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	11 82       	std	Z+1, r1	; 0x01
     7ca:	10 82       	st	Z, r1
     7cc:	12 82       	std	Z+2, r1	; 0x02
     7ce:	13 82       	std	Z+3, r1	; 0x03
     7d0:	84 e2       	ldi	r24, 0x24	; 36
     7d2:	93 e1       	ldi	r25, 0x13	; 19
     7d4:	95 83       	std	Z+5, r25	; 0x05
     7d6:	84 83       	std	Z+4, r24	; 0x04
     7d8:	88 e2       	ldi	r24, 0x28	; 40
     7da:	93 e2       	ldi	r25, 0x23	; 35
     7dc:	97 83       	std	Z+7, r25	; 0x07
     7de:	86 83       	std	Z+6, r24	; 0x06
     7e0:	88 e8       	ldi	r24, 0x88	; 136
     7e2:	93 e1       	ldi	r25, 0x13	; 19
     7e4:	91 87       	std	Z+9, r25	; 0x09
     7e6:	80 87       	std	Z+8, r24	; 0x08
     7e8:	88 ec       	ldi	r24, 0xC8	; 200
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	82 87       	std	Z+10, r24	; 0x0a
     7f2:	93 87       	std	Z+11, r25	; 0x0b
     7f4:	a4 87       	std	Z+12, r26	; 0x0c
     7f6:	b5 87       	std	Z+13, r27	; 0x0d
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	86 87       	std	Z+14, r24	; 0x0e
     7fc:	08 95       	ret

000007fe <__vector_42>:
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <rp6Data+0x2>
     810:	8f 3f       	cpi	r24, 0xFF	; 255
     812:	d9 f4       	brne	.+54     	; 0x84a <__vector_42+0x4c>
     814:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rp6Data>
     818:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <rp6Data+0x1>
     81c:	89 2b       	or	r24, r25
     81e:	a9 f0       	breq	.+42     	; 0x84a <__vector_42+0x4c>
     820:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     824:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     828:	89 2b       	or	r24, r25
     82a:	59 f4       	brne	.+22     	; 0x842 <__vector_42+0x44>
     82c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     830:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     834:	96 95       	lsr	r25
     836:	87 95       	ror	r24
     838:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     83c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     840:	04 c0       	rjmp	.+8      	; 0x84a <__vector_42+0x4c>
     842:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     846:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	0f 90       	pop	r0
     850:	0f be       	out	0x3f, r0	; 63
     852:	0f 90       	pop	r0
     854:	1f 90       	pop	r1
     856:	18 95       	reti

00000858 <arduinoDataInterpreter>:
     858:	ae e5       	ldi	r26, 0x5E	; 94
     85a:	b3 e0       	ldi	r27, 0x03	; 3
     85c:	e2 e4       	ldi	r30, 0x42	; 66
     85e:	f3 e0       	ldi	r31, 0x03	; 3
     860:	81 81       	ldd	r24, Z+1	; 0x01
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	98 2f       	mov	r25, r24
     866:	88 27       	eor	r24, r24
     868:	22 81       	ldd	r18, Z+2	; 0x02
     86a:	82 0f       	add	r24, r18
     86c:	91 1d       	adc	r25, r1
     86e:	11 96       	adiw	r26, 0x01	; 1
     870:	9c 93       	st	X, r25
     872:	8e 93       	st	-X, r24
     874:	83 81       	ldd	r24, Z+3	; 0x03
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	98 2f       	mov	r25, r24
     87a:	88 27       	eor	r24, r24
     87c:	24 81       	ldd	r18, Z+4	; 0x04
     87e:	82 0f       	add	r24, r18
     880:	91 1d       	adc	r25, r1
     882:	13 96       	adiw	r26, 0x03	; 3
     884:	9c 93       	st	X, r25
     886:	8e 93       	st	-X, r24
     888:	12 97       	sbiw	r26, 0x02	; 2
     88a:	85 81       	ldd	r24, Z+5	; 0x05
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	98 2f       	mov	r25, r24
     890:	88 27       	eor	r24, r24
     892:	26 81       	ldd	r18, Z+6	; 0x06
     894:	82 0f       	add	r24, r18
     896:	91 1d       	adc	r25, r1
     898:	15 96       	adiw	r26, 0x05	; 5
     89a:	9c 93       	st	X, r25
     89c:	8e 93       	st	-X, r24
     89e:	14 97       	sbiw	r26, 0x04	; 4
     8a0:	87 81       	ldd	r24, Z+7	; 0x07
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	98 2f       	mov	r25, r24
     8a6:	88 27       	eor	r24, r24
     8a8:	20 85       	ldd	r18, Z+8	; 0x08
     8aa:	82 0f       	add	r24, r18
     8ac:	91 1d       	adc	r25, r1
     8ae:	17 96       	adiw	r26, 0x07	; 7
     8b0:	9c 93       	st	X, r25
     8b2:	8e 93       	st	-X, r24
     8b4:	16 97       	sbiw	r26, 0x06	; 6
     8b6:	81 85       	ldd	r24, Z+9	; 0x09
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	98 2f       	mov	r25, r24
     8bc:	88 27       	eor	r24, r24
     8be:	22 85       	ldd	r18, Z+10	; 0x0a
     8c0:	82 0f       	add	r24, r18
     8c2:	91 1d       	adc	r25, r1
     8c4:	19 96       	adiw	r26, 0x09	; 9
     8c6:	9c 93       	st	X, r25
     8c8:	8e 93       	st	-X, r24
     8ca:	18 97       	sbiw	r26, 0x08	; 8
     8cc:	08 95       	ret

000008ce <I2C_receiveInterpreter>:
     8ce:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <receiveDataTWI>
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <I2C_receiveInterpreter+0xa>
     8d6:	c0 cf       	rjmp	.-128    	; 0x858 <arduinoDataInterpreter>
     8d8:	08 95       	ret

000008da <clearSendData>:
     8da:	e8 e6       	ldi	r30, 0x68	; 104
     8dc:	f3 e0       	ldi	r31, 0x03	; 3
     8de:	8c e7       	ldi	r24, 0x7C	; 124
     8e0:	93 e0       	ldi	r25, 0x03	; 3
     8e2:	11 92       	st	Z+, r1
     8e4:	e8 17       	cp	r30, r24
     8e6:	f9 07       	cpc	r31, r25
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <clearSendData+0x8>
     8ea:	08 95       	ret

000008ec <clearReceiveData>:
     8ec:	e2 e4       	ldi	r30, 0x42	; 66
     8ee:	f3 e0       	ldi	r31, 0x03	; 3
     8f0:	86 e5       	ldi	r24, 0x56	; 86
     8f2:	93 e0       	ldi	r25, 0x03	; 3
     8f4:	11 92       	st	Z+, r1
     8f6:	e8 17       	cp	r30, r24
     8f8:	f9 07       	cpc	r31, r25
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <clearReceiveData+0x8>
     8fc:	08 95       	ret

000008fe <__vector_39>:
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	0b b6       	in	r0, 0x3b	; 59
     90a:	0f 92       	push	r0
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	2f 93       	push	r18
     91e:	3f 93       	push	r19
     920:	4f 93       	push	r20
     922:	5f 93       	push	r21
     924:	6f 93       	push	r22
     926:	7f 93       	push	r23
     928:	8f 93       	push	r24
     92a:	9f 93       	push	r25
     92c:	af 93       	push	r26
     92e:	bf 93       	push	r27
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	ef 93       	push	r30
     936:	ff 93       	push	r31
     938:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     93c:	80 35       	cpi	r24, 0x50	; 80
     93e:	c1 f0       	breq	.+48     	; 0x970 <__vector_39+0x72>
     940:	88 35       	cpi	r24, 0x58	; 88
     942:	a9 f1       	breq	.+106    	; 0x9ae <__vector_39+0xb0>
     944:	80 34       	cpi	r24, 0x40	; 64
     946:	09 f0       	breq	.+2      	; 0x94a <__vector_39+0x4c>
     948:	89 c0       	rjmp	.+274    	; 0xa5c <__vector_39+0x15e>
     94a:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <compassFlag>
     94e:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <compassFlag+0x1>
     952:	89 2b       	or	r24, r25
     954:	21 f0       	breq	.+8      	; 0x95e <__vector_39+0x60>
     956:	85 e8       	ldi	r24, 0x85	; 133
     958:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     95c:	7f c0       	rjmp	.+254    	; 0xa5c <__vector_39+0x15e>
     95e:	c6 df       	rcall	.-116    	; 0x8ec <clearReceiveData>
     960:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <bytecounter.2058+0x1>
     964:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <bytecounter.2058>
     968:	85 ec       	ldi	r24, 0xC5	; 197
     96a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     96e:	76 c0       	rjmp	.+236    	; 0xa5c <__vector_39+0x15e>
     970:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <bytecounter.2058>
     974:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <bytecounter.2058+0x1>
     978:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     97c:	fc 01       	movw	r30, r24
     97e:	ee 5b       	subi	r30, 0xBE	; 190
     980:	fc 4f       	sbci	r31, 0xFC	; 252
     982:	20 83       	st	Z, r18
     984:	82 31       	cpi	r24, 0x12	; 18
     986:	91 05       	cpc	r25, r1
     988:	4c f4       	brge	.+18     	; 0x99c <__vector_39+0x9e>
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <bytecounter.2058+0x1>
     990:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <bytecounter.2058>
     994:	85 ec       	ldi	r24, 0xC5	; 197
     996:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     99a:	60 c0       	rjmp	.+192    	; 0xa5c <__vector_39+0x15e>
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <bytecounter.2058+0x1>
     9a2:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <bytecounter.2058>
     9a6:	85 e8       	ldi	r24, 0x85	; 133
     9a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9ac:	57 c0       	rjmp	.+174    	; 0xa5c <__vector_39+0x15e>
     9ae:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <compassFlag>
     9b2:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <compassFlag+0x1>
     9b6:	89 2b       	or	r24, r25
     9b8:	71 f4       	brne	.+28     	; 0x9d6 <__vector_39+0xd8>
     9ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     9be:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <bytecounter.2058>
     9c2:	f0 91 1b 03 	lds	r31, 0x031B	; 0x80031b <bytecounter.2058+0x1>
     9c6:	ee 5b       	subi	r30, 0xBE	; 190
     9c8:	fc 4f       	sbci	r31, 0xFC	; 252
     9ca:	80 83       	st	Z, r24
     9cc:	85 e9       	ldi	r24, 0x95	; 149
     9ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9d2:	7d df       	rcall	.-262    	; 0x8ce <I2C_receiveInterpreter>
     9d4:	43 c0       	rjmp	.+134    	; 0xa5c <__vector_39+0x15e>
     9d6:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     9da:	cc e7       	ldi	r28, 0x7C	; 124
     9dc:	d3 e0       	ldi	r29, 0x03	; 3
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	03 e0       	ldi	r16, 0x03	; 3
     9ee:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__ashldi3>
     9f2:	a2 2e       	mov	r10, r18
     9f4:	b3 2e       	mov	r11, r19
     9f6:	c4 2e       	mov	r12, r20
     9f8:	d5 2e       	mov	r13, r21
     9fa:	e6 2e       	mov	r14, r22
     9fc:	f7 2e       	mov	r15, r23
     9fe:	e8 2f       	mov	r30, r24
     a00:	19 2f       	mov	r17, r25
     a02:	02 e0       	ldi	r16, 0x02	; 2
     a04:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__ashldi3>
     a08:	0e 2f       	mov	r16, r30
     a0a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__subdi3>
     a0e:	a2 2e       	mov	r10, r18
     a10:	b3 2e       	mov	r11, r19
     a12:	c4 2e       	mov	r12, r20
     a14:	d5 2e       	mov	r13, r21
     a16:	e6 2e       	mov	r14, r22
     a18:	f7 2e       	mov	r15, r23
     a1a:	e8 2f       	mov	r30, r24
     a1c:	19 2f       	mov	r17, r25
     a1e:	04 e0       	ldi	r16, 0x04	; 4
     a20:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__ashldi3>
     a24:	0e 2f       	mov	r16, r30
     a26:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__subdi3>
     a2a:	aa 24       	eor	r10, r10
     a2c:	aa 94       	dec	r10
     a2e:	b1 2c       	mov	r11, r1
     a30:	c1 2c       	mov	r12, r1
     a32:	d1 2c       	mov	r13, r1
     a34:	e1 2c       	mov	r14, r1
     a36:	f1 2c       	mov	r15, r1
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	f6 d7       	rcall	.+4076   	; 0x1a2a <__udivdi3>
     a3e:	2f 87       	std	Y+15, r18	; 0x0f
     a40:	38 8b       	std	Y+16, r19	; 0x10
     a42:	49 8b       	std	Y+17, r20	; 0x11
     a44:	5a 8b       	std	Y+18, r21	; 0x12
     a46:	6b 8b       	std	Y+19, r22	; 0x13
     a48:	7c 8b       	std	Y+20, r23	; 0x14
     a4a:	8d 8b       	std	Y+21, r24	; 0x15
     a4c:	9e 8b       	std	Y+22, r25	; 0x16
     a4e:	85 e9       	ldi	r24, 0x95	; 149
     a50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a54:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <compassFlag+0x1>
     a58:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <compassFlag>
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	7f 91       	pop	r23
     a6e:	6f 91       	pop	r22
     a70:	5f 91       	pop	r21
     a72:	4f 91       	pop	r20
     a74:	3f 91       	pop	r19
     a76:	2f 91       	pop	r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <TWIwaitUntilReady>:


void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
     a96:	ec eb       	ldi	r30, 0xBC	; 188
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	88 23       	and	r24, r24
     a9e:	ec f7       	brge	.-6      	; 0xa9a <TWIwaitUntilReady+0x4>
}
     aa0:	08 95       	ret

00000aa2 <checkCode>:


void checkCode(uint8_t code){
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	cf 5f       	subi	r28, 0xFF	; 255
     aac:	d1 09       	sbc	r29, r1
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     ab8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
	while (!(TWCR & (1 << TWINT)));
}


void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
     abc:	98 7f       	andi	r25, 0xF8	; 248
     abe:	89 17       	cp	r24, r25
     ac0:	89 f0       	breq	.+34     	; 0xae4 <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     ac2:	8c e0       	ldi	r24, 0x0C	; 12
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	6c d3       	rcall	.+1752   	; 0x11a0 <writeString>
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     ac8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     acc:	88 7f       	andi	r24, 0xF8	; 248
     ace:	40 e1       	ldi	r20, 0x10	; 16
     ad0:	be 01       	movw	r22, r28
     ad2:	6f 5f       	subi	r22, 0xFF	; 255
     ad4:	7f 4f       	sbci	r23, 0xFF	; 255
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__itoa_ncheck>

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
     adc:	61 d3       	rcall	.+1730   	; 0x11a0 <writeString>
		writeString("\n\n\r");
     ade:	87 e3       	ldi	r24, 0x37	; 55
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	5e d3       	rcall	.+1724   	; 0x11a0 <writeString>
	}
}
     ae4:	c1 50       	subi	r28, 0x01	; 1
     ae6:	df 4f       	sbci	r29, 0xFF	; 255
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	c8 2f       	mov	r28, r24
     b0c:	8b 01       	movw	r16, r22
	
	TWISendStart();
     b0e:	0f 2e       	mov	r0, r31
     b10:	fc eb       	ldi	r31, 0xBC	; 188
     b12:	cf 2e       	mov	r12, r31
     b14:	d1 2c       	mov	r13, r1
     b16:	f0 2d       	mov	r31, r0
     b18:	85 ea       	ldi	r24, 0xA5	; 165
     b1a:	f6 01       	movw	r30, r12
     b1c:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     b1e:	bb df       	rcall	.-138    	; 0xa96 <TWIwaitUntilReady>
	checkCode(0x08);
     b20:	88 e0       	ldi	r24, 0x08	; 8
     b22:	bf df       	rcall	.-130    	; 0xaa2 <checkCode>
	
	TWIWrite((address << 1));
     b24:	cc 0f       	add	r28, r28
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b26:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     b2a:	85 e8       	ldi	r24, 0x85	; 133
     b2c:	f6 01       	movw	r30, r12
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
     b2e:	80 83       	st	Z, r24
	checkCode(0x18);
     b30:	b2 df       	rcall	.-156    	; 0xa96 <TWIwaitUntilReady>
     b32:	88 e1       	ldi	r24, 0x18	; 24
     b34:	b6 df       	rcall	.-148    	; 0xaa2 <checkCode>
     b36:	e8 01       	movw	r28, r16
     b38:	0c 5e       	subi	r16, 0xEC	; 236
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b3c:	0f 2e       	mov	r0, r31
     b3e:	fb eb       	ldi	r31, 0xBB	; 187
     b40:	af 2e       	mov	r10, r31
     b42:	b1 2c       	mov	r11, r1
     b44:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     b46:	0f 2e       	mov	r0, r31
     b48:	f5 e8       	ldi	r31, 0x85	; 133
     b4a:	ff 2e       	mov	r15, r31
     b4c:	f0 2d       	mov	r31, r0
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
     b4e:	89 91       	ld	r24, Y+
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b50:	f5 01       	movw	r30, r10
	TWISendTransmit();
     b52:	80 83       	st	Z, r24
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
     b54:	f6 01       	movw	r30, r12
     b56:	f0 82       	st	Z, r15
		checkCode(0x28);
     b58:	9e df       	rcall	.-196    	; 0xa96 <TWIwaitUntilReady>
     b5a:	88 e2       	ldi	r24, 0x28	; 40
     b5c:	a2 df       	rcall	.-188    	; 0xaa2 <checkCode>
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
     b5e:	c0 17       	cp	r28, r16
     b60:	d1 07       	cpc	r29, r17
     b62:	a9 f7       	brne	.-22     	; 0xb4e <writeToSlave+0x56>
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
		checkCode(0x28);
	}
	
	TWISendStop();
     b64:	85 e9       	ldi	r24, 0x95	; 149
     b66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	bf 90       	pop	r11
     b7a:	af 90       	pop	r10
     b7c:	08 95       	ret

00000b7e <rp6DataConstructor>:
	arduinoData.distanceDrivenR = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
	arduinoData.totalDistance = (receiveDataTWI[9] << 8) + receiveDataTWI[10];
}


void rp6DataConstructor(){
     b7e:	0f 93       	push	r16
     b80:	cf 93       	push	r28
	clearSendData();
     b82:	ab de       	rcall	.-682    	; 0x8da <clearSendData>
	
	sendDataTWI[0] = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     b8a:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rp6Data>
     b8e:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <rp6Data+0x1>
     b92:	85 36       	cpi	r24, 0x65	; 101
     b94:	91 05       	cpc	r25, r1
     b96:	30 f0       	brcs	.+12     	; 0xba4 <rp6DataConstructor+0x26>
     b98:	84 e6       	ldi	r24, 0x64	; 100
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <rp6Data+0x1>
     ba0:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     ba4:	a8 e6       	ldi	r26, 0x68	; 104
     ba6:	b3 e0       	ldi	r27, 0x03	; 3
     ba8:	ec e7       	ldi	r30, 0x7C	; 124
     baa:	f3 e0       	ldi	r31, 0x03	; 3
     bac:	80 81       	ld	r24, Z
     bae:	11 96       	adiw	r26, 0x01	; 1
     bb0:	8c 93       	st	X, r24
     bb2:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	12 96       	adiw	r26, 0x02	; 2
     bba:	8c 93       	st	X, r24
     bbc:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     bbe:	83 81       	ldd	r24, Z+3	; 0x03
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	8c 93       	st	X, r24
     bc6:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     bc8:	84 81       	ldd	r24, Z+4	; 0x04
     bca:	95 81       	ldd	r25, Z+5	; 0x05
     bcc:	14 96       	adiw	r26, 0x04	; 4
     bce:	9c 93       	st	X, r25
     bd0:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     bd2:	15 96       	adiw	r26, 0x05	; 5
     bd4:	8c 93       	st	X, r24
     bd6:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     bd8:	86 81       	ldd	r24, Z+6	; 0x06
     bda:	97 81       	ldd	r25, Z+7	; 0x07
     bdc:	16 96       	adiw	r26, 0x06	; 6
     bde:	9c 93       	st	X, r25
     be0:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     be2:	17 96       	adiw	r26, 0x07	; 7
     be4:	8c 93       	st	X, r24
     be6:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     be8:	80 85       	ldd	r24, Z+8	; 0x08
     bea:	91 85       	ldd	r25, Z+9	; 0x09
     bec:	18 96       	adiw	r26, 0x08	; 8
     bee:	9c 93       	st	X, r25
     bf0:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     bf2:	19 96       	adiw	r26, 0x09	; 9
     bf4:	8c 93       	st	X, r24
     bf6:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     bf8:	82 85       	ldd	r24, Z+10	; 0x0a
     bfa:	93 85       	ldd	r25, Z+11	; 0x0b
     bfc:	1a 96       	adiw	r26, 0x0a	; 10
     bfe:	9c 93       	st	X, r25
     c00:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     c02:	1b 96       	adiw	r26, 0x0b	; 11
     c04:	8c 93       	st	X, r24
     c06:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     c08:	86 85       	ldd	r24, Z+14	; 0x0e
     c0a:	1c 96       	adiw	r26, 0x0c	; 12
     c0c:	8c 93       	st	X, r24
     c0e:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     c10:	c7 85       	ldd	r28, Z+15	; 0x0f
     c12:	30 89       	ldd	r19, Z+16	; 0x10
     c14:	41 89       	ldd	r20, Z+17	; 0x11
     c16:	52 89       	ldd	r21, Z+18	; 0x12
     c18:	63 89       	ldd	r22, Z+19	; 0x13
     c1a:	74 89       	ldd	r23, Z+20	; 0x14
     c1c:	2c 2f       	mov	r18, r28
     c1e:	85 89       	ldd	r24, Z+21	; 0x15
     c20:	96 89       	ldd	r25, Z+22	; 0x16
     c22:	08 e0       	ldi	r16, 0x08	; 8
     c24:	79 d7       	rcall	.+3826   	; 0x1b18 <__lshrdi3>
     c26:	1d 96       	adiw	r26, 0x0d	; 13
     c28:	2c 93       	st	X, r18
     c2a:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     c2c:	1e 96       	adiw	r26, 0x0e	; 14
     c2e:	cc 93       	st	X, r28
     c30:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     c32:	1f 96       	adiw	r26, 0x0f	; 15
     c34:	1c 92       	st	X, r1
     c36:	1f 97       	sbiw	r26, 0x0f	; 15
     c38:	50 96       	adiw	r26, 0x10	; 16
     c3a:	1c 92       	st	X, r1
     c3c:	50 97       	sbiw	r26, 0x10	; 16
     c3e:	51 96       	adiw	r26, 0x11	; 17
     c40:	1c 92       	st	X, r1
     c42:	51 97       	sbiw	r26, 0x11	; 17
     c44:	52 96       	adiw	r26, 0x12	; 18
     c46:	1c 92       	st	X, r1
     c48:	52 97       	sbiw	r26, 0x12	; 18
     c4a:	53 96       	adiw	r26, 0x13	; 19
     c4c:	1c 92       	st	X, r1
     c4e:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     c50:	bd 01       	movw	r22, r26
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	51 df       	rcall	.-350    	; 0xaf8 <writeToSlave>
}
     c56:	cf 91       	pop	r28
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <readFromCompass>:
	TWISendStop();
	
}


void readFromCompass(){
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
	compassFlag = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <compassFlag+0x1>
     c70:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <compassFlag>
	TWISendStart();
     c74:	cc eb       	ldi	r28, 0xBC	; 188
     c76:	d0 e0       	ldi	r29, 0x00	; 0
     c78:	05 ea       	ldi	r16, 0xA5	; 165
     c7a:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     c7c:	0c df       	rcall	.-488    	; 0xa96 <TWIwaitUntilReady>
	checkCode(0x08);
     c7e:	88 e0       	ldi	r24, 0x08	; 8
     c80:	10 df       	rcall	.-480    	; 0xaa2 <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c82:	0f 2e       	mov	r0, r31
     c84:	fb eb       	ldi	r31, 0xBB	; 187
     c86:	ef 2e       	mov	r14, r31
     c88:	f1 2c       	mov	r15, r1
     c8a:	f0 2d       	mov	r31, r0
     c8c:	80 ec       	ldi	r24, 0xC0	; 192
     c8e:	f7 01       	movw	r30, r14
     c90:	80 83       	st	Z, r24
	TWISendTransmit();
     c92:	15 e8       	ldi	r17, 0x85	; 133
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite(0xC0);
	TWIwaitUntilReady();
     c94:	18 83       	st	Y, r17
	checkCode(0x18);
     c96:	ff de       	rcall	.-514    	; 0xa96 <TWIwaitUntilReady>
     c98:	88 e1       	ldi	r24, 0x18	; 24
     c9a:	03 df       	rcall	.-506    	; 0xaa2 <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	f7 01       	movw	r30, r14
	TWISendTransmit();
     ca0:	80 83       	st	Z, r24
	TWIWrite(0xC0);
	TWIwaitUntilReady();
	checkCode(0x18);
	
	TWIWrite(1);
	TWIwaitUntilReady();
     ca2:	18 83       	st	Y, r17
	checkCode(0x28);
     ca4:	f8 de       	rcall	.-528    	; 0xa96 <TWIwaitUntilReady>
     ca6:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     ca8:	fc de       	rcall	.-520    	; 0xaa2 <checkCode>
	TWIwaitUntilReady();
     caa:	08 83       	st	Y, r16
	checkCode(0x10);
     cac:	f4 de       	rcall	.-536    	; 0xa96 <TWIwaitUntilReady>
     cae:	80 e1       	ldi	r24, 0x10	; 16
     cb0:	f8 de       	rcall	.-528    	; 0xaa2 <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     cb2:	81 ec       	ldi	r24, 0xC1	; 193
     cb4:	f7 01       	movw	r30, r14
     cb6:	80 83       	st	Z, r24
	TWISendTransmit();
     cb8:	18 83       	st	Y, r17
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x10);
	
	TWIWrite(0xC1);
	TWIwaitUntilReady();
     cba:	ed de       	rcall	.-550    	; 0xa96 <TWIwaitUntilReady>
     cbc:	df 91       	pop	r29
}
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	08 95       	ret

00000cca <readFromSlave>:
     cca:	0f 93       	push	r16


void readFromSlave(uint8_t address){
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	c8 2f       	mov	r28, r24
	
	TWISendStart();
     cd2:	0c eb       	ldi	r16, 0xBC	; 188
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	85 ea       	ldi	r24, 0xA5	; 165
     cd8:	f8 01       	movw	r30, r16
     cda:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     cdc:	dc de       	rcall	.-584    	; 0xa96 <TWIwaitUntilReady>
	checkCode(0x08);
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	e0 de       	rcall	.-576    	; 0xaa2 <checkCode>
	
	TWIWrite( (address << 1) + 1 );
     ce2:	cc 0f       	add	r28, r28
     ce4:	cf 5f       	subi	r28, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     ce6:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     cea:	85 e8       	ldi	r24, 0x85	; 133
     cec:	f8 01       	movw	r30, r16
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite( (address << 1) + 1 );
	TWIwaitUntilReady();
     cee:	80 83       	st	Z, r24
     cf0:	d2 de       	rcall	.-604    	; 0xa96 <TWIwaitUntilReady>
	
}
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <__vector_15>:
		break;
	}
}


ISR(TIMER2_OVF_vect){
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 4){
     d20:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <counter.2069>
     d24:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <counter.2069+0x1>
     d28:	84 30       	cpi	r24, 0x04	; 4
     d2a:	91 05       	cpc	r25, r1
     d2c:	11 f4       	brne	.+4      	; 0xd32 <__vector_15+0x38>
		rp6DataConstructor();
     d2e:	27 df       	rcall	.-434    	; 0xb7e <rp6DataConstructor>
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <__vector_15+0x52>
	}else if(counter == 8){
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	91 05       	cpc	r25, r1
		readFromCompass();
     d36:	11 f4       	brne	.+4      	; 0xd3c <__vector_15+0x42>
     d38:	91 df       	rcall	.-222    	; 0xc5c <readFromCompass>
     d3a:	08 c0       	rjmp	.+16     	; 0xd4c <__vector_15+0x52>
	}else if(counter >= 12){
     d3c:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromSlave(RP6_ADDRESS);
     d3e:	34 f0       	brlt	.+12     	; 0xd4c <__vector_15+0x52>
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	c3 df       	rcall	.-122    	; 0xcca <readFromSlave>
		counter = 0;
     d44:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <counter.2069+0x1>
     d48:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <counter.2069>
	}
	
	counter++;
     d4c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <counter.2069>
     d50:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <counter.2069+0x1>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <counter.2069+0x1>
     d5a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <counter.2069>
}
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0b be       	out	0x3b, r0	; 59
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <turnSignal>:
	TWIwaitUntilReady();
	
}


void turnSignal(){
     d84:	4f 92       	push	r4
     d86:	5f 92       	push	r5
     d88:	6f 92       	push	r6
     d8a:	7f 92       	push	r7
     d8c:	8f 92       	push	r8
     d8e:	9f 92       	push	r9
     d90:	af 92       	push	r10
     d92:	bf 92       	push	r11
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
     da0:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     da2:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     da4:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <rp6Data+0x3>
     da8:	8f 3f       	cpi	r24, 0xFF	; 255
     daa:	a9 f5       	brne	.+106    	; 0xe16 <turnSignal+0x92>
		if(turnSignalStart < micros()){
     dac:	40 90 14 03 	lds	r4, 0x0314	; 0x800314 <__data_end>
     db0:	50 90 15 03 	lds	r5, 0x0315	; 0x800315 <__data_end+0x1>
     db4:	60 90 16 03 	lds	r6, 0x0316	; 0x800316 <__data_end+0x2>
     db8:	70 90 17 03 	lds	r7, 0x0317	; 0x800317 <__data_end+0x3>
     dbc:	6c dc       	rcall	.-1832   	; 0x696 <micros>
     dbe:	f2 2f       	mov	r31, r18
     dc0:	e3 2f       	mov	r30, r19
     dc2:	c4 2e       	mov	r12, r20
     dc4:	d5 2e       	mov	r13, r21
     dc6:	e6 2e       	mov	r14, r22
     dc8:	f7 2e       	mov	r15, r23
     dca:	08 2f       	mov	r16, r24
     dcc:	19 2f       	mov	r17, r25
     dce:	24 2d       	mov	r18, r4
     dd0:	35 2d       	mov	r19, r5
     dd2:	46 2d       	mov	r20, r6
     dd4:	57 2d       	mov	r21, r7
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	af 2e       	mov	r10, r31
     de0:	be 2e       	mov	r11, r30
     de2:	d4 d6       	rcall	.+3496   	; 0x1b8c <__cmpdi2>
     de4:	c0 f4       	brcc	.+48     	; 0xe16 <turnSignal+0x92>
			PORTC ^= (1 << PINC1);	
     de6:	98 b1       	in	r25, 0x08	; 8
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
     dec:	88 b9       	out	0x08, r24	; 8
     dee:	53 dc       	rcall	.-1882   	; 0x696 <micros>
     df0:	82 2e       	mov	r8, r18
     df2:	93 2e       	mov	r9, r19
     df4:	a4 2e       	mov	r10, r20
     df6:	b5 2e       	mov	r11, r21
     df8:	80 e2       	ldi	r24, 0x20	; 32
     dfa:	88 0e       	add	r8, r24
     dfc:	81 ea       	ldi	r24, 0xA1	; 161
     dfe:	98 1e       	adc	r9, r24
     e00:	87 e0       	ldi	r24, 0x07	; 7
     e02:	a8 1e       	adc	r10, r24
     e04:	b1 1c       	adc	r11, r1
     e06:	80 92 14 03 	sts	0x0314, r8	; 0x800314 <__data_end>
     e0a:	90 92 15 03 	sts	0x0315, r9	; 0x800315 <__data_end+0x1>
     e0e:	a0 92 16 03 	sts	0x0316, r10	; 0x800316 <__data_end+0x2>
     e12:	b0 92 17 03 	sts	0x0317, r11	; 0x800317 <__data_end+0x3>
		}
	}
	if(rp6Data.turnDirection == 1){
     e16:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <rp6Data+0x3>
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f5       	brne	.+104    	; 0xe86 <turnSignal+0x102>
		if(turnSignalStart < micros()){
     e1e:	40 90 14 03 	lds	r4, 0x0314	; 0x800314 <__data_end>
     e22:	50 90 15 03 	lds	r5, 0x0315	; 0x800315 <__data_end+0x1>
     e26:	60 90 16 03 	lds	r6, 0x0316	; 0x800316 <__data_end+0x2>
     e2a:	70 90 17 03 	lds	r7, 0x0317	; 0x800317 <__data_end+0x3>
     e2e:	33 dc       	rcall	.-1946   	; 0x696 <micros>
     e30:	f2 2f       	mov	r31, r18
     e32:	e3 2f       	mov	r30, r19
     e34:	c4 2e       	mov	r12, r20
     e36:	d5 2e       	mov	r13, r21
     e38:	e6 2e       	mov	r14, r22
     e3a:	f7 2e       	mov	r15, r23
     e3c:	08 2f       	mov	r16, r24
     e3e:	19 2f       	mov	r17, r25
     e40:	24 2d       	mov	r18, r4
     e42:	35 2d       	mov	r19, r5
     e44:	46 2d       	mov	r20, r6
     e46:	57 2d       	mov	r21, r7
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	af 2e       	mov	r10, r31
     e52:	be 2e       	mov	r11, r30
     e54:	9b d6       	rcall	.+3382   	; 0x1b8c <__cmpdi2>
     e56:	b8 f4       	brcc	.+46     	; 0xe86 <turnSignal+0x102>
			PORTD ^= (1 << PIND7);
     e58:	8b b1       	in	r24, 0x0b	; 11
     e5a:	80 58       	subi	r24, 0x80	; 128
     e5c:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     e5e:	1b dc       	rcall	.-1994   	; 0x696 <micros>
     e60:	82 2e       	mov	r8, r18
     e62:	93 2e       	mov	r9, r19
     e64:	a4 2e       	mov	r10, r20
     e66:	b5 2e       	mov	r11, r21
     e68:	80 e2       	ldi	r24, 0x20	; 32
     e6a:	88 0e       	add	r8, r24
     e6c:	81 ea       	ldi	r24, 0xA1	; 161
     e6e:	98 1e       	adc	r9, r24
     e70:	87 e0       	ldi	r24, 0x07	; 7
     e72:	a8 1e       	adc	r10, r24
     e74:	b1 1c       	adc	r11, r1
     e76:	80 92 14 03 	sts	0x0314, r8	; 0x800314 <__data_end>
     e7a:	90 92 15 03 	sts	0x0315, r9	; 0x800315 <__data_end+0x1>
     e7e:	a0 92 16 03 	sts	0x0316, r10	; 0x800316 <__data_end+0x2>
     e82:	b0 92 17 03 	sts	0x0317, r11	; 0x800317 <__data_end+0x3>
     e86:	1f 91       	pop	r17
		}
	}
}
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	9f 90       	pop	r9
     e98:	8f 90       	pop	r8
     e9a:	7f 90       	pop	r7
     e9c:	6f 90       	pop	r6
     e9e:	5f 90       	pop	r5
     ea0:	4f 90       	pop	r4
     ea2:	08 95       	ret

00000ea4 <main>:
     ea4:	78 94       	sei
*/

int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
     ea6:	99 db       	rcall	.-2254   	; 0x5da <init_micros>
	init_USART();
     ea8:	99 d9       	rcall	.-3278   	; 0x1dc <init_USART>
	init_TWI();
     eaa:	57 dc       	rcall	.-1874   	; 0x75a <init_TWI>
	init_TWI_Timer2();
     eac:	5f dc       	rcall	.-1858   	; 0x76c <init_TWI_Timer2>
	init_PWM_Timer4();
     eae:	6b dc       	rcall	.-1834   	; 0x786 <init_PWM_Timer4>
	init_rp6Data();
     eb0:	89 dc       	rcall	.-1774   	; 0x7c4 <init_rp6Data>
     eb2:	81 dc       	rcall	.-1790   	; 0x7b6 <init_arduinoData>
	init_arduinoData();
     eb4:	a5 d1       	rcall	.+842    	; 0x1200 <initTimer>
     eb6:	92 d9       	rcall	.-3292   	; 0x1dc <init_USART>
	initTimer();
     eb8:	0f 2e       	mov	r0, r31
	init_USART();
     eba:	f8 e2       	ldi	r31, 0x28	; 40
     ebc:	2f 2e       	mov	r2, r31
			}else if(distance > 300 && stopState == 2){
				stopState = 0;
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
				rp6Data.driveSpeed = 40;
     ebe:	31 2c       	mov	r3, r1
     ec0:	f0 2d       	mov	r31, r0
     ec2:	60 df       	rcall	.-320    	; 0xd84 <turnSignal>
     ec4:	40 90 3e 03 	lds	r4, 0x033E	; 0x80033e <ultrasonicSensorTimer>
	init_USART();
	//-----------------------
	
	while (1){
		
		turnSignal();
     ec8:	50 90 3f 03 	lds	r5, 0x033F	; 0x80033f <ultrasonicSensorTimer+0x1>
		
		if(runParcour){
			hardcoreParcour();
		}
		
		if (ultrasonicSensorTimer < micros()) {
     ecc:	60 90 40 03 	lds	r6, 0x0340	; 0x800340 <ultrasonicSensorTimer+0x2>
     ed0:	70 90 41 03 	lds	r7, 0x0341	; 0x800341 <ultrasonicSensorTimer+0x3>
     ed4:	e0 db       	rcall	.-2112   	; 0x696 <micros>
     ed6:	f2 2f       	mov	r31, r18
     ed8:	e3 2f       	mov	r30, r19
     eda:	c4 2e       	mov	r12, r20
     edc:	d5 2e       	mov	r13, r21
     ede:	e6 2e       	mov	r14, r22
     ee0:	f7 2e       	mov	r15, r23
     ee2:	08 2f       	mov	r16, r24
     ee4:	19 2f       	mov	r17, r25
     ee6:	24 2d       	mov	r18, r4
     ee8:	35 2d       	mov	r19, r5
     eea:	46 2d       	mov	r20, r6
     eec:	57 2d       	mov	r21, r7
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	af 2e       	mov	r10, r31
     ef8:	be 2e       	mov	r11, r30
     efa:	48 d6       	rcall	.+3216   	; 0x1b8c <__cmpdi2>
     efc:	08 f0       	brcs	.+2      	; 0xf00 <main+0x5c>
     efe:	8c c0       	rjmp	.+280    	; 0x1018 <main+0x174>
			writeString("\f\r");
     f00:	8b e3       	ldi	r24, 0x3B	; 59
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	4d d1       	rcall	.+666    	; 0x11a0 <writeString>
			writeString("Distance to object: ");
     f06:	8e e3       	ldi	r24, 0x3E	; 62
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	4a d1       	rcall	.+660    	; 0x11a0 <writeString>
			writeInt(ultrasonicSensor());
     f0c:	83 d1       	rcall	.+774    	; 0x1214 <ultrasonicSensor>
     f0e:	5d d1       	rcall	.+698    	; 0x11ca <writeInt>
     f10:	83 e5       	ldi	r24, 0x53	; 83
			writeString("mm\n\rCompass Angle: ");
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	45 d1       	rcall	.+650    	; 0x11a0 <writeString>
     f16:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rp6Data+0xf>
			writeInt(rp6Data.compassAngle);
     f1a:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <rp6Data+0x10>
     f1e:	55 d1       	rcall	.+682    	; 0x11ca <writeInt>
     f20:	87 e6       	ldi	r24, 0x67	; 103
			writeString(" degrees");
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	3d d1       	rcall	.+634    	; 0x11a0 <writeString>
     f26:	80 e7       	ldi	r24, 0x70	; 112
			writeString("\n\n\rSpeed: ");
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	3a d1       	rcall	.+628    	; 0x11a0 <writeString>
     f2c:	ec e7       	ldi	r30, 0x7C	; 124
     f2e:	f3 e0       	ldi	r31, 0x03	; 3
			writeInt(rp6Data.driveSpeed);
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	4a d1       	rcall	.+660    	; 0x11ca <writeInt>
     f36:	8b e7       	ldi	r24, 0x7B	; 123
     f38:	92 e0       	ldi	r25, 0x02	; 2
			writeString("%\n\n\rDirection: ");
     f3a:	32 d1       	rcall	.+612    	; 0x11a0 <writeString>
     f3c:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <rp6Data+0x2>
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	21 f4       	brne	.+8      	; 0xf4c <main+0xa8>
     f44:	8b e8       	ldi	r24, 0x8B	; 139
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	2b d1       	rcall	.+598    	; 0x11a0 <writeString>
     f4a:	0b c0       	rjmp	.+22     	; 0xf62 <main+0xbe>
     f4c:	81 11       	cpse	r24, r1
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <main+0xb4>
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
     f50:	85 e9       	ldi	r24, 0x95	; 149
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	25 d1       	rcall	.+586    	; 0x11a0 <writeString>
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <main+0xbe>
     f58:	8f 3f       	cpi	r24, 0xFF	; 255
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
     f5a:	19 f4       	brne	.+6      	; 0xf62 <main+0xbe>
     f5c:	82 ea       	ldi	r24, 0xA2	; 162
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	1f d1       	rcall	.+574    	; 0x11a0 <writeString>
     f62:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <rp6Data+0x3>
			if(rp6Data.turnDirection == -1) writeString("turning left");
     f66:	8f 3f       	cpi	r24, 0xFF	; 255
     f68:	21 f4       	brne	.+8      	; 0xf72 <main+0xce>
     f6a:	8e ea       	ldi	r24, 0xAE	; 174
     f6c:	92 e0       	ldi	r25, 0x02	; 2
     f6e:	18 d1       	rcall	.+560    	; 0x11a0 <writeString>
     f70:	0b c0       	rjmp	.+22     	; 0xf88 <main+0xe4>
			else if(rp6Data.turnDirection == 0) writeString("going straight");
     f72:	81 11       	cpse	r24, r1
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <main+0xda>
     f76:	8b eb       	ldi	r24, 0xBB	; 187
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	12 d1       	rcall	.+548    	; 0x11a0 <writeString>
			else if(rp6Data.turnDirection == 1) writeString("turning right");
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <main+0xe4>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	19 f4       	brne	.+6      	; 0xf88 <main+0xe4>
     f82:	8a ec       	ldi	r24, 0xCA	; 202
     f84:	92 e0       	ldi	r25, 0x02	; 2
			writeString("\n\rAcceleration rate: ");
     f86:	0c d1       	rcall	.+536    	; 0x11a0 <writeString>
     f88:	88 ed       	ldi	r24, 0xD8	; 216
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	09 d1       	rcall	.+530    	; 0x11a0 <writeString>
			writeInt(rp6Data.accelerationRate);
     f8e:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <rp6Data+0x4>
     f92:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <rp6Data+0x5>
     f96:	19 d1       	rcall	.+562    	; 0x11ca <writeInt>
     f98:	8e ee       	ldi	r24, 0xEE	; 238
			writeString("\n\rTurn rate: ");
     f9a:	92 e0       	ldi	r25, 0x02	; 2
     f9c:	01 d1       	rcall	.+514    	; 0x11a0 <writeString>
     f9e:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <rp6Data+0x6>
			writeInt(rp6Data.turnRate);
     fa2:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <rp6Data+0x7>
     fa6:	11 d1       	rcall	.+546    	; 0x11ca <writeInt>
     fa8:	8c ef       	ldi	r24, 0xFC	; 252
			
			writeString("\n\n\rCommand: ");
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	f9 d0       	rcall	.+498    	; 0x11a0 <writeString>
     fae:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
			writeChar(USARTcommand);
     fb2:	ee d0       	rcall	.+476    	; 0x1190 <writeChar>
     fb4:	89 e0       	ldi	r24, 0x09	; 9
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	f3 d0       	rcall	.+486    	; 0x11a0 <writeString>
			writeString("\n\rValue: ");			
     fba:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     fbe:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
			if(USARTinputPos >= 0){
     fc2:	99 23       	and	r25, r25
     fc4:	84 f0       	brlt	.+32     	; 0xfe6 <main+0x142>
     fc6:	03 e9       	ldi	r16, 0x93	; 147
     fc8:	13 e0       	ldi	r17, 0x03	; 3
     fca:	c0 e0       	ldi	r28, 0x00	; 0
     fcc:	d0 e0       	ldi	r29, 0x00	; 0
     fce:	f8 01       	movw	r30, r16
     fd0:	81 91       	ld	r24, Z+
     fd2:	8f 01       	movw	r16, r30
     fd4:	dd d0       	rcall	.+442    	; 0x1190 <writeChar>
				for(int i = 0; i <= USARTinputPos; i++){
					writeChar(USARTinput[i]);
     fd6:	21 96       	adiw	r28, 0x01	; 1
     fd8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     fdc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
			
			writeString("\n\n\rCommand: ");
			writeChar(USARTcommand);
			writeString("\n\rValue: ");			
			if(USARTinputPos >= 0){
				for(int i = 0; i <= USARTinputPos; i++){
     fe0:	8c 17       	cp	r24, r28
     fe2:	9d 07       	cpc	r25, r29
     fe4:	a4 f7       	brge	.-24     	; 0xfce <main+0x12a>
     fe6:	57 db       	rcall	.-2386   	; 0x696 <micros>
     fe8:	82 2e       	mov	r8, r18
     fea:	93 2e       	mov	r9, r19
     fec:	a4 2e       	mov	r10, r20
					writeChar(USARTinput[i]);
				}
			}
			
			ultrasonicSensorTimer = micros() + ultrasonicSensorSpeed;
     fee:	b5 2e       	mov	r11, r21
     ff0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ultrasonicSensorSpeed>
     ff4:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ultrasonicSensorSpeed+0x1>
     ff8:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ultrasonicSensorSpeed+0x2>
     ffc:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ultrasonicSensorSpeed+0x3>
    1000:	88 0e       	add	r8, r24
    1002:	99 1e       	adc	r9, r25
    1004:	aa 1e       	adc	r10, r26
    1006:	bb 1e       	adc	r11, r27
    1008:	80 92 3e 03 	sts	0x033E, r8	; 0x80033e <ultrasonicSensorTimer>
    100c:	90 92 3f 03 	sts	0x033F, r9	; 0x80033f <ultrasonicSensorTimer+0x1>
    1010:	a0 92 40 03 	sts	0x0340, r10	; 0x800340 <ultrasonicSensorTimer+0x2>
    1014:	b0 92 41 03 	sts	0x0341, r11	; 0x800341 <ultrasonicSensorTimer+0x3>
    1018:	40 90 3a 03 	lds	r4, 0x033A	; 0x80033a <stoptimer>
    101c:	50 90 3b 03 	lds	r5, 0x033B	; 0x80033b <stoptimer+0x1>
		}
		
		if(stoptimer < micros()){
    1020:	60 90 3c 03 	lds	r6, 0x033C	; 0x80033c <stoptimer+0x2>
    1024:	70 90 3d 03 	lds	r7, 0x033D	; 0x80033d <stoptimer+0x3>
    1028:	36 db       	rcall	.-2452   	; 0x696 <micros>
    102a:	f2 2f       	mov	r31, r18
    102c:	e3 2f       	mov	r30, r19
    102e:	c4 2e       	mov	r12, r20
    1030:	d5 2e       	mov	r13, r21
    1032:	e6 2e       	mov	r14, r22
    1034:	f7 2e       	mov	r15, r23
    1036:	08 2f       	mov	r16, r24
    1038:	19 2f       	mov	r17, r25
    103a:	24 2d       	mov	r18, r4
    103c:	35 2d       	mov	r19, r5
    103e:	46 2d       	mov	r20, r6
    1040:	57 2d       	mov	r21, r7
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	af 2e       	mov	r10, r31
    104c:	be 2e       	mov	r11, r30
    104e:	9e d5       	rcall	.+2876   	; 0x1b8c <__cmpdi2>
    1050:	08 f0       	brcs	.+2      	; 0x1054 <main+0x1b0>
    1052:	37 cf       	rjmp	.-402    	; 0xec2 <main+0x1e>
    1054:	df d0       	rcall	.+446    	; 0x1214 <ultrasonicSensor>
    1056:	81 39       	cpi	r24, 0x91	; 145
    1058:	f1 e0       	ldi	r31, 0x01	; 1
    105a:	9f 07       	cpc	r25, r31
    105c:	80 f0       	brcs	.+32     	; 0x107e <main+0x1da>
			uint16_t distance = ultrasonicSensor();
    105e:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <stopState.2029>
			static int stopState = 0;
			static uint16_t tempAcceleration;
			
			if(distance > 400 && stopState == 1){
    1062:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <stopState.2029+0x1>
    1066:	21 30       	cpi	r18, 0x01	; 1
    1068:	31 05       	cpc	r19, r1
    106a:	49 f4       	brne	.+18     	; 0x107e <main+0x1da>
    106c:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <tempAcceleration.2030>
    1070:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <tempAcceleration.2030+0x1>
    1074:	30 93 81 03 	sts	0x0381, r19	; 0x800381 <rp6Data+0x5>
				rp6Data.accelerationRate = tempAcceleration;
    1078:	20 93 80 03 	sts	0x0380, r18	; 0x800380 <rp6Data+0x4>
    107c:	0f c0       	rjmp	.+30     	; 0x109c <main+0x1f8>
    107e:	8d 32       	cpi	r24, 0x2D	; 45
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	92 07       	cpc	r25, r18
    1084:	58 f0       	brcs	.+22     	; 0x109c <main+0x1f8>
    1086:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <stopState.2029>
			}else if(distance > 300 && stopState == 2){
    108a:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <stopState.2029+0x1>
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	21 f4       	brne	.+8      	; 0x109c <main+0x1f8>
    1094:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <stopState.2029+0x1>
    1098:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <stopState.2029>
    109c:	9c 01       	movw	r18, r24
    109e:	2d 52       	subi	r18, 0x2D	; 45
				stopState = 0;
    10a0:	31 40       	sbci	r19, 0x01	; 1
    10a2:	23 36       	cpi	r18, 0x63	; 99
    10a4:	31 05       	cpc	r19, r1
    10a6:	70 f4       	brcc	.+28     	; 0x10c4 <main+0x220>
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
    10a8:	ec e7       	ldi	r30, 0x7C	; 124
    10aa:	f3 e0       	ldi	r31, 0x03	; 3
    10ac:	20 81       	ld	r18, Z
    10ae:	31 81       	ldd	r19, Z+1	; 0x01
    10b0:	29 32       	cpi	r18, 0x29	; 41
    10b2:	31 05       	cpc	r19, r1
    10b4:	38 f0       	brcs	.+14     	; 0x10c4 <main+0x220>
    10b6:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <rp6Data+0x2>
    10ba:	21 30       	cpi	r18, 0x01	; 1
    10bc:	19 f4       	brne	.+6      	; 0x10c4 <main+0x220>
    10be:	31 82       	std	Z+1, r3	; 0x01
    10c0:	20 82       	st	Z, r2
    10c2:	4c c0       	rjmp	.+152    	; 0x115c <main+0x2b8>
    10c4:	9c 01       	movw	r18, r24
    10c6:	26 55       	subi	r18, 0x56	; 86
    10c8:	31 09       	sbc	r19, r1
				rp6Data.driveSpeed = 40;
    10ca:	26 3d       	cpi	r18, 0xD6	; 214
    10cc:	31 05       	cpc	r19, r1
    10ce:	80 f4       	brcc	.+32     	; 0x10f0 <main+0x24c>
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
    10d0:	ec e7       	ldi	r30, 0x7C	; 124
    10d2:	f3 e0       	ldi	r31, 0x03	; 3
    10d4:	20 81       	ld	r18, Z
    10d6:	31 81       	ldd	r19, Z+1	; 0x01
    10d8:	2a 31       	cpi	r18, 0x1A	; 26
    10da:	31 05       	cpc	r19, r1
    10dc:	48 f0       	brcs	.+18     	; 0x10f0 <main+0x24c>
    10de:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <rp6Data+0x2>
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	d9 f5       	brne	.+118    	; 0x115c <main+0x2b8>
    10e6:	89 e1       	ldi	r24, 0x19	; 25
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	80 83       	st	Z, r24
    10ee:	36 c0       	rjmp	.+108    	; 0x115c <main+0x2b8>
    10f0:	85 35       	cpi	r24, 0x55	; 85
				rp6Data.driveSpeed = 25;
    10f2:	91 05       	cpc	r25, r1
    10f4:	98 f5       	brcc	.+102    	; 0x115c <main+0x2b8>
    10f6:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <rp6Data+0x2>
    10fa:	81 30       	cpi	r24, 0x01	; 1
			}else if(distance < 85 && rp6Data.driveDirection == 1){
    10fc:	79 f5       	brne	.+94     	; 0x115c <main+0x2b8>
    10fe:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <stopState.2029>
    1102:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <stopState.2029+0x1>
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	c9 f4       	brne	.+50     	; 0x113c <main+0x298>
				if(stopState == 0){
    110a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <rp6Data+0x4>
    110e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <rp6Data+0x5>
    1112:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <tempAcceleration.2030+0x1>
					tempAcceleration = rp6Data.accelerationRate;
    1116:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <tempAcceleration.2030>
    111a:	e8 e8       	ldi	r30, 0x88	; 136
    111c:	f3 e1       	ldi	r31, 0x13	; 19
    111e:	f0 93 81 03 	sts	0x0381, r31	; 0x800381 <rp6Data+0x5>
    1122:	e0 93 80 03 	sts	0x0380, r30	; 0x800380 <rp6Data+0x4>
					rp6Data.accelerationRate = 5000;
    1126:	ec e7       	ldi	r30, 0x7C	; 124
    1128:	f3 e0       	ldi	r31, 0x03	; 3
    112a:	11 82       	std	Z+1, r1	; 0x01
    112c:	10 82       	st	Z, r1
    112e:	81 e0       	ldi	r24, 0x01	; 1
					rp6Data.driveSpeed = 0;
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <stopState.2029+0x1>
    1136:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <stopState.2029>
					stopState = 1;
    113a:	10 c0       	rjmp	.+32     	; 0x115c <main+0x2b8>
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	71 f4       	brne	.+28     	; 0x115c <main+0x2b8>
    1140:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <tempAcceleration.2030>
    1144:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <tempAcceleration.2030+0x1>
				}else if(stopState == 1){
    1148:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <rp6Data+0x5>
					rp6Data.accelerationRate = tempAcceleration;
    114c:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <rp6Data+0x4>
    1150:	e2 e0       	ldi	r30, 0x02	; 2
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	f0 93 1f 03 	sts	0x031F, r31	; 0x80031f <stopState.2029+0x1>
    1158:	e0 93 1e 03 	sts	0x031E, r30	; 0x80031e <stopState.2029>
					stopState = 2;
    115c:	9c da       	rcall	.-2760   	; 0x696 <micros>
    115e:	82 2e       	mov	r8, r18
    1160:	93 2e       	mov	r9, r19
    1162:	a4 2e       	mov	r10, r20
    1164:	b5 2e       	mov	r11, r21
				}
			}
			
			stoptimer = micros() + stoptimerspeed;
    1166:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stoptimerspeed>
    116a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stoptimerspeed+0x1>
    116e:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <stoptimerspeed+0x2>
    1172:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <stoptimerspeed+0x3>
    1176:	88 0e       	add	r8, r24
    1178:	99 1e       	adc	r9, r25
    117a:	aa 1e       	adc	r10, r26
    117c:	bb 1e       	adc	r11, r27
    117e:	80 92 3a 03 	sts	0x033A, r8	; 0x80033a <stoptimer>
    1182:	90 92 3b 03 	sts	0x033B, r9	; 0x80033b <stoptimer+0x1>
    1186:	a0 92 3c 03 	sts	0x033C, r10	; 0x80033c <stoptimer+0x2>
    118a:	b0 92 3d 03 	sts	0x033D, r11	; 0x80033d <stoptimer+0x3>
    118e:	99 ce       	rjmp	.-718    	; 0xec2 <main+0x1e>

00001190 <writeChar>:
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
    1190:	e0 ec       	ldi	r30, 0xC0	; 192
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	90 81       	ld	r25, Z
    1196:	95 ff       	sbrs	r25, 5
    1198:	fd cf       	rjmp	.-6      	; 0x1194 <writeChar+0x4>
	UDR0 = x;
    119a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    119e:	08 95       	ret

000011a0 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    11a8:	80 81       	ld	r24, Z
    11aa:	88 23       	and	r24, r24
    11ac:	51 f0       	breq	.+20     	; 0x11c2 <writeString+0x22>
    11ae:	8f 01       	movw	r16, r30
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    11b2:	ee df       	rcall	.-36     	; 0x1190 <writeChar>
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    11b4:	cf 5f       	subi	r28, 0xFF	; 255
    11b6:	f8 01       	movw	r30, r16
    11b8:	ec 0f       	add	r30, r28
    11ba:	f1 1d       	adc	r31, r1
    11bc:	80 81       	ld	r24, Z
    11be:	81 11       	cpse	r24, r1
    11c0:	f8 cf       	rjmp	.-16     	; 0x11b2 <writeString+0x12>
		writeChar( st[i] );
	}
}
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	28 97       	sbiw	r28, 0x08	; 8
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	4a e0       	ldi	r20, 0x0A	; 10
    11e0:	be 01       	movw	r22, r28
    11e2:	6f 5f       	subi	r22, 0xFF	; 255
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	ea d4       	rcall	.+2516   	; 0x1bbc <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	d9 df       	rcall	.-78     	; 0x11a0 <writeString>
}
    11ee:	28 96       	adiw	r28, 0x08	; 8
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <initTimer>:
#define PORT_REGISTER PORTL
#define PIN_REGISTER PINL

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
    1200:	e1 e8       	ldi	r30, 0x81	; 129
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	82 60       	ori	r24, 0x02	; 2
    1208:	80 83       	st	Z, r24
	TCNT1 = 0;
    120a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    120e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1212:	08 95       	ret

00001214 <ultrasonicSensor>:
}

int ultrasonicSensor() {
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    1218:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    121c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER); //Set TRIGGER pin as output
    1220:	aa e0       	ldi	r26, 0x0A	; 10
    1222:	b1 e0       	ldi	r27, 0x01	; 1
    1224:	8c 91       	ld	r24, X
    1226:	82 60       	ori	r24, 0x02	; 2
    1228:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    122a:	eb e0       	ldi	r30, 0x0B	; 11
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	80 81       	ld	r24, Z
    1230:	8d 7f       	andi	r24, 0xFD	; 253
    1232:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1234:	2a e0       	ldi	r18, 0x0A	; 10
    1236:	2a 95       	dec	r18
    1238:	f1 f7       	brne	.-4      	; 0x1236 <ultrasonicSensor+0x22>
    123a:	00 c0       	rjmp	.+0      	; 0x123c <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    123c:	80 81       	ld	r24, Z
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	80 83       	st	Z, r24
    1242:	8a e1       	ldi	r24, 0x1A	; 26
    1244:	8a 95       	dec	r24
    1246:	f1 f7       	brne	.-4      	; 0x1244 <ultrasonicSensor+0x30>
    1248:	00 c0       	rjmp	.+0      	; 0x124a <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    124a:	80 81       	ld	r24, Z
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    1250:	8c 91       	ld	r24, X
    1252:	8d 7f       	andi	r24, 0xFD	; 253
    1254:	8c 93       	st	X, r24
	
	TCNT1 = 0; //Reset value of TCNT1
	
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	dc 01       	movw	r26, r24
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    125c:	e9 e0       	ldi	r30, 0x09	; 9
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	0a c0       	rjmp	.+20     	; 0x1276 <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	a1 1d       	adc	r26, r1
    1266:	b1 1d       	adc	r27, r1
    1268:	81 34       	cpi	r24, 0x41	; 65
    126a:	2c e9       	ldi	r18, 0x9C	; 156
    126c:	92 07       	cpc	r25, r18
    126e:	a1 05       	cpc	r26, r1
    1270:	b1 05       	cpc	r27, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <ultrasonicSensor+0x62>
    1274:	45 c0       	rjmp	.+138    	; 0x1300 <ultrasonicSensor+0xec>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    1276:	20 81       	ld	r18, Z
    1278:	21 fd       	sbrc	r18, 1
    127a:	f3 cf       	rjmp	.-26     	; 0x1262 <ultrasonicSensor+0x4e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    127c:	e9 e0       	ldi	r30, 0x09	; 9
    127e:	f1 e0       	ldi	r31, 0x01	; 1
    1280:	0d c0       	rjmp	.+26     	; 0x129c <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    1282:	ac 01       	movw	r20, r24
    1284:	bd 01       	movw	r22, r26
    1286:	4f 5f       	subi	r20, 0xFF	; 255
    1288:	5f 4f       	sbci	r21, 0xFF	; 255
    128a:	6f 4f       	sbci	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	80 34       	cpi	r24, 0x40	; 64
    1290:	9c 49       	sbci	r25, 0x9C	; 156
    1292:	a1 05       	cpc	r26, r1
    1294:	b1 05       	cpc	r27, r1
    1296:	b9 f1       	breq	.+110    	; 0x1306 <ultrasonicSensor+0xf2>
    1298:	db 01       	movw	r26, r22
    129a:	ca 01       	movw	r24, r20
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    129c:	20 81       	ld	r18, Z
    129e:	21 ff       	sbrs	r18, 1
    12a0:	f0 cf       	rjmp	.-32     	; 0x1282 <ultrasonicSensor+0x6e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
    12a2:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    12a6:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    12aa:	e9 e0       	ldi	r30, 0x09	; 9
    12ac:	f1 e0       	ldi	r31, 0x01	; 1
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    12b0:	ac 01       	movw	r20, r24
    12b2:	bd 01       	movw	r22, r26
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	6f 4f       	sbci	r22, 0xFF	; 255
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	80 34       	cpi	r24, 0x40	; 64
    12be:	9c 49       	sbci	r25, 0x9C	; 156
    12c0:	a1 05       	cpc	r26, r1
    12c2:	b1 05       	cpc	r27, r1
    12c4:	19 f1       	breq	.+70     	; 0x130c <ultrasonicSensor+0xf8>
    12c6:	db 01       	movw	r26, r22
    12c8:	ca 01       	movw	r24, r20
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    12ca:	20 81       	ld	r18, Z
    12cc:	21 fd       	sbrc	r18, 1
    12ce:	f0 cf       	rjmp	.-32     	; 0x12b0 <ultrasonicSensor+0x9c>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    12d0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    12d4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
    12d8:	c9 01       	movw	r24, r18
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	9c 01       	movw	r18, r24
    12e0:	ad 01       	movw	r20, r26
    12e2:	2c 1b       	sub	r18, r28
    12e4:	3d 0b       	sbc	r19, r29
    12e6:	41 09       	sbc	r20, r1
    12e8:	51 09       	sbc	r21, r1
    12ea:	a3 eb       	ldi	r26, 0xB3	; 179
    12ec:	b6 e0       	ldi	r27, 0x06	; 6
    12ee:	91 d3       	rcall	.+1826   	; 0x1a12 <__muluhisi3>
    12f0:	20 e2       	ldi	r18, 0x20	; 32
    12f2:	3e e4       	ldi	r19, 0x4E	; 78
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	62 d3       	rcall	.+1732   	; 0x19be <__udivmodsi4>
    12fa:	c9 01       	movw	r24, r18
    12fc:	05 97       	sbiw	r24, 0x05	; 5
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <ultrasonicSensor+0xfc>
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <ultrasonicSensor+0xfc>
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <ultrasonicSensor+0xfc>
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <__subsf3>:
    1316:	50 58       	subi	r21, 0x80	; 128

00001318 <__addsf3>:
    1318:	bb 27       	eor	r27, r27
    131a:	aa 27       	eor	r26, r26
    131c:	0e d0       	rcall	.+28     	; 0x133a <__addsf3x>
    131e:	e5 c0       	rjmp	.+458    	; 0x14ea <__fp_round>
    1320:	d6 d0       	rcall	.+428    	; 0x14ce <__fp_pscA>
    1322:	30 f0       	brcs	.+12     	; 0x1330 <__addsf3+0x18>
    1324:	db d0       	rcall	.+438    	; 0x14dc <__fp_pscB>
    1326:	20 f0       	brcs	.+8      	; 0x1330 <__addsf3+0x18>
    1328:	31 f4       	brne	.+12     	; 0x1336 <__addsf3+0x1e>
    132a:	9f 3f       	cpi	r25, 0xFF	; 255
    132c:	11 f4       	brne	.+4      	; 0x1332 <__addsf3+0x1a>
    132e:	1e f4       	brtc	.+6      	; 0x1336 <__addsf3+0x1e>
    1330:	cb c0       	rjmp	.+406    	; 0x14c8 <__fp_nan>
    1332:	0e f4       	brtc	.+2      	; 0x1336 <__addsf3+0x1e>
    1334:	e0 95       	com	r30
    1336:	e7 fb       	bst	r30, 7
    1338:	c1 c0       	rjmp	.+386    	; 0x14bc <__fp_inf>

0000133a <__addsf3x>:
    133a:	e9 2f       	mov	r30, r25
    133c:	e7 d0       	rcall	.+462    	; 0x150c <__fp_split3>
    133e:	80 f3       	brcs	.-32     	; 0x1320 <__addsf3+0x8>
    1340:	ba 17       	cp	r27, r26
    1342:	62 07       	cpc	r22, r18
    1344:	73 07       	cpc	r23, r19
    1346:	84 07       	cpc	r24, r20
    1348:	95 07       	cpc	r25, r21
    134a:	18 f0       	brcs	.+6      	; 0x1352 <__addsf3x+0x18>
    134c:	71 f4       	brne	.+28     	; 0x136a <__addsf3x+0x30>
    134e:	9e f5       	brtc	.+102    	; 0x13b6 <__addsf3x+0x7c>
    1350:	ff c0       	rjmp	.+510    	; 0x1550 <__fp_zero>
    1352:	0e f4       	brtc	.+2      	; 0x1356 <__addsf3x+0x1c>
    1354:	e0 95       	com	r30
    1356:	0b 2e       	mov	r0, r27
    1358:	ba 2f       	mov	r27, r26
    135a:	a0 2d       	mov	r26, r0
    135c:	0b 01       	movw	r0, r22
    135e:	b9 01       	movw	r22, r18
    1360:	90 01       	movw	r18, r0
    1362:	0c 01       	movw	r0, r24
    1364:	ca 01       	movw	r24, r20
    1366:	a0 01       	movw	r20, r0
    1368:	11 24       	eor	r1, r1
    136a:	ff 27       	eor	r31, r31
    136c:	59 1b       	sub	r21, r25
    136e:	99 f0       	breq	.+38     	; 0x1396 <__addsf3x+0x5c>
    1370:	59 3f       	cpi	r21, 0xF9	; 249
    1372:	50 f4       	brcc	.+20     	; 0x1388 <__addsf3x+0x4e>
    1374:	50 3e       	cpi	r21, 0xE0	; 224
    1376:	68 f1       	brcs	.+90     	; 0x13d2 <__addsf3x+0x98>
    1378:	1a 16       	cp	r1, r26
    137a:	f0 40       	sbci	r31, 0x00	; 0
    137c:	a2 2f       	mov	r26, r18
    137e:	23 2f       	mov	r18, r19
    1380:	34 2f       	mov	r19, r20
    1382:	44 27       	eor	r20, r20
    1384:	58 5f       	subi	r21, 0xF8	; 248
    1386:	f3 cf       	rjmp	.-26     	; 0x136e <__addsf3x+0x34>
    1388:	46 95       	lsr	r20
    138a:	37 95       	ror	r19
    138c:	27 95       	ror	r18
    138e:	a7 95       	ror	r26
    1390:	f0 40       	sbci	r31, 0x00	; 0
    1392:	53 95       	inc	r21
    1394:	c9 f7       	brne	.-14     	; 0x1388 <__addsf3x+0x4e>
    1396:	7e f4       	brtc	.+30     	; 0x13b6 <__addsf3x+0x7c>
    1398:	1f 16       	cp	r1, r31
    139a:	ba 0b       	sbc	r27, r26
    139c:	62 0b       	sbc	r22, r18
    139e:	73 0b       	sbc	r23, r19
    13a0:	84 0b       	sbc	r24, r20
    13a2:	ba f0       	brmi	.+46     	; 0x13d2 <__addsf3x+0x98>
    13a4:	91 50       	subi	r25, 0x01	; 1
    13a6:	a1 f0       	breq	.+40     	; 0x13d0 <__addsf3x+0x96>
    13a8:	ff 0f       	add	r31, r31
    13aa:	bb 1f       	adc	r27, r27
    13ac:	66 1f       	adc	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	c2 f7       	brpl	.-16     	; 0x13a4 <__addsf3x+0x6a>
    13b4:	0e c0       	rjmp	.+28     	; 0x13d2 <__addsf3x+0x98>
    13b6:	ba 0f       	add	r27, r26
    13b8:	62 1f       	adc	r22, r18
    13ba:	73 1f       	adc	r23, r19
    13bc:	84 1f       	adc	r24, r20
    13be:	48 f4       	brcc	.+18     	; 0x13d2 <__addsf3x+0x98>
    13c0:	87 95       	ror	r24
    13c2:	77 95       	ror	r23
    13c4:	67 95       	ror	r22
    13c6:	b7 95       	ror	r27
    13c8:	f7 95       	ror	r31
    13ca:	9e 3f       	cpi	r25, 0xFE	; 254
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <__addsf3x+0x96>
    13ce:	b3 cf       	rjmp	.-154    	; 0x1336 <__addsf3+0x1e>
    13d0:	93 95       	inc	r25
    13d2:	88 0f       	add	r24, r24
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <__addsf3x+0x9e>
    13d6:	99 27       	eor	r25, r25
    13d8:	ee 0f       	add	r30, r30
    13da:	97 95       	ror	r25
    13dc:	87 95       	ror	r24
    13de:	08 95       	ret

000013e0 <__fixsfsi>:
    13e0:	04 d0       	rcall	.+8      	; 0x13ea <__fixunssfsi>
    13e2:	68 94       	set
    13e4:	b1 11       	cpse	r27, r1
    13e6:	b5 c0       	rjmp	.+362    	; 0x1552 <__fp_szero>
    13e8:	08 95       	ret

000013ea <__fixunssfsi>:
    13ea:	98 d0       	rcall	.+304    	; 0x151c <__fp_splitA>
    13ec:	88 f0       	brcs	.+34     	; 0x1410 <__fixunssfsi+0x26>
    13ee:	9f 57       	subi	r25, 0x7F	; 127
    13f0:	90 f0       	brcs	.+36     	; 0x1416 <__fixunssfsi+0x2c>
    13f2:	b9 2f       	mov	r27, r25
    13f4:	99 27       	eor	r25, r25
    13f6:	b7 51       	subi	r27, 0x17	; 23
    13f8:	a0 f0       	brcs	.+40     	; 0x1422 <__fixunssfsi+0x38>
    13fa:	d1 f0       	breq	.+52     	; 0x1430 <__fixunssfsi+0x46>
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	1a f0       	brmi	.+6      	; 0x140c <__fixunssfsi+0x22>
    1406:	ba 95       	dec	r27
    1408:	c9 f7       	brne	.-14     	; 0x13fc <__fixunssfsi+0x12>
    140a:	12 c0       	rjmp	.+36     	; 0x1430 <__fixunssfsi+0x46>
    140c:	b1 30       	cpi	r27, 0x01	; 1
    140e:	81 f0       	breq	.+32     	; 0x1430 <__fixunssfsi+0x46>
    1410:	9f d0       	rcall	.+318    	; 0x1550 <__fp_zero>
    1412:	b1 e0       	ldi	r27, 0x01	; 1
    1414:	08 95       	ret
    1416:	9c c0       	rjmp	.+312    	; 0x1550 <__fp_zero>
    1418:	67 2f       	mov	r22, r23
    141a:	78 2f       	mov	r23, r24
    141c:	88 27       	eor	r24, r24
    141e:	b8 5f       	subi	r27, 0xF8	; 248
    1420:	39 f0       	breq	.+14     	; 0x1430 <__fixunssfsi+0x46>
    1422:	b9 3f       	cpi	r27, 0xF9	; 249
    1424:	cc f3       	brlt	.-14     	; 0x1418 <__fixunssfsi+0x2e>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	b3 95       	inc	r27
    142e:	d9 f7       	brne	.-10     	; 0x1426 <__fixunssfsi+0x3c>
    1430:	3e f4       	brtc	.+14     	; 0x1440 <__fixunssfsi+0x56>
    1432:	90 95       	com	r25
    1434:	80 95       	com	r24
    1436:	70 95       	com	r23
    1438:	61 95       	neg	r22
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	08 95       	ret

00001442 <__floatunsisf>:
    1442:	e8 94       	clt
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <__floatsisf+0x12>

00001446 <__floatsisf>:
    1446:	97 fb       	bst	r25, 7
    1448:	3e f4       	brtc	.+14     	; 0x1458 <__floatsisf+0x12>
    144a:	90 95       	com	r25
    144c:	80 95       	com	r24
    144e:	70 95       	com	r23
    1450:	61 95       	neg	r22
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	99 23       	and	r25, r25
    145a:	a9 f0       	breq	.+42     	; 0x1486 <__floatsisf+0x40>
    145c:	f9 2f       	mov	r31, r25
    145e:	96 e9       	ldi	r25, 0x96	; 150
    1460:	bb 27       	eor	r27, r27
    1462:	93 95       	inc	r25
    1464:	f6 95       	lsr	r31
    1466:	87 95       	ror	r24
    1468:	77 95       	ror	r23
    146a:	67 95       	ror	r22
    146c:	b7 95       	ror	r27
    146e:	f1 11       	cpse	r31, r1
    1470:	f8 cf       	rjmp	.-16     	; 0x1462 <__floatsisf+0x1c>
    1472:	fa f4       	brpl	.+62     	; 0x14b2 <__floatsisf+0x6c>
    1474:	bb 0f       	add	r27, r27
    1476:	11 f4       	brne	.+4      	; 0x147c <__floatsisf+0x36>
    1478:	60 ff       	sbrs	r22, 0
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <__floatsisf+0x6c>
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <__floatsisf+0x6c>
    1486:	88 23       	and	r24, r24
    1488:	11 f0       	breq	.+4      	; 0x148e <__floatsisf+0x48>
    148a:	96 e9       	ldi	r25, 0x96	; 150
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <__floatsisf+0x6a>
    148e:	77 23       	and	r23, r23
    1490:	21 f0       	breq	.+8      	; 0x149a <__floatsisf+0x54>
    1492:	9e e8       	ldi	r25, 0x8E	; 142
    1494:	87 2f       	mov	r24, r23
    1496:	76 2f       	mov	r23, r22
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <__floatsisf+0x5e>
    149a:	66 23       	and	r22, r22
    149c:	71 f0       	breq	.+28     	; 0x14ba <__floatsisf+0x74>
    149e:	96 e8       	ldi	r25, 0x86	; 134
    14a0:	86 2f       	mov	r24, r22
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	2a f0       	brmi	.+10     	; 0x14b2 <__floatsisf+0x6c>
    14a8:	9a 95       	dec	r25
    14aa:	66 0f       	add	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	da f7       	brpl	.-10     	; 0x14a8 <__floatsisf+0x62>
    14b2:	88 0f       	add	r24, r24
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret

000014bc <__fp_inf>:
    14bc:	97 f9       	bld	r25, 7
    14be:	9f 67       	ori	r25, 0x7F	; 127
    14c0:	80 e8       	ldi	r24, 0x80	; 128
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	08 95       	ret

000014c8 <__fp_nan>:
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	80 ec       	ldi	r24, 0xC0	; 192
    14cc:	08 95       	ret

000014ce <__fp_pscA>:
    14ce:	00 24       	eor	r0, r0
    14d0:	0a 94       	dec	r0
    14d2:	16 16       	cp	r1, r22
    14d4:	17 06       	cpc	r1, r23
    14d6:	18 06       	cpc	r1, r24
    14d8:	09 06       	cpc	r0, r25
    14da:	08 95       	ret

000014dc <__fp_pscB>:
    14dc:	00 24       	eor	r0, r0
    14de:	0a 94       	dec	r0
    14e0:	12 16       	cp	r1, r18
    14e2:	13 06       	cpc	r1, r19
    14e4:	14 06       	cpc	r1, r20
    14e6:	05 06       	cpc	r0, r21
    14e8:	08 95       	ret

000014ea <__fp_round>:
    14ea:	09 2e       	mov	r0, r25
    14ec:	03 94       	inc	r0
    14ee:	00 0c       	add	r0, r0
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <__fp_round+0xc>
    14f2:	88 23       	and	r24, r24
    14f4:	52 f0       	brmi	.+20     	; 0x150a <__fp_round+0x20>
    14f6:	bb 0f       	add	r27, r27
    14f8:	40 f4       	brcc	.+16     	; 0x150a <__fp_round+0x20>
    14fa:	bf 2b       	or	r27, r31
    14fc:	11 f4       	brne	.+4      	; 0x1502 <__fp_round+0x18>
    14fe:	60 ff       	sbrs	r22, 0
    1500:	04 c0       	rjmp	.+8      	; 0x150a <__fp_round+0x20>
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	08 95       	ret

0000150c <__fp_split3>:
    150c:	57 fd       	sbrc	r21, 7
    150e:	90 58       	subi	r25, 0x80	; 128
    1510:	44 0f       	add	r20, r20
    1512:	55 1f       	adc	r21, r21
    1514:	59 f0       	breq	.+22     	; 0x152c <__fp_splitA+0x10>
    1516:	5f 3f       	cpi	r21, 0xFF	; 255
    1518:	71 f0       	breq	.+28     	; 0x1536 <__fp_splitA+0x1a>
    151a:	47 95       	ror	r20

0000151c <__fp_splitA>:
    151c:	88 0f       	add	r24, r24
    151e:	97 fb       	bst	r25, 7
    1520:	99 1f       	adc	r25, r25
    1522:	61 f0       	breq	.+24     	; 0x153c <__fp_splitA+0x20>
    1524:	9f 3f       	cpi	r25, 0xFF	; 255
    1526:	79 f0       	breq	.+30     	; 0x1546 <__fp_splitA+0x2a>
    1528:	87 95       	ror	r24
    152a:	08 95       	ret
    152c:	12 16       	cp	r1, r18
    152e:	13 06       	cpc	r1, r19
    1530:	14 06       	cpc	r1, r20
    1532:	55 1f       	adc	r21, r21
    1534:	f2 cf       	rjmp	.-28     	; 0x151a <__fp_split3+0xe>
    1536:	46 95       	lsr	r20
    1538:	f1 df       	rcall	.-30     	; 0x151c <__fp_splitA>
    153a:	08 c0       	rjmp	.+16     	; 0x154c <__fp_splitA+0x30>
    153c:	16 16       	cp	r1, r22
    153e:	17 06       	cpc	r1, r23
    1540:	18 06       	cpc	r1, r24
    1542:	99 1f       	adc	r25, r25
    1544:	f1 cf       	rjmp	.-30     	; 0x1528 <__fp_splitA+0xc>
    1546:	86 95       	lsr	r24
    1548:	71 05       	cpc	r23, r1
    154a:	61 05       	cpc	r22, r1
    154c:	08 94       	sec
    154e:	08 95       	ret

00001550 <__fp_zero>:
    1550:	e8 94       	clt

00001552 <__fp_szero>:
    1552:	bb 27       	eor	r27, r27
    1554:	66 27       	eor	r22, r22
    1556:	77 27       	eor	r23, r23
    1558:	cb 01       	movw	r24, r22
    155a:	97 f9       	bld	r25, 7
    155c:	08 95       	ret

0000155e <pow>:
    155e:	fa 01       	movw	r30, r20
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	30 96       	adiw	r30, 0x00	; 0
    1566:	21 05       	cpc	r18, r1
    1568:	31 05       	cpc	r19, r1
    156a:	99 f1       	breq	.+102    	; 0x15d2 <pow+0x74>
    156c:	61 15       	cp	r22, r1
    156e:	71 05       	cpc	r23, r1
    1570:	61 f4       	brne	.+24     	; 0x158a <pow+0x2c>
    1572:	80 38       	cpi	r24, 0x80	; 128
    1574:	bf e3       	ldi	r27, 0x3F	; 63
    1576:	9b 07       	cpc	r25, r27
    1578:	49 f1       	breq	.+82     	; 0x15cc <pow+0x6e>
    157a:	68 94       	set
    157c:	90 38       	cpi	r25, 0x80	; 128
    157e:	81 05       	cpc	r24, r1
    1580:	61 f0       	breq	.+24     	; 0x159a <pow+0x3c>
    1582:	80 38       	cpi	r24, 0x80	; 128
    1584:	bf ef       	ldi	r27, 0xFF	; 255
    1586:	9b 07       	cpc	r25, r27
    1588:	41 f0       	breq	.+16     	; 0x159a <pow+0x3c>
    158a:	99 23       	and	r25, r25
    158c:	42 f5       	brpl	.+80     	; 0x15de <pow+0x80>
    158e:	ff 3f       	cpi	r31, 0xFF	; 255
    1590:	e1 05       	cpc	r30, r1
    1592:	31 05       	cpc	r19, r1
    1594:	21 05       	cpc	r18, r1
    1596:	11 f1       	breq	.+68     	; 0x15dc <pow+0x7e>
    1598:	e8 94       	clt
    159a:	08 94       	sec
    159c:	e7 95       	ror	r30
    159e:	d9 01       	movw	r26, r18
    15a0:	aa 23       	and	r26, r26
    15a2:	29 f4       	brne	.+10     	; 0x15ae <pow+0x50>
    15a4:	ab 2f       	mov	r26, r27
    15a6:	be 2f       	mov	r27, r30
    15a8:	f8 5f       	subi	r31, 0xF8	; 248
    15aa:	d0 f3       	brcs	.-12     	; 0x15a0 <pow+0x42>
    15ac:	10 c0       	rjmp	.+32     	; 0x15ce <pow+0x70>
    15ae:	ff 5f       	subi	r31, 0xFF	; 255
    15b0:	70 f4       	brcc	.+28     	; 0x15ce <pow+0x70>
    15b2:	a6 95       	lsr	r26
    15b4:	e0 f7       	brcc	.-8      	; 0x15ae <pow+0x50>
    15b6:	f7 39       	cpi	r31, 0x97	; 151
    15b8:	50 f0       	brcs	.+20     	; 0x15ce <pow+0x70>
    15ba:	19 f0       	breq	.+6      	; 0x15c2 <pow+0x64>
    15bc:	ff 3a       	cpi	r31, 0xAF	; 175
    15be:	38 f4       	brcc	.+14     	; 0x15ce <pow+0x70>
    15c0:	9f 77       	andi	r25, 0x7F	; 127
    15c2:	9f 93       	push	r25
    15c4:	0c d0       	rcall	.+24     	; 0x15de <pow+0x80>
    15c6:	0f 90       	pop	r0
    15c8:	07 fc       	sbrc	r0, 7
    15ca:	90 58       	subi	r25, 0x80	; 128
    15cc:	08 95       	ret
    15ce:	3e f0       	brts	.+14     	; 0x15de <pow+0x80>
    15d0:	7b cf       	rjmp	.-266    	; 0x14c8 <__fp_nan>
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	9f e3       	ldi	r25, 0x3F	; 63
    15da:	08 95       	ret
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	9f 77       	andi	r25, 0x7F	; 127
    15e0:	5f 93       	push	r21
    15e2:	4f 93       	push	r20
    15e4:	3f 93       	push	r19
    15e6:	2f 93       	push	r18
    15e8:	9e d0       	rcall	.+316    	; 0x1726 <log>
    15ea:	2f 91       	pop	r18
    15ec:	3f 91       	pop	r19
    15ee:	4f 91       	pop	r20
    15f0:	5f 91       	pop	r21
    15f2:	0c d1       	rcall	.+536    	; 0x180c <__mulsf3>
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <exp>
    15f6:	19 f4       	brne	.+6      	; 0x15fe <pow+0xa0>
    15f8:	0e f0       	brts	.+2      	; 0x15fc <pow+0x9e>
    15fa:	60 cf       	rjmp	.-320    	; 0x14bc <__fp_inf>
    15fc:	a9 cf       	rjmp	.-174    	; 0x1550 <__fp_zero>
    15fe:	64 cf       	rjmp	.-312    	; 0x14c8 <__fp_nan>

00001600 <exp>:
    1600:	8d df       	rcall	.-230    	; 0x151c <__fp_splitA>
    1602:	c8 f3       	brcs	.-14     	; 0x15f6 <pow+0x98>
    1604:	96 38       	cpi	r25, 0x86	; 134
    1606:	c0 f7       	brcc	.-16     	; 0x15f8 <pow+0x9a>
    1608:	07 f8       	bld	r0, 7
    160a:	0f 92       	push	r0
    160c:	e8 94       	clt
    160e:	2b e3       	ldi	r18, 0x3B	; 59
    1610:	3a ea       	ldi	r19, 0xAA	; 170
    1612:	48 eb       	ldi	r20, 0xB8	; 184
    1614:	5f e7       	ldi	r21, 0x7F	; 127
    1616:	08 d1       	rcall	.+528    	; 0x1828 <__mulsf3_pse>
    1618:	0f 92       	push	r0
    161a:	0f 92       	push	r0
    161c:	0f 92       	push	r0
    161e:	4d b7       	in	r20, 0x3d	; 61
    1620:	5e b7       	in	r21, 0x3e	; 62
    1622:	0f 92       	push	r0
    1624:	c0 d0       	rcall	.+384    	; 0x17a6 <modf>
    1626:	e8 e1       	ldi	r30, 0x18	; 24
    1628:	f1 e0       	ldi	r31, 0x01	; 1
    162a:	16 d0       	rcall	.+44     	; 0x1658 <__fp_powser>
    162c:	4f 91       	pop	r20
    162e:	5f 91       	pop	r21
    1630:	ef 91       	pop	r30
    1632:	ff 91       	pop	r31
    1634:	e5 95       	asr	r30
    1636:	ee 1f       	adc	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	49 f0       	breq	.+18     	; 0x164e <exp+0x4e>
    163c:	fe 57       	subi	r31, 0x7E	; 126
    163e:	e0 68       	ori	r30, 0x80	; 128
    1640:	44 27       	eor	r20, r20
    1642:	ee 0f       	add	r30, r30
    1644:	44 1f       	adc	r20, r20
    1646:	fa 95       	dec	r31
    1648:	e1 f7       	brne	.-8      	; 0x1642 <exp+0x42>
    164a:	41 95       	neg	r20
    164c:	55 0b       	sbc	r21, r21
    164e:	32 d0       	rcall	.+100    	; 0x16b4 <ldexp>
    1650:	0f 90       	pop	r0
    1652:	07 fe       	sbrs	r0, 7
    1654:	26 c0       	rjmp	.+76     	; 0x16a2 <inverse>
    1656:	08 95       	ret

00001658 <__fp_powser>:
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	1f 93       	push	r17
    165e:	0f 93       	push	r16
    1660:	ff 92       	push	r15
    1662:	ef 92       	push	r14
    1664:	df 92       	push	r13
    1666:	7b 01       	movw	r14, r22
    1668:	8c 01       	movw	r16, r24
    166a:	68 94       	set
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <__fp_powser+0x20>
    166e:	da 2e       	mov	r13, r26
    1670:	ef 01       	movw	r28, r30
    1672:	d8 d0       	rcall	.+432    	; 0x1824 <__mulsf3x>
    1674:	fe 01       	movw	r30, r28
    1676:	e8 94       	clt
    1678:	a5 91       	lpm	r26, Z+
    167a:	25 91       	lpm	r18, Z+
    167c:	35 91       	lpm	r19, Z+
    167e:	45 91       	lpm	r20, Z+
    1680:	55 91       	lpm	r21, Z+
    1682:	ae f3       	brts	.-22     	; 0x166e <__fp_powser+0x16>
    1684:	ef 01       	movw	r28, r30
    1686:	59 de       	rcall	.-846    	; 0x133a <__addsf3x>
    1688:	fe 01       	movw	r30, r28
    168a:	97 01       	movw	r18, r14
    168c:	a8 01       	movw	r20, r16
    168e:	da 94       	dec	r13
    1690:	79 f7       	brne	.-34     	; 0x1670 <__fp_powser+0x18>
    1692:	df 90       	pop	r13
    1694:	ef 90       	pop	r14
    1696:	ff 90       	pop	r15
    1698:	0f 91       	pop	r16
    169a:	1f 91       	pop	r17
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <inverse>:
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	9f e3       	ldi	r25, 0x3F	; 63
    16ae:	11 c1       	rjmp	.+546    	; 0x18d2 <__divsf3>
    16b0:	05 cf       	rjmp	.-502    	; 0x14bc <__fp_inf>
    16b2:	77 c1       	rjmp	.+750    	; 0x19a2 <__fp_mpack>

000016b4 <ldexp>:
    16b4:	33 df       	rcall	.-410    	; 0x151c <__fp_splitA>
    16b6:	e8 f3       	brcs	.-6      	; 0x16b2 <inverse+0x10>
    16b8:	99 23       	and	r25, r25
    16ba:	d9 f3       	breq	.-10     	; 0x16b2 <inverse+0x10>
    16bc:	94 0f       	add	r25, r20
    16be:	51 1d       	adc	r21, r1
    16c0:	bb f3       	brvs	.-18     	; 0x16b0 <inverse+0xe>
    16c2:	91 50       	subi	r25, 0x01	; 1
    16c4:	50 40       	sbci	r21, 0x00	; 0
    16c6:	94 f0       	brlt	.+36     	; 0x16ec <ldexp+0x38>
    16c8:	59 f0       	breq	.+22     	; 0x16e0 <ldexp+0x2c>
    16ca:	88 23       	and	r24, r24
    16cc:	32 f0       	brmi	.+12     	; 0x16da <ldexp+0x26>
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	91 50       	subi	r25, 0x01	; 1
    16d6:	50 40       	sbci	r21, 0x00	; 0
    16d8:	c1 f7       	brne	.-16     	; 0x16ca <ldexp+0x16>
    16da:	9e 3f       	cpi	r25, 0xFE	; 254
    16dc:	51 05       	cpc	r21, r1
    16de:	44 f7       	brge	.-48     	; 0x16b0 <inverse+0xe>
    16e0:	88 0f       	add	r24, r24
    16e2:	91 1d       	adc	r25, r1
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	97 f9       	bld	r25, 7
    16ea:	08 95       	ret
    16ec:	5f 3f       	cpi	r21, 0xFF	; 255
    16ee:	ac f0       	brlt	.+42     	; 0x171a <ldexp+0x66>
    16f0:	98 3e       	cpi	r25, 0xE8	; 232
    16f2:	9c f0       	brlt	.+38     	; 0x171a <ldexp+0x66>
    16f4:	bb 27       	eor	r27, r27
    16f6:	86 95       	lsr	r24
    16f8:	77 95       	ror	r23
    16fa:	67 95       	ror	r22
    16fc:	b7 95       	ror	r27
    16fe:	08 f4       	brcc	.+2      	; 0x1702 <ldexp+0x4e>
    1700:	b1 60       	ori	r27, 0x01	; 1
    1702:	93 95       	inc	r25
    1704:	c1 f7       	brne	.-16     	; 0x16f6 <ldexp+0x42>
    1706:	bb 0f       	add	r27, r27
    1708:	58 f7       	brcc	.-42     	; 0x16e0 <ldexp+0x2c>
    170a:	11 f4       	brne	.+4      	; 0x1710 <ldexp+0x5c>
    170c:	60 ff       	sbrs	r22, 0
    170e:	e8 cf       	rjmp	.-48     	; 0x16e0 <ldexp+0x2c>
    1710:	6f 5f       	subi	r22, 0xFF	; 255
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	8f 4f       	sbci	r24, 0xFF	; 255
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	e3 cf       	rjmp	.-58     	; 0x16e0 <ldexp+0x2c>
    171a:	1b cf       	rjmp	.-458    	; 0x1552 <__fp_szero>
    171c:	0e f0       	brts	.+2      	; 0x1720 <ldexp+0x6c>
    171e:	41 c1       	rjmp	.+642    	; 0x19a2 <__fp_mpack>
    1720:	d3 ce       	rjmp	.-602    	; 0x14c8 <__fp_nan>
    1722:	68 94       	set
    1724:	cb ce       	rjmp	.-618    	; 0x14bc <__fp_inf>

00001726 <log>:
    1726:	fa de       	rcall	.-524    	; 0x151c <__fp_splitA>
    1728:	c8 f3       	brcs	.-14     	; 0x171c <ldexp+0x68>
    172a:	99 23       	and	r25, r25
    172c:	d1 f3       	breq	.-12     	; 0x1722 <ldexp+0x6e>
    172e:	c6 f3       	brts	.-16     	; 0x1720 <ldexp+0x6c>
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	1f 93       	push	r17
    1736:	0f 93       	push	r16
    1738:	ff 92       	push	r15
    173a:	c9 2f       	mov	r28, r25
    173c:	dd 27       	eor	r29, r29
    173e:	88 23       	and	r24, r24
    1740:	2a f0       	brmi	.+10     	; 0x174c <log+0x26>
    1742:	21 97       	sbiw	r28, 0x01	; 1
    1744:	66 0f       	add	r22, r22
    1746:	77 1f       	adc	r23, r23
    1748:	88 1f       	adc	r24, r24
    174a:	da f7       	brpl	.-10     	; 0x1742 <log+0x1c>
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f eb       	ldi	r21, 0xBF	; 191
    1754:	9f e3       	ldi	r25, 0x3F	; 63
    1756:	88 39       	cpi	r24, 0x98	; 152
    1758:	20 f0       	brcs	.+8      	; 0x1762 <log+0x3c>
    175a:	80 3e       	cpi	r24, 0xE0	; 224
    175c:	30 f0       	brcs	.+12     	; 0x176a <log+0x44>
    175e:	21 96       	adiw	r28, 0x01	; 1
    1760:	8f 77       	andi	r24, 0x7F	; 127
    1762:	da dd       	rcall	.-1100   	; 0x1318 <__addsf3>
    1764:	e0 e4       	ldi	r30, 0x40	; 64
    1766:	f1 e0       	ldi	r31, 0x01	; 1
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <log+0x4a>
    176a:	d6 dd       	rcall	.-1108   	; 0x1318 <__addsf3>
    176c:	ed e6       	ldi	r30, 0x6D	; 109
    176e:	f1 e0       	ldi	r31, 0x01	; 1
    1770:	73 df       	rcall	.-282    	; 0x1658 <__fp_powser>
    1772:	8b 01       	movw	r16, r22
    1774:	be 01       	movw	r22, r28
    1776:	ec 01       	movw	r28, r24
    1778:	fb 2e       	mov	r15, r27
    177a:	6f 57       	subi	r22, 0x7F	; 127
    177c:	71 09       	sbc	r23, r1
    177e:	75 95       	asr	r23
    1780:	77 1f       	adc	r23, r23
    1782:	88 0b       	sbc	r24, r24
    1784:	99 0b       	sbc	r25, r25
    1786:	5f de       	rcall	.-834    	; 0x1446 <__floatsisf>
    1788:	28 e1       	ldi	r18, 0x18	; 24
    178a:	32 e7       	ldi	r19, 0x72	; 114
    178c:	41 e3       	ldi	r20, 0x31	; 49
    178e:	5f e3       	ldi	r21, 0x3F	; 63
    1790:	49 d0       	rcall	.+146    	; 0x1824 <__mulsf3x>
    1792:	af 2d       	mov	r26, r15
    1794:	98 01       	movw	r18, r16
    1796:	ae 01       	movw	r20, r28
    1798:	ff 90       	pop	r15
    179a:	0f 91       	pop	r16
    179c:	1f 91       	pop	r17
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	cb dd       	rcall	.-1130   	; 0x133a <__addsf3x>
    17a4:	a2 ce       	rjmp	.-700    	; 0x14ea <__fp_round>

000017a6 <modf>:
    17a6:	fa 01       	movw	r30, r20
    17a8:	dc 01       	movw	r26, r24
    17aa:	aa 0f       	add	r26, r26
    17ac:	bb 1f       	adc	r27, r27
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	bf 57       	subi	r27, 0x7F	; 127
    17b4:	28 f4       	brcc	.+10     	; 0x17c0 <modf+0x1a>
    17b6:	22 27       	eor	r18, r18
    17b8:	33 27       	eor	r19, r19
    17ba:	44 27       	eor	r20, r20
    17bc:	50 78       	andi	r21, 0x80	; 128
    17be:	1f c0       	rjmp	.+62     	; 0x17fe <modf+0x58>
    17c0:	b7 51       	subi	r27, 0x17	; 23
    17c2:	88 f4       	brcc	.+34     	; 0x17e6 <modf+0x40>
    17c4:	ab 2f       	mov	r26, r27
    17c6:	00 24       	eor	r0, r0
    17c8:	46 95       	lsr	r20
    17ca:	37 95       	ror	r19
    17cc:	27 95       	ror	r18
    17ce:	01 1c       	adc	r0, r1
    17d0:	a3 95       	inc	r26
    17d2:	d2 f3       	brmi	.-12     	; 0x17c8 <modf+0x22>
    17d4:	00 20       	and	r0, r0
    17d6:	69 f0       	breq	.+26     	; 0x17f2 <modf+0x4c>
    17d8:	22 0f       	add	r18, r18
    17da:	33 1f       	adc	r19, r19
    17dc:	44 1f       	adc	r20, r20
    17de:	b3 95       	inc	r27
    17e0:	da f3       	brmi	.-10     	; 0x17d8 <modf+0x32>
    17e2:	0d d0       	rcall	.+26     	; 0x17fe <modf+0x58>
    17e4:	98 cd       	rjmp	.-1232   	; 0x1316 <__subsf3>
    17e6:	61 30       	cpi	r22, 0x01	; 1
    17e8:	71 05       	cpc	r23, r1
    17ea:	a0 e8       	ldi	r26, 0x80	; 128
    17ec:	8a 07       	cpc	r24, r26
    17ee:	b9 46       	sbci	r27, 0x69	; 105
    17f0:	30 f4       	brcc	.+12     	; 0x17fe <modf+0x58>
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	66 27       	eor	r22, r22
    17f8:	77 27       	eor	r23, r23
    17fa:	88 27       	eor	r24, r24
    17fc:	90 78       	andi	r25, 0x80	; 128
    17fe:	30 96       	adiw	r30, 0x00	; 0
    1800:	21 f0       	breq	.+8      	; 0x180a <modf+0x64>
    1802:	20 83       	st	Z, r18
    1804:	31 83       	std	Z+1, r19	; 0x01
    1806:	42 83       	std	Z+2, r20	; 0x02
    1808:	53 83       	std	Z+3, r21	; 0x03
    180a:	08 95       	ret

0000180c <__mulsf3>:
    180c:	0b d0       	rcall	.+22     	; 0x1824 <__mulsf3x>
    180e:	6d ce       	rjmp	.-806    	; 0x14ea <__fp_round>
    1810:	5e de       	rcall	.-836    	; 0x14ce <__fp_pscA>
    1812:	28 f0       	brcs	.+10     	; 0x181e <__mulsf3+0x12>
    1814:	63 de       	rcall	.-826    	; 0x14dc <__fp_pscB>
    1816:	18 f0       	brcs	.+6      	; 0x181e <__mulsf3+0x12>
    1818:	95 23       	and	r25, r21
    181a:	09 f0       	breq	.+2      	; 0x181e <__mulsf3+0x12>
    181c:	4f ce       	rjmp	.-866    	; 0x14bc <__fp_inf>
    181e:	54 ce       	rjmp	.-856    	; 0x14c8 <__fp_nan>
    1820:	11 24       	eor	r1, r1
    1822:	97 ce       	rjmp	.-722    	; 0x1552 <__fp_szero>

00001824 <__mulsf3x>:
    1824:	73 de       	rcall	.-794    	; 0x150c <__fp_split3>
    1826:	a0 f3       	brcs	.-24     	; 0x1810 <__mulsf3+0x4>

00001828 <__mulsf3_pse>:
    1828:	95 9f       	mul	r25, r21
    182a:	d1 f3       	breq	.-12     	; 0x1820 <__mulsf3+0x14>
    182c:	95 0f       	add	r25, r21
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	55 1f       	adc	r21, r21
    1832:	62 9f       	mul	r22, r18
    1834:	f0 01       	movw	r30, r0
    1836:	72 9f       	mul	r23, r18
    1838:	bb 27       	eor	r27, r27
    183a:	f0 0d       	add	r31, r0
    183c:	b1 1d       	adc	r27, r1
    183e:	63 9f       	mul	r22, r19
    1840:	aa 27       	eor	r26, r26
    1842:	f0 0d       	add	r31, r0
    1844:	b1 1d       	adc	r27, r1
    1846:	aa 1f       	adc	r26, r26
    1848:	64 9f       	mul	r22, r20
    184a:	66 27       	eor	r22, r22
    184c:	b0 0d       	add	r27, r0
    184e:	a1 1d       	adc	r26, r1
    1850:	66 1f       	adc	r22, r22
    1852:	82 9f       	mul	r24, r18
    1854:	22 27       	eor	r18, r18
    1856:	b0 0d       	add	r27, r0
    1858:	a1 1d       	adc	r26, r1
    185a:	62 1f       	adc	r22, r18
    185c:	73 9f       	mul	r23, r19
    185e:	b0 0d       	add	r27, r0
    1860:	a1 1d       	adc	r26, r1
    1862:	62 1f       	adc	r22, r18
    1864:	83 9f       	mul	r24, r19
    1866:	a0 0d       	add	r26, r0
    1868:	61 1d       	adc	r22, r1
    186a:	22 1f       	adc	r18, r18
    186c:	74 9f       	mul	r23, r20
    186e:	33 27       	eor	r19, r19
    1870:	a0 0d       	add	r26, r0
    1872:	61 1d       	adc	r22, r1
    1874:	23 1f       	adc	r18, r19
    1876:	84 9f       	mul	r24, r20
    1878:	60 0d       	add	r22, r0
    187a:	21 1d       	adc	r18, r1
    187c:	82 2f       	mov	r24, r18
    187e:	76 2f       	mov	r23, r22
    1880:	6a 2f       	mov	r22, r26
    1882:	11 24       	eor	r1, r1
    1884:	9f 57       	subi	r25, 0x7F	; 127
    1886:	50 40       	sbci	r21, 0x00	; 0
    1888:	8a f0       	brmi	.+34     	; 0x18ac <__mulsf3_pse+0x84>
    188a:	e1 f0       	breq	.+56     	; 0x18c4 <__mulsf3_pse+0x9c>
    188c:	88 23       	and	r24, r24
    188e:	4a f0       	brmi	.+18     	; 0x18a2 <__mulsf3_pse+0x7a>
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	bb 1f       	adc	r27, r27
    1896:	66 1f       	adc	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	91 50       	subi	r25, 0x01	; 1
    189e:	50 40       	sbci	r21, 0x00	; 0
    18a0:	a9 f7       	brne	.-22     	; 0x188c <__mulsf3_pse+0x64>
    18a2:	9e 3f       	cpi	r25, 0xFE	; 254
    18a4:	51 05       	cpc	r21, r1
    18a6:	70 f0       	brcs	.+28     	; 0x18c4 <__mulsf3_pse+0x9c>
    18a8:	09 ce       	rjmp	.-1006   	; 0x14bc <__fp_inf>
    18aa:	53 ce       	rjmp	.-858    	; 0x1552 <__fp_szero>
    18ac:	5f 3f       	cpi	r21, 0xFF	; 255
    18ae:	ec f3       	brlt	.-6      	; 0x18aa <__mulsf3_pse+0x82>
    18b0:	98 3e       	cpi	r25, 0xE8	; 232
    18b2:	dc f3       	brlt	.-10     	; 0x18aa <__mulsf3_pse+0x82>
    18b4:	86 95       	lsr	r24
    18b6:	77 95       	ror	r23
    18b8:	67 95       	ror	r22
    18ba:	b7 95       	ror	r27
    18bc:	f7 95       	ror	r31
    18be:	e7 95       	ror	r30
    18c0:	9f 5f       	subi	r25, 0xFF	; 255
    18c2:	c1 f7       	brne	.-16     	; 0x18b4 <__mulsf3_pse+0x8c>
    18c4:	fe 2b       	or	r31, r30
    18c6:	88 0f       	add	r24, r24
    18c8:	91 1d       	adc	r25, r1
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	97 f9       	bld	r25, 7
    18d0:	08 95       	ret

000018d2 <__divsf3>:
    18d2:	0c d0       	rcall	.+24     	; 0x18ec <__divsf3x>
    18d4:	0a ce       	rjmp	.-1004   	; 0x14ea <__fp_round>
    18d6:	02 de       	rcall	.-1020   	; 0x14dc <__fp_pscB>
    18d8:	40 f0       	brcs	.+16     	; 0x18ea <__divsf3+0x18>
    18da:	f9 dd       	rcall	.-1038   	; 0x14ce <__fp_pscA>
    18dc:	30 f0       	brcs	.+12     	; 0x18ea <__divsf3+0x18>
    18de:	21 f4       	brne	.+8      	; 0x18e8 <__divsf3+0x16>
    18e0:	5f 3f       	cpi	r21, 0xFF	; 255
    18e2:	19 f0       	breq	.+6      	; 0x18ea <__divsf3+0x18>
    18e4:	eb cd       	rjmp	.-1066   	; 0x14bc <__fp_inf>
    18e6:	51 11       	cpse	r21, r1
    18e8:	34 ce       	rjmp	.-920    	; 0x1552 <__fp_szero>
    18ea:	ee cd       	rjmp	.-1060   	; 0x14c8 <__fp_nan>

000018ec <__divsf3x>:
    18ec:	0f de       	rcall	.-994    	; 0x150c <__fp_split3>
    18ee:	98 f3       	brcs	.-26     	; 0x18d6 <__divsf3+0x4>

000018f0 <__divsf3_pse>:
    18f0:	99 23       	and	r25, r25
    18f2:	c9 f3       	breq	.-14     	; 0x18e6 <__divsf3+0x14>
    18f4:	55 23       	and	r21, r21
    18f6:	b1 f3       	breq	.-20     	; 0x18e4 <__divsf3+0x12>
    18f8:	95 1b       	sub	r25, r21
    18fa:	55 0b       	sbc	r21, r21
    18fc:	bb 27       	eor	r27, r27
    18fe:	aa 27       	eor	r26, r26
    1900:	62 17       	cp	r22, r18
    1902:	73 07       	cpc	r23, r19
    1904:	84 07       	cpc	r24, r20
    1906:	38 f0       	brcs	.+14     	; 0x1916 <__divsf3_pse+0x26>
    1908:	9f 5f       	subi	r25, 0xFF	; 255
    190a:	5f 4f       	sbci	r21, 0xFF	; 255
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	44 1f       	adc	r20, r20
    1912:	aa 1f       	adc	r26, r26
    1914:	a9 f3       	breq	.-22     	; 0x1900 <__divsf3_pse+0x10>
    1916:	33 d0       	rcall	.+102    	; 0x197e <__divsf3_pse+0x8e>
    1918:	0e 2e       	mov	r0, r30
    191a:	3a f0       	brmi	.+14     	; 0x192a <__divsf3_pse+0x3a>
    191c:	e0 e8       	ldi	r30, 0x80	; 128
    191e:	30 d0       	rcall	.+96     	; 0x1980 <__divsf3_pse+0x90>
    1920:	91 50       	subi	r25, 0x01	; 1
    1922:	50 40       	sbci	r21, 0x00	; 0
    1924:	e6 95       	lsr	r30
    1926:	00 1c       	adc	r0, r0
    1928:	ca f7       	brpl	.-14     	; 0x191c <__divsf3_pse+0x2c>
    192a:	29 d0       	rcall	.+82     	; 0x197e <__divsf3_pse+0x8e>
    192c:	fe 2f       	mov	r31, r30
    192e:	27 d0       	rcall	.+78     	; 0x197e <__divsf3_pse+0x8e>
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	bb 1f       	adc	r27, r27
    1938:	26 17       	cp	r18, r22
    193a:	37 07       	cpc	r19, r23
    193c:	48 07       	cpc	r20, r24
    193e:	ab 07       	cpc	r26, r27
    1940:	b0 e8       	ldi	r27, 0x80	; 128
    1942:	09 f0       	breq	.+2      	; 0x1946 <__divsf3_pse+0x56>
    1944:	bb 0b       	sbc	r27, r27
    1946:	80 2d       	mov	r24, r0
    1948:	bf 01       	movw	r22, r30
    194a:	ff 27       	eor	r31, r31
    194c:	93 58       	subi	r25, 0x83	; 131
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	2a f0       	brmi	.+10     	; 0x195c <__divsf3_pse+0x6c>
    1952:	9e 3f       	cpi	r25, 0xFE	; 254
    1954:	51 05       	cpc	r21, r1
    1956:	68 f0       	brcs	.+26     	; 0x1972 <__divsf3_pse+0x82>
    1958:	b1 cd       	rjmp	.-1182   	; 0x14bc <__fp_inf>
    195a:	fb cd       	rjmp	.-1034   	; 0x1552 <__fp_szero>
    195c:	5f 3f       	cpi	r21, 0xFF	; 255
    195e:	ec f3       	brlt	.-6      	; 0x195a <__divsf3_pse+0x6a>
    1960:	98 3e       	cpi	r25, 0xE8	; 232
    1962:	dc f3       	brlt	.-10     	; 0x195a <__divsf3_pse+0x6a>
    1964:	86 95       	lsr	r24
    1966:	77 95       	ror	r23
    1968:	67 95       	ror	r22
    196a:	b7 95       	ror	r27
    196c:	f7 95       	ror	r31
    196e:	9f 5f       	subi	r25, 0xFF	; 255
    1970:	c9 f7       	brne	.-14     	; 0x1964 <__divsf3_pse+0x74>
    1972:	88 0f       	add	r24, r24
    1974:	91 1d       	adc	r25, r1
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	97 f9       	bld	r25, 7
    197c:	08 95       	ret
    197e:	e1 e0       	ldi	r30, 0x01	; 1
    1980:	66 0f       	add	r22, r22
    1982:	77 1f       	adc	r23, r23
    1984:	88 1f       	adc	r24, r24
    1986:	bb 1f       	adc	r27, r27
    1988:	62 17       	cp	r22, r18
    198a:	73 07       	cpc	r23, r19
    198c:	84 07       	cpc	r24, r20
    198e:	ba 07       	cpc	r27, r26
    1990:	20 f0       	brcs	.+8      	; 0x199a <__divsf3_pse+0xaa>
    1992:	62 1b       	sub	r22, r18
    1994:	73 0b       	sbc	r23, r19
    1996:	84 0b       	sbc	r24, r20
    1998:	ba 0b       	sbc	r27, r26
    199a:	ee 1f       	adc	r30, r30
    199c:	88 f7       	brcc	.-30     	; 0x1980 <__divsf3_pse+0x90>
    199e:	e0 95       	com	r30
    19a0:	08 95       	ret

000019a2 <__fp_mpack>:
    19a2:	9f 3f       	cpi	r25, 0xFF	; 255
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <__fp_mpack_finite+0xc>

000019a6 <__fp_mpack_finite>:
    19a6:	91 50       	subi	r25, 0x01	; 1
    19a8:	20 f4       	brcc	.+8      	; 0x19b2 <__fp_mpack_finite+0xc>
    19aa:	87 95       	ror	r24
    19ac:	77 95       	ror	r23
    19ae:	67 95       	ror	r22
    19b0:	b7 95       	ror	r27
    19b2:	88 0f       	add	r24, r24
    19b4:	91 1d       	adc	r25, r1
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	97 f9       	bld	r25, 7
    19bc:	08 95       	ret

000019be <__udivmodsi4>:
    19be:	a1 e2       	ldi	r26, 0x21	; 33
    19c0:	1a 2e       	mov	r1, r26
    19c2:	aa 1b       	sub	r26, r26
    19c4:	bb 1b       	sub	r27, r27
    19c6:	fd 01       	movw	r30, r26
    19c8:	0d c0       	rjmp	.+26     	; 0x19e4 <__udivmodsi4_ep>

000019ca <__udivmodsi4_loop>:
    19ca:	aa 1f       	adc	r26, r26
    19cc:	bb 1f       	adc	r27, r27
    19ce:	ee 1f       	adc	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	a2 17       	cp	r26, r18
    19d4:	b3 07       	cpc	r27, r19
    19d6:	e4 07       	cpc	r30, r20
    19d8:	f5 07       	cpc	r31, r21
    19da:	20 f0       	brcs	.+8      	; 0x19e4 <__udivmodsi4_ep>
    19dc:	a2 1b       	sub	r26, r18
    19de:	b3 0b       	sbc	r27, r19
    19e0:	e4 0b       	sbc	r30, r20
    19e2:	f5 0b       	sbc	r31, r21

000019e4 <__udivmodsi4_ep>:
    19e4:	66 1f       	adc	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	1a 94       	dec	r1
    19ee:	69 f7       	brne	.-38     	; 0x19ca <__udivmodsi4_loop>
    19f0:	60 95       	com	r22
    19f2:	70 95       	com	r23
    19f4:	80 95       	com	r24
    19f6:	90 95       	com	r25
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	bd 01       	movw	r22, r26
    19fe:	cf 01       	movw	r24, r30
    1a00:	08 95       	ret

00001a02 <__tablejump2__>:
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	88 1f       	adc	r24, r24
    1a08:	8b bf       	out	0x3b, r24	; 59
    1a0a:	07 90       	elpm	r0, Z+
    1a0c:	f6 91       	elpm	r31, Z
    1a0e:	e0 2d       	mov	r30, r0
    1a10:	19 94       	eijmp

00001a12 <__muluhisi3>:
    1a12:	c5 d0       	rcall	.+394    	; 0x1b9e <__umulhisi3>
    1a14:	a5 9f       	mul	r26, r21
    1a16:	90 0d       	add	r25, r0
    1a18:	b4 9f       	mul	r27, r20
    1a1a:	90 0d       	add	r25, r0
    1a1c:	a4 9f       	mul	r26, r20
    1a1e:	80 0d       	add	r24, r0
    1a20:	91 1d       	adc	r25, r1
    1a22:	11 24       	eor	r1, r1
    1a24:	08 95       	ret

00001a26 <__umoddi3>:
    1a26:	68 94       	set
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <__udivdi3_umoddi3>

00001a2a <__udivdi3>:
    1a2a:	e8 94       	clt

00001a2c <__udivdi3_umoddi3>:
    1a2c:	8f 92       	push	r8
    1a2e:	9f 92       	push	r9
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	05 d0       	rcall	.+10     	; 0x1a40 <__udivmod64>
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	08 95       	ret

00001a40 <__udivmod64>:
    1a40:	88 24       	eor	r8, r8
    1a42:	99 24       	eor	r9, r9
    1a44:	f4 01       	movw	r30, r8
    1a46:	e4 01       	movw	r28, r8
    1a48:	b0 e4       	ldi	r27, 0x40	; 64
    1a4a:	9f 93       	push	r25
    1a4c:	aa 27       	eor	r26, r26
    1a4e:	9a 15       	cp	r25, r10
    1a50:	8b 04       	cpc	r8, r11
    1a52:	9c 04       	cpc	r9, r12
    1a54:	ed 05       	cpc	r30, r13
    1a56:	fe 05       	cpc	r31, r14
    1a58:	cf 05       	cpc	r28, r15
    1a5a:	d0 07       	cpc	r29, r16
    1a5c:	a1 07       	cpc	r26, r17
    1a5e:	98 f4       	brcc	.+38     	; 0x1a86 <__udivmod64+0x46>
    1a60:	ad 2f       	mov	r26, r29
    1a62:	dc 2f       	mov	r29, r28
    1a64:	cf 2f       	mov	r28, r31
    1a66:	fe 2f       	mov	r31, r30
    1a68:	e9 2d       	mov	r30, r9
    1a6a:	98 2c       	mov	r9, r8
    1a6c:	89 2e       	mov	r8, r25
    1a6e:	98 2f       	mov	r25, r24
    1a70:	87 2f       	mov	r24, r23
    1a72:	76 2f       	mov	r23, r22
    1a74:	65 2f       	mov	r22, r21
    1a76:	54 2f       	mov	r21, r20
    1a78:	43 2f       	mov	r20, r19
    1a7a:	32 2f       	mov	r19, r18
    1a7c:	22 27       	eor	r18, r18
    1a7e:	b8 50       	subi	r27, 0x08	; 8
    1a80:	31 f7       	brne	.-52     	; 0x1a4e <__udivmod64+0xe>
    1a82:	bf 91       	pop	r27
    1a84:	27 c0       	rjmp	.+78     	; 0x1ad4 <__udivmod64+0x94>
    1a86:	1b 2e       	mov	r1, r27
    1a88:	bf 91       	pop	r27
    1a8a:	bb 27       	eor	r27, r27
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	44 1f       	adc	r20, r20
    1a92:	55 1f       	adc	r21, r21
    1a94:	66 1f       	adc	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	88 1c       	adc	r8, r8
    1a9e:	99 1c       	adc	r9, r9
    1aa0:	ee 1f       	adc	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	cc 1f       	adc	r28, r28
    1aa6:	dd 1f       	adc	r29, r29
    1aa8:	aa 1f       	adc	r26, r26
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	8a 14       	cp	r8, r10
    1aae:	9b 04       	cpc	r9, r11
    1ab0:	ec 05       	cpc	r30, r12
    1ab2:	fd 05       	cpc	r31, r13
    1ab4:	ce 05       	cpc	r28, r14
    1ab6:	df 05       	cpc	r29, r15
    1ab8:	a0 07       	cpc	r26, r16
    1aba:	b1 07       	cpc	r27, r17
    1abc:	48 f0       	brcs	.+18     	; 0x1ad0 <__udivmod64+0x90>
    1abe:	8a 18       	sub	r8, r10
    1ac0:	9b 08       	sbc	r9, r11
    1ac2:	ec 09       	sbc	r30, r12
    1ac4:	fd 09       	sbc	r31, r13
    1ac6:	ce 09       	sbc	r28, r14
    1ac8:	df 09       	sbc	r29, r15
    1aca:	a0 0b       	sbc	r26, r16
    1acc:	b1 0b       	sbc	r27, r17
    1ace:	21 60       	ori	r18, 0x01	; 1
    1ad0:	1a 94       	dec	r1
    1ad2:	e1 f6       	brne	.-72     	; 0x1a8c <__udivmod64+0x4c>
    1ad4:	2e f4       	brtc	.+10     	; 0x1ae0 <__udivmod64+0xa0>
    1ad6:	94 01       	movw	r18, r8
    1ad8:	af 01       	movw	r20, r30
    1ada:	be 01       	movw	r22, r28
    1adc:	cd 01       	movw	r24, r26
    1ade:	00 0c       	add	r0, r0
    1ae0:	08 95       	ret

00001ae2 <__ashldi3>:
    1ae2:	0f 93       	push	r16
    1ae4:	08 30       	cpi	r16, 0x08	; 8
    1ae6:	90 f0       	brcs	.+36     	; 0x1b0c <__ashldi3+0x2a>
    1ae8:	98 2f       	mov	r25, r24
    1aea:	87 2f       	mov	r24, r23
    1aec:	76 2f       	mov	r23, r22
    1aee:	65 2f       	mov	r22, r21
    1af0:	54 2f       	mov	r21, r20
    1af2:	43 2f       	mov	r20, r19
    1af4:	32 2f       	mov	r19, r18
    1af6:	22 27       	eor	r18, r18
    1af8:	08 50       	subi	r16, 0x08	; 8
    1afa:	f4 cf       	rjmp	.-24     	; 0x1ae4 <__ashldi3+0x2>
    1afc:	22 0f       	add	r18, r18
    1afe:	33 1f       	adc	r19, r19
    1b00:	44 1f       	adc	r20, r20
    1b02:	55 1f       	adc	r21, r21
    1b04:	66 1f       	adc	r22, r22
    1b06:	77 1f       	adc	r23, r23
    1b08:	88 1f       	adc	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 95       	dec	r16
    1b0e:	b2 f7       	brpl	.-20     	; 0x1afc <__ashldi3+0x1a>
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <__ashrdi3>:
    1b14:	97 fb       	bst	r25, 7
    1b16:	10 f8       	bld	r1, 0

00001b18 <__lshrdi3>:
    1b18:	16 94       	lsr	r1
    1b1a:	00 08       	sbc	r0, r0
    1b1c:	0f 93       	push	r16
    1b1e:	08 30       	cpi	r16, 0x08	; 8
    1b20:	98 f0       	brcs	.+38     	; 0x1b48 <__lshrdi3+0x30>
    1b22:	08 50       	subi	r16, 0x08	; 8
    1b24:	23 2f       	mov	r18, r19
    1b26:	34 2f       	mov	r19, r20
    1b28:	45 2f       	mov	r20, r21
    1b2a:	56 2f       	mov	r21, r22
    1b2c:	67 2f       	mov	r22, r23
    1b2e:	78 2f       	mov	r23, r24
    1b30:	89 2f       	mov	r24, r25
    1b32:	90 2d       	mov	r25, r0
    1b34:	f4 cf       	rjmp	.-24     	; 0x1b1e <__lshrdi3+0x6>
    1b36:	05 94       	asr	r0
    1b38:	97 95       	ror	r25
    1b3a:	87 95       	ror	r24
    1b3c:	77 95       	ror	r23
    1b3e:	67 95       	ror	r22
    1b40:	57 95       	ror	r21
    1b42:	47 95       	ror	r20
    1b44:	37 95       	ror	r19
    1b46:	27 95       	ror	r18
    1b48:	0a 95       	dec	r16
    1b4a:	aa f7       	brpl	.-22     	; 0x1b36 <__lshrdi3+0x1e>
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <__adddi3>:
    1b50:	2a 0d       	add	r18, r10
    1b52:	3b 1d       	adc	r19, r11
    1b54:	4c 1d       	adc	r20, r12
    1b56:	5d 1d       	adc	r21, r13
    1b58:	6e 1d       	adc	r22, r14
    1b5a:	7f 1d       	adc	r23, r15
    1b5c:	80 1f       	adc	r24, r16
    1b5e:	91 1f       	adc	r25, r17
    1b60:	08 95       	ret

00001b62 <__adddi3_s8>:
    1b62:	00 24       	eor	r0, r0
    1b64:	a7 fd       	sbrc	r26, 7
    1b66:	00 94       	com	r0
    1b68:	2a 0f       	add	r18, r26
    1b6a:	30 1d       	adc	r19, r0
    1b6c:	40 1d       	adc	r20, r0
    1b6e:	50 1d       	adc	r21, r0
    1b70:	60 1d       	adc	r22, r0
    1b72:	70 1d       	adc	r23, r0
    1b74:	80 1d       	adc	r24, r0
    1b76:	90 1d       	adc	r25, r0
    1b78:	08 95       	ret

00001b7a <__subdi3>:
    1b7a:	2a 19       	sub	r18, r10
    1b7c:	3b 09       	sbc	r19, r11
    1b7e:	4c 09       	sbc	r20, r12
    1b80:	5d 09       	sbc	r21, r13
    1b82:	6e 09       	sbc	r22, r14
    1b84:	7f 09       	sbc	r23, r15
    1b86:	80 0b       	sbc	r24, r16
    1b88:	91 0b       	sbc	r25, r17
    1b8a:	08 95       	ret

00001b8c <__cmpdi2>:
    1b8c:	2a 15       	cp	r18, r10
    1b8e:	3b 05       	cpc	r19, r11
    1b90:	4c 05       	cpc	r20, r12
    1b92:	5d 05       	cpc	r21, r13
    1b94:	6e 05       	cpc	r22, r14
    1b96:	7f 05       	cpc	r23, r15
    1b98:	80 07       	cpc	r24, r16
    1b9a:	91 07       	cpc	r25, r17
    1b9c:	08 95       	ret

00001b9e <__umulhisi3>:
    1b9e:	a2 9f       	mul	r26, r18
    1ba0:	b0 01       	movw	r22, r0
    1ba2:	b3 9f       	mul	r27, r19
    1ba4:	c0 01       	movw	r24, r0
    1ba6:	a3 9f       	mul	r26, r19
    1ba8:	70 0d       	add	r23, r0
    1baa:	81 1d       	adc	r24, r1
    1bac:	11 24       	eor	r1, r1
    1bae:	91 1d       	adc	r25, r1
    1bb0:	b2 9f       	mul	r27, r18
    1bb2:	70 0d       	add	r23, r0
    1bb4:	81 1d       	adc	r24, r1
    1bb6:	11 24       	eor	r1, r1
    1bb8:	91 1d       	adc	r25, r1
    1bba:	08 95       	ret

00001bbc <__itoa_ncheck>:
    1bbc:	bb 27       	eor	r27, r27
    1bbe:	4a 30       	cpi	r20, 0x0A	; 10
    1bc0:	31 f4       	brne	.+12     	; 0x1bce <__itoa_ncheck+0x12>
    1bc2:	99 23       	and	r25, r25
    1bc4:	22 f4       	brpl	.+8      	; 0x1bce <__itoa_ncheck+0x12>
    1bc6:	bd e2       	ldi	r27, 0x2D	; 45
    1bc8:	90 95       	com	r25
    1bca:	81 95       	neg	r24
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <__utoa_common>

00001bd0 <__utoa_ncheck>:
    1bd0:	bb 27       	eor	r27, r27

00001bd2 <__utoa_common>:
    1bd2:	fb 01       	movw	r30, r22
    1bd4:	55 27       	eor	r21, r21
    1bd6:	aa 27       	eor	r26, r26
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	aa 1f       	adc	r26, r26
    1bde:	a4 17       	cp	r26, r20
    1be0:	10 f0       	brcs	.+4      	; 0x1be6 <__utoa_common+0x14>
    1be2:	a4 1b       	sub	r26, r20
    1be4:	83 95       	inc	r24
    1be6:	50 51       	subi	r21, 0x10	; 16
    1be8:	b9 f7       	brne	.-18     	; 0x1bd8 <__utoa_common+0x6>
    1bea:	a0 5d       	subi	r26, 0xD0	; 208
    1bec:	aa 33       	cpi	r26, 0x3A	; 58
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <__utoa_common+0x20>
    1bf0:	a9 5d       	subi	r26, 0xD9	; 217
    1bf2:	a1 93       	st	Z+, r26
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	79 f7       	brne	.-34     	; 0x1bd6 <__utoa_common+0x4>
    1bf8:	b1 11       	cpse	r27, r1
    1bfa:	b1 93       	st	Z+, r27
    1bfc:	11 92       	st	Z+, r1
    1bfe:	cb 01       	movw	r24, r22
    1c00:	00 c0       	rjmp	.+0      	; 0x1c02 <strrev>

00001c02 <strrev>:
    1c02:	dc 01       	movw	r26, r24
    1c04:	fc 01       	movw	r30, r24
    1c06:	67 2f       	mov	r22, r23
    1c08:	71 91       	ld	r23, Z+
    1c0a:	77 23       	and	r23, r23
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <strrev+0x4>
    1c0e:	32 97       	sbiw	r30, 0x02	; 2
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <strrev+0x18>
    1c12:	7c 91       	ld	r23, X
    1c14:	6d 93       	st	X+, r22
    1c16:	70 83       	st	Z, r23
    1c18:	62 91       	ld	r22, -Z
    1c1a:	ae 17       	cp	r26, r30
    1c1c:	bf 07       	cpc	r27, r31
    1c1e:	c8 f3       	brcs	.-14     	; 0x1c12 <strrev+0x10>
    1c20:	08 95       	ret

00001c22 <_exit>:
    1c22:	f8 94       	cli

00001c24 <__stop_program>:
    1c24:	ff cf       	rjmp	.-2      	; 0x1c24 <__stop_program>
