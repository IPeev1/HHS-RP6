
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000017da  0000186e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  00800066  00800066  00001874  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbb  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e8  00000000  00000000  0000267b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a08  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  0000386c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000650  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a76  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 09 	call	0x12ec	; 0x12ec <main>
      8a:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getBumperLeft>:

#define DISTANCE 0

int getBumperLeft() {
	
	PORT_L &= ~(1 << IO_L);
      92:	c0 98       	cbi	0x18, 0	; 24
	DDR_L &= ~(1 << IO_L);
      94:	b8 98       	cbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      96:	00 c0       	rjmp	.+0      	; 0x98 <getBumperLeft+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_L & (1 << IO_L);
      98:	86 b3       	in	r24, 0x16	; 22
	
	DDR_L |= (1 << IO_L);
      9a:	b8 9a       	sbi	0x17, 0	; 23
	PORT_L |= (1 <<  IO_L);
      9c:	c0 9a       	sbi	0x18, 0	; 24
	
	return pushed;
}
      9e:	81 70       	andi	r24, 0x01	; 1
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	08 95       	ret

000000a4 <getBumperRight>:

int getBumperRight() {
	
	PORT_R &= ~(1 << IO_R);
      a4:	ae 98       	cbi	0x15, 6	; 21
	DDR_R &= ~(1 << IO_R);
      a6:	a6 98       	cbi	0x14, 6	; 20
      a8:	00 c0       	rjmp	.+0      	; 0xaa <getBumperRight+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_R & (1 << IO_R);
      aa:	83 b3       	in	r24, 0x13	; 19
	
	DDR_R |= (1 << IO_R);
      ac:	a6 9a       	sbi	0x14, 6	; 20
	PORT_R |= (1 <<  IO_R);
      ae:	ae 9a       	sbi	0x15, 6	; 21
	
	return pushed;
      b0:	80 74       	andi	r24, 0x40	; 64
}
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	08 95       	ret

000000b6 <getBumpers>:

int getBumpers() {
	
	return getBumperLeft() || getBumperRight();
      b6:	0e 94 49 00 	call	0x92	; 0x92 <getBumperLeft>
      ba:	89 2b       	or	r24, r25
      bc:	51 f4       	brne	.+20     	; 0xd2 <getBumpers+0x1c>
      be:	0e 94 52 00 	call	0xa4	; 0xa4 <getBumperRight>
      c2:	31 e0       	ldi	r19, 0x01	; 1
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	89 2b       	or	r24, r25
      c8:	09 f4       	brne	.+2      	; 0xcc <getBumpers+0x16>
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	83 2f       	mov	r24, r19
      ce:	92 2f       	mov	r25, r18
      d0:	08 95       	ret
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	08 95       	ret

000000d8 <init_micros>:
	sei();									//Enable global interrupts
}

//Micros
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      d8:	83 b7       	in	r24, 0x33	; 51
      da:	81 60       	ori	r24, 0x01	; 1
      dc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      de:	83 b7       	in	r24, 0x33	; 51
      e0:	82 60       	ori	r24, 0x02	; 2
      e2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      e4:	89 b7       	in	r24, 0x39	; 57
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      ea:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      ec:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <t0TotalOverflow>
      f0:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <t0TotalOverflow+0x1>
      f4:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <t0TotalOverflow+0x2>
      f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <t0TotalOverflow+0x3>
      fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <t0TotalOverflow+0x4>
     100:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <t0TotalOverflow+0x5>
     104:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <t0TotalOverflow+0x6>
     108:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <t0TotalOverflow+0x7>
     10c:	08 95       	ret

0000010e <__vector_11>:
}

ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
     10e:	1f 92       	push	r1
     110:	0f 92       	push	r0
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	2f 93       	push	r18
     11a:	3f 93       	push	r19
     11c:	4f 93       	push	r20
     11e:	5f 93       	push	r21
     120:	6f 93       	push	r22
     122:	7f 93       	push	r23
     124:	8f 93       	push	r24
     126:	9f 93       	push	r25
     128:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
     12a:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <t0TotalOverflow>
     12e:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <t0TotalOverflow+0x1>
     132:	40 91 bf 00 	lds	r20, 0x00BF	; 0x8000bf <t0TotalOverflow+0x2>
     136:	50 91 c0 00 	lds	r21, 0x00C0	; 0x8000c0 <t0TotalOverflow+0x3>
     13a:	60 91 c1 00 	lds	r22, 0x00C1	; 0x8000c1 <t0TotalOverflow+0x4>
     13e:	70 91 c2 00 	lds	r23, 0x00C2	; 0x8000c2 <t0TotalOverflow+0x5>
     142:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <t0TotalOverflow+0x6>
     146:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <t0TotalOverflow+0x7>
     14a:	a1 e0       	ldi	r26, 0x01	; 1
     14c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__adddi3_s8>
     150:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <t0TotalOverflow>
     154:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <t0TotalOverflow+0x1>
     158:	40 93 bf 00 	sts	0x00BF, r20	; 0x8000bf <t0TotalOverflow+0x2>
     15c:	50 93 c0 00 	sts	0x00C0, r21	; 0x8000c0 <t0TotalOverflow+0x3>
     160:	60 93 c1 00 	sts	0x00C1, r22	; 0x8000c1 <t0TotalOverflow+0x4>
     164:	70 93 c2 00 	sts	0x00C2, r23	; 0x8000c2 <t0TotalOverflow+0x5>
     168:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <t0TotalOverflow+0x6>
     16c:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <t0TotalOverflow+0x7>
}
     170:	af 91       	pop	r26
     172:	9f 91       	pop	r25
     174:	8f 91       	pop	r24
     176:	7f 91       	pop	r23
     178:	6f 91       	pop	r22
     17a:	5f 91       	pop	r21
     17c:	4f 91       	pop	r20
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0f be       	out	0x3f, r0	; 63
     186:	0f 90       	pop	r0
     188:	1f 90       	pop	r1
     18a:	18 95       	reti

0000018c <micros>:

uint64_t micros(){
     18c:	af 92       	push	r10
     18e:	bf 92       	push	r11
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     19c:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     19e:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <t0TotalOverflow>
     1a2:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <t0TotalOverflow+0x1>
     1a6:	40 91 bf 00 	lds	r20, 0x00BF	; 0x8000bf <t0TotalOverflow+0x2>
     1aa:	50 91 c0 00 	lds	r21, 0x00C0	; 0x8000c0 <t0TotalOverflow+0x3>
     1ae:	60 91 c1 00 	lds	r22, 0x00C1	; 0x8000c1 <t0TotalOverflow+0x4>
     1b2:	70 91 c2 00 	lds	r23, 0x00C2	; 0x8000c2 <t0TotalOverflow+0x5>
     1b6:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <t0TotalOverflow+0x6>
     1ba:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     1be:	e0 e0       	ldi	r30, 0x00	; 0
     1c0:	fa 2f       	mov	r31, r26
     1c2:	ff 0f       	add	r31, r31
     1c4:	ff 0f       	add	r31, r31
     1c6:	ff 0f       	add	r31, r31
     1c8:	ff 23       	and	r31, r31
     1ca:	14 f4       	brge	.+4      	; 0x1d0 <micros+0x44>
     1cc:	e1 50       	subi	r30, 0x01	; 1
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	ef 2f       	mov	r30, r31
     1d2:	ee 0f       	add	r30, r30
     1d4:	ee 0b       	sbc	r30, r30
     1d6:	0b e0       	ldi	r16, 0x0B	; 11
     1d8:	0e 94 90 0b 	call	0x1720	; 0x1720 <__ashldi3>
     1dc:	a2 2e       	mov	r10, r18
     1de:	b3 2e       	mov	r11, r19
     1e0:	c4 2e       	mov	r12, r20
     1e2:	d5 2e       	mov	r13, r21
     1e4:	e6 2e       	mov	r14, r22
     1e6:	f7 2e       	mov	r15, r23
     1e8:	08 2f       	mov	r16, r24
     1ea:	19 2f       	mov	r17, r25
     1ec:	2f 2f       	mov	r18, r31
     1ee:	3e 2f       	mov	r19, r30
     1f0:	4e 2f       	mov	r20, r30
     1f2:	5e 2f       	mov	r21, r30
     1f4:	6e 2f       	mov	r22, r30
     1f6:	7e 2f       	mov	r23, r30
     1f8:	8e 2f       	mov	r24, r30
     1fa:	9e 2f       	mov	r25, r30
     1fc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
}
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	08 95       	ret

00000212 <init_TWI>:

//I2C
void init_TWI(){
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);		//Enable TWI; Enable Acknowledge; Enable Interrupt
     212:	85 e4       	ldi	r24, 0x45	; 69
     214:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;											//No prescaling
     216:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);									//Set slave address
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;					//set SCL to 100kHz
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;
     220:	84 b3       	in	r24, 0x14	; 20
     222:	83 60       	ori	r24, 0x03	; 3
     224:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;
     226:	85 b3       	in	r24, 0x15	; 21
     228:	83 60       	ori	r24, 0x03	; 3
     22a:	85 bb       	out	0x15, r24	; 21
     22c:	08 95       	ret

0000022e <init_rp6Data>:
}

void init_rp6Data(){
	rp6Data.driveSpeed = 0;
     22e:	e4 ea       	ldi	r30, 0xA4	; 164
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	10 82       	st	Z, r1
     234:	11 82       	std	Z+1, r1	; 0x01
     236:	12 82       	std	Z+2, r1	; 0x02
     238:	13 82       	std	Z+3, r1	; 0x03
	rp6Data.driveDirection = 1;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	84 83       	std	Z+4, r24	; 0x04
	rp6Data.turnDirection = 0;
     23e:	15 82       	std	Z+5, r1	; 0x05
	rp6Data.accelerationRate = 2000;
     240:	20 ed       	ldi	r18, 0xD0	; 208
     242:	37 e0       	ldi	r19, 0x07	; 7
     244:	37 83       	std	Z+7, r19	; 0x07
     246:	26 83       	std	Z+6, r18	; 0x06
	rp6Data.turnRate = 2500;
     248:	24 ec       	ldi	r18, 0xC4	; 196
     24a:	39 e0       	ldi	r19, 0x09	; 9
     24c:	31 87       	std	Z+9, r19	; 0x09
     24e:	20 87       	std	Z+8, r18	; 0x08
	rp6Data.driveSpeedThreshold = 7000;
     250:	28 e5       	ldi	r18, 0x58	; 88
     252:	3b e1       	ldi	r19, 0x1B	; 27
     254:	33 87       	std	Z+11, r19	; 0x0b
     256:	22 87       	std	Z+10, r18	; 0x0a
	rp6Data.updateSpeed = 200;
     258:	48 ec       	ldi	r20, 0xC8	; 200
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	44 87       	std	Z+12, r20	; 0x0c
     262:	55 87       	std	Z+13, r21	; 0x0d
     264:	66 87       	std	Z+14, r22	; 0x0e
     266:	77 87       	std	Z+15, r23	; 0x0f
	rp6Data.enableBeeper = 1;
     268:	80 8b       	std	Z+16, r24	; 0x10
     26a:	08 95       	ret

0000026c <init_arduinoData>:
}

void init_arduinoData(){
	arduinoData.bumperFlag = 0;
     26c:	e6 e8       	ldi	r30, 0x86	; 134
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	11 82       	std	Z+1, r1	; 0x01
     272:	10 82       	st	Z, r1
	arduinoData.actualDriveSpeed = 0;
     274:	13 82       	std	Z+3, r1	; 0x03
     276:	12 82       	std	Z+2, r1	; 0x02
	arduinoData.actualLeftMotorSpeed = 0;
     278:	15 82       	std	Z+5, r1	; 0x05
     27a:	14 82       	std	Z+4, r1	; 0x04
	arduinoData.actualRightMotorSpeed = 0;
     27c:	17 82       	std	Z+7, r1	; 0x07
     27e:	16 82       	std	Z+6, r1	; 0x06
	arduinoData.totalDistance = 0;
     280:	11 86       	std	Z+9, r1	; 0x09
     282:	10 86       	std	Z+8, r1	; 0x08
     284:	08 95       	ret

00000286 <clearSendData>:
	}
	
	TWCR |= (1 << TWINT);
}

void clearSendData(){
     286:	ee ed       	ldi	r30, 0xDE	; 222
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	82 ef       	ldi	r24, 0xF2	; 242
     28c:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     28e:	11 92       	st	Z+, r1
	
	TWCR |= (1 << TWINT);
}

void clearSendData(){
	for(int i = 0; i < DATASIZE; i++){
     290:	e8 17       	cp	r30, r24
     292:	f9 07       	cpc	r31, r25
     294:	e1 f7       	brne	.-8      	; 0x28e <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     296:	08 95       	ret

00000298 <clearReceiveData>:

void clearReceiveData(){
     298:	e0 e9       	ldi	r30, 0x90	; 144
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	84 ea       	ldi	r24, 0xA4	; 164
     29e:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     2a0:	11 92       	st	Z+, r1
		sendData[i] = 0;
	}
}

void clearReceiveData(){
	for(int i = 0; i < DATASIZE; i++){
     2a2:	e8 17       	cp	r30, r24
     2a4:	f9 07       	cpc	r31, r25
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     2a8:	08 95       	ret

000002aa <rp6DataInterpreter>:
		case(1): rp6DataInterpreter(); break;
	}
}

void rp6DataInterpreter(){
	if(receiveData[2]-1 == 0){
     2aa:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <receiveData+0x2>
     2ae:	21 30       	cpi	r18, 0x01	; 1
     2b0:	49 f4       	brne	.+18     	; 0x2c4 <rp6DataInterpreter+0x1a>
		rp6Data.driveSpeed = 0;
     2b2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <rp6Data>
     2b6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <rp6Data+0x1>
     2ba:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <rp6Data+0x2>
     2be:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <rp6Data+0x3>
     2c2:	12 c0       	rjmp	.+36     	; 0x2e8 <rp6DataInterpreter+0x3e>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     2c4:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <receiveData+0x1>
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <rp6Data>
     2d2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <rp6Data+0x1>
     2d6:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <rp6Data+0x2>
     2da:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <rp6Data+0x3>
	}
	
	if(receiveData[2] < 1){
     2de:	21 11       	cpse	r18, r1
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <rp6DataInterpreter+0x3e>
		rp6Data.driveDirection = 0;
     2e2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <rp6Data+0x4>
     2e6:	03 c0       	rjmp	.+6      	; 0x2ee <rp6DataInterpreter+0x44>
	}else{
		rp6Data.driveDirection = 1;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <rp6Data+0x4>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     2ee:	e4 ea       	ldi	r30, 0xA4	; 164
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	a0 e9       	ldi	r26, 0x90	; 144
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	13 96       	adiw	r26, 0x03	; 3
     2f8:	8c 91       	ld	r24, X
     2fa:	13 97       	sbiw	r26, 0x03	; 3
     2fc:	81 50       	subi	r24, 0x01	; 1
     2fe:	85 83       	std	Z+5, r24	; 0x05
	rp6Data.accelerationRate = (receiveData[4] << 8) + receiveData[5];
     300:	14 96       	adiw	r26, 0x04	; 4
     302:	8c 91       	ld	r24, X
     304:	14 97       	sbiw	r26, 0x04	; 4
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	98 2f       	mov	r25, r24
     30a:	88 27       	eor	r24, r24
     30c:	15 96       	adiw	r26, 0x05	; 5
     30e:	2c 91       	ld	r18, X
     310:	15 97       	sbiw	r26, 0x05	; 5
     312:	82 0f       	add	r24, r18
     314:	91 1d       	adc	r25, r1
     316:	97 83       	std	Z+7, r25	; 0x07
     318:	86 83       	std	Z+6, r24	; 0x06
	rp6Data.turnRate = (receiveData[6] << 8) + receiveData[7];
     31a:	16 96       	adiw	r26, 0x06	; 6
     31c:	8c 91       	ld	r24, X
     31e:	16 97       	sbiw	r26, 0x06	; 6
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	98 2f       	mov	r25, r24
     324:	88 27       	eor	r24, r24
     326:	17 96       	adiw	r26, 0x07	; 7
     328:	2c 91       	ld	r18, X
     32a:	17 97       	sbiw	r26, 0x07	; 7
     32c:	82 0f       	add	r24, r18
     32e:	91 1d       	adc	r25, r1
     330:	91 87       	std	Z+9, r25	; 0x09
     332:	80 87       	std	Z+8, r24	; 0x08
	rp6Data.driveSpeedThreshold = (receiveData[8] << 8) + receiveData[9];
     334:	18 96       	adiw	r26, 0x08	; 8
     336:	8c 91       	ld	r24, X
     338:	18 97       	sbiw	r26, 0x08	; 8
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	98 2f       	mov	r25, r24
     33e:	88 27       	eor	r24, r24
     340:	19 96       	adiw	r26, 0x09	; 9
     342:	2c 91       	ld	r18, X
     344:	19 97       	sbiw	r26, 0x09	; 9
     346:	82 0f       	add	r24, r18
     348:	91 1d       	adc	r25, r1
     34a:	93 87       	std	Z+11, r25	; 0x0b
     34c:	82 87       	std	Z+10, r24	; 0x0a
	rp6Data.updateSpeed = (receiveData[10] << 8) + receiveData[11];
     34e:	1a 96       	adiw	r26, 0x0a	; 10
     350:	4c 91       	ld	r20, X
     352:	1a 97       	sbiw	r26, 0x0a	; 10
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	54 2f       	mov	r21, r20
     358:	44 27       	eor	r20, r20
     35a:	1b 96       	adiw	r26, 0x0b	; 11
     35c:	8c 91       	ld	r24, X
     35e:	1b 97       	sbiw	r26, 0x0b	; 11
     360:	48 0f       	add	r20, r24
     362:	51 1d       	adc	r21, r1
     364:	05 2e       	mov	r0, r21
     366:	00 0c       	add	r0, r0
     368:	66 0b       	sbc	r22, r22
     36a:	77 0b       	sbc	r23, r23
     36c:	44 87       	std	Z+12, r20	; 0x0c
     36e:	55 87       	std	Z+13, r21	; 0x0d
     370:	66 87       	std	Z+14, r22	; 0x0e
     372:	77 87       	std	Z+15, r23	; 0x0f
	rp6Data.enableBeeper = receiveData[12];
     374:	1c 96       	adiw	r26, 0x0c	; 12
     376:	8c 91       	ld	r24, X
     378:	1c 97       	sbiw	r26, 0x0c	; 12
     37a:	80 8b       	std	Z+16, r24	; 0x10
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
     37c:	1d 96       	adiw	r26, 0x0d	; 13
     37e:	8c 91       	ld	r24, X
     380:	1d 97       	sbiw	r26, 0x0d	; 13
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	98 2f       	mov	r25, r24
     386:	88 27       	eor	r24, r24
     388:	1e 96       	adiw	r26, 0x0e	; 14
     38a:	2c 91       	ld	r18, X
     38c:	82 0f       	add	r24, r18
     38e:	91 1d       	adc	r25, r1
     390:	29 2f       	mov	r18, r25
     392:	22 0f       	add	r18, r18
     394:	22 0b       	sbc	r18, r18
     396:	81 8b       	std	Z+17, r24	; 0x11
     398:	92 8b       	std	Z+18, r25	; 0x12
     39a:	23 8b       	std	Z+19, r18	; 0x13
     39c:	24 8b       	std	Z+20, r18	; 0x14
     39e:	25 8b       	std	Z+21, r18	; 0x15
     3a0:	26 8b       	std	Z+22, r18	; 0x16
     3a2:	27 8b       	std	Z+23, r18	; 0x17
     3a4:	20 8f       	std	Z+24, r18	; 0x18
     3a6:	08 95       	ret

000003a8 <I2C_receiveInterpreter>:
	}
}

void I2C_receiveInterpreter(){
	int dataSet = receiveData[0];
	switch(dataSet){
     3a8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <receiveData>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	11 f4       	brne	.+4      	; 0x3b4 <I2C_receiveInterpreter+0xc>
		case(1): rp6DataInterpreter(); break;
     3b0:	0e 94 55 01 	call	0x2aa	; 0x2aa <rp6DataInterpreter>
     3b4:	08 95       	ret

000003b6 <arduinoDataConstructor>:
	rp6Data.enableBeeper = receiveData[12];
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
}

void arduinoDataConstructor(){
	clearSendData();
     3b6:	0e 94 43 01 	call	0x286	; 0x286 <clearSendData>
	
	sendData[0] = 1;
     3ba:	ee ed       	ldi	r30, 0xDE	; 222
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 83       	st	Z, r24
	
	sendData[1] = (arduinoData.bumperFlag >> 8);
     3c2:	a6 e8       	ldi	r26, 0x86	; 134
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8c 91       	ld	r24, X
     3c8:	11 96       	adiw	r26, 0x01	; 1
     3ca:	9c 91       	ld	r25, X
     3cc:	11 97       	sbiw	r26, 0x01	; 1
     3ce:	91 83       	std	Z+1, r25	; 0x01
	sendData[2] = arduinoData.bumperFlag;
     3d0:	82 83       	std	Z+2, r24	; 0x02
	
	sendData[3] = (arduinoData.actualDriveSpeed >> 8);
     3d2:	12 96       	adiw	r26, 0x02	; 2
     3d4:	8c 91       	ld	r24, X
     3d6:	12 97       	sbiw	r26, 0x02	; 2
     3d8:	13 96       	adiw	r26, 0x03	; 3
     3da:	9c 91       	ld	r25, X
     3dc:	13 97       	sbiw	r26, 0x03	; 3
     3de:	93 83       	std	Z+3, r25	; 0x03
	sendData[4] = arduinoData.actualDriveSpeed;
     3e0:	84 83       	std	Z+4, r24	; 0x04
	
	sendData[5] = (arduinoData.actualLeftMotorSpeed >> 8);
     3e2:	14 96       	adiw	r26, 0x04	; 4
     3e4:	8c 91       	ld	r24, X
     3e6:	14 97       	sbiw	r26, 0x04	; 4
     3e8:	15 96       	adiw	r26, 0x05	; 5
     3ea:	9c 91       	ld	r25, X
     3ec:	15 97       	sbiw	r26, 0x05	; 5
     3ee:	95 83       	std	Z+5, r25	; 0x05
	sendData[6] = arduinoData.actualLeftMotorSpeed;
     3f0:	86 83       	std	Z+6, r24	; 0x06
	
	sendData[7] = (arduinoData.actualRightMotorSpeed >> 8);
     3f2:	16 96       	adiw	r26, 0x06	; 6
     3f4:	8c 91       	ld	r24, X
     3f6:	16 97       	sbiw	r26, 0x06	; 6
     3f8:	17 96       	adiw	r26, 0x07	; 7
     3fa:	9c 91       	ld	r25, X
     3fc:	17 97       	sbiw	r26, 0x07	; 7
     3fe:	97 83       	std	Z+7, r25	; 0x07
	sendData[8] = arduinoData.actualRightMotorSpeed;
     400:	80 87       	std	Z+8, r24	; 0x08
	
	sendData[9] = (arduinoData.totalDistance >> 8);
     402:	18 96       	adiw	r26, 0x08	; 8
     404:	8c 91       	ld	r24, X
     406:	18 97       	sbiw	r26, 0x08	; 8
     408:	19 96       	adiw	r26, 0x09	; 9
     40a:	9c 91       	ld	r25, X
     40c:	91 87       	std	Z+9, r25	; 0x09
	sendData[10] = arduinoData.totalDistance;
     40e:	82 87       	std	Z+10, r24	; 0x0a
     410:	e9 ee       	ldi	r30, 0xE9	; 233
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	82 ef       	ldi	r24, 0xF2	; 242
     416:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i = 11; i < DATASIZE; i++){
		sendData[i] = 0;
     418:	11 92       	st	Z+, r1
	sendData[8] = arduinoData.actualRightMotorSpeed;
	
	sendData[9] = (arduinoData.totalDistance >> 8);
	sendData[10] = arduinoData.totalDistance;
	
	for(int i = 11; i < DATASIZE; i++){
     41a:	e8 17       	cp	r30, r24
     41c:	f9 07       	cpc	r31, r25
     41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		sendData[i] = 0;
	}
}
     420:	08 95       	ret

00000422 <__vector_19>:
	arduinoData.actualLeftMotorSpeed = 0;
	arduinoData.actualRightMotorSpeed = 0;
	arduinoData.totalDistance = 0;
}

ISR(TWI_vect){
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	6f 93       	push	r22
     436:	7f 93       	push	r23
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	static int byteCounter = 0;
	switch(TWSR){
     444:	81 b1       	in	r24, 0x01	; 1
     446:	80 3a       	cpi	r24, 0xA0	; 160
     448:	21 f1       	breq	.+72     	; 0x492 <__vector_19+0x70>
     44a:	28 f4       	brcc	.+10     	; 0x456 <__vector_19+0x34>
     44c:	80 36       	cpi	r24, 0x60	; 96
     44e:	41 f0       	breq	.+16     	; 0x460 <__vector_19+0x3e>
     450:	80 38       	cpi	r24, 0x80	; 128
     452:	69 f0       	breq	.+26     	; 0x46e <__vector_19+0x4c>
     454:	39 c0       	rjmp	.+114    	; 0x4c8 <__vector_19+0xa6>
     456:	88 3a       	cpi	r24, 0xA8	; 168
     458:	f9 f0       	breq	.+62     	; 0x498 <__vector_19+0x76>
     45a:	88 3b       	cpi	r24, 0xB8	; 184
     45c:	39 f1       	breq	.+78     	; 0x4ac <__vector_19+0x8a>
     45e:	34 c0       	rjmp	.+104    	; 0x4c8 <__vector_19+0xa6>
		case 0x60:
			clearReceiveData();
     460:	0e 94 4c 01 	call	0x298	; 0x298 <clearReceiveData>
			byteCounter = 0;
     464:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1964+0x1>
     468:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <byteCounter.1964>
		break;
     46c:	2d c0       	rjmp	.+90     	; 0x4c8 <__vector_19+0xa6>
		
		case 0x80:
			if(byteCounter < 20){
     46e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <byteCounter.1964>
     472:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <byteCounter.1964+0x1>
     476:	84 31       	cpi	r24, 0x14	; 20
     478:	91 05       	cpc	r25, r1
     47a:	34 f5       	brge	.+76     	; 0x4c8 <__vector_19+0xa6>
				receiveData[byteCounter] = TWDR;
     47c:	23 b1       	in	r18, 0x03	; 3
     47e:	fc 01       	movw	r30, r24
     480:	e0 57       	subi	r30, 0x70	; 112
     482:	ff 4f       	sbci	r31, 0xFF	; 255
     484:	20 83       	st	Z, r18
				byteCounter++;
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <byteCounter.1964+0x1>
     48c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <byteCounter.1964>
     490:	1b c0       	rjmp	.+54     	; 0x4c8 <__vector_19+0xa6>
			}
		break;
		
		case 0xA0:
			I2C_receiveInterpreter();
     492:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <I2C_receiveInterpreter>
		break;
     496:	18 c0       	rjmp	.+48     	; 0x4c8 <__vector_19+0xa6>
		
		case 0xA8:
			arduinoDataConstructor();
     498:	0e 94 db 01 	call	0x3b6	; 0x3b6 <arduinoDataConstructor>
			byteCounter = 0;
     49c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1964+0x1>
     4a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <byteCounter.1964>
			TWDR = sendData[byteCounter];
     4a4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <sendData>
     4a8:	83 b9       	out	0x03, r24	; 3
		break;
     4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__vector_19+0xa6>
		
		case 0xB8:
			byteCounter++;
     4ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <byteCounter.1964>
     4b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <byteCounter.1964+0x1>
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <byteCounter.1964+0x1>
     4ba:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <byteCounter.1964>
			TWDR = sendData[byteCounter];
     4be:	fc 01       	movw	r30, r24
     4c0:	e2 52       	subi	r30, 0x22	; 34
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	80 81       	ld	r24, Z
     4c6:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);
     4c8:	86 b7       	in	r24, 0x36	; 54
     4ca:	80 68       	ori	r24, 0x80	; 128
     4cc:	86 bf       	out	0x36, r24	; 54
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	7f 91       	pop	r23
     4dc:	6f 91       	pop	r22
     4de:	5f 91       	pop	r21
     4e0:	4f 91       	pop	r20
     4e2:	3f 91       	pop	r19
     4e4:	2f 91       	pop	r18
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <init_motor_io>:
	}
}

//Motor
void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     4f0:	81 b3       	in	r24, 0x11	; 17
     4f2:	80 63       	ori	r24, 0x30	; 48
     4f4:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     4f6:	81 b3       	in	r24, 0x11	; 17
     4f8:	83 7f       	andi	r24, 0xF3	; 243
     4fa:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     4fc:	84 b3       	in	r24, 0x14	; 20
     4fe:	8c 60       	ori	r24, 0x0C	; 12
     500:	84 bb       	out	0x14, r24	; 20
     502:	08 95       	ret

00000504 <init_motor_timer>:
}

void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     504:	8f b5       	in	r24, 0x2f	; 47
     506:	80 68       	ori	r24, 0x80	; 128
     508:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     50a:	8f b5       	in	r24, 0x2f	; 47
     50c:	80 62       	ori	r24, 0x20	; 32
     50e:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     510:	8f b5       	in	r24, 0x2f	; 47
     512:	82 60       	ori	r24, 0x02	; 2
     514:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     516:	8e b5       	in	r24, 0x2e	; 46
     518:	80 61       	ori	r24, 0x10	; 16
     51a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     51c:	8e b5       	in	r24, 0x2e	; 46
     51e:	81 60       	ori	r24, 0x01	; 1
     520:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	99 ef       	ldi	r25, 0xF9	; 249
     526:	97 bd       	out	0x27, r25	; 39
     528:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     52a:	1b bc       	out	0x2b, r1	; 43
     52c:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     52e:	19 bc       	out	0x29, r1	; 41
     530:	18 bc       	out	0x28, r1	; 40
     532:	08 95       	ret

00000534 <motorDriver>:
}

int motorDriver(struct rp6DataBP rp6Data){	
     534:	2f 92       	push	r2
     536:	3f 92       	push	r3
     538:	4f 92       	push	r4
     53a:	5f 92       	push	r5
     53c:	6f 92       	push	r6
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	e3 97       	sbiw	r28, 0x33	; 51
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	2c 96       	adiw	r28, 0x0c	; 12
     56a:	ac ac       	ldd	r10, Y+60	; 0x3c
     56c:	bd ac       	ldd	r11, Y+61	; 0x3d
     56e:	ce ac       	ldd	r12, Y+62	; 0x3e
     570:	df ac       	ldd	r13, Y+63	; 0x3f
     572:	2c 97       	sbiw	r28, 0x0c	; 12
     574:	aa 86       	std	Y+10, r10	; 0x0a
     576:	bb 86       	std	Y+11, r11	; 0x0b
     578:	cc 86       	std	Y+12, r12	; 0x0c
     57a:	dd 86       	std	Y+13, r13	; 0x0d
     57c:	2d 96       	adiw	r28, 0x0d	; 13
     57e:	bf ac       	ldd	r11, Y+63	; 0x3f
     580:	2d 97       	sbiw	r28, 0x0d	; 13
     582:	b9 86       	std	Y+9, r11	; 0x09
     584:	2e 96       	adiw	r28, 0x0e	; 14
     586:	cf ac       	ldd	r12, Y+63	; 0x3f
     588:	2e 97       	sbiw	r28, 0x0e	; 14
     58a:	ce 86       	std	Y+14, r12	; 0x0e
     58c:	60 96       	adiw	r28, 0x10	; 16
     58e:	8e ac       	ldd	r8, Y+62	; 0x3e
     590:	9f ac       	ldd	r9, Y+63	; 0x3f
     592:	60 97       	sbiw	r28, 0x10	; 16
     594:	62 96       	adiw	r28, 0x12	; 18
     596:	ee ac       	ldd	r14, Y+62	; 0x3e
     598:	ff ac       	ldd	r15, Y+63	; 0x3f
     59a:	62 97       	sbiw	r28, 0x12	; 18
     59c:	ff 8e       	std	Y+31, r15	; 0x1f
     59e:	ee 8e       	std	Y+30, r14	; 0x1e
     5a0:	64 96       	adiw	r28, 0x14	; 20
     5a2:	2e ac       	ldd	r2, Y+62	; 0x3e
     5a4:	3f ac       	ldd	r3, Y+63	; 0x3f
     5a6:	64 97       	sbiw	r28, 0x14	; 20
     5a8:	68 96       	adiw	r28, 0x18	; 24
     5aa:	4c ac       	ldd	r4, Y+60	; 0x3c
     5ac:	5d ac       	ldd	r5, Y+61	; 0x3d
     5ae:	6e ac       	ldd	r6, Y+62	; 0x3e
     5b0:	7f ac       	ldd	r7, Y+63	; 0x3f
     5b2:	68 97       	sbiw	r28, 0x18	; 24
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	//Update timer
	rp6Data.updateSpeed = rp6Data.updateSpeed * 1000;
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     5b4:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
     5b8:	a0 90 7c 00 	lds	r10, 0x007C	; 0x80007c <updateTimer.2003>
     5bc:	b0 90 7d 00 	lds	r11, 0x007D	; 0x80007d <updateTimer.2003+0x1>
     5c0:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <updateTimer.2003+0x2>
     5c4:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <updateTimer.2003+0x3>
     5c8:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <updateTimer.2003+0x4>
     5cc:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <updateTimer.2003+0x5>
     5d0:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <updateTimer.2003+0x6>
     5d4:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <updateTimer.2003+0x7>
     5d8:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
     5dc:	08 f4       	brcc	.+2      	; 0x5e0 <motorDriver+0xac>
     5de:	9c c5       	rjmp	.+2872   	; 0x1118 <__stack+0x8b9>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     5e0:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
     5e4:	a2 2e       	mov	r10, r18
     5e6:	b3 2e       	mov	r11, r19
     5e8:	c4 2e       	mov	r12, r20
     5ea:	d5 2e       	mov	r13, r21
     5ec:	e6 2f       	mov	r30, r22
     5ee:	f7 2f       	mov	r31, r23
     5f0:	8e 8b       	std	Y+22, r24	; 0x16
     5f2:	98 a3       	std	Y+32, r25	; 0x20
     5f4:	a8 ee       	ldi	r26, 0xE8	; 232
     5f6:	b3 e0       	ldi	r27, 0x03	; 3
     5f8:	a3 01       	movw	r20, r6
     5fa:	92 01       	movw	r18, r4
     5fc:	0e 94 85 0b 	call	0x170a	; 0x170a <__muluhisi3>
     600:	7b 01       	movw	r14, r22
     602:	8c 01       	movw	r16, r24
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	a9 01       	movw	r20, r18
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	26 2f       	mov	r18, r22
     614:	3f 2d       	mov	r19, r15
     616:	40 2f       	mov	r20, r16
     618:	51 2f       	mov	r21, r17
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	ee 2e       	mov	r14, r30
     624:	ff 2e       	mov	r15, r31
     626:	0e 89       	ldd	r16, Y+22	; 0x16
     628:	18 a1       	ldd	r17, Y+32	; 0x20
     62a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
     62e:	52 2e       	mov	r5, r18
     630:	63 2e       	mov	r6, r19
     632:	74 2e       	mov	r7, r20
     634:	5e 8b       	std	Y+22, r21	; 0x16
     636:	68 a3       	std	Y+32, r22	; 0x20
     638:	79 a3       	std	Y+33, r23	; 0x21
     63a:	8a a3       	std	Y+34, r24	; 0x22
     63c:	9b a3       	std	Y+35, r25	; 0x23
     63e:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.2003>
     642:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.2003+0x1>
     646:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.2003+0x2>
     64a:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.2003+0x3>
     64e:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.2003+0x4>
     652:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.2003+0x5>
     656:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.2003+0x6>
     65a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.2003+0x7>
	}
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     65e:	a0 e0       	ldi	r26, 0x00	; 0
     660:	b4 e6       	ldi	r27, 0x64	; 100
     662:	2a 85       	ldd	r18, Y+10	; 0x0a
     664:	3b 85       	ldd	r19, Y+11	; 0x0b
     666:	4c 85       	ldd	r20, Y+12	; 0x0c
     668:	5d 85       	ldd	r21, Y+13	; 0x0d
     66a:	0e 94 85 0b 	call	0x170a	; 0x170a <__muluhisi3>
     66e:	24 e6       	ldi	r18, 0x64	; 100
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__udivmodsi4>
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     67a:	c1 01       	movw	r24, r2
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	28 17       	cp	r18, r24
     682:	39 07       	cpc	r19, r25
     684:	4a 07       	cpc	r20, r26
     686:	5b 07       	cpc	r21, r27
     688:	18 f4       	brcc	.+6      	; 0x690 <motorDriver+0x15c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	a9 01       	movw	r20, r18
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     690:	f9 84       	ldd	r15, Y+9	; 0x09
     692:	ef 2d       	mov	r30, r15
     694:	ff 0c       	add	r15, r15
     696:	ff 0b       	sbc	r31, r31
     698:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2004>
     69c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2004+0x1>
     6a0:	e8 17       	cp	r30, r24
     6a2:	f9 07       	cpc	r31, r25
     6a4:	91 f1       	breq	.+100    	; 0x70a <motorDriver+0x1d6>
     6a6:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <currentDriveSpeed.2007>
     6aa:	09 83       	std	Y+1, r16	; 0x01
     6ac:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <currentDriveSpeed.2007+0x1>
     6b0:	1a 83       	std	Y+2, r17	; 0x02
     6b2:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <currentDriveSpeed.2007+0x2>
     6b6:	2b 83       	std	Y+3, r18	; 0x03
     6b8:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <currentDriveSpeed.2007+0x3>
     6bc:	3c 83       	std	Y+4, r19	; 0x04
     6be:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <currentDriveSpeed.2007+0x4>
     6c2:	4d 83       	std	Y+5, r20	; 0x05
     6c4:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <currentDriveSpeed.2007+0x5>
     6c8:	5e 83       	std	Y+6, r21	; 0x06
     6ca:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <currentDriveSpeed.2007+0x6>
     6ce:	6f 83       	std	Y+7, r22	; 0x07
     6d0:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <currentDriveSpeed.2007+0x7>
     6d4:	78 87       	std	Y+8, r23	; 0x08
     6d6:	20 2f       	mov	r18, r16
     6d8:	31 2f       	mov	r19, r17
     6da:	4b 81       	ldd	r20, Y+3	; 0x03
     6dc:	5c 81       	ldd	r21, Y+4	; 0x04
     6de:	6d 81       	ldd	r22, Y+5	; 0x05
     6e0:	7e 81       	ldd	r23, Y+6	; 0x06
     6e2:	8f 81       	ldd	r24, Y+7	; 0x07
     6e4:	98 85       	ldd	r25, Y+8	; 0x08
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__cmpdi2_s8>
     6ec:	59 f4       	brne	.+22     	; 0x704 <motorDriver+0x1d0>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     6ee:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2004+0x1>
     6f2:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2004>
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	if(rp6Data.accelerationRate >= 5000){
     6f6:	88 e8       	ldi	r24, 0x88	; 136
     6f8:	88 16       	cp	r8, r24
     6fa:	83 e1       	ldi	r24, 0x13	; 19
     6fc:	98 06       	cpc	r9, r24
     6fe:	08 f4       	brcc	.+2      	; 0x702 <motorDriver+0x1ce>
     700:	71 c0       	rjmp	.+226    	; 0x7e4 <motorDriver+0x2b0>
     702:	09 c0       	rjmp	.+18     	; 0x716 <motorDriver+0x1e2>
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	a9 01       	movw	r20, r18
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	if(rp6Data.accelerationRate >= 5000){
     70a:	98 e8       	ldi	r25, 0x88	; 136
     70c:	89 16       	cp	r8, r25
     70e:	93 e1       	ldi	r25, 0x13	; 19
     710:	99 06       	cpc	r9, r25
     712:	b8 f0       	brcs	.+46     	; 0x742 <motorDriver+0x20e>
     714:	03 c0       	rjmp	.+6      	; 0x71c <motorDriver+0x1e8>
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
	}
	
	if(rp6Data.accelerationRate >= 5000){
		currentDriveSpeed = rp6Data.driveSpeed;
     71c:	89 01       	movw	r16, r18
     71e:	9a 01       	movw	r18, r20
     720:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <currentDriveSpeed.2007>
     724:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <currentDriveSpeed.2007+0x1>
     728:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <currentDriveSpeed.2007+0x2>
     72c:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <currentDriveSpeed.2007+0x3>
     730:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.2007+0x4>
     734:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.2007+0x5>
     738:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.2007+0x6>
     73c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.2007+0x7>
     740:	94 c1       	rjmp	.+808    	; 0xa6a <__stack+0x20b>
	}else{
		//Smoothly adjust current drive speed to requested drive speed
		speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     742:	59 01       	movw	r10, r18
     744:	6a 01       	movw	r12, r20
     746:	e1 2c       	mov	r14, r1
     748:	f1 2c       	mov	r15, r1
     74a:	87 01       	movw	r16, r14
     74c:	29 83       	std	Y+1, r18	; 0x01
     74e:	ba 82       	std	Y+2, r11	; 0x02
     750:	cb 82       	std	Y+3, r12	; 0x03
     752:	dc 82       	std	Y+4, r13	; 0x04
     754:	ed 82       	std	Y+5, r14	; 0x05
     756:	fe 82       	std	Y+6, r15	; 0x06
     758:	0f 83       	std	Y+7, r16	; 0x07
     75a:	18 87       	std	Y+8, r17	; 0x08
     75c:	b0 90 74 00 	lds	r11, 0x0074	; 0x800074 <currentDriveSpeed.2007>
     760:	b9 86       	std	Y+9, r11	; 0x09
     762:	c0 90 75 00 	lds	r12, 0x0075	; 0x800075 <currentDriveSpeed.2007+0x1>
     766:	ca 86       	std	Y+10, r12	; 0x0a
     768:	d0 90 76 00 	lds	r13, 0x0076	; 0x800076 <currentDriveSpeed.2007+0x2>
     76c:	dc a6       	std	Y+44, r13	; 0x2c
     76e:	e0 90 77 00 	lds	r14, 0x0077	; 0x800077 <currentDriveSpeed.2007+0x3>
     772:	ed a6       	std	Y+45, r14	; 0x2d
     774:	f0 90 78 00 	lds	r15, 0x0078	; 0x800078 <currentDriveSpeed.2007+0x4>
     778:	fe a6       	std	Y+46, r15	; 0x2e
     77a:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <currentDriveSpeed.2007+0x5>
     77e:	0f a7       	std	Y+47, r16	; 0x2f
     780:	10 91 7a 00 	lds	r17, 0x007A	; 0x80007a <currentDriveSpeed.2007+0x6>
     784:	18 ab       	std	Y+48, r17	; 0x30
     786:	40 90 7b 00 	lds	r4, 0x007B	; 0x80007b <currentDriveSpeed.2007+0x7>
     78a:	2a 2d       	mov	r18, r10
     78c:	3a 81       	ldd	r19, Y+2	; 0x02
     78e:	4b 81       	ldd	r20, Y+3	; 0x03
     790:	5c 81       	ldd	r21, Y+4	; 0x04
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	ab 2c       	mov	r10, r11
     79c:	bc 2c       	mov	r11, r12
     79e:	cd 2c       	mov	r12, r13
     7a0:	de 2c       	mov	r13, r14
     7a2:	ef 2c       	mov	r14, r15
     7a4:	f0 2e       	mov	r15, r16
     7a6:	01 2f       	mov	r16, r17
     7a8:	14 2d       	mov	r17, r4
     7aa:	0e 94 be 0b 	call	0x177c	; 0x177c <__subdi3>
     7ae:	2c a3       	std	Y+36, r18	; 0x24
     7b0:	39 ab       	std	Y+49, r19	; 0x31
     7b2:	4a ab       	std	Y+50, r20	; 0x32
     7b4:	5b ab       	std	Y+51, r21	; 0x33
     7b6:	a6 2e       	mov	r10, r22
     7b8:	b7 2e       	mov	r11, r23
     7ba:	08 2f       	mov	r16, r24
     7bc:	19 2f       	mov	r17, r25
     7be:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__floatdisf>
     7c2:	6b 01       	movw	r12, r22
     7c4:	7c 01       	movw	r14, r24
     7c6:	a7 01       	movw	r20, r14
     7c8:	96 01       	movw	r18, r12
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     7d2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <sqrt>
	
		if(speedDifference < 2000){														//If the difference is less than 2000
     7d6:	0e 94 c7 09 	call	0x138e	; 0x138e <__fixunssfsi>
     7da:	60 3d       	cpi	r22, 0xD0	; 208
     7dc:	77 40       	sbci	r23, 0x07	; 7
     7de:	81 05       	cpc	r24, r1
     7e0:	91 05       	cpc	r25, r1
     7e2:	c8 f4       	brcc	.+50     	; 0x816 <motorDriver+0x2e2>
			currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     7e4:	39 81       	ldd	r19, Y+1	; 0x01
     7e6:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <currentDriveSpeed.2007>
     7ea:	4a 81       	ldd	r20, Y+2	; 0x02
     7ec:	40 93 75 00 	sts	0x0075, r20	; 0x800075 <currentDriveSpeed.2007+0x1>
     7f0:	5b 81       	ldd	r21, Y+3	; 0x03
     7f2:	50 93 76 00 	sts	0x0076, r21	; 0x800076 <currentDriveSpeed.2007+0x2>
     7f6:	6c 81       	ldd	r22, Y+4	; 0x04
     7f8:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <currentDriveSpeed.2007+0x3>
     7fc:	7d 81       	ldd	r23, Y+5	; 0x05
     7fe:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <currentDriveSpeed.2007+0x4>
     802:	8e 81       	ldd	r24, Y+6	; 0x06
     804:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <currentDriveSpeed.2007+0x5>
     808:	9f 81       	ldd	r25, Y+7	; 0x07
     80a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <currentDriveSpeed.2007+0x6>
     80e:	a8 85       	ldd	r26, Y+8	; 0x08
     810:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <currentDriveSpeed.2007+0x7>
     814:	2a c1       	rjmp	.+596    	; 0xa6a <__stack+0x20b>
		}else{																			//If the difference is more than 2000
			if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     816:	2c a1       	ldd	r18, Y+36	; 0x24
     818:	39 a9       	ldd	r19, Y+49	; 0x31
     81a:	4a a9       	ldd	r20, Y+50	; 0x32
     81c:	5b a9       	ldd	r21, Y+51	; 0x33
     81e:	6a 2d       	mov	r22, r10
     820:	7b 2d       	mov	r23, r11
     822:	80 2f       	mov	r24, r16
     824:	91 2f       	mov	r25, r17
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__cmpdi2_s8>
     82c:	0c f0       	brlt	.+2      	; 0x830 <motorDriver+0x2fc>
     82e:	63 c0       	rjmp	.+198    	; 0x8f6 <__stack+0x97>
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     830:	51 01       	movw	r10, r2
     832:	c1 2c       	mov	r12, r1
     834:	d1 2c       	mov	r13, r1
     836:	e1 2c       	mov	r14, r1
     838:	f1 2c       	mov	r15, r1
     83a:	87 01       	movw	r16, r14
     83c:	29 85       	ldd	r18, Y+9	; 0x09
     83e:	3a 85       	ldd	r19, Y+10	; 0x0a
     840:	4c a5       	ldd	r20, Y+44	; 0x2c
     842:	5d a5       	ldd	r21, Y+45	; 0x2d
     844:	6e a5       	ldd	r22, Y+46	; 0x2e
     846:	7f a5       	ldd	r23, Y+47	; 0x2f
     848:	88 a9       	ldd	r24, Y+48	; 0x30
     84a:	94 2d       	mov	r25, r4
     84c:	2c a2       	std	Y+36, r2	; 0x24
     84e:	bd a2       	std	Y+37, r11	; 0x25
     850:	ce a2       	std	Y+38, r12	; 0x26
     852:	df a2       	std	Y+39, r13	; 0x27
     854:	e8 a6       	std	Y+40, r14	; 0x28
     856:	f9 a6       	std	Y+41, r15	; 0x29
     858:	0a a7       	std	Y+42, r16	; 0x2a
     85a:	1b a7       	std	Y+43, r17	; 0x2b
     85c:	c1 2c       	mov	r12, r1
     85e:	d1 2c       	mov	r13, r1
     860:	e1 2c       	mov	r14, r1
     862:	f1 2c       	mov	r15, r1
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	10 e0       	ldi	r17, 0x00	; 0
     868:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
     86c:	cc f4       	brge	.+50     	; 0x8a0 <__stack+0x41>
					currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     86e:	b9 81       	ldd	r27, Y+1	; 0x01
     870:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2007>
     874:	ea 81       	ldd	r30, Y+2	; 0x02
     876:	e0 93 75 00 	sts	0x0075, r30	; 0x800075 <currentDriveSpeed.2007+0x1>
     87a:	ab 80       	ldd	r10, Y+3	; 0x03
     87c:	a0 92 76 00 	sts	0x0076, r10	; 0x800076 <currentDriveSpeed.2007+0x2>
     880:	bc 80       	ldd	r11, Y+4	; 0x04
     882:	b0 92 77 00 	sts	0x0077, r11	; 0x800077 <currentDriveSpeed.2007+0x3>
     886:	cd 80       	ldd	r12, Y+5	; 0x05
     888:	c0 92 78 00 	sts	0x0078, r12	; 0x800078 <currentDriveSpeed.2007+0x4>
     88c:	de 80       	ldd	r13, Y+6	; 0x06
     88e:	d0 92 79 00 	sts	0x0079, r13	; 0x800079 <currentDriveSpeed.2007+0x5>
     892:	ef 80       	ldd	r14, Y+7	; 0x07
     894:	e0 92 7a 00 	sts	0x007A, r14	; 0x80007a <currentDriveSpeed.2007+0x6>
     898:	f8 84       	ldd	r15, Y+8	; 0x08
     89a:	f0 92 7b 00 	sts	0x007B, r15	; 0x80007b <currentDriveSpeed.2007+0x7>
     89e:	e5 c0       	rjmp	.+458    	; 0xa6a <__stack+0x20b>
				}else{																			//If the current speed is higher than 5000
					currentDriveSpeed -= rp6Data.accelerationRate;							//Decelerate with a given percentage of the current speed, determined by accelerationRate
     8a0:	84 01       	movw	r16, r8
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	ba 01       	movw	r22, r20
     8a8:	4d 83       	std	Y+5, r20	; 0x05
     8aa:	5e 83       	std	Y+6, r21	; 0x06
     8ac:	6f 83       	std	Y+7, r22	; 0x07
     8ae:	78 87       	std	Y+8, r23	; 0x08
     8b0:	29 85       	ldd	r18, Y+9	; 0x09
     8b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b4:	4c a5       	ldd	r20, Y+44	; 0x2c
     8b6:	5d a5       	ldd	r21, Y+45	; 0x2d
     8b8:	6e a5       	ldd	r22, Y+46	; 0x2e
     8ba:	7f a5       	ldd	r23, Y+47	; 0x2f
     8bc:	88 a9       	ldd	r24, Y+48	; 0x30
     8be:	94 2d       	mov	r25, r4
     8c0:	a8 2c       	mov	r10, r8
     8c2:	b1 2e       	mov	r11, r17
     8c4:	c1 2c       	mov	r12, r1
     8c6:	d1 2c       	mov	r13, r1
     8c8:	e1 2c       	mov	r14, r1
     8ca:	f1 2c       	mov	r15, r1
     8cc:	00 e0       	ldi	r16, 0x00	; 0
     8ce:	10 e0       	ldi	r17, 0x00	; 0
     8d0:	0e 94 be 0b 	call	0x177c	; 0x177c <__subdi3>
     8d4:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2007>
     8d8:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2007+0x1>
     8dc:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2007+0x2>
     8e0:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2007+0x3>
     8e4:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2007+0x4>
     8e8:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2007+0x5>
     8ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2007+0x6>
     8f0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2007+0x7>
     8f4:	ba c0       	rjmp	.+372    	; 0xa6a <__stack+0x20b>
				}
			}else{																			//If we need to accelerate
				if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     8f6:	91 01       	movw	r18, r2
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	cb 01       	movw	r24, r22
     902:	2c a2       	std	Y+36, r2	; 0x24
     904:	3d a3       	std	Y+37, r19	; 0x25
     906:	4e a3       	std	Y+38, r20	; 0x26
     908:	5f a3       	std	Y+39, r21	; 0x27
     90a:	68 a7       	std	Y+40, r22	; 0x28
     90c:	79 a7       	std	Y+41, r23	; 0x29
     90e:	8a a7       	std	Y+42, r24	; 0x2a
     910:	9b a7       	std	Y+43, r25	; 0x2b
     912:	29 85       	ldd	r18, Y+9	; 0x09
     914:	3a 85       	ldd	r19, Y+10	; 0x0a
     916:	4c a5       	ldd	r20, Y+44	; 0x2c
     918:	5d a5       	ldd	r21, Y+45	; 0x2d
     91a:	6e a5       	ldd	r22, Y+46	; 0x2e
     91c:	7f a5       	ldd	r23, Y+47	; 0x2f
     91e:	88 a9       	ldd	r24, Y+48	; 0x30
     920:	94 2d       	mov	r25, r4
     922:	ac a0       	ldd	r10, Y+36	; 0x24
     924:	bd a0       	ldd	r11, Y+37	; 0x25
     926:	c1 2c       	mov	r12, r1
     928:	d1 2c       	mov	r13, r1
     92a:	e1 2c       	mov	r14, r1
     92c:	f1 2c       	mov	r15, r1
     92e:	00 e0       	ldi	r16, 0x00	; 0
     930:	10 e0       	ldi	r17, 0x00	; 0
     932:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
     936:	9c f4       	brge	.+38     	; 0x95e <__stack+0xff>
					currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     938:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
     93c:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2007>
     940:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2007+0x1>
     944:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2007+0x2>
     948:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2007+0x3>
     94c:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2007+0x4>
     950:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2007+0x5>
     954:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2007+0x6>
     958:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2007+0x7>
     95c:	86 c0       	rjmp	.+268    	; 0xa6a <__stack+0x20b>
				}else{																			//If we are at a speed higher than the threshold
					if(currentDriveSpeed < 7000){currentDriveSpeed += rp6Data.accelerationRate/4;}
     95e:	29 85       	ldd	r18, Y+9	; 0x09
     960:	3a 85       	ldd	r19, Y+10	; 0x0a
     962:	4c a5       	ldd	r20, Y+44	; 0x2c
     964:	5d a5       	ldd	r21, Y+45	; 0x2d
     966:	6e a5       	ldd	r22, Y+46	; 0x2e
     968:	7f a5       	ldd	r23, Y+47	; 0x2f
     96a:	88 a9       	ldd	r24, Y+48	; 0x30
     96c:	94 2d       	mov	r25, r4
     96e:	27 35       	cpi	r18, 0x57	; 87
     970:	3b 41       	sbci	r19, 0x1B	; 27
     972:	41 05       	cpc	r20, r1
     974:	51 05       	cpc	r21, r1
     976:	61 05       	cpc	r22, r1
     978:	71 05       	cpc	r23, r1
     97a:	81 05       	cpc	r24, r1
     97c:	91 05       	cpc	r25, r1
     97e:	09 f0       	breq	.+2      	; 0x982 <__stack+0x123>
     980:	3c f5       	brge	.+78     	; 0x9d0 <__stack+0x171>
     982:	96 94       	lsr	r9
     984:	87 94       	ror	r8
     986:	96 94       	lsr	r9
     988:	87 94       	ror	r8
     98a:	28 2d       	mov	r18, r8
     98c:	39 2d       	mov	r19, r9
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a9 84       	ldd	r10, Y+9	; 0x09
     99c:	ba 84       	ldd	r11, Y+10	; 0x0a
     99e:	cc a4       	ldd	r12, Y+44	; 0x2c
     9a0:	dd a4       	ldd	r13, Y+45	; 0x2d
     9a2:	ee a4       	ldd	r14, Y+46	; 0x2e
     9a4:	ff a4       	ldd	r15, Y+47	; 0x2f
     9a6:	08 a9       	ldd	r16, Y+48	; 0x30
     9a8:	14 2d       	mov	r17, r4
     9aa:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
     9ae:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2007>
     9b2:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2007+0x1>
     9b6:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2007+0x2>
     9ba:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2007+0x3>
     9be:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2007+0x4>
     9c2:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2007+0x5>
     9c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2007+0x6>
     9ca:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2007+0x7>
     9ce:	22 c0       	rjmp	.+68     	; 0xa14 <__stack+0x1b5>
					else{currentDriveSpeed += rp6Data.accelerationRate;}							//Accelerate with a percentage of the current speed, determined by accelerationRate
     9d0:	28 2d       	mov	r18, r8
     9d2:	39 2d       	mov	r19, r9
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a9 84       	ldd	r10, Y+9	; 0x09
     9e2:	ba 84       	ldd	r11, Y+10	; 0x0a
     9e4:	cc a4       	ldd	r12, Y+44	; 0x2c
     9e6:	dd a4       	ldd	r13, Y+45	; 0x2d
     9e8:	ee a4       	ldd	r14, Y+46	; 0x2e
     9ea:	ff a4       	ldd	r15, Y+47	; 0x2f
     9ec:	08 a9       	ldd	r16, Y+48	; 0x30
     9ee:	14 2d       	mov	r17, r4
     9f0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
     9f4:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2007>
     9f8:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2007+0x1>
     9fc:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2007+0x2>
     a00:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2007+0x3>
     a04:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2007+0x4>
     a08:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2007+0x5>
     a0c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2007+0x6>
     a10:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2007+0x7>
					if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     a14:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <currentDriveSpeed.2007>
     a18:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <currentDriveSpeed.2007+0x1>
     a1c:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <currentDriveSpeed.2007+0x2>
     a20:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <currentDriveSpeed.2007+0x3>
     a24:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <currentDriveSpeed.2007+0x4>
     a28:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <currentDriveSpeed.2007+0x5>
     a2c:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <currentDriveSpeed.2007+0x6>
     a30:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <currentDriveSpeed.2007+0x7>
     a34:	29 81       	ldd	r18, Y+1	; 0x01
     a36:	3a 81       	ldd	r19, Y+2	; 0x02
     a38:	4b 81       	ldd	r20, Y+3	; 0x03
     a3a:	5c 81       	ldd	r21, Y+4	; 0x04
     a3c:	6d 81       	ldd	r22, Y+5	; 0x05
     a3e:	7e 81       	ldd	r23, Y+6	; 0x06
     a40:	8f 81       	ldd	r24, Y+7	; 0x07
     a42:	98 85       	ldd	r25, Y+8	; 0x08
     a44:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
     a48:	84 f4       	brge	.+32     	; 0xa6a <__stack+0x20b>
     a4a:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2007>
     a4e:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2007+0x1>
     a52:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2007+0x2>
     a56:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2007+0x3>
     a5a:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2007+0x4>
     a5e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2007+0x5>
     a62:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2007+0x6>
     a66:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2007+0x7>
			}
		}
	}
	
	
	if(currentDriveSpeed < 0){
     a6a:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <currentDriveSpeed.2007>
     a6e:	e0 90 75 00 	lds	r14, 0x0075	; 0x800075 <currentDriveSpeed.2007+0x1>
     a72:	f0 90 76 00 	lds	r15, 0x0076	; 0x800076 <currentDriveSpeed.2007+0x2>
     a76:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <currentDriveSpeed.2007+0x3>
     a7a:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <currentDriveSpeed.2007+0x4>
     a7e:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <currentDriveSpeed.2007+0x5>
     a82:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <currentDriveSpeed.2007+0x6>
     a86:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <currentDriveSpeed.2007+0x7>
     a8a:	2d 2d       	mov	r18, r13
     a8c:	3e 2d       	mov	r19, r14
     a8e:	4f 2d       	mov	r20, r15
     a90:	50 2f       	mov	r21, r16
     a92:	61 2f       	mov	r22, r17
     a94:	7b 2f       	mov	r23, r27
     a96:	8f 2f       	mov	r24, r31
     a98:	9e 2f       	mov	r25, r30
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__cmpdi2_s8>
     aa0:	8c f4       	brge	.+34     	; 0xac4 <__stack+0x265>
		currentDriveSpeed = 0;
     aa2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <currentDriveSpeed.2007>
     aa6:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <currentDriveSpeed.2007+0x1>
     aaa:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <currentDriveSpeed.2007+0x2>
     aae:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <currentDriveSpeed.2007+0x3>
     ab2:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.2007+0x4>
     ab6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.2007+0x5>
     aba:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.2007+0x6>
     abe:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.2007+0x7>
     ac2:	23 c0       	rjmp	.+70     	; 0xb0a <__stack+0x2ab>
	}else if(currentDriveSpeed > 25600){
     ac4:	2d 2d       	mov	r18, r13
     ac6:	3e 2d       	mov	r19, r14
     ac8:	4f 2d       	mov	r20, r15
     aca:	50 2f       	mov	r21, r16
     acc:	61 2f       	mov	r22, r17
     ace:	7b 2f       	mov	r23, r27
     ad0:	8f 2f       	mov	r24, r31
     ad2:	9e 2f       	mov	r25, r30
     ad4:	21 15       	cp	r18, r1
     ad6:	34 46       	sbci	r19, 0x64	; 100
     ad8:	41 05       	cpc	r20, r1
     ada:	51 05       	cpc	r21, r1
     adc:	61 05       	cpc	r22, r1
     ade:	71 05       	cpc	r23, r1
     ae0:	81 05       	cpc	r24, r1
     ae2:	91 05       	cpc	r25, r1
     ae4:	91 f0       	breq	.+36     	; 0xb0a <__stack+0x2ab>
     ae6:	8c f0       	brlt	.+34     	; 0xb0a <__stack+0x2ab>
		currentDriveSpeed = 25600;
     ae8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <currentDriveSpeed.2007>
     aec:	84 e6       	ldi	r24, 0x64	; 100
     aee:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <currentDriveSpeed.2007+0x1>
     af2:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <currentDriveSpeed.2007+0x2>
     af6:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <currentDriveSpeed.2007+0x3>
     afa:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <currentDriveSpeed.2007+0x4>
     afe:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <currentDriveSpeed.2007+0x5>
     b02:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <currentDriveSpeed.2007+0x6>
     b06:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <currentDriveSpeed.2007+0x7>
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     b0a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2004>
     b0e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2004+0x1>
     b12:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2008+0x1>
     b16:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2008>
	rightMotorDirection = currentDriveDirection;
     b1a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     b1e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     b22:	90 90 74 00 	lds	r9, 0x0074	; 0x800074 <currentDriveSpeed.2007>
     b26:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <currentDriveSpeed.2007+0x1>
     b2a:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <currentDriveSpeed.2007+0x2>
     b2e:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <currentDriveSpeed.2007+0x3>
     b32:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <currentDriveSpeed.2007+0x4>
     b36:	19 87       	std	Y+9, r17	; 0x09
     b38:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <currentDriveSpeed.2007+0x5>
     b3c:	2a 87       	std	Y+10, r18	; 0x0a
     b3e:	80 90 7a 00 	lds	r8, 0x007A	; 0x80007a <currentDriveSpeed.2007+0x6>
     b42:	40 90 7b 00 	lds	r4, 0x007B	; 0x80007b <currentDriveSpeed.2007+0x7>
     b46:	99 82       	std	Y+1, r9	; 0x01
     b48:	ba 83       	std	Y+2, r27	; 0x02
     b4a:	fb 83       	std	Y+3, r31	; 0x03
     b4c:	ec 83       	std	Y+4, r30	; 0x04
     b4e:	90 92 70 00 	sts	0x0070, r9	; 0x800070 <leftMotorSpeed.2010>
     b52:	b0 93 71 00 	sts	0x0071, r27	; 0x800071 <leftMotorSpeed.2010+0x1>
     b56:	f0 93 72 00 	sts	0x0072, r31	; 0x800072 <leftMotorSpeed.2010+0x2>
     b5a:	e0 93 73 00 	sts	0x0073, r30	; 0x800073 <leftMotorSpeed.2010+0x3>
	rightMotorSpeed = currentDriveSpeed;
     b5e:	90 92 6c 00 	sts	0x006C, r9	; 0x80006c <rightMotorSpeed.2011>
     b62:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <rightMotorSpeed.2011+0x1>
     b66:	f0 93 6e 00 	sts	0x006E, r31	; 0x80006e <rightMotorSpeed.2011+0x2>
     b6a:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <rightMotorSpeed.2011+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     b6e:	3e 85       	ldd	r19, Y+14	; 0x0e
     b70:	83 2f       	mov	r24, r19
     b72:	33 0f       	add	r19, r19
     b74:	99 0b       	sbc	r25, r25
     b76:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <currentTurnDirection.2005>
     b7a:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <currentTurnDirection.2005+0x1>
     b7e:	82 17       	cp	r24, r18
     b80:	93 07       	cpc	r25, r19
     b82:	29 f1       	breq	.+74     	; 0xbce <__stack+0x36f>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     b84:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <currentTurnDirection.2005+0x1>
     b88:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentTurnDirection.2005>
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     b8c:	25 2d       	mov	r18, r5
     b8e:	36 2d       	mov	r19, r6
     b90:	47 2d       	mov	r20, r7
     b92:	5e 89       	ldd	r21, Y+22	; 0x16
     b94:	68 a1       	ldd	r22, Y+32	; 0x20
     b96:	79 a1       	ldd	r23, Y+33	; 0x21
     b98:	8a a1       	ldd	r24, Y+34	; 0x22
     b9a:	9b a1       	ldd	r25, Y+35	; 0x23
     b9c:	20 56       	subi	r18, 0x60	; 96
     b9e:	39 47       	sbci	r19, 0x79	; 121
     ba0:	4e 4f       	sbci	r20, 0xFE	; 254
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	6f 4f       	sbci	r22, 0xFF	; 255
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	8f 4f       	sbci	r24, 0xFF	; 255
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.2003>
     bb0:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.2003+0x1>
     bb4:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.2003+0x2>
     bb8:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.2003+0x3>
     bbc:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.2003+0x4>
     bc0:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.2003+0x5>
     bc4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.2003+0x6>
     bc8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.2003+0x7>
     bcc:	26 c2       	rjmp	.+1100   	; 0x101a <__stack+0x7bb>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     bce:	8f 3f       	cpi	r24, 0xFF	; 255
     bd0:	4f ef       	ldi	r20, 0xFF	; 255
     bd2:	94 07       	cpc	r25, r20
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <__stack+0x379>
     bd6:	0f c1       	rjmp	.+542    	; 0xdf6 <__stack+0x597>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     bd8:	29 2d       	mov	r18, r9
     bda:	3b 2f       	mov	r19, r27
     bdc:	4f 2f       	mov	r20, r31
     bde:	5e 2f       	mov	r21, r30
     be0:	69 85       	ldd	r22, Y+9	; 0x09
     be2:	7a 85       	ldd	r23, Y+10	; 0x0a
     be4:	88 2d       	mov	r24, r8
     be6:	94 2d       	mov	r25, r4
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__cmpdi2_s8>
     bee:	31 f5       	brne	.+76     	; 0xc3c <__stack+0x3dd>
			leftMotorDirection = 0;											//Turn the left motor backwards
     bf0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2008+0x1>
     bf4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2008>
			rightMotorDirection = 1;										//Turn the right motor forwards
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     c00:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//Set the speed to minimal + twice the turn rate
     c04:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c06:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c08:	36 95       	lsr	r19
     c0a:	27 95       	ror	r18
     c0c:	c1 01       	movw	r24, r2
     c0e:	80 53       	subi	r24, 0x30	; 48
     c10:	98 4f       	sbci	r25, 0xF8	; 248
     c12:	82 0f       	add	r24, r18
     c14:	93 1f       	adc	r25, r19
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
     c1e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
     c22:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
     c26:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//---^
     c2a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     c2e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     c32:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     c36:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
     c3a:	0f c2       	rjmp	.+1054   	; 0x105a <__stack+0x7fb>
		}else{															//If we are driving (Forward or backwards does not matter)
			
			if((currentDriveSpeed - rp6Data.turnRate) < (rp6Data.driveSpeedThreshold + 2000)){
     c3c:	ce 8c       	ldd	r12, Y+30	; 0x1e
     c3e:	df 8c       	ldd	r13, Y+31	; 0x1f
     c40:	56 01       	movw	r10, r12
     c42:	c1 2c       	mov	r12, r1
     c44:	d1 2c       	mov	r13, r1
     c46:	e1 2c       	mov	r14, r1
     c48:	f1 2c       	mov	r15, r1
     c4a:	87 01       	movw	r16, r14
     c4c:	ae 86       	std	Y+14, r10	; 0x0e
     c4e:	bf 86       	std	Y+15, r11	; 0x0f
     c50:	c8 8a       	std	Y+16, r12	; 0x10
     c52:	d9 8a       	std	Y+17, r13	; 0x11
     c54:	ea 8a       	std	Y+18, r14	; 0x12
     c56:	fb 8a       	std	Y+19, r15	; 0x13
     c58:	0c 8b       	std	Y+20, r16	; 0x14
     c5a:	1d 8b       	std	Y+21, r17	; 0x15
     c5c:	31 01       	movw	r6, r2
     c5e:	00 e3       	ldi	r16, 0x30	; 48
     c60:	60 1a       	sub	r6, r16
     c62:	08 ef       	ldi	r16, 0xF8	; 248
     c64:	70 0a       	sbc	r7, r16
     c66:	29 2d       	mov	r18, r9
     c68:	3b 2f       	mov	r19, r27
     c6a:	4f 2f       	mov	r20, r31
     c6c:	5e 2f       	mov	r21, r30
     c6e:	69 85       	ldd	r22, Y+9	; 0x09
     c70:	7a 85       	ldd	r23, Y+10	; 0x0a
     c72:	88 2d       	mov	r24, r8
     c74:	94 2d       	mov	r25, r4
     c76:	c1 2c       	mov	r12, r1
     c78:	d1 2c       	mov	r13, r1
     c7a:	e1 2c       	mov	r14, r1
     c7c:	f1 2c       	mov	r15, r1
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	0e 94 be 0b 	call	0x177c	; 0x177c <__subdi3>
     c86:	53 01       	movw	r10, r6
     c88:	c1 2c       	mov	r12, r1
     c8a:	d1 2c       	mov	r13, r1
     c8c:	e1 2c       	mov	r14, r1
     c8e:	f1 2c       	mov	r15, r1
     c90:	87 01       	movw	r16, r14
     c92:	6e 8a       	std	Y+22, r6	; 0x16
     c94:	bf 8a       	std	Y+23, r11	; 0x17
     c96:	c8 8e       	std	Y+24, r12	; 0x18
     c98:	d9 8e       	std	Y+25, r13	; 0x19
     c9a:	ea 8e       	std	Y+26, r14	; 0x1a
     c9c:	fb 8e       	std	Y+27, r15	; 0x1b
     c9e:	0c 8f       	std	Y+28, r16	; 0x1c
     ca0:	1d 8f       	std	Y+29, r17	; 0x1d
     ca2:	c1 2c       	mov	r12, r1
     ca4:	d1 2c       	mov	r13, r1
     ca6:	e1 2c       	mov	r14, r1
     ca8:	f1 2c       	mov	r15, r1
     caa:	00 e0       	ldi	r16, 0x00	; 0
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
     cb2:	7c f5       	brge	.+94     	; 0xd12 <__stack+0x4b3>
				leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000;
     cb4:	c3 01       	movw	r24, r6
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
     cbe:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
     cc2:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
     cc6:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
				if((leftMotorSpeed + (rp6Data.turnRate * 2)) > 25600){
     cca:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ccc:	3f 8d       	ldd	r19, Y+31	; 0x1f
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	a1 1d       	adc	r26, r1
     cd8:	b1 1d       	adc	r27, r1
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	04 e6       	ldi	r16, 0x64	; 100
     cde:	90 07       	cpc	r25, r16
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	68 f0       	brcs	.+26     	; 0xd00 <__stack+0x4a1>
					rightMotorSpeed = 25600;
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	94 e6       	ldi	r25, 0x64	; 100
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     cf2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     cf6:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     cfa:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
     cfe:	99 c1       	rjmp	.+818    	; 0x1032 <__stack+0x7d3>
				}else{
					rightMotorSpeed = (leftMotorSpeed + (rp6Data.turnRate * 2));
     d00:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     d04:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     d08:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     d0c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
     d10:	90 c1       	rjmp	.+800    	; 0x1032 <__stack+0x7d3>
				}
			}else if((currentDriveSpeed + rp6Data.turnRate) > 25600){
     d12:	29 2d       	mov	r18, r9
     d14:	3b 2f       	mov	r19, r27
     d16:	4f 2f       	mov	r20, r31
     d18:	5e 2f       	mov	r21, r30
     d1a:	69 85       	ldd	r22, Y+9	; 0x09
     d1c:	7a 85       	ldd	r23, Y+10	; 0x0a
     d1e:	88 2d       	mov	r24, r8
     d20:	94 2d       	mov	r25, r4
     d22:	ae 84       	ldd	r10, Y+14	; 0x0e
     d24:	bf 84       	ldd	r11, Y+15	; 0x0f
     d26:	c1 2c       	mov	r12, r1
     d28:	d1 2c       	mov	r13, r1
     d2a:	e1 2c       	mov	r14, r1
     d2c:	f1 2c       	mov	r15, r1
     d2e:	00 e0       	ldi	r16, 0x00	; 0
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
     d36:	21 15       	cp	r18, r1
     d38:	34 46       	sbci	r19, 0x64	; 100
     d3a:	41 05       	cpc	r20, r1
     d3c:	51 05       	cpc	r21, r1
     d3e:	61 05       	cpc	r22, r1
     d40:	71 05       	cpc	r23, r1
     d42:	81 05       	cpc	r24, r1
     d44:	91 05       	cpc	r25, r1
     d46:	89 f1       	breq	.+98     	; 0xdaa <__stack+0x54b>
     d48:	84 f1       	brlt	.+96     	; 0xdaa <__stack+0x54b>
				rightMotorSpeed = 25600;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	94 e6       	ldi	r25, 0x64	; 100
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     d56:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     d5a:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     d5e:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
				if((rightMotorSpeed - (rp6Data.turnRate * 2)) < (rp6Data.driveSpeedThreshold + 2000)){
     d62:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d64:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	ac 01       	movw	r20, r24
     d6c:	bd 01       	movw	r22, r26
     d6e:	42 1b       	sub	r20, r18
     d70:	53 0b       	sbc	r21, r19
     d72:	61 09       	sbc	r22, r1
     d74:	71 09       	sbc	r23, r1
     d76:	c3 01       	movw	r24, r6
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	48 17       	cp	r20, r24
     d7e:	59 07       	cpc	r21, r25
     d80:	6a 07       	cpc	r22, r26
     d82:	7b 07       	cpc	r23, r27
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x539>
					leftMotorSpeed = (rp6Data.driveSpeedThreshold + 2000);
     d86:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
     d8a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
     d8e:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
     d92:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
     d96:	4d c1       	rjmp	.+666    	; 0x1032 <__stack+0x7d3>
				}else{
					leftMotorSpeed = (rightMotorSpeed - (rp6Data.turnRate * 2));
     d98:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <leftMotorSpeed.2010>
     d9c:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <leftMotorSpeed.2010+0x1>
     da0:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <leftMotorSpeed.2010+0x2>
     da4:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <leftMotorSpeed.2010+0x3>
     da8:	44 c1       	rjmp	.+648    	; 0x1032 <__stack+0x7d3>
				}
			}else{
				leftMotorSpeed = (currentDriveSpeed - rp6Data.turnRate);
     daa:	2e 8d       	ldd	r18, Y+30	; 0x1e
     dac:	3f 8d       	ldd	r19, Y+31	; 0x1f
     dae:	c9 01       	movw	r24, r18
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	49 81       	ldd	r20, Y+1	; 0x01
     db6:	5a 81       	ldd	r21, Y+2	; 0x02
     db8:	6b 81       	ldd	r22, Y+3	; 0x03
     dba:	7c 81       	ldd	r23, Y+4	; 0x04
     dbc:	48 1b       	sub	r20, r24
     dbe:	59 0b       	sbc	r21, r25
     dc0:	6a 0b       	sbc	r22, r26
     dc2:	7b 0b       	sbc	r23, r27
     dc4:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <leftMotorSpeed.2010>
     dc8:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <leftMotorSpeed.2010+0x1>
     dcc:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <leftMotorSpeed.2010+0x2>
     dd0:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <leftMotorSpeed.2010+0x3>
				rightMotorSpeed = (currentDriveSpeed + rp6Data.turnRate);
     dd4:	49 81       	ldd	r20, Y+1	; 0x01
     dd6:	5a 81       	ldd	r21, Y+2	; 0x02
     dd8:	6b 81       	ldd	r22, Y+3	; 0x03
     dda:	7c 81       	ldd	r23, Y+4	; 0x04
     ddc:	84 0f       	add	r24, r20
     dde:	95 1f       	adc	r25, r21
     de0:	a6 1f       	adc	r26, r22
     de2:	b7 1f       	adc	r27, r23
     de4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     de8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     dec:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     df0:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
     df4:	1e c1       	rjmp	.+572    	; 0x1032 <__stack+0x7d3>
			}
		}
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	09 f0       	breq	.+2      	; 0xdfc <__stack+0x59d>
     dfa:	0f c1       	rjmp	.+542    	; 0x101a <__stack+0x7bb>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     dfc:	29 2d       	mov	r18, r9
     dfe:	3b 2f       	mov	r19, r27
     e00:	4f 2f       	mov	r20, r31
     e02:	5e 2f       	mov	r21, r30
     e04:	69 85       	ldd	r22, Y+9	; 0x09
     e06:	7a 85       	ldd	r23, Y+10	; 0x0a
     e08:	88 2d       	mov	r24, r8
     e0a:	94 2d       	mov	r25, r4
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__cmpdi2_s8>
     e12:	31 f5       	brne	.+76     	; 0xe60 <__stack+0x601>
			leftMotorDirection = 1;											//Left motor forward
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2008+0x1>
     e1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2008>
			rightMotorDirection = 0;										//Right motor backward
     e20:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     e24:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//set motor speed to minimal + twice the turn rate
     e28:	91 01       	movw	r18, r2
     e2a:	20 53       	subi	r18, 0x30	; 48
     e2c:	38 4f       	sbci	r19, 0xF8	; 248
     e2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e30:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e32:	96 95       	lsr	r25
     e34:	87 95       	ror	r24
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	a0 e0       	ldi	r26, 0x00	; 0
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
     e42:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
     e46:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
     e4a:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + (rp6Data.turnRate / 2);				//---^
     e4e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     e52:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     e56:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     e5a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
     e5e:	fd c0       	rjmp	.+506    	; 0x105a <__stack+0x7fb>
		}else{														//If we are driving (Forward or backwards does not matter)
			
			if((currentDriveSpeed - rp6Data.turnRate) < (rp6Data.driveSpeedThreshold + 2000)){
     e60:	ce 8c       	ldd	r12, Y+30	; 0x1e
     e62:	df 8c       	ldd	r13, Y+31	; 0x1f
     e64:	56 01       	movw	r10, r12
     e66:	c1 2c       	mov	r12, r1
     e68:	d1 2c       	mov	r13, r1
     e6a:	e1 2c       	mov	r14, r1
     e6c:	f1 2c       	mov	r15, r1
     e6e:	87 01       	movw	r16, r14
     e70:	ae 86       	std	Y+14, r10	; 0x0e
     e72:	bf 86       	std	Y+15, r11	; 0x0f
     e74:	c8 8a       	std	Y+16, r12	; 0x10
     e76:	d9 8a       	std	Y+17, r13	; 0x11
     e78:	ea 8a       	std	Y+18, r14	; 0x12
     e7a:	fb 8a       	std	Y+19, r15	; 0x13
     e7c:	0c 8b       	std	Y+20, r16	; 0x14
     e7e:	1d 8b       	std	Y+21, r17	; 0x15
     e80:	31 01       	movw	r6, r2
     e82:	00 e3       	ldi	r16, 0x30	; 48
     e84:	60 1a       	sub	r6, r16
     e86:	08 ef       	ldi	r16, 0xF8	; 248
     e88:	70 0a       	sbc	r7, r16
     e8a:	29 2d       	mov	r18, r9
     e8c:	3b 2f       	mov	r19, r27
     e8e:	4f 2f       	mov	r20, r31
     e90:	5e 2f       	mov	r21, r30
     e92:	69 85       	ldd	r22, Y+9	; 0x09
     e94:	7a 85       	ldd	r23, Y+10	; 0x0a
     e96:	88 2d       	mov	r24, r8
     e98:	94 2d       	mov	r25, r4
     e9a:	c1 2c       	mov	r12, r1
     e9c:	d1 2c       	mov	r13, r1
     e9e:	e1 2c       	mov	r14, r1
     ea0:	f1 2c       	mov	r15, r1
     ea2:	00 e0       	ldi	r16, 0x00	; 0
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	0e 94 be 0b 	call	0x177c	; 0x177c <__subdi3>
     eaa:	53 01       	movw	r10, r6
     eac:	c1 2c       	mov	r12, r1
     eae:	d1 2c       	mov	r13, r1
     eb0:	e1 2c       	mov	r14, r1
     eb2:	f1 2c       	mov	r15, r1
     eb4:	87 01       	movw	r16, r14
     eb6:	6e 8a       	std	Y+22, r6	; 0x16
     eb8:	bf 8a       	std	Y+23, r11	; 0x17
     eba:	c8 8e       	std	Y+24, r12	; 0x18
     ebc:	d9 8e       	std	Y+25, r13	; 0x19
     ebe:	ea 8e       	std	Y+26, r14	; 0x1a
     ec0:	fb 8e       	std	Y+27, r15	; 0x1b
     ec2:	0c 8f       	std	Y+28, r16	; 0x1c
     ec4:	1d 8f       	std	Y+29, r17	; 0x1d
     ec6:	c1 2c       	mov	r12, r1
     ec8:	d1 2c       	mov	r13, r1
     eca:	e1 2c       	mov	r14, r1
     ecc:	f1 2c       	mov	r15, r1
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
     ed6:	7c f5       	brge	.+94     	; 0xf36 <__stack+0x6d7>
				rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000;
     ed8:	c3 01       	movw	r24, r6
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     ee2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     ee6:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     eea:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
				if((rightMotorSpeed + (rp6Data.turnRate * 2)) > 25600){
     eee:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ef0:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	82 0f       	add	r24, r18
     ef8:	93 1f       	adc	r25, r19
     efa:	a1 1d       	adc	r26, r1
     efc:	b1 1d       	adc	r27, r1
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	04 e6       	ldi	r16, 0x64	; 100
     f02:	90 07       	cpc	r25, r16
     f04:	a1 05       	cpc	r26, r1
     f06:	b1 05       	cpc	r27, r1
     f08:	68 f0       	brcs	.+26     	; 0xf24 <__stack+0x6c5>
					leftMotorSpeed = 25600;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	94 e6       	ldi	r25, 0x64	; 100
     f0e:	a0 e0       	ldi	r26, 0x00	; 0
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
     f16:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
     f1a:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
     f1e:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
     f22:	87 c0       	rjmp	.+270    	; 0x1032 <__stack+0x7d3>
				}else{
					leftMotorSpeed = (rightMotorSpeed + (rp6Data.turnRate * 2));
     f24:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
     f28:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
     f2c:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
     f30:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
     f34:	7e c0       	rjmp	.+252    	; 0x1032 <__stack+0x7d3>
				}
			}else if((currentDriveSpeed + rp6Data.turnRate) > 25600){
     f36:	29 2d       	mov	r18, r9
     f38:	3b 2f       	mov	r19, r27
     f3a:	4f 2f       	mov	r20, r31
     f3c:	5e 2f       	mov	r21, r30
     f3e:	69 85       	ldd	r22, Y+9	; 0x09
     f40:	7a 85       	ldd	r23, Y+10	; 0x0a
     f42:	88 2d       	mov	r24, r8
     f44:	94 2d       	mov	r25, r4
     f46:	ae 84       	ldd	r10, Y+14	; 0x0e
     f48:	bf 84       	ldd	r11, Y+15	; 0x0f
     f4a:	c1 2c       	mov	r12, r1
     f4c:	d1 2c       	mov	r13, r1
     f4e:	e1 2c       	mov	r14, r1
     f50:	f1 2c       	mov	r15, r1
     f52:	00 e0       	ldi	r16, 0x00	; 0
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
     f5a:	21 15       	cp	r18, r1
     f5c:	34 46       	sbci	r19, 0x64	; 100
     f5e:	41 05       	cpc	r20, r1
     f60:	51 05       	cpc	r21, r1
     f62:	61 05       	cpc	r22, r1
     f64:	71 05       	cpc	r23, r1
     f66:	81 05       	cpc	r24, r1
     f68:	91 05       	cpc	r25, r1
     f6a:	89 f1       	breq	.+98     	; 0xfce <__stack+0x76f>
     f6c:	84 f1       	brlt	.+96     	; 0xfce <__stack+0x76f>
				leftMotorSpeed = 25600;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	94 e6       	ldi	r25, 0x64	; 100
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
     f7a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
     f7e:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
     f82:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
				if((leftMotorSpeed - (rp6Data.turnRate * 2)) < (rp6Data.driveSpeedThreshold + 2000)){
     f86:	2e 8d       	ldd	r18, Y+30	; 0x1e
     f88:	3f 8d       	ldd	r19, Y+31	; 0x1f
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	ac 01       	movw	r20, r24
     f90:	bd 01       	movw	r22, r26
     f92:	42 1b       	sub	r20, r18
     f94:	53 0b       	sbc	r21, r19
     f96:	61 09       	sbc	r22, r1
     f98:	71 09       	sbc	r23, r1
     f9a:	c3 01       	movw	r24, r6
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	48 17       	cp	r20, r24
     fa2:	59 07       	cpc	r21, r25
     fa4:	6a 07       	cpc	r22, r26
     fa6:	7b 07       	cpc	r23, r27
     fa8:	48 f4       	brcc	.+18     	; 0xfbc <__stack+0x75d>
					rightMotorSpeed = (rp6Data.driveSpeedThreshold + 2000);
     faa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
     fae:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
     fb2:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
     fb6:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
     fba:	3b c0       	rjmp	.+118    	; 0x1032 <__stack+0x7d3>
				}else{
					rightMotorSpeed = (leftMotorSpeed - (rp6Data.turnRate * 2));
     fbc:	40 93 6c 00 	sts	0x006C, r20	; 0x80006c <rightMotorSpeed.2011>
     fc0:	50 93 6d 00 	sts	0x006D, r21	; 0x80006d <rightMotorSpeed.2011+0x1>
     fc4:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <rightMotorSpeed.2011+0x2>
     fc8:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <rightMotorSpeed.2011+0x3>
     fcc:	32 c0       	rjmp	.+100    	; 0x1032 <__stack+0x7d3>
				}
			}else{
				rightMotorSpeed = (currentDriveSpeed - rp6Data.turnRate);
     fce:	2e 8d       	ldd	r18, Y+30	; 0x1e
     fd0:	3f 8d       	ldd	r19, Y+31	; 0x1f
     fd2:	c9 01       	movw	r24, r18
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	49 81       	ldd	r20, Y+1	; 0x01
     fda:	5a 81       	ldd	r21, Y+2	; 0x02
     fdc:	6b 81       	ldd	r22, Y+3	; 0x03
     fde:	7c 81       	ldd	r23, Y+4	; 0x04
     fe0:	48 1b       	sub	r20, r24
     fe2:	59 0b       	sbc	r21, r25
     fe4:	6a 0b       	sbc	r22, r26
     fe6:	7b 0b       	sbc	r23, r27
     fe8:	40 93 6c 00 	sts	0x006C, r20	; 0x80006c <rightMotorSpeed.2011>
     fec:	50 93 6d 00 	sts	0x006D, r21	; 0x80006d <rightMotorSpeed.2011+0x1>
     ff0:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <rightMotorSpeed.2011+0x2>
     ff4:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <rightMotorSpeed.2011+0x3>
				leftMotorSpeed = (currentDriveSpeed + rp6Data.turnRate);
     ff8:	49 81       	ldd	r20, Y+1	; 0x01
     ffa:	5a 81       	ldd	r21, Y+2	; 0x02
     ffc:	6b 81       	ldd	r22, Y+3	; 0x03
     ffe:	7c 81       	ldd	r23, Y+4	; 0x04
    1000:	84 0f       	add	r24, r20
    1002:	95 1f       	adc	r25, r21
    1004:	a6 1f       	adc	r26, r22
    1006:	b7 1f       	adc	r27, r23
    1008:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
    100c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
    1010:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
    1014:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <__stack+0x7d3>
			}
		}
	}
	
	//Slower left wheel correction
	if(currentDriveSpeed != 0){
    101a:	29 2d       	mov	r18, r9
    101c:	3b 2f       	mov	r19, r27
    101e:	4f 2f       	mov	r20, r31
    1020:	5e 2f       	mov	r21, r30
    1022:	69 85       	ldd	r22, Y+9	; 0x09
    1024:	7a 85       	ldd	r23, Y+10	; 0x0a
    1026:	88 2d       	mov	r24, r8
    1028:	94 2d       	mov	r25, r4
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__cmpdi2_s8>
    1030:	a1 f0       	breq	.+40     	; 0x105a <__stack+0x7fb>
		leftMotorSpeed += 750;
    1032:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2010>
    1036:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2010+0x1>
    103a:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <leftMotorSpeed.2010+0x2>
    103e:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <leftMotorSpeed.2010+0x3>
    1042:	82 51       	subi	r24, 0x12	; 18
    1044:	9d 4f       	sbci	r25, 0xFD	; 253
    1046:	af 4f       	sbci	r26, 0xFF	; 255
    1048:	bf 4f       	sbci	r27, 0xFF	; 255
    104a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
    104e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
    1052:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
    1056:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
	}
	
	//Final safety check
	if(leftMotorSpeed > 27000){						//Check if we did not accidentally set a speed higher than allowed on the left motor
    105a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2010>
    105e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2010+0x1>
    1062:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <leftMotorSpeed.2010+0x2>
    1066:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <leftMotorSpeed.2010+0x3>
    106a:	89 37       	cpi	r24, 0x79	; 121
    106c:	99 46       	sbci	r25, 0x69	; 105
    106e:	a1 05       	cpc	r26, r1
    1070:	b1 05       	cpc	r27, r1
    1072:	60 f0       	brcs	.+24     	; 0x108c <__stack+0x82d>
		leftMotorSpeed = 27000;							//If we did, set it back to its max
    1074:	88 e7       	ldi	r24, 0x78	; 120
    1076:	99 e6       	ldi	r25, 0x69	; 105
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2010>
    1080:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2010+0x1>
    1084:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2010+0x2>
    1088:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2010+0x3>
	}
	if(rightMotorSpeed > 25600){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
    108c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rightMotorSpeed.2011>
    1090:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rightMotorSpeed.2011+0x1>
    1094:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <rightMotorSpeed.2011+0x2>
    1098:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <rightMotorSpeed.2011+0x3>
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	94 46       	sbci	r25, 0x64	; 100
    10a0:	a1 05       	cpc	r26, r1
    10a2:	b1 05       	cpc	r27, r1
    10a4:	60 f0       	brcs	.+24     	; 0x10be <__stack+0x85f>
		rightMotorSpeed = 25600;						//Set it back to its max
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	94 e6       	ldi	r25, 0x64	; 100
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2011>
    10b2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2011+0x1>
    10b6:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2011+0x2>
    10ba:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2011+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
    10be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2008>
    10c2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2008+0x1>
    10c6:	89 2b       	or	r24, r25
    10c8:	11 f0       	breq	.+4      	; 0x10ce <__stack+0x86f>
		PORTC &= 0b11111011;
    10ca:	aa 98       	cbi	0x15, 2	; 21
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <__stack+0x871>
	}else{
		PORTC |= 0b00000100;
    10ce:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
    10d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    10d4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    10d8:	89 2b       	or	r24, r25
    10da:	11 f0       	breq	.+4      	; 0x10e0 <__stack+0x881>
		PORTC &= 0b11110111;
    10dc:	ab 98       	cbi	0x15, 3	; 21
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <__stack+0x883>
	}else{
		PORTC |= 0b00001000;
    10e0:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	arduinoData.actualDriveSpeed = currentDriveSpeed;
    10e2:	e6 e8       	ldi	r30, 0x86	; 134
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <currentDriveSpeed.2007>
    10ea:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <currentDriveSpeed.2007+0x1>
    10ee:	93 83       	std	Z+3, r25	; 0x03
    10f0:	82 83       	std	Z+2, r24	; 0x02
	arduinoData.actualLeftMotorSpeed = leftMotorSpeed;
    10f2:	a0 e7       	ldi	r26, 0x70	; 112
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	8d 91       	ld	r24, X+
    10f8:	9c 91       	ld	r25, X
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	95 83       	std	Z+5, r25	; 0x05
    10fe:	84 83       	std	Z+4, r24	; 0x04
	arduinoData.actualRightMotorSpeed = rightMotorSpeed;
    1100:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rightMotorSpeed.2011>
    1104:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rightMotorSpeed.2011+0x1>
    1108:	97 83       	std	Z+7, r25	; 0x07
    110a:	86 83       	std	Z+6, r24	; 0x06
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
    110c:	9b bd       	out	0x2b, r25	; 43
    110e:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
    1110:	8d 91       	ld	r24, X+
    1112:	9c 91       	ld	r25, X
    1114:	99 bd       	out	0x29, r25	; 41
    1116:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	e3 96       	adiw	r28, 0x33	; 51
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	7f 90       	pop	r7
    1142:	6f 90       	pop	r6
    1144:	5f 90       	pop	r5
    1146:	4f 90       	pop	r4
    1148:	3f 90       	pop	r3
    114a:	2f 90       	pop	r2
    114c:	08 95       	ret

0000114e <init_bumpedData>:

//Bumpers
void init_bumpedData() {
	bumpedData.driveSpeed = 0;
    114e:	e5 ec       	ldi	r30, 0xC5	; 197
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	10 82       	st	Z, r1
    1154:	11 82       	std	Z+1, r1	; 0x01
    1156:	12 82       	std	Z+2, r1	; 0x02
    1158:	13 82       	std	Z+3, r1	; 0x03
	bumpedData.driveDirection = 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	84 83       	std	Z+4, r24	; 0x04
	bumpedData.turnDirection = 0;
    115e:	15 82       	std	Z+5, r1	; 0x05
	bumpedData.accelerationRate = 2000;
    1160:	20 ed       	ldi	r18, 0xD0	; 208
    1162:	37 e0       	ldi	r19, 0x07	; 7
    1164:	37 83       	std	Z+7, r19	; 0x07
    1166:	26 83       	std	Z+6, r18	; 0x06
	bumpedData.turnRate = 2500;
    1168:	24 ec       	ldi	r18, 0xC4	; 196
    116a:	39 e0       	ldi	r19, 0x09	; 9
    116c:	31 87       	std	Z+9, r19	; 0x09
    116e:	20 87       	std	Z+8, r18	; 0x08
	bumpedData.driveSpeedThreshold = 7000;
    1170:	28 e5       	ldi	r18, 0x58	; 88
    1172:	3b e1       	ldi	r19, 0x1B	; 27
    1174:	33 87       	std	Z+11, r19	; 0x0b
    1176:	22 87       	std	Z+10, r18	; 0x0a
	bumpedData.updateSpeed = 200;
    1178:	48 ec       	ldi	r20, 0xC8	; 200
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	44 87       	std	Z+12, r20	; 0x0c
    1182:	55 87       	std	Z+13, r21	; 0x0d
    1184:	66 87       	std	Z+14, r22	; 0x0e
    1186:	77 87       	std	Z+15, r23	; 0x0f
	bumpedData.enableBeeper = 1;
    1188:	80 8b       	std	Z+16, r24	; 0x10
    118a:	08 95       	ret

0000118c <bumperCheck>:
}

uint8_t bumperCheck() {
    118c:	2f 92       	push	r2
    118e:	3f 92       	push	r3
    1190:	4f 92       	push	r4
    1192:	5f 92       	push	r5
    1194:	6f 92       	push	r6
    1196:	7f 92       	push	r7
    1198:	8f 92       	push	r8
    119a:	9f 92       	push	r9
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	28 97       	sbiw	r28, 0x08	; 8
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
	
	static uint32_t bumperTimer = 0; //Used to determine how long the RP6 drives backwards
	//static uint8_t enable = 0; //if 1, RP6 drives backwards
	
	if (getBumpers() && !arduinoData.bumperFlag) { //If one or both bumpers are pushed
    11c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <getBumpers>
    11c4:	89 2b       	or	r24, r25
    11c6:	b1 f0       	breq	.+44     	; 0x11f4 <bumperCheck+0x68>
    11c8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    11cc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <arduinoData+0x1>
    11d0:	89 2b       	or	r24, r25
    11d2:	b9 f4       	brne	.+46     	; 0x1202 <bumperCheck+0x76>
		arduinoData.bumperFlag = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <arduinoData+0x1>
    11dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <arduinoData>
		bumperTimer = micros();
    11e0:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
    11e4:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
    11e8:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
    11ec:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end+0x2>
    11f0:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x3>
	}
		
	if (arduinoData.bumperFlag) {
    11f4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    11f8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <arduinoData+0x1>
    11fc:	89 2b       	or	r24, r25
    11fe:	09 f4       	brne	.+2      	; 0x1202 <bumperCheck+0x76>
    1200:	5a c0       	rjmp	.+180    	; 0x12b6 <bumperCheck+0x12a>
		
		if (micros() < bumperTimer + BUMPED_STOP_TIME) {
    1202:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
    1206:	f2 2f       	mov	r31, r18
    1208:	e3 2f       	mov	r30, r19
    120a:	40 90 66 00 	lds	r4, 0x0066	; 0x800066 <__data_end>
    120e:	50 90 67 00 	lds	r5, 0x0067	; 0x800067 <__data_end+0x1>
    1212:	60 90 68 00 	lds	r6, 0x0068	; 0x800068 <__data_end+0x2>
    1216:	70 90 69 00 	lds	r7, 0x0069	; 0x800069 <__data_end+0x3>
    121a:	93 01       	movw	r18, r6
    121c:	82 01       	movw	r16, r4
    121e:	00 59       	subi	r16, 0x90	; 144
    1220:	1e 4e       	sbci	r17, 0xEE	; 238
    1222:	2e 4f       	sbci	r18, 0xFE	; 254
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	48 01       	movw	r8, r16
    1228:	59 01       	movw	r10, r18
    122a:	ab 82       	std	Y+3, r10	; 0x03
    122c:	bc 82       	std	Y+4, r11	; 0x04
    122e:	2f 2f       	mov	r18, r31
    1230:	3e 2f       	mov	r19, r30
    1232:	a8 2c       	mov	r10, r8
    1234:	b9 2c       	mov	r11, r9
    1236:	cb 80       	ldd	r12, Y+3	; 0x03
    1238:	dc 80       	ldd	r13, Y+4	; 0x04
    123a:	e1 2c       	mov	r14, r1
    123c:	f1 2c       	mov	r15, r1
    123e:	00 e0       	ldi	r16, 0x00	; 0
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
    1246:	58 f4       	brcc	.+22     	; 0x125e <bumperCheck+0xd2>
			bumpedData.driveSpeed = 0;
    1248:	e5 ec       	ldi	r30, 0xC5	; 197
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	10 82       	st	Z, r1
    124e:	11 82       	std	Z+1, r1	; 0x01
    1250:	12 82       	std	Z+2, r1	; 0x02
    1252:	13 82       	std	Z+3, r1	; 0x03
			bumpedData.accelerationRate = 5000;
    1254:	88 e8       	ldi	r24, 0x88	; 136
    1256:	93 e1       	ldi	r25, 0x13	; 19
    1258:	97 83       	std	Z+7, r25	; 0x07
    125a:	86 83       	std	Z+6, r24	; 0x06
    125c:	2c c0       	rjmp	.+88     	; 0x12b6 <bumperCheck+0x12a>
		} else if (micros() < bumperTimer + BUMPED_BACK_TIME) {
    125e:	0e 94 c6 00 	call	0x18c	; 0x18c <micros>
    1262:	e0 e4       	ldi	r30, 0x40	; 64
    1264:	4e 0e       	add	r4, r30
    1266:	e2 e4       	ldi	r30, 0x42	; 66
    1268:	5e 1e       	adc	r5, r30
    126a:	ef e0       	ldi	r30, 0x0F	; 15
    126c:	6e 1e       	adc	r6, r30
    126e:	71 1c       	adc	r7, r1
    1270:	12 01       	movw	r2, r4
    1272:	23 01       	movw	r4, r6
    1274:	a2 2c       	mov	r10, r2
    1276:	b3 2c       	mov	r11, r3
    1278:	c4 2c       	mov	r12, r4
    127a:	d5 2c       	mov	r13, r5
    127c:	e1 2c       	mov	r14, r1
    127e:	f1 2c       	mov	r15, r1
    1280:	00 e0       	ldi	r16, 0x00	; 0
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	0e 94 c7 0b 	call	0x178e	; 0x178e <__cmpdi2>
    1288:	90 f4       	brcc	.+36     	; 0x12ae <bumperCheck+0x122>
			bumpedData.driveSpeed = 30;
    128a:	e5 ec       	ldi	r30, 0xC5	; 197
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8e e1       	ldi	r24, 0x1E	; 30
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a0 e0       	ldi	r26, 0x00	; 0
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	80 83       	st	Z, r24
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	a2 83       	std	Z+2, r26	; 0x02
    129c:	b3 83       	std	Z+3, r27	; 0x03
			bumpedData.driveDirection = 0;
    129e:	14 82       	std	Z+4, r1	; 0x04
			bumpedData.accelerationRate = rp6Data.accelerationRate;
    12a0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <rp6Data+0x6>
    12a4:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <rp6Data+0x7>
    12a8:	97 83       	std	Z+7, r25	; 0x07
    12aa:	86 83       	std	Z+6, r24	; 0x06
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <bumperCheck+0x12a>
		} else {
			arduinoData.bumperFlag = 0;
    12ae:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <arduinoData+0x1>
    12b2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <arduinoData>
		}
	}
	
	return arduinoData.bumperFlag;
}
    12b6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <arduinoData>
    12ba:	28 96       	adiw	r28, 0x08	; 8
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	7f 90       	pop	r7
    12e0:	6f 90       	pop	r6
    12e2:	5f 90       	pop	r5
    12e4:	4f 90       	pop	r4
    12e6:	3f 90       	pop	r3
    12e8:	2f 90       	pop	r2
    12ea:	08 95       	ret

000012ec <main>:
//////////////////////////////////////////////////

//Function definitions ---------------------------
//General
void init_interrupt(){
	sei();									//Enable global interrupts
    12ec:	78 94       	sei
////////////////// MAIN PROGRAM //////////////////
int main(void) {
	//Initialize all functions
	init_interrupt();
	
	init_micros();
    12ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_micros>
	
	init_TWI();
    12f2:	0e 94 09 01 	call	0x212	; 0x212 <init_TWI>
	init_rp6Data();
    12f6:	0e 94 17 01 	call	0x22e	; 0x22e <init_rp6Data>
	init_arduinoData();
    12fa:	0e 94 36 01 	call	0x26c	; 0x26c <init_arduinoData>
	clearSendData();
    12fe:	0e 94 43 01 	call	0x286	; 0x286 <clearSendData>
	clearReceiveData();
    1302:	0e 94 4c 01 	call	0x298	; 0x298 <clearReceiveData>
	
	init_motor_io();
    1306:	0e 94 78 02 	call	0x4f0	; 0x4f0 <init_motor_io>
	init_motor_timer();
    130a:	0e 94 82 02 	call	0x504	; 0x504 <init_motor_timer>
	
	init_bumpedData();
    130e:	0e 94 a7 08 	call	0x114e	; 0x114e <init_bumpedData>
	//------------------------
		
	while(1){
		if (bumperCheck()) {
    1312:	0e 94 c6 08 	call	0x118c	; 0x118c <bumperCheck>
    1316:	88 23       	and	r24, r24
    1318:	e9 f0       	breq	.+58     	; 0x1354 <main+0x68>
			motorDriver(bumpedData);
    131a:	8d b7       	in	r24, 0x3d	; 61
    131c:	9e b7       	in	r25, 0x3e	; 62
    131e:	49 97       	sbiw	r24, 0x19	; 25
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	9e bf       	out	0x3e, r25	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	8d bf       	out	0x3d, r24	; 61
    132a:	ad b7       	in	r26, 0x3d	; 61
    132c:	be b7       	in	r27, 0x3e	; 62
    132e:	11 96       	adiw	r26, 0x01	; 1
    1330:	89 e1       	ldi	r24, 0x19	; 25
    1332:	e5 ec       	ldi	r30, 0xC5	; 197
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	01 90       	ld	r0, Z+
    1338:	0d 92       	st	X+, r0
    133a:	8a 95       	dec	r24
    133c:	e1 f7       	brne	.-8      	; 0x1336 <main+0x4a>
    133e:	0e 94 9a 02 	call	0x534	; 0x534 <motorDriver>
    1342:	8d b7       	in	r24, 0x3d	; 61
    1344:	9e b7       	in	r25, 0x3e	; 62
    1346:	49 96       	adiw	r24, 0x19	; 25
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	9e bf       	out	0x3e, r25	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	8d bf       	out	0x3d, r24	; 61
    1352:	df cf       	rjmp	.-66     	; 0x1312 <main+0x26>
		} else {
			motorDriver(rp6Data);
    1354:	8d b7       	in	r24, 0x3d	; 61
    1356:	9e b7       	in	r25, 0x3e	; 62
    1358:	49 97       	sbiw	r24, 0x19	; 25
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	9e bf       	out	0x3e, r25	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	8d bf       	out	0x3d, r24	; 61
    1364:	ad b7       	in	r26, 0x3d	; 61
    1366:	be b7       	in	r27, 0x3e	; 62
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	89 e1       	ldi	r24, 0x19	; 25
    136c:	e4 ea       	ldi	r30, 0xA4	; 164
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	01 90       	ld	r0, Z+
    1372:	0d 92       	st	X+, r0
    1374:	8a 95       	dec	r24
    1376:	e1 f7       	brne	.-8      	; 0x1370 <main+0x84>
    1378:	0e 94 9a 02 	call	0x534	; 0x534 <motorDriver>
    137c:	8d b7       	in	r24, 0x3d	; 61
    137e:	9e b7       	in	r25, 0x3e	; 62
    1380:	49 96       	adiw	r24, 0x19	; 25
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	9e bf       	out	0x3e, r25	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	8d bf       	out	0x3d, r24	; 61
    138c:	c2 cf       	rjmp	.-124    	; 0x1312 <main+0x26>

0000138e <__fixunssfsi>:
    138e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fp_splitA>
    1392:	88 f0       	brcs	.+34     	; 0x13b6 <__fixunssfsi+0x28>
    1394:	9f 57       	subi	r25, 0x7F	; 127
    1396:	98 f0       	brcs	.+38     	; 0x13be <__fixunssfsi+0x30>
    1398:	b9 2f       	mov	r27, r25
    139a:	99 27       	eor	r25, r25
    139c:	b7 51       	subi	r27, 0x17	; 23
    139e:	b0 f0       	brcs	.+44     	; 0x13cc <__fixunssfsi+0x3e>
    13a0:	e1 f0       	breq	.+56     	; 0x13da <__fixunssfsi+0x4c>
    13a2:	66 0f       	add	r22, r22
    13a4:	77 1f       	adc	r23, r23
    13a6:	88 1f       	adc	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	1a f0       	brmi	.+6      	; 0x13b2 <__fixunssfsi+0x24>
    13ac:	ba 95       	dec	r27
    13ae:	c9 f7       	brne	.-14     	; 0x13a2 <__fixunssfsi+0x14>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <__fixunssfsi+0x4c>
    13b2:	b1 30       	cpi	r27, 0x01	; 1
    13b4:	91 f0       	breq	.+36     	; 0x13da <__fixunssfsi+0x4c>
    13b6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_zero>
    13ba:	b1 e0       	ldi	r27, 0x01	; 1
    13bc:	08 95       	ret
    13be:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_zero>
    13c2:	67 2f       	mov	r22, r23
    13c4:	78 2f       	mov	r23, r24
    13c6:	88 27       	eor	r24, r24
    13c8:	b8 5f       	subi	r27, 0xF8	; 248
    13ca:	39 f0       	breq	.+14     	; 0x13da <__fixunssfsi+0x4c>
    13cc:	b9 3f       	cpi	r27, 0xF9	; 249
    13ce:	cc f3       	brlt	.-14     	; 0x13c2 <__fixunssfsi+0x34>
    13d0:	86 95       	lsr	r24
    13d2:	77 95       	ror	r23
    13d4:	67 95       	ror	r22
    13d6:	b3 95       	inc	r27
    13d8:	d9 f7       	brne	.-10     	; 0x13d0 <__fixunssfsi+0x42>
    13da:	3e f4       	brtc	.+14     	; 0x13ea <__fixunssfsi+0x5c>
    13dc:	90 95       	com	r25
    13de:	80 95       	com	r24
    13e0:	70 95       	com	r23
    13e2:	61 95       	neg	r22
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	8f 4f       	sbci	r24, 0xFF	; 255
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	08 95       	ret

000013ec <__floatdisf>:
    13ec:	97 fb       	bst	r25, 7
    13ee:	16 f4       	brtc	.+4      	; 0x13f4 <__floatdisf+0x8>
    13f0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__fp_negdi>
    13f4:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_di2sf>

000013f8 <__floatundisf>:
    13f8:	e8 94       	clt

000013fa <__fp_di2sf>:
    13fa:	f9 2f       	mov	r31, r25
    13fc:	96 eb       	ldi	r25, 0xB6	; 182
    13fe:	ff 23       	and	r31, r31
    1400:	81 f0       	breq	.+32     	; 0x1422 <__fp_di2sf+0x28>
    1402:	12 16       	cp	r1, r18
    1404:	13 06       	cpc	r1, r19
    1406:	14 06       	cpc	r1, r20
    1408:	44 0b       	sbc	r20, r20
    140a:	93 95       	inc	r25
    140c:	f6 95       	lsr	r31
    140e:	87 95       	ror	r24
    1410:	77 95       	ror	r23
    1412:	67 95       	ror	r22
    1414:	57 95       	ror	r21
    1416:	40 40       	sbci	r20, 0x00	; 0
    1418:	ff 23       	and	r31, r31
    141a:	b9 f7       	brne	.-18     	; 0x140a <__fp_di2sf+0x10>
    141c:	1b c0       	rjmp	.+54     	; 0x1454 <__fp_di2sf+0x5a>
    141e:	99 27       	eor	r25, r25
    1420:	08 95       	ret
    1422:	88 23       	and	r24, r24
    1424:	51 f4       	brne	.+20     	; 0x143a <__fp_di2sf+0x40>
    1426:	98 50       	subi	r25, 0x08	; 8
    1428:	d2 f7       	brpl	.-12     	; 0x141e <__fp_di2sf+0x24>
    142a:	87 2b       	or	r24, r23
    142c:	76 2f       	mov	r23, r22
    142e:	65 2f       	mov	r22, r21
    1430:	54 2f       	mov	r21, r20
    1432:	43 2f       	mov	r20, r19
    1434:	32 2f       	mov	r19, r18
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	b1 f3       	breq	.-20     	; 0x1426 <__fp_di2sf+0x2c>
    143a:	12 16       	cp	r1, r18
    143c:	13 06       	cpc	r1, r19
    143e:	14 06       	cpc	r1, r20
    1440:	44 0b       	sbc	r20, r20
    1442:	88 23       	and	r24, r24
    1444:	3a f0       	brmi	.+14     	; 0x1454 <__fp_di2sf+0x5a>
    1446:	9a 95       	dec	r25
    1448:	44 0f       	add	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	ca f7       	brpl	.-14     	; 0x1446 <__fp_di2sf+0x4c>
    1454:	55 23       	and	r21, r21
    1456:	4a f4       	brpl	.+18     	; 0x146a <__fp_di2sf+0x70>
    1458:	44 0f       	add	r20, r20
    145a:	55 1f       	adc	r21, r21
    145c:	11 f4       	brne	.+4      	; 0x1462 <__fp_di2sf+0x68>
    145e:	60 ff       	sbrs	r22, 0
    1460:	04 c0       	rjmp	.+8      	; 0x146a <__fp_di2sf+0x70>
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	88 0f       	add	r24, r24
    146c:	96 95       	lsr	r25
    146e:	87 95       	ror	r24
    1470:	97 f9       	bld	r25, 7
    1472:	08 95       	ret

00001474 <__fp_negdi>:
    1474:	90 95       	com	r25
    1476:	80 95       	com	r24
    1478:	70 95       	com	r23
    147a:	60 95       	com	r22
    147c:	50 95       	com	r21
    147e:	40 95       	com	r20
    1480:	30 95       	com	r19
    1482:	21 95       	neg	r18
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	4f 4f       	sbci	r20, 0xFF	; 255
    1488:	5f 4f       	sbci	r21, 0xFF	; 255
    148a:	6f 4f       	sbci	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	08 95       	ret

00001494 <__fp_split3>:
    1494:	57 fd       	sbrc	r21, 7
    1496:	90 58       	subi	r25, 0x80	; 128
    1498:	44 0f       	add	r20, r20
    149a:	55 1f       	adc	r21, r21
    149c:	59 f0       	breq	.+22     	; 0x14b4 <__fp_splitA+0x10>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	71 f0       	breq	.+28     	; 0x14be <__fp_splitA+0x1a>
    14a2:	47 95       	ror	r20

000014a4 <__fp_splitA>:
    14a4:	88 0f       	add	r24, r24
    14a6:	97 fb       	bst	r25, 7
    14a8:	99 1f       	adc	r25, r25
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <__fp_splitA+0x20>
    14ac:	9f 3f       	cpi	r25, 0xFF	; 255
    14ae:	79 f0       	breq	.+30     	; 0x14ce <__fp_splitA+0x2a>
    14b0:	87 95       	ror	r24
    14b2:	08 95       	ret
    14b4:	12 16       	cp	r1, r18
    14b6:	13 06       	cpc	r1, r19
    14b8:	14 06       	cpc	r1, r20
    14ba:	55 1f       	adc	r21, r21
    14bc:	f2 cf       	rjmp	.-28     	; 0x14a2 <__fp_split3+0xe>
    14be:	46 95       	lsr	r20
    14c0:	f1 df       	rcall	.-30     	; 0x14a4 <__fp_splitA>
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <__fp_splitA+0x30>
    14c4:	16 16       	cp	r1, r22
    14c6:	17 06       	cpc	r1, r23
    14c8:	18 06       	cpc	r1, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	f1 cf       	rjmp	.-30     	; 0x14b0 <__fp_splitA+0xc>
    14ce:	86 95       	lsr	r24
    14d0:	71 05       	cpc	r23, r1
    14d2:	61 05       	cpc	r22, r1
    14d4:	08 94       	sec
    14d6:	08 95       	ret

000014d8 <__fp_zero>:
    14d8:	e8 94       	clt

000014da <__fp_szero>:
    14da:	bb 27       	eor	r27, r27
    14dc:	66 27       	eor	r22, r22
    14de:	77 27       	eor	r23, r23
    14e0:	cb 01       	movw	r24, r22
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret

000014e6 <__mulsf3>:
    14e6:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3x>
    14ea:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_round>
    14ee:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscA>
    14f2:	38 f0       	brcs	.+14     	; 0x1502 <__mulsf3+0x1c>
    14f4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__fp_pscB>
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <__mulsf3+0x1c>
    14fa:	95 23       	and	r25, r21
    14fc:	11 f0       	breq	.+4      	; 0x1502 <__mulsf3+0x1c>
    14fe:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_inf>
    1502:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_nan>
    1506:	11 24       	eor	r1, r1
    1508:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>

0000150c <__mulsf3x>:
    150c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_split3>
    1510:	70 f3       	brcs	.-36     	; 0x14ee <__mulsf3+0x8>

00001512 <__mulsf3_pse>:
    1512:	95 9f       	mul	r25, r21
    1514:	c1 f3       	breq	.-16     	; 0x1506 <__mulsf3+0x20>
    1516:	95 0f       	add	r25, r21
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	55 1f       	adc	r21, r21
    151c:	62 9f       	mul	r22, r18
    151e:	f0 01       	movw	r30, r0
    1520:	72 9f       	mul	r23, r18
    1522:	bb 27       	eor	r27, r27
    1524:	f0 0d       	add	r31, r0
    1526:	b1 1d       	adc	r27, r1
    1528:	63 9f       	mul	r22, r19
    152a:	aa 27       	eor	r26, r26
    152c:	f0 0d       	add	r31, r0
    152e:	b1 1d       	adc	r27, r1
    1530:	aa 1f       	adc	r26, r26
    1532:	64 9f       	mul	r22, r20
    1534:	66 27       	eor	r22, r22
    1536:	b0 0d       	add	r27, r0
    1538:	a1 1d       	adc	r26, r1
    153a:	66 1f       	adc	r22, r22
    153c:	82 9f       	mul	r24, r18
    153e:	22 27       	eor	r18, r18
    1540:	b0 0d       	add	r27, r0
    1542:	a1 1d       	adc	r26, r1
    1544:	62 1f       	adc	r22, r18
    1546:	73 9f       	mul	r23, r19
    1548:	b0 0d       	add	r27, r0
    154a:	a1 1d       	adc	r26, r1
    154c:	62 1f       	adc	r22, r18
    154e:	83 9f       	mul	r24, r19
    1550:	a0 0d       	add	r26, r0
    1552:	61 1d       	adc	r22, r1
    1554:	22 1f       	adc	r18, r18
    1556:	74 9f       	mul	r23, r20
    1558:	33 27       	eor	r19, r19
    155a:	a0 0d       	add	r26, r0
    155c:	61 1d       	adc	r22, r1
    155e:	23 1f       	adc	r18, r19
    1560:	84 9f       	mul	r24, r20
    1562:	60 0d       	add	r22, r0
    1564:	21 1d       	adc	r18, r1
    1566:	82 2f       	mov	r24, r18
    1568:	76 2f       	mov	r23, r22
    156a:	6a 2f       	mov	r22, r26
    156c:	11 24       	eor	r1, r1
    156e:	9f 57       	subi	r25, 0x7F	; 127
    1570:	50 40       	sbci	r21, 0x00	; 0
    1572:	9a f0       	brmi	.+38     	; 0x159a <__mulsf3_pse+0x88>
    1574:	f1 f0       	breq	.+60     	; 0x15b2 <__mulsf3_pse+0xa0>
    1576:	88 23       	and	r24, r24
    1578:	4a f0       	brmi	.+18     	; 0x158c <__mulsf3_pse+0x7a>
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	bb 1f       	adc	r27, r27
    1580:	66 1f       	adc	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	91 50       	subi	r25, 0x01	; 1
    1588:	50 40       	sbci	r21, 0x00	; 0
    158a:	a9 f7       	brne	.-22     	; 0x1576 <__mulsf3_pse+0x64>
    158c:	9e 3f       	cpi	r25, 0xFE	; 254
    158e:	51 05       	cpc	r21, r1
    1590:	80 f0       	brcs	.+32     	; 0x15b2 <__mulsf3_pse+0xa0>
    1592:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_inf>
    1596:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	e4 f3       	brlt	.-8      	; 0x1596 <__mulsf3_pse+0x84>
    159e:	98 3e       	cpi	r25, 0xE8	; 232
    15a0:	d4 f3       	brlt	.-12     	; 0x1596 <__mulsf3_pse+0x84>
    15a2:	86 95       	lsr	r24
    15a4:	77 95       	ror	r23
    15a6:	67 95       	ror	r22
    15a8:	b7 95       	ror	r27
    15aa:	f7 95       	ror	r31
    15ac:	e7 95       	ror	r30
    15ae:	9f 5f       	subi	r25, 0xFF	; 255
    15b0:	c1 f7       	brne	.-16     	; 0x15a2 <__mulsf3_pse+0x90>
    15b2:	fe 2b       	or	r31, r30
    15b4:	88 0f       	add	r24, r24
    15b6:	91 1d       	adc	r25, r1
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret
    15c0:	19 f4       	brne	.+6      	; 0x15c8 <__mulsf3_pse+0xb6>
    15c2:	16 f4       	brtc	.+4      	; 0x15c8 <__mulsf3_pse+0xb6>
    15c4:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_nan>
    15c8:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_mpack>

000015cc <sqrt>:
    15cc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fp_splitA>
    15d0:	b8 f3       	brcs	.-18     	; 0x15c0 <__mulsf3_pse+0xae>
    15d2:	99 23       	and	r25, r25
    15d4:	c9 f3       	breq	.-14     	; 0x15c8 <__mulsf3_pse+0xb6>
    15d6:	b6 f3       	brts	.-20     	; 0x15c4 <__mulsf3_pse+0xb2>
    15d8:	9f 57       	subi	r25, 0x7F	; 127
    15da:	55 0b       	sbc	r21, r21
    15dc:	87 ff       	sbrs	r24, 7
    15de:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fp_norm2>
    15e2:	00 24       	eor	r0, r0
    15e4:	a0 e6       	ldi	r26, 0x60	; 96
    15e6:	40 ea       	ldi	r20, 0xA0	; 160
    15e8:	90 01       	movw	r18, r0
    15ea:	80 58       	subi	r24, 0x80	; 128
    15ec:	56 95       	lsr	r21
    15ee:	97 95       	ror	r25
    15f0:	28 f4       	brcc	.+10     	; 0x15fc <sqrt+0x30>
    15f2:	80 5c       	subi	r24, 0xC0	; 192
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	20 f0       	brcs	.+8      	; 0x1604 <sqrt+0x38>
    15fc:	26 17       	cp	r18, r22
    15fe:	37 07       	cpc	r19, r23
    1600:	48 07       	cpc	r20, r24
    1602:	30 f4       	brcc	.+12     	; 0x1610 <sqrt+0x44>
    1604:	62 1b       	sub	r22, r18
    1606:	73 0b       	sbc	r23, r19
    1608:	84 0b       	sbc	r24, r20
    160a:	20 29       	or	r18, r0
    160c:	31 29       	or	r19, r1
    160e:	4a 2b       	or	r20, r26
    1610:	a6 95       	lsr	r26
    1612:	17 94       	ror	r1
    1614:	07 94       	ror	r0
    1616:	20 25       	eor	r18, r0
    1618:	31 25       	eor	r19, r1
    161a:	4a 27       	eor	r20, r26
    161c:	58 f7       	brcc	.-42     	; 0x15f4 <sqrt+0x28>
    161e:	66 0f       	add	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	88 1f       	adc	r24, r24
    1624:	20 f0       	brcs	.+8      	; 0x162e <sqrt+0x62>
    1626:	26 17       	cp	r18, r22
    1628:	37 07       	cpc	r19, r23
    162a:	48 07       	cpc	r20, r24
    162c:	30 f4       	brcc	.+12     	; 0x163a <sqrt+0x6e>
    162e:	62 0b       	sbc	r22, r18
    1630:	73 0b       	sbc	r23, r19
    1632:	84 0b       	sbc	r24, r20
    1634:	20 0d       	add	r18, r0
    1636:	31 1d       	adc	r19, r1
    1638:	41 1d       	adc	r20, r1
    163a:	a0 95       	com	r26
    163c:	81 f7       	brne	.-32     	; 0x161e <sqrt+0x52>
    163e:	b9 01       	movw	r22, r18
    1640:	84 2f       	mov	r24, r20
    1642:	91 58       	subi	r25, 0x81	; 129
    1644:	88 0f       	add	r24, r24
    1646:	96 95       	lsr	r25
    1648:	87 95       	ror	r24
    164a:	08 95       	ret

0000164c <__fp_inf>:
    164c:	97 f9       	bld	r25, 7
    164e:	9f 67       	ori	r25, 0x7F	; 127
    1650:	80 e8       	ldi	r24, 0x80	; 128
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	08 95       	ret

00001658 <__fp_mpack>:
    1658:	9f 3f       	cpi	r25, 0xFF	; 255
    165a:	31 f0       	breq	.+12     	; 0x1668 <__fp_mpack_finite+0xc>

0000165c <__fp_mpack_finite>:
    165c:	91 50       	subi	r25, 0x01	; 1
    165e:	20 f4       	brcc	.+8      	; 0x1668 <__fp_mpack_finite+0xc>
    1660:	87 95       	ror	r24
    1662:	77 95       	ror	r23
    1664:	67 95       	ror	r22
    1666:	b7 95       	ror	r27
    1668:	88 0f       	add	r24, r24
    166a:	91 1d       	adc	r25, r1
    166c:	96 95       	lsr	r25
    166e:	87 95       	ror	r24
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret

00001674 <__fp_nan>:
    1674:	9f ef       	ldi	r25, 0xFF	; 255
    1676:	80 ec       	ldi	r24, 0xC0	; 192
    1678:	08 95       	ret

0000167a <__fp_norm2>:
    167a:	91 50       	subi	r25, 0x01	; 1
    167c:	50 40       	sbci	r21, 0x00	; 0
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	d2 f7       	brpl	.-12     	; 0x167a <__fp_norm2>
    1686:	08 95       	ret

00001688 <__fp_pscA>:
    1688:	00 24       	eor	r0, r0
    168a:	0a 94       	dec	r0
    168c:	16 16       	cp	r1, r22
    168e:	17 06       	cpc	r1, r23
    1690:	18 06       	cpc	r1, r24
    1692:	09 06       	cpc	r0, r25
    1694:	08 95       	ret

00001696 <__fp_pscB>:
    1696:	00 24       	eor	r0, r0
    1698:	0a 94       	dec	r0
    169a:	12 16       	cp	r1, r18
    169c:	13 06       	cpc	r1, r19
    169e:	14 06       	cpc	r1, r20
    16a0:	05 06       	cpc	r0, r21
    16a2:	08 95       	ret

000016a4 <__fp_round>:
    16a4:	09 2e       	mov	r0, r25
    16a6:	03 94       	inc	r0
    16a8:	00 0c       	add	r0, r0
    16aa:	11 f4       	brne	.+4      	; 0x16b0 <__fp_round+0xc>
    16ac:	88 23       	and	r24, r24
    16ae:	52 f0       	brmi	.+20     	; 0x16c4 <__fp_round+0x20>
    16b0:	bb 0f       	add	r27, r27
    16b2:	40 f4       	brcc	.+16     	; 0x16c4 <__fp_round+0x20>
    16b4:	bf 2b       	or	r27, r31
    16b6:	11 f4       	brne	.+4      	; 0x16bc <__fp_round+0x18>
    16b8:	60 ff       	sbrs	r22, 0
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__fp_round+0x20>
    16bc:	6f 5f       	subi	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__udivmodsi4>:
    16c6:	a1 e2       	ldi	r26, 0x21	; 33
    16c8:	1a 2e       	mov	r1, r26
    16ca:	aa 1b       	sub	r26, r26
    16cc:	bb 1b       	sub	r27, r27
    16ce:	fd 01       	movw	r30, r26
    16d0:	0d c0       	rjmp	.+26     	; 0x16ec <__udivmodsi4_ep>

000016d2 <__udivmodsi4_loop>:
    16d2:	aa 1f       	adc	r26, r26
    16d4:	bb 1f       	adc	r27, r27
    16d6:	ee 1f       	adc	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	a2 17       	cp	r26, r18
    16dc:	b3 07       	cpc	r27, r19
    16de:	e4 07       	cpc	r30, r20
    16e0:	f5 07       	cpc	r31, r21
    16e2:	20 f0       	brcs	.+8      	; 0x16ec <__udivmodsi4_ep>
    16e4:	a2 1b       	sub	r26, r18
    16e6:	b3 0b       	sbc	r27, r19
    16e8:	e4 0b       	sbc	r30, r20
    16ea:	f5 0b       	sbc	r31, r21

000016ec <__udivmodsi4_ep>:
    16ec:	66 1f       	adc	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	1a 94       	dec	r1
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <__udivmodsi4_loop>
    16f8:	60 95       	com	r22
    16fa:	70 95       	com	r23
    16fc:	80 95       	com	r24
    16fe:	90 95       	com	r25
    1700:	9b 01       	movw	r18, r22
    1702:	ac 01       	movw	r20, r24
    1704:	bd 01       	movw	r22, r26
    1706:	cf 01       	movw	r24, r30
    1708:	08 95       	ret

0000170a <__muluhisi3>:
    170a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__umulhisi3>
    170e:	a5 9f       	mul	r26, r21
    1710:	90 0d       	add	r25, r0
    1712:	b4 9f       	mul	r27, r20
    1714:	90 0d       	add	r25, r0
    1716:	a4 9f       	mul	r26, r20
    1718:	80 0d       	add	r24, r0
    171a:	91 1d       	adc	r25, r1
    171c:	11 24       	eor	r1, r1
    171e:	08 95       	ret

00001720 <__ashldi3>:
    1720:	0f 93       	push	r16
    1722:	08 30       	cpi	r16, 0x08	; 8
    1724:	90 f0       	brcs	.+36     	; 0x174a <__ashldi3+0x2a>
    1726:	98 2f       	mov	r25, r24
    1728:	87 2f       	mov	r24, r23
    172a:	76 2f       	mov	r23, r22
    172c:	65 2f       	mov	r22, r21
    172e:	54 2f       	mov	r21, r20
    1730:	43 2f       	mov	r20, r19
    1732:	32 2f       	mov	r19, r18
    1734:	22 27       	eor	r18, r18
    1736:	08 50       	subi	r16, 0x08	; 8
    1738:	f4 cf       	rjmp	.-24     	; 0x1722 <__ashldi3+0x2>
    173a:	22 0f       	add	r18, r18
    173c:	33 1f       	adc	r19, r19
    173e:	44 1f       	adc	r20, r20
    1740:	55 1f       	adc	r21, r21
    1742:	66 1f       	adc	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 95       	dec	r16
    174c:	b2 f7       	brpl	.-20     	; 0x173a <__ashldi3+0x1a>
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <__adddi3>:
    1752:	2a 0d       	add	r18, r10
    1754:	3b 1d       	adc	r19, r11
    1756:	4c 1d       	adc	r20, r12
    1758:	5d 1d       	adc	r21, r13
    175a:	6e 1d       	adc	r22, r14
    175c:	7f 1d       	adc	r23, r15
    175e:	80 1f       	adc	r24, r16
    1760:	91 1f       	adc	r25, r17
    1762:	08 95       	ret

00001764 <__adddi3_s8>:
    1764:	00 24       	eor	r0, r0
    1766:	a7 fd       	sbrc	r26, 7
    1768:	00 94       	com	r0
    176a:	2a 0f       	add	r18, r26
    176c:	30 1d       	adc	r19, r0
    176e:	40 1d       	adc	r20, r0
    1770:	50 1d       	adc	r21, r0
    1772:	60 1d       	adc	r22, r0
    1774:	70 1d       	adc	r23, r0
    1776:	80 1d       	adc	r24, r0
    1778:	90 1d       	adc	r25, r0
    177a:	08 95       	ret

0000177c <__subdi3>:
    177c:	2a 19       	sub	r18, r10
    177e:	3b 09       	sbc	r19, r11
    1780:	4c 09       	sbc	r20, r12
    1782:	5d 09       	sbc	r21, r13
    1784:	6e 09       	sbc	r22, r14
    1786:	7f 09       	sbc	r23, r15
    1788:	80 0b       	sbc	r24, r16
    178a:	91 0b       	sbc	r25, r17
    178c:	08 95       	ret

0000178e <__cmpdi2>:
    178e:	2a 15       	cp	r18, r10
    1790:	3b 05       	cpc	r19, r11
    1792:	4c 05       	cpc	r20, r12
    1794:	5d 05       	cpc	r21, r13
    1796:	6e 05       	cpc	r22, r14
    1798:	7f 05       	cpc	r23, r15
    179a:	80 07       	cpc	r24, r16
    179c:	91 07       	cpc	r25, r17
    179e:	08 95       	ret

000017a0 <__cmpdi2_s8>:
    17a0:	00 24       	eor	r0, r0
    17a2:	a7 fd       	sbrc	r26, 7
    17a4:	00 94       	com	r0
    17a6:	2a 17       	cp	r18, r26
    17a8:	30 05       	cpc	r19, r0
    17aa:	40 05       	cpc	r20, r0
    17ac:	50 05       	cpc	r21, r0
    17ae:	60 05       	cpc	r22, r0
    17b0:	70 05       	cpc	r23, r0
    17b2:	80 05       	cpc	r24, r0
    17b4:	90 05       	cpc	r25, r0
    17b6:	08 95       	ret

000017b8 <__umulhisi3>:
    17b8:	a2 9f       	mul	r26, r18
    17ba:	b0 01       	movw	r22, r0
    17bc:	b3 9f       	mul	r27, r19
    17be:	c0 01       	movw	r24, r0
    17c0:	a3 9f       	mul	r26, r19
    17c2:	70 0d       	add	r23, r0
    17c4:	81 1d       	adc	r24, r1
    17c6:	11 24       	eor	r1, r1
    17c8:	91 1d       	adc	r25, r1
    17ca:	b2 9f       	mul	r27, r18
    17cc:	70 0d       	add	r23, r0
    17ce:	81 1d       	adc	r24, r1
    17d0:	11 24       	eor	r1, r1
    17d2:	91 1d       	adc	r25, r1
    17d4:	08 95       	ret

000017d6 <_exit>:
    17d6:	f8 94       	cli

000017d8 <__stop_program>:
    17d8:	ff cf       	rjmp	.-2      	; 0x17d8 <__stop_program>
