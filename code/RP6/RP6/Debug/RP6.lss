
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000015da  0000166e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  0080006a  0080006a  00001678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1c  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ae  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007df  00000000  00000000  00002c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00003480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c8  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d3  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 06 	call	0xc16	; 0xc16 <main>
      8a:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_i2c_slave>:

void I2C_sendArray(uint8_t I2Cdata[]){
	for(int i = 0; i <= 19; i++){
		//verzenden(8, I2Cdata[i]);
	}
}
      92:	11 b8       	out	0x01, r1	; 1
      94:	90 e2       	ldi	r25, 0x20	; 32
      96:	90 b9       	out	0x00, r25	; 0
      98:	95 e4       	ldi	r25, 0x45	; 69
      9a:	96 bf       	out	0x36, r25	; 54
      9c:	88 0f       	add	r24, r24
      9e:	82 b9       	out	0x02, r24	; 2
      a0:	08 95       	ret

000000a2 <slaaftwi>:
      a2:	81 b1       	in	r24, 0x01	; 1
      a4:	80 3a       	cpi	r24, 0xA0	; 160
      a6:	d1 f0       	breq	.+52     	; 0xdc <slaaftwi+0x3a>
      a8:	28 f4       	brcc	.+10     	; 0xb4 <slaaftwi+0x12>
      aa:	80 36       	cpi	r24, 0x60	; 96
      ac:	41 f0       	breq	.+16     	; 0xbe <slaaftwi+0x1c>
      ae:	80 38       	cpi	r24, 0x80	; 128
      b0:	49 f0       	breq	.+18     	; 0xc4 <slaaftwi+0x22>
      b2:	35 c0       	rjmp	.+106    	; 0x11e <slaaftwi+0x7c>
      b4:	88 3a       	cpi	r24, 0xA8	; 168
      b6:	21 f1       	breq	.+72     	; 0x100 <slaaftwi+0x5e>
      b8:	88 3b       	cpi	r24, 0xB8	; 184
      ba:	59 f1       	breq	.+86     	; 0x112 <slaaftwi+0x70>
      bc:	30 c0       	rjmp	.+96     	; 0x11e <slaaftwi+0x7c>
      be:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <teller.1905>
      c2:	2d c0       	rjmp	.+90     	; 0x11e <slaaftwi+0x7c>
      c4:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <teller.1905>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	8e 0f       	add	r24, r30
      cc:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <teller.1905>
      d0:	83 b1       	in	r24, 0x03	; 3
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	ec 57       	subi	r30, 0x7C	; 124
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	80 83       	st	Z, r24
      da:	21 c0       	rjmp	.+66     	; 0x11e <slaaftwi+0x7c>
      dc:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <ontfunc>
      e0:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <ontfunc+0x1>
      e4:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <teller.1905>
      e8:	84 e8       	ldi	r24, 0x84	; 132
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	09 95       	icall
      ee:	e4 e8       	ldi	r30, 0x84	; 132
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	88 e9       	ldi	r24, 0x98	; 152
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	11 92       	st	Z+, r1
      f8:	e8 17       	cp	r30, r24
      fa:	f9 07       	cpc	r31, r25
      fc:	e1 f7       	brne	.-8      	; 0xf6 <slaaftwi+0x54>
      fe:	0f c0       	rjmp	.+30     	; 0x11e <slaaftwi+0x7c>
     100:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <teller.1905>
     104:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <verfunc>
     108:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <verfunc+0x1>
     10c:	09 95       	icall
     10e:	83 b9       	out	0x03, r24	; 3
     110:	06 c0       	rjmp	.+12     	; 0x11e <slaaftwi+0x7c>
     112:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <verfunc>
     116:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <verfunc+0x1>
     11a:	09 95       	icall
     11c:	83 b9       	out	0x03, r24	; 3
     11e:	86 b7       	in	r24, 0x36	; 54
     120:	80 68       	ori	r24, 0x80	; 128
     122:	86 bf       	out	0x36, r24	; 54
     124:	08 95       	ret

00000126 <__vector_19>:
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
     148:	0e 94 51 00 	call	0xa2	; 0xa2 <slaaftwi>
     14c:	ff 91       	pop	r31
     14e:	ef 91       	pop	r30
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <init_LED>:
     16e:	87 b3       	in	r24, 0x17	; 23
     170:	83 68       	ori	r24, 0x83	; 131
     172:	87 bb       	out	0x17, r24	; 23
     174:	84 b3       	in	r24, 0x14	; 20
     176:	80 67       	ori	r24, 0x70	; 112
     178:	84 bb       	out	0x14, r24	; 20
     17a:	08 95       	ret

0000017c <init_micros>:
     17c:	83 b7       	in	r24, 0x33	; 51
     17e:	81 60       	ori	r24, 0x01	; 1
     180:	83 bf       	out	0x33, r24	; 51
     182:	83 b7       	in	r24, 0x33	; 51
     184:	82 60       	ori	r24, 0x02	; 2
     186:	83 bf       	out	0x33, r24	; 51
     188:	89 b7       	in	r24, 0x39	; 57
     18a:	81 60       	ori	r24, 0x01	; 1
     18c:	89 bf       	out	0x39, r24	; 57
     18e:	12 be       	out	0x32, r1	; 50
     190:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <t0TotalOverflow>
     194:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <t0TotalOverflow+0x1>
     198:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <t0TotalOverflow+0x2>
     19c:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <t0TotalOverflow+0x3>
     1a0:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <t0TotalOverflow+0x4>
     1a4:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <t0TotalOverflow+0x5>
     1a8:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <t0TotalOverflow+0x6>
     1ac:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <t0TotalOverflow+0x7>
     1b0:	08 95       	ret

000001b2 <__vector_11>:
     1b2:	1f 92       	push	r1
     1b4:	0f 92       	push	r0
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	0f 92       	push	r0
     1ba:	11 24       	eor	r1, r1
     1bc:	2f 93       	push	r18
     1be:	3f 93       	push	r19
     1c0:	4f 93       	push	r20
     1c2:	5f 93       	push	r21
     1c4:	6f 93       	push	r22
     1c6:	7f 93       	push	r23
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <t0TotalOverflow>
     1d2:	30 91 c7 00 	lds	r19, 0x00C7	; 0x8000c7 <t0TotalOverflow+0x1>
     1d6:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <t0TotalOverflow+0x2>
     1da:	50 91 c9 00 	lds	r21, 0x00C9	; 0x8000c9 <t0TotalOverflow+0x3>
     1de:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <t0TotalOverflow+0x4>
     1e2:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <t0TotalOverflow+0x5>
     1e6:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <t0TotalOverflow+0x6>
     1ea:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <t0TotalOverflow+0x7>
     1ee:	a1 e0       	ldi	r26, 0x01	; 1
     1f0:	0e 94 9e 0a 	call	0x153c	; 0x153c <__adddi3_s8>
     1f4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <t0TotalOverflow>
     1f8:	30 93 c7 00 	sts	0x00C7, r19	; 0x8000c7 <t0TotalOverflow+0x1>
     1fc:	40 93 c8 00 	sts	0x00C8, r20	; 0x8000c8 <t0TotalOverflow+0x2>
     200:	50 93 c9 00 	sts	0x00C9, r21	; 0x8000c9 <t0TotalOverflow+0x3>
     204:	60 93 ca 00 	sts	0x00CA, r22	; 0x8000ca <t0TotalOverflow+0x4>
     208:	70 93 cb 00 	sts	0x00CB, r23	; 0x8000cb <t0TotalOverflow+0x5>
     20c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <t0TotalOverflow+0x6>
     210:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <t0TotalOverflow+0x7>
     214:	af 91       	pop	r26
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	7f 91       	pop	r23
     21c:	6f 91       	pop	r22
     21e:	5f 91       	pop	r21
     220:	4f 91       	pop	r20
     222:	3f 91       	pop	r19
     224:	2f 91       	pop	r18
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <micros>:
     230:	af 92       	push	r10
     232:	bf 92       	push	r11
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	a2 b7       	in	r26, 0x32	; 50
     242:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <t0TotalOverflow>
     246:	30 91 c7 00 	lds	r19, 0x00C7	; 0x8000c7 <t0TotalOverflow+0x1>
     24a:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <t0TotalOverflow+0x2>
     24e:	50 91 c9 00 	lds	r21, 0x00C9	; 0x8000c9 <t0TotalOverflow+0x3>
     252:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <t0TotalOverflow+0x4>
     256:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <t0TotalOverflow+0x5>
     25a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <t0TotalOverflow+0x6>
     25e:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <t0TotalOverflow+0x7>
     262:	e0 e0       	ldi	r30, 0x00	; 0
     264:	fa 2f       	mov	r31, r26
     266:	ff 0f       	add	r31, r31
     268:	ff 0f       	add	r31, r31
     26a:	ff 0f       	add	r31, r31
     26c:	ff 23       	and	r31, r31
     26e:	14 f4       	brge	.+4      	; 0x274 <micros+0x44>
     270:	e1 50       	subi	r30, 0x01	; 1
     272:	ff 4f       	sbci	r31, 0xFF	; 255
     274:	ef 2f       	mov	r30, r31
     276:	ee 0f       	add	r30, r30
     278:	ee 0b       	sbc	r30, r30
     27a:	0b e0       	ldi	r16, 0x0B	; 11
     27c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__ashldi3>
     280:	a2 2e       	mov	r10, r18
     282:	b3 2e       	mov	r11, r19
     284:	c4 2e       	mov	r12, r20
     286:	d5 2e       	mov	r13, r21
     288:	e6 2e       	mov	r14, r22
     28a:	f7 2e       	mov	r15, r23
     28c:	08 2f       	mov	r16, r24
     28e:	19 2f       	mov	r17, r25
     290:	2f 2f       	mov	r18, r31
     292:	3e 2f       	mov	r19, r30
     294:	4e 2f       	mov	r20, r30
     296:	5e 2f       	mov	r21, r30
     298:	6e 2f       	mov	r22, r30
     29a:	7e 2f       	mov	r23, r30
     29c:	8e 2f       	mov	r24, r30
     29e:	9e 2f       	mov	r25, r30
     2a0:	0e 94 95 0a 	call	0x152a	; 0x152a <__adddi3>
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	df 90       	pop	r13
     2ae:	cf 90       	pop	r12
     2b0:	bf 90       	pop	r11
     2b2:	af 90       	pop	r10
     2b4:	08 95       	ret

000002b6 <init_rp6Data>:
     2b6:	e9 eb       	ldi	r30, 0xB9	; 185
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	10 82       	st	Z, r1
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	81 83       	std	Z+1, r24	; 0x01
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	9e e1       	ldi	r25, 0x1E	; 30
     2c4:	93 83       	std	Z+3, r25	; 0x03
     2c6:	28 eb       	ldi	r18, 0xB8	; 184
     2c8:	3b e0       	ldi	r19, 0x0B	; 11
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	24 83       	std	Z+4, r18	; 0x04
     2ce:	28 e8       	ldi	r18, 0x88	; 136
     2d0:	33 e1       	ldi	r19, 0x13	; 19
     2d2:	37 83       	std	Z+7, r19	; 0x07
     2d4:	26 83       	std	Z+6, r18	; 0x06
     2d6:	40 e4       	ldi	r20, 0x40	; 64
     2d8:	5d e0       	ldi	r21, 0x0D	; 13
     2da:	63 e0       	ldi	r22, 0x03	; 3
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	40 87       	std	Z+8, r20	; 0x08
     2e0:	51 87       	std	Z+9, r21	; 0x09
     2e2:	62 87       	std	Z+10, r22	; 0x0a
     2e4:	73 87       	std	Z+11, r23	; 0x0b
     2e6:	84 87       	std	Z+12, r24	; 0x0c
     2e8:	08 95       	ret

000002ea <init_arduinoData>:
     2ea:	e5 eb       	ldi	r30, 0xB5	; 181
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	11 82       	std	Z+1, r1	; 0x01
     2f0:	10 82       	st	Z, r1
     2f2:	13 82       	std	Z+3, r1	; 0x03
     2f4:	12 82       	std	Z+2, r1	; 0x02
     2f6:	08 95       	ret

000002f8 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     2f8:	81 b3       	in	r24, 0x11	; 17
     2fa:	80 63       	ori	r24, 0x30	; 48
     2fc:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     2fe:	81 b3       	in	r24, 0x11	; 17
     300:	83 7f       	andi	r24, 0xF3	; 243
     302:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     304:	84 b3       	in	r24, 0x14	; 20
     306:	8c 60       	ori	r24, 0x0C	; 12
     308:	84 bb       	out	0x14, r24	; 20
     30a:	08 95       	ret

0000030c <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     30c:	8f b5       	in	r24, 0x2f	; 47
     30e:	80 68       	ori	r24, 0x80	; 128
     310:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     312:	8f b5       	in	r24, 0x2f	; 47
     314:	80 62       	ori	r24, 0x20	; 32
     316:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     318:	8f b5       	in	r24, 0x2f	; 47
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     31e:	8e b5       	in	r24, 0x2e	; 46
     320:	80 61       	ori	r24, 0x10	; 16
     322:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     324:	8e b5       	in	r24, 0x2e	; 46
     326:	81 60       	ori	r24, 0x01	; 1
     328:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	99 ef       	ldi	r25, 0xF9	; 249
     32e:	97 bd       	out	0x27, r25	; 39
     330:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     332:	1b bc       	out	0x2b, r1	; 43
     334:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     336:	19 bc       	out	0x29, r1	; 41
     338:	18 bc       	out	0x28, r1	; 40
     33a:	08 95       	ret

0000033c <init_motor_encoder>:
}


void init_motor_encoder(){
	arduinoData.motorEncoderLVal = 0;				//Reset the motor encoder variable
     33c:	e5 eb       	ldi	r30, 0xB5	; 181
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	11 82       	std	Z+1, r1	; 0x01
     342:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;				//---^
     344:	13 82       	std	Z+3, r1	; 0x03
     346:	12 82       	std	Z+2, r1	; 0x02
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     348:	85 b7       	in	r24, 0x35	; 53
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     34e:	85 b7       	in	r24, 0x35	; 53
     350:	84 60       	ori	r24, 0x04	; 4
     352:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     354:	8b b7       	in	r24, 0x3b	; 59
     356:	80 64       	ori	r24, 0x40	; 64
     358:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     35a:	8b b7       	in	r24, 0x3b	; 59
     35c:	80 68       	ori	r24, 0x80	; 128
     35e:	8b bf       	out	0x3b, r24	; 59
     360:	08 95       	ret

00000362 <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     362:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     366:	0e 94 86 01 	call	0x30c	; 0x30c <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     36a:	0e 94 9e 01 	call	0x33c	; 0x33c <init_motor_encoder>
     36e:	08 95       	ret

00000370 <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
     37e:	ef 93       	push	r30
     380:	ff 93       	push	r31
	arduinoData.motorEncoderLVal++;							//Increase the encoder variable
     382:	e5 eb       	ldi	r30, 0xB5	; 181
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	91 81       	ldd	r25, Z+1	; 0x01
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	80 83       	st	Z, r24
}
     390:	ff 91       	pop	r31
     392:	ef 91       	pop	r30
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <__vector_2>:


ISR(INT1_vect){
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
	arduinoData.motorEncoderRVal++;							//Increase the encoder variable
     3b4:	e5 eb       	ldi	r30, 0xB5	; 181
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	82 81       	ldd	r24, Z+2	; 0x02
     3ba:	93 81       	ldd	r25, Z+3	; 0x03
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	93 83       	std	Z+3, r25	; 0x03
     3c0:	82 83       	std	Z+2, r24	; 0x02
}
     3c2:	ff 91       	pop	r31
     3c4:	ef 91       	pop	r30
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     3d4:	89 2b       	or	r24, r25
     3d6:	39 f0       	breq	.+14     	; 0x3e6 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     3d8:	8b b7       	in	r24, 0x3b	; 59
     3da:	80 64       	ori	r24, 0x40	; 64
     3dc:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     3de:	8b b7       	in	r24, 0x3b	; 59
     3e0:	80 68       	ori	r24, 0x80	; 128
     3e2:	8b bf       	out	0x3b, r24	; 59
     3e4:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	8f 7b       	andi	r24, 0xBF	; 191
     3ea:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     3ec:	8b b7       	in	r24, 0x3b	; 59
     3ee:	8f 77       	andi	r24, 0x7F	; 127
     3f0:	8b bf       	out	0x3b, r24	; 59
     3f2:	08 95       	ret

000003f4 <motorDriver>:
	}
}


int motorDriver(){
     3f4:	2f 92       	push	r2
     3f6:	3f 92       	push	r3
     3f8:	4f 92       	push	r4
     3fa:	5f 92       	push	r5
     3fc:	6f 92       	push	r6
     3fe:	7f 92       	push	r7
     400:	8f 92       	push	r8
     402:	9f 92       	push	r9
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	6d 97       	sbiw	r28, 0x1d	; 29
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     428:	0e 94 18 01 	call	0x230	; 0x230 <micros>
     42c:	a0 90 7c 00 	lds	r10, 0x007C	; 0x80007c <updateTimer.2063>
     430:	b0 90 7d 00 	lds	r11, 0x007D	; 0x80007d <updateTimer.2063+0x1>
     434:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <updateTimer.2063+0x2>
     438:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <updateTimer.2063+0x3>
     43c:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <updateTimer.2063+0x4>
     440:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <updateTimer.2063+0x5>
     444:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <updateTimer.2063+0x6>
     448:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <updateTimer.2063+0x7>
     44c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__cmpdi2>
     450:	08 f4       	brcc	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	c6 c3       	rjmp	.+1932   	; 0xbe0 <__stack+0x381>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     454:	0e 94 18 01 	call	0x230	; 0x230 <micros>
     458:	62 2e       	mov	r6, r18
     45a:	73 2e       	mov	r7, r19
     45c:	49 87       	std	Y+9, r20	; 0x09
     45e:	59 83       	std	Y+1, r21	; 0x01
     460:	b6 2f       	mov	r27, r22
     462:	a7 2f       	mov	r26, r23
     464:	08 2f       	mov	r16, r24
     466:	19 2f       	mov	r17, r25
     468:	e9 eb       	ldi	r30, 0xB9	; 185
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 84       	ldd	r8, Z+8	; 0x08
     46e:	91 84       	ldd	r9, Z+9	; 0x09
     470:	a2 84       	ldd	r10, Z+10	; 0x0a
     472:	b3 84       	ldd	r11, Z+11	; 0x0b
     474:	28 2d       	mov	r18, r8
     476:	39 2d       	mov	r19, r9
     478:	4a 2d       	mov	r20, r10
     47a:	5b 2d       	mov	r21, r11
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	a6 2c       	mov	r10, r6
     486:	b7 2c       	mov	r11, r7
     488:	c9 84       	ldd	r12, Y+9	; 0x09
     48a:	d9 80       	ldd	r13, Y+1	; 0x01
     48c:	eb 2e       	mov	r14, r27
     48e:	fa 2e       	mov	r15, r26
     490:	0e 94 95 0a 	call	0x152a	; 0x152a <__adddi3>
     494:	29 8b       	std	Y+17, r18	; 0x11
     496:	3a 8b       	std	Y+18, r19	; 0x12
     498:	4b 8b       	std	Y+19, r20	; 0x13
     49a:	5c 8b       	std	Y+20, r21	; 0x14
     49c:	6d 8b       	std	Y+21, r22	; 0x15
     49e:	7e 8b       	std	Y+22, r23	; 0x16
     4a0:	8f 8b       	std	Y+23, r24	; 0x17
     4a2:	98 8f       	std	Y+24, r25	; 0x18
     4a4:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.2063>
     4a8:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.2063+0x1>
     4ac:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.2063+0x2>
     4b0:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.2063+0x3>
     4b4:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.2063+0x4>
     4b8:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.2063+0x5>
     4bc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.2063+0x6>
     4c0:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.2063+0x7>
	}
	
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     4c4:	40 81       	ld	r20, Z
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	34 e6       	ldi	r19, 0x64	; 100
     4ca:	42 03       	mulsu	r20, r18
     4cc:	c0 01       	movw	r24, r0
     4ce:	43 9f       	mul	r20, r19
     4d0:	90 0d       	add	r25, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	64 e6       	ldi	r22, 0x64	; 100
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	0e 94 16 09 	call	0x122c	; 0x122c <__divmodhi4>
     4dc:	60 83       	st	Z, r22
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     4de:	46 80       	ldd	r4, Z+6	; 0x06
     4e0:	57 80       	ldd	r5, Z+7	; 0x07
     4e2:	06 2e       	mov	r0, r22
     4e4:	00 0c       	add	r0, r0
     4e6:	77 0b       	sbc	r23, r23
     4e8:	64 15       	cp	r22, r4
     4ea:	75 05       	cpc	r23, r5
     4ec:	10 f4       	brcc	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4ee:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <rp6Data>
	
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     4f2:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <rp6Data+0x1>
     4f6:	0e 2e       	mov	r0, r30
     4f8:	00 0c       	add	r0, r0
     4fa:	ff 0b       	sbc	r31, r31
     4fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2064>
     500:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2064+0x1>
     504:	e8 17       	cp	r30, r24
     506:	f9 07       	cpc	r31, r25
     508:	41 f1       	breq	.+80     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     50a:	20 90 74 00 	lds	r2, 0x0074	; 0x800074 <currentDriveSpeed.2067>
     50e:	00 91 75 00 	lds	r16, 0x0075	; 0x800075 <currentDriveSpeed.2067+0x1>
     512:	0c 8f       	std	Y+28, r16	; 0x1c
     514:	30 90 76 00 	lds	r3, 0x0076	; 0x800076 <currentDriveSpeed.2067+0x2>
     518:	60 90 77 00 	lds	r6, 0x0077	; 0x800077 <currentDriveSpeed.2067+0x3>
     51c:	70 90 78 00 	lds	r7, 0x0078	; 0x800078 <currentDriveSpeed.2067+0x4>
     520:	80 90 79 00 	lds	r8, 0x0079	; 0x800079 <currentDriveSpeed.2067+0x5>
     524:	90 90 7a 00 	lds	r9, 0x007A	; 0x80007a <currentDriveSpeed.2067+0x6>
     528:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <currentDriveSpeed.2067+0x7>
     52c:	1d 8f       	std	Y+29, r17	; 0x1d
     52e:	22 2d       	mov	r18, r2
     530:	30 2f       	mov	r19, r16
     532:	43 2d       	mov	r20, r3
     534:	56 2d       	mov	r21, r6
     536:	67 2d       	mov	r22, r7
     538:	78 2d       	mov	r23, r8
     53a:	89 2d       	mov	r24, r9
     53c:	91 2f       	mov	r25, r17
     53e:	a0 e0       	ldi	r26, 0x00	; 0
     540:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__cmpdi2_s8>
     544:	19 f0       	breq	.+6      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     546:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <rp6Data>
     54a:	07 c0       	rjmp	.+14     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     54c:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2064+0x1>
     550:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2064>
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
     554:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <rp6Data>
     558:	51 c0       	rjmp	.+162    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     55a:	20 90 b9 00 	lds	r2, 0x00B9	; 0x8000b9 <rp6Data>
     55e:	22 2d       	mov	r18, r2
     560:	22 0f       	add	r18, r18
     562:	22 0b       	sbc	r18, r18
     564:	2c 8f       	std	Y+28, r18	; 0x1c
     566:	32 2e       	mov	r3, r18
     568:	62 2e       	mov	r6, r18
     56a:	73 2c       	mov	r7, r3
     56c:	83 2c       	mov	r8, r3
     56e:	93 2c       	mov	r9, r3
     570:	2d 8f       	std	Y+29, r18	; 0x1d
     572:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <currentDriveSpeed.2067>
     576:	39 87       	std	Y+9, r19	; 0x09
     578:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <currentDriveSpeed.2067+0x1>
     57c:	4a 87       	std	Y+10, r20	; 0x0a
     57e:	50 91 76 00 	lds	r21, 0x0076	; 0x800076 <currentDriveSpeed.2067+0x2>
     582:	5b 87       	std	Y+11, r21	; 0x0b
     584:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <currentDriveSpeed.2067+0x3>
     588:	6c 87       	std	Y+12, r22	; 0x0c
     58a:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <currentDriveSpeed.2067+0x4>
     58e:	7d 87       	std	Y+13, r23	; 0x0d
     590:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <currentDriveSpeed.2067+0x5>
     594:	8e 87       	std	Y+14, r24	; 0x0e
     596:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <currentDriveSpeed.2067+0x6>
     59a:	9f 87       	std	Y+15, r25	; 0x0f
     59c:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <currentDriveSpeed.2067+0x7>
     5a0:	a8 8b       	std	Y+16, r26	; 0x10
     5a2:	22 2d       	mov	r18, r2
     5a4:	33 2d       	mov	r19, r3
     5a6:	43 2d       	mov	r20, r3
     5a8:	53 2f       	mov	r21, r19
     5aa:	63 2f       	mov	r22, r19
     5ac:	73 2f       	mov	r23, r19
     5ae:	83 2f       	mov	r24, r19
     5b0:	93 2d       	mov	r25, r3
     5b2:	a9 84       	ldd	r10, Y+9	; 0x09
     5b4:	ba 84       	ldd	r11, Y+10	; 0x0a
     5b6:	cb 84       	ldd	r12, Y+11	; 0x0b
     5b8:	dc 84       	ldd	r13, Y+12	; 0x0c
     5ba:	ed 84       	ldd	r14, Y+13	; 0x0d
     5bc:	fe 84       	ldd	r15, Y+14	; 0x0e
     5be:	0f 85       	ldd	r16, Y+15	; 0x0f
     5c0:	1a 2f       	mov	r17, r26
     5c2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__subdi3>
     5c6:	29 83       	std	Y+1, r18	; 0x01
     5c8:	39 8f       	std	Y+25, r19	; 0x19
     5ca:	4a 8f       	std	Y+26, r20	; 0x1a
     5cc:	5b 8f       	std	Y+27, r21	; 0x1b
     5ce:	a6 2e       	mov	r10, r22
     5d0:	b7 2e       	mov	r11, r23
     5d2:	08 2f       	mov	r16, r24
     5d4:	19 2f       	mov	r17, r25
     5d6:	0e 94 6c 07 	call	0xed8	; 0xed8 <__floatdisf>
     5da:	6b 01       	movw	r12, r22
     5dc:	7c 01       	movw	r14, r24
     5de:	a7 01       	movw	r20, r14
     5e0:	96 01       	movw	r18, r12
     5e2:	c7 01       	movw	r24, r14
     5e4:	b6 01       	movw	r22, r12
     5e6:	0e 94 4e 08 	call	0x109c	; 0x109c <__mulsf3>
     5ea:	0e 94 c1 08 	call	0x1182	; 0x1182 <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     5ee:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixunssfsi>
     5f2:	60 3d       	cpi	r22, 0xD0	; 208
     5f4:	77 40       	sbci	r23, 0x07	; 7
     5f6:	81 05       	cpc	r24, r1
     5f8:	91 05       	cpc	r25, r1
     5fa:	98 f4       	brcc	.+38     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
		currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     5fc:	20 92 74 00 	sts	0x0074, r2	; 0x800074 <currentDriveSpeed.2067>
     600:	3c 8d       	ldd	r19, Y+28	; 0x1c
     602:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2067+0x1>
     606:	30 92 76 00 	sts	0x0076, r3	; 0x800076 <currentDriveSpeed.2067+0x2>
     60a:	60 92 77 00 	sts	0x0077, r6	; 0x800077 <currentDriveSpeed.2067+0x3>
     60e:	70 92 78 00 	sts	0x0078, r7	; 0x800078 <currentDriveSpeed.2067+0x4>
     612:	80 92 79 00 	sts	0x0079, r8	; 0x800079 <currentDriveSpeed.2067+0x5>
     616:	90 92 7a 00 	sts	0x007A, r9	; 0x80007a <currentDriveSpeed.2067+0x6>
     61a:	4d 8d       	ldd	r20, Y+29	; 0x1d
     61c:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <currentDriveSpeed.2067+0x7>
     620:	1e c1       	rjmp	.+572    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
	}else{																			//If the difference is more than 2000
		if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     622:	29 81       	ldd	r18, Y+1	; 0x01
     624:	39 8d       	ldd	r19, Y+25	; 0x19
     626:	4a 8d       	ldd	r20, Y+26	; 0x1a
     628:	5b 8d       	ldd	r21, Y+27	; 0x1b
     62a:	6a 2d       	mov	r22, r10
     62c:	7b 2d       	mov	r23, r11
     62e:	80 2f       	mov	r24, r16
     630:	91 2f       	mov	r25, r17
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__cmpdi2_s8>
     638:	0c f0       	brlt	.+2      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     63a:	75 c0       	rjmp	.+234    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     63c:	52 01       	movw	r10, r4
     63e:	c1 2c       	mov	r12, r1
     640:	d1 2c       	mov	r13, r1
     642:	e1 2c       	mov	r14, r1
     644:	f1 2c       	mov	r15, r1
     646:	87 01       	movw	r16, r14
     648:	29 85       	ldd	r18, Y+9	; 0x09
     64a:	3a 85       	ldd	r19, Y+10	; 0x0a
     64c:	4b 85       	ldd	r20, Y+11	; 0x0b
     64e:	5c 85       	ldd	r21, Y+12	; 0x0c
     650:	6d 85       	ldd	r22, Y+13	; 0x0d
     652:	7e 85       	ldd	r23, Y+14	; 0x0e
     654:	8f 85       	ldd	r24, Y+15	; 0x0f
     656:	98 89       	ldd	r25, Y+16	; 0x10
     658:	49 82       	std	Y+1, r4	; 0x01
     65a:	ba 82       	std	Y+2, r11	; 0x02
     65c:	cb 82       	std	Y+3, r12	; 0x03
     65e:	dc 82       	std	Y+4, r13	; 0x04
     660:	ed 82       	std	Y+5, r14	; 0x05
     662:	fe 82       	std	Y+6, r15	; 0x06
     664:	0f 83       	std	Y+7, r16	; 0x07
     666:	18 87       	std	Y+8, r17	; 0x08
     668:	c1 2c       	mov	r12, r1
     66a:	d1 2c       	mov	r13, r1
     66c:	e1 2c       	mov	r14, r1
     66e:	f1 2c       	mov	r15, r1
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	10 e0       	ldi	r17, 0x00	; 0
     674:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__cmpdi2>
     678:	9c f4       	brge	.+38     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
				currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     67a:	20 92 74 00 	sts	0x0074, r2	; 0x800074 <currentDriveSpeed.2067>
     67e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     680:	50 93 75 00 	sts	0x0075, r21	; 0x800075 <currentDriveSpeed.2067+0x1>
     684:	30 92 76 00 	sts	0x0076, r3	; 0x800076 <currentDriveSpeed.2067+0x2>
     688:	30 92 77 00 	sts	0x0077, r3	; 0x800077 <currentDriveSpeed.2067+0x3>
     68c:	30 92 78 00 	sts	0x0078, r3	; 0x800078 <currentDriveSpeed.2067+0x4>
     690:	30 92 79 00 	sts	0x0079, r3	; 0x800079 <currentDriveSpeed.2067+0x5>
     694:	30 92 7a 00 	sts	0x007A, r3	; 0x80007a <currentDriveSpeed.2067+0x6>
     698:	6d 8d       	ldd	r22, Y+29	; 0x1d
     69a:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <currentDriveSpeed.2067+0x7>
     69e:	df c0       	rjmp	.+446    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     6a0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <rp6Data+0x3>
     6a4:	a9 84       	ldd	r10, Y+9	; 0x09
     6a6:	ba 84       	ldd	r11, Y+10	; 0x0a
     6a8:	cb 84       	ldd	r12, Y+11	; 0x0b
     6aa:	dc 84       	ldd	r13, Y+12	; 0x0c
     6ac:	ed 84       	ldd	r14, Y+13	; 0x0d
     6ae:	fe 84       	ldd	r15, Y+14	; 0x0e
     6b0:	0f 85       	ldd	r16, Y+15	; 0x0f
     6b2:	18 89       	ldd	r17, Y+16	; 0x10
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 4c 09 	call	0x1298	; 0x1298 <__muldi3>
     6c6:	0f 2e       	mov	r0, r31
     6c8:	f4 e6       	ldi	r31, 0x64	; 100
     6ca:	af 2e       	mov	r10, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	b1 2c       	mov	r11, r1
     6d0:	c1 2c       	mov	r12, r1
     6d2:	d1 2c       	mov	r13, r1
     6d4:	e1 2c       	mov	r14, r1
     6d6:	f1 2c       	mov	r15, r1
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	0e 94 a7 09 	call	0x134e	; 0x134e <__divdi3>
     6e0:	a2 2e       	mov	r10, r18
     6e2:	b3 2e       	mov	r11, r19
     6e4:	c4 2e       	mov	r12, r20
     6e6:	d5 2e       	mov	r13, r21
     6e8:	e6 2e       	mov	r14, r22
     6ea:	f7 2e       	mov	r15, r23
     6ec:	08 2f       	mov	r16, r24
     6ee:	19 2f       	mov	r17, r25
     6f0:	29 85       	ldd	r18, Y+9	; 0x09
     6f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     6f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f8:	6d 85       	ldd	r22, Y+13	; 0x0d
     6fa:	7e 85       	ldd	r23, Y+14	; 0x0e
     6fc:	8f 85       	ldd	r24, Y+15	; 0x0f
     6fe:	98 89       	ldd	r25, Y+16	; 0x10
     700:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__subdi3>
     704:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2067>
     708:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2067+0x1>
     70c:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2067+0x2>
     710:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2067+0x3>
     714:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2067+0x4>
     718:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2067+0x5>
     71c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2067+0x6>
     720:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2067+0x7>
     724:	9c c0       	rjmp	.+312    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     726:	82 01       	movw	r16, r4
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	ba 01       	movw	r22, r20
     732:	49 82       	std	Y+1, r4	; 0x01
     734:	1a 83       	std	Y+2, r17	; 0x02
     736:	2b 83       	std	Y+3, r18	; 0x03
     738:	3c 83       	std	Y+4, r19	; 0x04
     73a:	4d 83       	std	Y+5, r20	; 0x05
     73c:	5e 83       	std	Y+6, r21	; 0x06
     73e:	6f 83       	std	Y+7, r22	; 0x07
     740:	78 87       	std	Y+8, r23	; 0x08
     742:	29 85       	ldd	r18, Y+9	; 0x09
     744:	3a 85       	ldd	r19, Y+10	; 0x0a
     746:	4b 85       	ldd	r20, Y+11	; 0x0b
     748:	5c 85       	ldd	r21, Y+12	; 0x0c
     74a:	6d 85       	ldd	r22, Y+13	; 0x0d
     74c:	7e 85       	ldd	r23, Y+14	; 0x0e
     74e:	8f 85       	ldd	r24, Y+15	; 0x0f
     750:	98 89       	ldd	r25, Y+16	; 0x10
     752:	a4 2c       	mov	r10, r4
     754:	b1 2e       	mov	r11, r17
     756:	c1 2c       	mov	r12, r1
     758:	d1 2c       	mov	r13, r1
     75a:	e1 2c       	mov	r14, r1
     75c:	f1 2c       	mov	r15, r1
     75e:	00 e0       	ldi	r16, 0x00	; 0
     760:	10 e0       	ldi	r17, 0x00	; 0
     762:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__cmpdi2>
     766:	9c f4       	brge	.+38     	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     768:	0e 94 95 0a 	call	0x152a	; 0x152a <__adddi3>
     76c:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <currentDriveSpeed.2067>
     770:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2067+0x1>
     774:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2067+0x2>
     778:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2067+0x3>
     77c:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2067+0x4>
     780:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2067+0x5>
     784:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2067+0x6>
     788:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2067+0x7>
     78c:	68 c0       	rjmp	.+208    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     78e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <rp6Data+0x3>
     792:	a9 84       	ldd	r10, Y+9	; 0x09
     794:	ba 84       	ldd	r11, Y+10	; 0x0a
     796:	cb 84       	ldd	r12, Y+11	; 0x0b
     798:	dc 84       	ldd	r13, Y+12	; 0x0c
     79a:	ed 84       	ldd	r14, Y+13	; 0x0d
     79c:	fe 84       	ldd	r15, Y+14	; 0x0e
     79e:	0f 85       	ldd	r16, Y+15	; 0x0f
     7a0:	18 89       	ldd	r17, Y+16	; 0x10
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 4c 09 	call	0x1298	; 0x1298 <__muldi3>
     7b4:	0f 2e       	mov	r0, r31
     7b6:	f4 e6       	ldi	r31, 0x64	; 100
     7b8:	af 2e       	mov	r10, r31
     7ba:	f0 2d       	mov	r31, r0
     7bc:	b1 2c       	mov	r11, r1
     7be:	c1 2c       	mov	r12, r1
     7c0:	d1 2c       	mov	r13, r1
     7c2:	e1 2c       	mov	r14, r1
     7c4:	f1 2c       	mov	r15, r1
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	0e 94 a7 09 	call	0x134e	; 0x134e <__divdi3>
     7ce:	a9 84       	ldd	r10, Y+9	; 0x09
     7d0:	ba 84       	ldd	r11, Y+10	; 0x0a
     7d2:	cb 84       	ldd	r12, Y+11	; 0x0b
     7d4:	dc 84       	ldd	r13, Y+12	; 0x0c
     7d6:	ed 84       	ldd	r14, Y+13	; 0x0d
     7d8:	fe 84       	ldd	r15, Y+14	; 0x0e
     7da:	0f 85       	ldd	r16, Y+15	; 0x0f
     7dc:	18 89       	ldd	r17, Y+16	; 0x10
     7de:	0e 94 95 0a 	call	0x152a	; 0x152a <__adddi3>
     7e2:	29 87       	std	Y+9, r18	; 0x09
     7e4:	3a 87       	std	Y+10, r19	; 0x0a
     7e6:	4b 87       	std	Y+11, r20	; 0x0b
     7e8:	5c 87       	std	Y+12, r21	; 0x0c
     7ea:	b6 2f       	mov	r27, r22
     7ec:	a7 2f       	mov	r26, r23
     7ee:	f8 2f       	mov	r31, r24
     7f0:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     7f2:	22 2d       	mov	r18, r2
     7f4:	3c 8d       	ldd	r19, Y+28	; 0x1c
     7f6:	43 2d       	mov	r20, r3
     7f8:	53 2d       	mov	r21, r3
     7fa:	63 2d       	mov	r22, r3
     7fc:	73 2d       	mov	r23, r3
     7fe:	83 2d       	mov	r24, r3
     800:	9d 8d       	ldd	r25, Y+29	; 0x1d
     802:	a9 84       	ldd	r10, Y+9	; 0x09
     804:	ba 84       	ldd	r11, Y+10	; 0x0a
     806:	cb 84       	ldd	r12, Y+11	; 0x0b
     808:	dc 84       	ldd	r13, Y+12	; 0x0c
     80a:	eb 2e       	mov	r14, r27
     80c:	fa 2e       	mov	r15, r26
     80e:	0f 2f       	mov	r16, r31
     810:	1e 2f       	mov	r17, r30
     812:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__cmpdi2>
     816:	8c f0       	brlt	.+34     	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     818:	a0 92 74 00 	sts	0x0074, r10	; 0x800074 <currentDriveSpeed.2067>
     81c:	b0 92 75 00 	sts	0x0075, r11	; 0x800075 <currentDriveSpeed.2067+0x1>
     820:	c0 92 76 00 	sts	0x0076, r12	; 0x800076 <currentDriveSpeed.2067+0x2>
     824:	d0 92 77 00 	sts	0x0077, r13	; 0x800077 <currentDriveSpeed.2067+0x3>
     828:	b0 93 78 00 	sts	0x0078, r27	; 0x800078 <currentDriveSpeed.2067+0x4>
     82c:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <currentDriveSpeed.2067+0x5>
     830:	f0 93 7a 00 	sts	0x007A, r31	; 0x80007a <currentDriveSpeed.2067+0x6>
     834:	e0 93 7b 00 	sts	0x007B, r30	; 0x80007b <currentDriveSpeed.2067+0x7>
     838:	12 c0       	rjmp	.+36     	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     83a:	20 92 74 00 	sts	0x0074, r2	; 0x800074 <currentDriveSpeed.2067>
     83e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     840:	40 93 75 00 	sts	0x0075, r20	; 0x800075 <currentDriveSpeed.2067+0x1>
     844:	30 92 76 00 	sts	0x0076, r3	; 0x800076 <currentDriveSpeed.2067+0x2>
     848:	30 92 77 00 	sts	0x0077, r3	; 0x800077 <currentDriveSpeed.2067+0x3>
     84c:	30 92 78 00 	sts	0x0078, r3	; 0x800078 <currentDriveSpeed.2067+0x4>
     850:	30 92 79 00 	sts	0x0079, r3	; 0x800079 <currentDriveSpeed.2067+0x5>
     854:	30 92 7a 00 	sts	0x007A, r3	; 0x80007a <currentDriveSpeed.2067+0x6>
     858:	5d 8d       	ldd	r21, Y+29	; 0x1d
     85a:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <currentDriveSpeed.2067+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     85e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2064>
     862:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2064+0x1>
     866:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2068+0x1>
     86a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2068>
	rightMotorDirection = currentDriveDirection;
     86e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     872:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     876:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <currentDriveSpeed.2067>
     87a:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <currentDriveSpeed.2067+0x1>
     87e:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <currentDriveSpeed.2067+0x2>
     882:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <currentDriveSpeed.2067+0x3>
     886:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <currentDriveSpeed.2067+0x4>
     88a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <currentDriveSpeed.2067+0x5>
     88e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <currentDriveSpeed.2067+0x6>
     892:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <currentDriveSpeed.2067+0x7>
     896:	c2 2e       	mov	r12, r18
     898:	d3 2e       	mov	r13, r19
     89a:	e4 2e       	mov	r14, r20
     89c:	f5 2e       	mov	r15, r21
     89e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <leftMotorSpeed.2070>
     8a2:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <leftMotorSpeed.2070+0x1>
     8a6:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <leftMotorSpeed.2070+0x2>
     8aa:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <leftMotorSpeed.2070+0x3>
	rightMotorSpeed = currentDriveSpeed;
     8ae:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <rightMotorSpeed.2071>
     8b2:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <rightMotorSpeed.2071+0x1>
     8b6:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <rightMotorSpeed.2071+0x2>
     8ba:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <rightMotorSpeed.2071+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     8be:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <rp6Data+0x2>
     8c2:	0e 2e       	mov	r0, r30
     8c4:	00 0c       	add	r0, r0
     8c6:	ff 0b       	sbc	r31, r31
     8c8:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__data_end>
     8cc:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__data_end+0x1>
     8d0:	ea 17       	cp	r30, r26
     8d2:	fb 07       	cpc	r31, r27
     8d4:	81 f1       	breq	.+96     	; 0x936 <__stack+0xd7>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     8d6:	f0 93 6b 00 	sts	0x006B, r31	; 0x80006b <__data_end+0x1>
     8da:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     8de:	ef 2b       	or	r30, r31
     8e0:	29 f4       	brne	.+10     	; 0x8ec <__stack+0x8d>
			enableMotorEncoder(1);											//Enable the encoders
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <enableMotorEncoder>
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__stack+0x95>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     8f4:	29 89       	ldd	r18, Y+17	; 0x11
     8f6:	3a 89       	ldd	r19, Y+18	; 0x12
     8f8:	4b 89       	ldd	r20, Y+19	; 0x13
     8fa:	5c 89       	ldd	r21, Y+20	; 0x14
     8fc:	6d 89       	ldd	r22, Y+21	; 0x15
     8fe:	7e 89       	ldd	r23, Y+22	; 0x16
     900:	8f 89       	ldd	r24, Y+23	; 0x17
     902:	98 8d       	ldd	r25, Y+24	; 0x18
     904:	20 56       	subi	r18, 0x60	; 96
     906:	39 47       	sbci	r19, 0x79	; 121
     908:	4e 4f       	sbci	r20, 0xFE	; 254
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	6f 4f       	sbci	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	8f 4f       	sbci	r24, 0xFF	; 255
     912:	9f 4f       	sbci	r25, 0xFF	; 255
     914:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <updateTimer.2063>
     918:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <updateTimer.2063+0x1>
     91c:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <updateTimer.2063+0x2>
     920:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <updateTimer.2063+0x3>
     924:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <updateTimer.2063+0x4>
     928:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <updateTimer.2063+0x5>
     92c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <updateTimer.2063+0x6>
     930:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <updateTimer.2063+0x7>
     934:	d5 c0       	rjmp	.+426    	; 0xae0 <__stack+0x281>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     936:	ef 3f       	cpi	r30, 0xFF	; 255
     938:	af ef       	ldi	r26, 0xFF	; 255
     93a:	fa 07       	cpc	r31, r26
     93c:	09 f0       	breq	.+2      	; 0x940 <__stack+0xe1>
     93e:	45 c0       	rjmp	.+138    	; 0x9ca <__stack+0x16b>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__cmpdi2_s8>
     946:	29 f5       	brne	.+74     	; 0x992 <__stack+0x133>
			leftMotorDirection = 0;											//Turn the left motor backwards
     948:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2068+0x1>
     94c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2068>
			rightMotorDirection = 1;										//Turn the right motor forwards
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     958:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     95c:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <rp6Data+0x4>
     960:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <rp6Data+0x5>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	84 0d       	add	r24, r4
     96a:	95 1d       	adc	r25, r5
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2070>
     974:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2070+0x1>
     978:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2070+0x2>
     97c:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2070+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     980:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2071>
     984:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2071+0x1>
     988:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2071+0x2>
     98c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2071+0x3>
     990:	a7 c0       	rjmp	.+334    	; 0xae0 <__stack+0x281>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = rp6Data.driveSpeedThreshold;							//Set the left motor to minimal
     992:	c2 01       	movw	r24, r4
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2070>
     99c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2070+0x1>
     9a0:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2070+0x2>
     9a4:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2070+0x3>
			rightMotorSpeed += rp6Data.turnRate;									//Increase the right motor with the turn rate
     9a8:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <rp6Data+0x4>
     9ac:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <rp6Data+0x5>
     9b0:	c8 0e       	add	r12, r24
     9b2:	d9 1e       	adc	r13, r25
     9b4:	e1 1c       	adc	r14, r1
     9b6:	f1 1c       	adc	r15, r1
     9b8:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <rightMotorSpeed.2071>
     9bc:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <rightMotorSpeed.2071+0x1>
     9c0:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <rightMotorSpeed.2071+0x2>
     9c4:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <rightMotorSpeed.2071+0x3>
     9c8:	8b c0       	rjmp	.+278    	; 0xae0 <__stack+0x281>
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     9ca:	30 97       	sbiw	r30, 0x00	; 0
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <__stack+0x171>
     9ce:	41 c0       	rjmp	.+130    	; 0xa52 <__stack+0x1f3>
		if(arduinoData.motorEncoderLVal != arduinoData.motorEncoderRVal){
     9d0:	e5 eb       	ldi	r30, 0xB5	; 181
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	00 81       	ld	r16, Z
     9d6:	11 81       	ldd	r17, Z+1	; 0x01
     9d8:	1a 83       	std	Y+2, r17	; 0x02
     9da:	09 83       	std	Y+1, r16	; 0x01
     9dc:	02 81       	ldd	r16, Z+2	; 0x02
     9de:	13 81       	ldd	r17, Z+3	; 0x03
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	3a 81       	ldd	r19, Y+2	; 0x02
     9e4:	20 17       	cp	r18, r16
     9e6:	31 07       	cpc	r19, r17
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__stack+0x18d>
     9ea:	7a c0       	rjmp	.+244    	; 0xae0 <__stack+0x281>
			if(arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatunsisf>
     9f4:	6b 01       	movw	r12, r22
     9f6:	7c 01       	movw	r14, r24
     9f8:	69 81       	ldd	r22, Y+1	; 0x01
     9fa:	7a 81       	ldd	r23, Y+2	; 0x02
     9fc:	60 1b       	sub	r22, r16
     9fe:	71 0b       	sbc	r23, r17
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatunsisf>
     a08:	4b 01       	movw	r8, r22
     a0a:	5c 01       	movw	r10, r24
     a0c:	a5 01       	movw	r20, r10
     a0e:	94 01       	movw	r18, r8
     a10:	c5 01       	movw	r24, r10
     a12:	b4 01       	movw	r22, r8
     a14:	0e 94 4e 08 	call	0x109c	; 0x109c <__mulsf3>
     a18:	0e 94 c1 08 	call	0x1182	; 0x1182 <sqrt>
     a1c:	9b 01       	movw	r18, r22
     a1e:	ac 01       	movw	r20, r24
     a20:	c7 01       	movw	r24, r14
     a22:	b6 01       	movw	r22, r12
     a24:	0e 94 4e 08 	call	0x109c	; 0x109c <__mulsf3>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	48 ec       	ldi	r20, 0xC8	; 200
     a2e:	52 e4       	ldi	r21, 0x42	; 66
     a30:	0e 94 cb 06 	call	0xd96	; 0xd96 <__divsf3>
     a34:	a7 01       	movw	r20, r14
     a36:	96 01       	movw	r18, r12
     a38:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__addsf3>
     a3c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixunssfsi>
     a40:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <rightMotorSpeed.2071>
     a44:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <rightMotorSpeed.2071+0x1>
     a48:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <rightMotorSpeed.2071+0x2>
     a4c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <rightMotorSpeed.2071+0x3>
     a50:	47 c0       	rjmp	.+142    	; 0xae0 <__stack+0x281>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x1f9>
     a56:	44 c0       	rjmp	.+136    	; 0xae0 <__stack+0x281>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__cmpdi2_s8>
     a5e:	29 f5       	brne	.+74     	; 0xaaa <__stack+0x24b>
			leftMotorDirection = 1;											//Left motor forward
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2068+0x1>
     a68:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2068>
			rightMotorDirection = 0;										//Right motor backward
     a6c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     a70:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     a74:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <rp6Data+0x4>
     a78:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <rp6Data+0x5>
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	84 0d       	add	r24, r4
     a82:	95 1d       	adc	r25, r5
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2070>
     a8c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2070+0x1>
     a90:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2070+0x2>
     a94:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2070+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     a98:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2071>
     a9c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2071+0x1>
     aa0:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2071+0x2>
     aa4:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2071+0x3>
     aa8:	1b c0       	rjmp	.+54     	; 0xae0 <__stack+0x281>
			}else{														//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed += rp6Data.turnRate;										//Increase the left motor with the set turn rate
     aaa:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <rp6Data+0x4>
     aae:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <rp6Data+0x5>
     ab2:	c8 0e       	add	r12, r24
     ab4:	d9 1e       	adc	r13, r25
     ab6:	e1 1c       	adc	r14, r1
     ab8:	f1 1c       	adc	r15, r1
     aba:	c0 92 70 00 	sts	0x0070, r12	; 0x800070 <leftMotorSpeed.2070>
     abe:	d0 92 71 00 	sts	0x0071, r13	; 0x800071 <leftMotorSpeed.2070+0x1>
     ac2:	e0 92 72 00 	sts	0x0072, r14	; 0x800072 <leftMotorSpeed.2070+0x2>
     ac6:	f0 92 73 00 	sts	0x0073, r15	; 0x800073 <leftMotorSpeed.2070+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold;							//Set right motor to minimal
     aca:	c2 01       	movw	r24, r4
     acc:	a0 e0       	ldi	r26, 0x00	; 0
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2071>
     ad4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2071+0x1>
     ad8:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2071+0x2>
     adc:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2071+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     ae0:	c0 90 6c 00 	lds	r12, 0x006C	; 0x80006c <rightMotorSpeed.2071>
     ae4:	d0 90 6d 00 	lds	r13, 0x006D	; 0x80006d <rightMotorSpeed.2071+0x1>
     ae8:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <rightMotorSpeed.2071+0x2>
     aec:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <rightMotorSpeed.2071+0x3>
     af0:	d7 01       	movw	r26, r14
     af2:	c6 01       	movw	r24, r12
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	aa 1f       	adc	r26, r26
     afa:	bb 1f       	adc	r27, r27
     afc:	8c 0d       	add	r24, r12
     afe:	9d 1d       	adc	r25, r13
     b00:	ae 1d       	adc	r26, r14
     b02:	bf 1d       	adc	r27, r15
     b04:	ac 01       	movw	r20, r24
     b06:	bd 01       	movw	r22, r26
     b08:	44 0f       	add	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	66 1f       	adc	r22, r22
     b0e:	77 1f       	adc	r23, r23
     b10:	44 0f       	add	r20, r20
     b12:	55 1f       	adc	r21, r21
     b14:	66 1f       	adc	r22, r22
     b16:	77 1f       	adc	r23, r23
     b18:	8c 01       	movw	r16, r24
     b1a:	9d 01       	movw	r18, r26
     b1c:	04 0f       	add	r16, r20
     b1e:	15 1f       	adc	r17, r21
     b20:	26 1f       	adc	r18, r22
     b22:	37 1f       	adc	r19, r23
     b24:	c9 01       	movw	r24, r18
     b26:	b8 01       	movw	r22, r16
     b28:	24 e6       	ldi	r18, 0x64	; 100
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	0e 94 2a 09 	call	0x1254	; 0x1254 <__udivmodsi4>
     b34:	c2 0e       	add	r12, r18
     b36:	d3 1e       	adc	r13, r19
     b38:	e4 1e       	adc	r14, r20
     b3a:	f5 1e       	adc	r15, r21
     b3c:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <rightMotorSpeed.2071>
     b40:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <rightMotorSpeed.2071+0x1>
     b44:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <rightMotorSpeed.2071+0x2>
     b48:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <rightMotorSpeed.2071+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     b4c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2070>
     b50:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2070+0x1>
     b54:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <leftMotorSpeed.2070+0x2>
     b58:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <leftMotorSpeed.2070+0x3>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	94 46       	sbci	r25, 0x64	; 100
     b60:	a1 05       	cpc	r26, r1
     b62:	b1 05       	cpc	r27, r1
     b64:	60 f0       	brcs	.+24     	; 0xb7e <__stack+0x31f>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	94 e6       	ldi	r25, 0x64	; 100
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <leftMotorSpeed.2070>
     b72:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <leftMotorSpeed.2070+0x1>
     b76:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <leftMotorSpeed.2070+0x2>
     b7a:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <leftMotorSpeed.2070+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     b7e:	21 e3       	ldi	r18, 0x31	; 49
     b80:	c2 16       	cp	r12, r18
     b82:	25 e7       	ldi	r18, 0x75	; 117
     b84:	d2 06       	cpc	r13, r18
     b86:	e1 04       	cpc	r14, r1
     b88:	f1 04       	cpc	r15, r1
     b8a:	60 f0       	brcs	.+24     	; 0xba4 <__stack+0x345>
		rightMotorSpeed = 30000;						//Set it back to its max
     b8c:	80 e3       	ldi	r24, 0x30	; 48
     b8e:	95 e7       	ldi	r25, 0x75	; 117
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rightMotorSpeed.2071>
     b98:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rightMotorSpeed.2071+0x1>
     b9c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <rightMotorSpeed.2071+0x2>
     ba0:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <rightMotorSpeed.2071+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     ba4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2068>
     ba8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2068+0x1>
     bac:	89 2b       	or	r24, r25
     bae:	11 f0       	breq	.+4      	; 0xbb4 <__stack+0x355>
		PORTC &= 0b11111011;
     bb0:	aa 98       	cbi	0x15, 2	; 21
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <__stack+0x357>
	}else{
		PORTC |= 0b00000100;
     bb4:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     bb6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     bba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     bbe:	89 2b       	or	r24, r25
     bc0:	11 f0       	breq	.+4      	; 0xbc6 <__stack+0x367>
		PORTC &= 0b11110111;
     bc2:	ab 98       	cbi	0x15, 3	; 21
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <__stack+0x369>
	}else{
		PORTC |= 0b00001000;
     bc6:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     bc8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rightMotorSpeed.2071>
     bcc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rightMotorSpeed.2071+0x1>
     bd0:	9b bd       	out	0x2b, r25	; 43
     bd2:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     bd4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <leftMotorSpeed.2070>
     bd8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <leftMotorSpeed.2070+0x1>
     bdc:	99 bd       	out	0x29, r25	; 41
     bde:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	6d 96       	adiw	r28, 0x1d	; 29
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	af 90       	pop	r10
     c04:	9f 90       	pop	r9
     c06:	8f 90       	pop	r8
     c08:	7f 90       	pop	r7
     c0a:	6f 90       	pop	r6
     c0c:	5f 90       	pop	r5
     c0e:	4f 90       	pop	r4
     c10:	3f 90       	pop	r3
     c12:	2f 90       	pop	r2
     c14:	08 95       	ret

00000c16 <main>:
	return databyte++;
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     c16:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     c18:	0e 94 be 00 	call	0x17c	; 0x17c <init_micros>
	
	init_motor();
     c1c:	0e 94 b1 01 	call	0x362	; 0x362 <init_motor>
	init_LED();
     c20:	0e 94 b7 00 	call	0x16e	; 0x16e <init_LED>
	
	init_i2c_slave(8);
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	0e 94 49 00 	call	0x92	; 0x92 <init_i2c_slave>
	
	init_rp6Data();
     c2a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <init_rp6Data>
	init_arduinoData();
     c2e:	0e 94 75 01 	call	0x2ea	; 0x2ea <init_arduinoData>
	//-----------------------
	
	while(1){
		motorDriver();
     c32:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <motorDriver>
		
		if(I2CsyncTimer < micros()){
     c36:	0e 94 18 01 	call	0x230	; 0x230 <micros>
     c3a:	a0 90 ad 00 	lds	r10, 0x00AD	; 0x8000ad <I2CsyncTimer>
     c3e:	b0 90 ae 00 	lds	r11, 0x00AE	; 0x8000ae <I2CsyncTimer+0x1>
     c42:	c0 90 af 00 	lds	r12, 0x00AF	; 0x8000af <I2CsyncTimer+0x2>
     c46:	d0 90 b0 00 	lds	r13, 0x00B0	; 0x8000b0 <I2CsyncTimer+0x3>
     c4a:	e0 90 b1 00 	lds	r14, 0x00B1	; 0x8000b1 <I2CsyncTimer+0x4>
     c4e:	f0 90 b2 00 	lds	r15, 0x00B2	; 0x8000b2 <I2CsyncTimer+0x5>
     c52:	00 91 b3 00 	lds	r16, 0x00B3	; 0x8000b3 <I2CsyncTimer+0x6>
     c56:	10 91 b4 00 	lds	r17, 0x00B4	; 0x8000b4 <I2CsyncTimer+0x7>
     c5a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__cmpdi2>
     c5e:	49 f3       	breq	.-46     	; 0xc32 <main+0x1c>
     c60:	40 f3       	brcs	.-48     	; 0xc32 <main+0x1c>
			arduinoDataConstructor();
			I2CsyncTimer = micros() + syncSpeed;
     c62:	0e 94 18 01 	call	0x230	; 0x230 <micros>
     c66:	a2 2e       	mov	r10, r18
     c68:	b3 2e       	mov	r11, r19
     c6a:	c4 2e       	mov	r12, r20
     c6c:	d5 2e       	mov	r13, r21
     c6e:	e6 2e       	mov	r14, r22
     c70:	f7 2e       	mov	r15, r23
     c72:	08 2f       	mov	r16, r24
     c74:	19 2f       	mov	r17, r25
     c76:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <syncSpeed>
     c7a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <syncSpeed+0x1>
     c7e:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <syncSpeed+0x2>
     c82:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <syncSpeed+0x3>
     c86:	28 2f       	mov	r18, r24
     c88:	39 2f       	mov	r19, r25
     c8a:	4a 2f       	mov	r20, r26
     c8c:	5b 2f       	mov	r21, r27
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 95 0a 	call	0x152a	; 0x152a <__adddi3>
     c9a:	20 93 ad 00 	sts	0x00AD, r18	; 0x8000ad <I2CsyncTimer>
     c9e:	30 93 ae 00 	sts	0x00AE, r19	; 0x8000ae <I2CsyncTimer+0x1>
     ca2:	40 93 af 00 	sts	0x00AF, r20	; 0x8000af <I2CsyncTimer+0x2>
     ca6:	50 93 b0 00 	sts	0x00B0, r21	; 0x8000b0 <I2CsyncTimer+0x3>
     caa:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <I2CsyncTimer+0x4>
     cae:	70 93 b2 00 	sts	0x00B2, r23	; 0x8000b2 <I2CsyncTimer+0x5>
     cb2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <I2CsyncTimer+0x6>
     cb6:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <I2CsyncTimer+0x7>
     cba:	bb cf       	rjmp	.-138    	; 0xc32 <main+0x1c>

00000cbc <__subsf3>:
     cbc:	50 58       	subi	r21, 0x80	; 128

00000cbe <__addsf3>:
     cbe:	bb 27       	eor	r27, r27
     cc0:	aa 27       	eor	r26, r26
     cc2:	0e 94 76 06 	call	0xcec	; 0xcec <__addsf3x>
     cc6:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_round>
     cca:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_pscA>
     cce:	38 f0       	brcs	.+14     	; 0xcde <__addsf3+0x20>
     cd0:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_pscB>
     cd4:	20 f0       	brcs	.+8      	; 0xcde <__addsf3+0x20>
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__addsf3+0x28>
     cd8:	9f 3f       	cpi	r25, 0xFF	; 255
     cda:	19 f4       	brne	.+6      	; 0xce2 <__addsf3+0x24>
     cdc:	26 f4       	brtc	.+8      	; 0xce6 <__addsf3+0x28>
     cde:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
     ce2:	0e f4       	brtc	.+2      	; 0xce6 <__addsf3+0x28>
     ce4:	e0 95       	com	r30
     ce6:	e7 fb       	bst	r30, 7
     ce8:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>

00000cec <__addsf3x>:
     cec:	e9 2f       	mov	r30, r25
     cee:	0e 94 25 08 	call	0x104a	; 0x104a <__fp_split3>
     cf2:	58 f3       	brcs	.-42     	; 0xcca <__addsf3+0xc>
     cf4:	ba 17       	cp	r27, r26
     cf6:	62 07       	cpc	r22, r18
     cf8:	73 07       	cpc	r23, r19
     cfa:	84 07       	cpc	r24, r20
     cfc:	95 07       	cpc	r25, r21
     cfe:	20 f0       	brcs	.+8      	; 0xd08 <__addsf3x+0x1c>
     d00:	79 f4       	brne	.+30     	; 0xd20 <__addsf3x+0x34>
     d02:	a6 f5       	brtc	.+104    	; 0xd6c <__addsf3x+0x80>
     d04:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_zero>
     d08:	0e f4       	brtc	.+2      	; 0xd0c <__addsf3x+0x20>
     d0a:	e0 95       	com	r30
     d0c:	0b 2e       	mov	r0, r27
     d0e:	ba 2f       	mov	r27, r26
     d10:	a0 2d       	mov	r26, r0
     d12:	0b 01       	movw	r0, r22
     d14:	b9 01       	movw	r22, r18
     d16:	90 01       	movw	r18, r0
     d18:	0c 01       	movw	r0, r24
     d1a:	ca 01       	movw	r24, r20
     d1c:	a0 01       	movw	r20, r0
     d1e:	11 24       	eor	r1, r1
     d20:	ff 27       	eor	r31, r31
     d22:	59 1b       	sub	r21, r25
     d24:	99 f0       	breq	.+38     	; 0xd4c <__addsf3x+0x60>
     d26:	59 3f       	cpi	r21, 0xF9	; 249
     d28:	50 f4       	brcc	.+20     	; 0xd3e <__addsf3x+0x52>
     d2a:	50 3e       	cpi	r21, 0xE0	; 224
     d2c:	68 f1       	brcs	.+90     	; 0xd88 <__addsf3x+0x9c>
     d2e:	1a 16       	cp	r1, r26
     d30:	f0 40       	sbci	r31, 0x00	; 0
     d32:	a2 2f       	mov	r26, r18
     d34:	23 2f       	mov	r18, r19
     d36:	34 2f       	mov	r19, r20
     d38:	44 27       	eor	r20, r20
     d3a:	58 5f       	subi	r21, 0xF8	; 248
     d3c:	f3 cf       	rjmp	.-26     	; 0xd24 <__addsf3x+0x38>
     d3e:	46 95       	lsr	r20
     d40:	37 95       	ror	r19
     d42:	27 95       	ror	r18
     d44:	a7 95       	ror	r26
     d46:	f0 40       	sbci	r31, 0x00	; 0
     d48:	53 95       	inc	r21
     d4a:	c9 f7       	brne	.-14     	; 0xd3e <__addsf3x+0x52>
     d4c:	7e f4       	brtc	.+30     	; 0xd6c <__addsf3x+0x80>
     d4e:	1f 16       	cp	r1, r31
     d50:	ba 0b       	sbc	r27, r26
     d52:	62 0b       	sbc	r22, r18
     d54:	73 0b       	sbc	r23, r19
     d56:	84 0b       	sbc	r24, r20
     d58:	ba f0       	brmi	.+46     	; 0xd88 <__addsf3x+0x9c>
     d5a:	91 50       	subi	r25, 0x01	; 1
     d5c:	a1 f0       	breq	.+40     	; 0xd86 <__addsf3x+0x9a>
     d5e:	ff 0f       	add	r31, r31
     d60:	bb 1f       	adc	r27, r27
     d62:	66 1f       	adc	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	88 1f       	adc	r24, r24
     d68:	c2 f7       	brpl	.-16     	; 0xd5a <__addsf3x+0x6e>
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <__addsf3x+0x9c>
     d6c:	ba 0f       	add	r27, r26
     d6e:	62 1f       	adc	r22, r18
     d70:	73 1f       	adc	r23, r19
     d72:	84 1f       	adc	r24, r20
     d74:	48 f4       	brcc	.+18     	; 0xd88 <__addsf3x+0x9c>
     d76:	87 95       	ror	r24
     d78:	77 95       	ror	r23
     d7a:	67 95       	ror	r22
     d7c:	b7 95       	ror	r27
     d7e:	f7 95       	ror	r31
     d80:	9e 3f       	cpi	r25, 0xFE	; 254
     d82:	08 f0       	brcs	.+2      	; 0xd86 <__addsf3x+0x9a>
     d84:	b0 cf       	rjmp	.-160    	; 0xce6 <__addsf3+0x28>
     d86:	93 95       	inc	r25
     d88:	88 0f       	add	r24, r24
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <__addsf3x+0xa2>
     d8c:	99 27       	eor	r25, r25
     d8e:	ee 0f       	add	r30, r30
     d90:	97 95       	ror	r25
     d92:	87 95       	ror	r24
     d94:	08 95       	ret

00000d96 <__divsf3>:
     d96:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3x>
     d9a:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_round>
     d9e:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_pscB>
     da2:	58 f0       	brcs	.+22     	; 0xdba <__divsf3+0x24>
     da4:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_pscA>
     da8:	40 f0       	brcs	.+16     	; 0xdba <__divsf3+0x24>
     daa:	29 f4       	brne	.+10     	; 0xdb6 <__divsf3+0x20>
     dac:	5f 3f       	cpi	r21, 0xFF	; 255
     dae:	29 f0       	breq	.+10     	; 0xdba <__divsf3+0x24>
     db0:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
     db4:	51 11       	cpse	r21, r1
     db6:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_szero>
     dba:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>

00000dbe <__divsf3x>:
     dbe:	0e 94 25 08 	call	0x104a	; 0x104a <__fp_split3>
     dc2:	68 f3       	brcs	.-38     	; 0xd9e <__divsf3+0x8>

00000dc4 <__divsf3_pse>:
     dc4:	99 23       	and	r25, r25
     dc6:	b1 f3       	breq	.-20     	; 0xdb4 <__divsf3+0x1e>
     dc8:	55 23       	and	r21, r21
     dca:	91 f3       	breq	.-28     	; 0xdb0 <__divsf3+0x1a>
     dcc:	95 1b       	sub	r25, r21
     dce:	55 0b       	sbc	r21, r21
     dd0:	bb 27       	eor	r27, r27
     dd2:	aa 27       	eor	r26, r26
     dd4:	62 17       	cp	r22, r18
     dd6:	73 07       	cpc	r23, r19
     dd8:	84 07       	cpc	r24, r20
     dda:	38 f0       	brcs	.+14     	; 0xdea <__divsf3_pse+0x26>
     ddc:	9f 5f       	subi	r25, 0xFF	; 255
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	44 1f       	adc	r20, r20
     de6:	aa 1f       	adc	r26, r26
     de8:	a9 f3       	breq	.-22     	; 0xdd4 <__divsf3_pse+0x10>
     dea:	35 d0       	rcall	.+106    	; 0xe56 <__divsf3_pse+0x92>
     dec:	0e 2e       	mov	r0, r30
     dee:	3a f0       	brmi	.+14     	; 0xdfe <__divsf3_pse+0x3a>
     df0:	e0 e8       	ldi	r30, 0x80	; 128
     df2:	32 d0       	rcall	.+100    	; 0xe58 <__divsf3_pse+0x94>
     df4:	91 50       	subi	r25, 0x01	; 1
     df6:	50 40       	sbci	r21, 0x00	; 0
     df8:	e6 95       	lsr	r30
     dfa:	00 1c       	adc	r0, r0
     dfc:	ca f7       	brpl	.-14     	; 0xdf0 <__divsf3_pse+0x2c>
     dfe:	2b d0       	rcall	.+86     	; 0xe56 <__divsf3_pse+0x92>
     e00:	fe 2f       	mov	r31, r30
     e02:	29 d0       	rcall	.+82     	; 0xe56 <__divsf3_pse+0x92>
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	bb 1f       	adc	r27, r27
     e0c:	26 17       	cp	r18, r22
     e0e:	37 07       	cpc	r19, r23
     e10:	48 07       	cpc	r20, r24
     e12:	ab 07       	cpc	r26, r27
     e14:	b0 e8       	ldi	r27, 0x80	; 128
     e16:	09 f0       	breq	.+2      	; 0xe1a <__divsf3_pse+0x56>
     e18:	bb 0b       	sbc	r27, r27
     e1a:	80 2d       	mov	r24, r0
     e1c:	bf 01       	movw	r22, r30
     e1e:	ff 27       	eor	r31, r31
     e20:	93 58       	subi	r25, 0x83	; 131
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	3a f0       	brmi	.+14     	; 0xe34 <__divsf3_pse+0x70>
     e26:	9e 3f       	cpi	r25, 0xFE	; 254
     e28:	51 05       	cpc	r21, r1
     e2a:	78 f0       	brcs	.+30     	; 0xe4a <__divsf3_pse+0x86>
     e2c:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
     e30:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_szero>
     e34:	5f 3f       	cpi	r21, 0xFF	; 255
     e36:	e4 f3       	brlt	.-8      	; 0xe30 <__divsf3_pse+0x6c>
     e38:	98 3e       	cpi	r25, 0xE8	; 232
     e3a:	d4 f3       	brlt	.-12     	; 0xe30 <__divsf3_pse+0x6c>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b7 95       	ror	r27
     e44:	f7 95       	ror	r31
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	c9 f7       	brne	.-14     	; 0xe3c <__divsf3_pse+0x78>
     e4a:	88 0f       	add	r24, r24
     e4c:	91 1d       	adc	r25, r1
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret
     e56:	e1 e0       	ldi	r30, 0x01	; 1
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	bb 1f       	adc	r27, r27
     e60:	62 17       	cp	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	ba 07       	cpc	r27, r26
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__divsf3_pse+0xae>
     e6a:	62 1b       	sub	r22, r18
     e6c:	73 0b       	sbc	r23, r19
     e6e:	84 0b       	sbc	r24, r20
     e70:	ba 0b       	sbc	r27, r26
     e72:	ee 1f       	adc	r30, r30
     e74:	88 f7       	brcc	.-30     	; 0xe58 <__divsf3_pse+0x94>
     e76:	e0 95       	com	r30
     e78:	08 95       	ret

00000e7a <__fixunssfsi>:
     e7a:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_splitA>
     e7e:	88 f0       	brcs	.+34     	; 0xea2 <__fixunssfsi+0x28>
     e80:	9f 57       	subi	r25, 0x7F	; 127
     e82:	98 f0       	brcs	.+38     	; 0xeaa <__fixunssfsi+0x30>
     e84:	b9 2f       	mov	r27, r25
     e86:	99 27       	eor	r25, r25
     e88:	b7 51       	subi	r27, 0x17	; 23
     e8a:	b0 f0       	brcs	.+44     	; 0xeb8 <__fixunssfsi+0x3e>
     e8c:	e1 f0       	breq	.+56     	; 0xec6 <__fixunssfsi+0x4c>
     e8e:	66 0f       	add	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	88 1f       	adc	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	1a f0       	brmi	.+6      	; 0xe9e <__fixunssfsi+0x24>
     e98:	ba 95       	dec	r27
     e9a:	c9 f7       	brne	.-14     	; 0xe8e <__fixunssfsi+0x14>
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <__fixunssfsi+0x4c>
     e9e:	b1 30       	cpi	r27, 0x01	; 1
     ea0:	91 f0       	breq	.+36     	; 0xec6 <__fixunssfsi+0x4c>
     ea2:	0e 94 47 08 	call	0x108e	; 0x108e <__fp_zero>
     ea6:	b1 e0       	ldi	r27, 0x01	; 1
     ea8:	08 95       	ret
     eaa:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_zero>
     eae:	67 2f       	mov	r22, r23
     eb0:	78 2f       	mov	r23, r24
     eb2:	88 27       	eor	r24, r24
     eb4:	b8 5f       	subi	r27, 0xF8	; 248
     eb6:	39 f0       	breq	.+14     	; 0xec6 <__fixunssfsi+0x4c>
     eb8:	b9 3f       	cpi	r27, 0xF9	; 249
     eba:	cc f3       	brlt	.-14     	; 0xeae <__fixunssfsi+0x34>
     ebc:	86 95       	lsr	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b3 95       	inc	r27
     ec4:	d9 f7       	brne	.-10     	; 0xebc <__fixunssfsi+0x42>
     ec6:	3e f4       	brtc	.+14     	; 0xed6 <__fixunssfsi+0x5c>
     ec8:	90 95       	com	r25
     eca:	80 95       	com	r24
     ecc:	70 95       	com	r23
     ece:	61 95       	neg	r22
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	8f 4f       	sbci	r24, 0xFF	; 255
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	08 95       	ret

00000ed8 <__floatdisf>:
     ed8:	97 fb       	bst	r25, 7
     eda:	16 f4       	brtc	.+4      	; 0xee0 <__floatdisf+0x8>
     edc:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_negdi>
     ee0:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_di2sf>

00000ee4 <__floatunsisf>:
     ee4:	e8 94       	clt
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <__floatsisf+0x12>

00000ee8 <__floatsisf>:
     ee8:	97 fb       	bst	r25, 7
     eea:	3e f4       	brtc	.+14     	; 0xefa <__floatsisf+0x12>
     eec:	90 95       	com	r25
     eee:	80 95       	com	r24
     ef0:	70 95       	com	r23
     ef2:	61 95       	neg	r22
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	99 23       	and	r25, r25
     efc:	a9 f0       	breq	.+42     	; 0xf28 <__floatsisf+0x40>
     efe:	f9 2f       	mov	r31, r25
     f00:	96 e9       	ldi	r25, 0x96	; 150
     f02:	bb 27       	eor	r27, r27
     f04:	93 95       	inc	r25
     f06:	f6 95       	lsr	r31
     f08:	87 95       	ror	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f1 11       	cpse	r31, r1
     f12:	f8 cf       	rjmp	.-16     	; 0xf04 <__floatsisf+0x1c>
     f14:	fa f4       	brpl	.+62     	; 0xf54 <__floatsisf+0x6c>
     f16:	bb 0f       	add	r27, r27
     f18:	11 f4       	brne	.+4      	; 0xf1e <__floatsisf+0x36>
     f1a:	60 ff       	sbrs	r22, 0
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <__floatsisf+0x6c>
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <__floatsisf+0x6c>
     f28:	88 23       	and	r24, r24
     f2a:	11 f0       	breq	.+4      	; 0xf30 <__floatsisf+0x48>
     f2c:	96 e9       	ldi	r25, 0x96	; 150
     f2e:	11 c0       	rjmp	.+34     	; 0xf52 <__floatsisf+0x6a>
     f30:	77 23       	and	r23, r23
     f32:	21 f0       	breq	.+8      	; 0xf3c <__floatsisf+0x54>
     f34:	9e e8       	ldi	r25, 0x8E	; 142
     f36:	87 2f       	mov	r24, r23
     f38:	76 2f       	mov	r23, r22
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <__floatsisf+0x5e>
     f3c:	66 23       	and	r22, r22
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__floatsisf+0x74>
     f40:	96 e8       	ldi	r25, 0x86	; 134
     f42:	86 2f       	mov	r24, r22
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	2a f0       	brmi	.+10     	; 0xf54 <__floatsisf+0x6c>
     f4a:	9a 95       	dec	r25
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	da f7       	brpl	.-10     	; 0xf4a <__floatsisf+0x62>
     f54:	88 0f       	add	r24, r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret

00000f5e <__floatundisf>:
     f5e:	e8 94       	clt

00000f60 <__fp_di2sf>:
     f60:	f9 2f       	mov	r31, r25
     f62:	96 eb       	ldi	r25, 0xB6	; 182
     f64:	ff 23       	and	r31, r31
     f66:	81 f0       	breq	.+32     	; 0xf88 <__fp_di2sf+0x28>
     f68:	12 16       	cp	r1, r18
     f6a:	13 06       	cpc	r1, r19
     f6c:	14 06       	cpc	r1, r20
     f6e:	44 0b       	sbc	r20, r20
     f70:	93 95       	inc	r25
     f72:	f6 95       	lsr	r31
     f74:	87 95       	ror	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	57 95       	ror	r21
     f7c:	40 40       	sbci	r20, 0x00	; 0
     f7e:	ff 23       	and	r31, r31
     f80:	b9 f7       	brne	.-18     	; 0xf70 <__fp_di2sf+0x10>
     f82:	1b c0       	rjmp	.+54     	; 0xfba <__fp_di2sf+0x5a>
     f84:	99 27       	eor	r25, r25
     f86:	08 95       	ret
     f88:	88 23       	and	r24, r24
     f8a:	51 f4       	brne	.+20     	; 0xfa0 <__fp_di2sf+0x40>
     f8c:	98 50       	subi	r25, 0x08	; 8
     f8e:	d2 f7       	brpl	.-12     	; 0xf84 <__fp_di2sf+0x24>
     f90:	87 2b       	or	r24, r23
     f92:	76 2f       	mov	r23, r22
     f94:	65 2f       	mov	r22, r21
     f96:	54 2f       	mov	r21, r20
     f98:	43 2f       	mov	r20, r19
     f9a:	32 2f       	mov	r19, r18
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	b1 f3       	breq	.-20     	; 0xf8c <__fp_di2sf+0x2c>
     fa0:	12 16       	cp	r1, r18
     fa2:	13 06       	cpc	r1, r19
     fa4:	14 06       	cpc	r1, r20
     fa6:	44 0b       	sbc	r20, r20
     fa8:	88 23       	and	r24, r24
     faa:	3a f0       	brmi	.+14     	; 0xfba <__fp_di2sf+0x5a>
     fac:	9a 95       	dec	r25
     fae:	44 0f       	add	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	66 1f       	adc	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	ca f7       	brpl	.-14     	; 0xfac <__fp_di2sf+0x4c>
     fba:	55 23       	and	r21, r21
     fbc:	4a f4       	brpl	.+18     	; 0xfd0 <__fp_di2sf+0x70>
     fbe:	44 0f       	add	r20, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__fp_di2sf+0x68>
     fc4:	60 ff       	sbrs	r22, 0
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <__fp_di2sf+0x70>
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	88 0f       	add	r24, r24
     fd2:	96 95       	lsr	r25
     fd4:	87 95       	ror	r24
     fd6:	97 f9       	bld	r25, 7
     fd8:	08 95       	ret

00000fda <__fp_inf>:
     fda:	97 f9       	bld	r25, 7
     fdc:	9f 67       	ori	r25, 0x7F	; 127
     fde:	80 e8       	ldi	r24, 0x80	; 128
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	08 95       	ret

00000fe6 <__fp_nan>:
     fe6:	9f ef       	ldi	r25, 0xFF	; 255
     fe8:	80 ec       	ldi	r24, 0xC0	; 192
     fea:	08 95       	ret

00000fec <__fp_negdi>:
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	60 95       	com	r22
     ff4:	50 95       	com	r21
     ff6:	40 95       	com	r20
     ff8:	30 95       	com	r19
     ffa:	21 95       	neg	r18
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	4f 4f       	sbci	r20, 0xFF	; 255
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	6f 4f       	sbci	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8f 4f       	sbci	r24, 0xFF	; 255
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	08 95       	ret

0000100c <__fp_pscA>:
    100c:	00 24       	eor	r0, r0
    100e:	0a 94       	dec	r0
    1010:	16 16       	cp	r1, r22
    1012:	17 06       	cpc	r1, r23
    1014:	18 06       	cpc	r1, r24
    1016:	09 06       	cpc	r0, r25
    1018:	08 95       	ret

0000101a <__fp_pscB>:
    101a:	00 24       	eor	r0, r0
    101c:	0a 94       	dec	r0
    101e:	12 16       	cp	r1, r18
    1020:	13 06       	cpc	r1, r19
    1022:	14 06       	cpc	r1, r20
    1024:	05 06       	cpc	r0, r21
    1026:	08 95       	ret

00001028 <__fp_round>:
    1028:	09 2e       	mov	r0, r25
    102a:	03 94       	inc	r0
    102c:	00 0c       	add	r0, r0
    102e:	11 f4       	brne	.+4      	; 0x1034 <__fp_round+0xc>
    1030:	88 23       	and	r24, r24
    1032:	52 f0       	brmi	.+20     	; 0x1048 <__fp_round+0x20>
    1034:	bb 0f       	add	r27, r27
    1036:	40 f4       	brcc	.+16     	; 0x1048 <__fp_round+0x20>
    1038:	bf 2b       	or	r27, r31
    103a:	11 f4       	brne	.+4      	; 0x1040 <__fp_round+0x18>
    103c:	60 ff       	sbrs	r22, 0
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <__fp_round+0x20>
    1040:	6f 5f       	subi	r22, 0xFF	; 255
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	8f 4f       	sbci	r24, 0xFF	; 255
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	08 95       	ret

0000104a <__fp_split3>:
    104a:	57 fd       	sbrc	r21, 7
    104c:	90 58       	subi	r25, 0x80	; 128
    104e:	44 0f       	add	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	59 f0       	breq	.+22     	; 0x106a <__fp_splitA+0x10>
    1054:	5f 3f       	cpi	r21, 0xFF	; 255
    1056:	71 f0       	breq	.+28     	; 0x1074 <__fp_splitA+0x1a>
    1058:	47 95       	ror	r20

0000105a <__fp_splitA>:
    105a:	88 0f       	add	r24, r24
    105c:	97 fb       	bst	r25, 7
    105e:	99 1f       	adc	r25, r25
    1060:	61 f0       	breq	.+24     	; 0x107a <__fp_splitA+0x20>
    1062:	9f 3f       	cpi	r25, 0xFF	; 255
    1064:	79 f0       	breq	.+30     	; 0x1084 <__fp_splitA+0x2a>
    1066:	87 95       	ror	r24
    1068:	08 95       	ret
    106a:	12 16       	cp	r1, r18
    106c:	13 06       	cpc	r1, r19
    106e:	14 06       	cpc	r1, r20
    1070:	55 1f       	adc	r21, r21
    1072:	f2 cf       	rjmp	.-28     	; 0x1058 <__fp_split3+0xe>
    1074:	46 95       	lsr	r20
    1076:	f1 df       	rcall	.-30     	; 0x105a <__fp_splitA>
    1078:	08 c0       	rjmp	.+16     	; 0x108a <__fp_splitA+0x30>
    107a:	16 16       	cp	r1, r22
    107c:	17 06       	cpc	r1, r23
    107e:	18 06       	cpc	r1, r24
    1080:	99 1f       	adc	r25, r25
    1082:	f1 cf       	rjmp	.-30     	; 0x1066 <__fp_splitA+0xc>
    1084:	86 95       	lsr	r24
    1086:	71 05       	cpc	r23, r1
    1088:	61 05       	cpc	r22, r1
    108a:	08 94       	sec
    108c:	08 95       	ret

0000108e <__fp_zero>:
    108e:	e8 94       	clt

00001090 <__fp_szero>:
    1090:	bb 27       	eor	r27, r27
    1092:	66 27       	eor	r22, r22
    1094:	77 27       	eor	r23, r23
    1096:	cb 01       	movw	r24, r22
    1098:	97 f9       	bld	r25, 7
    109a:	08 95       	ret

0000109c <__mulsf3>:
    109c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3x>
    10a0:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_round>
    10a4:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_pscA>
    10a8:	38 f0       	brcs	.+14     	; 0x10b8 <__mulsf3+0x1c>
    10aa:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_pscB>
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <__mulsf3+0x1c>
    10b0:	95 23       	and	r25, r21
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <__mulsf3+0x1c>
    10b4:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
    10b8:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
    10bc:	11 24       	eor	r1, r1
    10be:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_szero>

000010c2 <__mulsf3x>:
    10c2:	0e 94 25 08 	call	0x104a	; 0x104a <__fp_split3>
    10c6:	70 f3       	brcs	.-36     	; 0x10a4 <__mulsf3+0x8>

000010c8 <__mulsf3_pse>:
    10c8:	95 9f       	mul	r25, r21
    10ca:	c1 f3       	breq	.-16     	; 0x10bc <__mulsf3+0x20>
    10cc:	95 0f       	add	r25, r21
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	55 1f       	adc	r21, r21
    10d2:	62 9f       	mul	r22, r18
    10d4:	f0 01       	movw	r30, r0
    10d6:	72 9f       	mul	r23, r18
    10d8:	bb 27       	eor	r27, r27
    10da:	f0 0d       	add	r31, r0
    10dc:	b1 1d       	adc	r27, r1
    10de:	63 9f       	mul	r22, r19
    10e0:	aa 27       	eor	r26, r26
    10e2:	f0 0d       	add	r31, r0
    10e4:	b1 1d       	adc	r27, r1
    10e6:	aa 1f       	adc	r26, r26
    10e8:	64 9f       	mul	r22, r20
    10ea:	66 27       	eor	r22, r22
    10ec:	b0 0d       	add	r27, r0
    10ee:	a1 1d       	adc	r26, r1
    10f0:	66 1f       	adc	r22, r22
    10f2:	82 9f       	mul	r24, r18
    10f4:	22 27       	eor	r18, r18
    10f6:	b0 0d       	add	r27, r0
    10f8:	a1 1d       	adc	r26, r1
    10fa:	62 1f       	adc	r22, r18
    10fc:	73 9f       	mul	r23, r19
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	62 1f       	adc	r22, r18
    1104:	83 9f       	mul	r24, r19
    1106:	a0 0d       	add	r26, r0
    1108:	61 1d       	adc	r22, r1
    110a:	22 1f       	adc	r18, r18
    110c:	74 9f       	mul	r23, r20
    110e:	33 27       	eor	r19, r19
    1110:	a0 0d       	add	r26, r0
    1112:	61 1d       	adc	r22, r1
    1114:	23 1f       	adc	r18, r19
    1116:	84 9f       	mul	r24, r20
    1118:	60 0d       	add	r22, r0
    111a:	21 1d       	adc	r18, r1
    111c:	82 2f       	mov	r24, r18
    111e:	76 2f       	mov	r23, r22
    1120:	6a 2f       	mov	r22, r26
    1122:	11 24       	eor	r1, r1
    1124:	9f 57       	subi	r25, 0x7F	; 127
    1126:	50 40       	sbci	r21, 0x00	; 0
    1128:	9a f0       	brmi	.+38     	; 0x1150 <__mulsf3_pse+0x88>
    112a:	f1 f0       	breq	.+60     	; 0x1168 <__mulsf3_pse+0xa0>
    112c:	88 23       	and	r24, r24
    112e:	4a f0       	brmi	.+18     	; 0x1142 <__mulsf3_pse+0x7a>
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	bb 1f       	adc	r27, r27
    1136:	66 1f       	adc	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	91 50       	subi	r25, 0x01	; 1
    113e:	50 40       	sbci	r21, 0x00	; 0
    1140:	a9 f7       	brne	.-22     	; 0x112c <__mulsf3_pse+0x64>
    1142:	9e 3f       	cpi	r25, 0xFE	; 254
    1144:	51 05       	cpc	r21, r1
    1146:	80 f0       	brcs	.+32     	; 0x1168 <__mulsf3_pse+0xa0>
    1148:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
    114c:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_szero>
    1150:	5f 3f       	cpi	r21, 0xFF	; 255
    1152:	e4 f3       	brlt	.-8      	; 0x114c <__mulsf3_pse+0x84>
    1154:	98 3e       	cpi	r25, 0xE8	; 232
    1156:	d4 f3       	brlt	.-12     	; 0x114c <__mulsf3_pse+0x84>
    1158:	86 95       	lsr	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f7 95       	ror	r31
    1162:	e7 95       	ror	r30
    1164:	9f 5f       	subi	r25, 0xFF	; 255
    1166:	c1 f7       	brne	.-16     	; 0x1158 <__mulsf3_pse+0x90>
    1168:	fe 2b       	or	r31, r30
    116a:	88 0f       	add	r24, r24
    116c:	91 1d       	adc	r25, r1
    116e:	96 95       	lsr	r25
    1170:	87 95       	ror	r24
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret
    1176:	19 f4       	brne	.+6      	; 0x117e <__mulsf3_pse+0xb6>
    1178:	16 f4       	brtc	.+4      	; 0x117e <__mulsf3_pse+0xb6>
    117a:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
    117e:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_mpack>

00001182 <sqrt>:
    1182:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_splitA>
    1186:	b8 f3       	brcs	.-18     	; 0x1176 <__mulsf3_pse+0xae>
    1188:	99 23       	and	r25, r25
    118a:	c9 f3       	breq	.-14     	; 0x117e <__mulsf3_pse+0xb6>
    118c:	b6 f3       	brts	.-20     	; 0x117a <__mulsf3_pse+0xb2>
    118e:	9f 57       	subi	r25, 0x7F	; 127
    1190:	55 0b       	sbc	r21, r21
    1192:	87 ff       	sbrs	r24, 7
    1194:	0e 94 0f 09 	call	0x121e	; 0x121e <__fp_norm2>
    1198:	00 24       	eor	r0, r0
    119a:	a0 e6       	ldi	r26, 0x60	; 96
    119c:	40 ea       	ldi	r20, 0xA0	; 160
    119e:	90 01       	movw	r18, r0
    11a0:	80 58       	subi	r24, 0x80	; 128
    11a2:	56 95       	lsr	r21
    11a4:	97 95       	ror	r25
    11a6:	28 f4       	brcc	.+10     	; 0x11b2 <sqrt+0x30>
    11a8:	80 5c       	subi	r24, 0xC0	; 192
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	20 f0       	brcs	.+8      	; 0x11ba <sqrt+0x38>
    11b2:	26 17       	cp	r18, r22
    11b4:	37 07       	cpc	r19, r23
    11b6:	48 07       	cpc	r20, r24
    11b8:	30 f4       	brcc	.+12     	; 0x11c6 <sqrt+0x44>
    11ba:	62 1b       	sub	r22, r18
    11bc:	73 0b       	sbc	r23, r19
    11be:	84 0b       	sbc	r24, r20
    11c0:	20 29       	or	r18, r0
    11c2:	31 29       	or	r19, r1
    11c4:	4a 2b       	or	r20, r26
    11c6:	a6 95       	lsr	r26
    11c8:	17 94       	ror	r1
    11ca:	07 94       	ror	r0
    11cc:	20 25       	eor	r18, r0
    11ce:	31 25       	eor	r19, r1
    11d0:	4a 27       	eor	r20, r26
    11d2:	58 f7       	brcc	.-42     	; 0x11aa <sqrt+0x28>
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	20 f0       	brcs	.+8      	; 0x11e4 <sqrt+0x62>
    11dc:	26 17       	cp	r18, r22
    11de:	37 07       	cpc	r19, r23
    11e0:	48 07       	cpc	r20, r24
    11e2:	30 f4       	brcc	.+12     	; 0x11f0 <sqrt+0x6e>
    11e4:	62 0b       	sbc	r22, r18
    11e6:	73 0b       	sbc	r23, r19
    11e8:	84 0b       	sbc	r24, r20
    11ea:	20 0d       	add	r18, r0
    11ec:	31 1d       	adc	r19, r1
    11ee:	41 1d       	adc	r20, r1
    11f0:	a0 95       	com	r26
    11f2:	81 f7       	brne	.-32     	; 0x11d4 <sqrt+0x52>
    11f4:	b9 01       	movw	r22, r18
    11f6:	84 2f       	mov	r24, r20
    11f8:	91 58       	subi	r25, 0x81	; 129
    11fa:	88 0f       	add	r24, r24
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	08 95       	ret

00001202 <__fp_mpack>:
    1202:	9f 3f       	cpi	r25, 0xFF	; 255
    1204:	31 f0       	breq	.+12     	; 0x1212 <__fp_mpack_finite+0xc>

00001206 <__fp_mpack_finite>:
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	20 f4       	brcc	.+8      	; 0x1212 <__fp_mpack_finite+0xc>
    120a:	87 95       	ror	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b7 95       	ror	r27
    1212:	88 0f       	add	r24, r24
    1214:	91 1d       	adc	r25, r1
    1216:	96 95       	lsr	r25
    1218:	87 95       	ror	r24
    121a:	97 f9       	bld	r25, 7
    121c:	08 95       	ret

0000121e <__fp_norm2>:
    121e:	91 50       	subi	r25, 0x01	; 1
    1220:	50 40       	sbci	r21, 0x00	; 0
    1222:	66 0f       	add	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	d2 f7       	brpl	.-12     	; 0x121e <__fp_norm2>
    122a:	08 95       	ret

0000122c <__divmodhi4>:
    122c:	97 fb       	bst	r25, 7
    122e:	07 2e       	mov	r0, r23
    1230:	16 f4       	brtc	.+4      	; 0x1236 <__divmodhi4+0xa>
    1232:	00 94       	com	r0
    1234:	07 d0       	rcall	.+14     	; 0x1244 <__divmodhi4_neg1>
    1236:	77 fd       	sbrc	r23, 7
    1238:	09 d0       	rcall	.+18     	; 0x124c <__divmodhi4_neg2>
    123a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__udivmodhi4>
    123e:	07 fc       	sbrc	r0, 7
    1240:	05 d0       	rcall	.+10     	; 0x124c <__divmodhi4_neg2>
    1242:	3e f4       	brtc	.+14     	; 0x1252 <__divmodhi4_exit>

00001244 <__divmodhi4_neg1>:
    1244:	90 95       	com	r25
    1246:	81 95       	neg	r24
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	08 95       	ret

0000124c <__divmodhi4_neg2>:
    124c:	70 95       	com	r23
    124e:	61 95       	neg	r22
    1250:	7f 4f       	sbci	r23, 0xFF	; 255

00001252 <__divmodhi4_exit>:
    1252:	08 95       	ret

00001254 <__udivmodsi4>:
    1254:	a1 e2       	ldi	r26, 0x21	; 33
    1256:	1a 2e       	mov	r1, r26
    1258:	aa 1b       	sub	r26, r26
    125a:	bb 1b       	sub	r27, r27
    125c:	fd 01       	movw	r30, r26
    125e:	0d c0       	rjmp	.+26     	; 0x127a <__udivmodsi4_ep>

00001260 <__udivmodsi4_loop>:
    1260:	aa 1f       	adc	r26, r26
    1262:	bb 1f       	adc	r27, r27
    1264:	ee 1f       	adc	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	a2 17       	cp	r26, r18
    126a:	b3 07       	cpc	r27, r19
    126c:	e4 07       	cpc	r30, r20
    126e:	f5 07       	cpc	r31, r21
    1270:	20 f0       	brcs	.+8      	; 0x127a <__udivmodsi4_ep>
    1272:	a2 1b       	sub	r26, r18
    1274:	b3 0b       	sbc	r27, r19
    1276:	e4 0b       	sbc	r30, r20
    1278:	f5 0b       	sbc	r31, r21

0000127a <__udivmodsi4_ep>:
    127a:	66 1f       	adc	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	1a 94       	dec	r1
    1284:	69 f7       	brne	.-38     	; 0x1260 <__udivmodsi4_loop>
    1286:	60 95       	com	r22
    1288:	70 95       	com	r23
    128a:	80 95       	com	r24
    128c:	90 95       	com	r25
    128e:	9b 01       	movw	r18, r22
    1290:	ac 01       	movw	r20, r24
    1292:	bd 01       	movw	r22, r26
    1294:	cf 01       	movw	r24, r30
    1296:	08 95       	ret

00001298 <__muldi3>:
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	1f 93       	push	r17
    129e:	0f 93       	push	r16
    12a0:	9a 9d       	mul	r25, r10
    12a2:	f0 2d       	mov	r31, r0
    12a4:	21 9f       	mul	r18, r17
    12a6:	f0 0d       	add	r31, r0
    12a8:	8b 9d       	mul	r24, r11
    12aa:	f0 0d       	add	r31, r0
    12ac:	8a 9d       	mul	r24, r10
    12ae:	e0 2d       	mov	r30, r0
    12b0:	f1 0d       	add	r31, r1
    12b2:	03 9f       	mul	r16, r19
    12b4:	f0 0d       	add	r31, r0
    12b6:	02 9f       	mul	r16, r18
    12b8:	e0 0d       	add	r30, r0
    12ba:	f1 1d       	adc	r31, r1
    12bc:	4e 9d       	mul	r20, r14
    12be:	e0 0d       	add	r30, r0
    12c0:	f1 1d       	adc	r31, r1
    12c2:	5e 9d       	mul	r21, r14
    12c4:	f0 0d       	add	r31, r0
    12c6:	4f 9d       	mul	r20, r15
    12c8:	f0 0d       	add	r31, r0
    12ca:	7f 93       	push	r23
    12cc:	6f 93       	push	r22
    12ce:	bf 92       	push	r11
    12d0:	af 92       	push	r10
    12d2:	5f 93       	push	r21
    12d4:	4f 93       	push	r20
    12d6:	d5 01       	movw	r26, r10
    12d8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__umulhisi3>
    12dc:	8b 01       	movw	r16, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	d7 01       	movw	r26, r14
    12e2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__umulhisi3>
    12e6:	eb 01       	movw	r28, r22
    12e8:	e8 0f       	add	r30, r24
    12ea:	f9 1f       	adc	r31, r25
    12ec:	d6 01       	movw	r26, r12
    12ee:	0e 94 9c 09 	call	0x1338	; 0x1338 <__muldi3_6>
    12f2:	2f 91       	pop	r18
    12f4:	3f 91       	pop	r19
    12f6:	d6 01       	movw	r26, r12
    12f8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__umulhisi3>
    12fc:	c6 0f       	add	r28, r22
    12fe:	d7 1f       	adc	r29, r23
    1300:	e8 1f       	adc	r30, r24
    1302:	f9 1f       	adc	r31, r25
    1304:	af 91       	pop	r26
    1306:	bf 91       	pop	r27
    1308:	0e 94 9c 09 	call	0x1338	; 0x1338 <__muldi3_6>
    130c:	2f 91       	pop	r18
    130e:	3f 91       	pop	r19
    1310:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__umulhisi3>
    1314:	c6 0f       	add	r28, r22
    1316:	d7 1f       	adc	r29, r23
    1318:	e8 1f       	adc	r30, r24
    131a:	f9 1f       	adc	r31, r25
    131c:	d6 01       	movw	r26, r12
    131e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__umulhisi3>
    1322:	e6 0f       	add	r30, r22
    1324:	f7 1f       	adc	r31, r23
    1326:	98 01       	movw	r18, r16
    1328:	be 01       	movw	r22, r28
    132a:	cf 01       	movw	r24, r30
    132c:	11 24       	eor	r1, r1
    132e:	0f 91       	pop	r16
    1330:	1f 91       	pop	r17
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <__muldi3_6>:
    1338:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__umulhisi3>
    133c:	46 0f       	add	r20, r22
    133e:	57 1f       	adc	r21, r23
    1340:	c8 1f       	adc	r28, r24
    1342:	d9 1f       	adc	r29, r25
    1344:	08 f4       	brcc	.+2      	; 0x1348 <__muldi3_6+0x10>
    1346:	31 96       	adiw	r30, 0x01	; 1
    1348:	08 95       	ret

0000134a <__moddi3>:
    134a:	68 94       	set
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <__divdi3_moddi3>

0000134e <__divdi3>:
    134e:	e8 94       	clt

00001350 <__divdi3_moddi3>:
    1350:	f9 2f       	mov	r31, r25
    1352:	f1 2b       	or	r31, r17
    1354:	12 f0       	brmi	.+4      	; 0x135a <__divdi3_moddi3+0xa>
    1356:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__udivdi3_umoddi3>
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e3 eb       	ldi	r30, 0xB3	; 179
    1360:	f9 e0       	ldi	r31, 0x09	; 9
    1362:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0xc>
    1366:	09 2e       	mov	r0, r25
    1368:	05 94       	asr	r0
    136a:	22 f4       	brpl	.+8      	; 0x1374 <__divdi3_moddi3+0x24>
    136c:	0e 94 35 0a 	call	0x146a	; 0x146a <__negdi2>
    1370:	11 23       	and	r17, r17
    1372:	92 f4       	brpl	.+36     	; 0x1398 <__divdi3_moddi3+0x48>
    1374:	f0 e8       	ldi	r31, 0x80	; 128
    1376:	0f 26       	eor	r0, r31
    1378:	ff ef       	ldi	r31, 0xFF	; 255
    137a:	e0 94       	com	r14
    137c:	f0 94       	com	r15
    137e:	00 95       	com	r16
    1380:	10 95       	com	r17
    1382:	b0 94       	com	r11
    1384:	c0 94       	com	r12
    1386:	d0 94       	com	r13
    1388:	a1 94       	neg	r10
    138a:	bf 0a       	sbc	r11, r31
    138c:	cf 0a       	sbc	r12, r31
    138e:	df 0a       	sbc	r13, r31
    1390:	ef 0a       	sbc	r14, r31
    1392:	ff 0a       	sbc	r15, r31
    1394:	0f 0b       	sbc	r16, r31
    1396:	1f 0b       	sbc	r17, r31
    1398:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__udivmod64>
    139c:	07 fc       	sbrc	r0, 7
    139e:	0e 94 35 0a 	call	0x146a	; 0x146a <__negdi2>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	ec e0       	ldi	r30, 0x0C	; 12
    13a8:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0xc>

000013ac <__umoddi3>:
    13ac:	68 94       	set
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <__udivdi3_umoddi3>

000013b0 <__udivdi3>:
    13b0:	e8 94       	clt

000013b2 <__udivdi3_umoddi3>:
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__udivmod64>
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	08 95       	ret

000013c8 <__udivmod64>:
    13c8:	88 24       	eor	r8, r8
    13ca:	99 24       	eor	r9, r9
    13cc:	f4 01       	movw	r30, r8
    13ce:	e4 01       	movw	r28, r8
    13d0:	b0 e4       	ldi	r27, 0x40	; 64
    13d2:	9f 93       	push	r25
    13d4:	aa 27       	eor	r26, r26
    13d6:	9a 15       	cp	r25, r10
    13d8:	8b 04       	cpc	r8, r11
    13da:	9c 04       	cpc	r9, r12
    13dc:	ed 05       	cpc	r30, r13
    13de:	fe 05       	cpc	r31, r14
    13e0:	cf 05       	cpc	r28, r15
    13e2:	d0 07       	cpc	r29, r16
    13e4:	a1 07       	cpc	r26, r17
    13e6:	98 f4       	brcc	.+38     	; 0x140e <__udivmod64+0x46>
    13e8:	ad 2f       	mov	r26, r29
    13ea:	dc 2f       	mov	r29, r28
    13ec:	cf 2f       	mov	r28, r31
    13ee:	fe 2f       	mov	r31, r30
    13f0:	e9 2d       	mov	r30, r9
    13f2:	98 2c       	mov	r9, r8
    13f4:	89 2e       	mov	r8, r25
    13f6:	98 2f       	mov	r25, r24
    13f8:	87 2f       	mov	r24, r23
    13fa:	76 2f       	mov	r23, r22
    13fc:	65 2f       	mov	r22, r21
    13fe:	54 2f       	mov	r21, r20
    1400:	43 2f       	mov	r20, r19
    1402:	32 2f       	mov	r19, r18
    1404:	22 27       	eor	r18, r18
    1406:	b8 50       	subi	r27, 0x08	; 8
    1408:	31 f7       	brne	.-52     	; 0x13d6 <__udivmod64+0xe>
    140a:	bf 91       	pop	r27
    140c:	27 c0       	rjmp	.+78     	; 0x145c <__udivmod64+0x94>
    140e:	1b 2e       	mov	r1, r27
    1410:	bf 91       	pop	r27
    1412:	bb 27       	eor	r27, r27
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	44 1f       	adc	r20, r20
    141a:	55 1f       	adc	r21, r21
    141c:	66 1f       	adc	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	88 1c       	adc	r8, r8
    1426:	99 1c       	adc	r9, r9
    1428:	ee 1f       	adc	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	cc 1f       	adc	r28, r28
    142e:	dd 1f       	adc	r29, r29
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	8a 14       	cp	r8, r10
    1436:	9b 04       	cpc	r9, r11
    1438:	ec 05       	cpc	r30, r12
    143a:	fd 05       	cpc	r31, r13
    143c:	ce 05       	cpc	r28, r14
    143e:	df 05       	cpc	r29, r15
    1440:	a0 07       	cpc	r26, r16
    1442:	b1 07       	cpc	r27, r17
    1444:	48 f0       	brcs	.+18     	; 0x1458 <__udivmod64+0x90>
    1446:	8a 18       	sub	r8, r10
    1448:	9b 08       	sbc	r9, r11
    144a:	ec 09       	sbc	r30, r12
    144c:	fd 09       	sbc	r31, r13
    144e:	ce 09       	sbc	r28, r14
    1450:	df 09       	sbc	r29, r15
    1452:	a0 0b       	sbc	r26, r16
    1454:	b1 0b       	sbc	r27, r17
    1456:	21 60       	ori	r18, 0x01	; 1
    1458:	1a 94       	dec	r1
    145a:	e1 f6       	brne	.-72     	; 0x1414 <__udivmod64+0x4c>
    145c:	2e f4       	brtc	.+10     	; 0x1468 <__udivmod64+0xa0>
    145e:	94 01       	movw	r18, r8
    1460:	af 01       	movw	r20, r30
    1462:	be 01       	movw	r22, r28
    1464:	cd 01       	movw	r24, r26
    1466:	00 0c       	add	r0, r0
    1468:	08 95       	ret

0000146a <__negdi2>:
    146a:	60 95       	com	r22
    146c:	70 95       	com	r23
    146e:	80 95       	com	r24
    1470:	90 95       	com	r25
    1472:	30 95       	com	r19
    1474:	40 95       	com	r20
    1476:	50 95       	com	r21
    1478:	21 95       	neg	r18
    147a:	3f 4f       	sbci	r19, 0xFF	; 255
    147c:	4f 4f       	sbci	r20, 0xFF	; 255
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	6f 4f       	sbci	r22, 0xFF	; 255
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	8f 4f       	sbci	r24, 0xFF	; 255
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	08 95       	ret

0000148a <__prologue_saves__>:
    148a:	2f 92       	push	r2
    148c:	3f 92       	push	r3
    148e:	4f 92       	push	r4
    1490:	5f 92       	push	r5
    1492:	6f 92       	push	r6
    1494:	7f 92       	push	r7
    1496:	8f 92       	push	r8
    1498:	9f 92       	push	r9
    149a:	af 92       	push	r10
    149c:	bf 92       	push	r11
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	ca 1b       	sub	r28, r26
    14b4:	db 0b       	sbc	r29, r27
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	09 94       	ijmp

000014c2 <__epilogue_restores__>:
    14c2:	2a 88       	ldd	r2, Y+18	; 0x12
    14c4:	39 88       	ldd	r3, Y+17	; 0x11
    14c6:	48 88       	ldd	r4, Y+16	; 0x10
    14c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    14ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    14cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    14ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    14d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    14d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    14d4:	b9 84       	ldd	r11, Y+9	; 0x09
    14d6:	c8 84       	ldd	r12, Y+8	; 0x08
    14d8:	df 80       	ldd	r13, Y+7	; 0x07
    14da:	ee 80       	ldd	r14, Y+6	; 0x06
    14dc:	fd 80       	ldd	r15, Y+5	; 0x05
    14de:	0c 81       	ldd	r16, Y+4	; 0x04
    14e0:	1b 81       	ldd	r17, Y+3	; 0x03
    14e2:	aa 81       	ldd	r26, Y+2	; 0x02
    14e4:	b9 81       	ldd	r27, Y+1	; 0x01
    14e6:	ce 0f       	add	r28, r30
    14e8:	d1 1d       	adc	r29, r1
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	ed 01       	movw	r28, r26
    14f6:	08 95       	ret

000014f8 <__ashldi3>:
    14f8:	0f 93       	push	r16
    14fa:	08 30       	cpi	r16, 0x08	; 8
    14fc:	90 f0       	brcs	.+36     	; 0x1522 <__ashldi3+0x2a>
    14fe:	98 2f       	mov	r25, r24
    1500:	87 2f       	mov	r24, r23
    1502:	76 2f       	mov	r23, r22
    1504:	65 2f       	mov	r22, r21
    1506:	54 2f       	mov	r21, r20
    1508:	43 2f       	mov	r20, r19
    150a:	32 2f       	mov	r19, r18
    150c:	22 27       	eor	r18, r18
    150e:	08 50       	subi	r16, 0x08	; 8
    1510:	f4 cf       	rjmp	.-24     	; 0x14fa <__ashldi3+0x2>
    1512:	22 0f       	add	r18, r18
    1514:	33 1f       	adc	r19, r19
    1516:	44 1f       	adc	r20, r20
    1518:	55 1f       	adc	r21, r21
    151a:	66 1f       	adc	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 95       	dec	r16
    1524:	b2 f7       	brpl	.-20     	; 0x1512 <__ashldi3+0x1a>
    1526:	0f 91       	pop	r16
    1528:	08 95       	ret

0000152a <__adddi3>:
    152a:	2a 0d       	add	r18, r10
    152c:	3b 1d       	adc	r19, r11
    152e:	4c 1d       	adc	r20, r12
    1530:	5d 1d       	adc	r21, r13
    1532:	6e 1d       	adc	r22, r14
    1534:	7f 1d       	adc	r23, r15
    1536:	80 1f       	adc	r24, r16
    1538:	91 1f       	adc	r25, r17
    153a:	08 95       	ret

0000153c <__adddi3_s8>:
    153c:	00 24       	eor	r0, r0
    153e:	a7 fd       	sbrc	r26, 7
    1540:	00 94       	com	r0
    1542:	2a 0f       	add	r18, r26
    1544:	30 1d       	adc	r19, r0
    1546:	40 1d       	adc	r20, r0
    1548:	50 1d       	adc	r21, r0
    154a:	60 1d       	adc	r22, r0
    154c:	70 1d       	adc	r23, r0
    154e:	80 1d       	adc	r24, r0
    1550:	90 1d       	adc	r25, r0
    1552:	08 95       	ret

00001554 <__subdi3>:
    1554:	2a 19       	sub	r18, r10
    1556:	3b 09       	sbc	r19, r11
    1558:	4c 09       	sbc	r20, r12
    155a:	5d 09       	sbc	r21, r13
    155c:	6e 09       	sbc	r22, r14
    155e:	7f 09       	sbc	r23, r15
    1560:	80 0b       	sbc	r24, r16
    1562:	91 0b       	sbc	r25, r17
    1564:	08 95       	ret

00001566 <__cmpdi2>:
    1566:	2a 15       	cp	r18, r10
    1568:	3b 05       	cpc	r19, r11
    156a:	4c 05       	cpc	r20, r12
    156c:	5d 05       	cpc	r21, r13
    156e:	6e 05       	cpc	r22, r14
    1570:	7f 05       	cpc	r23, r15
    1572:	80 07       	cpc	r24, r16
    1574:	91 07       	cpc	r25, r17
    1576:	08 95       	ret

00001578 <__cmpdi2_s8>:
    1578:	00 24       	eor	r0, r0
    157a:	a7 fd       	sbrc	r26, 7
    157c:	00 94       	com	r0
    157e:	2a 17       	cp	r18, r26
    1580:	30 05       	cpc	r19, r0
    1582:	40 05       	cpc	r20, r0
    1584:	50 05       	cpc	r21, r0
    1586:	60 05       	cpc	r22, r0
    1588:	70 05       	cpc	r23, r0
    158a:	80 05       	cpc	r24, r0
    158c:	90 05       	cpc	r25, r0
    158e:	08 95       	ret

00001590 <__udivmodhi4>:
    1590:	aa 1b       	sub	r26, r26
    1592:	bb 1b       	sub	r27, r27
    1594:	51 e1       	ldi	r21, 0x11	; 17
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <__udivmodhi4_ep>

00001598 <__udivmodhi4_loop>:
    1598:	aa 1f       	adc	r26, r26
    159a:	bb 1f       	adc	r27, r27
    159c:	a6 17       	cp	r26, r22
    159e:	b7 07       	cpc	r27, r23
    15a0:	10 f0       	brcs	.+4      	; 0x15a6 <__udivmodhi4_ep>
    15a2:	a6 1b       	sub	r26, r22
    15a4:	b7 0b       	sbc	r27, r23

000015a6 <__udivmodhi4_ep>:
    15a6:	88 1f       	adc	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	5a 95       	dec	r21
    15ac:	a9 f7       	brne	.-22     	; 0x1598 <__udivmodhi4_loop>
    15ae:	80 95       	com	r24
    15b0:	90 95       	com	r25
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	08 95       	ret

000015b8 <__umulhisi3>:
    15b8:	a2 9f       	mul	r26, r18
    15ba:	b0 01       	movw	r22, r0
    15bc:	b3 9f       	mul	r27, r19
    15be:	c0 01       	movw	r24, r0
    15c0:	a3 9f       	mul	r26, r19
    15c2:	70 0d       	add	r23, r0
    15c4:	81 1d       	adc	r24, r1
    15c6:	11 24       	eor	r1, r1
    15c8:	91 1d       	adc	r25, r1
    15ca:	b2 9f       	mul	r27, r18
    15cc:	70 0d       	add	r23, r0
    15ce:	81 1d       	adc	r24, r1
    15d0:	11 24       	eor	r1, r1
    15d2:	91 1d       	adc	r25, r1
    15d4:	08 95       	ret

000015d6 <_exit>:
    15d6:	f8 94       	cli

000015d8 <__stop_program>:
    15d8:	ff cf       	rjmp	.-2      	; 0x15d8 <__stop_program>
