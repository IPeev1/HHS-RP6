
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000005f4  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800204  00800204  0000068c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014aa  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f51  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000999  00000000  00000000  00002bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000864  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f1  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004999  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ad c0       	rjmp	.+346    	; 0x1e8 <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ef       	ldi	r30, 0xF4	; 244
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a4 d1       	rcall	.+840    	; 0x468 <main>
 120:	67 c2       	rjmp	.+1230   	; 0x5f0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_master>:


void I2C_receiveInterpreter(uint8_t I2Cdata[]){
	int dataSet = I2Cdata[0];
	switch(dataSet){
		case(1): arduinoDataInterpreter(I2Cdata); break;
 124:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 128:	88 e4       	ldi	r24, 0x48	; 72
 12a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 134:	08 95       	ret

00000136 <verzenden>:
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	90 62       	ori	r25, 0x20	; 32
 13e:	90 83       	st	Z, r25
 140:	90 81       	ld	r25, Z
 142:	99 23       	and	r25, r25
 144:	ec f7       	brge	.-6      	; 0x140 <verzenden+0xa>
 146:	88 0f       	add	r24, r24
 148:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 23       	and	r24, r24
 15a:	ec f7       	brge	.-6      	; 0x156 <verzenden+0x20>
 15c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 160:	84 e8       	ldi	r24, 0x84	; 132
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 166:	ec eb       	ldi	r30, 0xBC	; 188
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	ec f7       	brge	.-6      	; 0x16a <verzenden+0x34>
 170:	84 e9       	ldi	r24, 0x94	; 148
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 176:	08 95       	ret

00000178 <init_USART>:
 178:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 69       	ori	r24, 0x90	; 144
 184:	80 83       	st	Z, r24
 186:	80 81       	ld	r24, Z
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	80 83       	st	Z, r24
 18c:	e2 ec       	ldi	r30, 0xC2	; 194
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	86 60       	ori	r24, 0x06	; 6
 194:	80 83       	st	Z, r24
 196:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 19a:	87 e6       	ldi	r24, 0x67	; 103
 19c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 1a0:	08 95       	ret

000001a2 <init_I2C>:
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	83 60       	ori	r24, 0x03	; 3
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	08 95       	ret

000001aa <init_micros>:
 1aa:	e1 e9       	ldi	r30, 0x91	; 145
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	80 83       	st	Z, r24
 1b4:	e1 e7       	ldi	r30, 0x71	; 113
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	80 83       	st	Z, r24
 1be:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 1c2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 1c6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <t3TotalOverflow>
 1ca:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <t3TotalOverflow+0x1>
 1ce:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <t3TotalOverflow+0x2>
 1d2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <t3TotalOverflow+0x3>
 1d6:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <t3TotalOverflow+0x4>
 1da:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <t3TotalOverflow+0x5>
 1de:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <t3TotalOverflow+0x6>
 1e2:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <t3TotalOverflow+0x7>
 1e6:	08 95       	ret

000001e8 <__vector_35>:
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <t3TotalOverflow>
 208:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <t3TotalOverflow+0x1>
 20c:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <t3TotalOverflow+0x2>
 210:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <t3TotalOverflow+0x3>
 214:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <t3TotalOverflow+0x4>
 218:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <t3TotalOverflow+0x5>
 21c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <t3TotalOverflow+0x6>
 220:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <t3TotalOverflow+0x7>
 224:	a1 e0       	ldi	r26, 0x01	; 1
 226:	cf d1       	rcall	.+926    	; 0x5c6 <__adddi3_s8>
 228:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <t3TotalOverflow>
 22c:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <t3TotalOverflow+0x1>
 230:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <t3TotalOverflow+0x2>
 234:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <t3TotalOverflow+0x3>
 238:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <t3TotalOverflow+0x4>
 23c:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <t3TotalOverflow+0x5>
 240:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <t3TotalOverflow+0x6>
 244:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <t3TotalOverflow+0x7>
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <micros>:
 264:	4f 92       	push	r4
 266:	5f 92       	push	r5
 268:	6f 92       	push	r6
 26a:	7f 92       	push	r7
 26c:	8f 92       	push	r8
 26e:	9f 92       	push	r9
 270:	af 92       	push	r10
 272:	bf 92       	push	r11
 274:	cf 92       	push	r12
 276:	df 92       	push	r13
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 284:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 288:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <t3TotalOverflow>
 28c:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <t3TotalOverflow+0x1>
 290:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <t3TotalOverflow+0x2>
 294:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <t3TotalOverflow+0x3>
 298:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <t3TotalOverflow+0x4>
 29c:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <t3TotalOverflow+0x5>
 2a0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <t3TotalOverflow+0x6>
 2a4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <t3TotalOverflow+0x7>
 2a8:	98 2c       	mov	r9, r8
 2aa:	88 24       	eor	r8, r8
 2ac:	99 0c       	add	r9, r9
 2ae:	99 0c       	add	r9, r9
 2b0:	99 0c       	add	r9, r9
 2b2:	99 0c       	add	r9, r9
 2b4:	09 2c       	mov	r0, r9
 2b6:	00 0c       	add	r0, r0
 2b8:	aa 08       	sbc	r10, r10
 2ba:	bb 08       	sbc	r11, r11
 2bc:	bb 20       	and	r11, r11
 2be:	2c f4       	brge	.+10     	; 0x2ca <micros+0x66>
 2c0:	ef ef       	ldi	r30, 0xFF	; 255
 2c2:	8e 0e       	add	r8, r30
 2c4:	9e 1e       	adc	r9, r30
 2c6:	a1 1c       	adc	r10, r1
 2c8:	b1 1c       	adc	r11, r1
 2ca:	25 01       	movw	r4, r10
 2cc:	77 24       	eor	r7, r7
 2ce:	57 fc       	sbrc	r5, 7
 2d0:	70 94       	com	r7
 2d2:	67 2c       	mov	r6, r7
 2d4:	bb 0c       	add	r11, r11
 2d6:	88 08       	sbc	r8, r8
 2d8:	98 2c       	mov	r9, r8
 2da:	54 01       	movw	r10, r8
 2dc:	0c e0       	ldi	r16, 0x0C	; 12
 2de:	51 d1       	rcall	.+674    	; 0x582 <__ashldi3>
 2e0:	f2 2f       	mov	r31, r18
 2e2:	e3 2f       	mov	r30, r19
 2e4:	c4 2e       	mov	r12, r20
 2e6:	d5 2e       	mov	r13, r21
 2e8:	e6 2e       	mov	r14, r22
 2ea:	f7 2e       	mov	r15, r23
 2ec:	08 2f       	mov	r16, r24
 2ee:	19 2f       	mov	r17, r25
 2f0:	24 2d       	mov	r18, r4
 2f2:	35 2d       	mov	r19, r5
 2f4:	46 2d       	mov	r20, r6
 2f6:	57 2d       	mov	r21, r7
 2f8:	68 2d       	mov	r22, r8
 2fa:	78 2d       	mov	r23, r8
 2fc:	88 2d       	mov	r24, r8
 2fe:	98 2d       	mov	r25, r8
 300:	af 2e       	mov	r10, r31
 302:	be 2e       	mov	r11, r30
 304:	57 d1       	rcall	.+686    	; 0x5b4 <__adddi3>
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	cf 90       	pop	r12
 312:	bf 90       	pop	r11
 314:	af 90       	pop	r10
 316:	9f 90       	pop	r9
 318:	8f 90       	pop	r8
 31a:	7f 90       	pop	r7
 31c:	6f 90       	pop	r6
 31e:	5f 90       	pop	r5
 320:	4f 90       	pop	r4
 322:	08 95       	ret

00000324 <init_arduinoData>:
 324:	e4 e1       	ldi	r30, 0x14	; 20
 326:	f2 e0       	ldi	r31, 0x02	; 2
 328:	11 82       	std	Z+1, r1	; 0x01
 32a:	10 82       	st	Z, r1
 32c:	13 82       	std	Z+3, r1	; 0x03
 32e:	12 82       	std	Z+2, r1	; 0x02
 330:	08 95       	ret

00000332 <init_rp6Data>:
	arduinoData.motorEncoderRVal = I2Cdata[2] * 30000 / 255;
}

//I2C functions send -----------------------
void init_rp6Data(){
	rp6Data.driveSpeed = 0;
 332:	e8 e1       	ldi	r30, 0x18	; 24
 334:	f2 e0       	ldi	r31, 0x02	; 2
 336:	10 82       	st	Z, r1
	rp6Data.driveDirection = 0;
 338:	11 82       	std	Z+1, r1	; 0x01
	rp6Data.turnDirection = 0;
 33a:	12 82       	std	Z+2, r1	; 0x02
	rp6Data.accelerationRate = 30;
 33c:	8e e1       	ldi	r24, 0x1E	; 30
 33e:	83 83       	std	Z+3, r24	; 0x03
	rp6Data.turnRate = 3000;
 340:	88 eb       	ldi	r24, 0xB8	; 184
 342:	9b e0       	ldi	r25, 0x0B	; 11
 344:	95 83       	std	Z+5, r25	; 0x05
 346:	84 83       	std	Z+4, r24	; 0x04
	rp6Data.driveSpeedThreshold = 5000;
 348:	88 e8       	ldi	r24, 0x88	; 136
 34a:	93 e1       	ldi	r25, 0x13	; 19
 34c:	97 83       	std	Z+7, r25	; 0x07
 34e:	86 83       	std	Z+6, r24	; 0x06
	rp6Data.updateSpeed = 200000;
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	9d e0       	ldi	r25, 0x0D	; 13
 354:	a3 e0       	ldi	r26, 0x03	; 3
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	80 87       	std	Z+8, r24	; 0x08
 35a:	91 87       	std	Z+9, r25	; 0x09
 35c:	a2 87       	std	Z+10, r26	; 0x0a
 35e:	b3 87       	std	Z+11, r27	; 0x0b
	rp6Data.enableBeeper = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	84 87       	std	Z+12, r24	; 0x0c
 364:	08 95       	ret

00000366 <I2C_sendArray>:
	
	I2C_sendArray(I2Cdata);
}


void I2C_sendArray(uint8_t I2Cdata[]){
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
 370:	8c 01       	movw	r16, r24
 372:	0c 5e       	subi	r16, 0xEC	; 236
 374:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i = 0; i <= 19; i++){
		verzenden(8, I2Cdata[i]);
 376:	69 91       	ld	r22, Y+
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	dd de       	rcall	.-582    	; 0x136 <verzenden>
	I2C_sendArray(I2Cdata);
}


void I2C_sendArray(uint8_t I2Cdata[]){
	for(int i = 0; i <= 19; i++){
 37c:	c0 17       	cp	r28, r16
 37e:	d1 07       	cpc	r29, r17
 380:	d1 f7       	brne	.-12     	; 0x376 <I2C_sendArray+0x10>
		verzenden(8, I2Cdata[i]);
	}
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <rp6DataConstructor>:
	rp6Data.updateSpeed = 200000;
	rp6Data.enableBeeper = 1;
}


void rp6DataConstructor(){
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	64 97       	sbiw	r28, 0x14	; 20
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
	uint8_t I2Cdata[20];
	
	I2Cdata[0] = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	89 83       	std	Y+1, r24	; 0x01
	I2Cdata[1] = rp6Data.driveSpeed;
 3a8:	08 e1       	ldi	r16, 0x18	; 24
 3aa:	12 e0       	ldi	r17, 0x02	; 2
 3ac:	f8 01       	movw	r30, r16
 3ae:	80 81       	ld	r24, Z
 3b0:	8a 83       	std	Y+2, r24	; 0x02
	I2Cdata[2] = rp6Data.driveDirection + 1;
 3b2:	81 81       	ldd	r24, Z+1	; 0x01
 3b4:	8f 5f       	subi	r24, 0xFF	; 255
 3b6:	8b 83       	std	Y+3, r24	; 0x03
	I2Cdata[3] = rp6Data.turnDirection + 1;
 3b8:	82 81       	ldd	r24, Z+2	; 0x02
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	8c 83       	std	Y+4, r24	; 0x04
	I2Cdata[4] = rp6Data.accelerationRate;
 3be:	83 81       	ldd	r24, Z+3	; 0x03
 3c0:	8d 83       	std	Y+5, r24	; 0x05
	I2Cdata[5] = rp6Data.turnRate * 255 / 8000;
 3c2:	84 81       	ldd	r24, Z+4	; 0x04
 3c4:	95 81       	ldd	r25, Z+5	; 0x05
 3c6:	4f ef       	ldi	r20, 0xFF	; 255
 3c8:	48 9f       	mul	r20, r24
 3ca:	90 01       	movw	r18, r0
 3cc:	49 9f       	mul	r20, r25
 3ce:	30 0d       	add	r19, r0
 3d0:	11 24       	eor	r1, r1
 3d2:	00 24       	eor	r0, r0
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	00 1c       	adc	r0, r0
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	00 1c       	adc	r0, r0
 3e0:	23 2f       	mov	r18, r19
 3e2:	30 2d       	mov	r19, r0
 3e4:	a9 e1       	ldi	r26, 0x19	; 25
 3e6:	b4 e0       	ldi	r27, 0x04	; 4
 3e8:	bd d0       	rcall	.+378    	; 0x564 <__umulhisi3>
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	8e 83       	std	Y+6, r24	; 0x06
	I2Cdata[6] = rp6Data.driveSpeedThreshold * 255 / 6000;
 3f0:	86 81       	ldd	r24, Z+6	; 0x06
 3f2:	97 81       	ldd	r25, Z+7	; 0x07
 3f4:	48 9f       	mul	r20, r24
 3f6:	90 01       	movw	r18, r0
 3f8:	49 9f       	mul	r20, r25
 3fa:	30 0d       	add	r19, r0
 3fc:	11 24       	eor	r1, r1
 3fe:	32 95       	swap	r19
 400:	22 95       	swap	r18
 402:	2f 70       	andi	r18, 0x0F	; 15
 404:	23 27       	eor	r18, r19
 406:	3f 70       	andi	r19, 0x0F	; 15
 408:	23 27       	eor	r18, r19
 40a:	a9 ed       	ldi	r26, 0xD9	; 217
 40c:	b5 e1       	ldi	r27, 0x15	; 21
 40e:	aa d0       	rcall	.+340    	; 0x564 <__umulhisi3>
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	92 95       	swap	r25
 416:	82 95       	swap	r24
 418:	8f 70       	andi	r24, 0x0F	; 15
 41a:	89 27       	eor	r24, r25
 41c:	9f 70       	andi	r25, 0x0F	; 15
 41e:	89 27       	eor	r24, r25
 420:	8f 83       	std	Y+7, r24	; 0x07
	I2Cdata[7] = rp6Data.updateSpeed / 2000;
 422:	60 85       	ldd	r22, Z+8	; 0x08
 424:	71 85       	ldd	r23, Z+9	; 0x09
 426:	82 85       	ldd	r24, Z+10	; 0x0a
 428:	93 85       	ldd	r25, Z+11	; 0x0b
 42a:	20 ed       	ldi	r18, 0xD0	; 208
 42c:	37 e0       	ldi	r19, 0x07	; 7
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	76 d0       	rcall	.+236    	; 0x520 <__udivmodsi4>
 434:	28 87       	std	Y+8, r18	; 0x08
	I2Cdata[8] = rp6Data.enableBeeper;
 436:	f8 01       	movw	r30, r16
 438:	84 85       	ldd	r24, Z+12	; 0x0c
 43a:	89 87       	std	Y+9, r24	; 0x09
 43c:	fe 01       	movw	r30, r28
 43e:	3a 96       	adiw	r30, 0x0a	; 10
 440:	ce 01       	movw	r24, r28
 442:	45 96       	adiw	r24, 0x15	; 21
	
	for(int i = 9; i <= 19; i++){
		I2Cdata[i] = 0;
 444:	11 92       	st	Z+, r1
	I2Cdata[5] = rp6Data.turnRate * 255 / 8000;
	I2Cdata[6] = rp6Data.driveSpeedThreshold * 255 / 6000;
	I2Cdata[7] = rp6Data.updateSpeed / 2000;
	I2Cdata[8] = rp6Data.enableBeeper;
	
	for(int i = 9; i <= 19; i++){
 446:	e8 17       	cp	r30, r24
 448:	f9 07       	cpc	r31, r25
		I2Cdata[i] = 0;
	}
	
	I2C_sendArray(I2Cdata);
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	8a df       	rcall	.-236    	; 0x366 <I2C_sendArray>
}
 452:	64 96       	adiw	r28, 0x14	; 20
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	08 95       	ret

00000468 <main>:
void rp6DataConstructor();
void I2C_sendArray(uint8_t I2Cdata[]);
//-------------------------------------------------
//Other functions ---------------------------------
void init_interrupt(){
	sei();									//Enable global interrupts
 468:	78 94       	sei


int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
 46a:	9f de       	rcall	.-706    	; 0x1aa <init_micros>
	init_master();
 46c:	5b de       	rcall	.-842    	; 0x124 <init_master>
	init_I2C();
 46e:	99 de       	rcall	.-718    	; 0x1a2 <init_I2C>
	init_rp6Data();
 470:	60 df       	rcall	.-320    	; 0x332 <init_rp6Data>
	init_arduinoData();
 472:	58 df       	rcall	.-336    	; 0x324 <init_arduinoData>
	initTimer();
 474:	4b d0       	rcall	.+150    	; 0x50c <initTimer>
 476:	80 de       	rcall	.-768    	; 0x178 <init_USART>
	init_USART();
 478:	c4 e8       	ldi	r28, 0x84	; 132
 47a:	d0 e0       	ldi	r29, 0x00	; 0
		if(I2CsyncTimer < micros()){
			rp6DataConstructor();
			I2CsyncTimer = micros() + syncSpeed;
		}
		
		if (TCNT1 > 125000) {
 47c:	f3 de       	rcall	.-538    	; 0x264 <micros>
 47e:	a0 90 04 02 	lds	r10, 0x0204	; 0x800204 <__data_end>
	init_USART();
	//-----------------------
	int distance = 0;
	
	while (1){
		if(I2CsyncTimer < micros()){
 482:	b0 90 05 02 	lds	r11, 0x0205	; 0x800205 <__data_end+0x1>
 486:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <__data_end+0x2>
 48a:	d0 90 07 02 	lds	r13, 0x0207	; 0x800207 <__data_end+0x3>
 48e:	e0 90 08 02 	lds	r14, 0x0208	; 0x800208 <__data_end+0x4>
 492:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <__data_end+0x5>
 496:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <__data_end+0x6>
 49a:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <__data_end+0x7>
 49e:	9f d0       	rcall	.+318    	; 0x5de <__cmpdi2>
 4a0:	91 f1       	breq	.+100    	; 0x506 <main+0x9e>
 4a2:	88 f1       	brcs	.+98     	; 0x506 <main+0x9e>
 4a4:	73 df       	rcall	.-282    	; 0x38c <rp6DataConstructor>
			rp6DataConstructor();
 4a6:	de de       	rcall	.-580    	; 0x264 <micros>
 4a8:	62 2e       	mov	r6, r18
			I2CsyncTimer = micros() + syncSpeed;
 4aa:	73 2e       	mov	r7, r19
 4ac:	b4 2f       	mov	r27, r20
 4ae:	a5 2f       	mov	r26, r21
 4b0:	f6 2f       	mov	r31, r22
 4b2:	e7 2f       	mov	r30, r23
 4b4:	08 2f       	mov	r16, r24
 4b6:	19 2f       	mov	r17, r25
 4b8:	80 90 00 02 	lds	r8, 0x0200	; 0x800200 <__data_start>
 4bc:	90 90 01 02 	lds	r9, 0x0201	; 0x800201 <__data_start+0x1>
 4c0:	a0 90 02 02 	lds	r10, 0x0202	; 0x800202 <__data_start+0x2>
 4c4:	b0 90 03 02 	lds	r11, 0x0203	; 0x800203 <__data_start+0x3>
 4c8:	28 2d       	mov	r18, r8
 4ca:	39 2d       	mov	r19, r9
 4cc:	4a 2d       	mov	r20, r10
 4ce:	5b 2d       	mov	r21, r11
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	a6 2c       	mov	r10, r6
 4da:	b7 2c       	mov	r11, r7
 4dc:	cb 2e       	mov	r12, r27
 4de:	da 2e       	mov	r13, r26
 4e0:	ef 2e       	mov	r14, r31
 4e2:	fe 2e       	mov	r15, r30
 4e4:	67 d0       	rcall	.+206    	; 0x5b4 <__adddi3>
 4e6:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <__data_end>
 4ea:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <__data_end+0x1>
 4ee:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end+0x2>
 4f2:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x3>
 4f6:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <__data_end+0x4>
 4fa:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <__data_end+0x5>
 4fe:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end+0x6>
 502:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x7>
 506:	88 81       	ld	r24, Y
 508:	99 81       	ldd	r25, Y+1	; 0x01
 50a:	b8 cf       	rjmp	.-144    	; 0x47c <main+0x14>

0000050c <initTimer>:
#define ECHO PINB4
#define MAX_SENSOR_VALUE 30000

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
 50c:	e1 e8       	ldi	r30, 0x81	; 129
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	82 60       	ori	r24, 0x02	; 2
 514:	80 83       	st	Z, r24
	TCNT1 = 0;
 516:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 51a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 51e:	08 95       	ret

00000520 <__udivmodsi4>:
 520:	a1 e2       	ldi	r26, 0x21	; 33
 522:	1a 2e       	mov	r1, r26
 524:	aa 1b       	sub	r26, r26
 526:	bb 1b       	sub	r27, r27
 528:	fd 01       	movw	r30, r26
 52a:	0d c0       	rjmp	.+26     	; 0x546 <__udivmodsi4_ep>

0000052c <__udivmodsi4_loop>:
 52c:	aa 1f       	adc	r26, r26
 52e:	bb 1f       	adc	r27, r27
 530:	ee 1f       	adc	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	a2 17       	cp	r26, r18
 536:	b3 07       	cpc	r27, r19
 538:	e4 07       	cpc	r30, r20
 53a:	f5 07       	cpc	r31, r21
 53c:	20 f0       	brcs	.+8      	; 0x546 <__udivmodsi4_ep>
 53e:	a2 1b       	sub	r26, r18
 540:	b3 0b       	sbc	r27, r19
 542:	e4 0b       	sbc	r30, r20
 544:	f5 0b       	sbc	r31, r21

00000546 <__udivmodsi4_ep>:
 546:	66 1f       	adc	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	1a 94       	dec	r1
 550:	69 f7       	brne	.-38     	; 0x52c <__udivmodsi4_loop>
 552:	60 95       	com	r22
 554:	70 95       	com	r23
 556:	80 95       	com	r24
 558:	90 95       	com	r25
 55a:	9b 01       	movw	r18, r22
 55c:	ac 01       	movw	r20, r24
 55e:	bd 01       	movw	r22, r26
 560:	cf 01       	movw	r24, r30
 562:	08 95       	ret

00000564 <__umulhisi3>:
 564:	a2 9f       	mul	r26, r18
 566:	b0 01       	movw	r22, r0
 568:	b3 9f       	mul	r27, r19
 56a:	c0 01       	movw	r24, r0
 56c:	a3 9f       	mul	r26, r19
 56e:	70 0d       	add	r23, r0
 570:	81 1d       	adc	r24, r1
 572:	11 24       	eor	r1, r1
 574:	91 1d       	adc	r25, r1
 576:	b2 9f       	mul	r27, r18
 578:	70 0d       	add	r23, r0
 57a:	81 1d       	adc	r24, r1
 57c:	11 24       	eor	r1, r1
 57e:	91 1d       	adc	r25, r1
 580:	08 95       	ret

00000582 <__ashldi3>:
 582:	0f 93       	push	r16
 584:	08 30       	cpi	r16, 0x08	; 8
 586:	90 f0       	brcs	.+36     	; 0x5ac <__ashldi3+0x2a>
 588:	98 2f       	mov	r25, r24
 58a:	87 2f       	mov	r24, r23
 58c:	76 2f       	mov	r23, r22
 58e:	65 2f       	mov	r22, r21
 590:	54 2f       	mov	r21, r20
 592:	43 2f       	mov	r20, r19
 594:	32 2f       	mov	r19, r18
 596:	22 27       	eor	r18, r18
 598:	08 50       	subi	r16, 0x08	; 8
 59a:	f4 cf       	rjmp	.-24     	; 0x584 <__ashldi3+0x2>
 59c:	22 0f       	add	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	44 1f       	adc	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	66 1f       	adc	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	0a 95       	dec	r16
 5ae:	b2 f7       	brpl	.-20     	; 0x59c <__ashldi3+0x1a>
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <__adddi3>:
 5b4:	2a 0d       	add	r18, r10
 5b6:	3b 1d       	adc	r19, r11
 5b8:	4c 1d       	adc	r20, r12
 5ba:	5d 1d       	adc	r21, r13
 5bc:	6e 1d       	adc	r22, r14
 5be:	7f 1d       	adc	r23, r15
 5c0:	80 1f       	adc	r24, r16
 5c2:	91 1f       	adc	r25, r17
 5c4:	08 95       	ret

000005c6 <__adddi3_s8>:
 5c6:	00 24       	eor	r0, r0
 5c8:	a7 fd       	sbrc	r26, 7
 5ca:	00 94       	com	r0
 5cc:	2a 0f       	add	r18, r26
 5ce:	30 1d       	adc	r19, r0
 5d0:	40 1d       	adc	r20, r0
 5d2:	50 1d       	adc	r21, r0
 5d4:	60 1d       	adc	r22, r0
 5d6:	70 1d       	adc	r23, r0
 5d8:	80 1d       	adc	r24, r0
 5da:	90 1d       	adc	r25, r0
 5dc:	08 95       	ret

000005de <__cmpdi2>:
 5de:	2a 15       	cp	r18, r10
 5e0:	3b 05       	cpc	r19, r11
 5e2:	4c 05       	cpc	r20, r12
 5e4:	5d 05       	cpc	r21, r13
 5e6:	6e 05       	cpc	r22, r14
 5e8:	7f 05       	cpc	r23, r15
 5ea:	80 07       	cpc	r24, r16
 5ec:	91 07       	cpc	r25, r17
 5ee:	08 95       	ret

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
