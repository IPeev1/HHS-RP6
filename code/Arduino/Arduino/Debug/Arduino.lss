
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800200  00001c3a  00001cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016f  0080031c  0080031c  00001dea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021ce  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001258  00000000  00000000  000041c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001105  00000000  00000000  0000541a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00006520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac4  00000000  00000000  00006ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000132b  00000000  00000000  00007668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c6       	rjmp	.+3230   	; 0xcdc <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c1       	rjmp	.+802    	; 0x388 <__vector_25>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c6 c0       	rjmp	.+396    	; 0x21a <__vector_35>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c4       	rjmp	.+2142   	; 0x8fc <__vector_39>
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
      a8:	98 c0       	rjmp	.+304    	; 0x1da <__bad_interrupt>
      aa:	00 00       	nop
      ac:	96 c0       	rjmp	.+300    	; 0x1da <__bad_interrupt>
      ae:	00 00       	nop
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	92 c0       	rjmp	.+292    	; 0x1da <__bad_interrupt>
      b6:	00 00       	nop
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d5 02       	muls	r29, r21
      e6:	0f 03       	fmul	r16, r23
      e8:	0f 03       	fmul	r16, r23
      ea:	e0 02       	muls	r30, r16
      ec:	0f 03       	fmul	r16, r23
      ee:	0f 03       	fmul	r16, r23
      f0:	0f 03       	fmul	r16, r23
      f2:	0f 03       	fmul	r16, r23
      f4:	0f 03       	fmul	r16, r23
      f6:	0f 03       	fmul	r16, r23
      f8:	0f 03       	fmul	r16, r23
      fa:	0f 03       	fmul	r16, r23
      fc:	0f 03       	fmul	r16, r23
      fe:	0f 03       	fmul	r16, r23
     100:	0f 03       	fmul	r16, r23
     102:	0f 03       	fmul	r16, r23
     104:	00 03       	mulsu	r16, r16
     106:	f7 02       	muls	r31, r23
     108:	ca 02       	muls	r28, r26
     10a:	eb 02       	muls	r30, r27
     10c:	0f 03       	fmul	r16, r23
     10e:	0f 03       	fmul	r16, r23
     110:	bf 02       	muls	r27, r31
     112:	0f 03       	fmul	r16, r23
     114:	0f 03       	fmul	r16, r23
     116:	09 03       	fmul	r16, r17
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
     190:	01 c4       	rjmp	.+2050   	; 0x994 <__vector_39+0x98>
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ea e3       	ldi	r30, 0x3A	; 58
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	ac 31       	cpi	r26, 0x1C	; 28
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	24 e0       	ldi	r18, 0x04	; 4
     1c6:	ac e1       	ldi	r26, 0x1C	; 28
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	ab 38       	cpi	r26, 0x8B	; 139
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	bc d7       	rcall	.+3960   	; 0x114e <main>
     1d6:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <init_micros>:
	TWISendTransmit();															//Transmit the data in the register
}

uint8_t TWIGetStatus(){														//Read the current TWI status code from the register and return it
	return (TWSR & 0xF8);														//Read the status register and mask the prescaler bits. Return the left over variable
}
     1dc:	e1 e9       	ldi	r30, 0x91	; 145
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	80 83       	st	Z, r24
     1e6:	e1 e7       	ldi	r30, 0x71	; 113
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	80 83       	st	Z, r24
     1f0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     1f4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     1f8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <t3TotalOverflow>
     1fc:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <t3TotalOverflow+0x1>
     200:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <t3TotalOverflow+0x2>
     204:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <t3TotalOverflow+0x3>
     208:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <t3TotalOverflow+0x4>
     20c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <t3TotalOverflow+0x5>
     210:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <t3TotalOverflow+0x6>
     214:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <t3TotalOverflow+0x7>
     218:	08 95       	ret

0000021a <__vector_35>:
     21a:	1f 92       	push	r1
     21c:	0f 92       	push	r0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	0f 92       	push	r0
     222:	11 24       	eor	r1, r1
     224:	2f 93       	push	r18
     226:	3f 93       	push	r19
     228:	4f 93       	push	r20
     22a:	5f 93       	push	r21
     22c:	6f 93       	push	r22
     22e:	7f 93       	push	r23
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <t3TotalOverflow>
     23a:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <t3TotalOverflow+0x1>
     23e:	40 91 59 03 	lds	r20, 0x0359	; 0x800359 <t3TotalOverflow+0x2>
     242:	50 91 5a 03 	lds	r21, 0x035A	; 0x80035a <t3TotalOverflow+0x3>
     246:	60 91 5b 03 	lds	r22, 0x035B	; 0x80035b <t3TotalOverflow+0x4>
     24a:	70 91 5c 03 	lds	r23, 0x035C	; 0x80035c <t3TotalOverflow+0x5>
     24e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <t3TotalOverflow+0x6>
     252:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <t3TotalOverflow+0x7>
     256:	a1 e0       	ldi	r26, 0x01	; 1
     258:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__adddi3_s8>
     25c:	20 93 57 03 	sts	0x0357, r18	; 0x800357 <t3TotalOverflow>
     260:	30 93 58 03 	sts	0x0358, r19	; 0x800358 <t3TotalOverflow+0x1>
     264:	40 93 59 03 	sts	0x0359, r20	; 0x800359 <t3TotalOverflow+0x2>
     268:	50 93 5a 03 	sts	0x035A, r21	; 0x80035a <t3TotalOverflow+0x3>
     26c:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <t3TotalOverflow+0x4>
     270:	70 93 5c 03 	sts	0x035C, r23	; 0x80035c <t3TotalOverflow+0x5>
     274:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <t3TotalOverflow+0x6>
     278:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <t3TotalOverflow+0x7>
     27c:	af 91       	pop	r26
     27e:	9f 91       	pop	r25
     280:	8f 91       	pop	r24
     282:	7f 91       	pop	r23
     284:	6f 91       	pop	r22
     286:	5f 91       	pop	r21
     288:	4f 91       	pop	r20
     28a:	3f 91       	pop	r19
     28c:	2f 91       	pop	r18
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <micros>:
     298:	4f 92       	push	r4
     29a:	5f 92       	push	r5
     29c:	6f 92       	push	r6
     29e:	7f 92       	push	r7
     2a0:	8f 92       	push	r8
     2a2:	9f 92       	push	r9
     2a4:	af 92       	push	r10
     2a6:	bf 92       	push	r11
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     2b8:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     2bc:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <t3TotalOverflow>
     2c0:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <t3TotalOverflow+0x1>
     2c4:	40 91 59 03 	lds	r20, 0x0359	; 0x800359 <t3TotalOverflow+0x2>
     2c8:	50 91 5a 03 	lds	r21, 0x035A	; 0x80035a <t3TotalOverflow+0x3>
     2cc:	60 91 5b 03 	lds	r22, 0x035B	; 0x80035b <t3TotalOverflow+0x4>
     2d0:	70 91 5c 03 	lds	r23, 0x035C	; 0x80035c <t3TotalOverflow+0x5>
     2d4:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <t3TotalOverflow+0x6>
     2d8:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <t3TotalOverflow+0x7>
     2dc:	98 2c       	mov	r9, r8
     2de:	88 24       	eor	r8, r8
     2e0:	99 0c       	add	r9, r9
     2e2:	99 0c       	add	r9, r9
     2e4:	99 0c       	add	r9, r9
     2e6:	99 0c       	add	r9, r9
     2e8:	09 2c       	mov	r0, r9
     2ea:	00 0c       	add	r0, r0
     2ec:	aa 08       	sbc	r10, r10
     2ee:	bb 08       	sbc	r11, r11
     2f0:	bb 20       	and	r11, r11
     2f2:	2c f4       	brge	.+10     	; 0x2fe <micros+0x66>
     2f4:	ef ef       	ldi	r30, 0xFF	; 255
     2f6:	8e 0e       	add	r8, r30
     2f8:	9e 1e       	adc	r9, r30
     2fa:	a1 1c       	adc	r10, r1
     2fc:	b1 1c       	adc	r11, r1
     2fe:	25 01       	movw	r4, r10
     300:	77 24       	eor	r7, r7
     302:	57 fc       	sbrc	r5, 7
     304:	70 94       	com	r7
     306:	67 2c       	mov	r6, r7
     308:	bb 0c       	add	r11, r11
     30a:	88 08       	sbc	r8, r8
     30c:	98 2c       	mov	r9, r8
     30e:	54 01       	movw	r10, r8
     310:	0c e0       	ldi	r16, 0x0C	; 12
     312:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__ashldi3>
     316:	f2 2f       	mov	r31, r18
     318:	e3 2f       	mov	r30, r19
     31a:	c4 2e       	mov	r12, r20
     31c:	d5 2e       	mov	r13, r21
     31e:	e6 2e       	mov	r14, r22
     320:	f7 2e       	mov	r15, r23
     322:	08 2f       	mov	r16, r24
     324:	19 2f       	mov	r17, r25
     326:	24 2d       	mov	r18, r4
     328:	35 2d       	mov	r19, r5
     32a:	46 2d       	mov	r20, r6
     32c:	57 2d       	mov	r21, r7
     32e:	68 2d       	mov	r22, r8
     330:	78 2d       	mov	r23, r8
     332:	88 2d       	mov	r24, r8
     334:	98 2d       	mov	r25, r8
     336:	af 2e       	mov	r10, r31
     338:	be 2e       	mov	r11, r30
     33a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__adddi3>
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	7f 90       	pop	r7
     354:	6f 90       	pop	r6
     356:	5f 90       	pop	r5
     358:	4f 90       	pop	r4
     35a:	08 95       	ret

0000035c <init_USART>:
     35c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     360:	e1 ec       	ldi	r30, 0xC1	; 193
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	80 69       	ori	r24, 0x90	; 144
     368:	80 83       	st	Z, r24
     36a:	80 81       	ld	r24, Z
     36c:	88 60       	ori	r24, 0x08	; 8
     36e:	80 83       	st	Z, r24
     370:	e2 ec       	ldi	r30, 0xC2	; 194
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	86 60       	ori	r24, 0x06	; 6
     378:	80 83       	st	Z, r24
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     382:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     386:	08 95       	ret

00000388 <__vector_25>:
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	0b b6       	in	r0, 0x3b	; 59
     394:	0f 92       	push	r0
     396:	cf 92       	push	r12
     398:	df 92       	push	r13
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
     3be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     3c2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <USARTreceived>
     3c6:	90 ed       	ldi	r25, 0xD0	; 208
     3c8:	98 0f       	add	r25, r24
     3ca:	9a 30       	cpi	r25, 0x0A	; 10
     3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__vector_25+0x4a>
     3ce:	80 32       	cpi	r24, 0x20	; 32
     3d0:	99 f4       	brne	.+38     	; 0x3f8 <__vector_25+0x70>
     3d2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <USARTinputPos>
     3d6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <USARTinputPos+0x1>
     3da:	2f 3f       	cpi	r18, 0xFF	; 255
     3dc:	31 05       	cpc	r19, r1
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <__vector_25+0x5a>
     3e0:	2d c1       	rjmp	.+602    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <USARTinputPos+0x1>
     3ea:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <USARTinputPos>
     3ee:	f9 01       	movw	r30, r18
     3f0:	e4 57       	subi	r30, 0x74	; 116
     3f2:	fc 4f       	sbci	r31, 0xFC	; 252
     3f4:	80 83       	st	Z, r24
     3f6:	22 c1       	rjmp	.+580    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     3f8:	9f e9       	ldi	r25, 0x9F	; 159
     3fa:	98 0f       	add	r25, r24
     3fc:	9a 31       	cpi	r25, 0x1A	; 26
     3fe:	28 f4       	brcc	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	82 36       	cpi	r24, 0x62	; 98
     402:	29 f0       	breq	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     404:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     408:	19 c1       	rjmp	.+562    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     40a:	82 36       	cpi	r24, 0x62	; 98
     40c:	51 f4       	brne	.+20     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     40e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USARTinputPos>
     412:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USARTinputPos+0x1>
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <USARTinputPos+0x1>
     41c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTinputPos>
     420:	0d c1       	rjmp	.+538    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     422:	8d 30       	cpi	r24, 0x0D	; 13
     424:	09 f0       	breq	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	0a c1       	rjmp	.+532    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     428:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <USARTinputPos>
     42c:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <USARTinputPos+0x1>
     430:	11 23       	and	r17, r17
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	90 c0       	rjmp	.+288    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     436:	e4 e3       	ldi	r30, 0x34	; 52
     438:	f3 e0       	ldi	r31, 0x03	; 3
     43a:	11 82       	std	Z+1, r1	; 0x01
     43c:	10 82       	st	Z, r1
     43e:	13 82       	std	Z+3, r1	; 0x03
     440:	12 82       	std	Z+2, r1	; 0x02
     442:	15 82       	std	Z+5, r1	; 0x05
     444:	14 82       	std	Z+4, r1	; 0x04
     446:	ee e2       	ldi	r30, 0x2E	; 46
     448:	f3 e0       	ldi	r31, 0x03	; 3
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
     452:	93 83       	std	Z+3, r25	; 0x03
     454:	82 83       	std	Z+2, r24	; 0x02
     456:	95 83       	std	Z+5, r25	; 0x05
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <numberStart.2008+0x1>
     45e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <numberStart.2008>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	fc 01       	movw	r30, r24
     46e:	e4 57       	subi	r30, 0x74	; 116
     470:	fc 4f       	sbci	r31, 0xFC	; 252
     472:	30 81       	ld	r19, Z
     474:	30 32       	cpi	r19, 0x20	; 32
     476:	79 f4       	brne	.+30     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     478:	4f 5f       	subi	r20, 0xFF	; 255
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
     47c:	fa 01       	movw	r30, r20
     47e:	ee 0f       	add	r30, r30
     480:	ff 1f       	adc	r31, r31
     482:	e8 5d       	subi	r30, 0xD8	; 216
     484:	fc 4f       	sbci	r31, 0xFC	; 252
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	91 83       	std	Z+1, r25	; 0x01
     48a:	80 83       	st	Z, r24
     48c:	43 30       	cpi	r20, 0x03	; 3
     48e:	51 05       	cpc	r21, r1
     490:	0c f0       	brlt	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	ce c0       	rjmp	.+412    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     496:	fa 01       	movw	r30, r20
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	e2 5d       	subi	r30, 0xD2	; 210
     49e:	fc 4f       	sbci	r31, 0xFC	; 252
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	2f 5f       	subi	r18, 0xFF	; 255
     4ac:	82 2f       	mov	r24, r18
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	08 17       	cp	r16, r24
     4b2:	19 07       	cpc	r17, r25
     4b4:	dc f6       	brge	.-74     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     4b6:	bc c0       	rjmp	.+376    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     4b8:	f9 01       	movw	r30, r18
     4ba:	e4 57       	subi	r30, 0x74	; 116
     4bc:	fc 4f       	sbci	r31, 0xFC	; 252
     4be:	c0 80       	ld	r12, Z
     4c0:	80 e2       	ldi	r24, 0x20	; 32
     4c2:	c8 12       	cpse	r12, r24
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	e8 1a       	sub	r14, r24
     4ca:	f8 0a       	sbc	r15, r24
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	e8 16       	cp	r14, r24
     4d0:	f1 04       	cpc	r15, r1
     4d2:	0c f0       	brlt	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d4:	40 c0       	rjmp	.+128    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     4d6:	38 c0       	rjmp	.+112    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     4d8:	e7 01       	movw	r28, r14
     4da:	cc 0f       	add	r28, r28
     4dc:	dd 1f       	adc	r29, r29
     4de:	de 01       	movw	r26, r28
     4e0:	a2 5d       	subi	r26, 0xD2	; 210
     4e2:	bc 4f       	sbci	r27, 0xFC	; 252
     4e4:	fe 01       	movw	r30, r28
     4e6:	e8 5d       	subi	r30, 0xD8	; 216
     4e8:	fc 4f       	sbci	r31, 0xFC	; 252
     4ea:	6d 91       	ld	r22, X+
     4ec:	7c 91       	ld	r23, X
     4ee:	80 81       	ld	r24, Z
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	68 0f       	add	r22, r24
     4f4:	79 1f       	adc	r23, r25
     4f6:	62 1b       	sub	r22, r18
     4f8:	73 0b       	sbc	r23, r19
     4fa:	07 2e       	mov	r0, r23
     4fc:	00 0c       	add	r0, r0
     4fe:	88 0b       	sbc	r24, r24
     500:	99 0b       	sbc	r25, r25
     502:	0e 94 95 0a 	call	0x152a	; 0x152a <__floatsisf>
     506:	9b 01       	movw	r18, r22
     508:	ac 01       	movw	r20, r24
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e2       	ldi	r24, 0x20	; 32
     510:	91 e4       	ldi	r25, 0x41	; 65
     512:	0e 94 84 0b 	call	0x1708	; 0x1708 <pow>
     516:	cc 5c       	subi	r28, 0xCC	; 204
     518:	dc 4f       	sbci	r29, 0xFC	; 252
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	5f e3       	ldi	r21, 0x3F	; 63
     522:	04 d7       	rcall	.+3592   	; 0x132c <__addsf3>
     524:	cf d7       	rcall	.+3998   	; 0x14c4 <__fixsfsi>
     526:	20 ed       	ldi	r18, 0xD0	; 208
     528:	2c 0d       	add	r18, r12
     52a:	42 2f       	mov	r20, r18
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	46 9f       	mul	r20, r22
     530:	90 01       	movw	r18, r0
     532:	47 9f       	mul	r20, r23
     534:	30 0d       	add	r19, r0
     536:	56 9f       	mul	r21, r22
     538:	30 0d       	add	r19, r0
     53a:	11 24       	eor	r1, r1
     53c:	88 81       	ld	r24, Y
     53e:	99 81       	ldd	r25, Y+1	; 0x01
     540:	82 0f       	add	r24, r18
     542:	93 1f       	adc	r25, r19
     544:	99 83       	std	Y+1, r25	; 0x01
     546:	88 83       	st	Y, r24
     548:	d3 94       	inc	r13
     54a:	2d 2d       	mov	r18, r13
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	02 17       	cp	r16, r18
     550:	13 07       	cpc	r17, r19
     552:	0c f0       	brlt	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     554:	b1 cf       	rjmp	.-158    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     556:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     55a:	ee 23       	and	r30, r30
     55c:	09 f4       	brne	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     55e:	5f c0       	rjmp	.+190    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     560:	8e 2f       	mov	r24, r30
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	e1 56       	subi	r30, 0x61	; 97
     568:	f1 09       	sbc	r31, r1
     56a:	ea 31       	cpi	r30, 0x1A	; 26
     56c:	f1 05       	cpc	r31, r1
     56e:	08 f0       	brcs	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	56 c0       	rjmp	.+172    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     572:	88 27       	eor	r24, r24
     574:	ee 58       	subi	r30, 0x8E	; 142
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	8f 4f       	sbci	r24, 0xFF	; 255
     57a:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__tablejump2__>
     57e:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <rp6Data+0x2>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	19 f4       	brne	.+6      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     586:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <rp6Data+0x2>
     58a:	49 c0       	rjmp	.+146    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <rp6Data+0x2>
     592:	45 c0       	rjmp	.+138    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     594:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <rp6Data+0x2>
     598:	8f 3f       	cpi	r24, 0xFF	; 255
     59a:	19 f4       	brne	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     59c:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <rp6Data+0x2>
     5a0:	3e c0       	rjmp	.+124    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <rp6Data+0x2>
     5a8:	3a c0       	rjmp	.+116    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5aa:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <rp6Data+0x3>
     5ae:	8f 3f       	cpi	r24, 0xFF	; 255
     5b0:	19 f4       	brne	.+6      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5b2:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <rp6Data+0x3>
     5b6:	33 c0       	rjmp	.+102    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5b8:	8f ef       	ldi	r24, 0xFF	; 255
     5ba:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <rp6Data+0x3>
     5be:	2f c0       	rjmp	.+94     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5c0:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <rp6Data+0x3>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	19 f4       	brne	.+6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5c8:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <rp6Data+0x3>
     5cc:	28 c0       	rjmp	.+80     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <rp6Data+0x3>
     5d4:	24 c0       	rjmp	.+72     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5d6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.2006>
     5da:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.2006+0x1>
     5de:	85 36       	cpi	r24, 0x65	; 101
     5e0:	91 05       	cpc	r25, r1
     5e2:	e8 f4       	brcc	.+58     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5e4:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <rp6Data+0x1>
     5e8:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <rp6Data>
     5ec:	18 c0       	rjmp	.+48     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     5ee:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.2006>
     5f2:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.2006+0x1>
     5f6:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <rp6Data+0x7>
     5fa:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <rp6Data+0x6>
     5fe:	0f c0       	rjmp	.+30     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     600:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.2006>
     604:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.2006+0x1>
     608:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <rp6Data+0x5>
     60c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <rp6Data+0x4>
     610:	06 c0       	rjmp	.+12     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     612:	e6 e7       	ldi	r30, 0x76	; 118
     614:	f3 e0       	ldi	r31, 0x03	; 3
     616:	11 82       	std	Z+1, r1	; 0x01
     618:	10 82       	st	Z, r1
     61a:	13 82       	std	Z+3, r1	; 0x03
     61c:	12 82       	std	Z+2, r1	; 0x02
     61e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	9f ef       	ldi	r25, 0xFF	; 255
     626:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <USARTinputPos+0x1>
     62a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTinputPos>
     62e:	06 c0       	rjmp	.+12     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	d1 2c       	mov	r13, r1
     636:	e1 2c       	mov	r14, r1
     638:	f1 2c       	mov	r15, r1
     63a:	3e cf       	rjmp	.-388    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <writeToTerminal>:
     672:	4f 92       	push	r4
     674:	5f 92       	push	r5
     676:	6f 92       	push	r6
     678:	7f 92       	push	r7
     67a:	8f 92       	push	r8
     67c:	9f 92       	push	r9
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	40 90 44 03 	lds	r4, 0x0344	; 0x800344 <writeTerminalTimer>
     696:	50 90 45 03 	lds	r5, 0x0345	; 0x800345 <writeTerminalTimer+0x1>
     69a:	60 90 46 03 	lds	r6, 0x0346	; 0x800346 <writeTerminalTimer+0x2>
     69e:	70 90 47 03 	lds	r7, 0x0347	; 0x800347 <writeTerminalTimer+0x3>
     6a2:	fa dd       	rcall	.-1036   	; 0x298 <micros>
     6a4:	f2 2f       	mov	r31, r18
     6a6:	e3 2f       	mov	r30, r19
     6a8:	c4 2e       	mov	r12, r20
     6aa:	d5 2e       	mov	r13, r21
     6ac:	e6 2e       	mov	r14, r22
     6ae:	f7 2e       	mov	r15, r23
     6b0:	08 2f       	mov	r16, r24
     6b2:	19 2f       	mov	r17, r25
     6b4:	24 2d       	mov	r18, r4
     6b6:	35 2d       	mov	r19, r5
     6b8:	46 2d       	mov	r20, r6
     6ba:	57 2d       	mov	r21, r7
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	af 2e       	mov	r10, r31
     6c6:	be 2e       	mov	r11, r30
     6c8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__cmpdi2>
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <writeToTerminal+0x5e>
     6ce:	87 c0       	rjmp	.+270    	; 0x7de <writeToTerminal+0x16c>
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	5e d5       	rcall	.+2748   	; 0x1192 <writeString>
     6d6:	83 e1       	ldi	r24, 0x13	; 19
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	5b d5       	rcall	.+2742   	; 0x1192 <writeString>
     6dc:	a5 d5       	rcall	.+2890   	; 0x1228 <ultrasonicSensor>
     6de:	6e d5       	rcall	.+2780   	; 0x11bc <writeInt>
     6e0:	88 e2       	ldi	r24, 0x28	; 40
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	56 d5       	rcall	.+2732   	; 0x1192 <writeString>
     6e6:	c6 e7       	ldi	r28, 0x76	; 118
     6e8:	d3 e0       	ldi	r29, 0x03	; 3
     6ea:	8e 85       	ldd	r24, Y+14	; 0x0e
     6ec:	9f 85       	ldd	r25, Y+15	; 0x0f
     6ee:	66 d5       	rcall	.+2764   	; 0x11bc <writeInt>
     6f0:	8c e3       	ldi	r24, 0x3C	; 60
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	4e d5       	rcall	.+2716   	; 0x1192 <writeString>
     6f6:	85 e4       	ldi	r24, 0x45	; 69
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	4b d5       	rcall	.+2710   	; 0x1192 <writeString>
     6fc:	88 81       	ld	r24, Y
     6fe:	99 81       	ldd	r25, Y+1	; 0x01
     700:	5d d5       	rcall	.+2746   	; 0x11bc <writeInt>
     702:	84 e5       	ldi	r24, 0x54	; 84
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	45 d5       	rcall	.+2698   	; 0x1192 <writeString>
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	21 f4       	brne	.+8      	; 0x716 <writeToTerminal+0xa4>
     70e:	84 e6       	ldi	r24, 0x64	; 100
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	3f d5       	rcall	.+2686   	; 0x1192 <writeString>
     714:	0b c0       	rjmp	.+22     	; 0x72c <writeToTerminal+0xba>
     716:	81 11       	cpse	r24, r1
     718:	04 c0       	rjmp	.+8      	; 0x722 <writeToTerminal+0xb0>
     71a:	8e e6       	ldi	r24, 0x6E	; 110
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	39 d5       	rcall	.+2674   	; 0x1192 <writeString>
     720:	05 c0       	rjmp	.+10     	; 0x72c <writeToTerminal+0xba>
     722:	8f 3f       	cpi	r24, 0xFF	; 255
     724:	19 f4       	brne	.+6      	; 0x72c <writeToTerminal+0xba>
     726:	8b e7       	ldi	r24, 0x7B	; 123
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	33 d5       	rcall	.+2662   	; 0x1192 <writeString>
     72c:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <rp6Data+0x3>
     730:	8f 3f       	cpi	r24, 0xFF	; 255
     732:	21 f4       	brne	.+8      	; 0x73c <writeToTerminal+0xca>
     734:	87 e8       	ldi	r24, 0x87	; 135
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	2c d5       	rcall	.+2648   	; 0x1192 <writeString>
     73a:	0b c0       	rjmp	.+22     	; 0x752 <writeToTerminal+0xe0>
     73c:	81 11       	cpse	r24, r1
     73e:	04 c0       	rjmp	.+8      	; 0x748 <writeToTerminal+0xd6>
     740:	84 e9       	ldi	r24, 0x94	; 148
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	26 d5       	rcall	.+2636   	; 0x1192 <writeString>
     746:	05 c0       	rjmp	.+10     	; 0x752 <writeToTerminal+0xe0>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	19 f4       	brne	.+6      	; 0x752 <writeToTerminal+0xe0>
     74c:	83 ea       	ldi	r24, 0xA3	; 163
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	20 d5       	rcall	.+2624   	; 0x1192 <writeString>
     752:	81 eb       	ldi	r24, 0xB1	; 177
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	1d d5       	rcall	.+2618   	; 0x1192 <writeString>
     758:	c6 e7       	ldi	r28, 0x76	; 118
     75a:	d3 e0       	ldi	r29, 0x03	; 3
     75c:	8c 81       	ldd	r24, Y+4	; 0x04
     75e:	9d 81       	ldd	r25, Y+5	; 0x05
     760:	2d d5       	rcall	.+2650   	; 0x11bc <writeInt>
     762:	87 ec       	ldi	r24, 0xC7	; 199
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	15 d5       	rcall	.+2602   	; 0x1192 <writeString>
     768:	8e 81       	ldd	r24, Y+6	; 0x06
     76a:	9f 81       	ldd	r25, Y+7	; 0x07
     76c:	27 d5       	rcall	.+2638   	; 0x11bc <writeInt>
     76e:	85 ed       	ldi	r24, 0xD5	; 213
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	0f d5       	rcall	.+2590   	; 0x1192 <writeString>
     774:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
     778:	04 d5       	rcall	.+2568   	; 0x1182 <writeChar>
     77a:	82 ee       	ldi	r24, 0xE2	; 226
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	09 d5       	rcall	.+2578   	; 0x1192 <writeString>
     780:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USARTinputPos>
     784:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USARTinputPos+0x1>
     788:	99 23       	and	r25, r25
     78a:	84 f0       	brlt	.+32     	; 0x7ac <writeToTerminal+0x13a>
     78c:	0c e8       	ldi	r16, 0x8C	; 140
     78e:	13 e0       	ldi	r17, 0x03	; 3
     790:	c0 e0       	ldi	r28, 0x00	; 0
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	f8 01       	movw	r30, r16
     796:	81 91       	ld	r24, Z+
     798:	8f 01       	movw	r16, r30
     79a:	f3 d4       	rcall	.+2534   	; 0x1182 <writeChar>
     79c:	21 96       	adiw	r28, 0x01	; 1
     79e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USARTinputPos>
     7a2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USARTinputPos+0x1>
     7a6:	8c 17       	cp	r24, r28
     7a8:	9d 07       	cpc	r25, r29
     7aa:	a4 f7       	brge	.-24     	; 0x794 <writeToTerminal+0x122>
     7ac:	75 dd       	rcall	.-1302   	; 0x298 <micros>
     7ae:	82 2e       	mov	r8, r18
     7b0:	93 2e       	mov	r9, r19
     7b2:	a4 2e       	mov	r10, r20
     7b4:	b5 2e       	mov	r11, r21
     7b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <writeTerminalTimerSpeed>
     7ba:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <writeTerminalTimerSpeed+0x1>
     7be:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <writeTerminalTimerSpeed+0x2>
     7c2:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <writeTerminalTimerSpeed+0x3>
     7c6:	88 0e       	add	r8, r24
     7c8:	99 1e       	adc	r9, r25
     7ca:	aa 1e       	adc	r10, r26
     7cc:	bb 1e       	adc	r11, r27
     7ce:	80 92 44 03 	sts	0x0344, r8	; 0x800344 <writeTerminalTimer>
     7d2:	90 92 45 03 	sts	0x0345, r9	; 0x800345 <writeTerminalTimer+0x1>
     7d6:	a0 92 46 03 	sts	0x0346, r10	; 0x800346 <writeTerminalTimer+0x2>
     7da:	b0 92 47 03 	sts	0x0347, r11	; 0x800347 <writeTerminalTimer+0x3>
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	4f 90       	pop	r4
     7fe:	08 95       	ret

00000800 <init_TWI>:
     800:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     804:	88 e4       	ldi	r24, 0x48	; 72
     806:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     80a:	85 e0       	ldi	r24, 0x05	; 5
     80c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     810:	08 95       	ret

00000812 <init_TWI_Timer2>:
     812:	e1 eb       	ldi	r30, 0xB1	; 177
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	87 60       	ori	r24, 0x07	; 7
     81a:	80 83       	st	Z, r24
     81c:	e0 e7       	ldi	r30, 0x70	; 112
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	81 60       	ori	r24, 0x01	; 1
     824:	80 83       	st	Z, r24
     826:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     82a:	08 95       	ret

0000082c <init_arduinoData>:
     82c:	ef e5       	ldi	r30, 0x5F	; 95
     82e:	f3 e0       	ldi	r31, 0x03	; 3
     830:	11 82       	std	Z+1, r1	; 0x01
     832:	10 82       	st	Z, r1
     834:	13 82       	std	Z+3, r1	; 0x03
     836:	12 82       	std	Z+2, r1	; 0x02
     838:	15 82       	std	Z+5, r1	; 0x05
     83a:	14 82       	std	Z+4, r1	; 0x04
     83c:	17 82       	std	Z+7, r1	; 0x07
     83e:	16 82       	std	Z+6, r1	; 0x06
     840:	08 95       	ret

00000842 <init_rp6Data>:
     842:	e6 e7       	ldi	r30, 0x76	; 118
     844:	f3 e0       	ldi	r31, 0x03	; 3
     846:	11 82       	std	Z+1, r1	; 0x01
     848:	10 82       	st	Z, r1
     84a:	12 82       	std	Z+2, r1	; 0x02
     84c:	13 82       	std	Z+3, r1	; 0x03
     84e:	84 e2       	ldi	r24, 0x24	; 36
     850:	93 e1       	ldi	r25, 0x13	; 19
     852:	95 83       	std	Z+5, r25	; 0x05
     854:	84 83       	std	Z+4, r24	; 0x04
     856:	88 e2       	ldi	r24, 0x28	; 40
     858:	93 e2       	ldi	r25, 0x23	; 35
     85a:	97 83       	std	Z+7, r25	; 0x07
     85c:	86 83       	std	Z+6, r24	; 0x06
     85e:	88 e8       	ldi	r24, 0x88	; 136
     860:	93 e1       	ldi	r25, 0x13	; 19
     862:	91 87       	std	Z+9, r25	; 0x09
     864:	80 87       	std	Z+8, r24	; 0x08
     866:	88 ec       	ldi	r24, 0xC8	; 200
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e0       	ldi	r26, 0x00	; 0
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	82 87       	std	Z+10, r24	; 0x0a
     870:	93 87       	std	Z+11, r25	; 0x0b
     872:	a4 87       	std	Z+12, r26	; 0x0c
     874:	b5 87       	std	Z+13, r27	; 0x0d
     876:	08 95       	ret

00000878 <arduinoDataInterpreter>:
     878:	af e5       	ldi	r26, 0x5F	; 95
     87a:	b3 e0       	ldi	r27, 0x03	; 3
     87c:	e8 e4       	ldi	r30, 0x48	; 72
     87e:	f3 e0       	ldi	r31, 0x03	; 3
     880:	81 81       	ldd	r24, Z+1	; 0x01
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	98 2f       	mov	r25, r24
     886:	88 27       	eor	r24, r24
     888:	22 81       	ldd	r18, Z+2	; 0x02
     88a:	82 0f       	add	r24, r18
     88c:	91 1d       	adc	r25, r1
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	9c 93       	st	X, r25
     892:	8e 93       	st	-X, r24
     894:	83 81       	ldd	r24, Z+3	; 0x03
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	98 2f       	mov	r25, r24
     89a:	88 27       	eor	r24, r24
     89c:	24 81       	ldd	r18, Z+4	; 0x04
     89e:	82 0f       	add	r24, r18
     8a0:	91 1d       	adc	r25, r1
     8a2:	13 96       	adiw	r26, 0x03	; 3
     8a4:	9c 93       	st	X, r25
     8a6:	8e 93       	st	-X, r24
     8a8:	12 97       	sbiw	r26, 0x02	; 2
     8aa:	85 81       	ldd	r24, Z+5	; 0x05
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	98 2f       	mov	r25, r24
     8b0:	88 27       	eor	r24, r24
     8b2:	26 81       	ldd	r18, Z+6	; 0x06
     8b4:	82 0f       	add	r24, r18
     8b6:	91 1d       	adc	r25, r1
     8b8:	15 96       	adiw	r26, 0x05	; 5
     8ba:	9c 93       	st	X, r25
     8bc:	8e 93       	st	-X, r24
     8be:	14 97       	sbiw	r26, 0x04	; 4
     8c0:	87 81       	ldd	r24, Z+7	; 0x07
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	98 2f       	mov	r25, r24
     8c6:	88 27       	eor	r24, r24
     8c8:	20 85       	ldd	r18, Z+8	; 0x08
     8ca:	82 0f       	add	r24, r18
     8cc:	91 1d       	adc	r25, r1
     8ce:	17 96       	adiw	r26, 0x07	; 7
     8d0:	9c 93       	st	X, r25
     8d2:	8e 93       	st	-X, r24
     8d4:	16 97       	sbiw	r26, 0x06	; 6
     8d6:	08 95       	ret

000008d8 <clearSendData>:
     8d8:	e7 e6       	ldi	r30, 0x67	; 103
     8da:	f3 e0       	ldi	r31, 0x03	; 3
     8dc:	86 e7       	ldi	r24, 0x76	; 118
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	11 92       	st	Z+, r1
     8e2:	e8 17       	cp	r30, r24
     8e4:	f9 07       	cpc	r31, r25
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <clearSendData+0x8>
     8e8:	08 95       	ret

000008ea <clearReceiveData>:
     8ea:	e8 e4       	ldi	r30, 0x48	; 72
     8ec:	f3 e0       	ldi	r31, 0x03	; 3
     8ee:	87 e5       	ldi	r24, 0x57	; 87
     8f0:	93 e0       	ldi	r25, 0x03	; 3
     8f2:	11 92       	st	Z+, r1
     8f4:	e8 17       	cp	r30, r24
     8f6:	f9 07       	cpc	r31, r25
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <clearReceiveData+0x8>
     8fa:	08 95       	ret

000008fc <__vector_39>:
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	0b b6       	in	r0, 0x3b	; 59
     908:	0f 92       	push	r0
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     93a:	80 35       	cpi	r24, 0x50	; 80
     93c:	c1 f0       	breq	.+48     	; 0x96e <__vector_39+0x72>
     93e:	88 35       	cpi	r24, 0x58	; 88
     940:	a9 f1       	breq	.+106    	; 0x9ac <__vector_39+0xb0>
     942:	80 34       	cpi	r24, 0x40	; 64
     944:	09 f0       	breq	.+2      	; 0x948 <__vector_39+0x4c>
     946:	8b c0       	rjmp	.+278    	; 0xa5e <__vector_39+0x162>
     948:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <compassFlag>
     94c:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <compassFlag+0x1>
     950:	89 2b       	or	r24, r25
     952:	21 f0       	breq	.+8      	; 0x95c <__vector_39+0x60>
     954:	85 e8       	ldi	r24, 0x85	; 133
     956:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     95a:	81 c0       	rjmp	.+258    	; 0xa5e <__vector_39+0x162>
     95c:	c6 df       	rcall	.-116    	; 0x8ea <clearReceiveData>
     95e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <bytecounter.2049+0x1>
     962:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <bytecounter.2049>
     966:	85 ec       	ldi	r24, 0xC5	; 197
     968:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     96c:	78 c0       	rjmp	.+240    	; 0xa5e <__vector_39+0x162>
     96e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <bytecounter.2049>
     972:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <bytecounter.2049+0x1>
     976:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     97a:	fc 01       	movw	r30, r24
     97c:	e8 5b       	subi	r30, 0xB8	; 184
     97e:	fc 4f       	sbci	r31, 0xFC	; 252
     980:	20 83       	st	Z, r18
     982:	8d 30       	cpi	r24, 0x0D	; 13
     984:	91 05       	cpc	r25, r1
     986:	4c f4       	brge	.+18     	; 0x99a <__vector_39+0x9e>
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <bytecounter.2049+0x1>
     98e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <bytecounter.2049>
     992:	85 ec       	ldi	r24, 0xC5	; 197
     994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     998:	62 c0       	rjmp	.+196    	; 0xa5e <__vector_39+0x162>
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <bytecounter.2049+0x1>
     9a0:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <bytecounter.2049>
     9a4:	85 e8       	ldi	r24, 0x85	; 133
     9a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9aa:	59 c0       	rjmp	.+178    	; 0xa5e <__vector_39+0x162>
     9ac:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <compassFlag>
     9b0:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <compassFlag+0x1>
     9b4:	89 2b       	or	r24, r25
     9b6:	09 f4       	brne	.+2      	; 0x9ba <__vector_39+0xbe>
     9b8:	45 c0       	rjmp	.+138    	; 0xa44 <__vector_39+0x148>
     9ba:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     9be:	c6 e7       	ldi	r28, 0x76	; 118
     9c0:	d3 e0       	ldi	r29, 0x03	; 3
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	03 e0       	ldi	r16, 0x03	; 3
     9d2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__ashldi3>
     9d6:	a2 2e       	mov	r10, r18
     9d8:	b3 2e       	mov	r11, r19
     9da:	c4 2e       	mov	r12, r20
     9dc:	d5 2e       	mov	r13, r21
     9de:	e6 2e       	mov	r14, r22
     9e0:	f7 2e       	mov	r15, r23
     9e2:	e8 2f       	mov	r30, r24
     9e4:	19 2f       	mov	r17, r25
     9e6:	02 e0       	ldi	r16, 0x02	; 2
     9e8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__ashldi3>
     9ec:	0e 2f       	mov	r16, r30
     9ee:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subdi3>
     9f2:	a2 2e       	mov	r10, r18
     9f4:	b3 2e       	mov	r11, r19
     9f6:	c4 2e       	mov	r12, r20
     9f8:	d5 2e       	mov	r13, r21
     9fa:	e6 2e       	mov	r14, r22
     9fc:	f7 2e       	mov	r15, r23
     9fe:	e8 2f       	mov	r30, r24
     a00:	19 2f       	mov	r17, r25
     a02:	04 e0       	ldi	r16, 0x04	; 4
     a04:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__ashldi3>
     a08:	0e 2f       	mov	r16, r30
     a0a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__subdi3>
     a0e:	aa 24       	eor	r10, r10
     a10:	aa 94       	dec	r10
     a12:	b1 2c       	mov	r11, r1
     a14:	c1 2c       	mov	r12, r1
     a16:	d1 2c       	mov	r13, r1
     a18:	e1 2c       	mov	r14, r1
     a1a:	f1 2c       	mov	r15, r1
     a1c:	00 e0       	ldi	r16, 0x00	; 0
     a1e:	10 e0       	ldi	r17, 0x00	; 0
     a20:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__udivdi3>
     a24:	2e 87       	std	Y+14, r18	; 0x0e
     a26:	3f 87       	std	Y+15, r19	; 0x0f
     a28:	48 8b       	std	Y+16, r20	; 0x10
     a2a:	59 8b       	std	Y+17, r21	; 0x11
     a2c:	6a 8b       	std	Y+18, r22	; 0x12
     a2e:	7b 8b       	std	Y+19, r23	; 0x13
     a30:	8c 8b       	std	Y+20, r24	; 0x14
     a32:	9d 8b       	std	Y+21, r25	; 0x15
     a34:	85 e9       	ldi	r24, 0x95	; 149
     a36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a3a:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <compassFlag+0x1>
     a3e:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <compassFlag>
     a42:	0d c0       	rjmp	.+26     	; 0xa5e <__vector_39+0x162>
     a44:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     a48:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <bytecounter.2049>
     a4c:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <bytecounter.2049+0x1>
     a50:	e8 5b       	subi	r30, 0xB8	; 184
     a52:	fc 4f       	sbci	r31, 0xFC	; 252
     a54:	80 83       	st	Z, r24
     a56:	85 e9       	ldi	r24, 0x95	; 149
     a58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a5c:	0d df       	rcall	.-486    	; 0x878 <arduinoDataInterpreter>
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	bf 91       	pop	r27
     a68:	af 91       	pop	r26
     a6a:	9f 91       	pop	r25
     a6c:	8f 91       	pop	r24
     a6e:	7f 91       	pop	r23
     a70:	6f 91       	pop	r22
     a72:	5f 91       	pop	r21
     a74:	4f 91       	pop	r20
     a76:	3f 91       	pop	r19
     a78:	2f 91       	pop	r18
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	0f 90       	pop	r0
     a8c:	0b be       	out	0x3b, r0	; 59
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <TWIwaitUntilReady>:

void TWIwaitUntilReady(){													//Wait until the TWI hardware has finished its current job
	while (!(TWCR & (1 << TWINT)));
     a98:	ec eb       	ldi	r30, 0xBC	; 188
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	88 23       	and	r24, r24
     aa0:	ec f7       	brge	.-6      	; 0xa9c <TWIwaitUntilReady+0x4>
}
     aa2:	08 95       	ret

00000aa4 <checkCode>:

void checkCode(uint8_t code){												//Check the TWI status register for a certain code, if that code is not present, throw and error
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	cf 5f       	subi	r28, 0xFF	; 255
     aae:	d1 09       	sbc	r29, r1
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
	TWDR = u8data;																//Put the given byte in the register for sending
	TWISendTransmit();															//Transmit the data in the register
}

uint8_t TWIGetStatus(){														//Read the current TWI status code from the register and return it
	return (TWSR & 0xF8);														//Read the status register and mask the prescaler bits. Return the left over variable
     aba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
void TWIwaitUntilReady(){													//Wait until the TWI hardware has finished its current job
	while (!(TWCR & (1 << TWINT)));
}

void checkCode(uint8_t code){												//Check the TWI status register for a certain code, if that code is not present, throw and error
	if (TWIGetStatus() != code){
     abe:	98 7f       	andi	r25, 0xF8	; 248
     ac0:	89 17       	cp	r24, r25
     ac2:	89 f0       	breq	.+34     	; 0xae6 <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     ac4:	8c ee       	ldi	r24, 0xEC	; 236
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	64 d3       	rcall	.+1736   	; 0x1192 <writeString>
	TWDR = u8data;																//Put the given byte in the register for sending
	TWISendTransmit();															//Transmit the data in the register
}

uint8_t TWIGetStatus(){														//Read the current TWI status code from the register and return it
	return (TWSR & 0xF8);														//Read the status register and mask the prescaler bits. Return the left over variable
     aca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ace:	88 7f       	andi	r24, 0xF8	; 248
     ad0:	40 e1       	ldi	r20, 0x10	; 16
     ad2:	be 01       	movw	r22, r28
     ad4:	6f 5f       	subi	r22, 0xFF	; 255
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__itoa_ncheck>

void checkCode(uint8_t code){												//Check the TWI status register for a certain code, if that code is not present, throw and error
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
     ade:	59 d3       	rcall	.+1714   	; 0x1192 <writeString>
		writeString("\n\n\r");
     ae0:	87 e1       	ldi	r24, 0x17	; 23
     ae2:	93 e0       	ldi	r25, 0x03	; 3
     ae4:	56 d3       	rcall	.+1708   	; 0x1192 <writeString>
	}
}
     ae6:	c1 50       	subi	r28, 0x01	; 1
     ae8:	df 4f       	sbci	r29, 0xFF	; 255
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <writeToSlave>:

void writeToSlave(uint8_t address, uint8_t dataByte[]){						//Write an array of data to a TWI slave
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	c8 2f       	mov	r28, r24
     b0e:	8b 01       	movw	r16, r22
	
	TWISendStart();																//First send a start bit, this lets slaves know a transmission is going to start
     b10:	0f 2e       	mov	r0, r31
     b12:	fc eb       	ldi	r31, 0xBC	; 188
     b14:	cf 2e       	mov	r12, r31
     b16:	d1 2c       	mov	r13, r1
     b18:	f0 2d       	mov	r31, r0
     b1a:	85 ea       	ldi	r24, 0xA5	; 165
     b1c:	f6 01       	movw	r30, r12
     b1e:	80 83       	st	Z, r24
	TWIwaitUntilReady();														//Wait until that action is done
     b20:	bb df       	rcall	.-138    	; 0xa98 <TWIwaitUntilReady>
	checkCode(0x08);															//Check the status register for code 0x08 A START condition has been transmitted
     b22:	88 e0       	ldi	r24, 0x08	; 8
     b24:	bf df       	rcall	.-130    	; 0xaa4 <checkCode>
	
	TWIWrite((address << 1));													//Write the address over the line to address a certain slave
     b26:	cc 0f       	add	r28, r28
		receiveDataTWI[i] = 0;
	}
}

void TWIWrite(uint8_t u8data){												//Write data to the TWI data line
	TWDR = u8data;																//Put the given byte in the register for sending
     b28:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();															//Transmit the data in the register
     b2c:	85 e8       	ldi	r24, 0x85	; 133
     b2e:	f6 01       	movw	r30, r12
	TWISendStart();																//First send a start bit, this lets slaves know a transmission is going to start
	TWIwaitUntilReady();														//Wait until that action is done
	checkCode(0x08);															//Check the status register for code 0x08 A START condition has been transmitted
	
	TWIWrite((address << 1));													//Write the address over the line to address a certain slave
	TWIwaitUntilReady();														//wait
     b30:	80 83       	st	Z, r24
	checkCode(0x18);															//0x18 SLA+W has been transmitted; ACK has been received
     b32:	b2 df       	rcall	.-156    	; 0xa98 <TWIwaitUntilReady>
     b34:	88 e1       	ldi	r24, 0x18	; 24
     b36:	b6 df       	rcall	.-148    	; 0xaa4 <checkCode>
     b38:	e8 01       	movw	r28, r16
     b3a:	01 5f       	subi	r16, 0xF1	; 241
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
		receiveDataTWI[i] = 0;
	}
}

void TWIWrite(uint8_t u8data){												//Write data to the TWI data line
	TWDR = u8data;																//Put the given byte in the register for sending
     b3e:	0f 2e       	mov	r0, r31
     b40:	fb eb       	ldi	r31, 0xBB	; 187
     b42:	af 2e       	mov	r10, r31
     b44:	b1 2c       	mov	r11, r1
     b46:	f0 2d       	mov	r31, r0
	TWISendTransmit();															//Transmit the data in the register
     b48:	0f 2e       	mov	r0, r31
     b4a:	f5 e8       	ldi	r31, 0x85	; 133
     b4c:	ff 2e       	mov	r15, r31
     b4e:	f0 2d       	mov	r31, r0
	TWIWrite((address << 1));													//Write the address over the line to address a certain slave
	TWIwaitUntilReady();														//wait
	checkCode(0x18);															//0x18 SLA+W has been transmitted; ACK has been received
	
	for(int i = 0; i < DATASIZE; i++){											//Send all the bytes
		TWIWrite(dataByte[i]);														//Write the byte over the line
     b50:	89 91       	ld	r24, Y+
		receiveDataTWI[i] = 0;
	}
}

void TWIWrite(uint8_t u8data){												//Write data to the TWI data line
	TWDR = u8data;																//Put the given byte in the register for sending
     b52:	f5 01       	movw	r30, r10
	TWISendTransmit();															//Transmit the data in the register
     b54:	80 83       	st	Z, r24
	TWIwaitUntilReady();														//wait
	checkCode(0x18);															//0x18 SLA+W has been transmitted; ACK has been received
	
	for(int i = 0; i < DATASIZE; i++){											//Send all the bytes
		TWIWrite(dataByte[i]);														//Write the byte over the line
		TWIwaitUntilReady();														//wait
     b56:	f6 01       	movw	r30, r12
     b58:	f0 82       	st	Z, r15
		checkCode(0x28);															//0x28 Data byte has been transmitted; ACK has been received
     b5a:	9e df       	rcall	.-196    	; 0xa98 <TWIwaitUntilReady>
     b5c:	88 e2       	ldi	r24, 0x28	; 40
     b5e:	a2 df       	rcall	.-188    	; 0xaa4 <checkCode>
	
	TWIWrite((address << 1));													//Write the address over the line to address a certain slave
	TWIwaitUntilReady();														//wait
	checkCode(0x18);															//0x18 SLA+W has been transmitted; ACK has been received
	
	for(int i = 0; i < DATASIZE; i++){											//Send all the bytes
     b60:	c0 17       	cp	r28, r16
     b62:	d1 07       	cpc	r29, r17
     b64:	a9 f7       	brne	.-22     	; 0xb50 <writeToSlave+0x56>
		TWIWrite(dataByte[i]);														//Write the byte over the line
		TWIwaitUntilReady();														//wait
		checkCode(0x28);															//0x28 Data byte has been transmitted; ACK has been received
	}
	
	TWISendStop();																//Send a stop bit to let the slave know all data has been send
     b66:	85 e9       	ldi	r24, 0x95	; 149
     b68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	08 95       	ret

00000b80 <rp6DataConstructor>:
	arduinoData.actualDriveSpeed = (receiveDataTWI[3] << 8) + receiveDataTWI[4];
	arduinoData.actualLeftMotorSpeed = (receiveDataTWI[5] << 8) + receiveDataTWI[6];
	arduinoData.actualRightMotorSpeed = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
}

void rp6DataConstructor(){													//Constructs an array of data from the struct, to send to the RP6
     b80:	0f 93       	push	r16
     b82:	cf 93       	push	r28
	clearSendData();															//Clear the array before beginning
     b84:	a9 de       	rcall	.-686    	; 0x8d8 <clearSendData>
	
	sendDataTWI[0] = 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     b8c:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <rp6Data>
     b90:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <rp6Data+0x1>
     b94:	85 36       	cpi	r24, 0x65	; 101
     b96:	91 05       	cpc	r25, r1
     b98:	30 f0       	brcs	.+12     	; 0xba6 <rp6DataConstructor+0x26>
     b9a:	84 e6       	ldi	r24, 0x64	; 100
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <rp6Data+0x1>
     ba2:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     ba6:	a7 e6       	ldi	r26, 0x67	; 103
     ba8:	b3 e0       	ldi	r27, 0x03	; 3
     baa:	e6 e7       	ldi	r30, 0x76	; 118
     bac:	f3 e0       	ldi	r31, 0x03	; 3
     bae:	80 81       	ld	r24, Z
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	8c 93       	st	X, r24
     bb4:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
     bba:	12 96       	adiw	r26, 0x02	; 2
     bbc:	8c 93       	st	X, r24
     bbe:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     bc0:	83 81       	ldd	r24, Z+3	; 0x03
     bc2:	8f 5f       	subi	r24, 0xFF	; 255
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	8c 93       	st	X, r24
     bc8:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     bca:	84 81       	ldd	r24, Z+4	; 0x04
     bcc:	95 81       	ldd	r25, Z+5	; 0x05
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	9c 93       	st	X, r25
     bd2:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     bd4:	15 96       	adiw	r26, 0x05	; 5
     bd6:	8c 93       	st	X, r24
     bd8:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     bda:	86 81       	ldd	r24, Z+6	; 0x06
     bdc:	97 81       	ldd	r25, Z+7	; 0x07
     bde:	16 96       	adiw	r26, 0x06	; 6
     be0:	9c 93       	st	X, r25
     be2:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     be4:	17 96       	adiw	r26, 0x07	; 7
     be6:	8c 93       	st	X, r24
     be8:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     bea:	80 85       	ldd	r24, Z+8	; 0x08
     bec:	91 85       	ldd	r25, Z+9	; 0x09
     bee:	18 96       	adiw	r26, 0x08	; 8
     bf0:	9c 93       	st	X, r25
     bf2:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     bf4:	19 96       	adiw	r26, 0x09	; 9
     bf6:	8c 93       	st	X, r24
     bf8:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     bfa:	82 85       	ldd	r24, Z+10	; 0x0a
     bfc:	93 85       	ldd	r25, Z+11	; 0x0b
     bfe:	1a 96       	adiw	r26, 0x0a	; 10
     c00:	9c 93       	st	X, r25
     c02:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     c04:	1b 96       	adiw	r26, 0x0b	; 11
     c06:	8c 93       	st	X, r24
     c08:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = (rp6Data.compassAngle >> 8);
     c0a:	c6 85       	ldd	r28, Z+14	; 0x0e
     c0c:	37 85       	ldd	r19, Z+15	; 0x0f
     c0e:	40 89       	ldd	r20, Z+16	; 0x10
     c10:	51 89       	ldd	r21, Z+17	; 0x11
     c12:	62 89       	ldd	r22, Z+18	; 0x12
     c14:	73 89       	ldd	r23, Z+19	; 0x13
     c16:	2c 2f       	mov	r18, r28
     c18:	84 89       	ldd	r24, Z+20	; 0x14
     c1a:	95 89       	ldd	r25, Z+21	; 0x15
     c1c:	08 e0       	ldi	r16, 0x08	; 8
     c1e:	84 d7       	rcall	.+3848   	; 0x1b28 <__ashrdi3>
     c20:	1c 96       	adiw	r26, 0x0c	; 12
     c22:	2c 93       	st	X, r18
     c24:	1c 97       	sbiw	r26, 0x0c	; 12
	sendDataTWI[13] = rp6Data.compassAngle;
     c26:	1d 96       	adiw	r26, 0x0d	; 13
     c28:	cc 93       	st	X, r28
     c2a:	1d 97       	sbiw	r26, 0x0d	; 13
	
	for(int i = 14; i < DATASIZE; i++){											//Fill the left over bytes in the array with 0
		sendDataTWI[i] = 0;
     c2c:	1e 96       	adiw	r26, 0x0e	; 14
     c2e:	1c 92       	st	X, r1
     c30:	1e 97       	sbiw	r26, 0x0e	; 14
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     c32:	bd 01       	movw	r22, r26
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	61 df       	rcall	.-318    	; 0xafa <writeToSlave>
}
     c38:	cf 91       	pop	r28
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <readFromSlave>:
	
	TWISendStop();																//Send a stop bit to let the slave know all data has been send
	
}

void readFromSlave(uint8_t address){										//Read data from a TWI slave
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	c8 2f       	mov	r28, r24
	
	TWISendStart();																//Send a start bit
     c46:	0c eb       	ldi	r16, 0xBC	; 188
     c48:	10 e0       	ldi	r17, 0x00	; 0
     c4a:	85 ea       	ldi	r24, 0xA5	; 165
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 83       	st	Z, r24
	TWIwaitUntilReady();														//Wait
     c50:	23 df       	rcall	.-442    	; 0xa98 <TWIwaitUntilReady>
	checkCode(0x08);															//0x08 A START condition has been transmitted
     c52:	88 e0       	ldi	r24, 0x08	; 8
     c54:	27 df       	rcall	.-434    	; 0xaa4 <checkCode>
	
	TWIWrite( (address << 1) + 1 );												//Send the address and a 1 to let the slave know he needs to send data
     c56:	cc 0f       	add	r28, r28
     c58:	cf 5f       	subi	r28, 0xFF	; 255
		receiveDataTWI[i] = 0;
	}
}

void TWIWrite(uint8_t u8data){												//Write data to the TWI data line
	TWDR = u8data;																//Put the given byte in the register for sending
     c5a:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();															//Transmit the data in the register
     c5e:	85 e8       	ldi	r24, 0x85	; 133
     c60:	f8 01       	movw	r30, r16
	TWISendStart();																//Send a start bit
	TWIwaitUntilReady();														//Wait
	checkCode(0x08);															//0x08 A START condition has been transmitted
	
	TWIWrite( (address << 1) + 1 );												//Send the address and a 1 to let the slave know he needs to send data
	TWIwaitUntilReady();														//Wait
     c62:	80 83       	st	Z, r24
     c64:	19 df       	rcall	.-462    	; 0xa98 <TWIwaitUntilReady>
																				//The rest of the function is handled by the ISR
}
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <readFromCompass>:

void readFromCompass(){														//Read data from the compass
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
	
	compassFlag = 1;															//Set the compass flag to 1 so the ISR handles the data correctly
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <compassFlag+0x1>
     c82:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <compassFlag>
	
	TWISendStart();																//Start transmission
     c86:	cc eb       	ldi	r28, 0xBC	; 188
     c88:	d0 e0       	ldi	r29, 0x00	; 0
     c8a:	05 ea       	ldi	r16, 0xA5	; 165
     c8c:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     c8e:	04 df       	rcall	.-504    	; 0xa98 <TWIwaitUntilReady>
	checkCode(0x08);															//0x08 A START condition has been transmitted
     c90:	88 e0       	ldi	r24, 0x08	; 8
     c92:	08 df       	rcall	.-496    	; 0xaa4 <checkCode>
		receiveDataTWI[i] = 0;
	}
}

void TWIWrite(uint8_t u8data){												//Write data to the TWI data line
	TWDR = u8data;																//Put the given byte in the register for sending
     c94:	0f 2e       	mov	r0, r31
     c96:	fb eb       	ldi	r31, 0xBB	; 187
     c98:	ef 2e       	mov	r14, r31
     c9a:	f1 2c       	mov	r15, r1
     c9c:	f0 2d       	mov	r31, r0
     c9e:	80 ec       	ldi	r24, 0xC0	; 192
     ca0:	f7 01       	movw	r30, r14
     ca2:	80 83       	st	Z, r24
	TWISendTransmit();															//Transmit the data in the register
     ca4:	15 e8       	ldi	r17, 0x85	; 133
	TWISendStart();																//Start transmission
	TWIwaitUntilReady();
	checkCode(0x08);															//0x08 A START condition has been transmitted
	
	TWIWrite(0xC0);																//Write the address with write command
	TWIwaitUntilReady();
     ca6:	18 83       	st	Y, r17
	checkCode(0x18);															//0x18 SLA+W has been transmitted; ACK has been received
     ca8:	f7 de       	rcall	.-530    	; 0xa98 <TWIwaitUntilReady>
     caa:	88 e1       	ldi	r24, 0x18	; 24
     cac:	fb de       	rcall	.-522    	; 0xaa4 <checkCode>
		receiveDataTWI[i] = 0;
	}
}

void TWIWrite(uint8_t u8data){												//Write data to the TWI data line
	TWDR = u8data;																//Put the given byte in the register for sending
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	f7 01       	movw	r30, r14
	TWISendTransmit();															//Transmit the data in the register
     cb2:	80 83       	st	Z, r24
	TWIWrite(0xC0);																//Write the address with write command
	TWIwaitUntilReady();
	checkCode(0x18);															//0x18 SLA+W has been transmitted; ACK has been received
	
	TWIWrite(1);																//Write a 1 to the compass setting it to return only 1 byte
	TWIwaitUntilReady();
     cb4:	18 83       	st	Y, r17
	checkCode(0x28);															//0x28 Data byte has been transmitted; ACK has been received
     cb6:	f0 de       	rcall	.-544    	; 0xa98 <TWIwaitUntilReady>
     cb8:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();																//Send repeated start bit
     cba:	f4 de       	rcall	.-536    	; 0xaa4 <checkCode>
	TWIwaitUntilReady();
     cbc:	08 83       	st	Y, r16
	checkCode(0x10);															//0x10 A repeated START condition has been transmitted
     cbe:	ec de       	rcall	.-552    	; 0xa98 <TWIwaitUntilReady>
     cc0:	80 e1       	ldi	r24, 0x10	; 16
     cc2:	f0 de       	rcall	.-544    	; 0xaa4 <checkCode>
		receiveDataTWI[i] = 0;
	}
}

void TWIWrite(uint8_t u8data){												//Write data to the TWI data line
	TWDR = u8data;																//Put the given byte in the register for sending
     cc4:	81 ec       	ldi	r24, 0xC1	; 193
     cc6:	f7 01       	movw	r30, r14
     cc8:	80 83       	st	Z, r24
	TWISendTransmit();															//Transmit the data in the register
     cca:	18 83       	st	Y, r17
	TWISendStart();																//Send repeated start bit
	TWIwaitUntilReady();
	checkCode(0x10);															//0x10 A repeated START condition has been transmitted
	
	TWIWrite(0xC1);																//Write the address with a read command, triggering the compass to send its data
	TWIwaitUntilReady();
     ccc:	e5 de       	rcall	.-566    	; 0xa98 <TWIwaitUntilReady>
     cce:	df 91       	pop	r29
																				//The rest of the function is handled by the ISR
}
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <__vector_15>:
     cdc:	1f 92       	push	r1
		}
		break;
	}
}

ISR(TIMER2_OVF_vect){														//ISR for the overflow of the synchronize timer
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	0b b6       	in	r0, 0x3b	; 59
     ce8:	0f 92       	push	r0
     cea:	2f 93       	push	r18
     cec:	3f 93       	push	r19
     cee:	4f 93       	push	r20
     cf0:	5f 93       	push	r21
     cf2:	6f 93       	push	r22
     cf4:	7f 93       	push	r23
     cf6:	8f 93       	push	r24
     cf8:	9f 93       	push	r25
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
	static int counter = 0;														//Keep track of how many time the overflow interrupt has happened
	
	if(counter == 3){															//If the counter is 3
     d02:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <counter.2060>
     d06:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <counter.2060+0x1>
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	11 f4       	brne	.+4      	; 0xd14 <__vector_15+0x38>
		rp6DataConstructor();														//Construct the RP6 data in the array and send it
     d10:	37 df       	rcall	.-402    	; 0xb80 <rp6DataConstructor>
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__vector_15+0x5c>
	}else if(counter == 6){														//If the counter is 6
     d14:	86 30       	cpi	r24, 0x06	; 6
     d16:	91 05       	cpc	r25, r1
		readFromCompass();															//Read the current compass angle from the compass
     d18:	11 f4       	brne	.+4      	; 0xd1e <__vector_15+0x42>
     d1a:	a9 df       	rcall	.-174    	; 0xc6e <readFromCompass>
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <__vector_15+0x5c>
	}else if(counter == 9){														//If the counter is 9
     d1e:	89 30       	cpi	r24, 0x09	; 9
     d20:	91 05       	cpc	r25, r1
		readFromSlave(RP6_ADDRESS);													//Read the Arduino data from the RP6
     d22:	19 f4       	brne	.+6      	; 0xd2a <__vector_15+0x4e>
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8b df       	rcall	.-234    	; 0xc3e <readFromSlave>
	}else if(counter >= 12){													//If the counter is 12 or more
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <__vector_15+0x5c>
     d2a:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromCompass();															//Read from the compass again
     d2c:	2c f0       	brlt	.+10     	; 0xd38 <__vector_15+0x5c>
     d2e:	9f df       	rcall	.-194    	; 0xc6e <readFromCompass>
		counter = 0;																//Reset the counter to start over again
     d30:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <counter.2060+0x1>
     d34:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <counter.2060>
	}
	
	counter++;																	//Add 1 to the counter
     d38:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <counter.2060>
     d3c:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <counter.2060+0x1>
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <counter.2060+0x1>
     d46:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <counter.2060>
}
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0b be       	out	0x3b, r0	; 59
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <turnSignal>:
	TWIwaitUntilReady();
																				//The rest of the function is handled by the ISR
}

//Blinkers
void turnSignal(){
     d70:	4f 92       	push	r4
     d72:	5f 92       	push	r5
     d74:	6f 92       	push	r6
     d76:	7f 92       	push	r7
     d78:	8f 92       	push	r8
     d7a:	9f 92       	push	r9
     d7c:	af 92       	push	r10
     d7e:	bf 92       	push	r11
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
     d8c:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     d8e:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     d90:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <rp6Data+0x3>
     d94:	8f 3f       	cpi	r24, 0xFF	; 255
     d96:	c1 f5       	brne	.+112    	; 0xe08 <turnSignal+0x98>
		if(turnSignalStart < micros()){
     d98:	40 90 20 03 	lds	r4, 0x0320	; 0x800320 <turnSignalStart.2111>
     d9c:	50 90 21 03 	lds	r5, 0x0321	; 0x800321 <turnSignalStart.2111+0x1>
     da0:	60 90 22 03 	lds	r6, 0x0322	; 0x800322 <turnSignalStart.2111+0x2>
     da4:	70 90 23 03 	lds	r7, 0x0323	; 0x800323 <turnSignalStart.2111+0x3>
     da8:	77 da       	rcall	.-2834   	; 0x298 <micros>
     daa:	f2 2f       	mov	r31, r18
     dac:	e3 2f       	mov	r30, r19
     dae:	c4 2e       	mov	r12, r20
     db0:	d5 2e       	mov	r13, r21
     db2:	e6 2e       	mov	r14, r22
     db4:	f7 2e       	mov	r15, r23
     db6:	08 2f       	mov	r16, r24
     db8:	19 2f       	mov	r17, r25
     dba:	24 2d       	mov	r18, r4
     dbc:	35 2d       	mov	r19, r5
     dbe:	46 2d       	mov	r20, r6
     dc0:	57 2d       	mov	r21, r7
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	af 2e       	mov	r10, r31
     dcc:	be 2e       	mov	r11, r30
     dce:	e8 d6       	rcall	.+3536   	; 0x1ba0 <__cmpdi2>
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <turnSignal+0x64>
     dd2:	54 c0       	rjmp	.+168    	; 0xe7c <turnSignal+0x10c>
			PORTC ^= (1 << PINC1);	
     dd4:	98 b1       	in	r25, 0x08	; 8
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	89 27       	eor	r24, r25
			PORTD &= ~(1 << PIND7);
     dda:	88 b9       	out	0x08, r24	; 8
			turnSignalStart = micros() + turnSignalDelay;
     ddc:	5f 98       	cbi	0x0b, 7	; 11
     dde:	5c da       	rcall	.-2888   	; 0x298 <micros>
     de0:	82 2e       	mov	r8, r18
     de2:	93 2e       	mov	r9, r19
     de4:	a4 2e       	mov	r10, r20
     de6:	b5 2e       	mov	r11, r21
     de8:	80 e2       	ldi	r24, 0x20	; 32
     dea:	88 0e       	add	r8, r24
     dec:	81 ea       	ldi	r24, 0xA1	; 161
     dee:	98 1e       	adc	r9, r24
     df0:	87 e0       	ldi	r24, 0x07	; 7
     df2:	a8 1e       	adc	r10, r24
     df4:	b1 1c       	adc	r11, r1
     df6:	80 92 20 03 	sts	0x0320, r8	; 0x800320 <turnSignalStart.2111>
     dfa:	90 92 21 03 	sts	0x0321, r9	; 0x800321 <turnSignalStart.2111+0x1>
     dfe:	a0 92 22 03 	sts	0x0322, r10	; 0x800322 <turnSignalStart.2111+0x2>
     e02:	b0 92 23 03 	sts	0x0323, r11	; 0x800323 <turnSignalStart.2111+0x3>
     e06:	3a c0       	rjmp	.+116    	; 0xe7c <turnSignal+0x10c>
		}
	}else if(rp6Data.turnDirection == 1){
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	b1 f5       	brne	.+108    	; 0xe78 <turnSignal+0x108>
		if(turnSignalStart < micros()){
     e0c:	40 90 20 03 	lds	r4, 0x0320	; 0x800320 <turnSignalStart.2111>
     e10:	50 90 21 03 	lds	r5, 0x0321	; 0x800321 <turnSignalStart.2111+0x1>
     e14:	60 90 22 03 	lds	r6, 0x0322	; 0x800322 <turnSignalStart.2111+0x2>
     e18:	70 90 23 03 	lds	r7, 0x0323	; 0x800323 <turnSignalStart.2111+0x3>
     e1c:	3d da       	rcall	.-2950   	; 0x298 <micros>
     e1e:	f2 2f       	mov	r31, r18
     e20:	e3 2f       	mov	r30, r19
     e22:	c4 2e       	mov	r12, r20
     e24:	d5 2e       	mov	r13, r21
     e26:	e6 2e       	mov	r14, r22
     e28:	f7 2e       	mov	r15, r23
     e2a:	08 2f       	mov	r16, r24
     e2c:	19 2f       	mov	r17, r25
     e2e:	24 2d       	mov	r18, r4
     e30:	35 2d       	mov	r19, r5
     e32:	46 2d       	mov	r20, r6
     e34:	57 2d       	mov	r21, r7
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	af 2e       	mov	r10, r31
     e40:	be 2e       	mov	r11, r30
     e42:	ae d6       	rcall	.+3420   	; 0x1ba0 <__cmpdi2>
     e44:	d8 f4       	brcc	.+54     	; 0xe7c <turnSignal+0x10c>
			PORTC &= ~(1 << PINC1);
     e46:	41 98       	cbi	0x08, 1	; 8
			PORTD ^= (1 << PIND7);
     e48:	8b b1       	in	r24, 0x0b	; 11
     e4a:	80 58       	subi	r24, 0x80	; 128
     e4c:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     e4e:	24 da       	rcall	.-3000   	; 0x298 <micros>
     e50:	82 2e       	mov	r8, r18
     e52:	93 2e       	mov	r9, r19
     e54:	a4 2e       	mov	r10, r20
     e56:	b5 2e       	mov	r11, r21
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	88 0e       	add	r8, r24
     e5c:	81 ea       	ldi	r24, 0xA1	; 161
     e5e:	98 1e       	adc	r9, r24
     e60:	87 e0       	ldi	r24, 0x07	; 7
     e62:	a8 1e       	adc	r10, r24
     e64:	b1 1c       	adc	r11, r1
     e66:	80 92 20 03 	sts	0x0320, r8	; 0x800320 <turnSignalStart.2111>
     e6a:	90 92 21 03 	sts	0x0321, r9	; 0x800321 <turnSignalStart.2111+0x1>
     e6e:	a0 92 22 03 	sts	0x0322, r10	; 0x800322 <turnSignalStart.2111+0x2>
     e72:	b0 92 23 03 	sts	0x0323, r11	; 0x800323 <turnSignalStart.2111+0x3>
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <turnSignal+0x10c>
     e78:	41 98       	cbi	0x08, 1	; 8
		}
	}else{
		PORTC &= ~(1 << PINC1);
     e7a:	5f 98       	cbi	0x0b, 7	; 11
		PORTD &= ~(1 << PIND7);
     e7c:	1f 91       	pop	r17
	}
}
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
     e8c:	9f 90       	pop	r9
     e8e:	8f 90       	pop	r8
     e90:	7f 90       	pop	r7
     e92:	6f 90       	pop	r6
     e94:	5f 90       	pop	r5
     e96:	4f 90       	pop	r4
     e98:	08 95       	ret

00000e9a <checkUltrasonic>:
     e9a:	4f 92       	push	r4

//Ultrasonic
void checkUltrasonic(){
     e9c:	5f 92       	push	r5
     e9e:	6f 92       	push	r6
     ea0:	7f 92       	push	r7
     ea2:	8f 92       	push	r8
     ea4:	9f 92       	push	r9
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
	if(ultrasonicTimer < micros()){																					//Triggers only when enough time has passed, as set in backBeepTimer
     eb6:	40 90 40 03 	lds	r4, 0x0340	; 0x800340 <ultrasonicTimer>
     eba:	50 90 41 03 	lds	r5, 0x0341	; 0x800341 <ultrasonicTimer+0x1>
     ebe:	60 90 42 03 	lds	r6, 0x0342	; 0x800342 <ultrasonicTimer+0x2>
     ec2:	70 90 43 03 	lds	r7, 0x0343	; 0x800343 <ultrasonicTimer+0x3>
     ec6:	e8 d9       	rcall	.-3120   	; 0x298 <micros>
     ec8:	f2 2f       	mov	r31, r18
     eca:	e3 2f       	mov	r30, r19
     ecc:	c4 2e       	mov	r12, r20
     ece:	d5 2e       	mov	r13, r21
     ed0:	e6 2e       	mov	r14, r22
     ed2:	f7 2e       	mov	r15, r23
     ed4:	08 2f       	mov	r16, r24
     ed6:	19 2f       	mov	r17, r25
     ed8:	24 2d       	mov	r18, r4
     eda:	35 2d       	mov	r19, r5
     edc:	46 2d       	mov	r20, r6
     ede:	57 2d       	mov	r21, r7
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	af 2e       	mov	r10, r31
     eea:	be 2e       	mov	r11, r30
     eec:	59 d6       	rcall	.+3250   	; 0x1ba0 <__cmpdi2>
     eee:	08 f0       	brcs	.+2      	; 0xef2 <checkUltrasonic+0x58>
     ef0:	9f c0       	rjmp	.+318    	; 0x1030 <checkUltrasonic+0x196>
		
		uint16_t distance = ultrasonicSensor();																		//Stores the current distance to an object according to ultrasonicSensor()
     ef2:	9a d1       	rcall	.+820    	; 0x1228 <ultrasonicSensor>
     ef4:	81 39       	cpi	r24, 0x91	; 145
		static int stopState = 0;																					
		static uint16_t tempAcceleration;
		
		if(distance > 400 && stopState == 1){
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	92 07       	cpc	r25, r18
     efa:	80 f0       	brcs	.+32     	; 0xf1c <checkUltrasonic+0x82>
     efc:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <stopState.2115>
     f00:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <stopState.2115+0x1>
     f04:	21 30       	cpi	r18, 0x01	; 1
     f06:	31 05       	cpc	r19, r1
     f08:	49 f4       	brne	.+18     	; 0xf1c <checkUltrasonic+0x82>
     f0a:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <__data_end>
			rp6Data.accelerationRate = tempAcceleration;
     f0e:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <__data_end+0x1>
     f12:	30 93 7b 03 	sts	0x037B, r19	; 0x80037b <rp6Data+0x5>
     f16:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <rp6Data+0x4>
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <checkUltrasonic+0xa0>
     f1c:	8d 32       	cpi	r24, 0x2D	; 45
		}else if(distance > 300 && stopState == 2){
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	92 07       	cpc	r25, r18
     f22:	58 f0       	brcs	.+22     	; 0xf3a <checkUltrasonic+0xa0>
     f24:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <stopState.2115>
     f28:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <stopState.2115+0x1>
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	21 f4       	brne	.+8      	; 0xf3a <checkUltrasonic+0xa0>
     f32:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <stopState.2115+0x1>
			stopState = 0;
     f36:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <stopState.2115>
     f3a:	9c 01       	movw	r18, r24
		}
		
		if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
     f3c:	2d 52       	subi	r18, 0x2D	; 45
     f3e:	31 40       	sbci	r19, 0x01	; 1
     f40:	23 36       	cpi	r18, 0x63	; 99
     f42:	31 05       	cpc	r19, r1
     f44:	90 f4       	brcc	.+36     	; 0xf6a <checkUltrasonic+0xd0>
     f46:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <rp6Data>
     f4a:	30 91 77 03 	lds	r19, 0x0377	; 0x800377 <rp6Data+0x1>
     f4e:	29 32       	cpi	r18, 0x29	; 41
     f50:	31 05       	cpc	r19, r1
     f52:	58 f0       	brcs	.+22     	; 0xf6a <checkUltrasonic+0xd0>
     f54:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <rp6Data+0x2>
     f58:	21 30       	cpi	r18, 0x01	; 1
     f5a:	39 f4       	brne	.+14     	; 0xf6a <checkUltrasonic+0xd0>
     f5c:	88 e2       	ldi	r24, 0x28	; 40
			rp6Data.driveSpeed = 40;
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <rp6Data+0x1>
     f64:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <rp6Data>
     f68:	4a c0       	rjmp	.+148    	; 0xffe <checkUltrasonic+0x164>
     f6a:	9c 01       	movw	r18, r24
		}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
     f6c:	26 55       	subi	r18, 0x56	; 86
     f6e:	31 09       	sbc	r19, r1
     f70:	26 3d       	cpi	r18, 0xD6	; 214
     f72:	31 05       	cpc	r19, r1
     f74:	90 f4       	brcc	.+36     	; 0xf9a <checkUltrasonic+0x100>
     f76:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <rp6Data>
     f7a:	30 91 77 03 	lds	r19, 0x0377	; 0x800377 <rp6Data+0x1>
     f7e:	2a 31       	cpi	r18, 0x1A	; 26
     f80:	31 05       	cpc	r19, r1
     f82:	58 f0       	brcs	.+22     	; 0xf9a <checkUltrasonic+0x100>
     f84:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <rp6Data+0x2>
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	c9 f5       	brne	.+114    	; 0xffe <checkUltrasonic+0x164>
     f8c:	89 e1       	ldi	r24, 0x19	; 25
			rp6Data.driveSpeed = 25;
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <rp6Data+0x1>
     f94:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <rp6Data>
     f98:	32 c0       	rjmp	.+100    	; 0xffe <checkUltrasonic+0x164>
     f9a:	85 35       	cpi	r24, 0x55	; 85
		}else if(distance < 85 && rp6Data.driveDirection == 1){
     f9c:	91 05       	cpc	r25, r1
     f9e:	78 f5       	brcc	.+94     	; 0xffe <checkUltrasonic+0x164>
     fa0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <rp6Data+0x2>
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	59 f5       	brne	.+86     	; 0xffe <checkUltrasonic+0x164>
     fa8:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <stopState.2115>
			if(stopState == 0){
     fac:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <stopState.2115+0x1>
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	a9 f4       	brne	.+42     	; 0xfde <checkUltrasonic+0x144>
     fb4:	e6 e7       	ldi	r30, 0x76	; 118
				tempAcceleration = rp6Data.accelerationRate;
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	84 81       	ldd	r24, Z+4	; 0x04
     fba:	95 81       	ldd	r25, Z+5	; 0x05
     fbc:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <__data_end+0x1>
     fc0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <__data_end>
     fc4:	88 e8       	ldi	r24, 0x88	; 136
				rp6Data.accelerationRate = 5000;
     fc6:	93 e1       	ldi	r25, 0x13	; 19
     fc8:	95 83       	std	Z+5, r25	; 0x05
     fca:	84 83       	std	Z+4, r24	; 0x04
     fcc:	11 82       	std	Z+1, r1	; 0x01
				rp6Data.driveSpeed = 0;
     fce:	10 82       	st	Z, r1
     fd0:	81 e0       	ldi	r24, 0x01	; 1
				stopState = 1;
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <stopState.2115+0x1>
     fd8:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <stopState.2115>
     fdc:	10 c0       	rjmp	.+32     	; 0xffe <checkUltrasonic+0x164>
     fde:	01 97       	sbiw	r24, 0x01	; 1
			}else if(stopState == 1){
     fe0:	71 f4       	brne	.+28     	; 0xffe <checkUltrasonic+0x164>
     fe2:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__data_end>
				rp6Data.accelerationRate = tempAcceleration;
     fe6:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <__data_end+0x1>
     fea:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <rp6Data+0x5>
     fee:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <rp6Data+0x4>
     ff2:	82 e0       	ldi	r24, 0x02	; 2
				stopState = 2;
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <stopState.2115+0x1>
     ffa:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <stopState.2115>
			}
		}
		
		ultrasonicTimer = micros() + ultrasonicTimerSpeed;
     ffe:	4c d9       	rcall	.-3432   	; 0x298 <micros>
    1000:	82 2e       	mov	r8, r18
    1002:	93 2e       	mov	r9, r19
    1004:	a4 2e       	mov	r10, r20
    1006:	b5 2e       	mov	r11, r21
    1008:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ultrasonicTimerSpeed>
    100c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ultrasonicTimerSpeed+0x1>
    1010:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ultrasonicTimerSpeed+0x2>
    1014:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ultrasonicTimerSpeed+0x3>
    1018:	88 0e       	add	r8, r24
    101a:	99 1e       	adc	r9, r25
    101c:	aa 1e       	adc	r10, r26
    101e:	bb 1e       	adc	r11, r27
    1020:	80 92 40 03 	sts	0x0340, r8	; 0x800340 <ultrasonicTimer>
    1024:	90 92 41 03 	sts	0x0341, r9	; 0x800341 <ultrasonicTimer+0x1>
    1028:	a0 92 42 03 	sts	0x0342, r10	; 0x800342 <ultrasonicTimer+0x2>
    102c:	b0 92 43 03 	sts	0x0343, r11	; 0x800343 <ultrasonicTimer+0x3>
    1030:	1f 91       	pop	r17
	}
}
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	bf 90       	pop	r11
    103e:	af 90       	pop	r10
    1040:	9f 90       	pop	r9
    1042:	8f 90       	pop	r8
    1044:	7f 90       	pop	r7
    1046:	6f 90       	pop	r6
    1048:	5f 90       	pop	r5
    104a:	4f 90       	pop	r4
    104c:	08 95       	ret

0000104e <beeper>:
    104e:	4f 92       	push	r4

//Beeper
void beeper(){
    1050:	5f 92       	push	r5
    1052:	6f 92       	push	r6
    1054:	7f 92       	push	r7
    1056:	8f 92       	push	r8
    1058:	9f 92       	push	r9
    105a:	af 92       	push	r10
    105c:	bf 92       	push	r11
    105e:	cf 92       	push	r12
    1060:	df 92       	push	r13
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
	if (backBeepTimer < micros()) {																		//Triggers only when enough time has passed, as set in backBeepTimer
    106a:	40 90 3c 03 	lds	r4, 0x033C	; 0x80033c <backBeepTimer>
    106e:	50 90 3d 03 	lds	r5, 0x033D	; 0x80033d <backBeepTimer+0x1>
    1072:	60 90 3e 03 	lds	r6, 0x033E	; 0x80033e <backBeepTimer+0x2>
    1076:	70 90 3f 03 	lds	r7, 0x033F	; 0x80033f <backBeepTimer+0x3>
    107a:	0e d9       	rcall	.-3556   	; 0x298 <micros>
    107c:	f2 2f       	mov	r31, r18
    107e:	e3 2f       	mov	r30, r19
    1080:	c4 2e       	mov	r12, r20
    1082:	d5 2e       	mov	r13, r21
    1084:	e6 2e       	mov	r14, r22
    1086:	f7 2e       	mov	r15, r23
    1088:	08 2f       	mov	r16, r24
    108a:	19 2f       	mov	r17, r25
    108c:	24 2d       	mov	r18, r4
    108e:	35 2d       	mov	r19, r5
    1090:	46 2d       	mov	r20, r6
    1092:	57 2d       	mov	r21, r7
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	af 2e       	mov	r10, r31
    109e:	be 2e       	mov	r11, r30
    10a0:	7f d5       	rcall	.+2814   	; 0x1ba0 <__cmpdi2>
    10a2:	48 f5       	brcc	.+82     	; 0x10f6 <beeper+0xa8>
		if ((rp6Data.driveDirection == -1 && rp6Data.driveSpeed > 20)  || arduinoData.bumperFlag) {		//The beeper is enabled when the RP6 is driving backwards. If speed is under 20, the RP6 doesn't move, so the beeper is disabled.
    10a4:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <rp6Data+0x2>
    10a8:	8f 3f       	cpi	r24, 0xFF	; 255
    10aa:	a9 f5       	brne	.+106    	; 0x1116 <beeper+0xc8>
    10ac:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <rp6Data>
    10b0:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <rp6Data+0x1>
    10b4:	45 97       	sbiw	r24, 0x15	; 21
    10b6:	b0 f1       	brcs	.+108    	; 0x1124 <beeper+0xd6>
			DDRH ^= (1 << BEEPER);
    10b8:	e1 e0       	ldi	r30, 0x01	; 1
    10ba:	f1 e0       	ldi	r31, 0x01	; 1
    10bc:	90 81       	ld	r25, Z
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	89 27       	eor	r24, r25
			backBeepTimer = micros() + backBeepSpeed;													//Update backBeepTimer to ensure the correct timing of the beeping
    10c2:	80 83       	st	Z, r24
    10c4:	e9 d8       	rcall	.-3630   	; 0x298 <micros>
    10c6:	82 2e       	mov	r8, r18
    10c8:	93 2e       	mov	r9, r19
    10ca:	a4 2e       	mov	r10, r20
    10cc:	b5 2e       	mov	r11, r21
    10ce:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <backBeepSpeed>
    10d2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <backBeepSpeed+0x1>
    10d6:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <backBeepSpeed+0x2>
    10da:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <backBeepSpeed+0x3>
    10de:	88 0e       	add	r8, r24
    10e0:	99 1e       	adc	r9, r25
    10e2:	aa 1e       	adc	r10, r26
    10e4:	bb 1e       	adc	r11, r27
    10e6:	80 92 3c 03 	sts	0x033C, r8	; 0x80033c <backBeepTimer>
    10ea:	90 92 3d 03 	sts	0x033D, r9	; 0x80033d <backBeepTimer+0x1>
    10ee:	a0 92 3e 03 	sts	0x033E, r10	; 0x80033e <backBeepTimer+0x2>
    10f2:	b0 92 3f 03 	sts	0x033F, r11	; 0x80033f <backBeepTimer+0x3>
		}
	}
	
	if (rp6Data.driveDirection != -1 && !arduinoData.bumperFlag) {										//Turn off the beeper when not driving backwards
    10f6:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <rp6Data+0x2>
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	c9 f0       	breq	.+50     	; 0x1130 <beeper+0xe2>
    10fe:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <arduinoData>
    1102:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <arduinoData+0x1>
    1106:	89 2b       	or	r24, r25
    1108:	99 f4       	brne	.+38     	; 0x1130 <beeper+0xe2>
		DDRH &= ~(1 << BEEPER);
    110a:	e1 e0       	ldi	r30, 0x01	; 1
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	80 81       	ld	r24, Z
    1110:	87 7f       	andi	r24, 0xF7	; 247
    1112:	80 83       	st	Z, r24
	}
}
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <beeper+0xe2>
}

//Beeper
void beeper(){
	if (backBeepTimer < micros()) {																		//Triggers only when enough time has passed, as set in backBeepTimer
		if ((rp6Data.driveDirection == -1 && rp6Data.driveSpeed > 20)  || arduinoData.bumperFlag) {		//The beeper is enabled when the RP6 is driving backwards. If speed is under 20, the RP6 doesn't move, so the beeper is disabled.
    1116:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <arduinoData>
    111a:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <arduinoData+0x1>
    111e:	89 2b       	or	r24, r25
    1120:	59 f6       	brne	.-106    	; 0x10b8 <beeper+0x6a>
    1122:	f3 cf       	rjmp	.-26     	; 0x110a <beeper+0xbc>
    1124:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <arduinoData>
    1128:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <arduinoData+0x1>
    112c:	89 2b       	or	r24, r25
    112e:	21 f6       	brne	.-120    	; 0x10b8 <beeper+0x6a>
	}
	
	if (rp6Data.driveDirection != -1 && !arduinoData.bumperFlag) {										//Turn off the beeper when not driving backwards
		DDRH &= ~(1 << BEEPER);
	}
}
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	7f 90       	pop	r7
    1146:	6f 90       	pop	r6
    1148:	5f 90       	pop	r5
    114a:	4f 90       	pop	r4
    114c:	08 95       	ret

0000114e <main>:
//////////////////////////////////////////////////

//Function definitions ---------------------------
//General
void init_interrupt(){												//Globally enable the use of interrupts
	sei();																//Enable global interrupts
    114e:	78 94       	sei

////////////////// MAIN PROGRAM //////////////////
int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
    1150:	45 d8       	rcall	.-3958   	; 0x1dc <init_micros>
	init_USART();
    1152:	04 d9       	rcall	.-3576   	; 0x35c <init_USART>
	init_TWI();
    1154:	55 db       	rcall	.-2390   	; 0x800 <init_TWI>
	init_TWI_Timer2();
    1156:	5d db       	rcall	.-2374   	; 0x812 <init_TWI_Timer2>
	initBackBeep();
    1158:	4c d0       	rcall	.+152    	; 0x11f2 <initBackBeep>
	init_rp6Data();
    115a:	73 db       	rcall	.-2330   	; 0x842 <init_rp6Data>
    115c:	67 db       	rcall	.-2354   	; 0x82c <init_arduinoData>
	init_arduinoData();
    115e:	5a d0       	rcall	.+180    	; 0x1214 <initTimer>
    1160:	fd d8       	rcall	.-3590   	; 0x35c <init_USART>
	initTimer();
    1162:	cf e5       	ldi	r28, 0x5F	; 95
    1164:	d3 e0       	ldi	r29, 0x03	; 3
	init_USART();
    1166:	06 e7       	ldi	r16, 0x76	; 118
    1168:	13 e0       	ldi	r17, 0x03	; 3
	//-----------------------
	
	while (1){
		
		if(arduinoData.bumperFlag) {				//If the bumper flag is set, aka the bumpers have been hit
    116a:	88 81       	ld	r24, Y
    116c:	99 81       	ldd	r25, Y+1	; 0x01
			rp6Data.driveSpeed = 0;						//Set the drive speed to 0, this avoids running into the same object again
    116e:	89 2b       	or	r24, r25
	init_USART();
	//-----------------------
	
	while (1){
		
		if(arduinoData.bumperFlag) {				//If the bumper flag is set, aka the bumpers have been hit
    1170:	19 f0       	breq	.+6      	; 0x1178 <main+0x2a>
    1172:	f8 01       	movw	r30, r16
			rp6Data.driveSpeed = 0;						//Set the drive speed to 0, this avoids running into the same object again
    1174:	11 82       	std	Z+1, r1	; 0x01
    1176:	10 82       	st	Z, r1
    1178:	7c da       	rcall	.-2824   	; 0x672 <writeToTerminal>
		}
		
		writeToTerminal();							//Write all the relevant information to the terminal
    117a:	8f de       	rcall	.-738    	; 0xe9a <checkUltrasonic>
    117c:	f9 dd       	rcall	.-1038   	; 0xd70 <turnSignal>
		
		checkUltrasonic();							//Check the distance to objects in front of the robot with the ultrasonic sensor, if objects get to close this function wil stop the robot
    117e:	67 df       	rcall	.-306    	; 0x104e <beeper>
    1180:	f4 cf       	rjmp	.-24     	; 0x116a <main+0x1c>

00001182 <writeChar>:
#include "USART.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) {			//Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0));	//Wait until UDRE0 is set
    1182:	e0 ec       	ldi	r30, 0xC0	; 192
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	90 81       	ld	r25, Z
    1188:	95 ff       	sbrs	r25, 5
    118a:	fd cf       	rjmp	.-6      	; 0x1186 <writeChar+0x4>
	UDR0 = x;
    118c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1190:	08 95       	ret

00001192 <writeString>:
}

void writeString(char st[]) {					//Sends char array over serial communication. Dependent on writeChar()
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {		//Cycles through every char in st
    119a:	80 81       	ld	r24, Z
    119c:	88 23       	and	r24, r24
    119e:	51 f0       	breq	.+20     	; 0x11b4 <writeString+0x22>
    11a0:	8f 01       	movw	r16, r30
    11a2:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    11a4:	ee df       	rcall	.-36     	; 0x1182 <writeChar>
	while(~UCSR0A & (1 << UDRE0));	//Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) {					//Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {		//Cycles through every char in st
    11a6:	cf 5f       	subi	r28, 0xFF	; 255
    11a8:	f8 01       	movw	r30, r16
    11aa:	ec 0f       	add	r30, r28
    11ac:	f1 1d       	adc	r31, r1
    11ae:	80 81       	ld	r24, Z
    11b0:	81 11       	cpse	r24, r1
    11b2:	f8 cf       	rjmp	.-16     	; 0x11a4 <writeString+0x12>
		writeChar( st[i] );
	}
}
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <writeInt>:

void writeInt(int i) {		//Sends integer i over serial communication. Dependent on writeString()
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	28 97       	sbiw	r28, 0x08	; 8
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	4a e0       	ldi	r20, 0x0A	; 10
    11d2:	be 01       	movw	r22, r28
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	fb d4       	rcall	.+2550   	; 0x1bd0 <__itoa_ncheck>
	char buffer[8];			//Buffer for the string representation of i
	itoa(i,buffer,10);		//Converts i to a string
	writeString(buffer);
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	d9 df       	rcall	.-78     	; 0x1192 <writeString>
}
    11e0:	28 96       	adiw	r28, 0x08	; 8
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <initBackBeep>:

#define PRESCALER 256

void initBackBeep() {
	
	TCCR4A |= (1 << COM4A0);				//Toggle OC1A on match
    11f2:	e0 ea       	ldi	r30, 0xA0	; 160
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 64       	ori	r24, 0x40	; 64
    11fa:	80 83       	st	Z, r24
	TCCR4B |= (1 << CS42) | (1 << WGM42);	//Prescaler 256, CTC mode
    11fc:	e1 ea       	ldi	r30, 0xA1	; 161
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	8c 60       	ori	r24, 0x0C	; 12
    1204:	80 83       	st	Z, r24
	OCR4A = freqToOCR(BEEP_FREQ);
    1206:	8e e4       	ldi	r24, 0x4E	; 78
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    120e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    1212:	08 95       	ret

00001214 <initTimer>:
#define PORT_REGISTER PORTL				//PORT register of the TRIGGER and ECHO pins
#define PIN_REGISTER PINL				//PIN register of the TRIGGER and ECHO pins

void initTimer(){
	
	TCCR1B |= (1 << CS11);				//Prescaler 8
    1214:	e1 e8       	ldi	r30, 0x81	; 129
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	80 83       	st	Z, r24
	TCNT1 = 0;
    121e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1222:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1226:	08 95       	ret

00001228 <ultrasonicSensor>:
}

int ultrasonicSensor() {
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
	
	TCNT1 = 0;							//Reset value of TCNT1
    122c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1230:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER);			//Set TRIGGER pin as output
    1234:	aa e0       	ldi	r26, 0x0A	; 10
    1236:	b1 e0       	ldi	r27, 0x01	; 1
    1238:	8c 91       	ld	r24, X
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER);		//Set TRIGGER pin to low for 2 us to ensure a clean pulse
    123e:	eb e0       	ldi	r30, 0x0B	; 11
    1240:	f1 e0       	ldi	r31, 0x01	; 1
    1242:	80 81       	ld	r24, Z
    1244:	8d 7f       	andi	r24, 0xFD	; 253
    1246:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1248:	2a e0       	ldi	r18, 0x0A	; 10
    124a:	2a 95       	dec	r18
    124c:	f1 f7       	brne	.-4      	; 0x124a <ultrasonicSensor+0x22>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER);		//Send pulse for 5 us
    1250:	80 81       	ld	r24, Z
    1252:	82 60       	ori	r24, 0x02	; 2
    1254:	80 83       	st	Z, r24
    1256:	8a e1       	ldi	r24, 0x1A	; 26
    1258:	8a 95       	dec	r24
    125a:	f1 f7       	brne	.-4      	; 0x1258 <ultrasonicSensor+0x30>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER);		//Set TRIGGER pin to low
    125e:	80 81       	ld	r24, Z
    1260:	8d 7f       	andi	r24, 0xFD	; 253
    1262:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO);			//Set ECHO pin as input
    1264:	8c 91       	ld	r24, X
    1266:	8d 7f       	andi	r24, 0xFD	; 253
    1268:	8c 93       	st	X, r24
	TCNT1 = 0;							//Reset value of TCNT1
	
	unsigned long pulseStartTime = 0;	//Used to record value of TCNT1 when the pulse starts
	
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	dc 01       	movw	r26, r24
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER);		//Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO);			//Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) {	//Wait for any old pulse to end
    1270:	e9 e0       	ldi	r30, 0x09	; 9
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	0a c0       	rjmp	.+20     	; 0x128a <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	a1 1d       	adc	r26, r1
    127a:	b1 1d       	adc	r27, r1
    127c:	81 34       	cpi	r24, 0x41	; 65
    127e:	2c e9       	ldi	r18, 0x9C	; 156
    1280:	92 07       	cpc	r25, r18
    1282:	a1 05       	cpc	r26, r1
    1284:	b1 05       	cpc	r27, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <ultrasonicSensor+0x62>
    1288:	45 c0       	rjmp	.+138    	; 0x1314 <ultrasonicSensor+0xec>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER);		//Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO);			//Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) {	//Wait for any old pulse to end
    128a:	20 81       	ld	r18, Z
    128c:	21 fd       	sbrc	r18, 1
    128e:	f3 cf       	rjmp	.-26     	; 0x1276 <ultrasonicSensor+0x4e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) {		//Wait until PING))) returns a pulse
    1290:	e9 e0       	ldi	r30, 0x09	; 9
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	0d c0       	rjmp	.+26     	; 0x12b0 <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    1296:	ac 01       	movw	r20, r24
    1298:	bd 01       	movw	r22, r26
    129a:	4f 5f       	subi	r20, 0xFF	; 255
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	6f 4f       	sbci	r22, 0xFF	; 255
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	80 34       	cpi	r24, 0x40	; 64
    12a4:	9c 49       	sbci	r25, 0x9C	; 156
    12a6:	a1 05       	cpc	r26, r1
    12a8:	b1 05       	cpc	r27, r1
    12aa:	b9 f1       	breq	.+110    	; 0x131a <ultrasonicSensor+0xf2>
    12ac:	db 01       	movw	r26, r22
    12ae:	ca 01       	movw	r24, r20
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) {		//Wait until PING))) returns a pulse
    12b0:	20 81       	ld	r18, Z
    12b2:	21 ff       	sbrs	r18, 1
    12b4:	f0 cf       	rjmp	.-32     	; 0x1296 <ultrasonicSensor+0x6e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1;						//Set pulseStartTime to current TCNT1 value
    12b6:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    12ba:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) {		//Wait until the pulse from PING))) ends
    12be:	e9 e0       	ldi	r30, 0x09	; 9
    12c0:	f1 e0       	ldi	r31, 0x01	; 1
    12c2:	0d c0       	rjmp	.+26     	; 0x12de <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    12c4:	ac 01       	movw	r20, r24
    12c6:	bd 01       	movw	r22, r26
    12c8:	4f 5f       	subi	r20, 0xFF	; 255
    12ca:	5f 4f       	sbci	r21, 0xFF	; 255
    12cc:	6f 4f       	sbci	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	80 34       	cpi	r24, 0x40	; 64
    12d2:	9c 49       	sbci	r25, 0x9C	; 156
    12d4:	a1 05       	cpc	r26, r1
    12d6:	b1 05       	cpc	r27, r1
    12d8:	19 f1       	breq	.+70     	; 0x1320 <ultrasonicSensor+0xf8>
    12da:	db 01       	movw	r26, r22
    12dc:	ca 01       	movw	r24, r20
		}
	}
	
	pulseStartTime = TCNT1;						//Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) {		//Wait until the pulse from PING))) ends
    12de:	20 81       	ld	r18, Z
    12e0:	21 fd       	sbrc	r18, 1
    12e2:	f0 cf       	rjmp	.-32     	; 0x12c4 <ultrasonicSensor+0x9c>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime);	//Calculate and return distance in mm
    12e4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    12e8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
    12ec:	c9 01       	movw	r24, r18
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	9c 01       	movw	r18, r24
    12f4:	ad 01       	movw	r20, r26
    12f6:	2c 1b       	sub	r18, r28
    12f8:	3d 0b       	sbc	r19, r29
    12fa:	41 09       	sbc	r20, r1
    12fc:	51 09       	sbc	r21, r1
    12fe:	a3 eb       	ldi	r26, 0xB3	; 179
    1300:	b6 e0       	ldi	r27, 0x06	; 6
    1302:	91 d3       	rcall	.+1826   	; 0x1a26 <__muluhisi3>
    1304:	20 e2       	ldi	r18, 0x20	; 32
    1306:	3e e4       	ldi	r19, 0x4E	; 78
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	62 d3       	rcall	.+1732   	; 0x19d2 <__udivmodsi4>
    130e:	c9 01       	movw	r24, r18
    1310:	05 97       	sbiw	r24, 0x05	; 5
	while (PIN_REGISTER & (1 << ECHO)) {		//Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime);	//Calculate and return distance in mm
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <ultrasonicSensor+0xfc>
	
	DDR_REGISTER &= ~(1 << ECHO);			//Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) {	//Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <ultrasonicSensor+0xfc>
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) {		//Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <ultrasonicSensor+0xfc>
	
	pulseStartTime = TCNT1;						//Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) {		//Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime);	//Calculate and return distance in mm
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <__subsf3>:
    132a:	50 58       	subi	r21, 0x80	; 128

0000132c <__addsf3>:
    132c:	bb 27       	eor	r27, r27
    132e:	aa 27       	eor	r26, r26
    1330:	0e d0       	rcall	.+28     	; 0x134e <__addsf3x>
    1332:	4d c1       	rjmp	.+666    	; 0x15ce <__fp_round>
    1334:	3e d1       	rcall	.+636    	; 0x15b2 <__fp_pscA>
    1336:	30 f0       	brcs	.+12     	; 0x1344 <__addsf3+0x18>
    1338:	43 d1       	rcall	.+646    	; 0x15c0 <__fp_pscB>
    133a:	20 f0       	brcs	.+8      	; 0x1344 <__addsf3+0x18>
    133c:	31 f4       	brne	.+12     	; 0x134a <__addsf3+0x1e>
    133e:	9f 3f       	cpi	r25, 0xFF	; 255
    1340:	11 f4       	brne	.+4      	; 0x1346 <__addsf3+0x1a>
    1342:	1e f4       	brtc	.+6      	; 0x134a <__addsf3+0x1e>
    1344:	33 c1       	rjmp	.+614    	; 0x15ac <__fp_nan>
    1346:	0e f4       	brtc	.+2      	; 0x134a <__addsf3+0x1e>
    1348:	e0 95       	com	r30
    134a:	e7 fb       	bst	r30, 7
    134c:	29 c1       	rjmp	.+594    	; 0x15a0 <__fp_inf>

0000134e <__addsf3x>:
    134e:	e9 2f       	mov	r30, r25
    1350:	4f d1       	rcall	.+670    	; 0x15f0 <__fp_split3>
    1352:	80 f3       	brcs	.-32     	; 0x1334 <__addsf3+0x8>
    1354:	ba 17       	cp	r27, r26
    1356:	62 07       	cpc	r22, r18
    1358:	73 07       	cpc	r23, r19
    135a:	84 07       	cpc	r24, r20
    135c:	95 07       	cpc	r25, r21
    135e:	18 f0       	brcs	.+6      	; 0x1366 <__addsf3x+0x18>
    1360:	71 f4       	brne	.+28     	; 0x137e <__addsf3x+0x30>
    1362:	9e f5       	brtc	.+102    	; 0x13ca <__addsf3x+0x7c>
    1364:	67 c1       	rjmp	.+718    	; 0x1634 <__fp_zero>
    1366:	0e f4       	brtc	.+2      	; 0x136a <__addsf3x+0x1c>
    1368:	e0 95       	com	r30
    136a:	0b 2e       	mov	r0, r27
    136c:	ba 2f       	mov	r27, r26
    136e:	a0 2d       	mov	r26, r0
    1370:	0b 01       	movw	r0, r22
    1372:	b9 01       	movw	r22, r18
    1374:	90 01       	movw	r18, r0
    1376:	0c 01       	movw	r0, r24
    1378:	ca 01       	movw	r24, r20
    137a:	a0 01       	movw	r20, r0
    137c:	11 24       	eor	r1, r1
    137e:	ff 27       	eor	r31, r31
    1380:	59 1b       	sub	r21, r25
    1382:	99 f0       	breq	.+38     	; 0x13aa <__addsf3x+0x5c>
    1384:	59 3f       	cpi	r21, 0xF9	; 249
    1386:	50 f4       	brcc	.+20     	; 0x139c <__addsf3x+0x4e>
    1388:	50 3e       	cpi	r21, 0xE0	; 224
    138a:	68 f1       	brcs	.+90     	; 0x13e6 <__addsf3x+0x98>
    138c:	1a 16       	cp	r1, r26
    138e:	f0 40       	sbci	r31, 0x00	; 0
    1390:	a2 2f       	mov	r26, r18
    1392:	23 2f       	mov	r18, r19
    1394:	34 2f       	mov	r19, r20
    1396:	44 27       	eor	r20, r20
    1398:	58 5f       	subi	r21, 0xF8	; 248
    139a:	f3 cf       	rjmp	.-26     	; 0x1382 <__addsf3x+0x34>
    139c:	46 95       	lsr	r20
    139e:	37 95       	ror	r19
    13a0:	27 95       	ror	r18
    13a2:	a7 95       	ror	r26
    13a4:	f0 40       	sbci	r31, 0x00	; 0
    13a6:	53 95       	inc	r21
    13a8:	c9 f7       	brne	.-14     	; 0x139c <__addsf3x+0x4e>
    13aa:	7e f4       	brtc	.+30     	; 0x13ca <__addsf3x+0x7c>
    13ac:	1f 16       	cp	r1, r31
    13ae:	ba 0b       	sbc	r27, r26
    13b0:	62 0b       	sbc	r22, r18
    13b2:	73 0b       	sbc	r23, r19
    13b4:	84 0b       	sbc	r24, r20
    13b6:	ba f0       	brmi	.+46     	; 0x13e6 <__addsf3x+0x98>
    13b8:	91 50       	subi	r25, 0x01	; 1
    13ba:	a1 f0       	breq	.+40     	; 0x13e4 <__addsf3x+0x96>
    13bc:	ff 0f       	add	r31, r31
    13be:	bb 1f       	adc	r27, r27
    13c0:	66 1f       	adc	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	c2 f7       	brpl	.-16     	; 0x13b8 <__addsf3x+0x6a>
    13c8:	0e c0       	rjmp	.+28     	; 0x13e6 <__addsf3x+0x98>
    13ca:	ba 0f       	add	r27, r26
    13cc:	62 1f       	adc	r22, r18
    13ce:	73 1f       	adc	r23, r19
    13d0:	84 1f       	adc	r24, r20
    13d2:	48 f4       	brcc	.+18     	; 0x13e6 <__addsf3x+0x98>
    13d4:	87 95       	ror	r24
    13d6:	77 95       	ror	r23
    13d8:	67 95       	ror	r22
    13da:	b7 95       	ror	r27
    13dc:	f7 95       	ror	r31
    13de:	9e 3f       	cpi	r25, 0xFE	; 254
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <__addsf3x+0x96>
    13e2:	b3 cf       	rjmp	.-154    	; 0x134a <__addsf3+0x1e>
    13e4:	93 95       	inc	r25
    13e6:	88 0f       	add	r24, r24
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <__addsf3x+0x9e>
    13ea:	99 27       	eor	r25, r25
    13ec:	ee 0f       	add	r30, r30
    13ee:	97 95       	ror	r25
    13f0:	87 95       	ror	r24
    13f2:	08 95       	ret

000013f4 <__divsf3>:
    13f4:	0c d0       	rcall	.+24     	; 0x140e <__divsf3x>
    13f6:	eb c0       	rjmp	.+470    	; 0x15ce <__fp_round>
    13f8:	e3 d0       	rcall	.+454    	; 0x15c0 <__fp_pscB>
    13fa:	40 f0       	brcs	.+16     	; 0x140c <__divsf3+0x18>
    13fc:	da d0       	rcall	.+436    	; 0x15b2 <__fp_pscA>
    13fe:	30 f0       	brcs	.+12     	; 0x140c <__divsf3+0x18>
    1400:	21 f4       	brne	.+8      	; 0x140a <__divsf3+0x16>
    1402:	5f 3f       	cpi	r21, 0xFF	; 255
    1404:	19 f0       	breq	.+6      	; 0x140c <__divsf3+0x18>
    1406:	cc c0       	rjmp	.+408    	; 0x15a0 <__fp_inf>
    1408:	51 11       	cpse	r21, r1
    140a:	15 c1       	rjmp	.+554    	; 0x1636 <__fp_szero>
    140c:	cf c0       	rjmp	.+414    	; 0x15ac <__fp_nan>

0000140e <__divsf3x>:
    140e:	f0 d0       	rcall	.+480    	; 0x15f0 <__fp_split3>
    1410:	98 f3       	brcs	.-26     	; 0x13f8 <__divsf3+0x4>

00001412 <__divsf3_pse>:
    1412:	99 23       	and	r25, r25
    1414:	c9 f3       	breq	.-14     	; 0x1408 <__divsf3+0x14>
    1416:	55 23       	and	r21, r21
    1418:	b1 f3       	breq	.-20     	; 0x1406 <__divsf3+0x12>
    141a:	95 1b       	sub	r25, r21
    141c:	55 0b       	sbc	r21, r21
    141e:	bb 27       	eor	r27, r27
    1420:	aa 27       	eor	r26, r26
    1422:	62 17       	cp	r22, r18
    1424:	73 07       	cpc	r23, r19
    1426:	84 07       	cpc	r24, r20
    1428:	38 f0       	brcs	.+14     	; 0x1438 <__divsf3_pse+0x26>
    142a:	9f 5f       	subi	r25, 0xFF	; 255
    142c:	5f 4f       	sbci	r21, 0xFF	; 255
    142e:	22 0f       	add	r18, r18
    1430:	33 1f       	adc	r19, r19
    1432:	44 1f       	adc	r20, r20
    1434:	aa 1f       	adc	r26, r26
    1436:	a9 f3       	breq	.-22     	; 0x1422 <__divsf3_pse+0x10>
    1438:	33 d0       	rcall	.+102    	; 0x14a0 <__divsf3_pse+0x8e>
    143a:	0e 2e       	mov	r0, r30
    143c:	3a f0       	brmi	.+14     	; 0x144c <__divsf3_pse+0x3a>
    143e:	e0 e8       	ldi	r30, 0x80	; 128
    1440:	30 d0       	rcall	.+96     	; 0x14a2 <__divsf3_pse+0x90>
    1442:	91 50       	subi	r25, 0x01	; 1
    1444:	50 40       	sbci	r21, 0x00	; 0
    1446:	e6 95       	lsr	r30
    1448:	00 1c       	adc	r0, r0
    144a:	ca f7       	brpl	.-14     	; 0x143e <__divsf3_pse+0x2c>
    144c:	29 d0       	rcall	.+82     	; 0x14a0 <__divsf3_pse+0x8e>
    144e:	fe 2f       	mov	r31, r30
    1450:	27 d0       	rcall	.+78     	; 0x14a0 <__divsf3_pse+0x8e>
    1452:	66 0f       	add	r22, r22
    1454:	77 1f       	adc	r23, r23
    1456:	88 1f       	adc	r24, r24
    1458:	bb 1f       	adc	r27, r27
    145a:	26 17       	cp	r18, r22
    145c:	37 07       	cpc	r19, r23
    145e:	48 07       	cpc	r20, r24
    1460:	ab 07       	cpc	r26, r27
    1462:	b0 e8       	ldi	r27, 0x80	; 128
    1464:	09 f0       	breq	.+2      	; 0x1468 <__divsf3_pse+0x56>
    1466:	bb 0b       	sbc	r27, r27
    1468:	80 2d       	mov	r24, r0
    146a:	bf 01       	movw	r22, r30
    146c:	ff 27       	eor	r31, r31
    146e:	93 58       	subi	r25, 0x83	; 131
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	2a f0       	brmi	.+10     	; 0x147e <__divsf3_pse+0x6c>
    1474:	9e 3f       	cpi	r25, 0xFE	; 254
    1476:	51 05       	cpc	r21, r1
    1478:	68 f0       	brcs	.+26     	; 0x1494 <__divsf3_pse+0x82>
    147a:	92 c0       	rjmp	.+292    	; 0x15a0 <__fp_inf>
    147c:	dc c0       	rjmp	.+440    	; 0x1636 <__fp_szero>
    147e:	5f 3f       	cpi	r21, 0xFF	; 255
    1480:	ec f3       	brlt	.-6      	; 0x147c <__divsf3_pse+0x6a>
    1482:	98 3e       	cpi	r25, 0xE8	; 232
    1484:	dc f3       	brlt	.-10     	; 0x147c <__divsf3_pse+0x6a>
    1486:	86 95       	lsr	r24
    1488:	77 95       	ror	r23
    148a:	67 95       	ror	r22
    148c:	b7 95       	ror	r27
    148e:	f7 95       	ror	r31
    1490:	9f 5f       	subi	r25, 0xFF	; 255
    1492:	c9 f7       	brne	.-14     	; 0x1486 <__divsf3_pse+0x74>
    1494:	88 0f       	add	r24, r24
    1496:	91 1d       	adc	r25, r1
    1498:	96 95       	lsr	r25
    149a:	87 95       	ror	r24
    149c:	97 f9       	bld	r25, 7
    149e:	08 95       	ret
    14a0:	e1 e0       	ldi	r30, 0x01	; 1
    14a2:	66 0f       	add	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	bb 1f       	adc	r27, r27
    14aa:	62 17       	cp	r22, r18
    14ac:	73 07       	cpc	r23, r19
    14ae:	84 07       	cpc	r24, r20
    14b0:	ba 07       	cpc	r27, r26
    14b2:	20 f0       	brcs	.+8      	; 0x14bc <__divsf3_pse+0xaa>
    14b4:	62 1b       	sub	r22, r18
    14b6:	73 0b       	sbc	r23, r19
    14b8:	84 0b       	sbc	r24, r20
    14ba:	ba 0b       	sbc	r27, r26
    14bc:	ee 1f       	adc	r30, r30
    14be:	88 f7       	brcc	.-30     	; 0x14a2 <__divsf3_pse+0x90>
    14c0:	e0 95       	com	r30
    14c2:	08 95       	ret

000014c4 <__fixsfsi>:
    14c4:	04 d0       	rcall	.+8      	; 0x14ce <__fixunssfsi>
    14c6:	68 94       	set
    14c8:	b1 11       	cpse	r27, r1
    14ca:	b5 c0       	rjmp	.+362    	; 0x1636 <__fp_szero>
    14cc:	08 95       	ret

000014ce <__fixunssfsi>:
    14ce:	98 d0       	rcall	.+304    	; 0x1600 <__fp_splitA>
    14d0:	88 f0       	brcs	.+34     	; 0x14f4 <__fixunssfsi+0x26>
    14d2:	9f 57       	subi	r25, 0x7F	; 127
    14d4:	90 f0       	brcs	.+36     	; 0x14fa <__fixunssfsi+0x2c>
    14d6:	b9 2f       	mov	r27, r25
    14d8:	99 27       	eor	r25, r25
    14da:	b7 51       	subi	r27, 0x17	; 23
    14dc:	a0 f0       	brcs	.+40     	; 0x1506 <__fixunssfsi+0x38>
    14de:	d1 f0       	breq	.+52     	; 0x1514 <__fixunssfsi+0x46>
    14e0:	66 0f       	add	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	88 1f       	adc	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	1a f0       	brmi	.+6      	; 0x14f0 <__fixunssfsi+0x22>
    14ea:	ba 95       	dec	r27
    14ec:	c9 f7       	brne	.-14     	; 0x14e0 <__fixunssfsi+0x12>
    14ee:	12 c0       	rjmp	.+36     	; 0x1514 <__fixunssfsi+0x46>
    14f0:	b1 30       	cpi	r27, 0x01	; 1
    14f2:	81 f0       	breq	.+32     	; 0x1514 <__fixunssfsi+0x46>
    14f4:	9f d0       	rcall	.+318    	; 0x1634 <__fp_zero>
    14f6:	b1 e0       	ldi	r27, 0x01	; 1
    14f8:	08 95       	ret
    14fa:	9c c0       	rjmp	.+312    	; 0x1634 <__fp_zero>
    14fc:	67 2f       	mov	r22, r23
    14fe:	78 2f       	mov	r23, r24
    1500:	88 27       	eor	r24, r24
    1502:	b8 5f       	subi	r27, 0xF8	; 248
    1504:	39 f0       	breq	.+14     	; 0x1514 <__fixunssfsi+0x46>
    1506:	b9 3f       	cpi	r27, 0xF9	; 249
    1508:	cc f3       	brlt	.-14     	; 0x14fc <__fixunssfsi+0x2e>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b3 95       	inc	r27
    1512:	d9 f7       	brne	.-10     	; 0x150a <__fixunssfsi+0x3c>
    1514:	3e f4       	brtc	.+14     	; 0x1524 <__fixunssfsi+0x56>
    1516:	90 95       	com	r25
    1518:	80 95       	com	r24
    151a:	70 95       	com	r23
    151c:	61 95       	neg	r22
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8f 4f       	sbci	r24, 0xFF	; 255
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	08 95       	ret

00001526 <__floatunsisf>:
    1526:	e8 94       	clt
    1528:	09 c0       	rjmp	.+18     	; 0x153c <__floatsisf+0x12>

0000152a <__floatsisf>:
    152a:	97 fb       	bst	r25, 7
    152c:	3e f4       	brtc	.+14     	; 0x153c <__floatsisf+0x12>
    152e:	90 95       	com	r25
    1530:	80 95       	com	r24
    1532:	70 95       	com	r23
    1534:	61 95       	neg	r22
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	99 23       	and	r25, r25
    153e:	a9 f0       	breq	.+42     	; 0x156a <__floatsisf+0x40>
    1540:	f9 2f       	mov	r31, r25
    1542:	96 e9       	ldi	r25, 0x96	; 150
    1544:	bb 27       	eor	r27, r27
    1546:	93 95       	inc	r25
    1548:	f6 95       	lsr	r31
    154a:	87 95       	ror	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f1 11       	cpse	r31, r1
    1554:	f8 cf       	rjmp	.-16     	; 0x1546 <__floatsisf+0x1c>
    1556:	fa f4       	brpl	.+62     	; 0x1596 <__floatsisf+0x6c>
    1558:	bb 0f       	add	r27, r27
    155a:	11 f4       	brne	.+4      	; 0x1560 <__floatsisf+0x36>
    155c:	60 ff       	sbrs	r22, 0
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <__floatsisf+0x6c>
    1560:	6f 5f       	subi	r22, 0xFF	; 255
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f 4f       	sbci	r24, 0xFF	; 255
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <__floatsisf+0x6c>
    156a:	88 23       	and	r24, r24
    156c:	11 f0       	breq	.+4      	; 0x1572 <__floatsisf+0x48>
    156e:	96 e9       	ldi	r25, 0x96	; 150
    1570:	11 c0       	rjmp	.+34     	; 0x1594 <__floatsisf+0x6a>
    1572:	77 23       	and	r23, r23
    1574:	21 f0       	breq	.+8      	; 0x157e <__floatsisf+0x54>
    1576:	9e e8       	ldi	r25, 0x8E	; 142
    1578:	87 2f       	mov	r24, r23
    157a:	76 2f       	mov	r23, r22
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <__floatsisf+0x5e>
    157e:	66 23       	and	r22, r22
    1580:	71 f0       	breq	.+28     	; 0x159e <__floatsisf+0x74>
    1582:	96 e8       	ldi	r25, 0x86	; 134
    1584:	86 2f       	mov	r24, r22
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	2a f0       	brmi	.+10     	; 0x1596 <__floatsisf+0x6c>
    158c:	9a 95       	dec	r25
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	da f7       	brpl	.-10     	; 0x158c <__floatsisf+0x62>
    1596:	88 0f       	add	r24, r24
    1598:	96 95       	lsr	r25
    159a:	87 95       	ror	r24
    159c:	97 f9       	bld	r25, 7
    159e:	08 95       	ret

000015a0 <__fp_inf>:
    15a0:	97 f9       	bld	r25, 7
    15a2:	9f 67       	ori	r25, 0x7F	; 127
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	08 95       	ret

000015ac <__fp_nan>:
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	80 ec       	ldi	r24, 0xC0	; 192
    15b0:	08 95       	ret

000015b2 <__fp_pscA>:
    15b2:	00 24       	eor	r0, r0
    15b4:	0a 94       	dec	r0
    15b6:	16 16       	cp	r1, r22
    15b8:	17 06       	cpc	r1, r23
    15ba:	18 06       	cpc	r1, r24
    15bc:	09 06       	cpc	r0, r25
    15be:	08 95       	ret

000015c0 <__fp_pscB>:
    15c0:	00 24       	eor	r0, r0
    15c2:	0a 94       	dec	r0
    15c4:	12 16       	cp	r1, r18
    15c6:	13 06       	cpc	r1, r19
    15c8:	14 06       	cpc	r1, r20
    15ca:	05 06       	cpc	r0, r21
    15cc:	08 95       	ret

000015ce <__fp_round>:
    15ce:	09 2e       	mov	r0, r25
    15d0:	03 94       	inc	r0
    15d2:	00 0c       	add	r0, r0
    15d4:	11 f4       	brne	.+4      	; 0x15da <__fp_round+0xc>
    15d6:	88 23       	and	r24, r24
    15d8:	52 f0       	brmi	.+20     	; 0x15ee <__fp_round+0x20>
    15da:	bb 0f       	add	r27, r27
    15dc:	40 f4       	brcc	.+16     	; 0x15ee <__fp_round+0x20>
    15de:	bf 2b       	or	r27, r31
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <__fp_round+0x18>
    15e2:	60 ff       	sbrs	r22, 0
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__fp_round+0x20>
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <__fp_split3>:
    15f0:	57 fd       	sbrc	r21, 7
    15f2:	90 58       	subi	r25, 0x80	; 128
    15f4:	44 0f       	add	r20, r20
    15f6:	55 1f       	adc	r21, r21
    15f8:	59 f0       	breq	.+22     	; 0x1610 <__fp_splitA+0x10>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	71 f0       	breq	.+28     	; 0x161a <__fp_splitA+0x1a>
    15fe:	47 95       	ror	r20

00001600 <__fp_splitA>:
    1600:	88 0f       	add	r24, r24
    1602:	97 fb       	bst	r25, 7
    1604:	99 1f       	adc	r25, r25
    1606:	61 f0       	breq	.+24     	; 0x1620 <__fp_splitA+0x20>
    1608:	9f 3f       	cpi	r25, 0xFF	; 255
    160a:	79 f0       	breq	.+30     	; 0x162a <__fp_splitA+0x2a>
    160c:	87 95       	ror	r24
    160e:	08 95       	ret
    1610:	12 16       	cp	r1, r18
    1612:	13 06       	cpc	r1, r19
    1614:	14 06       	cpc	r1, r20
    1616:	55 1f       	adc	r21, r21
    1618:	f2 cf       	rjmp	.-28     	; 0x15fe <__fp_split3+0xe>
    161a:	46 95       	lsr	r20
    161c:	f1 df       	rcall	.-30     	; 0x1600 <__fp_splitA>
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <__fp_splitA+0x30>
    1620:	16 16       	cp	r1, r22
    1622:	17 06       	cpc	r1, r23
    1624:	18 06       	cpc	r1, r24
    1626:	99 1f       	adc	r25, r25
    1628:	f1 cf       	rjmp	.-30     	; 0x160c <__fp_splitA+0xc>
    162a:	86 95       	lsr	r24
    162c:	71 05       	cpc	r23, r1
    162e:	61 05       	cpc	r22, r1
    1630:	08 94       	sec
    1632:	08 95       	ret

00001634 <__fp_zero>:
    1634:	e8 94       	clt

00001636 <__fp_szero>:
    1636:	bb 27       	eor	r27, r27
    1638:	66 27       	eor	r22, r22
    163a:	77 27       	eor	r23, r23
    163c:	cb 01       	movw	r24, r22
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret

00001642 <__mulsf3>:
    1642:	0b d0       	rcall	.+22     	; 0x165a <__mulsf3x>
    1644:	c4 cf       	rjmp	.-120    	; 0x15ce <__fp_round>
    1646:	b5 df       	rcall	.-150    	; 0x15b2 <__fp_pscA>
    1648:	28 f0       	brcs	.+10     	; 0x1654 <__mulsf3+0x12>
    164a:	ba df       	rcall	.-140    	; 0x15c0 <__fp_pscB>
    164c:	18 f0       	brcs	.+6      	; 0x1654 <__mulsf3+0x12>
    164e:	95 23       	and	r25, r21
    1650:	09 f0       	breq	.+2      	; 0x1654 <__mulsf3+0x12>
    1652:	a6 cf       	rjmp	.-180    	; 0x15a0 <__fp_inf>
    1654:	ab cf       	rjmp	.-170    	; 0x15ac <__fp_nan>
    1656:	11 24       	eor	r1, r1
    1658:	ee cf       	rjmp	.-36     	; 0x1636 <__fp_szero>

0000165a <__mulsf3x>:
    165a:	ca df       	rcall	.-108    	; 0x15f0 <__fp_split3>
    165c:	a0 f3       	brcs	.-24     	; 0x1646 <__mulsf3+0x4>

0000165e <__mulsf3_pse>:
    165e:	95 9f       	mul	r25, r21
    1660:	d1 f3       	breq	.-12     	; 0x1656 <__mulsf3+0x14>
    1662:	95 0f       	add	r25, r21
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	55 1f       	adc	r21, r21
    1668:	62 9f       	mul	r22, r18
    166a:	f0 01       	movw	r30, r0
    166c:	72 9f       	mul	r23, r18
    166e:	bb 27       	eor	r27, r27
    1670:	f0 0d       	add	r31, r0
    1672:	b1 1d       	adc	r27, r1
    1674:	63 9f       	mul	r22, r19
    1676:	aa 27       	eor	r26, r26
    1678:	f0 0d       	add	r31, r0
    167a:	b1 1d       	adc	r27, r1
    167c:	aa 1f       	adc	r26, r26
    167e:	64 9f       	mul	r22, r20
    1680:	66 27       	eor	r22, r22
    1682:	b0 0d       	add	r27, r0
    1684:	a1 1d       	adc	r26, r1
    1686:	66 1f       	adc	r22, r22
    1688:	82 9f       	mul	r24, r18
    168a:	22 27       	eor	r18, r18
    168c:	b0 0d       	add	r27, r0
    168e:	a1 1d       	adc	r26, r1
    1690:	62 1f       	adc	r22, r18
    1692:	73 9f       	mul	r23, r19
    1694:	b0 0d       	add	r27, r0
    1696:	a1 1d       	adc	r26, r1
    1698:	62 1f       	adc	r22, r18
    169a:	83 9f       	mul	r24, r19
    169c:	a0 0d       	add	r26, r0
    169e:	61 1d       	adc	r22, r1
    16a0:	22 1f       	adc	r18, r18
    16a2:	74 9f       	mul	r23, r20
    16a4:	33 27       	eor	r19, r19
    16a6:	a0 0d       	add	r26, r0
    16a8:	61 1d       	adc	r22, r1
    16aa:	23 1f       	adc	r18, r19
    16ac:	84 9f       	mul	r24, r20
    16ae:	60 0d       	add	r22, r0
    16b0:	21 1d       	adc	r18, r1
    16b2:	82 2f       	mov	r24, r18
    16b4:	76 2f       	mov	r23, r22
    16b6:	6a 2f       	mov	r22, r26
    16b8:	11 24       	eor	r1, r1
    16ba:	9f 57       	subi	r25, 0x7F	; 127
    16bc:	50 40       	sbci	r21, 0x00	; 0
    16be:	8a f0       	brmi	.+34     	; 0x16e2 <__mulsf3_pse+0x84>
    16c0:	e1 f0       	breq	.+56     	; 0x16fa <__mulsf3_pse+0x9c>
    16c2:	88 23       	and	r24, r24
    16c4:	4a f0       	brmi	.+18     	; 0x16d8 <__mulsf3_pse+0x7a>
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	bb 1f       	adc	r27, r27
    16cc:	66 1f       	adc	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	91 50       	subi	r25, 0x01	; 1
    16d4:	50 40       	sbci	r21, 0x00	; 0
    16d6:	a9 f7       	brne	.-22     	; 0x16c2 <__mulsf3_pse+0x64>
    16d8:	9e 3f       	cpi	r25, 0xFE	; 254
    16da:	51 05       	cpc	r21, r1
    16dc:	70 f0       	brcs	.+28     	; 0x16fa <__mulsf3_pse+0x9c>
    16de:	60 cf       	rjmp	.-320    	; 0x15a0 <__fp_inf>
    16e0:	aa cf       	rjmp	.-172    	; 0x1636 <__fp_szero>
    16e2:	5f 3f       	cpi	r21, 0xFF	; 255
    16e4:	ec f3       	brlt	.-6      	; 0x16e0 <__mulsf3_pse+0x82>
    16e6:	98 3e       	cpi	r25, 0xE8	; 232
    16e8:	dc f3       	brlt	.-10     	; 0x16e0 <__mulsf3_pse+0x82>
    16ea:	86 95       	lsr	r24
    16ec:	77 95       	ror	r23
    16ee:	67 95       	ror	r22
    16f0:	b7 95       	ror	r27
    16f2:	f7 95       	ror	r31
    16f4:	e7 95       	ror	r30
    16f6:	9f 5f       	subi	r25, 0xFF	; 255
    16f8:	c1 f7       	brne	.-16     	; 0x16ea <__mulsf3_pse+0x8c>
    16fa:	fe 2b       	or	r31, r30
    16fc:	88 0f       	add	r24, r24
    16fe:	91 1d       	adc	r25, r1
    1700:	96 95       	lsr	r25
    1702:	87 95       	ror	r24
    1704:	97 f9       	bld	r25, 7
    1706:	08 95       	ret

00001708 <pow>:
    1708:	fa 01       	movw	r30, r20
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	30 96       	adiw	r30, 0x00	; 0
    1710:	21 05       	cpc	r18, r1
    1712:	31 05       	cpc	r19, r1
    1714:	99 f1       	breq	.+102    	; 0x177c <pow+0x74>
    1716:	61 15       	cp	r22, r1
    1718:	71 05       	cpc	r23, r1
    171a:	61 f4       	brne	.+24     	; 0x1734 <pow+0x2c>
    171c:	80 38       	cpi	r24, 0x80	; 128
    171e:	bf e3       	ldi	r27, 0x3F	; 63
    1720:	9b 07       	cpc	r25, r27
    1722:	49 f1       	breq	.+82     	; 0x1776 <pow+0x6e>
    1724:	68 94       	set
    1726:	90 38       	cpi	r25, 0x80	; 128
    1728:	81 05       	cpc	r24, r1
    172a:	61 f0       	breq	.+24     	; 0x1744 <pow+0x3c>
    172c:	80 38       	cpi	r24, 0x80	; 128
    172e:	bf ef       	ldi	r27, 0xFF	; 255
    1730:	9b 07       	cpc	r25, r27
    1732:	41 f0       	breq	.+16     	; 0x1744 <pow+0x3c>
    1734:	99 23       	and	r25, r25
    1736:	42 f5       	brpl	.+80     	; 0x1788 <pow+0x80>
    1738:	ff 3f       	cpi	r31, 0xFF	; 255
    173a:	e1 05       	cpc	r30, r1
    173c:	31 05       	cpc	r19, r1
    173e:	21 05       	cpc	r18, r1
    1740:	11 f1       	breq	.+68     	; 0x1786 <pow+0x7e>
    1742:	e8 94       	clt
    1744:	08 94       	sec
    1746:	e7 95       	ror	r30
    1748:	d9 01       	movw	r26, r18
    174a:	aa 23       	and	r26, r26
    174c:	29 f4       	brne	.+10     	; 0x1758 <pow+0x50>
    174e:	ab 2f       	mov	r26, r27
    1750:	be 2f       	mov	r27, r30
    1752:	f8 5f       	subi	r31, 0xF8	; 248
    1754:	d0 f3       	brcs	.-12     	; 0x174a <pow+0x42>
    1756:	10 c0       	rjmp	.+32     	; 0x1778 <pow+0x70>
    1758:	ff 5f       	subi	r31, 0xFF	; 255
    175a:	70 f4       	brcc	.+28     	; 0x1778 <pow+0x70>
    175c:	a6 95       	lsr	r26
    175e:	e0 f7       	brcc	.-8      	; 0x1758 <pow+0x50>
    1760:	f7 39       	cpi	r31, 0x97	; 151
    1762:	50 f0       	brcs	.+20     	; 0x1778 <pow+0x70>
    1764:	19 f0       	breq	.+6      	; 0x176c <pow+0x64>
    1766:	ff 3a       	cpi	r31, 0xAF	; 175
    1768:	38 f4       	brcc	.+14     	; 0x1778 <pow+0x70>
    176a:	9f 77       	andi	r25, 0x7F	; 127
    176c:	9f 93       	push	r25
    176e:	0c d0       	rcall	.+24     	; 0x1788 <pow+0x80>
    1770:	0f 90       	pop	r0
    1772:	07 fc       	sbrc	r0, 7
    1774:	90 58       	subi	r25, 0x80	; 128
    1776:	08 95       	ret
    1778:	3e f0       	brts	.+14     	; 0x1788 <pow+0x80>
    177a:	18 cf       	rjmp	.-464    	; 0x15ac <__fp_nan>
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	80 e8       	ldi	r24, 0x80	; 128
    1782:	9f e3       	ldi	r25, 0x3F	; 63
    1784:	08 95       	ret
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	9f 77       	andi	r25, 0x7F	; 127
    178a:	5f 93       	push	r21
    178c:	4f 93       	push	r20
    178e:	3f 93       	push	r19
    1790:	2f 93       	push	r18
    1792:	9e d0       	rcall	.+316    	; 0x18d0 <log>
    1794:	2f 91       	pop	r18
    1796:	3f 91       	pop	r19
    1798:	4f 91       	pop	r20
    179a:	5f 91       	pop	r21
    179c:	52 df       	rcall	.-348    	; 0x1642 <__mulsf3>
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <exp>
    17a0:	19 f4       	brne	.+6      	; 0x17a8 <pow+0xa0>
    17a2:	0e f0       	brts	.+2      	; 0x17a6 <pow+0x9e>
    17a4:	fd ce       	rjmp	.-518    	; 0x15a0 <__fp_inf>
    17a6:	46 cf       	rjmp	.-372    	; 0x1634 <__fp_zero>
    17a8:	01 cf       	rjmp	.-510    	; 0x15ac <__fp_nan>

000017aa <exp>:
    17aa:	2a df       	rcall	.-428    	; 0x1600 <__fp_splitA>
    17ac:	c8 f3       	brcs	.-14     	; 0x17a0 <pow+0x98>
    17ae:	96 38       	cpi	r25, 0x86	; 134
    17b0:	c0 f7       	brcc	.-16     	; 0x17a2 <pow+0x9a>
    17b2:	07 f8       	bld	r0, 7
    17b4:	0f 92       	push	r0
    17b6:	e8 94       	clt
    17b8:	2b e3       	ldi	r18, 0x3B	; 59
    17ba:	3a ea       	ldi	r19, 0xAA	; 170
    17bc:	48 eb       	ldi	r20, 0xB8	; 184
    17be:	5f e7       	ldi	r21, 0x7F	; 127
    17c0:	4e df       	rcall	.-356    	; 0x165e <__mulsf3_pse>
    17c2:	0f 92       	push	r0
    17c4:	0f 92       	push	r0
    17c6:	0f 92       	push	r0
    17c8:	4d b7       	in	r20, 0x3d	; 61
    17ca:	5e b7       	in	r21, 0x3e	; 62
    17cc:	0f 92       	push	r0
    17ce:	c0 d0       	rcall	.+384    	; 0x1950 <modf>
    17d0:	e8 e1       	ldi	r30, 0x18	; 24
    17d2:	f1 e0       	ldi	r31, 0x01	; 1
    17d4:	16 d0       	rcall	.+44     	; 0x1802 <__fp_powser>
    17d6:	4f 91       	pop	r20
    17d8:	5f 91       	pop	r21
    17da:	ef 91       	pop	r30
    17dc:	ff 91       	pop	r31
    17de:	e5 95       	asr	r30
    17e0:	ee 1f       	adc	r30, r30
    17e2:	ff 1f       	adc	r31, r31
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <exp+0x4e>
    17e6:	fe 57       	subi	r31, 0x7E	; 126
    17e8:	e0 68       	ori	r30, 0x80	; 128
    17ea:	44 27       	eor	r20, r20
    17ec:	ee 0f       	add	r30, r30
    17ee:	44 1f       	adc	r20, r20
    17f0:	fa 95       	dec	r31
    17f2:	e1 f7       	brne	.-8      	; 0x17ec <exp+0x42>
    17f4:	41 95       	neg	r20
    17f6:	55 0b       	sbc	r21, r21
    17f8:	32 d0       	rcall	.+100    	; 0x185e <ldexp>
    17fa:	0f 90       	pop	r0
    17fc:	07 fe       	sbrs	r0, 7
    17fe:	26 c0       	rjmp	.+76     	; 0x184c <inverse>
    1800:	08 95       	ret

00001802 <__fp_powser>:
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	1f 93       	push	r17
    1808:	0f 93       	push	r16
    180a:	ff 92       	push	r15
    180c:	ef 92       	push	r14
    180e:	df 92       	push	r13
    1810:	7b 01       	movw	r14, r22
    1812:	8c 01       	movw	r16, r24
    1814:	68 94       	set
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <__fp_powser+0x20>
    1818:	da 2e       	mov	r13, r26
    181a:	ef 01       	movw	r28, r30
    181c:	1e df       	rcall	.-452    	; 0x165a <__mulsf3x>
    181e:	fe 01       	movw	r30, r28
    1820:	e8 94       	clt
    1822:	a5 91       	lpm	r26, Z+
    1824:	25 91       	lpm	r18, Z+
    1826:	35 91       	lpm	r19, Z+
    1828:	45 91       	lpm	r20, Z+
    182a:	55 91       	lpm	r21, Z+
    182c:	ae f3       	brts	.-22     	; 0x1818 <__fp_powser+0x16>
    182e:	ef 01       	movw	r28, r30
    1830:	8e dd       	rcall	.-1252   	; 0x134e <__addsf3x>
    1832:	fe 01       	movw	r30, r28
    1834:	97 01       	movw	r18, r14
    1836:	a8 01       	movw	r20, r16
    1838:	da 94       	dec	r13
    183a:	79 f7       	brne	.-34     	; 0x181a <__fp_powser+0x18>
    183c:	df 90       	pop	r13
    183e:	ef 90       	pop	r14
    1840:	ff 90       	pop	r15
    1842:	0f 91       	pop	r16
    1844:	1f 91       	pop	r17
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <inverse>:
    184c:	9b 01       	movw	r18, r22
    184e:	ac 01       	movw	r20, r24
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	80 e8       	ldi	r24, 0x80	; 128
    1856:	9f e3       	ldi	r25, 0x3F	; 63
    1858:	cd cd       	rjmp	.-1126   	; 0x13f4 <__divsf3>
    185a:	a2 ce       	rjmp	.-700    	; 0x15a0 <__fp_inf>
    185c:	ac c0       	rjmp	.+344    	; 0x19b6 <__fp_mpack>

0000185e <ldexp>:
    185e:	d0 de       	rcall	.-608    	; 0x1600 <__fp_splitA>
    1860:	e8 f3       	brcs	.-6      	; 0x185c <inverse+0x10>
    1862:	99 23       	and	r25, r25
    1864:	d9 f3       	breq	.-10     	; 0x185c <inverse+0x10>
    1866:	94 0f       	add	r25, r20
    1868:	51 1d       	adc	r21, r1
    186a:	bb f3       	brvs	.-18     	; 0x185a <inverse+0xe>
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	50 40       	sbci	r21, 0x00	; 0
    1870:	94 f0       	brlt	.+36     	; 0x1896 <ldexp+0x38>
    1872:	59 f0       	breq	.+22     	; 0x188a <ldexp+0x2c>
    1874:	88 23       	and	r24, r24
    1876:	32 f0       	brmi	.+12     	; 0x1884 <ldexp+0x26>
    1878:	66 0f       	add	r22, r22
    187a:	77 1f       	adc	r23, r23
    187c:	88 1f       	adc	r24, r24
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	50 40       	sbci	r21, 0x00	; 0
    1882:	c1 f7       	brne	.-16     	; 0x1874 <ldexp+0x16>
    1884:	9e 3f       	cpi	r25, 0xFE	; 254
    1886:	51 05       	cpc	r21, r1
    1888:	44 f7       	brge	.-48     	; 0x185a <inverse+0xe>
    188a:	88 0f       	add	r24, r24
    188c:	91 1d       	adc	r25, r1
    188e:	96 95       	lsr	r25
    1890:	87 95       	ror	r24
    1892:	97 f9       	bld	r25, 7
    1894:	08 95       	ret
    1896:	5f 3f       	cpi	r21, 0xFF	; 255
    1898:	ac f0       	brlt	.+42     	; 0x18c4 <ldexp+0x66>
    189a:	98 3e       	cpi	r25, 0xE8	; 232
    189c:	9c f0       	brlt	.+38     	; 0x18c4 <ldexp+0x66>
    189e:	bb 27       	eor	r27, r27
    18a0:	86 95       	lsr	r24
    18a2:	77 95       	ror	r23
    18a4:	67 95       	ror	r22
    18a6:	b7 95       	ror	r27
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <ldexp+0x4e>
    18aa:	b1 60       	ori	r27, 0x01	; 1
    18ac:	93 95       	inc	r25
    18ae:	c1 f7       	brne	.-16     	; 0x18a0 <ldexp+0x42>
    18b0:	bb 0f       	add	r27, r27
    18b2:	58 f7       	brcc	.-42     	; 0x188a <ldexp+0x2c>
    18b4:	11 f4       	brne	.+4      	; 0x18ba <ldexp+0x5c>
    18b6:	60 ff       	sbrs	r22, 0
    18b8:	e8 cf       	rjmp	.-48     	; 0x188a <ldexp+0x2c>
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	e3 cf       	rjmp	.-58     	; 0x188a <ldexp+0x2c>
    18c4:	b8 ce       	rjmp	.-656    	; 0x1636 <__fp_szero>
    18c6:	0e f0       	brts	.+2      	; 0x18ca <ldexp+0x6c>
    18c8:	76 c0       	rjmp	.+236    	; 0x19b6 <__fp_mpack>
    18ca:	70 ce       	rjmp	.-800    	; 0x15ac <__fp_nan>
    18cc:	68 94       	set
    18ce:	68 ce       	rjmp	.-816    	; 0x15a0 <__fp_inf>

000018d0 <log>:
    18d0:	97 de       	rcall	.-722    	; 0x1600 <__fp_splitA>
    18d2:	c8 f3       	brcs	.-14     	; 0x18c6 <ldexp+0x68>
    18d4:	99 23       	and	r25, r25
    18d6:	d1 f3       	breq	.-12     	; 0x18cc <ldexp+0x6e>
    18d8:	c6 f3       	brts	.-16     	; 0x18ca <ldexp+0x6c>
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	1f 93       	push	r17
    18e0:	0f 93       	push	r16
    18e2:	ff 92       	push	r15
    18e4:	c9 2f       	mov	r28, r25
    18e6:	dd 27       	eor	r29, r29
    18e8:	88 23       	and	r24, r24
    18ea:	2a f0       	brmi	.+10     	; 0x18f6 <log+0x26>
    18ec:	21 97       	sbiw	r28, 0x01	; 1
    18ee:	66 0f       	add	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	da f7       	brpl	.-10     	; 0x18ec <log+0x1c>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e8       	ldi	r20, 0x80	; 128
    18fc:	5f eb       	ldi	r21, 0xBF	; 191
    18fe:	9f e3       	ldi	r25, 0x3F	; 63
    1900:	88 39       	cpi	r24, 0x98	; 152
    1902:	20 f0       	brcs	.+8      	; 0x190c <log+0x3c>
    1904:	80 3e       	cpi	r24, 0xE0	; 224
    1906:	30 f0       	brcs	.+12     	; 0x1914 <log+0x44>
    1908:	21 96       	adiw	r28, 0x01	; 1
    190a:	8f 77       	andi	r24, 0x7F	; 127
    190c:	0f dd       	rcall	.-1506   	; 0x132c <__addsf3>
    190e:	e0 e4       	ldi	r30, 0x40	; 64
    1910:	f1 e0       	ldi	r31, 0x01	; 1
    1912:	03 c0       	rjmp	.+6      	; 0x191a <log+0x4a>
    1914:	0b dd       	rcall	.-1514   	; 0x132c <__addsf3>
    1916:	ed e6       	ldi	r30, 0x6D	; 109
    1918:	f1 e0       	ldi	r31, 0x01	; 1
    191a:	73 df       	rcall	.-282    	; 0x1802 <__fp_powser>
    191c:	8b 01       	movw	r16, r22
    191e:	be 01       	movw	r22, r28
    1920:	ec 01       	movw	r28, r24
    1922:	fb 2e       	mov	r15, r27
    1924:	6f 57       	subi	r22, 0x7F	; 127
    1926:	71 09       	sbc	r23, r1
    1928:	75 95       	asr	r23
    192a:	77 1f       	adc	r23, r23
    192c:	88 0b       	sbc	r24, r24
    192e:	99 0b       	sbc	r25, r25
    1930:	fc dd       	rcall	.-1032   	; 0x152a <__floatsisf>
    1932:	28 e1       	ldi	r18, 0x18	; 24
    1934:	32 e7       	ldi	r19, 0x72	; 114
    1936:	41 e3       	ldi	r20, 0x31	; 49
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	8f de       	rcall	.-738    	; 0x165a <__mulsf3x>
    193c:	af 2d       	mov	r26, r15
    193e:	98 01       	movw	r18, r16
    1940:	ae 01       	movw	r20, r28
    1942:	ff 90       	pop	r15
    1944:	0f 91       	pop	r16
    1946:	1f 91       	pop	r17
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	00 dd       	rcall	.-1536   	; 0x134e <__addsf3x>
    194e:	3f ce       	rjmp	.-898    	; 0x15ce <__fp_round>

00001950 <modf>:
    1950:	fa 01       	movw	r30, r20
    1952:	dc 01       	movw	r26, r24
    1954:	aa 0f       	add	r26, r26
    1956:	bb 1f       	adc	r27, r27
    1958:	9b 01       	movw	r18, r22
    195a:	ac 01       	movw	r20, r24
    195c:	bf 57       	subi	r27, 0x7F	; 127
    195e:	28 f4       	brcc	.+10     	; 0x196a <modf+0x1a>
    1960:	22 27       	eor	r18, r18
    1962:	33 27       	eor	r19, r19
    1964:	44 27       	eor	r20, r20
    1966:	50 78       	andi	r21, 0x80	; 128
    1968:	1f c0       	rjmp	.+62     	; 0x19a8 <modf+0x58>
    196a:	b7 51       	subi	r27, 0x17	; 23
    196c:	88 f4       	brcc	.+34     	; 0x1990 <modf+0x40>
    196e:	ab 2f       	mov	r26, r27
    1970:	00 24       	eor	r0, r0
    1972:	46 95       	lsr	r20
    1974:	37 95       	ror	r19
    1976:	27 95       	ror	r18
    1978:	01 1c       	adc	r0, r1
    197a:	a3 95       	inc	r26
    197c:	d2 f3       	brmi	.-12     	; 0x1972 <modf+0x22>
    197e:	00 20       	and	r0, r0
    1980:	69 f0       	breq	.+26     	; 0x199c <modf+0x4c>
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	44 1f       	adc	r20, r20
    1988:	b3 95       	inc	r27
    198a:	da f3       	brmi	.-10     	; 0x1982 <modf+0x32>
    198c:	0d d0       	rcall	.+26     	; 0x19a8 <modf+0x58>
    198e:	cd cc       	rjmp	.-1638   	; 0x132a <__subsf3>
    1990:	61 30       	cpi	r22, 0x01	; 1
    1992:	71 05       	cpc	r23, r1
    1994:	a0 e8       	ldi	r26, 0x80	; 128
    1996:	8a 07       	cpc	r24, r26
    1998:	b9 46       	sbci	r27, 0x69	; 105
    199a:	30 f4       	brcc	.+12     	; 0x19a8 <modf+0x58>
    199c:	9b 01       	movw	r18, r22
    199e:	ac 01       	movw	r20, r24
    19a0:	66 27       	eor	r22, r22
    19a2:	77 27       	eor	r23, r23
    19a4:	88 27       	eor	r24, r24
    19a6:	90 78       	andi	r25, 0x80	; 128
    19a8:	30 96       	adiw	r30, 0x00	; 0
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <modf+0x64>
    19ac:	20 83       	st	Z, r18
    19ae:	31 83       	std	Z+1, r19	; 0x01
    19b0:	42 83       	std	Z+2, r20	; 0x02
    19b2:	53 83       	std	Z+3, r21	; 0x03
    19b4:	08 95       	ret

000019b6 <__fp_mpack>:
    19b6:	9f 3f       	cpi	r25, 0xFF	; 255
    19b8:	31 f0       	breq	.+12     	; 0x19c6 <__fp_mpack_finite+0xc>

000019ba <__fp_mpack_finite>:
    19ba:	91 50       	subi	r25, 0x01	; 1
    19bc:	20 f4       	brcc	.+8      	; 0x19c6 <__fp_mpack_finite+0xc>
    19be:	87 95       	ror	r24
    19c0:	77 95       	ror	r23
    19c2:	67 95       	ror	r22
    19c4:	b7 95       	ror	r27
    19c6:	88 0f       	add	r24, r24
    19c8:	91 1d       	adc	r25, r1
    19ca:	96 95       	lsr	r25
    19cc:	87 95       	ror	r24
    19ce:	97 f9       	bld	r25, 7
    19d0:	08 95       	ret

000019d2 <__udivmodsi4>:
    19d2:	a1 e2       	ldi	r26, 0x21	; 33
    19d4:	1a 2e       	mov	r1, r26
    19d6:	aa 1b       	sub	r26, r26
    19d8:	bb 1b       	sub	r27, r27
    19da:	fd 01       	movw	r30, r26
    19dc:	0d c0       	rjmp	.+26     	; 0x19f8 <__udivmodsi4_ep>

000019de <__udivmodsi4_loop>:
    19de:	aa 1f       	adc	r26, r26
    19e0:	bb 1f       	adc	r27, r27
    19e2:	ee 1f       	adc	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	a2 17       	cp	r26, r18
    19e8:	b3 07       	cpc	r27, r19
    19ea:	e4 07       	cpc	r30, r20
    19ec:	f5 07       	cpc	r31, r21
    19ee:	20 f0       	brcs	.+8      	; 0x19f8 <__udivmodsi4_ep>
    19f0:	a2 1b       	sub	r26, r18
    19f2:	b3 0b       	sbc	r27, r19
    19f4:	e4 0b       	sbc	r30, r20
    19f6:	f5 0b       	sbc	r31, r21

000019f8 <__udivmodsi4_ep>:
    19f8:	66 1f       	adc	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	1a 94       	dec	r1
    1a02:	69 f7       	brne	.-38     	; 0x19de <__udivmodsi4_loop>
    1a04:	60 95       	com	r22
    1a06:	70 95       	com	r23
    1a08:	80 95       	com	r24
    1a0a:	90 95       	com	r25
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	bd 01       	movw	r22, r26
    1a12:	cf 01       	movw	r24, r30
    1a14:	08 95       	ret

00001a16 <__tablejump2__>:
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	8b bf       	out	0x3b, r24	; 59
    1a1e:	07 90       	elpm	r0, Z+
    1a20:	f6 91       	elpm	r31, Z
    1a22:	e0 2d       	mov	r30, r0
    1a24:	19 94       	eijmp

00001a26 <__muluhisi3>:
    1a26:	c5 d0       	rcall	.+394    	; 0x1bb2 <__umulhisi3>
    1a28:	a5 9f       	mul	r26, r21
    1a2a:	90 0d       	add	r25, r0
    1a2c:	b4 9f       	mul	r27, r20
    1a2e:	90 0d       	add	r25, r0
    1a30:	a4 9f       	mul	r26, r20
    1a32:	80 0d       	add	r24, r0
    1a34:	91 1d       	adc	r25, r1
    1a36:	11 24       	eor	r1, r1
    1a38:	08 95       	ret

00001a3a <__umoddi3>:
    1a3a:	68 94       	set
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <__udivdi3_umoddi3>

00001a3e <__udivdi3>:
    1a3e:	e8 94       	clt

00001a40 <__udivdi3_umoddi3>:
    1a40:	8f 92       	push	r8
    1a42:	9f 92       	push	r9
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	05 d0       	rcall	.+10     	; 0x1a54 <__udivmod64>
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	9f 90       	pop	r9
    1a50:	8f 90       	pop	r8
    1a52:	08 95       	ret

00001a54 <__udivmod64>:
    1a54:	88 24       	eor	r8, r8
    1a56:	99 24       	eor	r9, r9
    1a58:	f4 01       	movw	r30, r8
    1a5a:	e4 01       	movw	r28, r8
    1a5c:	b0 e4       	ldi	r27, 0x40	; 64
    1a5e:	9f 93       	push	r25
    1a60:	aa 27       	eor	r26, r26
    1a62:	9a 15       	cp	r25, r10
    1a64:	8b 04       	cpc	r8, r11
    1a66:	9c 04       	cpc	r9, r12
    1a68:	ed 05       	cpc	r30, r13
    1a6a:	fe 05       	cpc	r31, r14
    1a6c:	cf 05       	cpc	r28, r15
    1a6e:	d0 07       	cpc	r29, r16
    1a70:	a1 07       	cpc	r26, r17
    1a72:	98 f4       	brcc	.+38     	; 0x1a9a <__udivmod64+0x46>
    1a74:	ad 2f       	mov	r26, r29
    1a76:	dc 2f       	mov	r29, r28
    1a78:	cf 2f       	mov	r28, r31
    1a7a:	fe 2f       	mov	r31, r30
    1a7c:	e9 2d       	mov	r30, r9
    1a7e:	98 2c       	mov	r9, r8
    1a80:	89 2e       	mov	r8, r25
    1a82:	98 2f       	mov	r25, r24
    1a84:	87 2f       	mov	r24, r23
    1a86:	76 2f       	mov	r23, r22
    1a88:	65 2f       	mov	r22, r21
    1a8a:	54 2f       	mov	r21, r20
    1a8c:	43 2f       	mov	r20, r19
    1a8e:	32 2f       	mov	r19, r18
    1a90:	22 27       	eor	r18, r18
    1a92:	b8 50       	subi	r27, 0x08	; 8
    1a94:	31 f7       	brne	.-52     	; 0x1a62 <__udivmod64+0xe>
    1a96:	bf 91       	pop	r27
    1a98:	27 c0       	rjmp	.+78     	; 0x1ae8 <__udivmod64+0x94>
    1a9a:	1b 2e       	mov	r1, r27
    1a9c:	bf 91       	pop	r27
    1a9e:	bb 27       	eor	r27, r27
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	44 1f       	adc	r20, r20
    1aa6:	55 1f       	adc	r21, r21
    1aa8:	66 1f       	adc	r22, r22
    1aaa:	77 1f       	adc	r23, r23
    1aac:	88 1f       	adc	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	88 1c       	adc	r8, r8
    1ab2:	99 1c       	adc	r9, r9
    1ab4:	ee 1f       	adc	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	cc 1f       	adc	r28, r28
    1aba:	dd 1f       	adc	r29, r29
    1abc:	aa 1f       	adc	r26, r26
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	8a 14       	cp	r8, r10
    1ac2:	9b 04       	cpc	r9, r11
    1ac4:	ec 05       	cpc	r30, r12
    1ac6:	fd 05       	cpc	r31, r13
    1ac8:	ce 05       	cpc	r28, r14
    1aca:	df 05       	cpc	r29, r15
    1acc:	a0 07       	cpc	r26, r16
    1ace:	b1 07       	cpc	r27, r17
    1ad0:	48 f0       	brcs	.+18     	; 0x1ae4 <__udivmod64+0x90>
    1ad2:	8a 18       	sub	r8, r10
    1ad4:	9b 08       	sbc	r9, r11
    1ad6:	ec 09       	sbc	r30, r12
    1ad8:	fd 09       	sbc	r31, r13
    1ada:	ce 09       	sbc	r28, r14
    1adc:	df 09       	sbc	r29, r15
    1ade:	a0 0b       	sbc	r26, r16
    1ae0:	b1 0b       	sbc	r27, r17
    1ae2:	21 60       	ori	r18, 0x01	; 1
    1ae4:	1a 94       	dec	r1
    1ae6:	e1 f6       	brne	.-72     	; 0x1aa0 <__udivmod64+0x4c>
    1ae8:	2e f4       	brtc	.+10     	; 0x1af4 <__udivmod64+0xa0>
    1aea:	94 01       	movw	r18, r8
    1aec:	af 01       	movw	r20, r30
    1aee:	be 01       	movw	r22, r28
    1af0:	cd 01       	movw	r24, r26
    1af2:	00 0c       	add	r0, r0
    1af4:	08 95       	ret

00001af6 <__ashldi3>:
    1af6:	0f 93       	push	r16
    1af8:	08 30       	cpi	r16, 0x08	; 8
    1afa:	90 f0       	brcs	.+36     	; 0x1b20 <__ashldi3+0x2a>
    1afc:	98 2f       	mov	r25, r24
    1afe:	87 2f       	mov	r24, r23
    1b00:	76 2f       	mov	r23, r22
    1b02:	65 2f       	mov	r22, r21
    1b04:	54 2f       	mov	r21, r20
    1b06:	43 2f       	mov	r20, r19
    1b08:	32 2f       	mov	r19, r18
    1b0a:	22 27       	eor	r18, r18
    1b0c:	08 50       	subi	r16, 0x08	; 8
    1b0e:	f4 cf       	rjmp	.-24     	; 0x1af8 <__ashldi3+0x2>
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	44 1f       	adc	r20, r20
    1b16:	55 1f       	adc	r21, r21
    1b18:	66 1f       	adc	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 95       	dec	r16
    1b22:	b2 f7       	brpl	.-20     	; 0x1b10 <__ashldi3+0x1a>
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <__ashrdi3>:
    1b28:	97 fb       	bst	r25, 7
    1b2a:	10 f8       	bld	r1, 0

00001b2c <__lshrdi3>:
    1b2c:	16 94       	lsr	r1
    1b2e:	00 08       	sbc	r0, r0
    1b30:	0f 93       	push	r16
    1b32:	08 30       	cpi	r16, 0x08	; 8
    1b34:	98 f0       	brcs	.+38     	; 0x1b5c <__lshrdi3+0x30>
    1b36:	08 50       	subi	r16, 0x08	; 8
    1b38:	23 2f       	mov	r18, r19
    1b3a:	34 2f       	mov	r19, r20
    1b3c:	45 2f       	mov	r20, r21
    1b3e:	56 2f       	mov	r21, r22
    1b40:	67 2f       	mov	r22, r23
    1b42:	78 2f       	mov	r23, r24
    1b44:	89 2f       	mov	r24, r25
    1b46:	90 2d       	mov	r25, r0
    1b48:	f4 cf       	rjmp	.-24     	; 0x1b32 <__lshrdi3+0x6>
    1b4a:	05 94       	asr	r0
    1b4c:	97 95       	ror	r25
    1b4e:	87 95       	ror	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	57 95       	ror	r21
    1b56:	47 95       	ror	r20
    1b58:	37 95       	ror	r19
    1b5a:	27 95       	ror	r18
    1b5c:	0a 95       	dec	r16
    1b5e:	aa f7       	brpl	.-22     	; 0x1b4a <__lshrdi3+0x1e>
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <__adddi3>:
    1b64:	2a 0d       	add	r18, r10
    1b66:	3b 1d       	adc	r19, r11
    1b68:	4c 1d       	adc	r20, r12
    1b6a:	5d 1d       	adc	r21, r13
    1b6c:	6e 1d       	adc	r22, r14
    1b6e:	7f 1d       	adc	r23, r15
    1b70:	80 1f       	adc	r24, r16
    1b72:	91 1f       	adc	r25, r17
    1b74:	08 95       	ret

00001b76 <__adddi3_s8>:
    1b76:	00 24       	eor	r0, r0
    1b78:	a7 fd       	sbrc	r26, 7
    1b7a:	00 94       	com	r0
    1b7c:	2a 0f       	add	r18, r26
    1b7e:	30 1d       	adc	r19, r0
    1b80:	40 1d       	adc	r20, r0
    1b82:	50 1d       	adc	r21, r0
    1b84:	60 1d       	adc	r22, r0
    1b86:	70 1d       	adc	r23, r0
    1b88:	80 1d       	adc	r24, r0
    1b8a:	90 1d       	adc	r25, r0
    1b8c:	08 95       	ret

00001b8e <__subdi3>:
    1b8e:	2a 19       	sub	r18, r10
    1b90:	3b 09       	sbc	r19, r11
    1b92:	4c 09       	sbc	r20, r12
    1b94:	5d 09       	sbc	r21, r13
    1b96:	6e 09       	sbc	r22, r14
    1b98:	7f 09       	sbc	r23, r15
    1b9a:	80 0b       	sbc	r24, r16
    1b9c:	91 0b       	sbc	r25, r17
    1b9e:	08 95       	ret

00001ba0 <__cmpdi2>:
    1ba0:	2a 15       	cp	r18, r10
    1ba2:	3b 05       	cpc	r19, r11
    1ba4:	4c 05       	cpc	r20, r12
    1ba6:	5d 05       	cpc	r21, r13
    1ba8:	6e 05       	cpc	r22, r14
    1baa:	7f 05       	cpc	r23, r15
    1bac:	80 07       	cpc	r24, r16
    1bae:	91 07       	cpc	r25, r17
    1bb0:	08 95       	ret

00001bb2 <__umulhisi3>:
    1bb2:	a2 9f       	mul	r26, r18
    1bb4:	b0 01       	movw	r22, r0
    1bb6:	b3 9f       	mul	r27, r19
    1bb8:	c0 01       	movw	r24, r0
    1bba:	a3 9f       	mul	r26, r19
    1bbc:	70 0d       	add	r23, r0
    1bbe:	81 1d       	adc	r24, r1
    1bc0:	11 24       	eor	r1, r1
    1bc2:	91 1d       	adc	r25, r1
    1bc4:	b2 9f       	mul	r27, r18
    1bc6:	70 0d       	add	r23, r0
    1bc8:	81 1d       	adc	r24, r1
    1bca:	11 24       	eor	r1, r1
    1bcc:	91 1d       	adc	r25, r1
    1bce:	08 95       	ret

00001bd0 <__itoa_ncheck>:
    1bd0:	bb 27       	eor	r27, r27
    1bd2:	4a 30       	cpi	r20, 0x0A	; 10
    1bd4:	31 f4       	brne	.+12     	; 0x1be2 <__itoa_ncheck+0x12>
    1bd6:	99 23       	and	r25, r25
    1bd8:	22 f4       	brpl	.+8      	; 0x1be2 <__itoa_ncheck+0x12>
    1bda:	bd e2       	ldi	r27, 0x2D	; 45
    1bdc:	90 95       	com	r25
    1bde:	81 95       	neg	r24
    1be0:	9f 4f       	sbci	r25, 0xFF	; 255
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <__utoa_common>

00001be4 <__utoa_ncheck>:
    1be4:	bb 27       	eor	r27, r27

00001be6 <__utoa_common>:
    1be6:	fb 01       	movw	r30, r22
    1be8:	55 27       	eor	r21, r21
    1bea:	aa 27       	eor	r26, r26
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	aa 1f       	adc	r26, r26
    1bf2:	a4 17       	cp	r26, r20
    1bf4:	10 f0       	brcs	.+4      	; 0x1bfa <__utoa_common+0x14>
    1bf6:	a4 1b       	sub	r26, r20
    1bf8:	83 95       	inc	r24
    1bfa:	50 51       	subi	r21, 0x10	; 16
    1bfc:	b9 f7       	brne	.-18     	; 0x1bec <__utoa_common+0x6>
    1bfe:	a0 5d       	subi	r26, 0xD0	; 208
    1c00:	aa 33       	cpi	r26, 0x3A	; 58
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <__utoa_common+0x20>
    1c04:	a9 5d       	subi	r26, 0xD9	; 217
    1c06:	a1 93       	st	Z+, r26
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	79 f7       	brne	.-34     	; 0x1bea <__utoa_common+0x4>
    1c0c:	b1 11       	cpse	r27, r1
    1c0e:	b1 93       	st	Z+, r27
    1c10:	11 92       	st	Z+, r1
    1c12:	cb 01       	movw	r24, r22
    1c14:	00 c0       	rjmp	.+0      	; 0x1c16 <strrev>

00001c16 <strrev>:
    1c16:	dc 01       	movw	r26, r24
    1c18:	fc 01       	movw	r30, r24
    1c1a:	67 2f       	mov	r22, r23
    1c1c:	71 91       	ld	r23, Z+
    1c1e:	77 23       	and	r23, r23
    1c20:	e1 f7       	brne	.-8      	; 0x1c1a <strrev+0x4>
    1c22:	32 97       	sbiw	r30, 0x02	; 2
    1c24:	04 c0       	rjmp	.+8      	; 0x1c2e <strrev+0x18>
    1c26:	7c 91       	ld	r23, X
    1c28:	6d 93       	st	X+, r22
    1c2a:	70 83       	st	Z, r23
    1c2c:	62 91       	ld	r22, -Z
    1c2e:	ae 17       	cp	r26, r30
    1c30:	bf 07       	cpc	r27, r31
    1c32:	c8 f3       	brcs	.-14     	; 0x1c26 <strrev+0x10>
    1c34:	08 95       	ret

00001c36 <_exit>:
    1c36:	f8 94       	cli

00001c38 <__stop_program>:
    1c38:	ff cf       	rjmp	.-2      	; 0x1c38 <__stop_program>
