
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001454  000014e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800066  00800066  000014ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000955  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000565  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056f  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000538  00000000  00000000  00003273  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000037ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_1>
       8:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 05 	call	0xb5a	; 0xb5a <main>
      8a:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_LED>:
	sei();									//Enable global interrupts
}


void init_LED(){
	DDRB |= 0b10000011;
      92:	87 b3       	in	r24, 0x17	; 23
      94:	83 68       	ori	r24, 0x83	; 131
      96:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      98:	84 b3       	in	r24, 0x14	; 20
      9a:	80 67       	ori	r24, 0x70	; 112
      9c:	84 bb       	out	0x14, r24	; 20
      9e:	08 95       	ret

000000a0 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      a0:	83 b7       	in	r24, 0x33	; 51
      a2:	81 60       	ori	r24, 0x01	; 1
      a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      a6:	83 b7       	in	r24, 0x33	; 51
      a8:	82 60       	ori	r24, 0x02	; 2
      aa:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      ac:	89 b7       	in	r24, 0x39	; 57
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      b2:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <t0TotalOverflow>
      b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <t0TotalOverflow+0x1>
      bc:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <t0TotalOverflow+0x2>
      c0:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <t0TotalOverflow+0x3>
      c4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <t0TotalOverflow+0x4>
      c8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <t0TotalOverflow+0x5>
      cc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <t0TotalOverflow+0x6>
      d0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <t0TotalOverflow+0x7>
      d4:	08 95       	ret

000000d6 <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	2f 93       	push	r18
      e2:	3f 93       	push	r19
      e4:	4f 93       	push	r20
      e6:	5f 93       	push	r21
      e8:	6f 93       	push	r22
      ea:	7f 93       	push	r23
      ec:	8f 93       	push	r24
      ee:	9f 93       	push	r25
      f0:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
      f2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <t0TotalOverflow>
      f6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <t0TotalOverflow+0x1>
      fa:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <t0TotalOverflow+0x2>
      fe:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <t0TotalOverflow+0x3>
     102:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <t0TotalOverflow+0x4>
     106:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <t0TotalOverflow+0x5>
     10a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <t0TotalOverflow+0x6>
     10e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <t0TotalOverflow+0x7>
     112:	a1 e0       	ldi	r26, 0x01	; 1
     114:	0e 94 ef 09 	call	0x13de	; 0x13de <__adddi3_s8>
     118:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <t0TotalOverflow>
     11c:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <t0TotalOverflow+0x1>
     120:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <t0TotalOverflow+0x2>
     124:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <t0TotalOverflow+0x3>
     128:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <t0TotalOverflow+0x4>
     12c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <t0TotalOverflow+0x5>
     130:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <t0TotalOverflow+0x6>
     134:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <t0TotalOverflow+0x7>
}
     138:	af 91       	pop	r26
     13a:	9f 91       	pop	r25
     13c:	8f 91       	pop	r24
     13e:	7f 91       	pop	r23
     140:	6f 91       	pop	r22
     142:	5f 91       	pop	r21
     144:	4f 91       	pop	r20
     146:	3f 91       	pop	r19
     148:	2f 91       	pop	r18
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <micros>:


uint64_t micros(){
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     164:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     166:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <t0TotalOverflow>
     16a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <t0TotalOverflow+0x1>
     16e:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <t0TotalOverflow+0x2>
     172:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <t0TotalOverflow+0x3>
     176:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <t0TotalOverflow+0x4>
     17a:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <t0TotalOverflow+0x5>
     17e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <t0TotalOverflow+0x6>
     182:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     186:	e0 e0       	ldi	r30, 0x00	; 0
     188:	fa 2f       	mov	r31, r26
     18a:	ff 0f       	add	r31, r31
     18c:	ff 0f       	add	r31, r31
     18e:	ff 0f       	add	r31, r31
     190:	ff 23       	and	r31, r31
     192:	14 f4       	brge	.+4      	; 0x198 <micros+0x44>
     194:	e1 50       	subi	r30, 0x01	; 1
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	ef 2f       	mov	r30, r31
     19a:	ee 0f       	add	r30, r30
     19c:	ee 0b       	sbc	r30, r30
     19e:	0b e0       	ldi	r16, 0x0B	; 11
     1a0:	0e 94 cd 09 	call	0x139a	; 0x139a <__ashldi3>
     1a4:	a2 2e       	mov	r10, r18
     1a6:	b3 2e       	mov	r11, r19
     1a8:	c4 2e       	mov	r12, r20
     1aa:	d5 2e       	mov	r13, r21
     1ac:	e6 2e       	mov	r14, r22
     1ae:	f7 2e       	mov	r15, r23
     1b0:	08 2f       	mov	r16, r24
     1b2:	19 2f       	mov	r17, r25
     1b4:	2f 2f       	mov	r18, r31
     1b6:	3e 2f       	mov	r19, r30
     1b8:	4e 2f       	mov	r20, r30
     1ba:	5e 2f       	mov	r21, r30
     1bc:	6e 2f       	mov	r22, r30
     1be:	7e 2f       	mov	r23, r30
     1c0:	8e 2f       	mov	r24, r30
     1c2:	9e 2f       	mov	r25, r30
     1c4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__adddi3>
}
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	df 90       	pop	r13
     1d2:	cf 90       	pop	r12
     1d4:	bf 90       	pop	r11
     1d6:	af 90       	pop	r10
     1d8:	08 95       	ret

000001da <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     1da:	81 b3       	in	r24, 0x11	; 17
     1dc:	80 63       	ori	r24, 0x30	; 48
     1de:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     1e0:	81 b3       	in	r24, 0x11	; 17
     1e2:	83 7f       	andi	r24, 0xF3	; 243
     1e4:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     1e6:	84 b3       	in	r24, 0x14	; 20
     1e8:	8c 60       	ori	r24, 0x0C	; 12
     1ea:	84 bb       	out	0x14, r24	; 20
     1ec:	08 95       	ret

000001ee <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     1ee:	8f b5       	in	r24, 0x2f	; 47
     1f0:	80 68       	ori	r24, 0x80	; 128
     1f2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     1f4:	8f b5       	in	r24, 0x2f	; 47
     1f6:	80 62       	ori	r24, 0x20	; 32
     1f8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     1fa:	8f b5       	in	r24, 0x2f	; 47
     1fc:	82 60       	ori	r24, 0x02	; 2
     1fe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     200:	8e b5       	in	r24, 0x2e	; 46
     202:	80 61       	ori	r24, 0x10	; 16
     204:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     206:	8e b5       	in	r24, 0x2e	; 46
     208:	81 60       	ori	r24, 0x01	; 1
     20a:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	99 ef       	ldi	r25, 0xF9	; 249
     210:	97 bd       	out	0x27, r25	; 39
     212:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     214:	1b bc       	out	0x2b, r1	; 43
     216:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     218:	19 bc       	out	0x29, r1	; 41
     21a:	18 bc       	out	0x28, r1	; 40
     21c:	08 95       	ret

0000021e <init_motor_encoder>:
}


void init_motor_encoder(){
	motorEncoderLVal = 0;
     21e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <motorEncoderLVal+0x1>
     222:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <motorEncoderLVal>
	motorEncoderRVal = 0;
     226:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <motorEncoderRVal+0x1>
     22a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <motorEncoderRVal>
	MCUCR |= (1 << ISC00);
     22e:	85 b7       	in	r24, 0x35	; 53
     230:	81 60       	ori	r24, 0x01	; 1
     232:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);
     234:	85 b7       	in	r24, 0x35	; 53
     236:	84 60       	ori	r24, 0x04	; 4
     238:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     23a:	8b b7       	in	r24, 0x3b	; 59
     23c:	80 64       	ori	r24, 0x40	; 64
     23e:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);
     240:	8b b7       	in	r24, 0x3b	; 59
     242:	80 68       	ori	r24, 0x80	; 128
     244:	8b bf       	out	0x3b, r24	; 59
     246:	08 95       	ret

00000248 <init_motor>:
	return microsReturnValue;																						//Return the calculated value
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     248:	0e 94 ed 00 	call	0x1da	; 0x1da <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     24c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     250:	0e 94 0f 01 	call	0x21e	; 0x21e <init_motor_encoder>
     254:	08 95       	ret

00000256 <__vector_1>:
	GICR |= (1 << INT0);
	GICR |= (1 << INT1);
}


ISR(INT0_vect){
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	0f 92       	push	r0
     25e:	11 24       	eor	r1, r1
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
	motorEncoderLVal++;
     264:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <motorEncoderLVal>
     268:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <motorEncoderLVal+0x1>
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <motorEncoderLVal+0x1>
     272:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <motorEncoderLVal>
}
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <__vector_2>:


ISR(INT1_vect){
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	8f 93       	push	r24
     290:	9f 93       	push	r25
	motorEncoderRVal++;
     292:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <motorEncoderRVal>
     296:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <motorEncoderRVal+0x1>
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <motorEncoderRVal+0x1>
     2a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <motorEncoderRVal>
}
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti

000002b2 <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){
     2b2:	89 2b       	or	r24, r25
     2b4:	39 f0       	breq	.+14     	; 0x2c4 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);
     2b6:	8b b7       	in	r24, 0x3b	; 59
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);
     2bc:	8b b7       	in	r24, 0x3b	; 59
     2be:	80 68       	ori	r24, 0x80	; 128
     2c0:	8b bf       	out	0x3b, r24	; 59
     2c2:	08 95       	ret
	}else{
		GICR &= ~(1 << INT0);
     2c4:	8b b7       	in	r24, 0x3b	; 59
     2c6:	8f 7b       	andi	r24, 0xBF	; 191
     2c8:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);
     2ca:	8b b7       	in	r24, 0x3b	; 59
     2cc:	8f 77       	andi	r24, 0x7F	; 127
     2ce:	8b bf       	out	0x3b, r24	; 59
     2d0:	08 95       	ret

000002d2 <motorDriver>:
	}
}


int motorDriver(int64_t driveSpeed, int driveDirection, int turnDirection){
     2d2:	2f 92       	push	r2
     2d4:	3f 92       	push	r3
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	67 97       	sbiw	r28, 0x17	; 23
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	32 2e       	mov	r3, r18
     308:	43 2e       	mov	r4, r19
     30a:	54 2e       	mov	r5, r20
     30c:	65 2e       	mov	r6, r21
     30e:	76 2e       	mov	r7, r22
     310:	79 83       	std	Y+1, r23	; 0x01
     312:	8a 83       	std	Y+2, r24	; 0x02
     314:	29 2e       	mov	r2, r25
     316:	1e 8b       	std	Y+22, r17	; 0x16
     318:	0d 8b       	std	Y+21, r16	; 0x15
     31a:	47 01       	movw	r8, r14
	
	static uint32_t leftMotorSpeed = 0;
	static uint32_t rightMotorSpeed = 0;
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     31c:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     320:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.1806>
     324:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.1806+0x1>
     328:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.1806+0x2>
     32c:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.1806+0x3>
     330:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.1806+0x4>
     334:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.1806+0x5>
     338:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.1806+0x6>
     33c:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.1806+0x7>
     340:	0e 94 04 0a 	call	0x1408	; 0x1408 <__cmpdi2>
     344:	08 f4       	brcc	.+2      	; 0x348 <motorDriver+0x76>
     346:	ee c3       	rjmp	.+2012   	; 0xb24 <__stack+0x2c5>
		return 0;
	}else{
		updateTimer = micros() + updateSpeed;											//If the timer has passed, set new timer and execute the code
     348:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     34c:	29 87       	std	Y+9, r18	; 0x09
     34e:	3a 87       	std	Y+10, r19	; 0x0a
     350:	4b 87       	std	Y+11, r20	; 0x0b
     352:	5c 87       	std	Y+12, r21	; 0x0c
     354:	6d 87       	std	Y+13, r22	; 0x0d
     356:	7e 87       	std	Y+14, r23	; 0x0e
     358:	8f 87       	std	Y+15, r24	; 0x0f
     35a:	98 8b       	std	Y+16, r25	; 0x10
     35c:	20 5c       	subi	r18, 0xC0	; 192
     35e:	32 4f       	sbci	r19, 0xF2	; 242
     360:	4c 4f       	sbci	r20, 0xFC	; 252
     362:	5f 4f       	sbci	r21, 0xFF	; 255
     364:	6f 4f       	sbci	r22, 0xFF	; 255
     366:	7f 4f       	sbci	r23, 0xFF	; 255
     368:	8f 4f       	sbci	r24, 0xFF	; 255
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
     36c:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1806>
     370:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1806+0x1>
     374:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1806+0x2>
     378:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1806+0x3>
     37c:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1806+0x4>
     380:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1806+0x5>
     384:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1806+0x6>
     388:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1806+0x7>
	}
	
	
	//Remap drive speed percentage
	driveSpeed = (driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     38c:	a1 2c       	mov	r10, r1
     38e:	0f 2e       	mov	r0, r31
     390:	f4 e6       	ldi	r31, 0x64	; 100
     392:	bf 2e       	mov	r11, r31
     394:	f0 2d       	mov	r31, r0
     396:	c1 2c       	mov	r12, r1
     398:	d1 2c       	mov	r13, r1
     39a:	e1 2c       	mov	r14, r1
     39c:	f1 2c       	mov	r15, r1
     39e:	00 e0       	ldi	r16, 0x00	; 0
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	23 2d       	mov	r18, r3
     3a4:	34 2d       	mov	r19, r4
     3a6:	45 2d       	mov	r20, r5
     3a8:	56 2d       	mov	r21, r6
     3aa:	67 2d       	mov	r22, r7
     3ac:	79 81       	ldd	r23, Y+1	; 0x01
     3ae:	8a 81       	ldd	r24, Y+2	; 0x02
     3b0:	92 2d       	mov	r25, r2
     3b2:	0e 94 9d 08 	call	0x113a	; 0x113a <__muldi3>
     3b6:	0f 2e       	mov	r0, r31
     3b8:	f4 e6       	ldi	r31, 0x64	; 100
     3ba:	af 2e       	mov	r10, r31
     3bc:	f0 2d       	mov	r31, r0
     3be:	b1 2c       	mov	r11, r1
     3c0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__divdi3>
     3c4:	29 83       	std	Y+1, r18	; 0x01
     3c6:	3a 83       	std	Y+2, r19	; 0x02
     3c8:	24 2e       	mov	r2, r20
     3ca:	35 2e       	mov	r3, r21
     3cc:	46 2e       	mov	r4, r22
     3ce:	57 2e       	mov	r5, r23
     3d0:	68 2e       	mov	r6, r24
     3d2:	79 2e       	mov	r7, r25
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     3d4:	27 38       	cpi	r18, 0x87	; 135
     3d6:	33 41       	sbci	r19, 0x13	; 19
     3d8:	41 05       	cpc	r20, r1
     3da:	51 05       	cpc	r21, r1
     3dc:	61 05       	cpc	r22, r1
     3de:	71 05       	cpc	r23, r1
     3e0:	81 05       	cpc	r24, r1
     3e2:	91 05       	cpc	r25, r1
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <motorDriver+0x116>
     3e6:	44 f4       	brge	.+16     	; 0x3f8 <motorDriver+0x126>
     3e8:	19 82       	std	Y+1, r1	; 0x01
     3ea:	1a 82       	std	Y+2, r1	; 0x02
     3ec:	21 2c       	mov	r2, r1
     3ee:	31 2c       	mov	r3, r1
     3f0:	41 2c       	mov	r4, r1
     3f2:	51 2c       	mov	r5, r1
     3f4:	61 2c       	mov	r6, r1
     3f6:	71 2c       	mov	r7, r1
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     3f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1809>
     3fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1809+0x1>
     400:	2d 89       	ldd	r18, Y+21	; 0x15
     402:	3e 89       	ldd	r19, Y+22	; 0x16
     404:	82 17       	cp	r24, r18
     406:	93 07       	cpc	r25, r19
     408:	59 f1       	breq	.+86     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     40a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1808>
     40e:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1808+0x1>
     412:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1808+0x2>
     416:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1808+0x3>
     41a:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1808+0x4>
     41e:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1808+0x5>
     422:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1808+0x6>
     426:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1808+0x7>
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__cmpdi2_s8>
     430:	79 f4       	brne	.+30     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		driveSpeed = 0;																	//Set the requested speed to 0
	}else if(driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = driveDirection;											//Reverse the driving direction
     432:	8d 89       	ldd	r24, Y+21	; 0x15
     434:	9e 89       	ldd	r25, Y+22	; 0x16
     436:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <currentDriveDirection.1809+0x1>
     43a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentDriveDirection.1809>
		driveSpeed = 0;																	//And remain stationary for this update cycle
     43e:	19 82       	std	Y+1, r1	; 0x01
     440:	1a 82       	std	Y+2, r1	; 0x02
     442:	21 2c       	mov	r2, r1
     444:	31 2c       	mov	r3, r1
     446:	41 2c       	mov	r4, r1
     448:	51 2c       	mov	r5, r1
     44a:	61 2c       	mov	r6, r1
     44c:	71 2c       	mov	r7, r1
     44e:	4d c0       	rjmp	.+154    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		driveSpeed = 0;																	//Set the requested speed to 0
     450:	19 82       	std	Y+1, r1	; 0x01
     452:	1a 82       	std	Y+2, r1	; 0x02
     454:	21 2c       	mov	r2, r1
     456:	31 2c       	mov	r3, r1
     458:	41 2c       	mov	r4, r1
     45a:	51 2c       	mov	r5, r1
     45c:	61 2c       	mov	r6, r1
     45e:	71 2c       	mov	r7, r1
		driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     460:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <currentDriveSpeed.1808>
     464:	9b 83       	std	Y+3, r25	; 0x03
     466:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <currentDriveSpeed.1808+0x1>
     46a:	ac 83       	std	Y+4, r26	; 0x04
     46c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <currentDriveSpeed.1808+0x2>
     470:	ed 83       	std	Y+5, r30	; 0x05
     472:	00 91 73 00 	lds	r16, 0x0073	; 0x800073 <currentDriveSpeed.1808+0x3>
     476:	0e 83       	std	Y+6, r16	; 0x06
     478:	10 91 74 00 	lds	r17, 0x0074	; 0x800074 <currentDriveSpeed.1808+0x4>
     47c:	1f 83       	std	Y+7, r17	; 0x07
     47e:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <currentDriveSpeed.1808+0x5>
     482:	28 87       	std	Y+8, r18	; 0x08
     484:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <currentDriveSpeed.1808+0x6>
     488:	3f 8b       	std	Y+23, r19	; 0x17
     48a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <currentDriveSpeed.1808+0x7>
     48e:	8d 8b       	std	Y+21, r24	; 0x15
     490:	29 81       	ldd	r18, Y+1	; 0x01
     492:	3a 81       	ldd	r19, Y+2	; 0x02
     494:	42 2d       	mov	r20, r2
     496:	53 2d       	mov	r21, r3
     498:	64 2d       	mov	r22, r4
     49a:	75 2d       	mov	r23, r5
     49c:	86 2d       	mov	r24, r6
     49e:	97 2d       	mov	r25, r7
     4a0:	ab 80       	ldd	r10, Y+3	; 0x03
     4a2:	ba 2e       	mov	r11, r26
     4a4:	ce 2e       	mov	r12, r30
     4a6:	d0 2e       	mov	r13, r16
     4a8:	e1 2e       	mov	r14, r17
     4aa:	f8 84       	ldd	r15, Y+8	; 0x08
     4ac:	0f 89       	ldd	r16, Y+23	; 0x17
     4ae:	1d 89       	ldd	r17, Y+21	; 0x15
     4b0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subdi3>
     4b4:	29 8b       	std	Y+17, r18	; 0x11
     4b6:	3a 8b       	std	Y+18, r19	; 0x12
     4b8:	a4 2e       	mov	r10, r20
     4ba:	b5 2e       	mov	r11, r21
     4bc:	06 2f       	mov	r16, r22
     4be:	17 2f       	mov	r17, r23
     4c0:	8b 8b       	std	Y+19, r24	; 0x13
     4c2:	9c 8b       	std	Y+20, r25	; 0x14
     4c4:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatdisf>
     4c8:	6b 01       	movw	r12, r22
     4ca:	7c 01       	movw	r14, r24
     4cc:	a7 01       	movw	r20, r14
     4ce:	96 01       	movw	r18, r12
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 b3 07 	call	0xf66	; 0xf66 <__mulsf3>
     4d8:	0e 94 26 08 	call	0x104c	; 0x104c <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     4dc:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
     4e0:	60 3d       	cpi	r22, 0xD0	; 208
     4e2:	77 40       	sbci	r23, 0x07	; 7
     4e4:	81 05       	cpc	r24, r1
     4e6:	91 05       	cpc	r25, r1
     4e8:	98 f4       	brcc	.+38     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		currentDriveSpeed = driveSpeed;													//Set the current speed to the requested value
     4ea:	e9 81       	ldd	r30, Y+1	; 0x01
     4ec:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <currentDriveSpeed.1808>
     4f0:	0a 81       	ldd	r16, Y+2	; 0x02
     4f2:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <currentDriveSpeed.1808+0x1>
     4f6:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1808+0x2>
     4fa:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1808+0x3>
     4fe:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1808+0x4>
     502:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1808+0x5>
     506:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1808+0x6>
     50a:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1808+0x7>
     50e:	15 c1       	rjmp	.+554    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
	}else{																			//If the difference is more than 2000
		if(driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     510:	29 89       	ldd	r18, Y+17	; 0x11
     512:	3a 89       	ldd	r19, Y+18	; 0x12
     514:	4a 2d       	mov	r20, r10
     516:	5b 2d       	mov	r21, r11
     518:	60 2f       	mov	r22, r16
     51a:	71 2f       	mov	r23, r17
     51c:	8b 89       	ldd	r24, Y+19	; 0x13
     51e:	9c 89       	ldd	r25, Y+20	; 0x14
     520:	a0 e0       	ldi	r26, 0x00	; 0
     522:	0e 94 0d 0a 	call	0x141a	; 0x141a <__cmpdi2_s8>
     526:	0c f0       	brlt	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     528:	6e c0       	rjmp	.+220    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
			if(currentDriveSpeed < driveSpeedThreshold){									//If the speed is less than the threshold
     52a:	2b 81       	ldd	r18, Y+3	; 0x03
     52c:	3c 81       	ldd	r19, Y+4	; 0x04
     52e:	4d 81       	ldd	r20, Y+5	; 0x05
     530:	5e 81       	ldd	r21, Y+6	; 0x06
     532:	6f 81       	ldd	r22, Y+7	; 0x07
     534:	78 85       	ldd	r23, Y+8	; 0x08
     536:	8f 89       	ldd	r24, Y+23	; 0x17
     538:	9d 89       	ldd	r25, Y+21	; 0x15
     53a:	27 38       	cpi	r18, 0x87	; 135
     53c:	33 41       	sbci	r19, 0x13	; 19
     53e:	41 05       	cpc	r20, r1
     540:	51 05       	cpc	r21, r1
     542:	61 05       	cpc	r22, r1
     544:	71 05       	cpc	r23, r1
     546:	81 05       	cpc	r24, r1
     548:	91 05       	cpc	r25, r1
     54a:	09 f0       	breq	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54c:	9c f4       	brge	.+38     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
				currentDriveSpeed = driveSpeed;													//Set the speed to the requested value (Probably 0)
     54e:	29 81       	ldd	r18, Y+1	; 0x01
     550:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1808>
     554:	3a 81       	ldd	r19, Y+2	; 0x02
     556:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1808+0x1>
     55a:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1808+0x2>
     55e:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1808+0x3>
     562:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1808+0x4>
     566:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1808+0x5>
     56a:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1808+0x6>
     56e:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1808+0x7>
     572:	e3 c0       	rjmp	.+454    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     574:	2b 81       	ldd	r18, Y+3	; 0x03
     576:	3c 81       	ldd	r19, Y+4	; 0x04
     578:	4d 81       	ldd	r20, Y+5	; 0x05
     57a:	5e 81       	ldd	r21, Y+6	; 0x06
     57c:	6f 81       	ldd	r22, Y+7	; 0x07
     57e:	78 85       	ldd	r23, Y+8	; 0x08
     580:	8f 89       	ldd	r24, Y+23	; 0x17
     582:	9d 89       	ldd	r25, Y+21	; 0x15
     584:	01 e0       	ldi	r16, 0x01	; 1
     586:	0e 94 cd 09 	call	0x139a	; 0x139a <__ashldi3>
     58a:	a2 2e       	mov	r10, r18
     58c:	b3 2e       	mov	r11, r19
     58e:	c4 2e       	mov	r12, r20
     590:	d5 2e       	mov	r13, r21
     592:	e6 2e       	mov	r14, r22
     594:	f7 2e       	mov	r15, r23
     596:	e8 2f       	mov	r30, r24
     598:	19 2f       	mov	r17, r25
     59a:	04 e0       	ldi	r16, 0x04	; 4
     59c:	0e 94 cd 09 	call	0x139a	; 0x139a <__ashldi3>
     5a0:	0e 2f       	mov	r16, r30
     5a2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subdi3>
     5a6:	0f 2e       	mov	r0, r31
     5a8:	f4 e6       	ldi	r31, 0x64	; 100
     5aa:	af 2e       	mov	r10, r31
     5ac:	f0 2d       	mov	r31, r0
     5ae:	b1 2c       	mov	r11, r1
     5b0:	c1 2c       	mov	r12, r1
     5b2:	d1 2c       	mov	r13, r1
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
     5b8:	00 e0       	ldi	r16, 0x00	; 0
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__divdi3>
     5c0:	a2 2e       	mov	r10, r18
     5c2:	b3 2e       	mov	r11, r19
     5c4:	c4 2e       	mov	r12, r20
     5c6:	d5 2e       	mov	r13, r21
     5c8:	e6 2e       	mov	r14, r22
     5ca:	f7 2e       	mov	r15, r23
     5cc:	08 2f       	mov	r16, r24
     5ce:	19 2f       	mov	r17, r25
     5d0:	2b 81       	ldd	r18, Y+3	; 0x03
     5d2:	3c 81       	ldd	r19, Y+4	; 0x04
     5d4:	4d 81       	ldd	r20, Y+5	; 0x05
     5d6:	5e 81       	ldd	r21, Y+6	; 0x06
     5d8:	6f 81       	ldd	r22, Y+7	; 0x07
     5da:	78 85       	ldd	r23, Y+8	; 0x08
     5dc:	8f 89       	ldd	r24, Y+23	; 0x17
     5de:	9d 89       	ldd	r25, Y+21	; 0x15
     5e0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subdi3>
     5e4:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1808>
     5e8:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1808+0x1>
     5ec:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1808+0x2>
     5f0:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1808+0x3>
     5f4:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1808+0x4>
     5f8:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1808+0x5>
     5fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1808+0x6>
     600:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1808+0x7>
     604:	9a c0       	rjmp	.+308    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     606:	2b 81       	ldd	r18, Y+3	; 0x03
     608:	3c 81       	ldd	r19, Y+4	; 0x04
     60a:	4d 81       	ldd	r20, Y+5	; 0x05
     60c:	5e 81       	ldd	r21, Y+6	; 0x06
     60e:	6f 81       	ldd	r22, Y+7	; 0x07
     610:	78 85       	ldd	r23, Y+8	; 0x08
     612:	8f 89       	ldd	r24, Y+23	; 0x17
     614:	9d 89       	ldd	r25, Y+21	; 0x15
     616:	27 38       	cpi	r18, 0x87	; 135
     618:	a3 e1       	ldi	r26, 0x13	; 19
     61a:	3a 07       	cpc	r19, r26
     61c:	41 05       	cpc	r20, r1
     61e:	51 05       	cpc	r21, r1
     620:	61 05       	cpc	r22, r1
     622:	71 05       	cpc	r23, r1
     624:	81 05       	cpc	r24, r1
     626:	91 05       	cpc	r25, r1
     628:	09 f0       	breq	.+2      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     62a:	cc f4       	brge	.+50     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
     62c:	28 57       	subi	r18, 0x78	; 120
     62e:	3c 4e       	sbci	r19, 0xEC	; 236
     630:	4f 4f       	sbci	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	6f 4f       	sbci	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	8f 4f       	sbci	r24, 0xFF	; 255
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1808>
     640:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1808+0x1>
     644:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1808+0x2>
     648:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1808+0x3>
     64c:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1808+0x4>
     650:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1808+0x5>
     654:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1808+0x6>
     658:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1808+0x7>
     65c:	6e c0       	rjmp	.+220    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     65e:	2b 81       	ldd	r18, Y+3	; 0x03
     660:	3c 81       	ldd	r19, Y+4	; 0x04
     662:	4d 81       	ldd	r20, Y+5	; 0x05
     664:	5e 81       	ldd	r21, Y+6	; 0x06
     666:	6f 81       	ldd	r22, Y+7	; 0x07
     668:	78 85       	ldd	r23, Y+8	; 0x08
     66a:	8f 89       	ldd	r24, Y+23	; 0x17
     66c:	9d 89       	ldd	r25, Y+21	; 0x15
     66e:	01 e0       	ldi	r16, 0x01	; 1
     670:	0e 94 cd 09 	call	0x139a	; 0x139a <__ashldi3>
     674:	a2 2e       	mov	r10, r18
     676:	b3 2e       	mov	r11, r19
     678:	c4 2e       	mov	r12, r20
     67a:	d5 2e       	mov	r13, r21
     67c:	e6 2e       	mov	r14, r22
     67e:	f7 2e       	mov	r15, r23
     680:	e8 2f       	mov	r30, r24
     682:	19 2f       	mov	r17, r25
     684:	04 e0       	ldi	r16, 0x04	; 4
     686:	0e 94 cd 09 	call	0x139a	; 0x139a <__ashldi3>
     68a:	0e 2f       	mov	r16, r30
     68c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subdi3>
     690:	0f 2e       	mov	r0, r31
     692:	f4 e6       	ldi	r31, 0x64	; 100
     694:	af 2e       	mov	r10, r31
     696:	f0 2d       	mov	r31, r0
     698:	b1 2c       	mov	r11, r1
     69a:	c1 2c       	mov	r12, r1
     69c:	d1 2c       	mov	r13, r1
     69e:	e1 2c       	mov	r14, r1
     6a0:	f1 2c       	mov	r15, r1
     6a2:	00 e0       	ldi	r16, 0x00	; 0
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__divdi3>
     6aa:	ab 80       	ldd	r10, Y+3	; 0x03
     6ac:	bc 80       	ldd	r11, Y+4	; 0x04
     6ae:	cd 80       	ldd	r12, Y+5	; 0x05
     6b0:	de 80       	ldd	r13, Y+6	; 0x06
     6b2:	ef 80       	ldd	r14, Y+7	; 0x07
     6b4:	f8 84       	ldd	r15, Y+8	; 0x08
     6b6:	0f 89       	ldd	r16, Y+23	; 0x17
     6b8:	1d 89       	ldd	r17, Y+21	; 0x15
     6ba:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__adddi3>
     6be:	2b 83       	std	Y+3, r18	; 0x03
     6c0:	3c 83       	std	Y+4, r19	; 0x04
     6c2:	4e 83       	std	Y+6, r20	; 0x06
     6c4:	5d 83       	std	Y+5, r21	; 0x05
     6c6:	b6 2f       	mov	r27, r22
     6c8:	a7 2f       	mov	r26, r23
     6ca:	f8 2f       	mov	r31, r24
     6cc:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     6ce:	29 81       	ldd	r18, Y+1	; 0x01
     6d0:	3a 81       	ldd	r19, Y+2	; 0x02
     6d2:	42 2d       	mov	r20, r2
     6d4:	53 2d       	mov	r21, r3
     6d6:	64 2d       	mov	r22, r4
     6d8:	75 2d       	mov	r23, r5
     6da:	86 2d       	mov	r24, r6
     6dc:	97 2d       	mov	r25, r7
     6de:	ab 80       	ldd	r10, Y+3	; 0x03
     6e0:	bc 80       	ldd	r11, Y+4	; 0x04
     6e2:	ce 80       	ldd	r12, Y+6	; 0x06
     6e4:	dd 80       	ldd	r13, Y+5	; 0x05
     6e6:	eb 2e       	mov	r14, r27
     6e8:	fa 2e       	mov	r15, r26
     6ea:	0f 2f       	mov	r16, r31
     6ec:	1e 2f       	mov	r17, r30
     6ee:	0e 94 04 0a 	call	0x1408	; 0x1408 <__cmpdi2>
     6f2:	8c f0       	brlt	.+34     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     6f4:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.1808>
     6f8:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.1808+0x1>
     6fc:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.1808+0x2>
     700:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.1808+0x3>
     704:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.1808+0x4>
     708:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.1808+0x5>
     70c:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.1808+0x6>
     710:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.1808+0x7>
     714:	12 c0       	rjmp	.+36     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     716:	39 81       	ldd	r19, Y+1	; 0x01
     718:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.1808>
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <currentDriveSpeed.1808+0x1>
     722:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1808+0x2>
     726:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1808+0x3>
     72a:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1808+0x4>
     72e:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1808+0x5>
     732:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1808+0x6>
     736:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1808+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     73a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1809>
     73e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1809+0x1>
     742:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1812+0x1>
     746:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1812>
	rightMotorDirection = currentDriveDirection;
     74a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     74e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     752:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1808>
     756:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1808+0x1>
     75a:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1808+0x2>
     75e:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1808+0x3>
     762:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1808+0x4>
     766:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1808+0x5>
     76a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1808+0x6>
     76e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1808+0x7>
     772:	c2 2e       	mov	r12, r18
     774:	d3 2e       	mov	r13, r19
     776:	e4 2e       	mov	r14, r20
     778:	f5 2e       	mov	r15, r21
     77a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.1814>
     77e:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.1814+0x1>
     782:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.1814+0x2>
     786:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.1814+0x3>
	rightMotorSpeed = currentDriveSpeed;
     78a:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.1815>
     78e:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.1815+0x1>
     792:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.1815+0x2>
     796:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.1815+0x3>
	
	
	//Check turn direction
	if(turnDirection != currentTurnDirection){
     79a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
     79e:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
     7a2:	e8 15       	cp	r30, r8
     7a4:	f9 05       	cpc	r31, r9
     7a6:	81 f1       	breq	.+96     	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
		leftMotorSpeed = currentDriveSpeed;
		rightMotorSpeed = currentDriveSpeed;
		currentTurnDirection = turnDirection;
     7a8:	90 92 67 00 	sts	0x0067, r9	; 0x800067 <__data_end+0x1>
     7ac:	80 92 66 00 	sts	0x0066, r8	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){
     7b0:	89 28       	or	r8, r9
     7b2:	29 f4       	brne	.+10     	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
			enableMotorEncoder(1);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <enableMotorEncoder>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
		}else{
			enableMotorEncoder(0);
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <enableMotorEncoder>
		}
		updateTimer += 200000;
     7c6:	29 85       	ldd	r18, Y+9	; 0x09
     7c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ca:	4b 85       	ldd	r20, Y+11	; 0x0b
     7cc:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ce:	6d 85       	ldd	r22, Y+13	; 0x0d
     7d0:	7e 85       	ldd	r23, Y+14	; 0x0e
     7d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d4:	98 89       	ldd	r25, Y+16	; 0x10
     7d6:	20 58       	subi	r18, 0x80	; 128
     7d8:	35 4e       	sbci	r19, 0xE5	; 229
     7da:	49 4f       	sbci	r20, 0xF9	; 249
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	6f 4f       	sbci	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	8f 4f       	sbci	r24, 0xFF	; 255
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1806>
     7ea:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1806+0x1>
     7ee:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1806+0x2>
     7f2:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1806+0x3>
     7f6:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1806+0x4>
     7fa:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1806+0x5>
     7fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1806+0x6>
     802:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1806+0x7>
     806:	c8 c0       	rjmp	.+400    	; 0x998 <__stack+0x139>
	}else if(currentTurnDirection == -1){
     808:	ef 3f       	cpi	r30, 0xFF	; 255
     80a:	af ef       	ldi	r26, 0xFF	; 255
     80c:	fa 07       	cpc	r31, r26
     80e:	f1 f5       	brne	.+124    	; 0x88c <__stack+0x2d>
		if(currentDriveSpeed == 0){
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	0e 94 0d 0a 	call	0x141a	; 0x141a <__cmpdi2_s8>
     816:	f9 f4       	brne	.+62     	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
			leftMotorDirection = 0;
     818:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.1812+0x1>
     81c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.1812>
			rightMotorDirection = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     828:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;
     82c:	88 ef       	ldi	r24, 0xF8	; 248
     82e:	9a e2       	ldi	r25, 0x2A	; 42
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1814>
     838:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1814+0x1>
     83c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1814+0x2>
     840:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1814+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;
     844:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1815>
     848:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1815+0x1>
     84c:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1815+0x2>
     850:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1815+0x3>
     854:	22 c1       	rjmp	.+580    	; 0xa9a <__stack+0x23b>
		}else{
			leftMotorSpeed = driveSpeedThreshold;
     856:	88 e8       	ldi	r24, 0x88	; 136
     858:	93 e1       	ldi	r25, 0x13	; 19
     85a:	a0 e0       	ldi	r26, 0x00	; 0
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1814>
     862:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1814+0x1>
     866:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1814+0x2>
     86a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1814+0x3>
			rightMotorSpeed += turnRate;
     86e:	e8 eb       	ldi	r30, 0xB8	; 184
     870:	ce 0e       	add	r12, r30
     872:	eb e0       	ldi	r30, 0x0B	; 11
     874:	de 1e       	adc	r13, r30
     876:	e1 1c       	adc	r14, r1
     878:	f1 1c       	adc	r15, r1
     87a:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1815>
     87e:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1815+0x1>
     882:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1815+0x2>
     886:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1815+0x3>
     88a:	86 c0       	rjmp	.+268    	; 0x998 <__stack+0x139>
		}
	}else if(currentTurnDirection == 0){
     88c:	30 97       	sbiw	r30, 0x00	; 0
     88e:	09 f0       	breq	.+2      	; 0x892 <__stack+0x33>
     890:	43 c0       	rjmp	.+134    	; 0x918 <__stack+0xb9>
		if(motorEncoderLVal != motorEncoderRVal){
     892:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <motorEncoderLVal>
     896:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <motorEncoderLVal+0x1>
     89a:	1e 8b       	std	Y+22, r17	; 0x16
     89c:	0d 8b       	std	Y+21, r16	; 0x15
     89e:	00 91 80 00 	lds	r16, 0x0080	; 0x800080 <motorEncoderRVal>
     8a2:	10 91 81 00 	lds	r17, 0x0081	; 0x800081 <motorEncoderRVal+0x1>
     8a6:	2d 89       	ldd	r18, Y+21	; 0x15
     8a8:	3e 89       	ldd	r19, Y+22	; 0x16
     8aa:	20 17       	cp	r18, r16
     8ac:	31 07       	cpc	r19, r17
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <__stack+0x53>
     8b0:	73 c0       	rjmp	.+230    	; 0x998 <__stack+0x139>
			if(motorEncoderLVal - motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
     8b2:	c7 01       	movw	r24, r14
     8b4:	b6 01       	movw	r22, r12
     8b6:	0e 94 d7 06 	call	0xdae	; 0xdae <__floatunsisf>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
     8be:	6d 89       	ldd	r22, Y+21	; 0x15
     8c0:	7e 89       	ldd	r23, Y+22	; 0x16
     8c2:	60 1b       	sub	r22, r16
     8c4:	71 0b       	sbc	r23, r17
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 d7 06 	call	0xdae	; 0xdae <__floatunsisf>
     8ce:	4b 01       	movw	r8, r22
     8d0:	5c 01       	movw	r10, r24
     8d2:	a5 01       	movw	r20, r10
     8d4:	94 01       	movw	r18, r8
     8d6:	c5 01       	movw	r24, r10
     8d8:	b4 01       	movw	r22, r8
     8da:	0e 94 b3 07 	call	0xf66	; 0xf66 <__mulsf3>
     8de:	0e 94 26 08 	call	0x104c	; 0x104c <sqrt>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
     8e6:	c7 01       	movw	r24, r14
     8e8:	b6 01       	movw	r22, r12
     8ea:	0e 94 b3 07 	call	0xf66	; 0xf66 <__mulsf3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	48 ec       	ldi	r20, 0xC8	; 200
     8f4:	52 e4       	ldi	r21, 0x42	; 66
     8f6:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
     8fa:	a7 01       	movw	r20, r14
     8fc:	96 01       	movw	r18, r12
     8fe:	0e 94 c4 05 	call	0xb88	; 0xb88 <__addsf3>
     902:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
     906:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.1815>
     90a:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.1815+0x1>
     90e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.1815+0x2>
     912:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.1815+0x3>
     916:	40 c0       	rjmp	.+128    	; 0x998 <__stack+0x139>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
			}
		}
	}else if(currentTurnDirection == 1){
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	f1 f5       	brne	.+124    	; 0x998 <__stack+0x139>
		if(currentDriveSpeed == 0){
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	0e 94 0d 0a 	call	0x141a	; 0x141a <__cmpdi2_s8>
     922:	f9 f4       	brne	.+62     	; 0x962 <__stack+0x103>
			leftMotorDirection = 1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1812+0x1>
     92c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1812>
			rightMotorDirection = 0;
     930:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     934:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;
     938:	88 ef       	ldi	r24, 0xF8	; 248
     93a:	9a e2       	ldi	r25, 0x2A	; 42
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1814>
     944:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1814+0x1>
     948:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1814+0x2>
     94c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1814+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;
     950:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1815>
     954:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1815+0x1>
     958:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1815+0x2>
     95c:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1815+0x3>
     960:	9c c0       	rjmp	.+312    	; 0xa9a <__stack+0x23b>
			}else{
			leftMotorSpeed += turnRate;
     962:	38 eb       	ldi	r19, 0xB8	; 184
     964:	c3 0e       	add	r12, r19
     966:	3b e0       	ldi	r19, 0x0B	; 11
     968:	d3 1e       	adc	r13, r19
     96a:	e1 1c       	adc	r14, r1
     96c:	f1 1c       	adc	r15, r1
     96e:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.1814>
     972:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.1814+0x1>
     976:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.1814+0x2>
     97a:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.1814+0x3>
			rightMotorSpeed = driveSpeedThreshold;
     97e:	88 e8       	ldi	r24, 0x88	; 136
     980:	93 e1       	ldi	r25, 0x13	; 19
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1815>
     98a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1815+0x1>
     98e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1815+0x2>
     992:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1815+0x3>
     996:	81 c0       	rjmp	.+258    	; 0xa9a <__stack+0x23b>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;
     998:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1815>
     99c:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1815+0x1>
     9a0:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1815+0x2>
     9a4:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1815+0x3>
     9a8:	d7 01       	movw	r26, r14
     9aa:	c6 01       	movw	r24, r12
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	aa 1f       	adc	r26, r26
     9b2:	bb 1f       	adc	r27, r27
     9b4:	8c 0d       	add	r24, r12
     9b6:	9d 1d       	adc	r25, r13
     9b8:	ae 1d       	adc	r26, r14
     9ba:	bf 1d       	adc	r27, r15
     9bc:	ac 01       	movw	r20, r24
     9be:	bd 01       	movw	r22, r26
     9c0:	44 0f       	add	r20, r20
     9c2:	55 1f       	adc	r21, r21
     9c4:	66 1f       	adc	r22, r22
     9c6:	77 1f       	adc	r23, r23
     9c8:	44 0f       	add	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	66 1f       	adc	r22, r22
     9ce:	77 1f       	adc	r23, r23
     9d0:	8c 01       	movw	r16, r24
     9d2:	9d 01       	movw	r18, r26
     9d4:	04 0f       	add	r16, r20
     9d6:	15 1f       	adc	r17, r21
     9d8:	26 1f       	adc	r18, r22
     9da:	37 1f       	adc	r19, r23
     9dc:	c9 01       	movw	r24, r18
     9de:	b8 01       	movw	r22, r16
     9e0:	24 e6       	ldi	r18, 0x64	; 100
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodsi4>
     9ec:	c2 0e       	add	r12, r18
     9ee:	d3 1e       	adc	r13, r19
     9f0:	e4 1e       	adc	r14, r20
     9f2:	f5 1e       	adc	r15, r21
     9f4:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1815>
     9f8:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1815+0x1>
     9fc:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1815+0x2>
     a00:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1815+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     a04:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1814>
     a08:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1814+0x1>
     a0c:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1814+0x2>
     a10:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1814+0x3>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	94 46       	sbci	r25, 0x64	; 100
     a18:	a1 05       	cpc	r26, r1
     a1a:	b1 05       	cpc	r27, r1
     a1c:	60 f0       	brcs	.+24     	; 0xa36 <__stack+0x1d7>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	94 e6       	ldi	r25, 0x64	; 100
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1814>
     a2a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1814+0x1>
     a2e:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1814+0x2>
     a32:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1814+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     a36:	21 e3       	ldi	r18, 0x31	; 49
     a38:	c2 16       	cp	r12, r18
     a3a:	25 e7       	ldi	r18, 0x75	; 117
     a3c:	d2 06       	cpc	r13, r18
     a3e:	e1 04       	cpc	r14, r1
     a40:	f1 04       	cpc	r15, r1
     a42:	60 f0       	brcs	.+24     	; 0xa5c <__stack+0x1fd>
		rightMotorSpeed = 30000;						//Set it back to its max
     a44:	80 e3       	ldi	r24, 0x30	; 48
     a46:	95 e7       	ldi	r25, 0x75	; 117
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1815>
     a50:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1815+0x1>
     a54:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1815+0x2>
     a58:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1815+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     a5c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.1812>
     a60:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.1812+0x1>
     a64:	89 2b       	or	r24, r25
     a66:	11 f0       	breq	.+4      	; 0xa6c <__stack+0x20d>
		PORTC &= 0b11111011;
     a68:	aa 98       	cbi	0x15, 2	; 21
     a6a:	01 c0       	rjmp	.+2      	; 0xa6e <__stack+0x20f>
	}else{
		PORTC |= 0b00000100;
     a6c:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     a6e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     a72:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     a76:	89 2b       	or	r24, r25
     a78:	11 f0       	breq	.+4      	; 0xa7e <__stack+0x21f>
		PORTC &= 0b11110111;
     a7a:	ab 98       	cbi	0x15, 3	; 21
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <__stack+0x221>
	}else{
		PORTC |= 0b00001000;
     a7e:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     a80:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.1815>
     a84:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.1815+0x1>
     a88:	9b bd       	out	0x2b, r25	; 43
     a8a:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     a8c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1814>
     a90:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1814+0x1>
     a94:	99 bd       	out	0x29, r25	; 41
     a96:	88 bd       	out	0x28, r24	; 40
	
	return 0;
     a98:	45 c0       	rjmp	.+138    	; 0xb24 <__stack+0x2c5>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;
     a9a:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1815>
     a9e:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1815+0x1>
     aa2:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1815+0x2>
     aa6:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1815+0x3>
     aaa:	d7 01       	movw	r26, r14
     aac:	c6 01       	movw	r24, r12
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	aa 1f       	adc	r26, r26
     ab4:	bb 1f       	adc	r27, r27
     ab6:	8c 0d       	add	r24, r12
     ab8:	9d 1d       	adc	r25, r13
     aba:	ae 1d       	adc	r26, r14
     abc:	bf 1d       	adc	r27, r15
     abe:	ac 01       	movw	r20, r24
     ac0:	bd 01       	movw	r22, r26
     ac2:	44 0f       	add	r20, r20
     ac4:	55 1f       	adc	r21, r21
     ac6:	66 1f       	adc	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	44 0f       	add	r20, r20
     acc:	55 1f       	adc	r21, r21
     ace:	66 1f       	adc	r22, r22
     ad0:	77 1f       	adc	r23, r23
     ad2:	8c 01       	movw	r16, r24
     ad4:	9d 01       	movw	r18, r26
     ad6:	04 0f       	add	r16, r20
     ad8:	15 1f       	adc	r17, r21
     ada:	26 1f       	adc	r18, r22
     adc:	37 1f       	adc	r19, r23
     ade:	c9 01       	movw	r24, r18
     ae0:	b8 01       	movw	r22, r16
     ae2:	24 e6       	ldi	r18, 0x64	; 100
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodsi4>
     aee:	c2 0e       	add	r12, r18
     af0:	d3 1e       	adc	r13, r19
     af2:	e4 1e       	adc	r14, r20
     af4:	f5 1e       	adc	r15, r21
     af6:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1815>
     afa:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1815+0x1>
     afe:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1815+0x2>
     b02:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1815+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     b06:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1814>
     b0a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1814+0x1>
     b0e:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1814+0x2>
     b12:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1814+0x3>
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	94 46       	sbci	r25, 0x64	; 100
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <__stack+0x2c3>
     b20:	9d cf       	rjmp	.-198    	; 0xa5c <__stack+0x1fd>
     b22:	7d cf       	rjmp	.-262    	; 0xa1e <__stack+0x1bf>
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
	OCR1B = leftMotorSpeed;							//And do the same for the left one
	
	return 0;
}
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	67 96       	adiw	r28, 0x17	; 23
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	bf 90       	pop	r11
     b46:	af 90       	pop	r10
     b48:	9f 90       	pop	r9
     b4a:	8f 90       	pop	r8
     b4c:	7f 90       	pop	r7
     b4e:	6f 90       	pop	r6
     b50:	5f 90       	pop	r5
     b52:	4f 90       	pop	r4
     b54:	3f 90       	pop	r3
     b56:	2f 90       	pop	r2
     b58:	08 95       	ret

00000b5a <main>:
    }
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     b5a:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     b5c:	0e 94 50 00 	call	0xa0	; 0xa0 <init_micros>
	
	init_motor();
     b60:	0e 94 24 01 	call	0x248	; 0x248 <init_motor>
	init_LED();
     b64:	0e 94 49 00 	call	0x92	; 0x92 <init_LED>
	
	int temp = 0;
	uint64_t timer = 0;
	
	while(1){
		motorDriver(30, 1, 0);
     b68:	e1 2c       	mov	r14, r1
     b6a:	f1 2c       	mov	r15, r1
     b6c:	01 e0       	ldi	r16, 0x01	; 1
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	2e e1       	ldi	r18, 0x1E	; 30
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 69 01 	call	0x2d2	; 0x2d2 <motorDriver>
     b84:	f1 cf       	rjmp	.-30     	; 0xb68 <main+0xe>

00000b86 <__subsf3>:
     b86:	50 58       	subi	r21, 0x80	; 128

00000b88 <__addsf3>:
     b88:	bb 27       	eor	r27, r27
     b8a:	aa 27       	eor	r26, r26
     b8c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__addsf3x>
     b90:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_round>
     b94:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_pscA>
     b98:	38 f0       	brcs	.+14     	; 0xba8 <__addsf3+0x20>
     b9a:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscB>
     b9e:	20 f0       	brcs	.+8      	; 0xba8 <__addsf3+0x20>
     ba0:	39 f4       	brne	.+14     	; 0xbb0 <__addsf3+0x28>
     ba2:	9f 3f       	cpi	r25, 0xFF	; 255
     ba4:	19 f4       	brne	.+6      	; 0xbac <__addsf3+0x24>
     ba6:	26 f4       	brtc	.+8      	; 0xbb0 <__addsf3+0x28>
     ba8:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_nan>
     bac:	0e f4       	brtc	.+2      	; 0xbb0 <__addsf3+0x28>
     bae:	e0 95       	com	r30
     bb0:	e7 fb       	bst	r30, 7
     bb2:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>

00000bb6 <__addsf3x>:
     bb6:	e9 2f       	mov	r30, r25
     bb8:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_split3>
     bbc:	58 f3       	brcs	.-42     	; 0xb94 <__addsf3+0xc>
     bbe:	ba 17       	cp	r27, r26
     bc0:	62 07       	cpc	r22, r18
     bc2:	73 07       	cpc	r23, r19
     bc4:	84 07       	cpc	r24, r20
     bc6:	95 07       	cpc	r25, r21
     bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__addsf3x+0x1c>
     bca:	79 f4       	brne	.+30     	; 0xbea <__addsf3x+0x34>
     bcc:	a6 f5       	brtc	.+104    	; 0xc36 <__addsf3x+0x80>
     bce:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_zero>
     bd2:	0e f4       	brtc	.+2      	; 0xbd6 <__addsf3x+0x20>
     bd4:	e0 95       	com	r30
     bd6:	0b 2e       	mov	r0, r27
     bd8:	ba 2f       	mov	r27, r26
     bda:	a0 2d       	mov	r26, r0
     bdc:	0b 01       	movw	r0, r22
     bde:	b9 01       	movw	r22, r18
     be0:	90 01       	movw	r18, r0
     be2:	0c 01       	movw	r0, r24
     be4:	ca 01       	movw	r24, r20
     be6:	a0 01       	movw	r20, r0
     be8:	11 24       	eor	r1, r1
     bea:	ff 27       	eor	r31, r31
     bec:	59 1b       	sub	r21, r25
     bee:	99 f0       	breq	.+38     	; 0xc16 <__addsf3x+0x60>
     bf0:	59 3f       	cpi	r21, 0xF9	; 249
     bf2:	50 f4       	brcc	.+20     	; 0xc08 <__addsf3x+0x52>
     bf4:	50 3e       	cpi	r21, 0xE0	; 224
     bf6:	68 f1       	brcs	.+90     	; 0xc52 <__addsf3x+0x9c>
     bf8:	1a 16       	cp	r1, r26
     bfa:	f0 40       	sbci	r31, 0x00	; 0
     bfc:	a2 2f       	mov	r26, r18
     bfe:	23 2f       	mov	r18, r19
     c00:	34 2f       	mov	r19, r20
     c02:	44 27       	eor	r20, r20
     c04:	58 5f       	subi	r21, 0xF8	; 248
     c06:	f3 cf       	rjmp	.-26     	; 0xbee <__addsf3x+0x38>
     c08:	46 95       	lsr	r20
     c0a:	37 95       	ror	r19
     c0c:	27 95       	ror	r18
     c0e:	a7 95       	ror	r26
     c10:	f0 40       	sbci	r31, 0x00	; 0
     c12:	53 95       	inc	r21
     c14:	c9 f7       	brne	.-14     	; 0xc08 <__addsf3x+0x52>
     c16:	7e f4       	brtc	.+30     	; 0xc36 <__addsf3x+0x80>
     c18:	1f 16       	cp	r1, r31
     c1a:	ba 0b       	sbc	r27, r26
     c1c:	62 0b       	sbc	r22, r18
     c1e:	73 0b       	sbc	r23, r19
     c20:	84 0b       	sbc	r24, r20
     c22:	ba f0       	brmi	.+46     	; 0xc52 <__addsf3x+0x9c>
     c24:	91 50       	subi	r25, 0x01	; 1
     c26:	a1 f0       	breq	.+40     	; 0xc50 <__addsf3x+0x9a>
     c28:	ff 0f       	add	r31, r31
     c2a:	bb 1f       	adc	r27, r27
     c2c:	66 1f       	adc	r22, r22
     c2e:	77 1f       	adc	r23, r23
     c30:	88 1f       	adc	r24, r24
     c32:	c2 f7       	brpl	.-16     	; 0xc24 <__addsf3x+0x6e>
     c34:	0e c0       	rjmp	.+28     	; 0xc52 <__addsf3x+0x9c>
     c36:	ba 0f       	add	r27, r26
     c38:	62 1f       	adc	r22, r18
     c3a:	73 1f       	adc	r23, r19
     c3c:	84 1f       	adc	r24, r20
     c3e:	48 f4       	brcc	.+18     	; 0xc52 <__addsf3x+0x9c>
     c40:	87 95       	ror	r24
     c42:	77 95       	ror	r23
     c44:	67 95       	ror	r22
     c46:	b7 95       	ror	r27
     c48:	f7 95       	ror	r31
     c4a:	9e 3f       	cpi	r25, 0xFE	; 254
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <__addsf3x+0x9a>
     c4e:	b0 cf       	rjmp	.-160    	; 0xbb0 <__addsf3+0x28>
     c50:	93 95       	inc	r25
     c52:	88 0f       	add	r24, r24
     c54:	08 f0       	brcs	.+2      	; 0xc58 <__addsf3x+0xa2>
     c56:	99 27       	eor	r25, r25
     c58:	ee 0f       	add	r30, r30
     c5a:	97 95       	ror	r25
     c5c:	87 95       	ror	r24
     c5e:	08 95       	ret

00000c60 <__divsf3>:
     c60:	0e 94 44 06 	call	0xc88	; 0xc88 <__divsf3x>
     c64:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_round>
     c68:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscB>
     c6c:	58 f0       	brcs	.+22     	; 0xc84 <__divsf3+0x24>
     c6e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_pscA>
     c72:	40 f0       	brcs	.+16     	; 0xc84 <__divsf3+0x24>
     c74:	29 f4       	brne	.+10     	; 0xc80 <__divsf3+0x20>
     c76:	5f 3f       	cpi	r21, 0xFF	; 255
     c78:	29 f0       	breq	.+10     	; 0xc84 <__divsf3+0x24>
     c7a:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
     c7e:	51 11       	cpse	r21, r1
     c80:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_szero>
     c84:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_nan>

00000c88 <__divsf3x>:
     c88:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_split3>
     c8c:	68 f3       	brcs	.-38     	; 0xc68 <__divsf3+0x8>

00000c8e <__divsf3_pse>:
     c8e:	99 23       	and	r25, r25
     c90:	b1 f3       	breq	.-20     	; 0xc7e <__divsf3+0x1e>
     c92:	55 23       	and	r21, r21
     c94:	91 f3       	breq	.-28     	; 0xc7a <__divsf3+0x1a>
     c96:	95 1b       	sub	r25, r21
     c98:	55 0b       	sbc	r21, r21
     c9a:	bb 27       	eor	r27, r27
     c9c:	aa 27       	eor	r26, r26
     c9e:	62 17       	cp	r22, r18
     ca0:	73 07       	cpc	r23, r19
     ca2:	84 07       	cpc	r24, r20
     ca4:	38 f0       	brcs	.+14     	; 0xcb4 <__divsf3_pse+0x26>
     ca6:	9f 5f       	subi	r25, 0xFF	; 255
     ca8:	5f 4f       	sbci	r21, 0xFF	; 255
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	aa 1f       	adc	r26, r26
     cb2:	a9 f3       	breq	.-22     	; 0xc9e <__divsf3_pse+0x10>
     cb4:	35 d0       	rcall	.+106    	; 0xd20 <__divsf3_pse+0x92>
     cb6:	0e 2e       	mov	r0, r30
     cb8:	3a f0       	brmi	.+14     	; 0xcc8 <__divsf3_pse+0x3a>
     cba:	e0 e8       	ldi	r30, 0x80	; 128
     cbc:	32 d0       	rcall	.+100    	; 0xd22 <__divsf3_pse+0x94>
     cbe:	91 50       	subi	r25, 0x01	; 1
     cc0:	50 40       	sbci	r21, 0x00	; 0
     cc2:	e6 95       	lsr	r30
     cc4:	00 1c       	adc	r0, r0
     cc6:	ca f7       	brpl	.-14     	; 0xcba <__divsf3_pse+0x2c>
     cc8:	2b d0       	rcall	.+86     	; 0xd20 <__divsf3_pse+0x92>
     cca:	fe 2f       	mov	r31, r30
     ccc:	29 d0       	rcall	.+82     	; 0xd20 <__divsf3_pse+0x92>
     cce:	66 0f       	add	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	88 1f       	adc	r24, r24
     cd4:	bb 1f       	adc	r27, r27
     cd6:	26 17       	cp	r18, r22
     cd8:	37 07       	cpc	r19, r23
     cda:	48 07       	cpc	r20, r24
     cdc:	ab 07       	cpc	r26, r27
     cde:	b0 e8       	ldi	r27, 0x80	; 128
     ce0:	09 f0       	breq	.+2      	; 0xce4 <__divsf3_pse+0x56>
     ce2:	bb 0b       	sbc	r27, r27
     ce4:	80 2d       	mov	r24, r0
     ce6:	bf 01       	movw	r22, r30
     ce8:	ff 27       	eor	r31, r31
     cea:	93 58       	subi	r25, 0x83	; 131
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	3a f0       	brmi	.+14     	; 0xcfe <__divsf3_pse+0x70>
     cf0:	9e 3f       	cpi	r25, 0xFE	; 254
     cf2:	51 05       	cpc	r21, r1
     cf4:	78 f0       	brcs	.+30     	; 0xd14 <__divsf3_pse+0x86>
     cf6:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
     cfa:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_szero>
     cfe:	5f 3f       	cpi	r21, 0xFF	; 255
     d00:	e4 f3       	brlt	.-8      	; 0xcfa <__divsf3_pse+0x6c>
     d02:	98 3e       	cpi	r25, 0xE8	; 232
     d04:	d4 f3       	brlt	.-12     	; 0xcfa <__divsf3_pse+0x6c>
     d06:	86 95       	lsr	r24
     d08:	77 95       	ror	r23
     d0a:	67 95       	ror	r22
     d0c:	b7 95       	ror	r27
     d0e:	f7 95       	ror	r31
     d10:	9f 5f       	subi	r25, 0xFF	; 255
     d12:	c9 f7       	brne	.-14     	; 0xd06 <__divsf3_pse+0x78>
     d14:	88 0f       	add	r24, r24
     d16:	91 1d       	adc	r25, r1
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	97 f9       	bld	r25, 7
     d1e:	08 95       	ret
     d20:	e1 e0       	ldi	r30, 0x01	; 1
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	88 1f       	adc	r24, r24
     d28:	bb 1f       	adc	r27, r27
     d2a:	62 17       	cp	r22, r18
     d2c:	73 07       	cpc	r23, r19
     d2e:	84 07       	cpc	r24, r20
     d30:	ba 07       	cpc	r27, r26
     d32:	20 f0       	brcs	.+8      	; 0xd3c <__divsf3_pse+0xae>
     d34:	62 1b       	sub	r22, r18
     d36:	73 0b       	sbc	r23, r19
     d38:	84 0b       	sbc	r24, r20
     d3a:	ba 0b       	sbc	r27, r26
     d3c:	ee 1f       	adc	r30, r30
     d3e:	88 f7       	brcc	.-30     	; 0xd22 <__divsf3_pse+0x94>
     d40:	e0 95       	com	r30
     d42:	08 95       	ret

00000d44 <__fixunssfsi>:
     d44:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_splitA>
     d48:	88 f0       	brcs	.+34     	; 0xd6c <__fixunssfsi+0x28>
     d4a:	9f 57       	subi	r25, 0x7F	; 127
     d4c:	98 f0       	brcs	.+38     	; 0xd74 <__fixunssfsi+0x30>
     d4e:	b9 2f       	mov	r27, r25
     d50:	99 27       	eor	r25, r25
     d52:	b7 51       	subi	r27, 0x17	; 23
     d54:	b0 f0       	brcs	.+44     	; 0xd82 <__fixunssfsi+0x3e>
     d56:	e1 f0       	breq	.+56     	; 0xd90 <__fixunssfsi+0x4c>
     d58:	66 0f       	add	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	88 1f       	adc	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	1a f0       	brmi	.+6      	; 0xd68 <__fixunssfsi+0x24>
     d62:	ba 95       	dec	r27
     d64:	c9 f7       	brne	.-14     	; 0xd58 <__fixunssfsi+0x14>
     d66:	14 c0       	rjmp	.+40     	; 0xd90 <__fixunssfsi+0x4c>
     d68:	b1 30       	cpi	r27, 0x01	; 1
     d6a:	91 f0       	breq	.+36     	; 0xd90 <__fixunssfsi+0x4c>
     d6c:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_zero>
     d70:	b1 e0       	ldi	r27, 0x01	; 1
     d72:	08 95       	ret
     d74:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_zero>
     d78:	67 2f       	mov	r22, r23
     d7a:	78 2f       	mov	r23, r24
     d7c:	88 27       	eor	r24, r24
     d7e:	b8 5f       	subi	r27, 0xF8	; 248
     d80:	39 f0       	breq	.+14     	; 0xd90 <__fixunssfsi+0x4c>
     d82:	b9 3f       	cpi	r27, 0xF9	; 249
     d84:	cc f3       	brlt	.-14     	; 0xd78 <__fixunssfsi+0x34>
     d86:	86 95       	lsr	r24
     d88:	77 95       	ror	r23
     d8a:	67 95       	ror	r22
     d8c:	b3 95       	inc	r27
     d8e:	d9 f7       	brne	.-10     	; 0xd86 <__fixunssfsi+0x42>
     d90:	3e f4       	brtc	.+14     	; 0xda0 <__fixunssfsi+0x5c>
     d92:	90 95       	com	r25
     d94:	80 95       	com	r24
     d96:	70 95       	com	r23
     d98:	61 95       	neg	r22
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 4f       	sbci	r24, 0xFF	; 255
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	08 95       	ret

00000da2 <__floatdisf>:
     da2:	97 fb       	bst	r25, 7
     da4:	16 f4       	brtc	.+4      	; 0xdaa <__floatdisf+0x8>
     da6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_negdi>
     daa:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_di2sf>

00000dae <__floatunsisf>:
     dae:	e8 94       	clt
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <__floatsisf+0x12>

00000db2 <__floatsisf>:
     db2:	97 fb       	bst	r25, 7
     db4:	3e f4       	brtc	.+14     	; 0xdc4 <__floatsisf+0x12>
     db6:	90 95       	com	r25
     db8:	80 95       	com	r24
     dba:	70 95       	com	r23
     dbc:	61 95       	neg	r22
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	8f 4f       	sbci	r24, 0xFF	; 255
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	99 23       	and	r25, r25
     dc6:	a9 f0       	breq	.+42     	; 0xdf2 <__floatsisf+0x40>
     dc8:	f9 2f       	mov	r31, r25
     dca:	96 e9       	ldi	r25, 0x96	; 150
     dcc:	bb 27       	eor	r27, r27
     dce:	93 95       	inc	r25
     dd0:	f6 95       	lsr	r31
     dd2:	87 95       	ror	r24
     dd4:	77 95       	ror	r23
     dd6:	67 95       	ror	r22
     dd8:	b7 95       	ror	r27
     dda:	f1 11       	cpse	r31, r1
     ddc:	f8 cf       	rjmp	.-16     	; 0xdce <__floatsisf+0x1c>
     dde:	fa f4       	brpl	.+62     	; 0xe1e <__floatsisf+0x6c>
     de0:	bb 0f       	add	r27, r27
     de2:	11 f4       	brne	.+4      	; 0xde8 <__floatsisf+0x36>
     de4:	60 ff       	sbrs	r22, 0
     de6:	1b c0       	rjmp	.+54     	; 0xe1e <__floatsisf+0x6c>
     de8:	6f 5f       	subi	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	8f 4f       	sbci	r24, 0xFF	; 255
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
     df0:	16 c0       	rjmp	.+44     	; 0xe1e <__floatsisf+0x6c>
     df2:	88 23       	and	r24, r24
     df4:	11 f0       	breq	.+4      	; 0xdfa <__floatsisf+0x48>
     df6:	96 e9       	ldi	r25, 0x96	; 150
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <__floatsisf+0x6a>
     dfa:	77 23       	and	r23, r23
     dfc:	21 f0       	breq	.+8      	; 0xe06 <__floatsisf+0x54>
     dfe:	9e e8       	ldi	r25, 0x8E	; 142
     e00:	87 2f       	mov	r24, r23
     e02:	76 2f       	mov	r23, r22
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <__floatsisf+0x5e>
     e06:	66 23       	and	r22, r22
     e08:	71 f0       	breq	.+28     	; 0xe26 <__floatsisf+0x74>
     e0a:	96 e8       	ldi	r25, 0x86	; 134
     e0c:	86 2f       	mov	r24, r22
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	2a f0       	brmi	.+10     	; 0xe1e <__floatsisf+0x6c>
     e14:	9a 95       	dec	r25
     e16:	66 0f       	add	r22, r22
     e18:	77 1f       	adc	r23, r23
     e1a:	88 1f       	adc	r24, r24
     e1c:	da f7       	brpl	.-10     	; 0xe14 <__floatsisf+0x62>
     e1e:	88 0f       	add	r24, r24
     e20:	96 95       	lsr	r25
     e22:	87 95       	ror	r24
     e24:	97 f9       	bld	r25, 7
     e26:	08 95       	ret

00000e28 <__floatundisf>:
     e28:	e8 94       	clt

00000e2a <__fp_di2sf>:
     e2a:	f9 2f       	mov	r31, r25
     e2c:	96 eb       	ldi	r25, 0xB6	; 182
     e2e:	ff 23       	and	r31, r31
     e30:	81 f0       	breq	.+32     	; 0xe52 <__fp_di2sf+0x28>
     e32:	12 16       	cp	r1, r18
     e34:	13 06       	cpc	r1, r19
     e36:	14 06       	cpc	r1, r20
     e38:	44 0b       	sbc	r20, r20
     e3a:	93 95       	inc	r25
     e3c:	f6 95       	lsr	r31
     e3e:	87 95       	ror	r24
     e40:	77 95       	ror	r23
     e42:	67 95       	ror	r22
     e44:	57 95       	ror	r21
     e46:	40 40       	sbci	r20, 0x00	; 0
     e48:	ff 23       	and	r31, r31
     e4a:	b9 f7       	brne	.-18     	; 0xe3a <__fp_di2sf+0x10>
     e4c:	1b c0       	rjmp	.+54     	; 0xe84 <__fp_di2sf+0x5a>
     e4e:	99 27       	eor	r25, r25
     e50:	08 95       	ret
     e52:	88 23       	and	r24, r24
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fp_di2sf+0x40>
     e56:	98 50       	subi	r25, 0x08	; 8
     e58:	d2 f7       	brpl	.-12     	; 0xe4e <__fp_di2sf+0x24>
     e5a:	87 2b       	or	r24, r23
     e5c:	76 2f       	mov	r23, r22
     e5e:	65 2f       	mov	r22, r21
     e60:	54 2f       	mov	r21, r20
     e62:	43 2f       	mov	r20, r19
     e64:	32 2f       	mov	r19, r18
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	b1 f3       	breq	.-20     	; 0xe56 <__fp_di2sf+0x2c>
     e6a:	12 16       	cp	r1, r18
     e6c:	13 06       	cpc	r1, r19
     e6e:	14 06       	cpc	r1, r20
     e70:	44 0b       	sbc	r20, r20
     e72:	88 23       	and	r24, r24
     e74:	3a f0       	brmi	.+14     	; 0xe84 <__fp_di2sf+0x5a>
     e76:	9a 95       	dec	r25
     e78:	44 0f       	add	r20, r20
     e7a:	55 1f       	adc	r21, r21
     e7c:	66 1f       	adc	r22, r22
     e7e:	77 1f       	adc	r23, r23
     e80:	88 1f       	adc	r24, r24
     e82:	ca f7       	brpl	.-14     	; 0xe76 <__fp_di2sf+0x4c>
     e84:	55 23       	and	r21, r21
     e86:	4a f4       	brpl	.+18     	; 0xe9a <__fp_di2sf+0x70>
     e88:	44 0f       	add	r20, r20
     e8a:	55 1f       	adc	r21, r21
     e8c:	11 f4       	brne	.+4      	; 0xe92 <__fp_di2sf+0x68>
     e8e:	60 ff       	sbrs	r22, 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__fp_di2sf+0x70>
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	88 0f       	add	r24, r24
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	97 f9       	bld	r25, 7
     ea2:	08 95       	ret

00000ea4 <__fp_inf>:
     ea4:	97 f9       	bld	r25, 7
     ea6:	9f 67       	ori	r25, 0x7F	; 127
     ea8:	80 e8       	ldi	r24, 0x80	; 128
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	08 95       	ret

00000eb0 <__fp_nan>:
     eb0:	9f ef       	ldi	r25, 0xFF	; 255
     eb2:	80 ec       	ldi	r24, 0xC0	; 192
     eb4:	08 95       	ret

00000eb6 <__fp_negdi>:
     eb6:	90 95       	com	r25
     eb8:	80 95       	com	r24
     eba:	70 95       	com	r23
     ebc:	60 95       	com	r22
     ebe:	50 95       	com	r21
     ec0:	40 95       	com	r20
     ec2:	30 95       	com	r19
     ec4:	21 95       	neg	r18
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	4f 4f       	sbci	r20, 0xFF	; 255
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	6f 4f       	sbci	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	8f 4f       	sbci	r24, 0xFF	; 255
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	08 95       	ret

00000ed6 <__fp_pscA>:
     ed6:	00 24       	eor	r0, r0
     ed8:	0a 94       	dec	r0
     eda:	16 16       	cp	r1, r22
     edc:	17 06       	cpc	r1, r23
     ede:	18 06       	cpc	r1, r24
     ee0:	09 06       	cpc	r0, r25
     ee2:	08 95       	ret

00000ee4 <__fp_pscB>:
     ee4:	00 24       	eor	r0, r0
     ee6:	0a 94       	dec	r0
     ee8:	12 16       	cp	r1, r18
     eea:	13 06       	cpc	r1, r19
     eec:	14 06       	cpc	r1, r20
     eee:	05 06       	cpc	r0, r21
     ef0:	08 95       	ret

00000ef2 <__fp_round>:
     ef2:	09 2e       	mov	r0, r25
     ef4:	03 94       	inc	r0
     ef6:	00 0c       	add	r0, r0
     ef8:	11 f4       	brne	.+4      	; 0xefe <__fp_round+0xc>
     efa:	88 23       	and	r24, r24
     efc:	52 f0       	brmi	.+20     	; 0xf12 <__fp_round+0x20>
     efe:	bb 0f       	add	r27, r27
     f00:	40 f4       	brcc	.+16     	; 0xf12 <__fp_round+0x20>
     f02:	bf 2b       	or	r27, r31
     f04:	11 f4       	brne	.+4      	; 0xf0a <__fp_round+0x18>
     f06:	60 ff       	sbrs	r22, 0
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <__fp_round+0x20>
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	8f 4f       	sbci	r24, 0xFF	; 255
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	08 95       	ret

00000f14 <__fp_split3>:
     f14:	57 fd       	sbrc	r21, 7
     f16:	90 58       	subi	r25, 0x80	; 128
     f18:	44 0f       	add	r20, r20
     f1a:	55 1f       	adc	r21, r21
     f1c:	59 f0       	breq	.+22     	; 0xf34 <__fp_splitA+0x10>
     f1e:	5f 3f       	cpi	r21, 0xFF	; 255
     f20:	71 f0       	breq	.+28     	; 0xf3e <__fp_splitA+0x1a>
     f22:	47 95       	ror	r20

00000f24 <__fp_splitA>:
     f24:	88 0f       	add	r24, r24
     f26:	97 fb       	bst	r25, 7
     f28:	99 1f       	adc	r25, r25
     f2a:	61 f0       	breq	.+24     	; 0xf44 <__fp_splitA+0x20>
     f2c:	9f 3f       	cpi	r25, 0xFF	; 255
     f2e:	79 f0       	breq	.+30     	; 0xf4e <__fp_splitA+0x2a>
     f30:	87 95       	ror	r24
     f32:	08 95       	ret
     f34:	12 16       	cp	r1, r18
     f36:	13 06       	cpc	r1, r19
     f38:	14 06       	cpc	r1, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	f2 cf       	rjmp	.-28     	; 0xf22 <__fp_split3+0xe>
     f3e:	46 95       	lsr	r20
     f40:	f1 df       	rcall	.-30     	; 0xf24 <__fp_splitA>
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <__fp_splitA+0x30>
     f44:	16 16       	cp	r1, r22
     f46:	17 06       	cpc	r1, r23
     f48:	18 06       	cpc	r1, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	f1 cf       	rjmp	.-30     	; 0xf30 <__fp_splitA+0xc>
     f4e:	86 95       	lsr	r24
     f50:	71 05       	cpc	r23, r1
     f52:	61 05       	cpc	r22, r1
     f54:	08 94       	sec
     f56:	08 95       	ret

00000f58 <__fp_zero>:
     f58:	e8 94       	clt

00000f5a <__fp_szero>:
     f5a:	bb 27       	eor	r27, r27
     f5c:	66 27       	eor	r22, r22
     f5e:	77 27       	eor	r23, r23
     f60:	cb 01       	movw	r24, r22
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret

00000f66 <__mulsf3>:
     f66:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__mulsf3x>
     f6a:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_round>
     f6e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_pscA>
     f72:	38 f0       	brcs	.+14     	; 0xf82 <__mulsf3+0x1c>
     f74:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscB>
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__mulsf3+0x1c>
     f7a:	95 23       	and	r25, r21
     f7c:	11 f0       	breq	.+4      	; 0xf82 <__mulsf3+0x1c>
     f7e:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
     f82:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_nan>
     f86:	11 24       	eor	r1, r1
     f88:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_szero>

00000f8c <__mulsf3x>:
     f8c:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_split3>
     f90:	70 f3       	brcs	.-36     	; 0xf6e <__mulsf3+0x8>

00000f92 <__mulsf3_pse>:
     f92:	95 9f       	mul	r25, r21
     f94:	c1 f3       	breq	.-16     	; 0xf86 <__mulsf3+0x20>
     f96:	95 0f       	add	r25, r21
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	55 1f       	adc	r21, r21
     f9c:	62 9f       	mul	r22, r18
     f9e:	f0 01       	movw	r30, r0
     fa0:	72 9f       	mul	r23, r18
     fa2:	bb 27       	eor	r27, r27
     fa4:	f0 0d       	add	r31, r0
     fa6:	b1 1d       	adc	r27, r1
     fa8:	63 9f       	mul	r22, r19
     faa:	aa 27       	eor	r26, r26
     fac:	f0 0d       	add	r31, r0
     fae:	b1 1d       	adc	r27, r1
     fb0:	aa 1f       	adc	r26, r26
     fb2:	64 9f       	mul	r22, r20
     fb4:	66 27       	eor	r22, r22
     fb6:	b0 0d       	add	r27, r0
     fb8:	a1 1d       	adc	r26, r1
     fba:	66 1f       	adc	r22, r22
     fbc:	82 9f       	mul	r24, r18
     fbe:	22 27       	eor	r18, r18
     fc0:	b0 0d       	add	r27, r0
     fc2:	a1 1d       	adc	r26, r1
     fc4:	62 1f       	adc	r22, r18
     fc6:	73 9f       	mul	r23, r19
     fc8:	b0 0d       	add	r27, r0
     fca:	a1 1d       	adc	r26, r1
     fcc:	62 1f       	adc	r22, r18
     fce:	83 9f       	mul	r24, r19
     fd0:	a0 0d       	add	r26, r0
     fd2:	61 1d       	adc	r22, r1
     fd4:	22 1f       	adc	r18, r18
     fd6:	74 9f       	mul	r23, r20
     fd8:	33 27       	eor	r19, r19
     fda:	a0 0d       	add	r26, r0
     fdc:	61 1d       	adc	r22, r1
     fde:	23 1f       	adc	r18, r19
     fe0:	84 9f       	mul	r24, r20
     fe2:	60 0d       	add	r22, r0
     fe4:	21 1d       	adc	r18, r1
     fe6:	82 2f       	mov	r24, r18
     fe8:	76 2f       	mov	r23, r22
     fea:	6a 2f       	mov	r22, r26
     fec:	11 24       	eor	r1, r1
     fee:	9f 57       	subi	r25, 0x7F	; 127
     ff0:	50 40       	sbci	r21, 0x00	; 0
     ff2:	9a f0       	brmi	.+38     	; 0x101a <__mulsf3_pse+0x88>
     ff4:	f1 f0       	breq	.+60     	; 0x1032 <__mulsf3_pse+0xa0>
     ff6:	88 23       	and	r24, r24
     ff8:	4a f0       	brmi	.+18     	; 0x100c <__mulsf3_pse+0x7a>
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	bb 1f       	adc	r27, r27
    1000:	66 1f       	adc	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	91 50       	subi	r25, 0x01	; 1
    1008:	50 40       	sbci	r21, 0x00	; 0
    100a:	a9 f7       	brne	.-22     	; 0xff6 <__mulsf3_pse+0x64>
    100c:	9e 3f       	cpi	r25, 0xFE	; 254
    100e:	51 05       	cpc	r21, r1
    1010:	80 f0       	brcs	.+32     	; 0x1032 <__mulsf3_pse+0xa0>
    1012:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
    1016:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_szero>
    101a:	5f 3f       	cpi	r21, 0xFF	; 255
    101c:	e4 f3       	brlt	.-8      	; 0x1016 <__mulsf3_pse+0x84>
    101e:	98 3e       	cpi	r25, 0xE8	; 232
    1020:	d4 f3       	brlt	.-12     	; 0x1016 <__mulsf3_pse+0x84>
    1022:	86 95       	lsr	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	b7 95       	ror	r27
    102a:	f7 95       	ror	r31
    102c:	e7 95       	ror	r30
    102e:	9f 5f       	subi	r25, 0xFF	; 255
    1030:	c1 f7       	brne	.-16     	; 0x1022 <__mulsf3_pse+0x90>
    1032:	fe 2b       	or	r31, r30
    1034:	88 0f       	add	r24, r24
    1036:	91 1d       	adc	r25, r1
    1038:	96 95       	lsr	r25
    103a:	87 95       	ror	r24
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret
    1040:	19 f4       	brne	.+6      	; 0x1048 <__mulsf3_pse+0xb6>
    1042:	16 f4       	brtc	.+4      	; 0x1048 <__mulsf3_pse+0xb6>
    1044:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_nan>
    1048:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_mpack>

0000104c <sqrt>:
    104c:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_splitA>
    1050:	b8 f3       	brcs	.-18     	; 0x1040 <__mulsf3_pse+0xae>
    1052:	99 23       	and	r25, r25
    1054:	c9 f3       	breq	.-14     	; 0x1048 <__mulsf3_pse+0xb6>
    1056:	b6 f3       	brts	.-20     	; 0x1044 <__mulsf3_pse+0xb2>
    1058:	9f 57       	subi	r25, 0x7F	; 127
    105a:	55 0b       	sbc	r21, r21
    105c:	87 ff       	sbrs	r24, 7
    105e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_norm2>
    1062:	00 24       	eor	r0, r0
    1064:	a0 e6       	ldi	r26, 0x60	; 96
    1066:	40 ea       	ldi	r20, 0xA0	; 160
    1068:	90 01       	movw	r18, r0
    106a:	80 58       	subi	r24, 0x80	; 128
    106c:	56 95       	lsr	r21
    106e:	97 95       	ror	r25
    1070:	28 f4       	brcc	.+10     	; 0x107c <sqrt+0x30>
    1072:	80 5c       	subi	r24, 0xC0	; 192
    1074:	66 0f       	add	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	20 f0       	brcs	.+8      	; 0x1084 <sqrt+0x38>
    107c:	26 17       	cp	r18, r22
    107e:	37 07       	cpc	r19, r23
    1080:	48 07       	cpc	r20, r24
    1082:	30 f4       	brcc	.+12     	; 0x1090 <sqrt+0x44>
    1084:	62 1b       	sub	r22, r18
    1086:	73 0b       	sbc	r23, r19
    1088:	84 0b       	sbc	r24, r20
    108a:	20 29       	or	r18, r0
    108c:	31 29       	or	r19, r1
    108e:	4a 2b       	or	r20, r26
    1090:	a6 95       	lsr	r26
    1092:	17 94       	ror	r1
    1094:	07 94       	ror	r0
    1096:	20 25       	eor	r18, r0
    1098:	31 25       	eor	r19, r1
    109a:	4a 27       	eor	r20, r26
    109c:	58 f7       	brcc	.-42     	; 0x1074 <sqrt+0x28>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	20 f0       	brcs	.+8      	; 0x10ae <sqrt+0x62>
    10a6:	26 17       	cp	r18, r22
    10a8:	37 07       	cpc	r19, r23
    10aa:	48 07       	cpc	r20, r24
    10ac:	30 f4       	brcc	.+12     	; 0x10ba <sqrt+0x6e>
    10ae:	62 0b       	sbc	r22, r18
    10b0:	73 0b       	sbc	r23, r19
    10b2:	84 0b       	sbc	r24, r20
    10b4:	20 0d       	add	r18, r0
    10b6:	31 1d       	adc	r19, r1
    10b8:	41 1d       	adc	r20, r1
    10ba:	a0 95       	com	r26
    10bc:	81 f7       	brne	.-32     	; 0x109e <sqrt+0x52>
    10be:	b9 01       	movw	r22, r18
    10c0:	84 2f       	mov	r24, r20
    10c2:	91 58       	subi	r25, 0x81	; 129
    10c4:	88 0f       	add	r24, r24
    10c6:	96 95       	lsr	r25
    10c8:	87 95       	ror	r24
    10ca:	08 95       	ret

000010cc <__fp_mpack>:
    10cc:	9f 3f       	cpi	r25, 0xFF	; 255
    10ce:	31 f0       	breq	.+12     	; 0x10dc <__fp_mpack_finite+0xc>

000010d0 <__fp_mpack_finite>:
    10d0:	91 50       	subi	r25, 0x01	; 1
    10d2:	20 f4       	brcc	.+8      	; 0x10dc <__fp_mpack_finite+0xc>
    10d4:	87 95       	ror	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	b7 95       	ror	r27
    10dc:	88 0f       	add	r24, r24
    10de:	91 1d       	adc	r25, r1
    10e0:	96 95       	lsr	r25
    10e2:	87 95       	ror	r24
    10e4:	97 f9       	bld	r25, 7
    10e6:	08 95       	ret

000010e8 <__fp_norm2>:
    10e8:	91 50       	subi	r25, 0x01	; 1
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	d2 f7       	brpl	.-12     	; 0x10e8 <__fp_norm2>
    10f4:	08 95       	ret

000010f6 <__udivmodsi4>:
    10f6:	a1 e2       	ldi	r26, 0x21	; 33
    10f8:	1a 2e       	mov	r1, r26
    10fa:	aa 1b       	sub	r26, r26
    10fc:	bb 1b       	sub	r27, r27
    10fe:	fd 01       	movw	r30, r26
    1100:	0d c0       	rjmp	.+26     	; 0x111c <__udivmodsi4_ep>

00001102 <__udivmodsi4_loop>:
    1102:	aa 1f       	adc	r26, r26
    1104:	bb 1f       	adc	r27, r27
    1106:	ee 1f       	adc	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	a2 17       	cp	r26, r18
    110c:	b3 07       	cpc	r27, r19
    110e:	e4 07       	cpc	r30, r20
    1110:	f5 07       	cpc	r31, r21
    1112:	20 f0       	brcs	.+8      	; 0x111c <__udivmodsi4_ep>
    1114:	a2 1b       	sub	r26, r18
    1116:	b3 0b       	sbc	r27, r19
    1118:	e4 0b       	sbc	r30, r20
    111a:	f5 0b       	sbc	r31, r21

0000111c <__udivmodsi4_ep>:
    111c:	66 1f       	adc	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	1a 94       	dec	r1
    1126:	69 f7       	brne	.-38     	; 0x1102 <__udivmodsi4_loop>
    1128:	60 95       	com	r22
    112a:	70 95       	com	r23
    112c:	80 95       	com	r24
    112e:	90 95       	com	r25
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
    1134:	bd 01       	movw	r22, r26
    1136:	cf 01       	movw	r24, r30
    1138:	08 95       	ret

0000113a <__muldi3>:
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	1f 93       	push	r17
    1140:	0f 93       	push	r16
    1142:	9a 9d       	mul	r25, r10
    1144:	f0 2d       	mov	r31, r0
    1146:	21 9f       	mul	r18, r17
    1148:	f0 0d       	add	r31, r0
    114a:	8b 9d       	mul	r24, r11
    114c:	f0 0d       	add	r31, r0
    114e:	8a 9d       	mul	r24, r10
    1150:	e0 2d       	mov	r30, r0
    1152:	f1 0d       	add	r31, r1
    1154:	03 9f       	mul	r16, r19
    1156:	f0 0d       	add	r31, r0
    1158:	02 9f       	mul	r16, r18
    115a:	e0 0d       	add	r30, r0
    115c:	f1 1d       	adc	r31, r1
    115e:	4e 9d       	mul	r20, r14
    1160:	e0 0d       	add	r30, r0
    1162:	f1 1d       	adc	r31, r1
    1164:	5e 9d       	mul	r21, r14
    1166:	f0 0d       	add	r31, r0
    1168:	4f 9d       	mul	r20, r15
    116a:	f0 0d       	add	r31, r0
    116c:	7f 93       	push	r23
    116e:	6f 93       	push	r22
    1170:	bf 92       	push	r11
    1172:	af 92       	push	r10
    1174:	5f 93       	push	r21
    1176:	4f 93       	push	r20
    1178:	d5 01       	movw	r26, r10
    117a:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
    117e:	8b 01       	movw	r16, r22
    1180:	ac 01       	movw	r20, r24
    1182:	d7 01       	movw	r26, r14
    1184:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
    1188:	eb 01       	movw	r28, r22
    118a:	e8 0f       	add	r30, r24
    118c:	f9 1f       	adc	r31, r25
    118e:	d6 01       	movw	r26, r12
    1190:	0e 94 ed 08 	call	0x11da	; 0x11da <__muldi3_6>
    1194:	2f 91       	pop	r18
    1196:	3f 91       	pop	r19
    1198:	d6 01       	movw	r26, r12
    119a:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
    119e:	c6 0f       	add	r28, r22
    11a0:	d7 1f       	adc	r29, r23
    11a2:	e8 1f       	adc	r30, r24
    11a4:	f9 1f       	adc	r31, r25
    11a6:	af 91       	pop	r26
    11a8:	bf 91       	pop	r27
    11aa:	0e 94 ed 08 	call	0x11da	; 0x11da <__muldi3_6>
    11ae:	2f 91       	pop	r18
    11b0:	3f 91       	pop	r19
    11b2:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
    11b6:	c6 0f       	add	r28, r22
    11b8:	d7 1f       	adc	r29, r23
    11ba:	e8 1f       	adc	r30, r24
    11bc:	f9 1f       	adc	r31, r25
    11be:	d6 01       	movw	r26, r12
    11c0:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
    11c4:	e6 0f       	add	r30, r22
    11c6:	f7 1f       	adc	r31, r23
    11c8:	98 01       	movw	r18, r16
    11ca:	be 01       	movw	r22, r28
    11cc:	cf 01       	movw	r24, r30
    11ce:	11 24       	eor	r1, r1
    11d0:	0f 91       	pop	r16
    11d2:	1f 91       	pop	r17
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <__muldi3_6>:
    11da:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
    11de:	46 0f       	add	r20, r22
    11e0:	57 1f       	adc	r21, r23
    11e2:	c8 1f       	adc	r28, r24
    11e4:	d9 1f       	adc	r29, r25
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <__muldi3_6+0x10>
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	08 95       	ret

000011ec <__moddi3>:
    11ec:	68 94       	set
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <__divdi3_moddi3>

000011f0 <__divdi3>:
    11f0:	e8 94       	clt

000011f2 <__divdi3_moddi3>:
    11f2:	f9 2f       	mov	r31, r25
    11f4:	f1 2b       	or	r31, r17
    11f6:	12 f0       	brmi	.+4      	; 0x11fc <__divdi3_moddi3+0xa>
    11f8:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__udivdi3_umoddi3>
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e4 e0       	ldi	r30, 0x04	; 4
    1202:	f9 e0       	ldi	r31, 0x09	; 9
    1204:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__prologue_saves__+0xc>
    1208:	09 2e       	mov	r0, r25
    120a:	05 94       	asr	r0
    120c:	22 f4       	brpl	.+8      	; 0x1216 <__divdi3_moddi3+0x24>
    120e:	0e 94 86 09 	call	0x130c	; 0x130c <__negdi2>
    1212:	11 23       	and	r17, r17
    1214:	92 f4       	brpl	.+36     	; 0x123a <__divdi3_moddi3+0x48>
    1216:	f0 e8       	ldi	r31, 0x80	; 128
    1218:	0f 26       	eor	r0, r31
    121a:	ff ef       	ldi	r31, 0xFF	; 255
    121c:	e0 94       	com	r14
    121e:	f0 94       	com	r15
    1220:	00 95       	com	r16
    1222:	10 95       	com	r17
    1224:	b0 94       	com	r11
    1226:	c0 94       	com	r12
    1228:	d0 94       	com	r13
    122a:	a1 94       	neg	r10
    122c:	bf 0a       	sbc	r11, r31
    122e:	cf 0a       	sbc	r12, r31
    1230:	df 0a       	sbc	r13, r31
    1232:	ef 0a       	sbc	r14, r31
    1234:	ff 0a       	sbc	r15, r31
    1236:	0f 0b       	sbc	r16, r31
    1238:	1f 0b       	sbc	r17, r31
    123a:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmod64>
    123e:	07 fc       	sbrc	r0, 7
    1240:	0e 94 86 09 	call	0x130c	; 0x130c <__negdi2>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	ec e0       	ldi	r30, 0x0C	; 12
    124a:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__epilogue_restores__+0xc>

0000124e <__umoddi3>:
    124e:	68 94       	set
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <__udivdi3_umoddi3>

00001252 <__udivdi3>:
    1252:	e8 94       	clt

00001254 <__udivdi3_umoddi3>:
    1254:	8f 92       	push	r8
    1256:	9f 92       	push	r9
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmod64>
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	08 95       	ret

0000126a <__udivmod64>:
    126a:	88 24       	eor	r8, r8
    126c:	99 24       	eor	r9, r9
    126e:	f4 01       	movw	r30, r8
    1270:	e4 01       	movw	r28, r8
    1272:	b0 e4       	ldi	r27, 0x40	; 64
    1274:	9f 93       	push	r25
    1276:	aa 27       	eor	r26, r26
    1278:	9a 15       	cp	r25, r10
    127a:	8b 04       	cpc	r8, r11
    127c:	9c 04       	cpc	r9, r12
    127e:	ed 05       	cpc	r30, r13
    1280:	fe 05       	cpc	r31, r14
    1282:	cf 05       	cpc	r28, r15
    1284:	d0 07       	cpc	r29, r16
    1286:	a1 07       	cpc	r26, r17
    1288:	98 f4       	brcc	.+38     	; 0x12b0 <__udivmod64+0x46>
    128a:	ad 2f       	mov	r26, r29
    128c:	dc 2f       	mov	r29, r28
    128e:	cf 2f       	mov	r28, r31
    1290:	fe 2f       	mov	r31, r30
    1292:	e9 2d       	mov	r30, r9
    1294:	98 2c       	mov	r9, r8
    1296:	89 2e       	mov	r8, r25
    1298:	98 2f       	mov	r25, r24
    129a:	87 2f       	mov	r24, r23
    129c:	76 2f       	mov	r23, r22
    129e:	65 2f       	mov	r22, r21
    12a0:	54 2f       	mov	r21, r20
    12a2:	43 2f       	mov	r20, r19
    12a4:	32 2f       	mov	r19, r18
    12a6:	22 27       	eor	r18, r18
    12a8:	b8 50       	subi	r27, 0x08	; 8
    12aa:	31 f7       	brne	.-52     	; 0x1278 <__udivmod64+0xe>
    12ac:	bf 91       	pop	r27
    12ae:	27 c0       	rjmp	.+78     	; 0x12fe <__udivmod64+0x94>
    12b0:	1b 2e       	mov	r1, r27
    12b2:	bf 91       	pop	r27
    12b4:	bb 27       	eor	r27, r27
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	44 1f       	adc	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	66 1f       	adc	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	88 1c       	adc	r8, r8
    12c8:	99 1c       	adc	r9, r9
    12ca:	ee 1f       	adc	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	cc 1f       	adc	r28, r28
    12d0:	dd 1f       	adc	r29, r29
    12d2:	aa 1f       	adc	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	8a 14       	cp	r8, r10
    12d8:	9b 04       	cpc	r9, r11
    12da:	ec 05       	cpc	r30, r12
    12dc:	fd 05       	cpc	r31, r13
    12de:	ce 05       	cpc	r28, r14
    12e0:	df 05       	cpc	r29, r15
    12e2:	a0 07       	cpc	r26, r16
    12e4:	b1 07       	cpc	r27, r17
    12e6:	48 f0       	brcs	.+18     	; 0x12fa <__udivmod64+0x90>
    12e8:	8a 18       	sub	r8, r10
    12ea:	9b 08       	sbc	r9, r11
    12ec:	ec 09       	sbc	r30, r12
    12ee:	fd 09       	sbc	r31, r13
    12f0:	ce 09       	sbc	r28, r14
    12f2:	df 09       	sbc	r29, r15
    12f4:	a0 0b       	sbc	r26, r16
    12f6:	b1 0b       	sbc	r27, r17
    12f8:	21 60       	ori	r18, 0x01	; 1
    12fa:	1a 94       	dec	r1
    12fc:	e1 f6       	brne	.-72     	; 0x12b6 <__udivmod64+0x4c>
    12fe:	2e f4       	brtc	.+10     	; 0x130a <__udivmod64+0xa0>
    1300:	94 01       	movw	r18, r8
    1302:	af 01       	movw	r20, r30
    1304:	be 01       	movw	r22, r28
    1306:	cd 01       	movw	r24, r26
    1308:	00 0c       	add	r0, r0
    130a:	08 95       	ret

0000130c <__negdi2>:
    130c:	60 95       	com	r22
    130e:	70 95       	com	r23
    1310:	80 95       	com	r24
    1312:	90 95       	com	r25
    1314:	30 95       	com	r19
    1316:	40 95       	com	r20
    1318:	50 95       	com	r21
    131a:	21 95       	neg	r18
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	4f 4f       	sbci	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	6f 4f       	sbci	r22, 0xFF	; 255
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	8f 4f       	sbci	r24, 0xFF	; 255
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	08 95       	ret

0000132c <__prologue_saves__>:
    132c:	2f 92       	push	r2
    132e:	3f 92       	push	r3
    1330:	4f 92       	push	r4
    1332:	5f 92       	push	r5
    1334:	6f 92       	push	r6
    1336:	7f 92       	push	r7
    1338:	8f 92       	push	r8
    133a:	9f 92       	push	r9
    133c:	af 92       	push	r10
    133e:	bf 92       	push	r11
    1340:	cf 92       	push	r12
    1342:	df 92       	push	r13
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	ca 1b       	sub	r28, r26
    1356:	db 0b       	sbc	r29, r27
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	09 94       	ijmp

00001364 <__epilogue_restores__>:
    1364:	2a 88       	ldd	r2, Y+18	; 0x12
    1366:	39 88       	ldd	r3, Y+17	; 0x11
    1368:	48 88       	ldd	r4, Y+16	; 0x10
    136a:	5f 84       	ldd	r5, Y+15	; 0x0f
    136c:	6e 84       	ldd	r6, Y+14	; 0x0e
    136e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1370:	8c 84       	ldd	r8, Y+12	; 0x0c
    1372:	9b 84       	ldd	r9, Y+11	; 0x0b
    1374:	aa 84       	ldd	r10, Y+10	; 0x0a
    1376:	b9 84       	ldd	r11, Y+9	; 0x09
    1378:	c8 84       	ldd	r12, Y+8	; 0x08
    137a:	df 80       	ldd	r13, Y+7	; 0x07
    137c:	ee 80       	ldd	r14, Y+6	; 0x06
    137e:	fd 80       	ldd	r15, Y+5	; 0x05
    1380:	0c 81       	ldd	r16, Y+4	; 0x04
    1382:	1b 81       	ldd	r17, Y+3	; 0x03
    1384:	aa 81       	ldd	r26, Y+2	; 0x02
    1386:	b9 81       	ldd	r27, Y+1	; 0x01
    1388:	ce 0f       	add	r28, r30
    138a:	d1 1d       	adc	r29, r1
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	ed 01       	movw	r28, r26
    1398:	08 95       	ret

0000139a <__ashldi3>:
    139a:	0f 93       	push	r16
    139c:	08 30       	cpi	r16, 0x08	; 8
    139e:	90 f0       	brcs	.+36     	; 0x13c4 <__ashldi3+0x2a>
    13a0:	98 2f       	mov	r25, r24
    13a2:	87 2f       	mov	r24, r23
    13a4:	76 2f       	mov	r23, r22
    13a6:	65 2f       	mov	r22, r21
    13a8:	54 2f       	mov	r21, r20
    13aa:	43 2f       	mov	r20, r19
    13ac:	32 2f       	mov	r19, r18
    13ae:	22 27       	eor	r18, r18
    13b0:	08 50       	subi	r16, 0x08	; 8
    13b2:	f4 cf       	rjmp	.-24     	; 0x139c <__ashldi3+0x2>
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	44 1f       	adc	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	66 1f       	adc	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 95       	dec	r16
    13c6:	b2 f7       	brpl	.-20     	; 0x13b4 <__ashldi3+0x1a>
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <__adddi3>:
    13cc:	2a 0d       	add	r18, r10
    13ce:	3b 1d       	adc	r19, r11
    13d0:	4c 1d       	adc	r20, r12
    13d2:	5d 1d       	adc	r21, r13
    13d4:	6e 1d       	adc	r22, r14
    13d6:	7f 1d       	adc	r23, r15
    13d8:	80 1f       	adc	r24, r16
    13da:	91 1f       	adc	r25, r17
    13dc:	08 95       	ret

000013de <__adddi3_s8>:
    13de:	00 24       	eor	r0, r0
    13e0:	a7 fd       	sbrc	r26, 7
    13e2:	00 94       	com	r0
    13e4:	2a 0f       	add	r18, r26
    13e6:	30 1d       	adc	r19, r0
    13e8:	40 1d       	adc	r20, r0
    13ea:	50 1d       	adc	r21, r0
    13ec:	60 1d       	adc	r22, r0
    13ee:	70 1d       	adc	r23, r0
    13f0:	80 1d       	adc	r24, r0
    13f2:	90 1d       	adc	r25, r0
    13f4:	08 95       	ret

000013f6 <__subdi3>:
    13f6:	2a 19       	sub	r18, r10
    13f8:	3b 09       	sbc	r19, r11
    13fa:	4c 09       	sbc	r20, r12
    13fc:	5d 09       	sbc	r21, r13
    13fe:	6e 09       	sbc	r22, r14
    1400:	7f 09       	sbc	r23, r15
    1402:	80 0b       	sbc	r24, r16
    1404:	91 0b       	sbc	r25, r17
    1406:	08 95       	ret

00001408 <__cmpdi2>:
    1408:	2a 15       	cp	r18, r10
    140a:	3b 05       	cpc	r19, r11
    140c:	4c 05       	cpc	r20, r12
    140e:	5d 05       	cpc	r21, r13
    1410:	6e 05       	cpc	r22, r14
    1412:	7f 05       	cpc	r23, r15
    1414:	80 07       	cpc	r24, r16
    1416:	91 07       	cpc	r25, r17
    1418:	08 95       	ret

0000141a <__cmpdi2_s8>:
    141a:	00 24       	eor	r0, r0
    141c:	a7 fd       	sbrc	r26, 7
    141e:	00 94       	com	r0
    1420:	2a 17       	cp	r18, r26
    1422:	30 05       	cpc	r19, r0
    1424:	40 05       	cpc	r20, r0
    1426:	50 05       	cpc	r21, r0
    1428:	60 05       	cpc	r22, r0
    142a:	70 05       	cpc	r23, r0
    142c:	80 05       	cpc	r24, r0
    142e:	90 05       	cpc	r25, r0
    1430:	08 95       	ret

00001432 <__umulhisi3>:
    1432:	a2 9f       	mul	r26, r18
    1434:	b0 01       	movw	r22, r0
    1436:	b3 9f       	mul	r27, r19
    1438:	c0 01       	movw	r24, r0
    143a:	a3 9f       	mul	r26, r19
    143c:	70 0d       	add	r23, r0
    143e:	81 1d       	adc	r24, r1
    1440:	11 24       	eor	r1, r1
    1442:	91 1d       	adc	r25, r1
    1444:	b2 9f       	mul	r27, r18
    1446:	70 0d       	add	r23, r0
    1448:	81 1d       	adc	r24, r1
    144a:	11 24       	eor	r1, r1
    144c:	91 1d       	adc	r25, r1
    144e:	08 95       	ret

00001450 <_exit>:
    1450:	f8 94       	cli

00001452 <__stop_program>:
    1452:	ff cf       	rjmp	.-2      	; 0x1452 <__stop_program>
