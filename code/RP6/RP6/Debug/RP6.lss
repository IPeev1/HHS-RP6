
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001488  0000151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800066  00800066  00001522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000591  00000000  00000000  00002675  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000538  00000000  00000000  00003332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000386a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_1>
       8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 05 	call	0xb84	; 0xb84 <main>
      8a:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <driveSpeed>:
	return 0;							//If going backwards or standing still
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
      92:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <globalDriveDirection>
      96:	88 23       	and	r24, r24
      98:	29 f0       	breq	.+10     	; 0xa4 <driveSpeed+0x12>
      9a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <globalDriveThrottle>
      9e:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <globalDriveThrottle+0x1>
      a2:	08 95       	ret
      a4:	80 e0       	ldi	r24, 0x00	; 0
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	08 95       	ret

000000aa <driveDirection>:
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <globalDriveDirection>
      b2:	21 30       	cpi	r18, 0x01	; 1
      b4:	11 f0       	breq	.+4      	; 0xba <driveDirection+0x10>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	08 95       	ret

000000bc <init_LED>:
}


void init_LED(){
	DDRB |= 0b10000011;
      bc:	87 b3       	in	r24, 0x17	; 23
      be:	83 68       	ori	r24, 0x83	; 131
      c0:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      c2:	84 b3       	in	r24, 0x14	; 20
      c4:	80 67       	ori	r24, 0x70	; 112
      c6:	84 bb       	out	0x14, r24	; 20
      c8:	08 95       	ret

000000ca <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	81 60       	ori	r24, 0x01	; 1
      ce:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      d0:	83 b7       	in	r24, 0x33	; 51
      d2:	82 60       	ori	r24, 0x02	; 2
      d4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      d6:	89 b7       	in	r24, 0x39	; 57
      d8:	81 60       	ori	r24, 0x01	; 1
      da:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      dc:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      de:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <t0TotalOverflow>
      e2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <t0TotalOverflow+0x1>
      e6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <t0TotalOverflow+0x2>
      ea:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <t0TotalOverflow+0x3>
      ee:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <t0TotalOverflow+0x4>
      f2:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <t0TotalOverflow+0x5>
      f6:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <t0TotalOverflow+0x6>
      fa:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <t0TotalOverflow+0x7>
      fe:	08 95       	ret

00000100 <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	0f 92       	push	r0
     108:	11 24       	eor	r1, r1
     10a:	2f 93       	push	r18
     10c:	3f 93       	push	r19
     10e:	4f 93       	push	r20
     110:	5f 93       	push	r21
     112:	6f 93       	push	r22
     114:	7f 93       	push	r23
     116:	8f 93       	push	r24
     118:	9f 93       	push	r25
     11a:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
     11c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <t0TotalOverflow>
     120:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <t0TotalOverflow+0x1>
     124:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <t0TotalOverflow+0x2>
     128:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <t0TotalOverflow+0x3>
     12c:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <t0TotalOverflow+0x4>
     130:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <t0TotalOverflow+0x5>
     134:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <t0TotalOverflow+0x6>
     138:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <t0TotalOverflow+0x7>
     13c:	a1 e0       	ldi	r26, 0x01	; 1
     13e:	0e 94 09 0a 	call	0x1412	; 0x1412 <__adddi3_s8>
     142:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <t0TotalOverflow>
     146:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <t0TotalOverflow+0x1>
     14a:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <t0TotalOverflow+0x2>
     14e:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <t0TotalOverflow+0x3>
     152:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <t0TotalOverflow+0x4>
     156:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <t0TotalOverflow+0x5>
     15a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <t0TotalOverflow+0x6>
     15e:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <t0TotalOverflow+0x7>
}
     162:	af 91       	pop	r26
     164:	9f 91       	pop	r25
     166:	8f 91       	pop	r24
     168:	7f 91       	pop	r23
     16a:	6f 91       	pop	r22
     16c:	5f 91       	pop	r21
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <micros>:


uint64_t micros(){
     17e:	af 92       	push	r10
     180:	bf 92       	push	r11
     182:	cf 92       	push	r12
     184:	df 92       	push	r13
     186:	ef 92       	push	r14
     188:	ff 92       	push	r15
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     18e:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     190:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <t0TotalOverflow>
     194:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <t0TotalOverflow+0x1>
     198:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <t0TotalOverflow+0x2>
     19c:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <t0TotalOverflow+0x3>
     1a0:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <t0TotalOverflow+0x4>
     1a4:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <t0TotalOverflow+0x5>
     1a8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <t0TotalOverflow+0x6>
     1ac:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     1b0:	e0 e0       	ldi	r30, 0x00	; 0
     1b2:	fa 2f       	mov	r31, r26
     1b4:	ff 0f       	add	r31, r31
     1b6:	ff 0f       	add	r31, r31
     1b8:	ff 0f       	add	r31, r31
     1ba:	ff 23       	and	r31, r31
     1bc:	14 f4       	brge	.+4      	; 0x1c2 <micros+0x44>
     1be:	e1 50       	subi	r30, 0x01	; 1
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	ef 2f       	mov	r30, r31
     1c4:	ee 0f       	add	r30, r30
     1c6:	ee 0b       	sbc	r30, r30
     1c8:	0b e0       	ldi	r16, 0x0B	; 11
     1ca:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__ashldi3>
     1ce:	a2 2e       	mov	r10, r18
     1d0:	b3 2e       	mov	r11, r19
     1d2:	c4 2e       	mov	r12, r20
     1d4:	d5 2e       	mov	r13, r21
     1d6:	e6 2e       	mov	r14, r22
     1d8:	f7 2e       	mov	r15, r23
     1da:	08 2f       	mov	r16, r24
     1dc:	19 2f       	mov	r17, r25
     1de:	2f 2f       	mov	r18, r31
     1e0:	3e 2f       	mov	r19, r30
     1e2:	4e 2f       	mov	r20, r30
     1e4:	5e 2f       	mov	r21, r30
     1e6:	6e 2f       	mov	r22, r30
     1e8:	7e 2f       	mov	r23, r30
     1ea:	8e 2f       	mov	r24, r30
     1ec:	9e 2f       	mov	r25, r30
     1ee:	0e 94 00 0a 	call	0x1400	; 0x1400 <__adddi3>
}
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	ef 90       	pop	r14
     1fa:	df 90       	pop	r13
     1fc:	cf 90       	pop	r12
     1fe:	bf 90       	pop	r11
     200:	af 90       	pop	r10
     202:	08 95       	ret

00000204 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     204:	81 b3       	in	r24, 0x11	; 17
     206:	80 63       	ori	r24, 0x30	; 48
     208:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     20a:	81 b3       	in	r24, 0x11	; 17
     20c:	83 7f       	andi	r24, 0xF3	; 243
     20e:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     210:	84 b3       	in	r24, 0x14	; 20
     212:	8c 60       	ori	r24, 0x0C	; 12
     214:	84 bb       	out	0x14, r24	; 20
     216:	08 95       	ret

00000218 <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     218:	8f b5       	in	r24, 0x2f	; 47
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     21e:	8f b5       	in	r24, 0x2f	; 47
     220:	80 62       	ori	r24, 0x20	; 32
     222:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     224:	8f b5       	in	r24, 0x2f	; 47
     226:	82 60       	ori	r24, 0x02	; 2
     228:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     22a:	8e b5       	in	r24, 0x2e	; 46
     22c:	80 61       	ori	r24, 0x10	; 16
     22e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     230:	8e b5       	in	r24, 0x2e	; 46
     232:	81 60       	ori	r24, 0x01	; 1
     234:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	99 ef       	ldi	r25, 0xF9	; 249
     23a:	97 bd       	out	0x27, r25	; 39
     23c:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     23e:	1b bc       	out	0x2b, r1	; 43
     240:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     242:	19 bc       	out	0x29, r1	; 41
     244:	18 bc       	out	0x28, r1	; 40
     246:	08 95       	ret

00000248 <init_motor_encoder>:
}


void init_motor_encoder(){
	motorEncoderLVal = 0;
     248:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <motorEncoderLVal+0x1>
     24c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <motorEncoderLVal>
	motorEncoderRVal = 0;
     250:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <motorEncoderRVal+0x1>
     254:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <motorEncoderRVal>
	MCUCR |= (1 << ISC00);
     258:	85 b7       	in	r24, 0x35	; 53
     25a:	81 60       	ori	r24, 0x01	; 1
     25c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);
     25e:	85 b7       	in	r24, 0x35	; 53
     260:	84 60       	ori	r24, 0x04	; 4
     262:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     264:	8b b7       	in	r24, 0x3b	; 59
     266:	80 64       	ori	r24, 0x40	; 64
     268:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);
     26a:	8b b7       	in	r24, 0x3b	; 59
     26c:	80 68       	ori	r24, 0x80	; 128
     26e:	8b bf       	out	0x3b, r24	; 59
     270:	08 95       	ret

00000272 <init_motor>:
	return microsReturnValue;																						//Return the calculated value
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     272:	0e 94 02 01 	call	0x204	; 0x204 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     276:	0e 94 0c 01 	call	0x218	; 0x218 <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     27a:	0e 94 24 01 	call	0x248	; 0x248 <init_motor_encoder>
     27e:	08 95       	ret

00000280 <__vector_1>:
	GICR |= (1 << INT0);
	GICR |= (1 << INT1);
}


ISR(INT0_vect){
     280:	1f 92       	push	r1
     282:	0f 92       	push	r0
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	0f 92       	push	r0
     288:	11 24       	eor	r1, r1
     28a:	8f 93       	push	r24
     28c:	9f 93       	push	r25
	motorEncoderLVal++;
     28e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <motorEncoderLVal>
     292:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <motorEncoderLVal+0x1>
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <motorEncoderLVal+0x1>
     29c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <motorEncoderLVal>
}
     2a0:	9f 91       	pop	r25
     2a2:	8f 91       	pop	r24
     2a4:	0f 90       	pop	r0
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	0f 90       	pop	r0
     2aa:	1f 90       	pop	r1
     2ac:	18 95       	reti

000002ae <__vector_2>:


ISR(INT1_vect){
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
	motorEncoderRVal++;
     2bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <motorEncoderRVal>
     2c0:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <motorEncoderRVal+0x1>
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <motorEncoderRVal+0x1>
     2ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <motorEncoderRVal>
}
     2ce:	9f 91       	pop	r25
     2d0:	8f 91       	pop	r24
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){
     2dc:	89 2b       	or	r24, r25
     2de:	39 f0       	breq	.+14     	; 0x2ee <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);
     2e0:	8b b7       	in	r24, 0x3b	; 59
     2e2:	80 64       	ori	r24, 0x40	; 64
     2e4:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);
     2e6:	8b b7       	in	r24, 0x3b	; 59
     2e8:	80 68       	ori	r24, 0x80	; 128
     2ea:	8b bf       	out	0x3b, r24	; 59
     2ec:	08 95       	ret
	}else{
		GICR &= ~(1 << INT0);
     2ee:	8b b7       	in	r24, 0x3b	; 59
     2f0:	8f 7b       	andi	r24, 0xBF	; 191
     2f2:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);
     2f4:	8b b7       	in	r24, 0x3b	; 59
     2f6:	8f 77       	andi	r24, 0x7F	; 127
     2f8:	8b bf       	out	0x3b, r24	; 59
     2fa:	08 95       	ret

000002fc <motorDriver>:
	}
}


int motorDriver(int64_t driveSpeed, int driveDirection, int turnDirection){
     2fc:	2f 92       	push	r2
     2fe:	3f 92       	push	r3
     300:	4f 92       	push	r4
     302:	5f 92       	push	r5
     304:	6f 92       	push	r6
     306:	7f 92       	push	r7
     308:	8f 92       	push	r8
     30a:	9f 92       	push	r9
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	67 97       	sbiw	r28, 0x17	; 23
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	32 2e       	mov	r3, r18
     332:	43 2e       	mov	r4, r19
     334:	54 2e       	mov	r5, r20
     336:	65 2e       	mov	r6, r21
     338:	76 2e       	mov	r7, r22
     33a:	79 83       	std	Y+1, r23	; 0x01
     33c:	8a 83       	std	Y+2, r24	; 0x02
     33e:	29 2e       	mov	r2, r25
     340:	1e 8b       	std	Y+22, r17	; 0x16
     342:	0d 8b       	std	Y+21, r16	; 0x15
     344:	47 01       	movw	r8, r14
	
	static uint32_t leftMotorSpeed = 0;
	static uint32_t rightMotorSpeed = 0;
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     346:	0e 94 bf 00 	call	0x17e	; 0x17e <micros>
     34a:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.1808>
     34e:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.1808+0x1>
     352:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.1808+0x2>
     356:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.1808+0x3>
     35a:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.1808+0x4>
     35e:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.1808+0x5>
     362:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.1808+0x6>
     366:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.1808+0x7>
     36a:	0e 94 1e 0a 	call	0x143c	; 0x143c <__cmpdi2>
     36e:	08 f4       	brcc	.+2      	; 0x372 <motorDriver+0x76>
     370:	ee c3       	rjmp	.+2012   	; 0xb4e <__stack+0x2ef>
		return 0;
	}else{
		updateTimer = micros() + updateSpeed;											//If the timer has passed, set new timer and execute the code
     372:	0e 94 bf 00 	call	0x17e	; 0x17e <micros>
     376:	29 87       	std	Y+9, r18	; 0x09
     378:	3a 87       	std	Y+10, r19	; 0x0a
     37a:	4b 87       	std	Y+11, r20	; 0x0b
     37c:	5c 87       	std	Y+12, r21	; 0x0c
     37e:	6d 87       	std	Y+13, r22	; 0x0d
     380:	7e 87       	std	Y+14, r23	; 0x0e
     382:	8f 87       	std	Y+15, r24	; 0x0f
     384:	98 8b       	std	Y+16, r25	; 0x10
     386:	20 5c       	subi	r18, 0xC0	; 192
     388:	32 4f       	sbci	r19, 0xF2	; 242
     38a:	4c 4f       	sbci	r20, 0xFC	; 252
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	6f 4f       	sbci	r22, 0xFF	; 255
     390:	7f 4f       	sbci	r23, 0xFF	; 255
     392:	8f 4f       	sbci	r24, 0xFF	; 255
     394:	9f 4f       	sbci	r25, 0xFF	; 255
     396:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1808>
     39a:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1808+0x1>
     39e:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1808+0x2>
     3a2:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1808+0x3>
     3a6:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1808+0x4>
     3aa:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1808+0x5>
     3ae:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1808+0x6>
     3b2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1808+0x7>
	}
	
	
	//Remap drive speed percentage
	driveSpeed = (driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     3b6:	a1 2c       	mov	r10, r1
     3b8:	0f 2e       	mov	r0, r31
     3ba:	f4 e6       	ldi	r31, 0x64	; 100
     3bc:	bf 2e       	mov	r11, r31
     3be:	f0 2d       	mov	r31, r0
     3c0:	c1 2c       	mov	r12, r1
     3c2:	d1 2c       	mov	r13, r1
     3c4:	e1 2c       	mov	r14, r1
     3c6:	f1 2c       	mov	r15, r1
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	10 e0       	ldi	r17, 0x00	; 0
     3cc:	23 2d       	mov	r18, r3
     3ce:	34 2d       	mov	r19, r4
     3d0:	45 2d       	mov	r20, r5
     3d2:	56 2d       	mov	r21, r6
     3d4:	67 2d       	mov	r22, r7
     3d6:	79 81       	ldd	r23, Y+1	; 0x01
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	92 2d       	mov	r25, r2
     3dc:	0e 94 b7 08 	call	0x116e	; 0x116e <__muldi3>
     3e0:	0f 2e       	mov	r0, r31
     3e2:	f4 e6       	ldi	r31, 0x64	; 100
     3e4:	af 2e       	mov	r10, r31
     3e6:	f0 2d       	mov	r31, r0
     3e8:	b1 2c       	mov	r11, r1
     3ea:	0e 94 12 09 	call	0x1224	; 0x1224 <__divdi3>
     3ee:	29 83       	std	Y+1, r18	; 0x01
     3f0:	3a 83       	std	Y+2, r19	; 0x02
     3f2:	24 2e       	mov	r2, r20
     3f4:	35 2e       	mov	r3, r21
     3f6:	46 2e       	mov	r4, r22
     3f8:	57 2e       	mov	r5, r23
     3fa:	68 2e       	mov	r6, r24
     3fc:	79 2e       	mov	r7, r25
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     3fe:	27 38       	cpi	r18, 0x87	; 135
     400:	33 41       	sbci	r19, 0x13	; 19
     402:	41 05       	cpc	r20, r1
     404:	51 05       	cpc	r21, r1
     406:	61 05       	cpc	r22, r1
     408:	71 05       	cpc	r23, r1
     40a:	81 05       	cpc	r24, r1
     40c:	91 05       	cpc	r25, r1
     40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	44 f4       	brge	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     412:	19 82       	std	Y+1, r1	; 0x01
     414:	1a 82       	std	Y+2, r1	; 0x02
     416:	21 2c       	mov	r2, r1
     418:	31 2c       	mov	r3, r1
     41a:	41 2c       	mov	r4, r1
     41c:	51 2c       	mov	r5, r1
     41e:	61 2c       	mov	r6, r1
     420:	71 2c       	mov	r7, r1
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     422:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1811>
     426:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1811+0x1>
     42a:	2d 89       	ldd	r18, Y+21	; 0x15
     42c:	3e 89       	ldd	r19, Y+22	; 0x16
     42e:	82 17       	cp	r24, r18
     430:	93 07       	cpc	r25, r19
     432:	59 f1       	breq	.+86     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     434:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1810>
     438:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1810+0x1>
     43c:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1810+0x2>
     440:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1810+0x3>
     444:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1810+0x4>
     448:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1810+0x5>
     44c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1810+0x6>
     450:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1810+0x7>
     454:	a0 e0       	ldi	r26, 0x00	; 0
     456:	0e 94 27 0a 	call	0x144e	; 0x144e <__cmpdi2_s8>
     45a:	79 f4       	brne	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		driveSpeed = 0;																	//Set the requested speed to 0
	}else if(driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = driveDirection;											//Reverse the driving direction
     45c:	8d 89       	ldd	r24, Y+21	; 0x15
     45e:	9e 89       	ldd	r25, Y+22	; 0x16
     460:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <currentDriveDirection.1811+0x1>
     464:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentDriveDirection.1811>
		driveSpeed = 0;																	//And remain stationary for this update cycle
     468:	19 82       	std	Y+1, r1	; 0x01
     46a:	1a 82       	std	Y+2, r1	; 0x02
     46c:	21 2c       	mov	r2, r1
     46e:	31 2c       	mov	r3, r1
     470:	41 2c       	mov	r4, r1
     472:	51 2c       	mov	r5, r1
     474:	61 2c       	mov	r6, r1
     476:	71 2c       	mov	r7, r1
     478:	4d c0       	rjmp	.+154    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	if(driveSpeed < driveSpeedThreshold){driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	
	//Check and change drive direction
	if(driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		driveSpeed = 0;																	//Set the requested speed to 0
     47a:	19 82       	std	Y+1, r1	; 0x01
     47c:	1a 82       	std	Y+2, r1	; 0x02
     47e:	21 2c       	mov	r2, r1
     480:	31 2c       	mov	r3, r1
     482:	41 2c       	mov	r4, r1
     484:	51 2c       	mov	r5, r1
     486:	61 2c       	mov	r6, r1
     488:	71 2c       	mov	r7, r1
		driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     48a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <currentDriveSpeed.1810>
     48e:	9b 83       	std	Y+3, r25	; 0x03
     490:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <currentDriveSpeed.1810+0x1>
     494:	ac 83       	std	Y+4, r26	; 0x04
     496:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <currentDriveSpeed.1810+0x2>
     49a:	ed 83       	std	Y+5, r30	; 0x05
     49c:	00 91 73 00 	lds	r16, 0x0073	; 0x800073 <currentDriveSpeed.1810+0x3>
     4a0:	0e 83       	std	Y+6, r16	; 0x06
     4a2:	10 91 74 00 	lds	r17, 0x0074	; 0x800074 <currentDriveSpeed.1810+0x4>
     4a6:	1f 83       	std	Y+7, r17	; 0x07
     4a8:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <currentDriveSpeed.1810+0x5>
     4ac:	28 87       	std	Y+8, r18	; 0x08
     4ae:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <currentDriveSpeed.1810+0x6>
     4b2:	3f 8b       	std	Y+23, r19	; 0x17
     4b4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <currentDriveSpeed.1810+0x7>
     4b8:	8d 8b       	std	Y+21, r24	; 0x15
     4ba:	29 81       	ldd	r18, Y+1	; 0x01
     4bc:	3a 81       	ldd	r19, Y+2	; 0x02
     4be:	42 2d       	mov	r20, r2
     4c0:	53 2d       	mov	r21, r3
     4c2:	64 2d       	mov	r22, r4
     4c4:	75 2d       	mov	r23, r5
     4c6:	86 2d       	mov	r24, r6
     4c8:	97 2d       	mov	r25, r7
     4ca:	ab 80       	ldd	r10, Y+3	; 0x03
     4cc:	ba 2e       	mov	r11, r26
     4ce:	ce 2e       	mov	r12, r30
     4d0:	d0 2e       	mov	r13, r16
     4d2:	e1 2e       	mov	r14, r17
     4d4:	f8 84       	ldd	r15, Y+8	; 0x08
     4d6:	0f 89       	ldd	r16, Y+23	; 0x17
     4d8:	1d 89       	ldd	r17, Y+21	; 0x15
     4da:	0e 94 15 0a 	call	0x142a	; 0x142a <__subdi3>
     4de:	29 8b       	std	Y+17, r18	; 0x11
     4e0:	3a 8b       	std	Y+18, r19	; 0x12
     4e2:	a4 2e       	mov	r10, r20
     4e4:	b5 2e       	mov	r11, r21
     4e6:	06 2f       	mov	r16, r22
     4e8:	17 2f       	mov	r17, r23
     4ea:	8b 8b       	std	Y+19, r24	; 0x13
     4ec:	9c 8b       	std	Y+20, r25	; 0x14
     4ee:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__floatdisf>
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	a7 01       	movw	r20, r14
     4f8:	96 01       	movw	r18, r12
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__mulsf3>
     502:	0e 94 40 08 	call	0x1080	; 0x1080 <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     506:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fixunssfsi>
     50a:	60 3d       	cpi	r22, 0xD0	; 208
     50c:	77 40       	sbci	r23, 0x07	; 7
     50e:	81 05       	cpc	r24, r1
     510:	91 05       	cpc	r25, r1
     512:	98 f4       	brcc	.+38     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		currentDriveSpeed = driveSpeed;													//Set the current speed to the requested value
     514:	e9 81       	ldd	r30, Y+1	; 0x01
     516:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <currentDriveSpeed.1810>
     51a:	0a 81       	ldd	r16, Y+2	; 0x02
     51c:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <currentDriveSpeed.1810+0x1>
     520:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1810+0x2>
     524:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1810+0x3>
     528:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1810+0x4>
     52c:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1810+0x5>
     530:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1810+0x6>
     534:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1810+0x7>
     538:	15 c1       	rjmp	.+554    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
	}else{																			//If the difference is more than 2000
		if(driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     53a:	29 89       	ldd	r18, Y+17	; 0x11
     53c:	3a 89       	ldd	r19, Y+18	; 0x12
     53e:	4a 2d       	mov	r20, r10
     540:	5b 2d       	mov	r21, r11
     542:	60 2f       	mov	r22, r16
     544:	71 2f       	mov	r23, r17
     546:	8b 89       	ldd	r24, Y+19	; 0x13
     548:	9c 89       	ldd	r25, Y+20	; 0x14
     54a:	a0 e0       	ldi	r26, 0x00	; 0
     54c:	0e 94 27 0a 	call	0x144e	; 0x144e <__cmpdi2_s8>
     550:	0c f0       	brlt	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     552:	6e c0       	rjmp	.+220    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
			if(currentDriveSpeed < driveSpeedThreshold){									//If the speed is less than the threshold
     554:	2b 81       	ldd	r18, Y+3	; 0x03
     556:	3c 81       	ldd	r19, Y+4	; 0x04
     558:	4d 81       	ldd	r20, Y+5	; 0x05
     55a:	5e 81       	ldd	r21, Y+6	; 0x06
     55c:	6f 81       	ldd	r22, Y+7	; 0x07
     55e:	78 85       	ldd	r23, Y+8	; 0x08
     560:	8f 89       	ldd	r24, Y+23	; 0x17
     562:	9d 89       	ldd	r25, Y+21	; 0x15
     564:	27 38       	cpi	r18, 0x87	; 135
     566:	33 41       	sbci	r19, 0x13	; 19
     568:	41 05       	cpc	r20, r1
     56a:	51 05       	cpc	r21, r1
     56c:	61 05       	cpc	r22, r1
     56e:	71 05       	cpc	r23, r1
     570:	81 05       	cpc	r24, r1
     572:	91 05       	cpc	r25, r1
     574:	09 f0       	breq	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     576:	9c f4       	brge	.+38     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
				currentDriveSpeed = driveSpeed;													//Set the speed to the requested value (Probably 0)
     578:	29 81       	ldd	r18, Y+1	; 0x01
     57a:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1810>
     57e:	3a 81       	ldd	r19, Y+2	; 0x02
     580:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1810+0x1>
     584:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1810+0x2>
     588:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1810+0x3>
     58c:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1810+0x4>
     590:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1810+0x5>
     594:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1810+0x6>
     598:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1810+0x7>
     59c:	e3 c0       	rjmp	.+454    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     59e:	2b 81       	ldd	r18, Y+3	; 0x03
     5a0:	3c 81       	ldd	r19, Y+4	; 0x04
     5a2:	4d 81       	ldd	r20, Y+5	; 0x05
     5a4:	5e 81       	ldd	r21, Y+6	; 0x06
     5a6:	6f 81       	ldd	r22, Y+7	; 0x07
     5a8:	78 85       	ldd	r23, Y+8	; 0x08
     5aa:	8f 89       	ldd	r24, Y+23	; 0x17
     5ac:	9d 89       	ldd	r25, Y+21	; 0x15
     5ae:	01 e0       	ldi	r16, 0x01	; 1
     5b0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__ashldi3>
     5b4:	a2 2e       	mov	r10, r18
     5b6:	b3 2e       	mov	r11, r19
     5b8:	c4 2e       	mov	r12, r20
     5ba:	d5 2e       	mov	r13, r21
     5bc:	e6 2e       	mov	r14, r22
     5be:	f7 2e       	mov	r15, r23
     5c0:	e8 2f       	mov	r30, r24
     5c2:	19 2f       	mov	r17, r25
     5c4:	04 e0       	ldi	r16, 0x04	; 4
     5c6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__ashldi3>
     5ca:	0e 2f       	mov	r16, r30
     5cc:	0e 94 15 0a 	call	0x142a	; 0x142a <__subdi3>
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f4 e6       	ldi	r31, 0x64	; 100
     5d4:	af 2e       	mov	r10, r31
     5d6:	f0 2d       	mov	r31, r0
     5d8:	b1 2c       	mov	r11, r1
     5da:	c1 2c       	mov	r12, r1
     5dc:	d1 2c       	mov	r13, r1
     5de:	e1 2c       	mov	r14, r1
     5e0:	f1 2c       	mov	r15, r1
     5e2:	00 e0       	ldi	r16, 0x00	; 0
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	0e 94 12 09 	call	0x1224	; 0x1224 <__divdi3>
     5ea:	a2 2e       	mov	r10, r18
     5ec:	b3 2e       	mov	r11, r19
     5ee:	c4 2e       	mov	r12, r20
     5f0:	d5 2e       	mov	r13, r21
     5f2:	e6 2e       	mov	r14, r22
     5f4:	f7 2e       	mov	r15, r23
     5f6:	08 2f       	mov	r16, r24
     5f8:	19 2f       	mov	r17, r25
     5fa:	2b 81       	ldd	r18, Y+3	; 0x03
     5fc:	3c 81       	ldd	r19, Y+4	; 0x04
     5fe:	4d 81       	ldd	r20, Y+5	; 0x05
     600:	5e 81       	ldd	r21, Y+6	; 0x06
     602:	6f 81       	ldd	r22, Y+7	; 0x07
     604:	78 85       	ldd	r23, Y+8	; 0x08
     606:	8f 89       	ldd	r24, Y+23	; 0x17
     608:	9d 89       	ldd	r25, Y+21	; 0x15
     60a:	0e 94 15 0a 	call	0x142a	; 0x142a <__subdi3>
     60e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1810>
     612:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1810+0x1>
     616:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1810+0x2>
     61a:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1810+0x3>
     61e:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1810+0x4>
     622:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1810+0x5>
     626:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1810+0x6>
     62a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1810+0x7>
     62e:	9a c0       	rjmp	.+308    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     630:	2b 81       	ldd	r18, Y+3	; 0x03
     632:	3c 81       	ldd	r19, Y+4	; 0x04
     634:	4d 81       	ldd	r20, Y+5	; 0x05
     636:	5e 81       	ldd	r21, Y+6	; 0x06
     638:	6f 81       	ldd	r22, Y+7	; 0x07
     63a:	78 85       	ldd	r23, Y+8	; 0x08
     63c:	8f 89       	ldd	r24, Y+23	; 0x17
     63e:	9d 89       	ldd	r25, Y+21	; 0x15
     640:	27 38       	cpi	r18, 0x87	; 135
     642:	a3 e1       	ldi	r26, 0x13	; 19
     644:	3a 07       	cpc	r19, r26
     646:	41 05       	cpc	r20, r1
     648:	51 05       	cpc	r21, r1
     64a:	61 05       	cpc	r22, r1
     64c:	71 05       	cpc	r23, r1
     64e:	81 05       	cpc	r24, r1
     650:	91 05       	cpc	r25, r1
     652:	09 f0       	breq	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     654:	cc f4       	brge	.+50     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
     656:	28 57       	subi	r18, 0x78	; 120
     658:	3c 4e       	sbci	r19, 0xEC	; 236
     65a:	4f 4f       	sbci	r20, 0xFF	; 255
     65c:	5f 4f       	sbci	r21, 0xFF	; 255
     65e:	6f 4f       	sbci	r22, 0xFF	; 255
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	8f 4f       	sbci	r24, 0xFF	; 255
     664:	9f 4f       	sbci	r25, 0xFF	; 255
     666:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.1810>
     66a:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.1810+0x1>
     66e:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.1810+0x2>
     672:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.1810+0x3>
     676:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.1810+0x4>
     67a:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.1810+0x5>
     67e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.1810+0x6>
     682:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.1810+0x7>
     686:	6e c0       	rjmp	.+220    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     688:	2b 81       	ldd	r18, Y+3	; 0x03
     68a:	3c 81       	ldd	r19, Y+4	; 0x04
     68c:	4d 81       	ldd	r20, Y+5	; 0x05
     68e:	5e 81       	ldd	r21, Y+6	; 0x06
     690:	6f 81       	ldd	r22, Y+7	; 0x07
     692:	78 85       	ldd	r23, Y+8	; 0x08
     694:	8f 89       	ldd	r24, Y+23	; 0x17
     696:	9d 89       	ldd	r25, Y+21	; 0x15
     698:	01 e0       	ldi	r16, 0x01	; 1
     69a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__ashldi3>
     69e:	a2 2e       	mov	r10, r18
     6a0:	b3 2e       	mov	r11, r19
     6a2:	c4 2e       	mov	r12, r20
     6a4:	d5 2e       	mov	r13, r21
     6a6:	e6 2e       	mov	r14, r22
     6a8:	f7 2e       	mov	r15, r23
     6aa:	e8 2f       	mov	r30, r24
     6ac:	19 2f       	mov	r17, r25
     6ae:	04 e0       	ldi	r16, 0x04	; 4
     6b0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__ashldi3>
     6b4:	0e 2f       	mov	r16, r30
     6b6:	0e 94 15 0a 	call	0x142a	; 0x142a <__subdi3>
     6ba:	0f 2e       	mov	r0, r31
     6bc:	f4 e6       	ldi	r31, 0x64	; 100
     6be:	af 2e       	mov	r10, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	b1 2c       	mov	r11, r1
     6c4:	c1 2c       	mov	r12, r1
     6c6:	d1 2c       	mov	r13, r1
     6c8:	e1 2c       	mov	r14, r1
     6ca:	f1 2c       	mov	r15, r1
     6cc:	00 e0       	ldi	r16, 0x00	; 0
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	0e 94 12 09 	call	0x1224	; 0x1224 <__divdi3>
     6d4:	ab 80       	ldd	r10, Y+3	; 0x03
     6d6:	bc 80       	ldd	r11, Y+4	; 0x04
     6d8:	cd 80       	ldd	r12, Y+5	; 0x05
     6da:	de 80       	ldd	r13, Y+6	; 0x06
     6dc:	ef 80       	ldd	r14, Y+7	; 0x07
     6de:	f8 84       	ldd	r15, Y+8	; 0x08
     6e0:	0f 89       	ldd	r16, Y+23	; 0x17
     6e2:	1d 89       	ldd	r17, Y+21	; 0x15
     6e4:	0e 94 00 0a 	call	0x1400	; 0x1400 <__adddi3>
     6e8:	2b 83       	std	Y+3, r18	; 0x03
     6ea:	3c 83       	std	Y+4, r19	; 0x04
     6ec:	4e 83       	std	Y+6, r20	; 0x06
     6ee:	5d 83       	std	Y+5, r21	; 0x05
     6f0:	b6 2f       	mov	r27, r22
     6f2:	a7 2f       	mov	r26, r23
     6f4:	f8 2f       	mov	r31, r24
     6f6:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	3a 81       	ldd	r19, Y+2	; 0x02
     6fc:	42 2d       	mov	r20, r2
     6fe:	53 2d       	mov	r21, r3
     700:	64 2d       	mov	r22, r4
     702:	75 2d       	mov	r23, r5
     704:	86 2d       	mov	r24, r6
     706:	97 2d       	mov	r25, r7
     708:	ab 80       	ldd	r10, Y+3	; 0x03
     70a:	bc 80       	ldd	r11, Y+4	; 0x04
     70c:	ce 80       	ldd	r12, Y+6	; 0x06
     70e:	dd 80       	ldd	r13, Y+5	; 0x05
     710:	eb 2e       	mov	r14, r27
     712:	fa 2e       	mov	r15, r26
     714:	0f 2f       	mov	r16, r31
     716:	1e 2f       	mov	r17, r30
     718:	0e 94 1e 0a 	call	0x143c	; 0x143c <__cmpdi2>
     71c:	8c f0       	brlt	.+34     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     71e:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.1810>
     722:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.1810+0x1>
     726:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.1810+0x2>
     72a:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.1810+0x3>
     72e:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.1810+0x4>
     732:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.1810+0x5>
     736:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.1810+0x6>
     73a:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.1810+0x7>
     73e:	12 c0       	rjmp	.+36     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
				if(currentDriveSpeed > driveSpeed){currentDriveSpeed = driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     740:	39 81       	ldd	r19, Y+1	; 0x01
     742:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.1810>
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <currentDriveSpeed.1810+0x1>
     74c:	20 92 72 00 	sts	0x0072, r2	; 0x800072 <currentDriveSpeed.1810+0x2>
     750:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.1810+0x3>
     754:	40 92 74 00 	sts	0x0074, r4	; 0x800074 <currentDriveSpeed.1810+0x4>
     758:	50 92 75 00 	sts	0x0075, r5	; 0x800075 <currentDriveSpeed.1810+0x5>
     75c:	60 92 76 00 	sts	0x0076, r6	; 0x800076 <currentDriveSpeed.1810+0x6>
     760:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <currentDriveSpeed.1810+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     764:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.1811>
     768:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.1811+0x1>
     76c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1814+0x1>
     770:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1814>
	rightMotorDirection = currentDriveDirection;
     774:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     778:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     77c:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.1810>
     780:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.1810+0x1>
     784:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.1810+0x2>
     788:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.1810+0x3>
     78c:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.1810+0x4>
     790:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.1810+0x5>
     794:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.1810+0x6>
     798:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.1810+0x7>
     79c:	c2 2e       	mov	r12, r18
     79e:	d3 2e       	mov	r13, r19
     7a0:	e4 2e       	mov	r14, r20
     7a2:	f5 2e       	mov	r15, r21
     7a4:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.1816>
     7a8:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.1816+0x1>
     7ac:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.1816+0x2>
     7b0:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.1816+0x3>
	rightMotorSpeed = currentDriveSpeed;
     7b4:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.1817>
     7b8:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.1817+0x1>
     7bc:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.1817+0x2>
     7c0:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.1817+0x3>
	
	
	//Check turn direction
	if(turnDirection != currentTurnDirection){
     7c4:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
     7c8:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
     7cc:	e8 15       	cp	r30, r8
     7ce:	f9 05       	cpc	r31, r9
     7d0:	81 f1       	breq	.+96     	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
		leftMotorSpeed = currentDriveSpeed;
		rightMotorSpeed = currentDriveSpeed;
		currentTurnDirection = turnDirection;
     7d2:	90 92 67 00 	sts	0x0067, r9	; 0x800067 <__data_end+0x1>
     7d6:	80 92 66 00 	sts	0x0066, r8	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){
     7da:	89 28       	or	r8, r9
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
			enableMotorEncoder(1);
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <enableMotorEncoder>
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
		}else{
			enableMotorEncoder(0);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 6e 01 	call	0x2dc	; 0x2dc <enableMotorEncoder>
		}
		updateTimer += 200000;
     7f0:	29 85       	ldd	r18, Y+9	; 0x09
     7f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     7f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     7f8:	6d 85       	ldd	r22, Y+13	; 0x0d
     7fa:	7e 85       	ldd	r23, Y+14	; 0x0e
     7fc:	8f 85       	ldd	r24, Y+15	; 0x0f
     7fe:	98 89       	ldd	r25, Y+16	; 0x10
     800:	20 58       	subi	r18, 0x80	; 128
     802:	35 4e       	sbci	r19, 0xE5	; 229
     804:	49 4f       	sbci	r20, 0xF9	; 249
     806:	5f 4f       	sbci	r21, 0xFF	; 255
     808:	6f 4f       	sbci	r22, 0xFF	; 255
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	8f 4f       	sbci	r24, 0xFF	; 255
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.1808>
     814:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.1808+0x1>
     818:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.1808+0x2>
     81c:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.1808+0x3>
     820:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.1808+0x4>
     824:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.1808+0x5>
     828:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.1808+0x6>
     82c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.1808+0x7>
     830:	c8 c0       	rjmp	.+400    	; 0x9c2 <__stack+0x163>
	}else if(currentTurnDirection == -1){
     832:	ef 3f       	cpi	r30, 0xFF	; 255
     834:	af ef       	ldi	r26, 0xFF	; 255
     836:	fa 07       	cpc	r31, r26
     838:	f1 f5       	brne	.+124    	; 0x8b6 <__stack+0x57>
		if(currentDriveSpeed == 0){
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	0e 94 27 0a 	call	0x144e	; 0x144e <__cmpdi2_s8>
     840:	f9 f4       	brne	.+62     	; 0x880 <__stack+0x21>
			leftMotorDirection = 0;
     842:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.1814+0x1>
     846:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.1814>
			rightMotorDirection = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     852:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;
     856:	88 ef       	ldi	r24, 0xF8	; 248
     858:	9a e2       	ldi	r25, 0x2A	; 42
     85a:	a0 e0       	ldi	r26, 0x00	; 0
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     862:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     866:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     86a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;
     86e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     872:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     876:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     87a:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
     87e:	22 c1       	rjmp	.+580    	; 0xac4 <__stack+0x265>
		}else{
			leftMotorSpeed = driveSpeedThreshold;
     880:	88 e8       	ldi	r24, 0x88	; 136
     882:	93 e1       	ldi	r25, 0x13	; 19
     884:	a0 e0       	ldi	r26, 0x00	; 0
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     88c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     890:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     894:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed += turnRate;
     898:	e8 eb       	ldi	r30, 0xB8	; 184
     89a:	ce 0e       	add	r12, r30
     89c:	eb e0       	ldi	r30, 0x0B	; 11
     89e:	de 1e       	adc	r13, r30
     8a0:	e1 1c       	adc	r14, r1
     8a2:	f1 1c       	adc	r15, r1
     8a4:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1817>
     8a8:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1817+0x1>
     8ac:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1817+0x2>
     8b0:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1817+0x3>
     8b4:	86 c0       	rjmp	.+268    	; 0x9c2 <__stack+0x163>
		}
	}else if(currentTurnDirection == 0){
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	09 f0       	breq	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	43 c0       	rjmp	.+134    	; 0x942 <__stack+0xe3>
		if(motorEncoderLVal != motorEncoderRVal){
     8bc:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <motorEncoderLVal>
     8c0:	10 91 83 00 	lds	r17, 0x0083	; 0x800083 <motorEncoderLVal+0x1>
     8c4:	1e 8b       	std	Y+22, r17	; 0x16
     8c6:	0d 8b       	std	Y+21, r16	; 0x15
     8c8:	00 91 80 00 	lds	r16, 0x0080	; 0x800080 <motorEncoderRVal>
     8cc:	10 91 81 00 	lds	r17, 0x0081	; 0x800081 <motorEncoderRVal+0x1>
     8d0:	2d 89       	ldd	r18, Y+21	; 0x15
     8d2:	3e 89       	ldd	r19, Y+22	; 0x16
     8d4:	20 17       	cp	r18, r16
     8d6:	31 07       	cpc	r19, r17
     8d8:	09 f4       	brne	.+2      	; 0x8dc <__stack+0x7d>
     8da:	73 c0       	rjmp	.+230    	; 0x9c2 <__stack+0x163>
			if(motorEncoderLVal - motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
     8dc:	c7 01       	movw	r24, r14
     8de:	b6 01       	movw	r22, r12
     8e0:	0e 94 f1 06 	call	0xde2	; 0xde2 <__floatunsisf>
     8e4:	6b 01       	movw	r12, r22
     8e6:	7c 01       	movw	r14, r24
     8e8:	6d 89       	ldd	r22, Y+21	; 0x15
     8ea:	7e 89       	ldd	r23, Y+22	; 0x16
     8ec:	60 1b       	sub	r22, r16
     8ee:	71 0b       	sbc	r23, r17
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 f1 06 	call	0xde2	; 0xde2 <__floatunsisf>
     8f8:	4b 01       	movw	r8, r22
     8fa:	5c 01       	movw	r10, r24
     8fc:	a5 01       	movw	r20, r10
     8fe:	94 01       	movw	r18, r8
     900:	c5 01       	movw	r24, r10
     902:	b4 01       	movw	r22, r8
     904:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__mulsf3>
     908:	0e 94 40 08 	call	0x1080	; 0x1080 <sqrt>
     90c:	9b 01       	movw	r18, r22
     90e:	ac 01       	movw	r20, r24
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__mulsf3>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	48 ec       	ldi	r20, 0xC8	; 200
     91e:	52 e4       	ldi	r21, 0x42	; 66
     920:	0e 94 4a 06 	call	0xc94	; 0xc94 <__divsf3>
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	0e 94 de 05 	call	0xbbc	; 0xbbc <__addsf3>
     92c:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fixunssfsi>
     930:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.1817>
     934:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.1817+0x1>
     938:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.1817+0x2>
     93c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.1817+0x3>
     940:	40 c0       	rjmp	.+128    	; 0x9c2 <__stack+0x163>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((motorEncoderLVal - motorEncoderRVal), 2)) ) / 100;
			}
		}
	}else if(currentTurnDirection == 1){
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	f1 f5       	brne	.+124    	; 0x9c2 <__stack+0x163>
		if(currentDriveSpeed == 0){
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	0e 94 27 0a 	call	0x144e	; 0x144e <__cmpdi2_s8>
     94c:	f9 f4       	brne	.+62     	; 0x98c <__stack+0x12d>
			leftMotorDirection = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.1814+0x1>
     956:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.1814>
			rightMotorDirection = 0;
     95a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     95e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = driveSpeedThreshold + turnRate*2;
     962:	88 ef       	ldi	r24, 0xF8	; 248
     964:	9a e2       	ldi	r25, 0x2A	; 42
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     96e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     972:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     976:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed = driveSpeedThreshold + turnRate*2;
     97a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     97e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     982:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     986:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
     98a:	9c c0       	rjmp	.+312    	; 0xac4 <__stack+0x265>
			}else{
			leftMotorSpeed += turnRate;
     98c:	38 eb       	ldi	r19, 0xB8	; 184
     98e:	c3 0e       	add	r12, r19
     990:	3b e0       	ldi	r19, 0x0B	; 11
     992:	d3 1e       	adc	r13, r19
     994:	e1 1c       	adc	r14, r1
     996:	f1 1c       	adc	r15, r1
     998:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.1816>
     99c:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.1816+0x1>
     9a0:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.1816+0x2>
     9a4:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.1816+0x3>
			rightMotorSpeed = driveSpeedThreshold;
     9a8:	88 e8       	ldi	r24, 0x88	; 136
     9aa:	93 e1       	ldi	r25, 0x13	; 19
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     9b4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     9b8:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     9bc:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
     9c0:	81 c0       	rjmp	.+258    	; 0xac4 <__stack+0x265>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;
     9c2:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1817>
     9c6:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1817+0x1>
     9ca:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1817+0x2>
     9ce:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1817+0x3>
     9d2:	d7 01       	movw	r26, r14
     9d4:	c6 01       	movw	r24, r12
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	8c 0d       	add	r24, r12
     9e0:	9d 1d       	adc	r25, r13
     9e2:	ae 1d       	adc	r26, r14
     9e4:	bf 1d       	adc	r27, r15
     9e6:	ac 01       	movw	r20, r24
     9e8:	bd 01       	movw	r22, r26
     9ea:	44 0f       	add	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	66 1f       	adc	r22, r22
     9f0:	77 1f       	adc	r23, r23
     9f2:	44 0f       	add	r20, r20
     9f4:	55 1f       	adc	r21, r21
     9f6:	66 1f       	adc	r22, r22
     9f8:	77 1f       	adc	r23, r23
     9fa:	8c 01       	movw	r16, r24
     9fc:	9d 01       	movw	r18, r26
     9fe:	04 0f       	add	r16, r20
     a00:	15 1f       	adc	r17, r21
     a02:	26 1f       	adc	r18, r22
     a04:	37 1f       	adc	r19, r23
     a06:	c9 01       	movw	r24, r18
     a08:	b8 01       	movw	r22, r16
     a0a:	24 e6       	ldi	r18, 0x64	; 100
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	0e 94 95 08 	call	0x112a	; 0x112a <__udivmodsi4>
     a16:	c2 0e       	add	r12, r18
     a18:	d3 1e       	adc	r13, r19
     a1a:	e4 1e       	adc	r14, r20
     a1c:	f5 1e       	adc	r15, r21
     a1e:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1817>
     a22:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1817+0x1>
     a26:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1817+0x2>
     a2a:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1817+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     a2e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1816>
     a32:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1816+0x1>
     a36:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1816+0x2>
     a3a:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1816+0x3>
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	94 46       	sbci	r25, 0x64	; 100
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	60 f0       	brcs	.+24     	; 0xa60 <__stack+0x201>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	94 e6       	ldi	r25, 0x64	; 100
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.1816>
     a54:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.1816+0x1>
     a58:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.1816+0x2>
     a5c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.1816+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     a60:	21 e3       	ldi	r18, 0x31	; 49
     a62:	c2 16       	cp	r12, r18
     a64:	25 e7       	ldi	r18, 0x75	; 117
     a66:	d2 06       	cpc	r13, r18
     a68:	e1 04       	cpc	r14, r1
     a6a:	f1 04       	cpc	r15, r1
     a6c:	60 f0       	brcs	.+24     	; 0xa86 <__stack+0x227>
		rightMotorSpeed = 30000;						//Set it back to its max
     a6e:	80 e3       	ldi	r24, 0x30	; 48
     a70:	95 e7       	ldi	r25, 0x75	; 117
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.1817>
     a7a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.1817+0x1>
     a7e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.1817+0x2>
     a82:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.1817+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     a86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.1814>
     a8a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.1814+0x1>
     a8e:	89 2b       	or	r24, r25
     a90:	11 f0       	breq	.+4      	; 0xa96 <__stack+0x237>
		PORTC &= 0b11111011;
     a92:	aa 98       	cbi	0x15, 2	; 21
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <__stack+0x239>
	}else{
		PORTC |= 0b00000100;
     a96:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     a98:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     a9c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     aa0:	89 2b       	or	r24, r25
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <__stack+0x249>
		PORTC &= 0b11110111;
     aa4:	ab 98       	cbi	0x15, 3	; 21
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <__stack+0x24b>
	}else{
		PORTC |= 0b00001000;
     aa8:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     aaa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.1817>
     aae:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.1817+0x1>
     ab2:	9b bd       	out	0x2b, r25	; 43
     ab4:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     ab6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1816>
     aba:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1816+0x1>
     abe:	99 bd       	out	0x29, r25	; 41
     ac0:	88 bd       	out	0x28, r24	; 40
	
	return 0;
     ac2:	45 c0       	rjmp	.+138    	; 0xb4e <__stack+0x2ef>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;
     ac4:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.1817>
     ac8:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.1817+0x1>
     acc:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.1817+0x2>
     ad0:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.1817+0x3>
     ad4:	d7 01       	movw	r26, r14
     ad6:	c6 01       	movw	r24, r12
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	aa 1f       	adc	r26, r26
     ade:	bb 1f       	adc	r27, r27
     ae0:	8c 0d       	add	r24, r12
     ae2:	9d 1d       	adc	r25, r13
     ae4:	ae 1d       	adc	r26, r14
     ae6:	bf 1d       	adc	r27, r15
     ae8:	ac 01       	movw	r20, r24
     aea:	bd 01       	movw	r22, r26
     aec:	44 0f       	add	r20, r20
     aee:	55 1f       	adc	r21, r21
     af0:	66 1f       	adc	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	44 0f       	add	r20, r20
     af6:	55 1f       	adc	r21, r21
     af8:	66 1f       	adc	r22, r22
     afa:	77 1f       	adc	r23, r23
     afc:	8c 01       	movw	r16, r24
     afe:	9d 01       	movw	r18, r26
     b00:	04 0f       	add	r16, r20
     b02:	15 1f       	adc	r17, r21
     b04:	26 1f       	adc	r18, r22
     b06:	37 1f       	adc	r19, r23
     b08:	c9 01       	movw	r24, r18
     b0a:	b8 01       	movw	r22, r16
     b0c:	24 e6       	ldi	r18, 0x64	; 100
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	0e 94 95 08 	call	0x112a	; 0x112a <__udivmodsi4>
     b18:	c2 0e       	add	r12, r18
     b1a:	d3 1e       	adc	r13, r19
     b1c:	e4 1e       	adc	r14, r20
     b1e:	f5 1e       	adc	r15, r21
     b20:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.1817>
     b24:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.1817+0x1>
     b28:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.1817+0x2>
     b2c:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.1817+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     b30:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.1816>
     b34:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.1816+0x1>
     b38:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.1816+0x2>
     b3c:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.1816+0x3>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	94 46       	sbci	r25, 0x64	; 100
     b44:	a1 05       	cpc	r26, r1
     b46:	b1 05       	cpc	r27, r1
     b48:	08 f4       	brcc	.+2      	; 0xb4c <__stack+0x2ed>
     b4a:	9d cf       	rjmp	.-198    	; 0xa86 <__stack+0x227>
     b4c:	7d cf       	rjmp	.-262    	; 0xa48 <__stack+0x1e9>
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
	OCR1B = leftMotorSpeed;							//And do the same for the left one
	
	return 0;
}
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	67 96       	adiw	r28, 0x17	; 23
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	bf 90       	pop	r11
     b70:	af 90       	pop	r10
     b72:	9f 90       	pop	r9
     b74:	8f 90       	pop	r8
     b76:	7f 90       	pop	r7
     b78:	6f 90       	pop	r6
     b7a:	5f 90       	pop	r5
     b7c:	4f 90       	pop	r4
     b7e:	3f 90       	pop	r3
     b80:	2f 90       	pop	r2
     b82:	08 95       	ret

00000b84 <main>:
	return 0;							//If going backwards or standing still
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     b84:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     b86:	0e 94 65 00 	call	0xca	; 0xca <init_micros>
	
	init_motor();
     b8a:	0e 94 39 01 	call	0x272	; 0x272 <init_motor>
	init_LED();
     b8e:	0e 94 5e 00 	call	0xbc	; 0xbc <init_LED>
	//-----------------------
	
	while(1){
		
		motorDriver(driveSpeed(), driveDirection(), globalTurnDirection);
     b92:	0e 94 55 00 	call	0xaa	; 0xaa <driveDirection>
     b96:	8c 01       	movw	r16, r24
     b98:	0e 94 49 00 	call	0x92	; 0x92 <driveSpeed>
     b9c:	39 2f       	mov	r19, r25
     b9e:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <globalTurnDirection>
     ba2:	f1 2c       	mov	r15, r1
     ba4:	28 2f       	mov	r18, r24
     ba6:	99 0f       	add	r25, r25
     ba8:	99 0b       	sbc	r25, r25
     baa:	49 2f       	mov	r20, r25
     bac:	59 2f       	mov	r21, r25
     bae:	69 2f       	mov	r22, r25
     bb0:	79 2f       	mov	r23, r25
     bb2:	89 2f       	mov	r24, r25
     bb4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <motorDriver>
     bb8:	ec cf       	rjmp	.-40     	; 0xb92 <main+0xe>

00000bba <__subsf3>:
     bba:	50 58       	subi	r21, 0x80	; 128

00000bbc <__addsf3>:
     bbc:	bb 27       	eor	r27, r27
     bbe:	aa 27       	eor	r26, r26
     bc0:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3x>
     bc4:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_round>
     bc8:	0e 94 85 07 	call	0xf0a	; 0xf0a <__fp_pscA>
     bcc:	38 f0       	brcs	.+14     	; 0xbdc <__addsf3+0x20>
     bce:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fp_pscB>
     bd2:	20 f0       	brcs	.+8      	; 0xbdc <__addsf3+0x20>
     bd4:	39 f4       	brne	.+14     	; 0xbe4 <__addsf3+0x28>
     bd6:	9f 3f       	cpi	r25, 0xFF	; 255
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <__addsf3+0x24>
     bda:	26 f4       	brtc	.+8      	; 0xbe4 <__addsf3+0x28>
     bdc:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_nan>
     be0:	0e f4       	brtc	.+2      	; 0xbe4 <__addsf3+0x28>
     be2:	e0 95       	com	r30
     be4:	e7 fb       	bst	r30, 7
     be6:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_inf>

00000bea <__addsf3x>:
     bea:	e9 2f       	mov	r30, r25
     bec:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_split3>
     bf0:	58 f3       	brcs	.-42     	; 0xbc8 <__addsf3+0xc>
     bf2:	ba 17       	cp	r27, r26
     bf4:	62 07       	cpc	r22, r18
     bf6:	73 07       	cpc	r23, r19
     bf8:	84 07       	cpc	r24, r20
     bfa:	95 07       	cpc	r25, r21
     bfc:	20 f0       	brcs	.+8      	; 0xc06 <__addsf3x+0x1c>
     bfe:	79 f4       	brne	.+30     	; 0xc1e <__addsf3x+0x34>
     c00:	a6 f5       	brtc	.+104    	; 0xc6a <__addsf3x+0x80>
     c02:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_zero>
     c06:	0e f4       	brtc	.+2      	; 0xc0a <__addsf3x+0x20>
     c08:	e0 95       	com	r30
     c0a:	0b 2e       	mov	r0, r27
     c0c:	ba 2f       	mov	r27, r26
     c0e:	a0 2d       	mov	r26, r0
     c10:	0b 01       	movw	r0, r22
     c12:	b9 01       	movw	r22, r18
     c14:	90 01       	movw	r18, r0
     c16:	0c 01       	movw	r0, r24
     c18:	ca 01       	movw	r24, r20
     c1a:	a0 01       	movw	r20, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	ff 27       	eor	r31, r31
     c20:	59 1b       	sub	r21, r25
     c22:	99 f0       	breq	.+38     	; 0xc4a <__addsf3x+0x60>
     c24:	59 3f       	cpi	r21, 0xF9	; 249
     c26:	50 f4       	brcc	.+20     	; 0xc3c <__addsf3x+0x52>
     c28:	50 3e       	cpi	r21, 0xE0	; 224
     c2a:	68 f1       	brcs	.+90     	; 0xc86 <__addsf3x+0x9c>
     c2c:	1a 16       	cp	r1, r26
     c2e:	f0 40       	sbci	r31, 0x00	; 0
     c30:	a2 2f       	mov	r26, r18
     c32:	23 2f       	mov	r18, r19
     c34:	34 2f       	mov	r19, r20
     c36:	44 27       	eor	r20, r20
     c38:	58 5f       	subi	r21, 0xF8	; 248
     c3a:	f3 cf       	rjmp	.-26     	; 0xc22 <__addsf3x+0x38>
     c3c:	46 95       	lsr	r20
     c3e:	37 95       	ror	r19
     c40:	27 95       	ror	r18
     c42:	a7 95       	ror	r26
     c44:	f0 40       	sbci	r31, 0x00	; 0
     c46:	53 95       	inc	r21
     c48:	c9 f7       	brne	.-14     	; 0xc3c <__addsf3x+0x52>
     c4a:	7e f4       	brtc	.+30     	; 0xc6a <__addsf3x+0x80>
     c4c:	1f 16       	cp	r1, r31
     c4e:	ba 0b       	sbc	r27, r26
     c50:	62 0b       	sbc	r22, r18
     c52:	73 0b       	sbc	r23, r19
     c54:	84 0b       	sbc	r24, r20
     c56:	ba f0       	brmi	.+46     	; 0xc86 <__addsf3x+0x9c>
     c58:	91 50       	subi	r25, 0x01	; 1
     c5a:	a1 f0       	breq	.+40     	; 0xc84 <__addsf3x+0x9a>
     c5c:	ff 0f       	add	r31, r31
     c5e:	bb 1f       	adc	r27, r27
     c60:	66 1f       	adc	r22, r22
     c62:	77 1f       	adc	r23, r23
     c64:	88 1f       	adc	r24, r24
     c66:	c2 f7       	brpl	.-16     	; 0xc58 <__addsf3x+0x6e>
     c68:	0e c0       	rjmp	.+28     	; 0xc86 <__addsf3x+0x9c>
     c6a:	ba 0f       	add	r27, r26
     c6c:	62 1f       	adc	r22, r18
     c6e:	73 1f       	adc	r23, r19
     c70:	84 1f       	adc	r24, r20
     c72:	48 f4       	brcc	.+18     	; 0xc86 <__addsf3x+0x9c>
     c74:	87 95       	ror	r24
     c76:	77 95       	ror	r23
     c78:	67 95       	ror	r22
     c7a:	b7 95       	ror	r27
     c7c:	f7 95       	ror	r31
     c7e:	9e 3f       	cpi	r25, 0xFE	; 254
     c80:	08 f0       	brcs	.+2      	; 0xc84 <__addsf3x+0x9a>
     c82:	b0 cf       	rjmp	.-160    	; 0xbe4 <__addsf3+0x28>
     c84:	93 95       	inc	r25
     c86:	88 0f       	add	r24, r24
     c88:	08 f0       	brcs	.+2      	; 0xc8c <__addsf3x+0xa2>
     c8a:	99 27       	eor	r25, r25
     c8c:	ee 0f       	add	r30, r30
     c8e:	97 95       	ror	r25
     c90:	87 95       	ror	r24
     c92:	08 95       	ret

00000c94 <__divsf3>:
     c94:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__divsf3x>
     c98:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_round>
     c9c:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fp_pscB>
     ca0:	58 f0       	brcs	.+22     	; 0xcb8 <__divsf3+0x24>
     ca2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__fp_pscA>
     ca6:	40 f0       	brcs	.+16     	; 0xcb8 <__divsf3+0x24>
     ca8:	29 f4       	brne	.+10     	; 0xcb4 <__divsf3+0x20>
     caa:	5f 3f       	cpi	r21, 0xFF	; 255
     cac:	29 f0       	breq	.+10     	; 0xcb8 <__divsf3+0x24>
     cae:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_inf>
     cb2:	51 11       	cpse	r21, r1
     cb4:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_szero>
     cb8:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_nan>

00000cbc <__divsf3x>:
     cbc:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_split3>
     cc0:	68 f3       	brcs	.-38     	; 0xc9c <__divsf3+0x8>

00000cc2 <__divsf3_pse>:
     cc2:	99 23       	and	r25, r25
     cc4:	b1 f3       	breq	.-20     	; 0xcb2 <__divsf3+0x1e>
     cc6:	55 23       	and	r21, r21
     cc8:	91 f3       	breq	.-28     	; 0xcae <__divsf3+0x1a>
     cca:	95 1b       	sub	r25, r21
     ccc:	55 0b       	sbc	r21, r21
     cce:	bb 27       	eor	r27, r27
     cd0:	aa 27       	eor	r26, r26
     cd2:	62 17       	cp	r22, r18
     cd4:	73 07       	cpc	r23, r19
     cd6:	84 07       	cpc	r24, r20
     cd8:	38 f0       	brcs	.+14     	; 0xce8 <__divsf3_pse+0x26>
     cda:	9f 5f       	subi	r25, 0xFF	; 255
     cdc:	5f 4f       	sbci	r21, 0xFF	; 255
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	44 1f       	adc	r20, r20
     ce4:	aa 1f       	adc	r26, r26
     ce6:	a9 f3       	breq	.-22     	; 0xcd2 <__divsf3_pse+0x10>
     ce8:	35 d0       	rcall	.+106    	; 0xd54 <__divsf3_pse+0x92>
     cea:	0e 2e       	mov	r0, r30
     cec:	3a f0       	brmi	.+14     	; 0xcfc <__divsf3_pse+0x3a>
     cee:	e0 e8       	ldi	r30, 0x80	; 128
     cf0:	32 d0       	rcall	.+100    	; 0xd56 <__divsf3_pse+0x94>
     cf2:	91 50       	subi	r25, 0x01	; 1
     cf4:	50 40       	sbci	r21, 0x00	; 0
     cf6:	e6 95       	lsr	r30
     cf8:	00 1c       	adc	r0, r0
     cfa:	ca f7       	brpl	.-14     	; 0xcee <__divsf3_pse+0x2c>
     cfc:	2b d0       	rcall	.+86     	; 0xd54 <__divsf3_pse+0x92>
     cfe:	fe 2f       	mov	r31, r30
     d00:	29 d0       	rcall	.+82     	; 0xd54 <__divsf3_pse+0x92>
     d02:	66 0f       	add	r22, r22
     d04:	77 1f       	adc	r23, r23
     d06:	88 1f       	adc	r24, r24
     d08:	bb 1f       	adc	r27, r27
     d0a:	26 17       	cp	r18, r22
     d0c:	37 07       	cpc	r19, r23
     d0e:	48 07       	cpc	r20, r24
     d10:	ab 07       	cpc	r26, r27
     d12:	b0 e8       	ldi	r27, 0x80	; 128
     d14:	09 f0       	breq	.+2      	; 0xd18 <__divsf3_pse+0x56>
     d16:	bb 0b       	sbc	r27, r27
     d18:	80 2d       	mov	r24, r0
     d1a:	bf 01       	movw	r22, r30
     d1c:	ff 27       	eor	r31, r31
     d1e:	93 58       	subi	r25, 0x83	; 131
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	3a f0       	brmi	.+14     	; 0xd32 <__divsf3_pse+0x70>
     d24:	9e 3f       	cpi	r25, 0xFE	; 254
     d26:	51 05       	cpc	r21, r1
     d28:	78 f0       	brcs	.+30     	; 0xd48 <__divsf3_pse+0x86>
     d2a:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_inf>
     d2e:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_szero>
     d32:	5f 3f       	cpi	r21, 0xFF	; 255
     d34:	e4 f3       	brlt	.-8      	; 0xd2e <__divsf3_pse+0x6c>
     d36:	98 3e       	cpi	r25, 0xE8	; 232
     d38:	d4 f3       	brlt	.-12     	; 0xd2e <__divsf3_pse+0x6c>
     d3a:	86 95       	lsr	r24
     d3c:	77 95       	ror	r23
     d3e:	67 95       	ror	r22
     d40:	b7 95       	ror	r27
     d42:	f7 95       	ror	r31
     d44:	9f 5f       	subi	r25, 0xFF	; 255
     d46:	c9 f7       	brne	.-14     	; 0xd3a <__divsf3_pse+0x78>
     d48:	88 0f       	add	r24, r24
     d4a:	91 1d       	adc	r25, r1
     d4c:	96 95       	lsr	r25
     d4e:	87 95       	ror	r24
     d50:	97 f9       	bld	r25, 7
     d52:	08 95       	ret
     d54:	e1 e0       	ldi	r30, 0x01	; 1
     d56:	66 0f       	add	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	bb 1f       	adc	r27, r27
     d5e:	62 17       	cp	r22, r18
     d60:	73 07       	cpc	r23, r19
     d62:	84 07       	cpc	r24, r20
     d64:	ba 07       	cpc	r27, r26
     d66:	20 f0       	brcs	.+8      	; 0xd70 <__divsf3_pse+0xae>
     d68:	62 1b       	sub	r22, r18
     d6a:	73 0b       	sbc	r23, r19
     d6c:	84 0b       	sbc	r24, r20
     d6e:	ba 0b       	sbc	r27, r26
     d70:	ee 1f       	adc	r30, r30
     d72:	88 f7       	brcc	.-30     	; 0xd56 <__divsf3_pse+0x94>
     d74:	e0 95       	com	r30
     d76:	08 95       	ret

00000d78 <__fixunssfsi>:
     d78:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_splitA>
     d7c:	88 f0       	brcs	.+34     	; 0xda0 <__fixunssfsi+0x28>
     d7e:	9f 57       	subi	r25, 0x7F	; 127
     d80:	98 f0       	brcs	.+38     	; 0xda8 <__fixunssfsi+0x30>
     d82:	b9 2f       	mov	r27, r25
     d84:	99 27       	eor	r25, r25
     d86:	b7 51       	subi	r27, 0x17	; 23
     d88:	b0 f0       	brcs	.+44     	; 0xdb6 <__fixunssfsi+0x3e>
     d8a:	e1 f0       	breq	.+56     	; 0xdc4 <__fixunssfsi+0x4c>
     d8c:	66 0f       	add	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	88 1f       	adc	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	1a f0       	brmi	.+6      	; 0xd9c <__fixunssfsi+0x24>
     d96:	ba 95       	dec	r27
     d98:	c9 f7       	brne	.-14     	; 0xd8c <__fixunssfsi+0x14>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <__fixunssfsi+0x4c>
     d9c:	b1 30       	cpi	r27, 0x01	; 1
     d9e:	91 f0       	breq	.+36     	; 0xdc4 <__fixunssfsi+0x4c>
     da0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_zero>
     da4:	b1 e0       	ldi	r27, 0x01	; 1
     da6:	08 95       	ret
     da8:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_zero>
     dac:	67 2f       	mov	r22, r23
     dae:	78 2f       	mov	r23, r24
     db0:	88 27       	eor	r24, r24
     db2:	b8 5f       	subi	r27, 0xF8	; 248
     db4:	39 f0       	breq	.+14     	; 0xdc4 <__fixunssfsi+0x4c>
     db6:	b9 3f       	cpi	r27, 0xF9	; 249
     db8:	cc f3       	brlt	.-14     	; 0xdac <__fixunssfsi+0x34>
     dba:	86 95       	lsr	r24
     dbc:	77 95       	ror	r23
     dbe:	67 95       	ror	r22
     dc0:	b3 95       	inc	r27
     dc2:	d9 f7       	brne	.-10     	; 0xdba <__fixunssfsi+0x42>
     dc4:	3e f4       	brtc	.+14     	; 0xdd4 <__fixunssfsi+0x5c>
     dc6:	90 95       	com	r25
     dc8:	80 95       	com	r24
     dca:	70 95       	com	r23
     dcc:	61 95       	neg	r22
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	8f 4f       	sbci	r24, 0xFF	; 255
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	08 95       	ret

00000dd6 <__floatdisf>:
     dd6:	97 fb       	bst	r25, 7
     dd8:	16 f4       	brtc	.+4      	; 0xdde <__floatdisf+0x8>
     dda:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_negdi>
     dde:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_di2sf>

00000de2 <__floatunsisf>:
     de2:	e8 94       	clt
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <__floatsisf+0x12>

00000de6 <__floatsisf>:
     de6:	97 fb       	bst	r25, 7
     de8:	3e f4       	brtc	.+14     	; 0xdf8 <__floatsisf+0x12>
     dea:	90 95       	com	r25
     dec:	80 95       	com	r24
     dee:	70 95       	com	r23
     df0:	61 95       	neg	r22
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	8f 4f       	sbci	r24, 0xFF	; 255
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	99 23       	and	r25, r25
     dfa:	a9 f0       	breq	.+42     	; 0xe26 <__floatsisf+0x40>
     dfc:	f9 2f       	mov	r31, r25
     dfe:	96 e9       	ldi	r25, 0x96	; 150
     e00:	bb 27       	eor	r27, r27
     e02:	93 95       	inc	r25
     e04:	f6 95       	lsr	r31
     e06:	87 95       	ror	r24
     e08:	77 95       	ror	r23
     e0a:	67 95       	ror	r22
     e0c:	b7 95       	ror	r27
     e0e:	f1 11       	cpse	r31, r1
     e10:	f8 cf       	rjmp	.-16     	; 0xe02 <__floatsisf+0x1c>
     e12:	fa f4       	brpl	.+62     	; 0xe52 <__floatsisf+0x6c>
     e14:	bb 0f       	add	r27, r27
     e16:	11 f4       	brne	.+4      	; 0xe1c <__floatsisf+0x36>
     e18:	60 ff       	sbrs	r22, 0
     e1a:	1b c0       	rjmp	.+54     	; 0xe52 <__floatsisf+0x6c>
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	8f 4f       	sbci	r24, 0xFF	; 255
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	16 c0       	rjmp	.+44     	; 0xe52 <__floatsisf+0x6c>
     e26:	88 23       	and	r24, r24
     e28:	11 f0       	breq	.+4      	; 0xe2e <__floatsisf+0x48>
     e2a:	96 e9       	ldi	r25, 0x96	; 150
     e2c:	11 c0       	rjmp	.+34     	; 0xe50 <__floatsisf+0x6a>
     e2e:	77 23       	and	r23, r23
     e30:	21 f0       	breq	.+8      	; 0xe3a <__floatsisf+0x54>
     e32:	9e e8       	ldi	r25, 0x8E	; 142
     e34:	87 2f       	mov	r24, r23
     e36:	76 2f       	mov	r23, r22
     e38:	05 c0       	rjmp	.+10     	; 0xe44 <__floatsisf+0x5e>
     e3a:	66 23       	and	r22, r22
     e3c:	71 f0       	breq	.+28     	; 0xe5a <__floatsisf+0x74>
     e3e:	96 e8       	ldi	r25, 0x86	; 134
     e40:	86 2f       	mov	r24, r22
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	2a f0       	brmi	.+10     	; 0xe52 <__floatsisf+0x6c>
     e48:	9a 95       	dec	r25
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	da f7       	brpl	.-10     	; 0xe48 <__floatsisf+0x62>
     e52:	88 0f       	add	r24, r24
     e54:	96 95       	lsr	r25
     e56:	87 95       	ror	r24
     e58:	97 f9       	bld	r25, 7
     e5a:	08 95       	ret

00000e5c <__floatundisf>:
     e5c:	e8 94       	clt

00000e5e <__fp_di2sf>:
     e5e:	f9 2f       	mov	r31, r25
     e60:	96 eb       	ldi	r25, 0xB6	; 182
     e62:	ff 23       	and	r31, r31
     e64:	81 f0       	breq	.+32     	; 0xe86 <__fp_di2sf+0x28>
     e66:	12 16       	cp	r1, r18
     e68:	13 06       	cpc	r1, r19
     e6a:	14 06       	cpc	r1, r20
     e6c:	44 0b       	sbc	r20, r20
     e6e:	93 95       	inc	r25
     e70:	f6 95       	lsr	r31
     e72:	87 95       	ror	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	57 95       	ror	r21
     e7a:	40 40       	sbci	r20, 0x00	; 0
     e7c:	ff 23       	and	r31, r31
     e7e:	b9 f7       	brne	.-18     	; 0xe6e <__fp_di2sf+0x10>
     e80:	1b c0       	rjmp	.+54     	; 0xeb8 <__fp_di2sf+0x5a>
     e82:	99 27       	eor	r25, r25
     e84:	08 95       	ret
     e86:	88 23       	and	r24, r24
     e88:	51 f4       	brne	.+20     	; 0xe9e <__fp_di2sf+0x40>
     e8a:	98 50       	subi	r25, 0x08	; 8
     e8c:	d2 f7       	brpl	.-12     	; 0xe82 <__fp_di2sf+0x24>
     e8e:	87 2b       	or	r24, r23
     e90:	76 2f       	mov	r23, r22
     e92:	65 2f       	mov	r22, r21
     e94:	54 2f       	mov	r21, r20
     e96:	43 2f       	mov	r20, r19
     e98:	32 2f       	mov	r19, r18
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	b1 f3       	breq	.-20     	; 0xe8a <__fp_di2sf+0x2c>
     e9e:	12 16       	cp	r1, r18
     ea0:	13 06       	cpc	r1, r19
     ea2:	14 06       	cpc	r1, r20
     ea4:	44 0b       	sbc	r20, r20
     ea6:	88 23       	and	r24, r24
     ea8:	3a f0       	brmi	.+14     	; 0xeb8 <__fp_di2sf+0x5a>
     eaa:	9a 95       	dec	r25
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	66 1f       	adc	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	ca f7       	brpl	.-14     	; 0xeaa <__fp_di2sf+0x4c>
     eb8:	55 23       	and	r21, r21
     eba:	4a f4       	brpl	.+18     	; 0xece <__fp_di2sf+0x70>
     ebc:	44 0f       	add	r20, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__fp_di2sf+0x68>
     ec2:	60 ff       	sbrs	r22, 0
     ec4:	04 c0       	rjmp	.+8      	; 0xece <__fp_di2sf+0x70>
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	88 0f       	add	r24, r24
     ed0:	96 95       	lsr	r25
     ed2:	87 95       	ror	r24
     ed4:	97 f9       	bld	r25, 7
     ed6:	08 95       	ret

00000ed8 <__fp_inf>:
     ed8:	97 f9       	bld	r25, 7
     eda:	9f 67       	ori	r25, 0x7F	; 127
     edc:	80 e8       	ldi	r24, 0x80	; 128
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <__fp_nan>:
     ee4:	9f ef       	ldi	r25, 0xFF	; 255
     ee6:	80 ec       	ldi	r24, 0xC0	; 192
     ee8:	08 95       	ret

00000eea <__fp_negdi>:
     eea:	90 95       	com	r25
     eec:	80 95       	com	r24
     eee:	70 95       	com	r23
     ef0:	60 95       	com	r22
     ef2:	50 95       	com	r21
     ef4:	40 95       	com	r20
     ef6:	30 95       	com	r19
     ef8:	21 95       	neg	r18
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	4f 4f       	sbci	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	6f 4f       	sbci	r22, 0xFF	; 255
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <__fp_pscA>:
     f0a:	00 24       	eor	r0, r0
     f0c:	0a 94       	dec	r0
     f0e:	16 16       	cp	r1, r22
     f10:	17 06       	cpc	r1, r23
     f12:	18 06       	cpc	r1, r24
     f14:	09 06       	cpc	r0, r25
     f16:	08 95       	ret

00000f18 <__fp_pscB>:
     f18:	00 24       	eor	r0, r0
     f1a:	0a 94       	dec	r0
     f1c:	12 16       	cp	r1, r18
     f1e:	13 06       	cpc	r1, r19
     f20:	14 06       	cpc	r1, r20
     f22:	05 06       	cpc	r0, r21
     f24:	08 95       	ret

00000f26 <__fp_round>:
     f26:	09 2e       	mov	r0, r25
     f28:	03 94       	inc	r0
     f2a:	00 0c       	add	r0, r0
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__fp_round+0xc>
     f2e:	88 23       	and	r24, r24
     f30:	52 f0       	brmi	.+20     	; 0xf46 <__fp_round+0x20>
     f32:	bb 0f       	add	r27, r27
     f34:	40 f4       	brcc	.+16     	; 0xf46 <__fp_round+0x20>
     f36:	bf 2b       	or	r27, r31
     f38:	11 f4       	brne	.+4      	; 0xf3e <__fp_round+0x18>
     f3a:	60 ff       	sbrs	r22, 0
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__fp_round+0x20>
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	08 95       	ret

00000f48 <__fp_split3>:
     f48:	57 fd       	sbrc	r21, 7
     f4a:	90 58       	subi	r25, 0x80	; 128
     f4c:	44 0f       	add	r20, r20
     f4e:	55 1f       	adc	r21, r21
     f50:	59 f0       	breq	.+22     	; 0xf68 <__fp_splitA+0x10>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	71 f0       	breq	.+28     	; 0xf72 <__fp_splitA+0x1a>
     f56:	47 95       	ror	r20

00000f58 <__fp_splitA>:
     f58:	88 0f       	add	r24, r24
     f5a:	97 fb       	bst	r25, 7
     f5c:	99 1f       	adc	r25, r25
     f5e:	61 f0       	breq	.+24     	; 0xf78 <__fp_splitA+0x20>
     f60:	9f 3f       	cpi	r25, 0xFF	; 255
     f62:	79 f0       	breq	.+30     	; 0xf82 <__fp_splitA+0x2a>
     f64:	87 95       	ror	r24
     f66:	08 95       	ret
     f68:	12 16       	cp	r1, r18
     f6a:	13 06       	cpc	r1, r19
     f6c:	14 06       	cpc	r1, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	f2 cf       	rjmp	.-28     	; 0xf56 <__fp_split3+0xe>
     f72:	46 95       	lsr	r20
     f74:	f1 df       	rcall	.-30     	; 0xf58 <__fp_splitA>
     f76:	08 c0       	rjmp	.+16     	; 0xf88 <__fp_splitA+0x30>
     f78:	16 16       	cp	r1, r22
     f7a:	17 06       	cpc	r1, r23
     f7c:	18 06       	cpc	r1, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	f1 cf       	rjmp	.-30     	; 0xf64 <__fp_splitA+0xc>
     f82:	86 95       	lsr	r24
     f84:	71 05       	cpc	r23, r1
     f86:	61 05       	cpc	r22, r1
     f88:	08 94       	sec
     f8a:	08 95       	ret

00000f8c <__fp_zero>:
     f8c:	e8 94       	clt

00000f8e <__fp_szero>:
     f8e:	bb 27       	eor	r27, r27
     f90:	66 27       	eor	r22, r22
     f92:	77 27       	eor	r23, r23
     f94:	cb 01       	movw	r24, r22
     f96:	97 f9       	bld	r25, 7
     f98:	08 95       	ret

00000f9a <__mulsf3>:
     f9a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__mulsf3x>
     f9e:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_round>
     fa2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__fp_pscA>
     fa6:	38 f0       	brcs	.+14     	; 0xfb6 <__mulsf3+0x1c>
     fa8:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fp_pscB>
     fac:	20 f0       	brcs	.+8      	; 0xfb6 <__mulsf3+0x1c>
     fae:	95 23       	and	r25, r21
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <__mulsf3+0x1c>
     fb2:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_inf>
     fb6:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_nan>
     fba:	11 24       	eor	r1, r1
     fbc:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_szero>

00000fc0 <__mulsf3x>:
     fc0:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_split3>
     fc4:	70 f3       	brcs	.-36     	; 0xfa2 <__mulsf3+0x8>

00000fc6 <__mulsf3_pse>:
     fc6:	95 9f       	mul	r25, r21
     fc8:	c1 f3       	breq	.-16     	; 0xfba <__mulsf3+0x20>
     fca:	95 0f       	add	r25, r21
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	55 1f       	adc	r21, r21
     fd0:	62 9f       	mul	r22, r18
     fd2:	f0 01       	movw	r30, r0
     fd4:	72 9f       	mul	r23, r18
     fd6:	bb 27       	eor	r27, r27
     fd8:	f0 0d       	add	r31, r0
     fda:	b1 1d       	adc	r27, r1
     fdc:	63 9f       	mul	r22, r19
     fde:	aa 27       	eor	r26, r26
     fe0:	f0 0d       	add	r31, r0
     fe2:	b1 1d       	adc	r27, r1
     fe4:	aa 1f       	adc	r26, r26
     fe6:	64 9f       	mul	r22, r20
     fe8:	66 27       	eor	r22, r22
     fea:	b0 0d       	add	r27, r0
     fec:	a1 1d       	adc	r26, r1
     fee:	66 1f       	adc	r22, r22
     ff0:	82 9f       	mul	r24, r18
     ff2:	22 27       	eor	r18, r18
     ff4:	b0 0d       	add	r27, r0
     ff6:	a1 1d       	adc	r26, r1
     ff8:	62 1f       	adc	r22, r18
     ffa:	73 9f       	mul	r23, r19
     ffc:	b0 0d       	add	r27, r0
     ffe:	a1 1d       	adc	r26, r1
    1000:	62 1f       	adc	r22, r18
    1002:	83 9f       	mul	r24, r19
    1004:	a0 0d       	add	r26, r0
    1006:	61 1d       	adc	r22, r1
    1008:	22 1f       	adc	r18, r18
    100a:	74 9f       	mul	r23, r20
    100c:	33 27       	eor	r19, r19
    100e:	a0 0d       	add	r26, r0
    1010:	61 1d       	adc	r22, r1
    1012:	23 1f       	adc	r18, r19
    1014:	84 9f       	mul	r24, r20
    1016:	60 0d       	add	r22, r0
    1018:	21 1d       	adc	r18, r1
    101a:	82 2f       	mov	r24, r18
    101c:	76 2f       	mov	r23, r22
    101e:	6a 2f       	mov	r22, r26
    1020:	11 24       	eor	r1, r1
    1022:	9f 57       	subi	r25, 0x7F	; 127
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	9a f0       	brmi	.+38     	; 0x104e <__mulsf3_pse+0x88>
    1028:	f1 f0       	breq	.+60     	; 0x1066 <__mulsf3_pse+0xa0>
    102a:	88 23       	and	r24, r24
    102c:	4a f0       	brmi	.+18     	; 0x1040 <__mulsf3_pse+0x7a>
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	bb 1f       	adc	r27, r27
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	91 50       	subi	r25, 0x01	; 1
    103c:	50 40       	sbci	r21, 0x00	; 0
    103e:	a9 f7       	brne	.-22     	; 0x102a <__mulsf3_pse+0x64>
    1040:	9e 3f       	cpi	r25, 0xFE	; 254
    1042:	51 05       	cpc	r21, r1
    1044:	80 f0       	brcs	.+32     	; 0x1066 <__mulsf3_pse+0xa0>
    1046:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_inf>
    104a:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_szero>
    104e:	5f 3f       	cpi	r21, 0xFF	; 255
    1050:	e4 f3       	brlt	.-8      	; 0x104a <__mulsf3_pse+0x84>
    1052:	98 3e       	cpi	r25, 0xE8	; 232
    1054:	d4 f3       	brlt	.-12     	; 0x104a <__mulsf3_pse+0x84>
    1056:	86 95       	lsr	r24
    1058:	77 95       	ror	r23
    105a:	67 95       	ror	r22
    105c:	b7 95       	ror	r27
    105e:	f7 95       	ror	r31
    1060:	e7 95       	ror	r30
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	c1 f7       	brne	.-16     	; 0x1056 <__mulsf3_pse+0x90>
    1066:	fe 2b       	or	r31, r30
    1068:	88 0f       	add	r24, r24
    106a:	91 1d       	adc	r25, r1
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret
    1074:	19 f4       	brne	.+6      	; 0x107c <__mulsf3_pse+0xb6>
    1076:	16 f4       	brtc	.+4      	; 0x107c <__mulsf3_pse+0xb6>
    1078:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_nan>
    107c:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__fp_mpack>

00001080 <sqrt>:
    1080:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_splitA>
    1084:	b8 f3       	brcs	.-18     	; 0x1074 <__mulsf3_pse+0xae>
    1086:	99 23       	and	r25, r25
    1088:	c9 f3       	breq	.-14     	; 0x107c <__mulsf3_pse+0xb6>
    108a:	b6 f3       	brts	.-20     	; 0x1078 <__mulsf3_pse+0xb2>
    108c:	9f 57       	subi	r25, 0x7F	; 127
    108e:	55 0b       	sbc	r21, r21
    1090:	87 ff       	sbrs	r24, 7
    1092:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_norm2>
    1096:	00 24       	eor	r0, r0
    1098:	a0 e6       	ldi	r26, 0x60	; 96
    109a:	40 ea       	ldi	r20, 0xA0	; 160
    109c:	90 01       	movw	r18, r0
    109e:	80 58       	subi	r24, 0x80	; 128
    10a0:	56 95       	lsr	r21
    10a2:	97 95       	ror	r25
    10a4:	28 f4       	brcc	.+10     	; 0x10b0 <sqrt+0x30>
    10a6:	80 5c       	subi	r24, 0xC0	; 192
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <sqrt+0x38>
    10b0:	26 17       	cp	r18, r22
    10b2:	37 07       	cpc	r19, r23
    10b4:	48 07       	cpc	r20, r24
    10b6:	30 f4       	brcc	.+12     	; 0x10c4 <sqrt+0x44>
    10b8:	62 1b       	sub	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	20 29       	or	r18, r0
    10c0:	31 29       	or	r19, r1
    10c2:	4a 2b       	or	r20, r26
    10c4:	a6 95       	lsr	r26
    10c6:	17 94       	ror	r1
    10c8:	07 94       	ror	r0
    10ca:	20 25       	eor	r18, r0
    10cc:	31 25       	eor	r19, r1
    10ce:	4a 27       	eor	r20, r26
    10d0:	58 f7       	brcc	.-42     	; 0x10a8 <sqrt+0x28>
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	20 f0       	brcs	.+8      	; 0x10e2 <sqrt+0x62>
    10da:	26 17       	cp	r18, r22
    10dc:	37 07       	cpc	r19, r23
    10de:	48 07       	cpc	r20, r24
    10e0:	30 f4       	brcc	.+12     	; 0x10ee <sqrt+0x6e>
    10e2:	62 0b       	sbc	r22, r18
    10e4:	73 0b       	sbc	r23, r19
    10e6:	84 0b       	sbc	r24, r20
    10e8:	20 0d       	add	r18, r0
    10ea:	31 1d       	adc	r19, r1
    10ec:	41 1d       	adc	r20, r1
    10ee:	a0 95       	com	r26
    10f0:	81 f7       	brne	.-32     	; 0x10d2 <sqrt+0x52>
    10f2:	b9 01       	movw	r22, r18
    10f4:	84 2f       	mov	r24, r20
    10f6:	91 58       	subi	r25, 0x81	; 129
    10f8:	88 0f       	add	r24, r24
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	08 95       	ret

00001100 <__fp_mpack>:
    1100:	9f 3f       	cpi	r25, 0xFF	; 255
    1102:	31 f0       	breq	.+12     	; 0x1110 <__fp_mpack_finite+0xc>

00001104 <__fp_mpack_finite>:
    1104:	91 50       	subi	r25, 0x01	; 1
    1106:	20 f4       	brcc	.+8      	; 0x1110 <__fp_mpack_finite+0xc>
    1108:	87 95       	ror	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	88 0f       	add	r24, r24
    1112:	91 1d       	adc	r25, r1
    1114:	96 95       	lsr	r25
    1116:	87 95       	ror	r24
    1118:	97 f9       	bld	r25, 7
    111a:	08 95       	ret

0000111c <__fp_norm2>:
    111c:	91 50       	subi	r25, 0x01	; 1
    111e:	50 40       	sbci	r21, 0x00	; 0
    1120:	66 0f       	add	r22, r22
    1122:	77 1f       	adc	r23, r23
    1124:	88 1f       	adc	r24, r24
    1126:	d2 f7       	brpl	.-12     	; 0x111c <__fp_norm2>
    1128:	08 95       	ret

0000112a <__udivmodsi4>:
    112a:	a1 e2       	ldi	r26, 0x21	; 33
    112c:	1a 2e       	mov	r1, r26
    112e:	aa 1b       	sub	r26, r26
    1130:	bb 1b       	sub	r27, r27
    1132:	fd 01       	movw	r30, r26
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <__udivmodsi4_ep>

00001136 <__udivmodsi4_loop>:
    1136:	aa 1f       	adc	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	ee 1f       	adc	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	a2 17       	cp	r26, r18
    1140:	b3 07       	cpc	r27, r19
    1142:	e4 07       	cpc	r30, r20
    1144:	f5 07       	cpc	r31, r21
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__udivmodsi4_ep>
    1148:	a2 1b       	sub	r26, r18
    114a:	b3 0b       	sbc	r27, r19
    114c:	e4 0b       	sbc	r30, r20
    114e:	f5 0b       	sbc	r31, r21

00001150 <__udivmodsi4_ep>:
    1150:	66 1f       	adc	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	1a 94       	dec	r1
    115a:	69 f7       	brne	.-38     	; 0x1136 <__udivmodsi4_loop>
    115c:	60 95       	com	r22
    115e:	70 95       	com	r23
    1160:	80 95       	com	r24
    1162:	90 95       	com	r25
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	bd 01       	movw	r22, r26
    116a:	cf 01       	movw	r24, r30
    116c:	08 95       	ret

0000116e <__muldi3>:
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	1f 93       	push	r17
    1174:	0f 93       	push	r16
    1176:	9a 9d       	mul	r25, r10
    1178:	f0 2d       	mov	r31, r0
    117a:	21 9f       	mul	r18, r17
    117c:	f0 0d       	add	r31, r0
    117e:	8b 9d       	mul	r24, r11
    1180:	f0 0d       	add	r31, r0
    1182:	8a 9d       	mul	r24, r10
    1184:	e0 2d       	mov	r30, r0
    1186:	f1 0d       	add	r31, r1
    1188:	03 9f       	mul	r16, r19
    118a:	f0 0d       	add	r31, r0
    118c:	02 9f       	mul	r16, r18
    118e:	e0 0d       	add	r30, r0
    1190:	f1 1d       	adc	r31, r1
    1192:	4e 9d       	mul	r20, r14
    1194:	e0 0d       	add	r30, r0
    1196:	f1 1d       	adc	r31, r1
    1198:	5e 9d       	mul	r21, r14
    119a:	f0 0d       	add	r31, r0
    119c:	4f 9d       	mul	r20, r15
    119e:	f0 0d       	add	r31, r0
    11a0:	7f 93       	push	r23
    11a2:	6f 93       	push	r22
    11a4:	bf 92       	push	r11
    11a6:	af 92       	push	r10
    11a8:	5f 93       	push	r21
    11aa:	4f 93       	push	r20
    11ac:	d5 01       	movw	r26, r10
    11ae:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    11b2:	8b 01       	movw	r16, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	d7 01       	movw	r26, r14
    11b8:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    11bc:	eb 01       	movw	r28, r22
    11be:	e8 0f       	add	r30, r24
    11c0:	f9 1f       	adc	r31, r25
    11c2:	d6 01       	movw	r26, r12
    11c4:	0e 94 07 09 	call	0x120e	; 0x120e <__muldi3_6>
    11c8:	2f 91       	pop	r18
    11ca:	3f 91       	pop	r19
    11cc:	d6 01       	movw	r26, r12
    11ce:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    11d2:	c6 0f       	add	r28, r22
    11d4:	d7 1f       	adc	r29, r23
    11d6:	e8 1f       	adc	r30, r24
    11d8:	f9 1f       	adc	r31, r25
    11da:	af 91       	pop	r26
    11dc:	bf 91       	pop	r27
    11de:	0e 94 07 09 	call	0x120e	; 0x120e <__muldi3_6>
    11e2:	2f 91       	pop	r18
    11e4:	3f 91       	pop	r19
    11e6:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    11ea:	c6 0f       	add	r28, r22
    11ec:	d7 1f       	adc	r29, r23
    11ee:	e8 1f       	adc	r30, r24
    11f0:	f9 1f       	adc	r31, r25
    11f2:	d6 01       	movw	r26, r12
    11f4:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    11f8:	e6 0f       	add	r30, r22
    11fa:	f7 1f       	adc	r31, r23
    11fc:	98 01       	movw	r18, r16
    11fe:	be 01       	movw	r22, r28
    1200:	cf 01       	movw	r24, r30
    1202:	11 24       	eor	r1, r1
    1204:	0f 91       	pop	r16
    1206:	1f 91       	pop	r17
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <__muldi3_6>:
    120e:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    1212:	46 0f       	add	r20, r22
    1214:	57 1f       	adc	r21, r23
    1216:	c8 1f       	adc	r28, r24
    1218:	d9 1f       	adc	r29, r25
    121a:	08 f4       	brcc	.+2      	; 0x121e <__muldi3_6+0x10>
    121c:	31 96       	adiw	r30, 0x01	; 1
    121e:	08 95       	ret

00001220 <__moddi3>:
    1220:	68 94       	set
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <__divdi3_moddi3>

00001224 <__divdi3>:
    1224:	e8 94       	clt

00001226 <__divdi3_moddi3>:
    1226:	f9 2f       	mov	r31, r25
    1228:	f1 2b       	or	r31, r17
    122a:	12 f0       	brmi	.+4      	; 0x1230 <__divdi3_moddi3+0xa>
    122c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__udivdi3_umoddi3>
    1230:	a0 e0       	ldi	r26, 0x00	; 0
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ee e1       	ldi	r30, 0x1E	; 30
    1236:	f9 e0       	ldi	r31, 0x09	; 9
    1238:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__prologue_saves__+0xc>
    123c:	09 2e       	mov	r0, r25
    123e:	05 94       	asr	r0
    1240:	22 f4       	brpl	.+8      	; 0x124a <__divdi3_moddi3+0x24>
    1242:	0e 94 a0 09 	call	0x1340	; 0x1340 <__negdi2>
    1246:	11 23       	and	r17, r17
    1248:	92 f4       	brpl	.+36     	; 0x126e <__divdi3_moddi3+0x48>
    124a:	f0 e8       	ldi	r31, 0x80	; 128
    124c:	0f 26       	eor	r0, r31
    124e:	ff ef       	ldi	r31, 0xFF	; 255
    1250:	e0 94       	com	r14
    1252:	f0 94       	com	r15
    1254:	00 95       	com	r16
    1256:	10 95       	com	r17
    1258:	b0 94       	com	r11
    125a:	c0 94       	com	r12
    125c:	d0 94       	com	r13
    125e:	a1 94       	neg	r10
    1260:	bf 0a       	sbc	r11, r31
    1262:	cf 0a       	sbc	r12, r31
    1264:	df 0a       	sbc	r13, r31
    1266:	ef 0a       	sbc	r14, r31
    1268:	ff 0a       	sbc	r15, r31
    126a:	0f 0b       	sbc	r16, r31
    126c:	1f 0b       	sbc	r17, r31
    126e:	0e 94 4f 09 	call	0x129e	; 0x129e <__udivmod64>
    1272:	07 fc       	sbrc	r0, 7
    1274:	0e 94 a0 09 	call	0x1340	; 0x1340 <__negdi2>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	ec e0       	ldi	r30, 0x0C	; 12
    127e:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__epilogue_restores__+0xc>

00001282 <__umoddi3>:
    1282:	68 94       	set
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <__udivdi3_umoddi3>

00001286 <__udivdi3>:
    1286:	e8 94       	clt

00001288 <__udivdi3_umoddi3>:
    1288:	8f 92       	push	r8
    128a:	9f 92       	push	r9
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	0e 94 4f 09 	call	0x129e	; 0x129e <__udivmod64>
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	9f 90       	pop	r9
    129a:	8f 90       	pop	r8
    129c:	08 95       	ret

0000129e <__udivmod64>:
    129e:	88 24       	eor	r8, r8
    12a0:	99 24       	eor	r9, r9
    12a2:	f4 01       	movw	r30, r8
    12a4:	e4 01       	movw	r28, r8
    12a6:	b0 e4       	ldi	r27, 0x40	; 64
    12a8:	9f 93       	push	r25
    12aa:	aa 27       	eor	r26, r26
    12ac:	9a 15       	cp	r25, r10
    12ae:	8b 04       	cpc	r8, r11
    12b0:	9c 04       	cpc	r9, r12
    12b2:	ed 05       	cpc	r30, r13
    12b4:	fe 05       	cpc	r31, r14
    12b6:	cf 05       	cpc	r28, r15
    12b8:	d0 07       	cpc	r29, r16
    12ba:	a1 07       	cpc	r26, r17
    12bc:	98 f4       	brcc	.+38     	; 0x12e4 <__udivmod64+0x46>
    12be:	ad 2f       	mov	r26, r29
    12c0:	dc 2f       	mov	r29, r28
    12c2:	cf 2f       	mov	r28, r31
    12c4:	fe 2f       	mov	r31, r30
    12c6:	e9 2d       	mov	r30, r9
    12c8:	98 2c       	mov	r9, r8
    12ca:	89 2e       	mov	r8, r25
    12cc:	98 2f       	mov	r25, r24
    12ce:	87 2f       	mov	r24, r23
    12d0:	76 2f       	mov	r23, r22
    12d2:	65 2f       	mov	r22, r21
    12d4:	54 2f       	mov	r21, r20
    12d6:	43 2f       	mov	r20, r19
    12d8:	32 2f       	mov	r19, r18
    12da:	22 27       	eor	r18, r18
    12dc:	b8 50       	subi	r27, 0x08	; 8
    12de:	31 f7       	brne	.-52     	; 0x12ac <__udivmod64+0xe>
    12e0:	bf 91       	pop	r27
    12e2:	27 c0       	rjmp	.+78     	; 0x1332 <__udivmod64+0x94>
    12e4:	1b 2e       	mov	r1, r27
    12e6:	bf 91       	pop	r27
    12e8:	bb 27       	eor	r27, r27
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	44 1f       	adc	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	66 1f       	adc	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	88 1c       	adc	r8, r8
    12fc:	99 1c       	adc	r9, r9
    12fe:	ee 1f       	adc	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	cc 1f       	adc	r28, r28
    1304:	dd 1f       	adc	r29, r29
    1306:	aa 1f       	adc	r26, r26
    1308:	bb 1f       	adc	r27, r27
    130a:	8a 14       	cp	r8, r10
    130c:	9b 04       	cpc	r9, r11
    130e:	ec 05       	cpc	r30, r12
    1310:	fd 05       	cpc	r31, r13
    1312:	ce 05       	cpc	r28, r14
    1314:	df 05       	cpc	r29, r15
    1316:	a0 07       	cpc	r26, r16
    1318:	b1 07       	cpc	r27, r17
    131a:	48 f0       	brcs	.+18     	; 0x132e <__udivmod64+0x90>
    131c:	8a 18       	sub	r8, r10
    131e:	9b 08       	sbc	r9, r11
    1320:	ec 09       	sbc	r30, r12
    1322:	fd 09       	sbc	r31, r13
    1324:	ce 09       	sbc	r28, r14
    1326:	df 09       	sbc	r29, r15
    1328:	a0 0b       	sbc	r26, r16
    132a:	b1 0b       	sbc	r27, r17
    132c:	21 60       	ori	r18, 0x01	; 1
    132e:	1a 94       	dec	r1
    1330:	e1 f6       	brne	.-72     	; 0x12ea <__udivmod64+0x4c>
    1332:	2e f4       	brtc	.+10     	; 0x133e <__udivmod64+0xa0>
    1334:	94 01       	movw	r18, r8
    1336:	af 01       	movw	r20, r30
    1338:	be 01       	movw	r22, r28
    133a:	cd 01       	movw	r24, r26
    133c:	00 0c       	add	r0, r0
    133e:	08 95       	ret

00001340 <__negdi2>:
    1340:	60 95       	com	r22
    1342:	70 95       	com	r23
    1344:	80 95       	com	r24
    1346:	90 95       	com	r25
    1348:	30 95       	com	r19
    134a:	40 95       	com	r20
    134c:	50 95       	com	r21
    134e:	21 95       	neg	r18
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	4f 4f       	sbci	r20, 0xFF	; 255
    1354:	5f 4f       	sbci	r21, 0xFF	; 255
    1356:	6f 4f       	sbci	r22, 0xFF	; 255
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	8f 4f       	sbci	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__prologue_saves__>:
    1360:	2f 92       	push	r2
    1362:	3f 92       	push	r3
    1364:	4f 92       	push	r4
    1366:	5f 92       	push	r5
    1368:	6f 92       	push	r6
    136a:	7f 92       	push	r7
    136c:	8f 92       	push	r8
    136e:	9f 92       	push	r9
    1370:	af 92       	push	r10
    1372:	bf 92       	push	r11
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	ca 1b       	sub	r28, r26
    138a:	db 0b       	sbc	r29, r27
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	09 94       	ijmp

00001398 <__epilogue_restores__>:
    1398:	2a 88       	ldd	r2, Y+18	; 0x12
    139a:	39 88       	ldd	r3, Y+17	; 0x11
    139c:	48 88       	ldd	r4, Y+16	; 0x10
    139e:	5f 84       	ldd	r5, Y+15	; 0x0f
    13a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    13a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    13a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    13a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    13aa:	b9 84       	ldd	r11, Y+9	; 0x09
    13ac:	c8 84       	ldd	r12, Y+8	; 0x08
    13ae:	df 80       	ldd	r13, Y+7	; 0x07
    13b0:	ee 80       	ldd	r14, Y+6	; 0x06
    13b2:	fd 80       	ldd	r15, Y+5	; 0x05
    13b4:	0c 81       	ldd	r16, Y+4	; 0x04
    13b6:	1b 81       	ldd	r17, Y+3	; 0x03
    13b8:	aa 81       	ldd	r26, Y+2	; 0x02
    13ba:	b9 81       	ldd	r27, Y+1	; 0x01
    13bc:	ce 0f       	add	r28, r30
    13be:	d1 1d       	adc	r29, r1
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	ed 01       	movw	r28, r26
    13cc:	08 95       	ret

000013ce <__ashldi3>:
    13ce:	0f 93       	push	r16
    13d0:	08 30       	cpi	r16, 0x08	; 8
    13d2:	90 f0       	brcs	.+36     	; 0x13f8 <__ashldi3+0x2a>
    13d4:	98 2f       	mov	r25, r24
    13d6:	87 2f       	mov	r24, r23
    13d8:	76 2f       	mov	r23, r22
    13da:	65 2f       	mov	r22, r21
    13dc:	54 2f       	mov	r21, r20
    13de:	43 2f       	mov	r20, r19
    13e0:	32 2f       	mov	r19, r18
    13e2:	22 27       	eor	r18, r18
    13e4:	08 50       	subi	r16, 0x08	; 8
    13e6:	f4 cf       	rjmp	.-24     	; 0x13d0 <__ashldi3+0x2>
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	44 1f       	adc	r20, r20
    13ee:	55 1f       	adc	r21, r21
    13f0:	66 1f       	adc	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 95       	dec	r16
    13fa:	b2 f7       	brpl	.-20     	; 0x13e8 <__ashldi3+0x1a>
    13fc:	0f 91       	pop	r16
    13fe:	08 95       	ret

00001400 <__adddi3>:
    1400:	2a 0d       	add	r18, r10
    1402:	3b 1d       	adc	r19, r11
    1404:	4c 1d       	adc	r20, r12
    1406:	5d 1d       	adc	r21, r13
    1408:	6e 1d       	adc	r22, r14
    140a:	7f 1d       	adc	r23, r15
    140c:	80 1f       	adc	r24, r16
    140e:	91 1f       	adc	r25, r17
    1410:	08 95       	ret

00001412 <__adddi3_s8>:
    1412:	00 24       	eor	r0, r0
    1414:	a7 fd       	sbrc	r26, 7
    1416:	00 94       	com	r0
    1418:	2a 0f       	add	r18, r26
    141a:	30 1d       	adc	r19, r0
    141c:	40 1d       	adc	r20, r0
    141e:	50 1d       	adc	r21, r0
    1420:	60 1d       	adc	r22, r0
    1422:	70 1d       	adc	r23, r0
    1424:	80 1d       	adc	r24, r0
    1426:	90 1d       	adc	r25, r0
    1428:	08 95       	ret

0000142a <__subdi3>:
    142a:	2a 19       	sub	r18, r10
    142c:	3b 09       	sbc	r19, r11
    142e:	4c 09       	sbc	r20, r12
    1430:	5d 09       	sbc	r21, r13
    1432:	6e 09       	sbc	r22, r14
    1434:	7f 09       	sbc	r23, r15
    1436:	80 0b       	sbc	r24, r16
    1438:	91 0b       	sbc	r25, r17
    143a:	08 95       	ret

0000143c <__cmpdi2>:
    143c:	2a 15       	cp	r18, r10
    143e:	3b 05       	cpc	r19, r11
    1440:	4c 05       	cpc	r20, r12
    1442:	5d 05       	cpc	r21, r13
    1444:	6e 05       	cpc	r22, r14
    1446:	7f 05       	cpc	r23, r15
    1448:	80 07       	cpc	r24, r16
    144a:	91 07       	cpc	r25, r17
    144c:	08 95       	ret

0000144e <__cmpdi2_s8>:
    144e:	00 24       	eor	r0, r0
    1450:	a7 fd       	sbrc	r26, 7
    1452:	00 94       	com	r0
    1454:	2a 17       	cp	r18, r26
    1456:	30 05       	cpc	r19, r0
    1458:	40 05       	cpc	r20, r0
    145a:	50 05       	cpc	r21, r0
    145c:	60 05       	cpc	r22, r0
    145e:	70 05       	cpc	r23, r0
    1460:	80 05       	cpc	r24, r0
    1462:	90 05       	cpc	r25, r0
    1464:	08 95       	ret

00001466 <__umulhisi3>:
    1466:	a2 9f       	mul	r26, r18
    1468:	b0 01       	movw	r22, r0
    146a:	b3 9f       	mul	r27, r19
    146c:	c0 01       	movw	r24, r0
    146e:	a3 9f       	mul	r26, r19
    1470:	70 0d       	add	r23, r0
    1472:	81 1d       	adc	r24, r1
    1474:	11 24       	eor	r1, r1
    1476:	91 1d       	adc	r25, r1
    1478:	b2 9f       	mul	r27, r18
    147a:	70 0d       	add	r23, r0
    147c:	81 1d       	adc	r24, r1
    147e:	11 24       	eor	r1, r1
    1480:	91 1d       	adc	r25, r1
    1482:	08 95       	ret

00001484 <_exit>:
    1484:	f8 94       	cli

00001486 <__stop_program>:
    1486:	ff cf       	rjmp	.-2      	; 0x1486 <__stop_program>
