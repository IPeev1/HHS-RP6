
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001478  0000150c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00800066  00800066  00001512  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b90  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000751  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
  8 .debug_line   00000789  00000000  00000000  00002b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  000032b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  00003598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fd  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004067  2**0
=======
  8 .debug_line   000007b1  00000000  00000000  00002931  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  000030e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000616  00000000  00000000  000033bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099e  00000000  00000000  000039d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004370  2**0
>>>>>>> 400108a127473db1261acfaf119de4c272ec2796
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_1>
       8:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 06 	call	0xd88	; 0xd88 <main>
      8a:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_LED>:
	sei();									//Enable global interrupts
}


void init_LED(){
	DDRB |= 0b10000011;
      92:	87 b3       	in	r24, 0x17	; 23
      94:	83 68       	ori	r24, 0x83	; 131
      96:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      98:	84 b3       	in	r24, 0x14	; 20
      9a:	80 67       	ori	r24, 0x70	; 112
      9c:	84 bb       	out	0x14, r24	; 20
      9e:	08 95       	ret

000000a0 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      a0:	83 b7       	in	r24, 0x33	; 51
      a2:	81 60       	ori	r24, 0x01	; 1
      a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      a6:	83 b7       	in	r24, 0x33	; 51
      a8:	82 60       	ori	r24, 0x02	; 2
      aa:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      ac:	89 b7       	in	r24, 0x39	; 57
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      b2:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      b4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <t0TotalOverflow>
      b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <t0TotalOverflow+0x1>
      bc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <t0TotalOverflow+0x2>
      c0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <t0TotalOverflow+0x3>
      c4:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t0TotalOverflow+0x4>
      c8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t0TotalOverflow+0x5>
      cc:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <t0TotalOverflow+0x6>
      d0:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <t0TotalOverflow+0x7>
      d4:	08 95       	ret

000000d6 <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	2f 93       	push	r18
      e2:	3f 93       	push	r19
      e4:	4f 93       	push	r20
      e6:	5f 93       	push	r21
      e8:	6f 93       	push	r22
      ea:	7f 93       	push	r23
      ec:	8f 93       	push	r24
      ee:	9f 93       	push	r25
      f0:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
      f2:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <t0TotalOverflow>
      f6:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <t0TotalOverflow+0x1>
      fa:	40 91 b3 00 	lds	r20, 0x00B3	; 0x8000b3 <t0TotalOverflow+0x2>
      fe:	50 91 b4 00 	lds	r21, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x3>
     102:	60 91 b5 00 	lds	r22, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x4>
     106:	70 91 b6 00 	lds	r23, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x5>
     10a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x6>
     10e:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x7>
     112:	a1 e0       	ldi	r26, 0x01	; 1
     114:	0e 94 10 0a 	call	0x1420	; 0x1420 <__adddi3_s8>
     118:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <t0TotalOverflow>
     11c:	30 93 b2 00 	sts	0x00B2, r19	; 0x8000b2 <t0TotalOverflow+0x1>
     120:	40 93 b3 00 	sts	0x00B3, r20	; 0x8000b3 <t0TotalOverflow+0x2>
     124:	50 93 b4 00 	sts	0x00B4, r21	; 0x8000b4 <t0TotalOverflow+0x3>
     128:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <t0TotalOverflow+0x4>
     12c:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <t0TotalOverflow+0x5>
     130:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <t0TotalOverflow+0x6>
     134:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <t0TotalOverflow+0x7>
}
     138:	af 91       	pop	r26
     13a:	9f 91       	pop	r25
     13c:	8f 91       	pop	r24
     13e:	7f 91       	pop	r23
     140:	6f 91       	pop	r22
     142:	5f 91       	pop	r21
     144:	4f 91       	pop	r20
     146:	3f 91       	pop	r19
     148:	2f 91       	pop	r18
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <micros>:


uint64_t micros(){
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     164:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     166:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <t0TotalOverflow>
     16a:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <t0TotalOverflow+0x1>
     16e:	40 91 b3 00 	lds	r20, 0x00B3	; 0x8000b3 <t0TotalOverflow+0x2>
     172:	50 91 b4 00 	lds	r21, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x3>
     176:	60 91 b5 00 	lds	r22, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x4>
     17a:	70 91 b6 00 	lds	r23, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x5>
     17e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x6>
     182:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     186:	e0 e0       	ldi	r30, 0x00	; 0
     188:	fa 2f       	mov	r31, r26
     18a:	ff 0f       	add	r31, r31
     18c:	ff 0f       	add	r31, r31
     18e:	ff 0f       	add	r31, r31
     190:	ff 23       	and	r31, r31
     192:	14 f4       	brge	.+4      	; 0x198 <micros+0x44>
     194:	e1 50       	subi	r30, 0x01	; 1
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	ef 2f       	mov	r30, r31
     19a:	ee 0f       	add	r30, r30
     19c:	ee 0b       	sbc	r30, r30
     19e:	0b e0       	ldi	r16, 0x0B	; 11
     1a0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ashldi3>
     1a4:	a2 2e       	mov	r10, r18
     1a6:	b3 2e       	mov	r11, r19
     1a8:	c4 2e       	mov	r12, r20
     1aa:	d5 2e       	mov	r13, r21
     1ac:	e6 2e       	mov	r14, r22
     1ae:	f7 2e       	mov	r15, r23
     1b0:	08 2f       	mov	r16, r24
     1b2:	19 2f       	mov	r17, r25
     1b4:	2f 2f       	mov	r18, r31
     1b6:	3e 2f       	mov	r19, r30
     1b8:	4e 2f       	mov	r20, r30
     1ba:	5e 2f       	mov	r21, r30
     1bc:	6e 2f       	mov	r22, r30
     1be:	7e 2f       	mov	r23, r30
     1c0:	8e 2f       	mov	r24, r30
     1c2:	9e 2f       	mov	r25, r30
     1c4:	0e 94 07 0a 	call	0x140e	; 0x140e <__adddi3>
}
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	df 90       	pop	r13
     1d2:	cf 90       	pop	r12
     1d4:	bf 90       	pop	r11
     1d6:	af 90       	pop	r10
     1d8:	08 95       	ret

000001da <init_TWI>:
//------------------------------------------------------
//I2C functions ----------------------------------------
void init_TWI(){
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);		//Enable TWI; Enable Acknowledge; Enable Interrupt
     1da:	85 e4       	ldi	r24, 0x45	; 69
     1dc:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;											//No prescaling
     1de:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);									//Set slave address
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;					//set SCL to 100kHz
     1e4:	80 e2       	ldi	r24, 0x20	; 32
     1e6:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;
     1e8:	84 b3       	in	r24, 0x14	; 20
     1ea:	83 60       	ori	r24, 0x03	; 3
     1ec:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;
     1ee:	85 b3       	in	r24, 0x15	; 21
     1f0:	83 60       	ori	r24, 0x03	; 3
     1f2:	85 bb       	out	0x15, r24	; 21
     1f4:	08 95       	ret

000001f6 <init_rp6Data>:
}


void init_rp6Data(){
	rp6Data.driveSpeed = 0;
     1f6:	e0 ea       	ldi	r30, 0xA0	; 160
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	11 82       	std	Z+1, r1	; 0x01
     1fc:	10 82       	st	Z, r1
	rp6Data.driveDirection = 1;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	82 83       	std	Z+2, r24	; 0x02
	rp6Data.turnDirection = 0;
     202:	13 82       	std	Z+3, r1	; 0x03
	rp6Data.accelerationRate = 2;
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	35 83       	std	Z+5, r19	; 0x05
     20a:	24 83       	std	Z+4, r18	; 0x04
	rp6Data.turnRate = 2500;
     20c:	24 ec       	ldi	r18, 0xC4	; 196
     20e:	39 e0       	ldi	r19, 0x09	; 9
     210:	37 83       	std	Z+7, r19	; 0x07
     212:	26 83       	std	Z+6, r18	; 0x06
	rp6Data.driveSpeedThreshold = 7000;
     214:	28 e5       	ldi	r18, 0x58	; 88
     216:	3b e1       	ldi	r19, 0x1B	; 27
     218:	31 87       	std	Z+9, r19	; 0x09
     21a:	20 87       	std	Z+8, r18	; 0x08
	rp6Data.updateSpeed = 200;
     21c:	48 ec       	ldi	r20, 0xC8	; 200
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	42 87       	std	Z+10, r20	; 0x0a
     226:	53 87       	std	Z+11, r21	; 0x0b
     228:	64 87       	std	Z+12, r22	; 0x0c
     22a:	75 87       	std	Z+13, r23	; 0x0d
	rp6Data.enableBeeper = 1;
     22c:	86 87       	std	Z+14, r24	; 0x0e
     22e:	08 95       	ret

00000230 <init_arduinoData>:
}


void init_arduinoData(){
	arduinoData.motorEncoderLVal = 0;
     230:	e2 e8       	ldi	r30, 0x82	; 130
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	11 82       	std	Z+1, r1	; 0x01
     236:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;
     238:	13 82       	std	Z+3, r1	; 0x03
     23a:	12 82       	std	Z+2, r1	; 0x02
     23c:	08 95       	ret

0000023e <clearSendData>:
	
	TWCR |= (1 << TWINT);
}


void clearSendData(){
     23e:	e9 eb       	ldi	r30, 0xB9	; 185
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	8d ec       	ldi	r24, 0xCD	; 205
     244:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     246:	11 92       	st	Z+, r1
	TWCR |= (1 << TWINT);
}


void clearSendData(){
	for(int i = 0; i < DATASIZE; i++){
     248:	e8 17       	cp	r30, r24
     24a:	f9 07       	cpc	r31, r25
     24c:	e1 f7       	brne	.-8      	; 0x246 <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     24e:	08 95       	ret

00000250 <clearReceiveData>:


void clearReceiveData(){
     250:	ec e8       	ldi	r30, 0x8C	; 140
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 ea       	ldi	r24, 0xA0	; 160
     256:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     258:	11 92       	st	Z+, r1
	}
}


void clearReceiveData(){
	for(int i = 0; i < DATASIZE; i++){
     25a:	e8 17       	cp	r30, r24
     25c:	f9 07       	cpc	r31, r25
     25e:	e1 f7       	brne	.-8      	; 0x258 <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     260:	08 95       	ret

00000262 <rp6DataInterpreter>:
		case(1): rp6DataInterpreter(); break;
	}
}


void rp6DataInterpreter(){
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
	if(receiveData[2]-1 == 0){
     266:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <receiveData+0x2>
     26a:	21 30       	cpi	r18, 0x01	; 1
     26c:	29 f4       	brne	.+10     	; 0x278 <rp6DataInterpreter+0x16>
		rp6Data.driveSpeed = 0;
     26e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <rp6Data+0x1>
     272:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <rp6Data>
     276:	0c c0       	rjmp	.+24     	; 0x290 <rp6DataInterpreter+0x2e>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     278:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <receiveData+0x1>
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <rp6Data+0x1>
     282:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <rp6Data>
	}
	
	if(receiveData[2] < 1){
     286:	21 11       	cpse	r18, r1
     288:	03 c0       	rjmp	.+6      	; 0x290 <rp6DataInterpreter+0x2e>
		rp6Data.driveDirection = 0;
     28a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <rp6Data+0x2>
     28e:	03 c0       	rjmp	.+6      	; 0x296 <rp6DataInterpreter+0x34>
	}else{
		rp6Data.driveDirection = 1;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <rp6Data+0x2>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     296:	c0 ea       	ldi	r28, 0xA0	; 160
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	ec e8       	ldi	r30, 0x8C	; 140
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	83 81       	ldd	r24, Z+3	; 0x03
     2a0:	81 50       	subi	r24, 0x01	; 1
     2a2:	8b 83       	std	Y+3, r24	; 0x03
	rp6Data.accelerationRate = (receiveData[4] << 8) + receiveData[5];
     2a4:	84 81       	ldd	r24, Z+4	; 0x04
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	98 2f       	mov	r25, r24
     2aa:	88 27       	eor	r24, r24
     2ac:	25 81       	ldd	r18, Z+5	; 0x05
     2ae:	82 0f       	add	r24, r18
     2b0:	91 1d       	adc	r25, r1
     2b2:	9d 83       	std	Y+5, r25	; 0x05
     2b4:	8c 83       	std	Y+4, r24	; 0x04
	rp6Data.turnRate = (receiveData[6] << 8) + receiveData[7];
     2b6:	86 81       	ldd	r24, Z+6	; 0x06
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	98 2f       	mov	r25, r24
     2bc:	88 27       	eor	r24, r24
     2be:	27 81       	ldd	r18, Z+7	; 0x07
     2c0:	82 0f       	add	r24, r18
     2c2:	91 1d       	adc	r25, r1
     2c4:	9f 83       	std	Y+7, r25	; 0x07
     2c6:	8e 83       	std	Y+6, r24	; 0x06
	rp6Data.driveSpeedThreshold = (receiveData[8] << 8) + receiveData[9];
     2c8:	80 85       	ldd	r24, Z+8	; 0x08
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	98 2f       	mov	r25, r24
     2ce:	88 27       	eor	r24, r24
     2d0:	21 85       	ldd	r18, Z+9	; 0x09
     2d2:	82 0f       	add	r24, r18
     2d4:	91 1d       	adc	r25, r1
     2d6:	99 87       	std	Y+9, r25	; 0x09
     2d8:	88 87       	std	Y+8, r24	; 0x08
	rp6Data.updateSpeed = (receiveData[10] << 8) + receiveData[11];
     2da:	82 85       	ldd	r24, Z+10	; 0x0a
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	98 2f       	mov	r25, r24
     2e0:	88 27       	eor	r24, r24
     2e2:	23 85       	ldd	r18, Z+11	; 0x0b
     2e4:	82 0f       	add	r24, r18
     2e6:	91 1d       	adc	r25, r1
     2e8:	09 2e       	mov	r0, r25
     2ea:	00 0c       	add	r0, r0
     2ec:	aa 0b       	sbc	r26, r26
     2ee:	bb 0b       	sbc	r27, r27
     2f0:	8a 87       	std	Y+10, r24	; 0x0a
     2f2:	9b 87       	std	Y+11, r25	; 0x0b
     2f4:	ac 87       	std	Y+12, r26	; 0x0c
     2f6:	bd 87       	std	Y+13, r27	; 0x0d
	rp6Data.enableBeeper = receiveData[12];
     2f8:	84 85       	ldd	r24, Z+12	; 0x0c
     2fa:	8e 87       	std	Y+14, r24	; 0x0e
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
     2fc:	85 85       	ldd	r24, Z+13	; 0x0d
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	98 2f       	mov	r25, r24
     302:	88 27       	eor	r24, r24
     304:	26 85       	ldd	r18, Z+14	; 0x0e
     306:	82 0f       	add	r24, r18
     308:	91 1d       	adc	r25, r1
     30a:	98 8b       	std	Y+16, r25	; 0x10
     30c:	8f 87       	std	Y+15, r24	; 0x0f
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <I2C_receiveInterpreter>:
}


void I2C_receiveInterpreter(){
	int dataSet = receiveData[0];
	switch(dataSet){
     314:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <receiveData>
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	11 f4       	brne	.+4      	; 0x320 <I2C_receiveInterpreter+0xc>
		case(1): rp6DataInterpreter(); break;
     31c:	0e 94 31 01 	call	0x262	; 0x262 <rp6DataInterpreter>
     320:	08 95       	ret

00000322 <arduinoDataConstructor>:
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
}


void arduinoDataConstructor(){
	clearSendData();
     322:	0e 94 1f 01 	call	0x23e	; 0x23e <clearSendData>
	
	sendData[0] = 1;
     326:	e9 eb       	ldi	r30, 0xB9	; 185
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 83       	st	Z, r24
	
	sendData[1] = (arduinoData.motorEncoderLVal >> 8);
     32e:	a2 e8       	ldi	r26, 0x82	; 130
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	8c 91       	ld	r24, X
     334:	11 96       	adiw	r26, 0x01	; 1
     336:	9c 91       	ld	r25, X
     338:	11 97       	sbiw	r26, 0x01	; 1
     33a:	91 83       	std	Z+1, r25	; 0x01
	sendData[2] = arduinoData.motorEncoderLVal;
     33c:	82 83       	std	Z+2, r24	; 0x02
	
	sendData[3] = (arduinoData.motorEncoderRVal >> 8);
     33e:	12 96       	adiw	r26, 0x02	; 2
     340:	8c 91       	ld	r24, X
     342:	12 97       	sbiw	r26, 0x02	; 2
     344:	13 96       	adiw	r26, 0x03	; 3
     346:	9c 91       	ld	r25, X
     348:	13 97       	sbiw	r26, 0x03	; 3
     34a:	93 83       	std	Z+3, r25	; 0x03
	sendData[4] = arduinoData.motorEncoderRVal;
     34c:	84 83       	std	Z+4, r24	; 0x04
	
	sendData[5] = (arduinoData.distanceDrivenL >> 8);
     34e:	14 96       	adiw	r26, 0x04	; 4
     350:	8c 91       	ld	r24, X
     352:	14 97       	sbiw	r26, 0x04	; 4
     354:	15 96       	adiw	r26, 0x05	; 5
     356:	9c 91       	ld	r25, X
     358:	15 97       	sbiw	r26, 0x05	; 5
     35a:	95 83       	std	Z+5, r25	; 0x05
	sendData[6] = arduinoData.distanceDrivenL;
     35c:	86 83       	std	Z+6, r24	; 0x06
	
	sendData[7] = (arduinoData.distanceDrivenR >> 8);
     35e:	16 96       	adiw	r26, 0x06	; 6
     360:	8c 91       	ld	r24, X
     362:	16 97       	sbiw	r26, 0x06	; 6
     364:	17 96       	adiw	r26, 0x07	; 7
     366:	9c 91       	ld	r25, X
     368:	17 97       	sbiw	r26, 0x07	; 7
     36a:	97 83       	std	Z+7, r25	; 0x07
	sendData[8] = arduinoData.distanceDrivenR;
     36c:	80 87       	std	Z+8, r24	; 0x08
	
	sendData[9] = (arduinoData.totalDistance >> 8);
     36e:	18 96       	adiw	r26, 0x08	; 8
     370:	8c 91       	ld	r24, X
     372:	18 97       	sbiw	r26, 0x08	; 8
     374:	19 96       	adiw	r26, 0x09	; 9
     376:	9c 91       	ld	r25, X
     378:	91 87       	std	Z+9, r25	; 0x09
	sendData[10] = arduinoData.totalDistance;
     37a:	82 87       	std	Z+10, r24	; 0x0a
     37c:	e4 ec       	ldi	r30, 0xC4	; 196
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	8d ec       	ldi	r24, 0xCD	; 205
     382:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i = 11; i < DATASIZE; i++){
		sendData[i] = 0;
     384:	11 92       	st	Z+, r1
	sendData[8] = arduinoData.distanceDrivenR;
	
	sendData[9] = (arduinoData.totalDistance >> 8);
	sendData[10] = arduinoData.totalDistance;
	
	for(int i = 11; i < DATASIZE; i++){
     386:	e8 17       	cp	r30, r24
     388:	f9 07       	cpc	r31, r25
     38a:	e1 f7       	brne	.-8      	; 0x384 <arduinoDataConstructor+0x62>
		sendData[i] = 0;
	}
}
     38c:	08 95       	ret

0000038e <__vector_19>:
	arduinoData.motorEncoderLVal = 0;
	arduinoData.motorEncoderRVal = 0;
}


ISR(TWI_vect){
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	2f 93       	push	r18
     39a:	3f 93       	push	r19
     39c:	4f 93       	push	r20
     39e:	5f 93       	push	r21
     3a0:	6f 93       	push	r22
     3a2:	7f 93       	push	r23
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	af 93       	push	r26
     3aa:	bf 93       	push	r27
     3ac:	ef 93       	push	r30
     3ae:	ff 93       	push	r31
	static int byteCounter = 0;
	switch(TWSR){
     3b0:	81 b1       	in	r24, 0x01	; 1
     3b2:	80 3a       	cpi	r24, 0xA0	; 160
     3b4:	21 f1       	breq	.+72     	; 0x3fe <__vector_19+0x70>
     3b6:	28 f4       	brcc	.+10     	; 0x3c2 <__vector_19+0x34>
     3b8:	80 36       	cpi	r24, 0x60	; 96
     3ba:	41 f0       	breq	.+16     	; 0x3cc <__vector_19+0x3e>
     3bc:	80 38       	cpi	r24, 0x80	; 128
     3be:	69 f0       	breq	.+26     	; 0x3da <__vector_19+0x4c>
     3c0:	39 c0       	rjmp	.+114    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3c2:	88 3a       	cpi	r24, 0xA8	; 168
     3c4:	f9 f0       	breq	.+62     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3c6:	88 3b       	cpi	r24, 0xB8	; 184
     3c8:	39 f1       	breq	.+78     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3ca:	34 c0       	rjmp	.+104    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		case 0x60:
			clearReceiveData();
     3cc:	0e 94 28 01 	call	0x250	; 0x250 <clearReceiveData>
			byteCounter = 0;
     3d0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1966+0x1>
     3d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1966>
		break;
     3d8:	2d c0       	rjmp	.+90     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 0x80:
			if(byteCounter < 20){
     3da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1966>
     3de:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1966+0x1>
     3e2:	84 31       	cpi	r24, 0x14	; 20
     3e4:	91 05       	cpc	r25, r1
     3e6:	34 f5       	brge	.+76     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				receiveData[byteCounter] = TWDR;
     3e8:	23 b1       	in	r18, 0x03	; 3
     3ea:	fc 01       	movw	r30, r24
     3ec:	e4 57       	subi	r30, 0x74	; 116
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	20 83       	st	Z, r18
				byteCounter++;
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1966+0x1>
     3f8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1966>
     3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			}
		break;
		
		case 0xA0:
			I2C_receiveInterpreter();
     3fe:	0e 94 8a 01 	call	0x314	; 0x314 <I2C_receiveInterpreter>
		break;
     402:	18 c0       	rjmp	.+48     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 0xA8:
			arduinoDataConstructor();
     404:	0e 94 91 01 	call	0x322	; 0x322 <arduinoDataConstructor>
			byteCounter = 0;
     408:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1966+0x1>
     40c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1966>
			TWDR = sendData[byteCounter];
     410:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <sendData>
     414:	83 b9       	out	0x03, r24	; 3
		break;
     416:	0e c0       	rjmp	.+28     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 0xB8:
			byteCounter++;
     418:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1966>
     41c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1966+0x1>
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1966+0x1>
     426:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1966>
			TWDR = sendData[byteCounter];
     42a:	fc 01       	movw	r30, r24
     42c:	e7 54       	subi	r30, 0x47	; 71
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);
     434:	86 b7       	in	r24, 0x36	; 54
     436:	80 68       	ori	r24, 0x80	; 128
     438:	86 bf       	out	0x36, r24	; 54
}
     43a:	ff 91       	pop	r31
     43c:	ef 91       	pop	r30
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     45c:	81 b3       	in	r24, 0x11	; 17
     45e:	80 63       	ori	r24, 0x30	; 48
     460:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     462:	81 b3       	in	r24, 0x11	; 17
     464:	83 7f       	andi	r24, 0xF3	; 243
     466:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     468:	84 b3       	in	r24, 0x14	; 20
     46a:	8c 60       	ori	r24, 0x0C	; 12
     46c:	84 bb       	out	0x14, r24	; 20
     46e:	08 95       	ret

00000470 <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     470:	8f b5       	in	r24, 0x2f	; 47
     472:	80 68       	ori	r24, 0x80	; 128
     474:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     476:	8f b5       	in	r24, 0x2f	; 47
     478:	80 62       	ori	r24, 0x20	; 32
     47a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     47c:	8f b5       	in	r24, 0x2f	; 47
     47e:	82 60       	ori	r24, 0x02	; 2
     480:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     482:	8e b5       	in	r24, 0x2e	; 46
     484:	80 61       	ori	r24, 0x10	; 16
     486:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     488:	8e b5       	in	r24, 0x2e	; 46
     48a:	81 60       	ori	r24, 0x01	; 1
     48c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	99 ef       	ldi	r25, 0xF9	; 249
     492:	97 bd       	out	0x27, r25	; 39
     494:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     496:	1b bc       	out	0x2b, r1	; 43
     498:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     49a:	19 bc       	out	0x29, r1	; 41
     49c:	18 bc       	out	0x28, r1	; 40
     49e:	08 95       	ret

000004a0 <init_motor_encoder>:
}


void init_motor_encoder(){
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     4a0:	85 b7       	in	r24, 0x35	; 53
     4a2:	81 60       	ori	r24, 0x01	; 1
     4a4:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     4a6:	85 b7       	in	r24, 0x35	; 53
     4a8:	84 60       	ori	r24, 0x04	; 4
     4aa:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     4ac:	8b b7       	in	r24, 0x3b	; 59
     4ae:	80 64       	ori	r24, 0x40	; 64
     4b0:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     4b2:	8b b7       	in	r24, 0x3b	; 59
     4b4:	80 68       	ori	r24, 0x80	; 128
     4b6:	8b bf       	out	0x3b, r24	; 59
     4b8:	08 95       	ret

000004ba <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     4ba:	0e 94 2e 02 	call	0x45c	; 0x45c <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     4be:	0e 94 38 02 	call	0x470	; 0x470 <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     4c2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <init_motor_encoder>
     4c6:	08 95       	ret

000004c8 <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	ef 93       	push	r30
     4d8:	ff 93       	push	r31
	arduinoData.motorEncoderLVal++;							//Increase the encoder variable
     4da:	e2 e8       	ldi	r30, 0x82	; 130
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	91 83       	std	Z+1, r25	; 0x01
     4e6:	80 83       	st	Z, r24
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	9f 91       	pop	r25
     4ee:	8f 91       	pop	r24
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <__vector_2>:


ISR(INT1_vect){
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	ef 93       	push	r30
     50a:	ff 93       	push	r31
	arduinoData.motorEncoderRVal++;							//Increase the encoder variable
     50c:	e2 e8       	ldi	r30, 0x82	; 130
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	82 81       	ldd	r24, Z+2	; 0x02
     512:	93 81       	ldd	r25, Z+3	; 0x03
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	93 83       	std	Z+3, r25	; 0x03
     518:	82 83       	std	Z+2, r24	; 0x02
}
     51a:	ff 91       	pop	r31
     51c:	ef 91       	pop	r30
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     52c:	89 2b       	or	r24, r25
     52e:	39 f0       	breq	.+14     	; 0x53e <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     530:	8b b7       	in	r24, 0x3b	; 59
     532:	80 64       	ori	r24, 0x40	; 64
     534:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     536:	8b b7       	in	r24, 0x3b	; 59
     538:	80 68       	ori	r24, 0x80	; 128
     53a:	8b bf       	out	0x3b, r24	; 59
     53c:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     53e:	8b b7       	in	r24, 0x3b	; 59
     540:	8f 7b       	andi	r24, 0xBF	; 191
     542:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     544:	8b b7       	in	r24, 0x3b	; 59
     546:	8f 77       	andi	r24, 0x7F	; 127
     548:	8b bf       	out	0x3b, r24	; 59
     54a:	08 95       	ret

0000054c <motorDriver>:
	}
}


int motorDriver(struct rp6DataBP rp6Data){
     54c:	2f 92       	push	r2
     54e:	3f 92       	push	r3
     550:	4f 92       	push	r4
     552:	5f 92       	push	r5
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	e3 97       	sbiw	r28, 0x33	; 51
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	89 82       	std	Y+1, r8	; 0x01
     582:	9a 82       	std	Y+2, r9	; 0x02
     584:	ab 82       	std	Y+3, r10	; 0x03
     586:	bc 82       	std	Y+4, r11	; 0x04
     588:	cd 82       	std	Y+5, r12	; 0x05
     58a:	de 82       	std	Y+6, r13	; 0x06
     58c:	ef 82       	std	Y+7, r14	; 0x07
     58e:	f8 86       	std	Y+8, r15	; 0x08
     590:	09 87       	std	Y+9, r16	; 0x09
     592:	1a 87       	std	Y+10, r17	; 0x0a
     594:	2b 87       	std	Y+11, r18	; 0x0b
     596:	3c 87       	std	Y+12, r19	; 0x0c
     598:	4d 87       	std	Y+13, r20	; 0x0d
     59a:	5e 87       	std	Y+14, r21	; 0x0e
     59c:	6f 87       	std	Y+15, r22	; 0x0f
     59e:	78 8b       	std	Y+16, r23	; 0x10
     5a0:	89 8b       	std	Y+17, r24	; 0x11
     5a2:	49 80       	ldd	r4, Y+1	; 0x01
     5a4:	5a 80       	ldd	r5, Y+2	; 0x02
     5a6:	aa 8e       	std	Y+26, r10	; 0x1a
     5a8:	bb a2       	std	Y+35, r11	; 0x23
     5aa:	cc a2       	std	Y+36, r12	; 0x24
     5ac:	dd a2       	std	Y+37, r13	; 0x25
     5ae:	0f 81       	ldd	r16, Y+7	; 0x07
     5b0:	18 85       	ldd	r17, Y+8	; 0x08
     5b2:	1b a7       	std	Y+43, r17	; 0x2b
     5b4:	0a a7       	std	Y+42, r16	; 0x2a
     5b6:	29 84       	ldd	r2, Y+9	; 0x09
     5b8:	3a 84       	ldd	r3, Y+10	; 0x0a
     5ba:	6b 84       	ldd	r6, Y+11	; 0x0b
     5bc:	7c 84       	ldd	r7, Y+12	; 0x0c
     5be:	8d 84       	ldd	r8, Y+13	; 0x0d
     5c0:	9e 84       	ldd	r9, Y+14	; 0x0e
	//-------------------------
	
	rp6Data.updateSpeed = rp6Data.updateSpeed * 1000;
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     5c2:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     5c6:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.2023>
     5ca:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.2023+0x1>
     5ce:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.2023+0x2>
     5d2:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.2023+0x3>
     5d6:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.2023+0x4>
     5da:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.2023+0x5>
     5de:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.2023+0x6>
     5e2:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.2023+0x7>
     5e6:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpdi2>
     5ea:	08 f4       	brcc	.+2      	; 0x5ee <motorDriver+0xa2>
     5ec:	b2 c3       	rjmp	.+1892   	; 0xd52 <__stack+0x4f3>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     5ee:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     5f2:	a2 2e       	mov	r10, r18
     5f4:	b3 2e       	mov	r11, r19
     5f6:	c4 2e       	mov	r12, r20
     5f8:	d5 2e       	mov	r13, r21
     5fa:	e6 2f       	mov	r30, r22
     5fc:	f7 2f       	mov	r31, r23
     5fe:	8b 8f       	std	Y+27, r24	; 0x1b
     600:	9e a3       	std	Y+38, r25	; 0x26
     602:	a8 ee       	ldi	r26, 0xE8	; 232
     604:	b3 e0       	ldi	r27, 0x03	; 3
     606:	a4 01       	movw	r20, r8
     608:	93 01       	movw	r18, r6
     60a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__muluhisi3>
     60e:	7b 01       	movw	r14, r22
     610:	8c 01       	movw	r16, r24
     612:	26 2f       	mov	r18, r22
     614:	3f 2d       	mov	r19, r15
     616:	40 2f       	mov	r20, r16
     618:	51 2f       	mov	r21, r17
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	ee 2e       	mov	r14, r30
     624:	ff 2e       	mov	r15, r31
     626:	0b 8d       	ldd	r16, Y+27	; 0x1b
     628:	1e a1       	ldd	r17, Y+38	; 0x26
     62a:	0e 94 07 0a 	call	0x140e	; 0x140e <__adddi3>
     62e:	72 2e       	mov	r7, r18
     630:	83 2e       	mov	r8, r19
     632:	94 2e       	mov	r9, r20
     634:	65 2e       	mov	r6, r21
     636:	6e a3       	std	Y+38, r22	; 0x26
     638:	7f a3       	std	Y+39, r23	; 0x27
     63a:	88 a7       	std	Y+40, r24	; 0x28
     63c:	99 a7       	std	Y+41, r25	; 0x29
     63e:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2023>
     642:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2023+0x1>
     646:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2023+0x2>
     64a:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2023+0x3>
     64e:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2023+0x4>
     652:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2023+0x5>
     656:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2023+0x6>
     65a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2023+0x7>
	}
	
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	94 e6       	ldi	r25, 0x64	; 100
     662:	48 9e       	mul	r4, r24
     664:	90 01       	movw	r18, r0
     666:	49 9e       	mul	r4, r25
     668:	30 0d       	add	r19, r0
     66a:	58 9e       	mul	r5, r24
     66c:	30 0d       	add	r19, r0
     66e:	11 24       	eor	r1, r1
     670:	36 95       	lsr	r19
     672:	27 95       	ror	r18
     674:	36 95       	lsr	r19
     676:	27 95       	ror	r18
     678:	ab e7       	ldi	r26, 0x7B	; 123
     67a:	b4 e1       	ldi	r27, 0x14	; 20
     67c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__umulhisi3>
     680:	96 95       	lsr	r25
     682:	87 95       	ror	r24
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     684:	82 15       	cp	r24, r2
     686:	93 05       	cpc	r25, r3
     688:	10 f4       	brcc	.+4      	; 0x68e <motorDriver+0x142>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
	
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     68e:	fa 8c       	ldd	r15, Y+26	; 0x1a
     690:	ef 2d       	mov	r30, r15
     692:	ff 0c       	add	r15, r15
     694:	ff 0b       	sbc	r31, r31
     696:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <currentDriveDirection.2024>
     69a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <currentDriveDirection.2024+0x1>
     69e:	e2 17       	cp	r30, r18
     6a0:	f3 07       	cpc	r31, r19
     6a2:	59 f1       	breq	.+86     	; 0x6fa <motorDriver+0x1ae>
     6a4:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     6a8:	0a 8b       	std	Y+18, r16	; 0x12
     6aa:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     6ae:	1b 8b       	std	Y+19, r17	; 0x13
     6b0:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     6b4:	2c 8b       	std	Y+20, r18	; 0x14
     6b6:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     6ba:	3d 8b       	std	Y+21, r19	; 0x15
     6bc:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     6c0:	4e 8b       	std	Y+22, r20	; 0x16
     6c2:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     6c6:	5f 8b       	std	Y+23, r21	; 0x17
     6c8:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     6cc:	68 8f       	std	Y+24, r22	; 0x18
     6ce:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     6d2:	79 8f       	std	Y+25, r23	; 0x19
     6d4:	20 2f       	mov	r18, r16
     6d6:	31 2f       	mov	r19, r17
     6d8:	4c 89       	ldd	r20, Y+20	; 0x14
     6da:	5d 89       	ldd	r21, Y+21	; 0x15
     6dc:	6e 89       	ldd	r22, Y+22	; 0x16
     6de:	7f 89       	ldd	r23, Y+23	; 0x17
     6e0:	88 8d       	ldd	r24, Y+24	; 0x18
     6e2:	99 8d       	ldd	r25, Y+25	; 0x19
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	0e 94 2e 0a 	call	0x145c	; 0x145c <__cmpdi2_s8>
     6ea:	29 f4       	brne	.+10     	; 0x6f6 <motorDriver+0x1aa>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     6ec:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2024+0x1>
     6f0:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2024>
     6f4:	53 c0       	rjmp	.+166    	; 0x79c <motorDriver+0x250>
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     6fa:	7c 01       	movw	r14, r24
     6fc:	00 e0       	ldi	r16, 0x00	; 0
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	a9 01       	movw	r20, r18
     706:	8a 8b       	std	Y+18, r24	; 0x12
     708:	fb 8a       	std	Y+19, r15	; 0x13
     70a:	0c 8b       	std	Y+20, r16	; 0x14
     70c:	1d 8b       	std	Y+21, r17	; 0x15
     70e:	2e 8b       	std	Y+22, r18	; 0x16
     710:	3f 8b       	std	Y+23, r19	; 0x17
     712:	48 8f       	std	Y+24, r20	; 0x18
     714:	59 8f       	std	Y+25, r21	; 0x19
     716:	f0 90 70 00 	lds	r15, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     71a:	fa 8e       	std	Y+26, r15	; 0x1a
     71c:	00 91 71 00 	lds	r16, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     720:	0c a7       	std	Y+44, r16	; 0x2c
     722:	10 91 72 00 	lds	r17, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     726:	1d a7       	std	Y+45, r17	; 0x2d
     728:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     72c:	2e a7       	std	Y+46, r18	; 0x2e
     72e:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     732:	3f a7       	std	Y+47, r19	; 0x2f
     734:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     738:	48 ab       	std	Y+48, r20	; 0x30
     73a:	40 90 76 00 	lds	r4, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     73e:	50 90 77 00 	lds	r5, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     742:	2e 2d       	mov	r18, r14
     744:	3b 89       	ldd	r19, Y+19	; 0x13
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	af 2c       	mov	r10, r15
     754:	b0 2e       	mov	r11, r16
     756:	c1 2e       	mov	r12, r17
     758:	de a4       	ldd	r13, Y+46	; 0x2e
     75a:	ef a4       	ldd	r14, Y+47	; 0x2f
     75c:	f8 a8       	ldd	r15, Y+48	; 0x30
     75e:	04 2d       	mov	r16, r4
     760:	15 2d       	mov	r17, r5
     762:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subdi3>
     766:	2b 8f       	std	Y+27, r18	; 0x1b
     768:	39 ab       	std	Y+49, r19	; 0x31
     76a:	a4 2e       	mov	r10, r20
     76c:	b5 2e       	mov	r11, r21
     76e:	06 2f       	mov	r16, r22
     770:	17 2f       	mov	r17, r23
     772:	8a ab       	std	Y+50, r24	; 0x32
     774:	9b ab       	std	Y+51, r25	; 0x33
     776:	0e 94 08 08 	call	0x1010	; 0x1010 <__floatdisf>
     77a:	6b 01       	movw	r12, r22
     77c:	7c 01       	movw	r14, r24
     77e:	a7 01       	movw	r20, r14
     780:	96 01       	movw	r18, r12
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     78a:	0e 94 5d 09 	call	0x12ba	; 0x12ba <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     78e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fixunssfsi>
     792:	60 3d       	cpi	r22, 0xD0	; 208
     794:	77 40       	sbci	r23, 0x07	; 7
     796:	81 05       	cpc	r24, r1
     798:	91 05       	cpc	r25, r1
     79a:	c8 f4       	brcc	.+50     	; 0x7ce <motorDriver+0x282>
		currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     79c:	6a 89       	ldd	r22, Y+18	; 0x12
     79e:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <currentDriveSpeed.2027>
     7a2:	7b 89       	ldd	r23, Y+19	; 0x13
     7a4:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <currentDriveSpeed.2027+0x1>
     7a8:	8c 89       	ldd	r24, Y+20	; 0x14
     7aa:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <currentDriveSpeed.2027+0x2>
     7ae:	9d 89       	ldd	r25, Y+21	; 0x15
     7b0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <currentDriveSpeed.2027+0x3>
     7b4:	ae 89       	ldd	r26, Y+22	; 0x16
     7b6:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <currentDriveSpeed.2027+0x4>
     7ba:	ef 88       	ldd	r14, Y+23	; 0x17
     7bc:	e0 92 75 00 	sts	0x0075, r14	; 0x800075 <currentDriveSpeed.2027+0x5>
     7c0:	f8 8c       	ldd	r15, Y+24	; 0x18
     7c2:	f0 92 76 00 	sts	0x0076, r15	; 0x800076 <currentDriveSpeed.2027+0x6>
     7c6:	09 8d       	ldd	r16, Y+25	; 0x19
     7c8:	00 93 77 00 	sts	0x0077, r16	; 0x800077 <currentDriveSpeed.2027+0x7>
     7cc:	10 c1       	rjmp	.+544    	; 0x9ee <__stack+0x18f>
	}else{																			//If the difference is more than 2000
		if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     7ce:	2b 8d       	ldd	r18, Y+27	; 0x1b
     7d0:	39 a9       	ldd	r19, Y+49	; 0x31
     7d2:	4a 2d       	mov	r20, r10
     7d4:	5b 2d       	mov	r21, r11
     7d6:	60 2f       	mov	r22, r16
     7d8:	71 2f       	mov	r23, r17
     7da:	8a a9       	ldd	r24, Y+50	; 0x32
     7dc:	9b a9       	ldd	r25, Y+51	; 0x33
     7de:	a0 e0       	ldi	r26, 0x00	; 0
     7e0:	0e 94 2e 0a 	call	0x145c	; 0x145c <__cmpdi2_s8>
     7e4:	0c f0       	brlt	.+2      	; 0x7e8 <motorDriver+0x29c>
     7e6:	71 c0       	rjmp	.+226    	; 0x8ca <__stack+0x6b>
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     7e8:	51 01       	movw	r10, r2
     7ea:	c1 2c       	mov	r12, r1
     7ec:	d1 2c       	mov	r13, r1
     7ee:	e1 2c       	mov	r14, r1
     7f0:	f1 2c       	mov	r15, r1
     7f2:	87 01       	movw	r16, r14
     7f4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     7f6:	3c a5       	ldd	r19, Y+44	; 0x2c
     7f8:	4d a5       	ldd	r20, Y+45	; 0x2d
     7fa:	5e a5       	ldd	r21, Y+46	; 0x2e
     7fc:	6f a5       	ldd	r22, Y+47	; 0x2f
     7fe:	78 a9       	ldd	r23, Y+48	; 0x30
     800:	84 2d       	mov	r24, r4
     802:	95 2d       	mov	r25, r5
     804:	2b 8e       	std	Y+27, r2	; 0x1b
     806:	bc 8e       	std	Y+28, r11	; 0x1c
     808:	cd 8e       	std	Y+29, r12	; 0x1d
     80a:	de 8e       	std	Y+30, r13	; 0x1e
     80c:	ef 8e       	std	Y+31, r14	; 0x1f
     80e:	f8 a2       	std	Y+32, r15	; 0x20
     810:	09 a3       	std	Y+33, r16	; 0x21
     812:	1a a3       	std	Y+34, r17	; 0x22
     814:	c1 2c       	mov	r12, r1
     816:	d1 2c       	mov	r13, r1
     818:	e1 2c       	mov	r14, r1
     81a:	f1 2c       	mov	r15, r1
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpdi2>
     824:	cc f4       	brge	.+50     	; 0x858 <motorDriver+0x30c>
				currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     826:	1a 89       	ldd	r17, Y+18	; 0x12
     828:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <currentDriveSpeed.2027>
     82c:	2b 89       	ldd	r18, Y+19	; 0x13
     82e:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <currentDriveSpeed.2027+0x1>
     832:	3c 89       	ldd	r19, Y+20	; 0x14
     834:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <currentDriveSpeed.2027+0x2>
     838:	4d 89       	ldd	r20, Y+21	; 0x15
     83a:	40 93 73 00 	sts	0x0073, r20	; 0x800073 <currentDriveSpeed.2027+0x3>
     83e:	5e 89       	ldd	r21, Y+22	; 0x16
     840:	50 93 74 00 	sts	0x0074, r21	; 0x800074 <currentDriveSpeed.2027+0x4>
     844:	6f 89       	ldd	r22, Y+23	; 0x17
     846:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <currentDriveSpeed.2027+0x5>
     84a:	78 8d       	ldd	r23, Y+24	; 0x18
     84c:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <currentDriveSpeed.2027+0x6>
     850:	89 8d       	ldd	r24, Y+25	; 0x19
     852:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <currentDriveSpeed.2027+0x7>
     856:	cb c0       	rjmp	.+406    	; 0x9ee <__stack+0x18f>
			}else{																			//If the current speed is higher than 5000
				if(rp6Data.accelerationRate > 1500){rp6Data.accelerationRate = 1500;}
				currentDriveSpeed -= rp6Data.accelerationRate;				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     858:	8c a1       	ldd	r24, Y+36	; 0x24
     85a:	9d a1       	ldd	r25, Y+37	; 0x25
     85c:	8d 3d       	cpi	r24, 0xDD	; 221
     85e:	a5 e0       	ldi	r26, 0x05	; 5
     860:	9a 07       	cpc	r25, r26
     862:	10 f0       	brcs	.+4      	; 0x868 <__stack+0x9>
     864:	8c ed       	ldi	r24, 0xDC	; 220
     866:	95 e0       	ldi	r25, 0x05	; 5
     868:	7c 01       	movw	r14, r24
     86a:	00 e0       	ldi	r16, 0x00	; 0
     86c:	10 e0       	ldi	r17, 0x00	; 0
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	a9 01       	movw	r20, r18
     874:	8a 8b       	std	Y+18, r24	; 0x12
     876:	fb 8a       	std	Y+19, r15	; 0x13
     878:	0c 8b       	std	Y+20, r16	; 0x14
     87a:	1d 8b       	std	Y+21, r17	; 0x15
     87c:	2e 8b       	std	Y+22, r18	; 0x16
     87e:	3f 8b       	std	Y+23, r19	; 0x17
     880:	48 8f       	std	Y+24, r20	; 0x18
     882:	59 8f       	std	Y+25, r21	; 0x19
     884:	2a 8d       	ldd	r18, Y+26	; 0x1a
     886:	3c a5       	ldd	r19, Y+44	; 0x2c
     888:	4d a5       	ldd	r20, Y+45	; 0x2d
     88a:	5e a5       	ldd	r21, Y+46	; 0x2e
     88c:	6f a5       	ldd	r22, Y+47	; 0x2f
     88e:	78 a9       	ldd	r23, Y+48	; 0x30
     890:	84 2d       	mov	r24, r4
     892:	95 2d       	mov	r25, r5
     894:	ae 2c       	mov	r10, r14
     896:	bf 2c       	mov	r11, r15
     898:	c1 2c       	mov	r12, r1
     89a:	d1 2c       	mov	r13, r1
     89c:	e1 2c       	mov	r14, r1
     89e:	f1 2c       	mov	r15, r1
     8a0:	00 e0       	ldi	r16, 0x00	; 0
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subdi3>
     8a8:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     8ac:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     8b0:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     8b4:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     8b8:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     8bc:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     8c0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     8c4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     8c8:	92 c0       	rjmp	.+292    	; 0x9ee <__stack+0x18f>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     8ca:	81 01       	movw	r16, r2
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	ba 01       	movw	r22, r20
     8d6:	2b 8e       	std	Y+27, r2	; 0x1b
     8d8:	1c 8f       	std	Y+28, r17	; 0x1c
     8da:	2d 8f       	std	Y+29, r18	; 0x1d
     8dc:	3e 8f       	std	Y+30, r19	; 0x1e
     8de:	4f 8f       	std	Y+31, r20	; 0x1f
     8e0:	58 a3       	std	Y+32, r21	; 0x20
     8e2:	69 a3       	std	Y+33, r22	; 0x21
     8e4:	7a a3       	std	Y+34, r23	; 0x22
     8e6:	2a 8d       	ldd	r18, Y+26	; 0x1a
     8e8:	3c a5       	ldd	r19, Y+44	; 0x2c
     8ea:	4d a5       	ldd	r20, Y+45	; 0x2d
     8ec:	5e a5       	ldd	r21, Y+46	; 0x2e
     8ee:	6f a5       	ldd	r22, Y+47	; 0x2f
     8f0:	78 a9       	ldd	r23, Y+48	; 0x30
     8f2:	84 2d       	mov	r24, r4
     8f4:	95 2d       	mov	r25, r5
     8f6:	a2 2c       	mov	r10, r2
     8f8:	b1 2e       	mov	r11, r17
     8fa:	c1 2c       	mov	r12, r1
     8fc:	d1 2c       	mov	r13, r1
     8fe:	e1 2c       	mov	r14, r1
     900:	f1 2c       	mov	r15, r1
     902:	00 e0       	ldi	r16, 0x00	; 0
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpdi2>
     90a:	9c f4       	brge	.+38     	; 0x932 <__stack+0xd3>
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     90c:	0e 94 07 0a 	call	0x140e	; 0x140e <__adddi3>
     910:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     914:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     918:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     91c:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     920:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     924:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     928:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     92c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     930:	5e c0       	rjmp	.+188    	; 0x9ee <__stack+0x18f>
			}else{																			//If we are at a speed higher than the threshold
				if(rp6Data.accelerationRate > 1500){rp6Data.accelerationRate = 1500;}
				currentDriveSpeed += rp6Data.accelerationRate;				//Accelerate with a percentage of the current speed, determined by accelerationRate
     932:	4c a1       	ldd	r20, Y+36	; 0x24
     934:	5d a1       	ldd	r21, Y+37	; 0x25
     936:	4d 3d       	cpi	r20, 0xDD	; 221
     938:	15 e0       	ldi	r17, 0x05	; 5
     93a:	51 07       	cpc	r21, r17
     93c:	10 f0       	brcs	.+4      	; 0x942 <__stack+0xe3>
     93e:	4c ed       	ldi	r20, 0xDC	; 220
     940:	55 e0       	ldi	r21, 0x05	; 5
     942:	24 2f       	mov	r18, r20
     944:	35 2f       	mov	r19, r21
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	aa 8c       	ldd	r10, Y+26	; 0x1a
     954:	bc a4       	ldd	r11, Y+44	; 0x2c
     956:	cd a4       	ldd	r12, Y+45	; 0x2d
     958:	de a4       	ldd	r13, Y+46	; 0x2e
     95a:	ef a4       	ldd	r14, Y+47	; 0x2f
     95c:	f8 a8       	ldd	r15, Y+48	; 0x30
     95e:	04 2d       	mov	r16, r4
     960:	15 2d       	mov	r17, r5
     962:	0e 94 07 0a 	call	0x140e	; 0x140e <__adddi3>
     966:	2a 8f       	std	Y+26, r18	; 0x1a
     968:	3c a3       	std	Y+36, r19	; 0x24
     96a:	44 2e       	mov	r4, r20
     96c:	55 2e       	mov	r5, r21
     96e:	b6 2f       	mov	r27, r22
     970:	a7 2f       	mov	r26, r23
     972:	f8 2f       	mov	r31, r24
     974:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     976:	2a 89       	ldd	r18, Y+18	; 0x12
     978:	3b 89       	ldd	r19, Y+19	; 0x13
     97a:	4c 89       	ldd	r20, Y+20	; 0x14
     97c:	5d 89       	ldd	r21, Y+21	; 0x15
     97e:	6e 89       	ldd	r22, Y+22	; 0x16
     980:	7f 89       	ldd	r23, Y+23	; 0x17
     982:	88 8d       	ldd	r24, Y+24	; 0x18
     984:	99 8d       	ldd	r25, Y+25	; 0x19
     986:	aa 8c       	ldd	r10, Y+26	; 0x1a
     988:	bc a0       	ldd	r11, Y+36	; 0x24
     98a:	c4 2c       	mov	r12, r4
     98c:	d5 2c       	mov	r13, r5
     98e:	eb 2e       	mov	r14, r27
     990:	fa 2e       	mov	r15, r26
     992:	0f 2f       	mov	r16, r31
     994:	1e 2f       	mov	r17, r30
     996:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpdi2>
     99a:	8c f0       	brlt	.+34     	; 0x9be <__stack+0x15f>
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				if(rp6Data.accelerationRate > 1500){rp6Data.accelerationRate = 1500;}
				currentDriveSpeed += rp6Data.accelerationRate;				//Accelerate with a percentage of the current speed, determined by accelerationRate
     99c:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.2027>
     9a0:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.2027+0x1>
     9a4:	40 92 72 00 	sts	0x0072, r4	; 0x800072 <currentDriveSpeed.2027+0x2>
     9a8:	50 92 73 00 	sts	0x0073, r5	; 0x800073 <currentDriveSpeed.2027+0x3>
     9ac:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2027+0x4>
     9b0:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.2027+0x5>
     9b4:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.2027+0x6>
     9b8:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.2027+0x7>
     9bc:	18 c0       	rjmp	.+48     	; 0x9ee <__stack+0x18f>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     9be:	3a 89       	ldd	r19, Y+18	; 0x12
     9c0:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.2027>
     9c4:	4b 89       	ldd	r20, Y+19	; 0x13
     9c6:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <currentDriveSpeed.2027+0x1>
     9ca:	5c 89       	ldd	r21, Y+20	; 0x14
     9cc:	50 93 72 00 	sts	0x0072, r21	; 0x800072 <currentDriveSpeed.2027+0x2>
     9d0:	6d 89       	ldd	r22, Y+21	; 0x15
     9d2:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <currentDriveSpeed.2027+0x3>
     9d6:	7e 89       	ldd	r23, Y+22	; 0x16
     9d8:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <currentDriveSpeed.2027+0x4>
     9dc:	8f 89       	ldd	r24, Y+23	; 0x17
     9de:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <currentDriveSpeed.2027+0x5>
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <currentDriveSpeed.2027+0x6>
     9e8:	a9 8d       	ldd	r26, Y+25	; 0x19
     9ea:	a0 93 77 00 	sts	0x0077, r26	; 0x800077 <currentDriveSpeed.2027+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     9ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2024>
     9f2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2024+0x1>
     9f6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2028+0x1>
     9fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2028>
	rightMotorDirection = currentDriveDirection;
     9fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     a02:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     a06:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     a0a:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     a0e:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     a12:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     a16:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     a1a:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     a1e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     a22:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     a26:	c2 2e       	mov	r12, r18
     a28:	d3 2e       	mov	r13, r19
     a2a:	e4 2e       	mov	r14, r20
     a2c:	f5 2e       	mov	r15, r21
     a2e:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.2030>
     a32:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.2030+0x1>
     a36:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.2030+0x2>
     a3a:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.2030+0x3>
	rightMotorSpeed = currentDriveSpeed;
     a3e:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.2031>
     a42:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.2031+0x1>
     a46:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.2031+0x2>
     a4a:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.2031+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     a4e:	0b a1       	ldd	r16, Y+35	; 0x23
     a50:	e0 2f       	mov	r30, r16
     a52:	00 0f       	add	r16, r16
     a54:	ff 0b       	sbc	r31, r31
     a56:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end>
     a5a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x1>
     a5e:	ea 17       	cp	r30, r26
     a60:	fb 07       	cpc	r31, r27
     a62:	81 f1       	breq	.+96     	; 0xac4 <__stack+0x265>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     a64:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
     a68:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     a6c:	ef 2b       	or	r30, r31
     a6e:	29 f4       	brne	.+10     	; 0xa7a <__stack+0x21b>
			enableMotorEncoder(1);											//Enable the encoders
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 96 02 	call	0x52c	; 0x52c <enableMotorEncoder>
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <__stack+0x223>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 96 02 	call	0x52c	; 0x52c <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     a82:	27 2d       	mov	r18, r7
     a84:	38 2d       	mov	r19, r8
     a86:	49 2d       	mov	r20, r9
     a88:	56 2d       	mov	r21, r6
     a8a:	6e a1       	ldd	r22, Y+38	; 0x26
     a8c:	7f a1       	ldd	r23, Y+39	; 0x27
     a8e:	88 a5       	ldd	r24, Y+40	; 0x28
     a90:	99 a5       	ldd	r25, Y+41	; 0x29
     a92:	20 56       	subi	r18, 0x60	; 96
     a94:	39 47       	sbci	r19, 0x79	; 121
     a96:	4e 4f       	sbci	r20, 0xFE	; 254
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	6f 4f       	sbci	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	8f 4f       	sbci	r24, 0xFF	; 255
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2023>
     aa6:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2023+0x1>
     aaa:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2023+0x2>
     aae:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2023+0x3>
     ab2:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2023+0x4>
     ab6:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2023+0x5>
     aba:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2023+0x6>
     abe:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2023+0x7>
     ac2:	c7 c0       	rjmp	.+398    	; 0xc52 <__stack+0x3f3>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     ac4:	ef 3f       	cpi	r30, 0xFF	; 255
     ac6:	1f ef       	ldi	r17, 0xFF	; 255
     ac8:	f1 07       	cpc	r31, r17
     aca:	09 f0       	breq	.+2      	; 0xace <__stack+0x26f>
     acc:	41 c0       	rjmp	.+130    	; 0xb50 <__stack+0x2f1>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	0e 94 2e 0a 	call	0x145c	; 0x145c <__cmpdi2_s8>
     ad4:	19 f5       	brne	.+70     	; 0xb1c <__stack+0x2bd>
			leftMotorDirection = 0;											//Turn the left motor backwards
     ad6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2028+0x1>
     ada:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2028>
			rightMotorDirection = 1;										//Turn the right motor forwards
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     ae6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     aea:	8a a5       	ldd	r24, Y+42	; 0x2a
     aec:	9b a5       	ldd	r25, Y+43	; 0x2b
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	82 0d       	add	r24, r2
     af4:	93 1d       	adc	r25, r3
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     afe:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     b02:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     b06:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     b0a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     b0e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     b12:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     b16:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
     b1a:	9b c0       	rjmp	.+310    	; 0xc52 <__stack+0x3f3>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = rp6Data.driveSpeedThreshold;							//Set the left motor to minimal
     b1c:	c1 01       	movw	r24, r2
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     b26:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     b2a:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     b2e:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed += rp6Data.turnRate;									//Increase the right motor with the turn rate
     b32:	2a a5       	ldd	r18, Y+42	; 0x2a
     b34:	3b a5       	ldd	r19, Y+43	; 0x2b
     b36:	c2 0e       	add	r12, r18
     b38:	d3 1e       	adc	r13, r19
     b3a:	e1 1c       	adc	r14, r1
     b3c:	f1 1c       	adc	r15, r1
     b3e:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2031>
     b42:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2031+0x1>
     b46:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2031+0x2>
     b4a:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2031+0x3>
     b4e:	81 c0       	rjmp	.+258    	; 0xc52 <__stack+0x3f3>
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     b50:	30 97       	sbiw	r30, 0x00	; 0
     b52:	e1 f5       	brne	.+120    	; 0xbcc <__stack+0x36d>
		if(arduinoData.motorEncoderLVal != arduinoData.motorEncoderRVal){
     b54:	e2 e8       	ldi	r30, 0x82	; 130
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	00 81       	ld	r16, Z
     b5a:	11 81       	ldd	r17, Z+1	; 0x01
     b5c:	a2 80       	ldd	r10, Z+2	; 0x02
     b5e:	b3 80       	ldd	r11, Z+3	; 0x03
     b60:	0a 15       	cp	r16, r10
     b62:	1b 05       	cpc	r17, r11
     b64:	09 f4       	brne	.+2      	; 0xb68 <__stack+0x309>
     b66:	75 c0       	rjmp	.+234    	; 0xc52 <__stack+0x3f3>
			if(arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatunsisf>
     b70:	6b 01       	movw	r12, r22
     b72:	7c 01       	movw	r14, r24
     b74:	b8 01       	movw	r22, r16
     b76:	6a 19       	sub	r22, r10
     b78:	7b 09       	sbc	r23, r11
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatunsisf>
     b82:	4b 01       	movw	r8, r22
     b84:	5c 01       	movw	r10, r24
     b86:	a5 01       	movw	r20, r10
     b88:	94 01       	movw	r18, r8
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     b92:	0e 94 5d 09 	call	0x12ba	; 0x12ba <sqrt>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	48 ec       	ldi	r20, 0xC8	; 200
     ba8:	52 e4       	ldi	r21, 0x42	; 66
     baa:	0e 94 67 07 	call	0xece	; 0xece <__divsf3>
     bae:	a7 01       	movw	r20, r14
     bb0:	96 01       	movw	r18, r12
     bb2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     bb6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fixunssfsi>
     bba:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.2031>
     bbe:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.2031+0x1>
     bc2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.2031+0x2>
     bc6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.2031+0x3>
     bca:	43 c0       	rjmp	.+134    	; 0xc52 <__stack+0x3f3>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     bcc:	31 97       	sbiw	r30, 0x01	; 1
     bce:	09 f0       	breq	.+2      	; 0xbd2 <__stack+0x373>
     bd0:	40 c0       	rjmp	.+128    	; 0xc52 <__stack+0x3f3>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	0e 94 2e 0a 	call	0x145c	; 0x145c <__cmpdi2_s8>
     bd8:	19 f5       	brne	.+70     	; 0xc20 <__stack+0x3c1>
			leftMotorDirection = 1;											//Left motor forward
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2028+0x1>
     be2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2028>
			rightMotorDirection = 0;										//Right motor backward
     be6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     bea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     bee:	8a a5       	ldd	r24, Y+42	; 0x2a
     bf0:	9b a5       	ldd	r25, Y+43	; 0x2b
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	82 0d       	add	r24, r2
     bf8:	93 1d       	adc	r25, r3
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     c02:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     c06:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     c0a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     c0e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     c12:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     c16:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     c1a:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
     c1e:	19 c0       	rjmp	.+50     	; 0xc52 <__stack+0x3f3>
			}else{														//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed += rp6Data.turnRate;										//Increase the left motor with the set turn rate
     c20:	4a a5       	ldd	r20, Y+42	; 0x2a
     c22:	5b a5       	ldd	r21, Y+43	; 0x2b
     c24:	c4 0e       	add	r12, r20
     c26:	d5 1e       	adc	r13, r21
     c28:	e1 1c       	adc	r14, r1
     c2a:	f1 1c       	adc	r15, r1
     c2c:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.2030>
     c30:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.2030+0x1>
     c34:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.2030+0x2>
     c38:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold;							//Set right motor to minimal
     c3c:	c1 01       	movw	r24, r2
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     c46:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     c4a:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     c4e:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     c52:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     c56:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     c5a:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2031+0x2>
     c5e:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2031+0x3>
     c62:	d7 01       	movw	r26, r14
     c64:	c6 01       	movw	r24, r12
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	aa 1f       	adc	r26, r26
     c6c:	bb 1f       	adc	r27, r27
     c6e:	8c 0d       	add	r24, r12
     c70:	9d 1d       	adc	r25, r13
     c72:	ae 1d       	adc	r26, r14
     c74:	bf 1d       	adc	r27, r15
     c76:	ac 01       	movw	r20, r24
     c78:	bd 01       	movw	r22, r26
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	66 1f       	adc	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	44 0f       	add	r20, r20
     c84:	55 1f       	adc	r21, r21
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	8c 01       	movw	r16, r24
     c8c:	9d 01       	movw	r18, r26
     c8e:	04 0f       	add	r16, r20
     c90:	15 1f       	adc	r17, r21
     c92:	26 1f       	adc	r18, r22
     c94:	37 1f       	adc	r19, r23
     c96:	c9 01       	movw	r24, r18
     c98:	b8 01       	movw	r22, r16
     c9a:	24 e6       	ldi	r18, 0x64	; 100
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
     ca6:	c2 0e       	add	r12, r18
     ca8:	d3 1e       	adc	r13, r19
     caa:	e4 1e       	adc	r14, r20
     cac:	f5 1e       	adc	r15, r21
     cae:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2031>
     cb2:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2031+0x1>
     cb6:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2031+0x2>
     cba:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2031+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     cbe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     cc2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     cc6:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2030+0x2>
     cca:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2030+0x3>
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	94 46       	sbci	r25, 0x64	; 100
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	60 f0       	brcs	.+24     	; 0xcf0 <__stack+0x491>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	94 e6       	ldi	r25, 0x64	; 100
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     ce4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     ce8:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     cec:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     cf0:	21 e3       	ldi	r18, 0x31	; 49
     cf2:	c2 16       	cp	r12, r18
     cf4:	25 e7       	ldi	r18, 0x75	; 117
     cf6:	d2 06       	cpc	r13, r18
     cf8:	e1 04       	cpc	r14, r1
     cfa:	f1 04       	cpc	r15, r1
     cfc:	60 f0       	brcs	.+24     	; 0xd16 <__stack+0x4b7>
		rightMotorSpeed = 30000;						//Set it back to its max
     cfe:	80 e3       	ldi	r24, 0x30	; 48
     d00:	95 e7       	ldi	r25, 0x75	; 117
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     d0a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     d0e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     d12:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     d16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2028>
     d1a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2028+0x1>
     d1e:	89 2b       	or	r24, r25
     d20:	11 f0       	breq	.+4      	; 0xd26 <__stack+0x4c7>
		PORTC &= 0b11111011;
     d22:	aa 98       	cbi	0x15, 2	; 21
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <__stack+0x4c9>
	}else{
		PORTC |= 0b00000100;
     d26:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     d28:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     d2c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     d30:	89 2b       	or	r24, r25
     d32:	11 f0       	breq	.+4      	; 0xd38 <__stack+0x4d9>
		PORTC &= 0b11110111;
     d34:	ab 98       	cbi	0x15, 3	; 21
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <__stack+0x4db>
	}else{
		PORTC |= 0b00001000;
     d38:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     d3a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     d3e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     d42:	9b bd       	out	0x2b, r25	; 43
     d44:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     d46:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     d4a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     d4e:	99 bd       	out	0x29, r25	; 41
     d50:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	e3 96       	adiw	r28, 0x33	; 51
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	df 90       	pop	r13
     d70:	cf 90       	pop	r12
     d72:	bf 90       	pop	r11
     d74:	af 90       	pop	r10
     d76:	9f 90       	pop	r9
     d78:	8f 90       	pop	r8
     d7a:	7f 90       	pop	r7
     d7c:	6f 90       	pop	r6
     d7e:	5f 90       	pop	r5
     d80:	4f 90       	pop	r4
     d82:	3f 90       	pop	r3
     d84:	2f 90       	pop	r2
     d86:	08 95       	ret

00000d88 <main>:
	}
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     d88:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     d8a:	0e 94 50 00 	call	0xa0	; 0xa0 <init_micros>
	
	init_motor();
     d8e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <init_motor>
	init_LED();
     d92:	0e 94 49 00 	call	0x92	; 0x92 <init_LED>
	
	init_rp6Data();
     d96:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_rp6Data>
	init_arduinoData();
     d9a:	0e 94 18 01 	call	0x230	; 0x230 <init_arduinoData>
	
	init_TWI();
     d9e:	0e 94 ed 00 	call	0x1da	; 0x1da <init_TWI>
	
	clearSendData();
     da2:	0e 94 1f 01 	call	0x23e	; 0x23e <clearSendData>
	clearReceiveData();
     da6:	0e 94 28 01 	call	0x250	; 0x250 <clearReceiveData>
	
	while(1){
		motorDriver(rp6Data);
     daa:	80 90 a0 00 	lds	r8, 0x00A0	; 0x8000a0 <rp6Data>
     dae:	90 90 a1 00 	lds	r9, 0x00A1	; 0x8000a1 <rp6Data+0x1>
     db2:	a0 90 a2 00 	lds	r10, 0x00A2	; 0x8000a2 <rp6Data+0x2>
     db6:	b0 90 a3 00 	lds	r11, 0x00A3	; 0x8000a3 <rp6Data+0x3>
     dba:	c0 90 a4 00 	lds	r12, 0x00A4	; 0x8000a4 <rp6Data+0x4>
     dbe:	d0 90 a5 00 	lds	r13, 0x00A5	; 0x8000a5 <rp6Data+0x5>
     dc2:	e0 90 a6 00 	lds	r14, 0x00A6	; 0x8000a6 <rp6Data+0x6>
     dc6:	f0 90 a7 00 	lds	r15, 0x00A7	; 0x8000a7 <rp6Data+0x7>
     dca:	00 91 a8 00 	lds	r16, 0x00A8	; 0x8000a8 <rp6Data+0x8>
     dce:	10 91 a9 00 	lds	r17, 0x00A9	; 0x8000a9 <rp6Data+0x9>
     dd2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <rp6Data+0xa>
     dd6:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <rp6Data+0xb>
     dda:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <rp6Data+0xc>
     dde:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <rp6Data+0xd>
     de2:	60 91 ae 00 	lds	r22, 0x00AE	; 0x8000ae <rp6Data+0xe>
     de6:	70 91 af 00 	lds	r23, 0x00AF	; 0x8000af <rp6Data+0xf>
     dea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <rp6Data+0x10>
     dee:	0e 94 a6 02 	call	0x54c	; 0x54c <motorDriver>
     df2:	db cf       	rjmp	.-74     	; 0xdaa <main+0x22>

00000df4 <__subsf3>:
     df4:	50 58       	subi	r21, 0x80	; 128

00000df6 <__addsf3>:
     df6:	bb 27       	eor	r27, r27
     df8:	aa 27       	eor	r26, r26
     dfa:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3x>
     dfe:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_round>
     e02:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fp_pscA>
     e06:	38 f0       	brcs	.+14     	; 0xe16 <__addsf3+0x20>
     e08:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_pscB>
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <__addsf3+0x20>
     e0e:	39 f4       	brne	.+14     	; 0xe1e <__addsf3+0x28>
     e10:	9f 3f       	cpi	r25, 0xFF	; 255
     e12:	19 f4       	brne	.+6      	; 0xe1a <__addsf3+0x24>
     e14:	26 f4       	brtc	.+8      	; 0xe1e <__addsf3+0x28>
     e16:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>
     e1a:	0e f4       	brtc	.+2      	; 0xe1e <__addsf3+0x28>
     e1c:	e0 95       	com	r30
     e1e:	e7 fb       	bst	r30, 7
     e20:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>

00000e24 <__addsf3x>:
     e24:	e9 2f       	mov	r30, r25
     e26:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_split3>
     e2a:	58 f3       	brcs	.-42     	; 0xe02 <__addsf3+0xc>
     e2c:	ba 17       	cp	r27, r26
     e2e:	62 07       	cpc	r22, r18
     e30:	73 07       	cpc	r23, r19
     e32:	84 07       	cpc	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	20 f0       	brcs	.+8      	; 0xe40 <__addsf3x+0x1c>
     e38:	79 f4       	brne	.+30     	; 0xe58 <__addsf3x+0x34>
     e3a:	a6 f5       	brtc	.+104    	; 0xea4 <__addsf3x+0x80>
     e3c:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_zero>
     e40:	0e f4       	brtc	.+2      	; 0xe44 <__addsf3x+0x20>
     e42:	e0 95       	com	r30
     e44:	0b 2e       	mov	r0, r27
     e46:	ba 2f       	mov	r27, r26
     e48:	a0 2d       	mov	r26, r0
     e4a:	0b 01       	movw	r0, r22
     e4c:	b9 01       	movw	r22, r18
     e4e:	90 01       	movw	r18, r0
     e50:	0c 01       	movw	r0, r24
     e52:	ca 01       	movw	r24, r20
     e54:	a0 01       	movw	r20, r0
     e56:	11 24       	eor	r1, r1
     e58:	ff 27       	eor	r31, r31
     e5a:	59 1b       	sub	r21, r25
     e5c:	99 f0       	breq	.+38     	; 0xe84 <__addsf3x+0x60>
     e5e:	59 3f       	cpi	r21, 0xF9	; 249
     e60:	50 f4       	brcc	.+20     	; 0xe76 <__addsf3x+0x52>
     e62:	50 3e       	cpi	r21, 0xE0	; 224
     e64:	68 f1       	brcs	.+90     	; 0xec0 <__addsf3x+0x9c>
     e66:	1a 16       	cp	r1, r26
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	a2 2f       	mov	r26, r18
     e6c:	23 2f       	mov	r18, r19
     e6e:	34 2f       	mov	r19, r20
     e70:	44 27       	eor	r20, r20
     e72:	58 5f       	subi	r21, 0xF8	; 248
     e74:	f3 cf       	rjmp	.-26     	; 0xe5c <__addsf3x+0x38>
     e76:	46 95       	lsr	r20
     e78:	37 95       	ror	r19
     e7a:	27 95       	ror	r18
     e7c:	a7 95       	ror	r26
     e7e:	f0 40       	sbci	r31, 0x00	; 0
     e80:	53 95       	inc	r21
     e82:	c9 f7       	brne	.-14     	; 0xe76 <__addsf3x+0x52>
     e84:	7e f4       	brtc	.+30     	; 0xea4 <__addsf3x+0x80>
     e86:	1f 16       	cp	r1, r31
     e88:	ba 0b       	sbc	r27, r26
     e8a:	62 0b       	sbc	r22, r18
     e8c:	73 0b       	sbc	r23, r19
     e8e:	84 0b       	sbc	r24, r20
     e90:	ba f0       	brmi	.+46     	; 0xec0 <__addsf3x+0x9c>
     e92:	91 50       	subi	r25, 0x01	; 1
     e94:	a1 f0       	breq	.+40     	; 0xebe <__addsf3x+0x9a>
     e96:	ff 0f       	add	r31, r31
     e98:	bb 1f       	adc	r27, r27
     e9a:	66 1f       	adc	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	c2 f7       	brpl	.-16     	; 0xe92 <__addsf3x+0x6e>
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <__addsf3x+0x9c>
     ea4:	ba 0f       	add	r27, r26
     ea6:	62 1f       	adc	r22, r18
     ea8:	73 1f       	adc	r23, r19
     eaa:	84 1f       	adc	r24, r20
     eac:	48 f4       	brcc	.+18     	; 0xec0 <__addsf3x+0x9c>
     eae:	87 95       	ror	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f7 95       	ror	r31
     eb8:	9e 3f       	cpi	r25, 0xFE	; 254
     eba:	08 f0       	brcs	.+2      	; 0xebe <__addsf3x+0x9a>
     ebc:	b0 cf       	rjmp	.-160    	; 0xe1e <__addsf3+0x28>
     ebe:	93 95       	inc	r25
     ec0:	88 0f       	add	r24, r24
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0xa2>
     ec4:	99 27       	eor	r25, r25
     ec6:	ee 0f       	add	r30, r30
     ec8:	97 95       	ror	r25
     eca:	87 95       	ror	r24
     ecc:	08 95       	ret

00000ece <__divsf3>:
     ece:	0e 94 7b 07 	call	0xef6	; 0xef6 <__divsf3x>
     ed2:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_round>
     ed6:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_pscB>
     eda:	58 f0       	brcs	.+22     	; 0xef2 <__divsf3+0x24>
     edc:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fp_pscA>
     ee0:	40 f0       	brcs	.+16     	; 0xef2 <__divsf3+0x24>
     ee2:	29 f4       	brne	.+10     	; 0xeee <__divsf3+0x20>
     ee4:	5f 3f       	cpi	r21, 0xFF	; 255
     ee6:	29 f0       	breq	.+10     	; 0xef2 <__divsf3+0x24>
     ee8:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
     eec:	51 11       	cpse	r21, r1
     eee:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>
     ef2:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>

00000ef6 <__divsf3x>:
     ef6:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_split3>
     efa:	68 f3       	brcs	.-38     	; 0xed6 <__divsf3+0x8>

00000efc <__divsf3_pse>:
     efc:	99 23       	and	r25, r25
     efe:	b1 f3       	breq	.-20     	; 0xeec <__divsf3+0x1e>
     f00:	55 23       	and	r21, r21
     f02:	91 f3       	breq	.-28     	; 0xee8 <__divsf3+0x1a>
     f04:	95 1b       	sub	r25, r21
     f06:	55 0b       	sbc	r21, r21
     f08:	bb 27       	eor	r27, r27
     f0a:	aa 27       	eor	r26, r26
     f0c:	62 17       	cp	r22, r18
     f0e:	73 07       	cpc	r23, r19
     f10:	84 07       	cpc	r24, r20
     f12:	38 f0       	brcs	.+14     	; 0xf22 <__divsf3_pse+0x26>
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	44 1f       	adc	r20, r20
     f1e:	aa 1f       	adc	r26, r26
     f20:	a9 f3       	breq	.-22     	; 0xf0c <__divsf3_pse+0x10>
     f22:	35 d0       	rcall	.+106    	; 0xf8e <__divsf3_pse+0x92>
     f24:	0e 2e       	mov	r0, r30
     f26:	3a f0       	brmi	.+14     	; 0xf36 <__divsf3_pse+0x3a>
     f28:	e0 e8       	ldi	r30, 0x80	; 128
     f2a:	32 d0       	rcall	.+100    	; 0xf90 <__divsf3_pse+0x94>
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	50 40       	sbci	r21, 0x00	; 0
     f30:	e6 95       	lsr	r30
     f32:	00 1c       	adc	r0, r0
     f34:	ca f7       	brpl	.-14     	; 0xf28 <__divsf3_pse+0x2c>
     f36:	2b d0       	rcall	.+86     	; 0xf8e <__divsf3_pse+0x92>
     f38:	fe 2f       	mov	r31, r30
     f3a:	29 d0       	rcall	.+82     	; 0xf8e <__divsf3_pse+0x92>
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	bb 1f       	adc	r27, r27
     f44:	26 17       	cp	r18, r22
     f46:	37 07       	cpc	r19, r23
     f48:	48 07       	cpc	r20, r24
     f4a:	ab 07       	cpc	r26, r27
     f4c:	b0 e8       	ldi	r27, 0x80	; 128
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__divsf3_pse+0x56>
     f50:	bb 0b       	sbc	r27, r27
     f52:	80 2d       	mov	r24, r0
     f54:	bf 01       	movw	r22, r30
     f56:	ff 27       	eor	r31, r31
     f58:	93 58       	subi	r25, 0x83	; 131
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	3a f0       	brmi	.+14     	; 0xf6c <__divsf3_pse+0x70>
     f5e:	9e 3f       	cpi	r25, 0xFE	; 254
     f60:	51 05       	cpc	r21, r1
     f62:	78 f0       	brcs	.+30     	; 0xf82 <__divsf3_pse+0x86>
     f64:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
     f68:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>
     f6c:	5f 3f       	cpi	r21, 0xFF	; 255
     f6e:	e4 f3       	brlt	.-8      	; 0xf68 <__divsf3_pse+0x6c>
     f70:	98 3e       	cpi	r25, 0xE8	; 232
     f72:	d4 f3       	brlt	.-12     	; 0xf68 <__divsf3_pse+0x6c>
     f74:	86 95       	lsr	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b7 95       	ror	r27
     f7c:	f7 95       	ror	r31
     f7e:	9f 5f       	subi	r25, 0xFF	; 255
     f80:	c9 f7       	brne	.-14     	; 0xf74 <__divsf3_pse+0x78>
     f82:	88 0f       	add	r24, r24
     f84:	91 1d       	adc	r25, r1
     f86:	96 95       	lsr	r25
     f88:	87 95       	ror	r24
     f8a:	97 f9       	bld	r25, 7
     f8c:	08 95       	ret
     f8e:	e1 e0       	ldi	r30, 0x01	; 1
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	bb 1f       	adc	r27, r27
     f98:	62 17       	cp	r22, r18
     f9a:	73 07       	cpc	r23, r19
     f9c:	84 07       	cpc	r24, r20
     f9e:	ba 07       	cpc	r27, r26
     fa0:	20 f0       	brcs	.+8      	; 0xfaa <__divsf3_pse+0xae>
     fa2:	62 1b       	sub	r22, r18
     fa4:	73 0b       	sbc	r23, r19
     fa6:	84 0b       	sbc	r24, r20
     fa8:	ba 0b       	sbc	r27, r26
     faa:	ee 1f       	adc	r30, r30
     fac:	88 f7       	brcc	.-30     	; 0xf90 <__divsf3_pse+0x94>
     fae:	e0 95       	com	r30
     fb0:	08 95       	ret

00000fb2 <__fixunssfsi>:
     fb2:	0e 94 c9 08 	call	0x1192	; 0x1192 <__fp_splitA>
     fb6:	88 f0       	brcs	.+34     	; 0xfda <__fixunssfsi+0x28>
     fb8:	9f 57       	subi	r25, 0x7F	; 127
     fba:	98 f0       	brcs	.+38     	; 0xfe2 <__fixunssfsi+0x30>
     fbc:	b9 2f       	mov	r27, r25
     fbe:	99 27       	eor	r25, r25
     fc0:	b7 51       	subi	r27, 0x17	; 23
     fc2:	b0 f0       	brcs	.+44     	; 0xff0 <__fixunssfsi+0x3e>
     fc4:	e1 f0       	breq	.+56     	; 0xffe <__fixunssfsi+0x4c>
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	1a f0       	brmi	.+6      	; 0xfd6 <__fixunssfsi+0x24>
     fd0:	ba 95       	dec	r27
     fd2:	c9 f7       	brne	.-14     	; 0xfc6 <__fixunssfsi+0x14>
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <__fixunssfsi+0x4c>
     fd6:	b1 30       	cpi	r27, 0x01	; 1
     fd8:	91 f0       	breq	.+36     	; 0xffe <__fixunssfsi+0x4c>
     fda:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_zero>
     fde:	b1 e0       	ldi	r27, 0x01	; 1
     fe0:	08 95       	ret
     fe2:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_zero>
     fe6:	67 2f       	mov	r22, r23
     fe8:	78 2f       	mov	r23, r24
     fea:	88 27       	eor	r24, r24
     fec:	b8 5f       	subi	r27, 0xF8	; 248
     fee:	39 f0       	breq	.+14     	; 0xffe <__fixunssfsi+0x4c>
     ff0:	b9 3f       	cpi	r27, 0xF9	; 249
     ff2:	cc f3       	brlt	.-14     	; 0xfe6 <__fixunssfsi+0x34>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b3 95       	inc	r27
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <__fixunssfsi+0x42>
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__fixunssfsi+0x5c>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__floatdisf>:
    1010:	97 fb       	bst	r25, 7
    1012:	16 f4       	brtc	.+4      	; 0x1018 <__floatdisf+0x8>
    1014:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_negdi>
    1018:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_di2sf>

0000101c <__floatunsisf>:
    101c:	e8 94       	clt
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <__floatsisf+0x12>

00001020 <__floatsisf>:
    1020:	97 fb       	bst	r25, 7
    1022:	3e f4       	brtc	.+14     	; 0x1032 <__floatsisf+0x12>
    1024:	90 95       	com	r25
    1026:	80 95       	com	r24
    1028:	70 95       	com	r23
    102a:	61 95       	neg	r22
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	99 23       	and	r25, r25
    1034:	a9 f0       	breq	.+42     	; 0x1060 <__floatsisf+0x40>
    1036:	f9 2f       	mov	r31, r25
    1038:	96 e9       	ldi	r25, 0x96	; 150
    103a:	bb 27       	eor	r27, r27
    103c:	93 95       	inc	r25
    103e:	f6 95       	lsr	r31
    1040:	87 95       	ror	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	b7 95       	ror	r27
    1048:	f1 11       	cpse	r31, r1
    104a:	f8 cf       	rjmp	.-16     	; 0x103c <__floatsisf+0x1c>
    104c:	fa f4       	brpl	.+62     	; 0x108c <__floatsisf+0x6c>
    104e:	bb 0f       	add	r27, r27
    1050:	11 f4       	brne	.+4      	; 0x1056 <__floatsisf+0x36>
    1052:	60 ff       	sbrs	r22, 0
    1054:	1b c0       	rjmp	.+54     	; 0x108c <__floatsisf+0x6c>
    1056:	6f 5f       	subi	r22, 0xFF	; 255
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	8f 4f       	sbci	r24, 0xFF	; 255
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	16 c0       	rjmp	.+44     	; 0x108c <__floatsisf+0x6c>
    1060:	88 23       	and	r24, r24
    1062:	11 f0       	breq	.+4      	; 0x1068 <__floatsisf+0x48>
    1064:	96 e9       	ldi	r25, 0x96	; 150
    1066:	11 c0       	rjmp	.+34     	; 0x108a <__floatsisf+0x6a>
    1068:	77 23       	and	r23, r23
    106a:	21 f0       	breq	.+8      	; 0x1074 <__floatsisf+0x54>
    106c:	9e e8       	ldi	r25, 0x8E	; 142
    106e:	87 2f       	mov	r24, r23
    1070:	76 2f       	mov	r23, r22
    1072:	05 c0       	rjmp	.+10     	; 0x107e <__floatsisf+0x5e>
    1074:	66 23       	and	r22, r22
    1076:	71 f0       	breq	.+28     	; 0x1094 <__floatsisf+0x74>
    1078:	96 e8       	ldi	r25, 0x86	; 134
    107a:	86 2f       	mov	r24, r22
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	2a f0       	brmi	.+10     	; 0x108c <__floatsisf+0x6c>
    1082:	9a 95       	dec	r25
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	da f7       	brpl	.-10     	; 0x1082 <__floatsisf+0x62>
    108c:	88 0f       	add	r24, r24
    108e:	96 95       	lsr	r25
    1090:	87 95       	ror	r24
    1092:	97 f9       	bld	r25, 7
    1094:	08 95       	ret

00001096 <__floatundisf>:
    1096:	e8 94       	clt

00001098 <__fp_di2sf>:
    1098:	f9 2f       	mov	r31, r25
    109a:	96 eb       	ldi	r25, 0xB6	; 182
    109c:	ff 23       	and	r31, r31
    109e:	81 f0       	breq	.+32     	; 0x10c0 <__fp_di2sf+0x28>
    10a0:	12 16       	cp	r1, r18
    10a2:	13 06       	cpc	r1, r19
    10a4:	14 06       	cpc	r1, r20
    10a6:	44 0b       	sbc	r20, r20
    10a8:	93 95       	inc	r25
    10aa:	f6 95       	lsr	r31
    10ac:	87 95       	ror	r24
    10ae:	77 95       	ror	r23
    10b0:	67 95       	ror	r22
    10b2:	57 95       	ror	r21
    10b4:	40 40       	sbci	r20, 0x00	; 0
    10b6:	ff 23       	and	r31, r31
    10b8:	b9 f7       	brne	.-18     	; 0x10a8 <__fp_di2sf+0x10>
    10ba:	1b c0       	rjmp	.+54     	; 0x10f2 <__fp_di2sf+0x5a>
    10bc:	99 27       	eor	r25, r25
    10be:	08 95       	ret
    10c0:	88 23       	and	r24, r24
    10c2:	51 f4       	brne	.+20     	; 0x10d8 <__fp_di2sf+0x40>
    10c4:	98 50       	subi	r25, 0x08	; 8
    10c6:	d2 f7       	brpl	.-12     	; 0x10bc <__fp_di2sf+0x24>
    10c8:	87 2b       	or	r24, r23
    10ca:	76 2f       	mov	r23, r22
    10cc:	65 2f       	mov	r22, r21
    10ce:	54 2f       	mov	r21, r20
    10d0:	43 2f       	mov	r20, r19
    10d2:	32 2f       	mov	r19, r18
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	b1 f3       	breq	.-20     	; 0x10c4 <__fp_di2sf+0x2c>
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	14 06       	cpc	r1, r20
    10de:	44 0b       	sbc	r20, r20
    10e0:	88 23       	and	r24, r24
    10e2:	3a f0       	brmi	.+14     	; 0x10f2 <__fp_di2sf+0x5a>
    10e4:	9a 95       	dec	r25
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	66 1f       	adc	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	ca f7       	brpl	.-14     	; 0x10e4 <__fp_di2sf+0x4c>
    10f2:	55 23       	and	r21, r21
    10f4:	4a f4       	brpl	.+18     	; 0x1108 <__fp_di2sf+0x70>
    10f6:	44 0f       	add	r20, r20
    10f8:	55 1f       	adc	r21, r21
    10fa:	11 f4       	brne	.+4      	; 0x1100 <__fp_di2sf+0x68>
    10fc:	60 ff       	sbrs	r22, 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <__fp_di2sf+0x70>
    1100:	6f 5f       	subi	r22, 0xFF	; 255
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	8f 4f       	sbci	r24, 0xFF	; 255
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	88 0f       	add	r24, r24
    110a:	96 95       	lsr	r25
    110c:	87 95       	ror	r24
    110e:	97 f9       	bld	r25, 7
    1110:	08 95       	ret

00001112 <__fp_inf>:
    1112:	97 f9       	bld	r25, 7
    1114:	9f 67       	ori	r25, 0x7F	; 127
    1116:	80 e8       	ldi	r24, 0x80	; 128
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	08 95       	ret

0000111e <__fp_nan>:
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	80 ec       	ldi	r24, 0xC0	; 192
    1122:	08 95       	ret

00001124 <__fp_negdi>:
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	60 95       	com	r22
    112c:	50 95       	com	r21
    112e:	40 95       	com	r20
    1130:	30 95       	com	r19
    1132:	21 95       	neg	r18
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	4f 4f       	sbci	r20, 0xFF	; 255
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	6f 4f       	sbci	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	08 95       	ret

00001144 <__fp_pscA>:
    1144:	00 24       	eor	r0, r0
    1146:	0a 94       	dec	r0
    1148:	16 16       	cp	r1, r22
    114a:	17 06       	cpc	r1, r23
    114c:	18 06       	cpc	r1, r24
    114e:	09 06       	cpc	r0, r25
    1150:	08 95       	ret

00001152 <__fp_pscB>:
    1152:	00 24       	eor	r0, r0
    1154:	0a 94       	dec	r0
    1156:	12 16       	cp	r1, r18
    1158:	13 06       	cpc	r1, r19
    115a:	14 06       	cpc	r1, r20
    115c:	05 06       	cpc	r0, r21
    115e:	08 95       	ret

00001160 <__fp_round>:
    1160:	09 2e       	mov	r0, r25
    1162:	03 94       	inc	r0
    1164:	00 0c       	add	r0, r0
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_round+0xc>
    1168:	88 23       	and	r24, r24
    116a:	52 f0       	brmi	.+20     	; 0x1180 <__fp_round+0x20>
    116c:	bb 0f       	add	r27, r27
    116e:	40 f4       	brcc	.+16     	; 0x1180 <__fp_round+0x20>
    1170:	bf 2b       	or	r27, r31
    1172:	11 f4       	brne	.+4      	; 0x1178 <__fp_round+0x18>
    1174:	60 ff       	sbrs	r22, 0
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <__fp_round+0x20>
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	08 95       	ret

00001182 <__fp_split3>:
    1182:	57 fd       	sbrc	r21, 7
    1184:	90 58       	subi	r25, 0x80	; 128
    1186:	44 0f       	add	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	59 f0       	breq	.+22     	; 0x11a2 <__fp_splitA+0x10>
    118c:	5f 3f       	cpi	r21, 0xFF	; 255
    118e:	71 f0       	breq	.+28     	; 0x11ac <__fp_splitA+0x1a>
    1190:	47 95       	ror	r20

00001192 <__fp_splitA>:
    1192:	88 0f       	add	r24, r24
    1194:	97 fb       	bst	r25, 7
    1196:	99 1f       	adc	r25, r25
    1198:	61 f0       	breq	.+24     	; 0x11b2 <__fp_splitA+0x20>
    119a:	9f 3f       	cpi	r25, 0xFF	; 255
    119c:	79 f0       	breq	.+30     	; 0x11bc <__fp_splitA+0x2a>
    119e:	87 95       	ror	r24
    11a0:	08 95       	ret
    11a2:	12 16       	cp	r1, r18
    11a4:	13 06       	cpc	r1, r19
    11a6:	14 06       	cpc	r1, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	f2 cf       	rjmp	.-28     	; 0x1190 <__fp_split3+0xe>
    11ac:	46 95       	lsr	r20
    11ae:	f1 df       	rcall	.-30     	; 0x1192 <__fp_splitA>
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <__fp_splitA+0x30>
    11b2:	16 16       	cp	r1, r22
    11b4:	17 06       	cpc	r1, r23
    11b6:	18 06       	cpc	r1, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	f1 cf       	rjmp	.-30     	; 0x119e <__fp_splitA+0xc>
    11bc:	86 95       	lsr	r24
    11be:	71 05       	cpc	r23, r1
    11c0:	61 05       	cpc	r22, r1
    11c2:	08 94       	sec
    11c4:	08 95       	ret

000011c6 <__fp_zero>:
    11c6:	e8 94       	clt

000011c8 <__fp_szero>:
    11c8:	bb 27       	eor	r27, r27
    11ca:	66 27       	eor	r22, r22
    11cc:	77 27       	eor	r23, r23
    11ce:	cb 01       	movw	r24, r22
    11d0:	97 f9       	bld	r25, 7
    11d2:	08 95       	ret

000011d4 <__mulsf3>:
    11d4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__mulsf3x>
    11d8:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_round>
    11dc:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fp_pscA>
    11e0:	38 f0       	brcs	.+14     	; 0x11f0 <__mulsf3+0x1c>
    11e2:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_pscB>
    11e6:	20 f0       	brcs	.+8      	; 0x11f0 <__mulsf3+0x1c>
    11e8:	95 23       	and	r25, r21
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <__mulsf3+0x1c>
    11ec:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
    11f0:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>
    11f4:	11 24       	eor	r1, r1
    11f6:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>

000011fa <__mulsf3x>:
    11fa:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_split3>
    11fe:	70 f3       	brcs	.-36     	; 0x11dc <__mulsf3+0x8>

00001200 <__mulsf3_pse>:
    1200:	95 9f       	mul	r25, r21
    1202:	c1 f3       	breq	.-16     	; 0x11f4 <__mulsf3+0x20>
    1204:	95 0f       	add	r25, r21
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	55 1f       	adc	r21, r21
    120a:	62 9f       	mul	r22, r18
    120c:	f0 01       	movw	r30, r0
    120e:	72 9f       	mul	r23, r18
    1210:	bb 27       	eor	r27, r27
    1212:	f0 0d       	add	r31, r0
    1214:	b1 1d       	adc	r27, r1
    1216:	63 9f       	mul	r22, r19
    1218:	aa 27       	eor	r26, r26
    121a:	f0 0d       	add	r31, r0
    121c:	b1 1d       	adc	r27, r1
    121e:	aa 1f       	adc	r26, r26
    1220:	64 9f       	mul	r22, r20
    1222:	66 27       	eor	r22, r22
    1224:	b0 0d       	add	r27, r0
    1226:	a1 1d       	adc	r26, r1
    1228:	66 1f       	adc	r22, r22
    122a:	82 9f       	mul	r24, r18
    122c:	22 27       	eor	r18, r18
    122e:	b0 0d       	add	r27, r0
    1230:	a1 1d       	adc	r26, r1
    1232:	62 1f       	adc	r22, r18
    1234:	73 9f       	mul	r23, r19
    1236:	b0 0d       	add	r27, r0
    1238:	a1 1d       	adc	r26, r1
    123a:	62 1f       	adc	r22, r18
    123c:	83 9f       	mul	r24, r19
    123e:	a0 0d       	add	r26, r0
    1240:	61 1d       	adc	r22, r1
    1242:	22 1f       	adc	r18, r18
    1244:	74 9f       	mul	r23, r20
    1246:	33 27       	eor	r19, r19
    1248:	a0 0d       	add	r26, r0
    124a:	61 1d       	adc	r22, r1
    124c:	23 1f       	adc	r18, r19
    124e:	84 9f       	mul	r24, r20
    1250:	60 0d       	add	r22, r0
    1252:	21 1d       	adc	r18, r1
    1254:	82 2f       	mov	r24, r18
    1256:	76 2f       	mov	r23, r22
    1258:	6a 2f       	mov	r22, r26
    125a:	11 24       	eor	r1, r1
    125c:	9f 57       	subi	r25, 0x7F	; 127
    125e:	50 40       	sbci	r21, 0x00	; 0
    1260:	9a f0       	brmi	.+38     	; 0x1288 <__mulsf3_pse+0x88>
    1262:	f1 f0       	breq	.+60     	; 0x12a0 <__mulsf3_pse+0xa0>
    1264:	88 23       	and	r24, r24
    1266:	4a f0       	brmi	.+18     	; 0x127a <__mulsf3_pse+0x7a>
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	bb 1f       	adc	r27, r27
    126e:	66 1f       	adc	r22, r22
    1270:	77 1f       	adc	r23, r23
    1272:	88 1f       	adc	r24, r24
    1274:	91 50       	subi	r25, 0x01	; 1
    1276:	50 40       	sbci	r21, 0x00	; 0
    1278:	a9 f7       	brne	.-22     	; 0x1264 <__mulsf3_pse+0x64>
    127a:	9e 3f       	cpi	r25, 0xFE	; 254
    127c:	51 05       	cpc	r21, r1
    127e:	80 f0       	brcs	.+32     	; 0x12a0 <__mulsf3_pse+0xa0>
    1280:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
    1284:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>
    1288:	5f 3f       	cpi	r21, 0xFF	; 255
    128a:	e4 f3       	brlt	.-8      	; 0x1284 <__mulsf3_pse+0x84>
    128c:	98 3e       	cpi	r25, 0xE8	; 232
    128e:	d4 f3       	brlt	.-12     	; 0x1284 <__mulsf3_pse+0x84>
    1290:	86 95       	lsr	r24
    1292:	77 95       	ror	r23
    1294:	67 95       	ror	r22
    1296:	b7 95       	ror	r27
    1298:	f7 95       	ror	r31
    129a:	e7 95       	ror	r30
    129c:	9f 5f       	subi	r25, 0xFF	; 255
    129e:	c1 f7       	brne	.-16     	; 0x1290 <__mulsf3_pse+0x90>
    12a0:	fe 2b       	or	r31, r30
    12a2:	88 0f       	add	r24, r24
    12a4:	91 1d       	adc	r25, r1
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	97 f9       	bld	r25, 7
    12ac:	08 95       	ret
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <__mulsf3_pse+0xb6>
    12b0:	16 f4       	brtc	.+4      	; 0x12b6 <__mulsf3_pse+0xb6>
    12b2:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>
    12b6:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_mpack>

000012ba <sqrt>:
    12ba:	0e 94 c9 08 	call	0x1192	; 0x1192 <__fp_splitA>
    12be:	b8 f3       	brcs	.-18     	; 0x12ae <__mulsf3_pse+0xae>
    12c0:	99 23       	and	r25, r25
    12c2:	c9 f3       	breq	.-14     	; 0x12b6 <__mulsf3_pse+0xb6>
    12c4:	b6 f3       	brts	.-20     	; 0x12b2 <__mulsf3_pse+0xb2>
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	55 0b       	sbc	r21, r21
    12ca:	87 ff       	sbrs	r24, 7
    12cc:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_norm2>
    12d0:	00 24       	eor	r0, r0
    12d2:	a0 e6       	ldi	r26, 0x60	; 96
    12d4:	40 ea       	ldi	r20, 0xA0	; 160
    12d6:	90 01       	movw	r18, r0
    12d8:	80 58       	subi	r24, 0x80	; 128
    12da:	56 95       	lsr	r21
    12dc:	97 95       	ror	r25
    12de:	28 f4       	brcc	.+10     	; 0x12ea <sqrt+0x30>
    12e0:	80 5c       	subi	r24, 0xC0	; 192
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	20 f0       	brcs	.+8      	; 0x12f2 <sqrt+0x38>
    12ea:	26 17       	cp	r18, r22
    12ec:	37 07       	cpc	r19, r23
    12ee:	48 07       	cpc	r20, r24
    12f0:	30 f4       	brcc	.+12     	; 0x12fe <sqrt+0x44>
    12f2:	62 1b       	sub	r22, r18
    12f4:	73 0b       	sbc	r23, r19
    12f6:	84 0b       	sbc	r24, r20
    12f8:	20 29       	or	r18, r0
    12fa:	31 29       	or	r19, r1
    12fc:	4a 2b       	or	r20, r26
    12fe:	a6 95       	lsr	r26
    1300:	17 94       	ror	r1
    1302:	07 94       	ror	r0
    1304:	20 25       	eor	r18, r0
    1306:	31 25       	eor	r19, r1
    1308:	4a 27       	eor	r20, r26
    130a:	58 f7       	brcc	.-42     	; 0x12e2 <sqrt+0x28>
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	20 f0       	brcs	.+8      	; 0x131c <sqrt+0x62>
    1314:	26 17       	cp	r18, r22
    1316:	37 07       	cpc	r19, r23
    1318:	48 07       	cpc	r20, r24
    131a:	30 f4       	brcc	.+12     	; 0x1328 <sqrt+0x6e>
    131c:	62 0b       	sbc	r22, r18
    131e:	73 0b       	sbc	r23, r19
    1320:	84 0b       	sbc	r24, r20
    1322:	20 0d       	add	r18, r0
    1324:	31 1d       	adc	r19, r1
    1326:	41 1d       	adc	r20, r1
    1328:	a0 95       	com	r26
    132a:	81 f7       	brne	.-32     	; 0x130c <sqrt+0x52>
    132c:	b9 01       	movw	r22, r18
    132e:	84 2f       	mov	r24, r20
    1330:	91 58       	subi	r25, 0x81	; 129
    1332:	88 0f       	add	r24, r24
    1334:	96 95       	lsr	r25
    1336:	87 95       	ror	r24
    1338:	08 95       	ret

0000133a <__fp_mpack>:
    133a:	9f 3f       	cpi	r25, 0xFF	; 255
    133c:	31 f0       	breq	.+12     	; 0x134a <__fp_mpack_finite+0xc>

0000133e <__fp_mpack_finite>:
    133e:	91 50       	subi	r25, 0x01	; 1
    1340:	20 f4       	brcc	.+8      	; 0x134a <__fp_mpack_finite+0xc>
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	88 0f       	add	r24, r24
    134c:	91 1d       	adc	r25, r1
    134e:	96 95       	lsr	r25
    1350:	87 95       	ror	r24
    1352:	97 f9       	bld	r25, 7
    1354:	08 95       	ret

00001356 <__fp_norm2>:
    1356:	91 50       	subi	r25, 0x01	; 1
    1358:	50 40       	sbci	r21, 0x00	; 0
    135a:	66 0f       	add	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	d2 f7       	brpl	.-12     	; 0x1356 <__fp_norm2>
    1362:	08 95       	ret

00001364 <__udivmodsi4>:
    1364:	a1 e2       	ldi	r26, 0x21	; 33
    1366:	1a 2e       	mov	r1, r26
    1368:	aa 1b       	sub	r26, r26
    136a:	bb 1b       	sub	r27, r27
    136c:	fd 01       	movw	r30, r26
    136e:	0d c0       	rjmp	.+26     	; 0x138a <__udivmodsi4_ep>

00001370 <__udivmodsi4_loop>:
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	ee 1f       	adc	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	a2 17       	cp	r26, r18
    137a:	b3 07       	cpc	r27, r19
    137c:	e4 07       	cpc	r30, r20
    137e:	f5 07       	cpc	r31, r21
    1380:	20 f0       	brcs	.+8      	; 0x138a <__udivmodsi4_ep>
    1382:	a2 1b       	sub	r26, r18
    1384:	b3 0b       	sbc	r27, r19
    1386:	e4 0b       	sbc	r30, r20
    1388:	f5 0b       	sbc	r31, r21

0000138a <__udivmodsi4_ep>:
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	1a 94       	dec	r1
    1394:	69 f7       	brne	.-38     	; 0x1370 <__udivmodsi4_loop>
    1396:	60 95       	com	r22
    1398:	70 95       	com	r23
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	bd 01       	movw	r22, r26
    13a4:	cf 01       	movw	r24, r30
    13a6:	08 95       	ret

000013a8 <__umulhisi3>:
    13a8:	a2 9f       	mul	r26, r18
    13aa:	b0 01       	movw	r22, r0
    13ac:	b3 9f       	mul	r27, r19
    13ae:	c0 01       	movw	r24, r0
    13b0:	a3 9f       	mul	r26, r19
    13b2:	70 0d       	add	r23, r0
    13b4:	81 1d       	adc	r24, r1
    13b6:	11 24       	eor	r1, r1
    13b8:	91 1d       	adc	r25, r1
    13ba:	b2 9f       	mul	r27, r18
    13bc:	70 0d       	add	r23, r0
    13be:	81 1d       	adc	r24, r1
    13c0:	11 24       	eor	r1, r1
    13c2:	91 1d       	adc	r25, r1
    13c4:	08 95       	ret

000013c6 <__muluhisi3>:
    13c6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__umulhisi3>
    13ca:	a5 9f       	mul	r26, r21
    13cc:	90 0d       	add	r25, r0
    13ce:	b4 9f       	mul	r27, r20
    13d0:	90 0d       	add	r25, r0
    13d2:	a4 9f       	mul	r26, r20
    13d4:	80 0d       	add	r24, r0
    13d6:	91 1d       	adc	r25, r1
    13d8:	11 24       	eor	r1, r1
    13da:	08 95       	ret

000013dc <__ashldi3>:
    13dc:	0f 93       	push	r16
    13de:	08 30       	cpi	r16, 0x08	; 8
    13e0:	90 f0       	brcs	.+36     	; 0x1406 <__ashldi3+0x2a>
    13e2:	98 2f       	mov	r25, r24
    13e4:	87 2f       	mov	r24, r23
    13e6:	76 2f       	mov	r23, r22
    13e8:	65 2f       	mov	r22, r21
    13ea:	54 2f       	mov	r21, r20
    13ec:	43 2f       	mov	r20, r19
    13ee:	32 2f       	mov	r19, r18
    13f0:	22 27       	eor	r18, r18
    13f2:	08 50       	subi	r16, 0x08	; 8
    13f4:	f4 cf       	rjmp	.-24     	; 0x13de <__ashldi3+0x2>
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	44 1f       	adc	r20, r20
    13fc:	55 1f       	adc	r21, r21
    13fe:	66 1f       	adc	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 95       	dec	r16
    1408:	b2 f7       	brpl	.-20     	; 0x13f6 <__ashldi3+0x1a>
    140a:	0f 91       	pop	r16
    140c:	08 95       	ret

0000140e <__adddi3>:
    140e:	2a 0d       	add	r18, r10
    1410:	3b 1d       	adc	r19, r11
    1412:	4c 1d       	adc	r20, r12
    1414:	5d 1d       	adc	r21, r13
    1416:	6e 1d       	adc	r22, r14
    1418:	7f 1d       	adc	r23, r15
    141a:	80 1f       	adc	r24, r16
    141c:	91 1f       	adc	r25, r17
    141e:	08 95       	ret

00001420 <__adddi3_s8>:
    1420:	00 24       	eor	r0, r0
    1422:	a7 fd       	sbrc	r26, 7
    1424:	00 94       	com	r0
    1426:	2a 0f       	add	r18, r26
    1428:	30 1d       	adc	r19, r0
    142a:	40 1d       	adc	r20, r0
    142c:	50 1d       	adc	r21, r0
    142e:	60 1d       	adc	r22, r0
    1430:	70 1d       	adc	r23, r0
    1432:	80 1d       	adc	r24, r0
    1434:	90 1d       	adc	r25, r0
    1436:	08 95       	ret

00001438 <__subdi3>:
    1438:	2a 19       	sub	r18, r10
    143a:	3b 09       	sbc	r19, r11
    143c:	4c 09       	sbc	r20, r12
    143e:	5d 09       	sbc	r21, r13
    1440:	6e 09       	sbc	r22, r14
    1442:	7f 09       	sbc	r23, r15
    1444:	80 0b       	sbc	r24, r16
    1446:	91 0b       	sbc	r25, r17
    1448:	08 95       	ret

0000144a <__cmpdi2>:
    144a:	2a 15       	cp	r18, r10
    144c:	3b 05       	cpc	r19, r11
    144e:	4c 05       	cpc	r20, r12
    1450:	5d 05       	cpc	r21, r13
    1452:	6e 05       	cpc	r22, r14
    1454:	7f 05       	cpc	r23, r15
    1456:	80 07       	cpc	r24, r16
    1458:	91 07       	cpc	r25, r17
    145a:	08 95       	ret

0000145c <__cmpdi2_s8>:
    145c:	00 24       	eor	r0, r0
    145e:	a7 fd       	sbrc	r26, 7
    1460:	00 94       	com	r0
    1462:	2a 17       	cp	r18, r26
    1464:	30 05       	cpc	r19, r0
    1466:	40 05       	cpc	r20, r0
    1468:	50 05       	cpc	r21, r0
    146a:	60 05       	cpc	r22, r0
    146c:	70 05       	cpc	r23, r0
    146e:	80 05       	cpc	r24, r0
    1470:	90 05       	cpc	r25, r0
    1472:	08 95       	ret

00001474 <_exit>:
    1474:	f8 94       	cli

00001476 <__stop_program>:
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <__stop_program>
