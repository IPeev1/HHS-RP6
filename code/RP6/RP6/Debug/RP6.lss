
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000154c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000154c  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00800066  00800066  000015e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c36  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000757  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000782  00000000  00000000  00002ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066d  00000000  00000000  00003524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057b  00000000  00000000  00003b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_1>
       8:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 06 	call	0xc10	; 0xc10 <main>
      8a:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_i2c_slave>:

//I2C control functions
void ontvangData(uint8_t data[],uint8_t tel){
	for(int i=0;i<tel;++i)
	data_ont[i]=data[i];
	I2C_receiveInterpreter(data_ont);
      92:	11 b8       	out	0x01, r1	; 1
      94:	90 e2       	ldi	r25, 0x20	; 32
      96:	90 b9       	out	0x00, r25	; 0
      98:	95 e4       	ldi	r25, 0x45	; 69
      9a:	96 bf       	out	0x36, r25	; 54
      9c:	88 0f       	add	r24, r24
      9e:	82 b9       	out	0x02, r24	; 2
      a0:	08 95       	ret

000000a2 <slaaftwi>:
      a2:	81 b1       	in	r24, 0x01	; 1
      a4:	80 3a       	cpi	r24, 0xA0	; 160
      a6:	d1 f0       	breq	.+52     	; 0xdc <slaaftwi+0x3a>
      a8:	28 f4       	brcc	.+10     	; 0xb4 <slaaftwi+0x12>
      aa:	80 36       	cpi	r24, 0x60	; 96
      ac:	41 f0       	breq	.+16     	; 0xbe <slaaftwi+0x1c>
      ae:	80 38       	cpi	r24, 0x80	; 128
      b0:	49 f0       	breq	.+18     	; 0xc4 <slaaftwi+0x22>
      b2:	35 c0       	rjmp	.+106    	; 0x11e <slaaftwi+0x7c>
      b4:	88 3a       	cpi	r24, 0xA8	; 168
      b6:	21 f1       	breq	.+72     	; 0x100 <slaaftwi+0x5e>
      b8:	88 3b       	cpi	r24, 0xB8	; 184
      ba:	59 f1       	breq	.+86     	; 0x112 <slaaftwi+0x70>
      bc:	30 c0       	rjmp	.+96     	; 0x11e <slaaftwi+0x7c>
      be:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <teller.1905>
      c2:	2d c0       	rjmp	.+90     	; 0x11e <slaaftwi+0x7c>
      c4:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <teller.1905>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	8e 0f       	add	r24, r30
      cc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <teller.1905>
      d0:	83 b1       	in	r24, 0x03	; 3
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	e0 58       	subi	r30, 0x80	; 128
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	80 83       	st	Z, r24
      da:	21 c0       	rjmp	.+66     	; 0x11e <slaaftwi+0x7c>
      dc:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <ontfunc>
      e0:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <ontfunc+0x1>
      e4:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <teller.1905>
      e8:	80 e8       	ldi	r24, 0x80	; 128
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	09 95       	icall
      ee:	e0 e8       	ldi	r30, 0x80	; 128
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	84 e9       	ldi	r24, 0x94	; 148
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	11 92       	st	Z+, r1
      f8:	e8 17       	cp	r30, r24
      fa:	f9 07       	cpc	r31, r25
      fc:	e1 f7       	brne	.-8      	; 0xf6 <slaaftwi+0x54>
      fe:	0f c0       	rjmp	.+30     	; 0x11e <slaaftwi+0x7c>
     100:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <teller.1905>
     104:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <verfunc>
     108:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <verfunc+0x1>
     10c:	09 95       	icall
     10e:	83 b9       	out	0x03, r24	; 3
     110:	06 c0       	rjmp	.+12     	; 0x11e <slaaftwi+0x7c>
     112:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <verfunc>
     116:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <verfunc+0x1>
     11a:	09 95       	icall
     11c:	83 b9       	out	0x03, r24	; 3
     11e:	86 b7       	in	r24, 0x36	; 54
     120:	80 68       	ori	r24, 0x80	; 128
     122:	86 bf       	out	0x36, r24	; 54
     124:	08 95       	ret

00000126 <__vector_19>:
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
     148:	0e 94 51 00 	call	0xa2	; 0xa2 <slaaftwi>
     14c:	ff 91       	pop	r31
     14e:	ef 91       	pop	r30
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <init_LED>:
     16e:	87 b3       	in	r24, 0x17	; 23
     170:	83 68       	ori	r24, 0x83	; 131
     172:	87 bb       	out	0x17, r24	; 23
     174:	84 b3       	in	r24, 0x14	; 20
     176:	80 67       	ori	r24, 0x70	; 112
     178:	84 bb       	out	0x14, r24	; 20
     17a:	08 95       	ret

0000017c <init_micros>:
     17c:	83 b7       	in	r24, 0x33	; 51
     17e:	81 60       	ori	r24, 0x01	; 1
     180:	83 bf       	out	0x33, r24	; 51
     182:	83 b7       	in	r24, 0x33	; 51
     184:	82 60       	ori	r24, 0x02	; 2
     186:	83 bf       	out	0x33, r24	; 51
     188:	89 b7       	in	r24, 0x39	; 57
     18a:	81 60       	ori	r24, 0x01	; 1
     18c:	89 bf       	out	0x39, r24	; 57
     18e:	12 be       	out	0x32, r1	; 50
     190:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t0TotalOverflow>
     194:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <t0TotalOverflow+0x1>
     198:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <t0TotalOverflow+0x2>
     19c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <t0TotalOverflow+0x3>
     1a0:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <t0TotalOverflow+0x4>
     1a4:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <t0TotalOverflow+0x5>
     1a8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <t0TotalOverflow+0x6>
     1ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <t0TotalOverflow+0x7>
     1b0:	08 95       	ret

000001b2 <__vector_11>:
     1b2:	1f 92       	push	r1
     1b4:	0f 92       	push	r0
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	0f 92       	push	r0
     1ba:	11 24       	eor	r1, r1
     1bc:	2f 93       	push	r18
     1be:	3f 93       	push	r19
     1c0:	4f 93       	push	r20
     1c2:	5f 93       	push	r21
     1c4:	6f 93       	push	r22
     1c6:	7f 93       	push	r23
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <t0TotalOverflow>
     1d2:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <t0TotalOverflow+0x1>
     1d6:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <t0TotalOverflow+0x2>
     1da:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <t0TotalOverflow+0x3>
     1de:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <t0TotalOverflow+0x4>
     1e2:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <t0TotalOverflow+0x5>
     1e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <t0TotalOverflow+0x6>
     1ea:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <t0TotalOverflow+0x7>
     1ee:	a1 e0       	ldi	r26, 0x01	; 1
     1f0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__adddi3_s8>
     1f4:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <t0TotalOverflow>
     1f8:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <t0TotalOverflow+0x1>
     1fc:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <t0TotalOverflow+0x2>
     200:	50 93 bd 00 	sts	0x00BD, r21	; 0x8000bd <t0TotalOverflow+0x3>
     204:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <t0TotalOverflow+0x4>
     208:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <t0TotalOverflow+0x5>
     20c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <t0TotalOverflow+0x6>
     210:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <t0TotalOverflow+0x7>
     214:	af 91       	pop	r26
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	7f 91       	pop	r23
     21c:	6f 91       	pop	r22
     21e:	5f 91       	pop	r21
     220:	4f 91       	pop	r20
     222:	3f 91       	pop	r19
     224:	2f 91       	pop	r18
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <micros>:
     230:	af 92       	push	r10
     232:	bf 92       	push	r11
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	a2 b7       	in	r26, 0x32	; 50
     242:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <t0TotalOverflow>
     246:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <t0TotalOverflow+0x1>
     24a:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <t0TotalOverflow+0x2>
     24e:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <t0TotalOverflow+0x3>
     252:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <t0TotalOverflow+0x4>
     256:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <t0TotalOverflow+0x5>
     25a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <t0TotalOverflow+0x6>
     25e:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <t0TotalOverflow+0x7>
     262:	e0 e0       	ldi	r30, 0x00	; 0
     264:	fa 2f       	mov	r31, r26
     266:	ff 0f       	add	r31, r31
     268:	ff 0f       	add	r31, r31
     26a:	ff 0f       	add	r31, r31
     26c:	ff 23       	and	r31, r31
     26e:	14 f4       	brge	.+4      	; 0x274 <micros+0x44>
     270:	e1 50       	subi	r30, 0x01	; 1
     272:	ff 4f       	sbci	r31, 0xFF	; 255
     274:	ef 2f       	mov	r30, r31
     276:	ee 0f       	add	r30, r30
     278:	ee 0b       	sbc	r30, r30
     27a:	0b e0       	ldi	r16, 0x0B	; 11
     27c:	0e 94 35 0a 	call	0x146a	; 0x146a <__ashldi3>
     280:	a2 2e       	mov	r10, r18
     282:	b3 2e       	mov	r11, r19
     284:	c4 2e       	mov	r12, r20
     286:	d5 2e       	mov	r13, r21
     288:	e6 2e       	mov	r14, r22
     28a:	f7 2e       	mov	r15, r23
     28c:	08 2f       	mov	r16, r24
     28e:	19 2f       	mov	r17, r25
     290:	2f 2f       	mov	r18, r31
     292:	3e 2f       	mov	r19, r30
     294:	4e 2f       	mov	r20, r30
     296:	5e 2f       	mov	r21, r30
     298:	6e 2f       	mov	r22, r30
     29a:	7e 2f       	mov	r23, r30
     29c:	8e 2f       	mov	r24, r30
     29e:	9e 2f       	mov	r25, r30
     2a0:	0e 94 4e 0a 	call	0x149c	; 0x149c <__adddi3>
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	df 90       	pop	r13
     2ae:	cf 90       	pop	r12
     2b0:	bf 90       	pop	r11
     2b2:	af 90       	pop	r10
     2b4:	08 95       	ret

000002b6 <init_rp6Data>:
     2b6:	e9 ea       	ldi	r30, 0xA9	; 169
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	10 82       	st	Z, r1
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	81 83       	std	Z+1, r24	; 0x01
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	9e e1       	ldi	r25, 0x1E	; 30
     2c4:	93 83       	std	Z+3, r25	; 0x03
     2c6:	28 eb       	ldi	r18, 0xB8	; 184
     2c8:	3b e0       	ldi	r19, 0x0B	; 11
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	24 83       	std	Z+4, r18	; 0x04
     2ce:	28 e8       	ldi	r18, 0x88	; 136
     2d0:	33 e1       	ldi	r19, 0x13	; 19
     2d2:	37 83       	std	Z+7, r19	; 0x07
     2d4:	26 83       	std	Z+6, r18	; 0x06
     2d6:	40 e4       	ldi	r20, 0x40	; 64
     2d8:	5d e0       	ldi	r21, 0x0D	; 13
     2da:	63 e0       	ldi	r22, 0x03	; 3
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	40 87       	std	Z+8, r20	; 0x08
     2e0:	51 87       	std	Z+9, r21	; 0x09
     2e2:	62 87       	std	Z+10, r22	; 0x0a
     2e4:	73 87       	std	Z+11, r23	; 0x0b
     2e6:	84 87       	std	Z+12, r24	; 0x0c
     2e8:	16 86       	std	Z+14, r1	; 0x0e
     2ea:	15 86       	std	Z+13, r1	; 0x0d
     2ec:	10 8a       	std	Z+16, r1	; 0x10
     2ee:	17 86       	std	Z+15, r1	; 0x0f
     2f0:	08 95       	ret

000002f2 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     2f2:	81 b3       	in	r24, 0x11	; 17
     2f4:	80 63       	ori	r24, 0x30	; 48
     2f6:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     2f8:	81 b3       	in	r24, 0x11	; 17
     2fa:	83 7f       	andi	r24, 0xF3	; 243
     2fc:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     2fe:	84 b3       	in	r24, 0x14	; 20
     300:	8c 60       	ori	r24, 0x0C	; 12
     302:	84 bb       	out	0x14, r24	; 20
     304:	08 95       	ret

00000306 <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     306:	8f b5       	in	r24, 0x2f	; 47
     308:	80 68       	ori	r24, 0x80	; 128
     30a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     30c:	8f b5       	in	r24, 0x2f	; 47
     30e:	80 62       	ori	r24, 0x20	; 32
     310:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     312:	8f b5       	in	r24, 0x2f	; 47
     314:	82 60       	ori	r24, 0x02	; 2
     316:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     318:	8e b5       	in	r24, 0x2e	; 46
     31a:	80 61       	ori	r24, 0x10	; 16
     31c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     31e:	8e b5       	in	r24, 0x2e	; 46
     320:	81 60       	ori	r24, 0x01	; 1
     322:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	99 ef       	ldi	r25, 0xF9	; 249
     328:	97 bd       	out	0x27, r25	; 39
     32a:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     32c:	1b bc       	out	0x2b, r1	; 43
     32e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     330:	19 bc       	out	0x29, r1	; 41
     332:	18 bc       	out	0x28, r1	; 40
     334:	08 95       	ret

00000336 <init_motor_encoder>:
}


void init_motor_encoder(){
	rp6Data.motorEncoderLVal = 0;				//Reset the motor encoder variable
     336:	e9 ea       	ldi	r30, 0xA9	; 169
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	16 86       	std	Z+14, r1	; 0x0e
     33c:	15 86       	std	Z+13, r1	; 0x0d
	rp6Data.motorEncoderRVal = 0;				//---^
     33e:	10 8a       	std	Z+16, r1	; 0x10
     340:	17 86       	std	Z+15, r1	; 0x0f
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     342:	85 b7       	in	r24, 0x35	; 53
     344:	81 60       	ori	r24, 0x01	; 1
     346:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     348:	85 b7       	in	r24, 0x35	; 53
     34a:	84 60       	ori	r24, 0x04	; 4
     34c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     34e:	8b b7       	in	r24, 0x3b	; 59
     350:	80 64       	ori	r24, 0x40	; 64
     352:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     354:	8b b7       	in	r24, 0x3b	; 59
     356:	80 68       	ori	r24, 0x80	; 128
     358:	8b bf       	out	0x3b, r24	; 59
     35a:	08 95       	ret

0000035c <init_motor>:
	rp6Data.enableBeeper = I2Cdata[8];
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     35c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     360:	0e 94 83 01 	call	0x306	; 0x306 <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     364:	0e 94 9b 01 	call	0x336	; 0x336 <init_motor_encoder>
     368:	08 95       	ret

0000036a <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     36a:	1f 92       	push	r1
     36c:	0f 92       	push	r0
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	8f 93       	push	r24
     376:	9f 93       	push	r25
     378:	ef 93       	push	r30
     37a:	ff 93       	push	r31
	rp6Data.motorEncoderLVal++;							//Increase the encoder variable
     37c:	e9 ea       	ldi	r30, 0xA9	; 169
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	85 85       	ldd	r24, Z+13	; 0x0d
     382:	96 85       	ldd	r25, Z+14	; 0x0e
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	96 87       	std	Z+14, r25	; 0x0e
     388:	85 87       	std	Z+13, r24	; 0x0d
}
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	9f 91       	pop	r25
     390:	8f 91       	pop	r24
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_2>:


ISR(INT1_vect){
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	ef 93       	push	r30
     3ac:	ff 93       	push	r31
	rp6Data.motorEncoderRVal++;							//Increase the encoder variable
     3ae:	e9 ea       	ldi	r30, 0xA9	; 169
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	87 85       	ldd	r24, Z+15	; 0x0f
     3b4:	90 89       	ldd	r25, Z+16	; 0x10
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	90 8b       	std	Z+16, r25	; 0x10
     3ba:	87 87       	std	Z+15, r24	; 0x0f
}
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	9f 91       	pop	r25
     3c2:	8f 91       	pop	r24
     3c4:	0f 90       	pop	r0
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	0f 90       	pop	r0
     3ca:	1f 90       	pop	r1
     3cc:	18 95       	reti

000003ce <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     3ce:	89 2b       	or	r24, r25
     3d0:	39 f0       	breq	.+14     	; 0x3e0 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     3d2:	8b b7       	in	r24, 0x3b	; 59
     3d4:	80 64       	ori	r24, 0x40	; 64
     3d6:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     3d8:	8b b7       	in	r24, 0x3b	; 59
     3da:	80 68       	ori	r24, 0x80	; 128
     3dc:	8b bf       	out	0x3b, r24	; 59
     3de:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     3e0:	8b b7       	in	r24, 0x3b	; 59
     3e2:	8f 7b       	andi	r24, 0xBF	; 191
     3e4:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	8f 77       	andi	r24, 0x7F	; 127
     3ea:	8b bf       	out	0x3b, r24	; 59
     3ec:	08 95       	ret

000003ee <motorDriver>:
	}
}


int motorDriver(){
     3ee:	2f 92       	push	r2
     3f0:	3f 92       	push	r3
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	8f 92       	push	r8
     3fc:	9f 92       	push	r9
     3fe:	af 92       	push	r10
     400:	bf 92       	push	r11
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	6d 97       	sbiw	r28, 0x1d	; 29
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     422:	0e 94 18 01 	call	0x230	; 0x230 <micros>
     426:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.2039>
     42a:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.2039+0x1>
     42e:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.2039+0x2>
     432:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.2039+0x3>
     436:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.2039+0x4>
     43a:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.2039+0x5>
     43e:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.2039+0x6>
     442:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.2039+0x7>
     446:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__cmpdi2>
     44a:	08 f4       	brcc	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44c:	c6 c3       	rjmp	.+1932   	; 0xbda <__stack+0x37b>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     44e:	0e 94 18 01 	call	0x230	; 0x230 <micros>
     452:	62 2e       	mov	r6, r18
     454:	73 2e       	mov	r7, r19
     456:	49 87       	std	Y+9, r20	; 0x09
     458:	59 83       	std	Y+1, r21	; 0x01
     45a:	b6 2f       	mov	r27, r22
     45c:	a7 2f       	mov	r26, r23
     45e:	08 2f       	mov	r16, r24
     460:	19 2f       	mov	r17, r25
     462:	e9 ea       	ldi	r30, 0xA9	; 169
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 84       	ldd	r8, Z+8	; 0x08
     468:	91 84       	ldd	r9, Z+9	; 0x09
     46a:	a2 84       	ldd	r10, Z+10	; 0x0a
     46c:	b3 84       	ldd	r11, Z+11	; 0x0b
     46e:	28 2d       	mov	r18, r8
     470:	39 2d       	mov	r19, r9
     472:	4a 2d       	mov	r20, r10
     474:	5b 2d       	mov	r21, r11
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	a6 2c       	mov	r10, r6
     480:	b7 2c       	mov	r11, r7
     482:	c9 84       	ldd	r12, Y+9	; 0x09
     484:	d9 80       	ldd	r13, Y+1	; 0x01
     486:	eb 2e       	mov	r14, r27
     488:	fa 2e       	mov	r15, r26
     48a:	0e 94 4e 0a 	call	0x149c	; 0x149c <__adddi3>
     48e:	29 8b       	std	Y+17, r18	; 0x11
     490:	3a 8b       	std	Y+18, r19	; 0x12
     492:	4b 8b       	std	Y+19, r20	; 0x13
     494:	5c 8b       	std	Y+20, r21	; 0x14
     496:	6d 8b       	std	Y+21, r22	; 0x15
     498:	7e 8b       	std	Y+22, r23	; 0x16
     49a:	8f 8b       	std	Y+23, r24	; 0x17
     49c:	98 8f       	std	Y+24, r25	; 0x18
     49e:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2039>
     4a2:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2039+0x1>
     4a6:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2039+0x2>
     4aa:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2039+0x3>
     4ae:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2039+0x4>
     4b2:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2039+0x5>
     4b6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2039+0x6>
     4ba:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2039+0x7>
	}
	
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     4be:	40 81       	ld	r20, Z
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	34 e6       	ldi	r19, 0x64	; 100
     4c4:	42 03       	mulsu	r20, r18
     4c6:	c0 01       	movw	r24, r0
     4c8:	43 9f       	mul	r20, r19
     4ca:	90 0d       	add	r25, r0
     4cc:	11 24       	eor	r1, r1
     4ce:	64 e6       	ldi	r22, 0x64	; 100
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	0e 94 cf 08 	call	0x119e	; 0x119e <__divmodhi4>
     4d6:	60 83       	st	Z, r22
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     4d8:	46 80       	ldd	r4, Z+6	; 0x06
     4da:	57 80       	ldd	r5, Z+7	; 0x07
     4dc:	06 2e       	mov	r0, r22
     4de:	00 0c       	add	r0, r0
     4e0:	77 0b       	sbc	r23, r23
     4e2:	64 15       	cp	r22, r4
     4e4:	75 05       	cpc	r23, r5
     4e6:	10 f4       	brcc	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4e8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <rp6Data>
	
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     4ec:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <rp6Data+0x1>
     4f0:	0e 2e       	mov	r0, r30
     4f2:	00 0c       	add	r0, r0
     4f4:	ff 0b       	sbc	r31, r31
     4f6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2040>
     4fa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2040+0x1>
     4fe:	e8 17       	cp	r30, r24
     500:	f9 07       	cpc	r31, r25
     502:	41 f1       	breq	.+80     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     504:	20 90 70 00 	lds	r2, 0x0070	; 0x800070 <currentDriveSpeed.2043>
     508:	00 91 71 00 	lds	r16, 0x0071	; 0x800071 <currentDriveSpeed.2043+0x1>
     50c:	0c 8f       	std	Y+28, r16	; 0x1c
     50e:	30 90 72 00 	lds	r3, 0x0072	; 0x800072 <currentDriveSpeed.2043+0x2>
     512:	60 90 73 00 	lds	r6, 0x0073	; 0x800073 <currentDriveSpeed.2043+0x3>
     516:	70 90 74 00 	lds	r7, 0x0074	; 0x800074 <currentDriveSpeed.2043+0x4>
     51a:	80 90 75 00 	lds	r8, 0x0075	; 0x800075 <currentDriveSpeed.2043+0x5>
     51e:	90 90 76 00 	lds	r9, 0x0076	; 0x800076 <currentDriveSpeed.2043+0x6>
     522:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <currentDriveSpeed.2043+0x7>
     526:	1d 8f       	std	Y+29, r17	; 0x1d
     528:	22 2d       	mov	r18, r2
     52a:	30 2f       	mov	r19, r16
     52c:	43 2d       	mov	r20, r3
     52e:	56 2d       	mov	r21, r6
     530:	67 2d       	mov	r22, r7
     532:	78 2d       	mov	r23, r8
     534:	89 2d       	mov	r24, r9
     536:	91 2f       	mov	r25, r17
     538:	a0 e0       	ldi	r26, 0x00	; 0
     53a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__cmpdi2_s8>
     53e:	19 f0       	breq	.+6      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     540:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <rp6Data>
     544:	07 c0       	rjmp	.+14     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     546:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2040+0x1>
     54a:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2040>
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
     54e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <rp6Data>
     552:	51 c0       	rjmp	.+162    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     554:	20 90 a9 00 	lds	r2, 0x00A9	; 0x8000a9 <rp6Data>
     558:	22 2d       	mov	r18, r2
     55a:	22 0f       	add	r18, r18
     55c:	22 0b       	sbc	r18, r18
     55e:	2c 8f       	std	Y+28, r18	; 0x1c
     560:	32 2e       	mov	r3, r18
     562:	62 2e       	mov	r6, r18
     564:	73 2c       	mov	r7, r3
     566:	83 2c       	mov	r8, r3
     568:	93 2c       	mov	r9, r3
     56a:	2d 8f       	std	Y+29, r18	; 0x1d
     56c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentDriveSpeed.2043>
     570:	39 87       	std	Y+9, r19	; 0x09
     572:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentDriveSpeed.2043+0x1>
     576:	4a 87       	std	Y+10, r20	; 0x0a
     578:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentDriveSpeed.2043+0x2>
     57c:	5b 87       	std	Y+11, r21	; 0x0b
     57e:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <currentDriveSpeed.2043+0x3>
     582:	6c 87       	std	Y+12, r22	; 0x0c
     584:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <currentDriveSpeed.2043+0x4>
     588:	7d 87       	std	Y+13, r23	; 0x0d
     58a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <currentDriveSpeed.2043+0x5>
     58e:	8e 87       	std	Y+14, r24	; 0x0e
     590:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <currentDriveSpeed.2043+0x6>
     594:	9f 87       	std	Y+15, r25	; 0x0f
     596:	a0 91 77 00 	lds	r26, 0x0077	; 0x800077 <currentDriveSpeed.2043+0x7>
     59a:	a8 8b       	std	Y+16, r26	; 0x10
     59c:	22 2d       	mov	r18, r2
     59e:	33 2d       	mov	r19, r3
     5a0:	43 2d       	mov	r20, r3
     5a2:	53 2f       	mov	r21, r19
     5a4:	63 2f       	mov	r22, r19
     5a6:	73 2f       	mov	r23, r19
     5a8:	83 2f       	mov	r24, r19
     5aa:	93 2d       	mov	r25, r3
     5ac:	a9 84       	ldd	r10, Y+9	; 0x09
     5ae:	ba 84       	ldd	r11, Y+10	; 0x0a
     5b0:	cb 84       	ldd	r12, Y+11	; 0x0b
     5b2:	dc 84       	ldd	r13, Y+12	; 0x0c
     5b4:	ed 84       	ldd	r14, Y+13	; 0x0d
     5b6:	fe 84       	ldd	r15, Y+14	; 0x0e
     5b8:	0f 85       	ldd	r16, Y+15	; 0x0f
     5ba:	1a 2f       	mov	r17, r26
     5bc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subdi3>
     5c0:	29 83       	std	Y+1, r18	; 0x01
     5c2:	39 8f       	std	Y+25, r19	; 0x19
     5c4:	4a 8f       	std	Y+26, r20	; 0x1a
     5c6:	5b 8f       	std	Y+27, r21	; 0x1b
     5c8:	a6 2e       	mov	r10, r22
     5ca:	b7 2e       	mov	r11, r23
     5cc:	08 2f       	mov	r16, r24
     5ce:	19 2f       	mov	r17, r25
     5d0:	0e 94 25 07 	call	0xe4a	; 0xe4a <__floatdisf>
     5d4:	6b 01       	movw	r12, r22
     5d6:	7c 01       	movw	r14, r24
     5d8:	a7 01       	movw	r20, r14
     5da:	96 01       	movw	r18, r12
     5dc:	c7 01       	movw	r24, r14
     5de:	b6 01       	movw	r22, r12
     5e0:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     5e4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     5e8:	0e 94 f6 06 	call	0xdec	; 0xdec <__fixunssfsi>
     5ec:	60 3d       	cpi	r22, 0xD0	; 208
     5ee:	77 40       	sbci	r23, 0x07	; 7
     5f0:	81 05       	cpc	r24, r1
     5f2:	91 05       	cpc	r25, r1
     5f4:	98 f4       	brcc	.+38     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
		currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     5f6:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2043>
     5fa:	3c 8d       	ldd	r19, Y+28	; 0x1c
     5fc:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2043+0x1>
     600:	30 92 72 00 	sts	0x0072, r3	; 0x800072 <currentDriveSpeed.2043+0x2>
     604:	60 92 73 00 	sts	0x0073, r6	; 0x800073 <currentDriveSpeed.2043+0x3>
     608:	70 92 74 00 	sts	0x0074, r7	; 0x800074 <currentDriveSpeed.2043+0x4>
     60c:	80 92 75 00 	sts	0x0075, r8	; 0x800075 <currentDriveSpeed.2043+0x5>
     610:	90 92 76 00 	sts	0x0076, r9	; 0x800076 <currentDriveSpeed.2043+0x6>
     614:	4d 8d       	ldd	r20, Y+29	; 0x1d
     616:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2043+0x7>
     61a:	1e c1       	rjmp	.+572    	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
	}else{																			//If the difference is more than 2000
		if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     61c:	29 81       	ldd	r18, Y+1	; 0x01
     61e:	39 8d       	ldd	r19, Y+25	; 0x19
     620:	4a 8d       	ldd	r20, Y+26	; 0x1a
     622:	5b 8d       	ldd	r21, Y+27	; 0x1b
     624:	6a 2d       	mov	r22, r10
     626:	7b 2d       	mov	r23, r11
     628:	80 2f       	mov	r24, r16
     62a:	91 2f       	mov	r25, r17
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__cmpdi2_s8>
     632:	0c f0       	brlt	.+2      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     634:	75 c0       	rjmp	.+234    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     636:	52 01       	movw	r10, r4
     638:	c1 2c       	mov	r12, r1
     63a:	d1 2c       	mov	r13, r1
     63c:	e1 2c       	mov	r14, r1
     63e:	f1 2c       	mov	r15, r1
     640:	87 01       	movw	r16, r14
     642:	29 85       	ldd	r18, Y+9	; 0x09
     644:	3a 85       	ldd	r19, Y+10	; 0x0a
     646:	4b 85       	ldd	r20, Y+11	; 0x0b
     648:	5c 85       	ldd	r21, Y+12	; 0x0c
     64a:	6d 85       	ldd	r22, Y+13	; 0x0d
     64c:	7e 85       	ldd	r23, Y+14	; 0x0e
     64e:	8f 85       	ldd	r24, Y+15	; 0x0f
     650:	98 89       	ldd	r25, Y+16	; 0x10
     652:	49 82       	std	Y+1, r4	; 0x01
     654:	ba 82       	std	Y+2, r11	; 0x02
     656:	cb 82       	std	Y+3, r12	; 0x03
     658:	dc 82       	std	Y+4, r13	; 0x04
     65a:	ed 82       	std	Y+5, r14	; 0x05
     65c:	fe 82       	std	Y+6, r15	; 0x06
     65e:	0f 83       	std	Y+7, r16	; 0x07
     660:	18 87       	std	Y+8, r17	; 0x08
     662:	c1 2c       	mov	r12, r1
     664:	d1 2c       	mov	r13, r1
     666:	e1 2c       	mov	r14, r1
     668:	f1 2c       	mov	r15, r1
     66a:	00 e0       	ldi	r16, 0x00	; 0
     66c:	10 e0       	ldi	r17, 0x00	; 0
     66e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__cmpdi2>
     672:	9c f4       	brge	.+38     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
				currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     674:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2043>
     678:	5c 8d       	ldd	r21, Y+28	; 0x1c
     67a:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <currentDriveSpeed.2043+0x1>
     67e:	30 92 72 00 	sts	0x0072, r3	; 0x800072 <currentDriveSpeed.2043+0x2>
     682:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.2043+0x3>
     686:	30 92 74 00 	sts	0x0074, r3	; 0x800074 <currentDriveSpeed.2043+0x4>
     68a:	30 92 75 00 	sts	0x0075, r3	; 0x800075 <currentDriveSpeed.2043+0x5>
     68e:	30 92 76 00 	sts	0x0076, r3	; 0x800076 <currentDriveSpeed.2043+0x6>
     692:	6d 8d       	ldd	r22, Y+29	; 0x1d
     694:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <currentDriveSpeed.2043+0x7>
     698:	df c0       	rjmp	.+446    	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     69a:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <rp6Data+0x3>
     69e:	a9 84       	ldd	r10, Y+9	; 0x09
     6a0:	ba 84       	ldd	r11, Y+10	; 0x0a
     6a2:	cb 84       	ldd	r12, Y+11	; 0x0b
     6a4:	dc 84       	ldd	r13, Y+12	; 0x0c
     6a6:	ed 84       	ldd	r14, Y+13	; 0x0d
     6a8:	fe 84       	ldd	r15, Y+14	; 0x0e
     6aa:	0f 85       	ldd	r16, Y+15	; 0x0f
     6ac:	18 89       	ldd	r17, Y+16	; 0x10
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 05 09 	call	0x120a	; 0x120a <__muldi3>
     6c0:	0f 2e       	mov	r0, r31
     6c2:	f4 e6       	ldi	r31, 0x64	; 100
     6c4:	af 2e       	mov	r10, r31
     6c6:	f0 2d       	mov	r31, r0
     6c8:	b1 2c       	mov	r11, r1
     6ca:	c1 2c       	mov	r12, r1
     6cc:	d1 2c       	mov	r13, r1
     6ce:	e1 2c       	mov	r14, r1
     6d0:	f1 2c       	mov	r15, r1
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__divdi3>
     6da:	a2 2e       	mov	r10, r18
     6dc:	b3 2e       	mov	r11, r19
     6de:	c4 2e       	mov	r12, r20
     6e0:	d5 2e       	mov	r13, r21
     6e2:	e6 2e       	mov	r14, r22
     6e4:	f7 2e       	mov	r15, r23
     6e6:	08 2f       	mov	r16, r24
     6e8:	19 2f       	mov	r17, r25
     6ea:	29 85       	ldd	r18, Y+9	; 0x09
     6ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ee:	4b 85       	ldd	r20, Y+11	; 0x0b
     6f0:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f2:	6d 85       	ldd	r22, Y+13	; 0x0d
     6f4:	7e 85       	ldd	r23, Y+14	; 0x0e
     6f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f8:	98 89       	ldd	r25, Y+16	; 0x10
     6fa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subdi3>
     6fe:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2043>
     702:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2043+0x1>
     706:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2043+0x2>
     70a:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2043+0x3>
     70e:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2043+0x4>
     712:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2043+0x5>
     716:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2043+0x6>
     71a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2043+0x7>
     71e:	9c c0       	rjmp	.+312    	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     720:	82 01       	movw	r16, r4
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	ba 01       	movw	r22, r20
     72c:	49 82       	std	Y+1, r4	; 0x01
     72e:	1a 83       	std	Y+2, r17	; 0x02
     730:	2b 83       	std	Y+3, r18	; 0x03
     732:	3c 83       	std	Y+4, r19	; 0x04
     734:	4d 83       	std	Y+5, r20	; 0x05
     736:	5e 83       	std	Y+6, r21	; 0x06
     738:	6f 83       	std	Y+7, r22	; 0x07
     73a:	78 87       	std	Y+8, r23	; 0x08
     73c:	29 85       	ldd	r18, Y+9	; 0x09
     73e:	3a 85       	ldd	r19, Y+10	; 0x0a
     740:	4b 85       	ldd	r20, Y+11	; 0x0b
     742:	5c 85       	ldd	r21, Y+12	; 0x0c
     744:	6d 85       	ldd	r22, Y+13	; 0x0d
     746:	7e 85       	ldd	r23, Y+14	; 0x0e
     748:	8f 85       	ldd	r24, Y+15	; 0x0f
     74a:	98 89       	ldd	r25, Y+16	; 0x10
     74c:	a4 2c       	mov	r10, r4
     74e:	b1 2e       	mov	r11, r17
     750:	c1 2c       	mov	r12, r1
     752:	d1 2c       	mov	r13, r1
     754:	e1 2c       	mov	r14, r1
     756:	f1 2c       	mov	r15, r1
     758:	00 e0       	ldi	r16, 0x00	; 0
     75a:	10 e0       	ldi	r17, 0x00	; 0
     75c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__cmpdi2>
     760:	9c f4       	brge	.+38     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     762:	0e 94 4e 0a 	call	0x149c	; 0x149c <__adddi3>
     766:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2043>
     76a:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2043+0x1>
     76e:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2043+0x2>
     772:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2043+0x3>
     776:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2043+0x4>
     77a:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2043+0x5>
     77e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2043+0x6>
     782:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2043+0x7>
     786:	68 c0       	rjmp	.+208    	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     788:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <rp6Data+0x3>
     78c:	a9 84       	ldd	r10, Y+9	; 0x09
     78e:	ba 84       	ldd	r11, Y+10	; 0x0a
     790:	cb 84       	ldd	r12, Y+11	; 0x0b
     792:	dc 84       	ldd	r13, Y+12	; 0x0c
     794:	ed 84       	ldd	r14, Y+13	; 0x0d
     796:	fe 84       	ldd	r15, Y+14	; 0x0e
     798:	0f 85       	ldd	r16, Y+15	; 0x0f
     79a:	18 89       	ldd	r17, Y+16	; 0x10
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 05 09 	call	0x120a	; 0x120a <__muldi3>
     7ae:	0f 2e       	mov	r0, r31
     7b0:	f4 e6       	ldi	r31, 0x64	; 100
     7b2:	af 2e       	mov	r10, r31
     7b4:	f0 2d       	mov	r31, r0
     7b6:	b1 2c       	mov	r11, r1
     7b8:	c1 2c       	mov	r12, r1
     7ba:	d1 2c       	mov	r13, r1
     7bc:	e1 2c       	mov	r14, r1
     7be:	f1 2c       	mov	r15, r1
     7c0:	00 e0       	ldi	r16, 0x00	; 0
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__divdi3>
     7c8:	a9 84       	ldd	r10, Y+9	; 0x09
     7ca:	ba 84       	ldd	r11, Y+10	; 0x0a
     7cc:	cb 84       	ldd	r12, Y+11	; 0x0b
     7ce:	dc 84       	ldd	r13, Y+12	; 0x0c
     7d0:	ed 84       	ldd	r14, Y+13	; 0x0d
     7d2:	fe 84       	ldd	r15, Y+14	; 0x0e
     7d4:	0f 85       	ldd	r16, Y+15	; 0x0f
     7d6:	18 89       	ldd	r17, Y+16	; 0x10
     7d8:	0e 94 4e 0a 	call	0x149c	; 0x149c <__adddi3>
     7dc:	29 87       	std	Y+9, r18	; 0x09
     7de:	3a 87       	std	Y+10, r19	; 0x0a
     7e0:	4b 87       	std	Y+11, r20	; 0x0b
     7e2:	5c 87       	std	Y+12, r21	; 0x0c
     7e4:	b6 2f       	mov	r27, r22
     7e6:	a7 2f       	mov	r26, r23
     7e8:	f8 2f       	mov	r31, r24
     7ea:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     7ec:	22 2d       	mov	r18, r2
     7ee:	3c 8d       	ldd	r19, Y+28	; 0x1c
     7f0:	43 2d       	mov	r20, r3
     7f2:	53 2d       	mov	r21, r3
     7f4:	63 2d       	mov	r22, r3
     7f6:	73 2d       	mov	r23, r3
     7f8:	83 2d       	mov	r24, r3
     7fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     7fc:	a9 84       	ldd	r10, Y+9	; 0x09
     7fe:	ba 84       	ldd	r11, Y+10	; 0x0a
     800:	cb 84       	ldd	r12, Y+11	; 0x0b
     802:	dc 84       	ldd	r13, Y+12	; 0x0c
     804:	eb 2e       	mov	r14, r27
     806:	fa 2e       	mov	r15, r26
     808:	0f 2f       	mov	r16, r31
     80a:	1e 2f       	mov	r17, r30
     80c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__cmpdi2>
     810:	8c f0       	brlt	.+34     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     812:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.2043>
     816:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.2043+0x1>
     81a:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.2043+0x2>
     81e:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.2043+0x3>
     822:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2043+0x4>
     826:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.2043+0x5>
     82a:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.2043+0x6>
     82e:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.2043+0x7>
     832:	12 c0       	rjmp	.+36     	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     834:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2043>
     838:	4c 8d       	ldd	r20, Y+28	; 0x1c
     83a:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <currentDriveSpeed.2043+0x1>
     83e:	30 92 72 00 	sts	0x0072, r3	; 0x800072 <currentDriveSpeed.2043+0x2>
     842:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.2043+0x3>
     846:	30 92 74 00 	sts	0x0074, r3	; 0x800074 <currentDriveSpeed.2043+0x4>
     84a:	30 92 75 00 	sts	0x0075, r3	; 0x800075 <currentDriveSpeed.2043+0x5>
     84e:	30 92 76 00 	sts	0x0076, r3	; 0x800076 <currentDriveSpeed.2043+0x6>
     852:	5d 8d       	ldd	r21, Y+29	; 0x1d
     854:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2043+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     858:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2040>
     85c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2040+0x1>
     860:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2044+0x1>
     864:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2044>
	rightMotorDirection = currentDriveDirection;
     868:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     86c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     870:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2043>
     874:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2043+0x1>
     878:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2043+0x2>
     87c:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2043+0x3>
     880:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2043+0x4>
     884:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2043+0x5>
     888:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2043+0x6>
     88c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2043+0x7>
     890:	c2 2e       	mov	r12, r18
     892:	d3 2e       	mov	r13, r19
     894:	e4 2e       	mov	r14, r20
     896:	f5 2e       	mov	r15, r21
     898:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.2046>
     89c:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.2046+0x1>
     8a0:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.2046+0x2>
     8a4:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.2046+0x3>
	rightMotorSpeed = currentDriveSpeed;
     8a8:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.2047>
     8ac:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.2047+0x1>
     8b0:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.2047+0x2>
     8b4:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.2047+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     8b8:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <rp6Data+0x2>
     8bc:	0e 2e       	mov	r0, r30
     8be:	00 0c       	add	r0, r0
     8c0:	ff 0b       	sbc	r31, r31
     8c2:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end>
     8c6:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x1>
     8ca:	ea 17       	cp	r30, r26
     8cc:	fb 07       	cpc	r31, r27
     8ce:	81 f1       	breq	.+96     	; 0x930 <__stack+0xd1>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     8d0:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
     8d4:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     8d8:	ef 2b       	or	r30, r31
     8da:	29 f4       	brne	.+10     	; 0x8e6 <__stack+0x87>
			enableMotorEncoder(1);											//Enable the encoders
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <enableMotorEncoder>
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <__stack+0x8f>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 e7 01 	call	0x3ce	; 0x3ce <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     8ee:	29 89       	ldd	r18, Y+17	; 0x11
     8f0:	3a 89       	ldd	r19, Y+18	; 0x12
     8f2:	4b 89       	ldd	r20, Y+19	; 0x13
     8f4:	5c 89       	ldd	r21, Y+20	; 0x14
     8f6:	6d 89       	ldd	r22, Y+21	; 0x15
     8f8:	7e 89       	ldd	r23, Y+22	; 0x16
     8fa:	8f 89       	ldd	r24, Y+23	; 0x17
     8fc:	98 8d       	ldd	r25, Y+24	; 0x18
     8fe:	20 56       	subi	r18, 0x60	; 96
     900:	39 47       	sbci	r19, 0x79	; 121
     902:	4e 4f       	sbci	r20, 0xFE	; 254
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	6f 4f       	sbci	r22, 0xFF	; 255
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	8f 4f       	sbci	r24, 0xFF	; 255
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2039>
     912:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2039+0x1>
     916:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2039+0x2>
     91a:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2039+0x3>
     91e:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2039+0x4>
     922:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2039+0x5>
     926:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2039+0x6>
     92a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2039+0x7>
     92e:	d5 c0       	rjmp	.+426    	; 0xada <__stack+0x27b>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     930:	ef 3f       	cpi	r30, 0xFF	; 255
     932:	af ef       	ldi	r26, 0xFF	; 255
     934:	fa 07       	cpc	r31, r26
     936:	09 f0       	breq	.+2      	; 0x93a <__stack+0xdb>
     938:	45 c0       	rjmp	.+138    	; 0x9c4 <__stack+0x165>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     93a:	a0 e0       	ldi	r26, 0x00	; 0
     93c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__cmpdi2_s8>
     940:	29 f5       	brne	.+74     	; 0x98c <__stack+0x12d>
			leftMotorDirection = 0;											//Turn the left motor backwards
     942:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2044+0x1>
     946:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2044>
			rightMotorDirection = 1;										//Turn the right motor forwards
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     952:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     956:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <rp6Data+0x4>
     95a:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <rp6Data+0x5>
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	84 0d       	add	r24, r4
     964:	95 1d       	adc	r25, r5
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2046>
     96e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2046+0x1>
     972:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2046+0x2>
     976:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2046+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     97a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2047>
     97e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2047+0x1>
     982:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2047+0x2>
     986:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2047+0x3>
     98a:	a7 c0       	rjmp	.+334    	; 0xada <__stack+0x27b>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = rp6Data.driveSpeedThreshold;							//Set the left motor to minimal
     98c:	c2 01       	movw	r24, r4
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2046>
     996:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2046+0x1>
     99a:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2046+0x2>
     99e:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2046+0x3>
			rightMotorSpeed += rp6Data.turnRate;									//Increase the right motor with the turn rate
     9a2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <rp6Data+0x4>
     9a6:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <rp6Data+0x5>
     9aa:	c8 0e       	add	r12, r24
     9ac:	d9 1e       	adc	r13, r25
     9ae:	e1 1c       	adc	r14, r1
     9b0:	f1 1c       	adc	r15, r1
     9b2:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2047>
     9b6:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2047+0x1>
     9ba:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2047+0x2>
     9be:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2047+0x3>
     9c2:	8b c0       	rjmp	.+278    	; 0xada <__stack+0x27b>
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     9c4:	30 97       	sbiw	r30, 0x00	; 0
     9c6:	09 f0       	breq	.+2      	; 0x9ca <__stack+0x16b>
     9c8:	41 c0       	rjmp	.+130    	; 0xa4c <__stack+0x1ed>
		if(rp6Data.motorEncoderLVal != rp6Data.motorEncoderRVal){
     9ca:	e9 ea       	ldi	r30, 0xA9	; 169
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	05 85       	ldd	r16, Z+13	; 0x0d
     9d0:	16 85       	ldd	r17, Z+14	; 0x0e
     9d2:	1a 83       	std	Y+2, r17	; 0x02
     9d4:	09 83       	std	Y+1, r16	; 0x01
     9d6:	07 85       	ldd	r16, Z+15	; 0x0f
     9d8:	10 89       	ldd	r17, Z+16	; 0x10
     9da:	29 81       	ldd	r18, Y+1	; 0x01
     9dc:	3a 81       	ldd	r19, Y+2	; 0x02
     9de:	20 17       	cp	r18, r16
     9e0:	31 07       	cpc	r19, r17
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <__stack+0x187>
     9e4:	7a c0       	rjmp	.+244    	; 0xada <__stack+0x27b>
			if(rp6Data.motorEncoderLVal - rp6Data.motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((rp6Data.motorEncoderLVal - rp6Data.motorEncoderRVal), 2)) ) / 100;
     9e6:	c7 01       	movw	r24, r14
     9e8:	b6 01       	movw	r22, r12
     9ea:	0e 94 2b 07 	call	0xe56	; 0xe56 <__floatunsisf>
     9ee:	6b 01       	movw	r12, r22
     9f0:	7c 01       	movw	r14, r24
     9f2:	69 81       	ldd	r22, Y+1	; 0x01
     9f4:	7a 81       	ldd	r23, Y+2	; 0x02
     9f6:	60 1b       	sub	r22, r16
     9f8:	71 0b       	sbc	r23, r17
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 2b 07 	call	0xe56	; 0xe56 <__floatunsisf>
     a02:	4b 01       	movw	r8, r22
     a04:	5c 01       	movw	r10, r24
     a06:	a5 01       	movw	r20, r10
     a08:	94 01       	movw	r18, r8
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     a12:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <sqrt>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	c7 01       	movw	r24, r14
     a1c:	b6 01       	movw	r22, r12
     a1e:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	48 ec       	ldi	r20, 0xC8	; 200
     a28:	52 e4       	ldi	r21, 0x42	; 66
     a2a:	0e 94 84 06 	call	0xd08	; 0xd08 <__divsf3>
     a2e:	a7 01       	movw	r20, r14
     a30:	96 01       	movw	r18, r12
     a32:	0e 94 18 06 	call	0xc30	; 0xc30 <__addsf3>
     a36:	0e 94 f6 06 	call	0xdec	; 0xdec <__fixunssfsi>
     a3a:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.2047>
     a3e:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.2047+0x1>
     a42:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.2047+0x2>
     a46:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.2047+0x3>
     a4a:	47 c0       	rjmp	.+142    	; 0xada <__stack+0x27b>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((rp6Data.motorEncoderLVal - rp6Data.motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     a4c:	31 97       	sbiw	r30, 0x01	; 1
     a4e:	09 f0       	breq	.+2      	; 0xa52 <__stack+0x1f3>
     a50:	44 c0       	rjmp	.+136    	; 0xada <__stack+0x27b>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__cmpdi2_s8>
     a58:	29 f5       	brne	.+74     	; 0xaa4 <__stack+0x245>
			leftMotorDirection = 1;											//Left motor forward
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2044+0x1>
     a62:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2044>
			rightMotorDirection = 0;										//Right motor backward
     a66:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     a6a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     a6e:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <rp6Data+0x4>
     a72:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <rp6Data+0x5>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	84 0d       	add	r24, r4
     a7c:	95 1d       	adc	r25, r5
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2046>
     a86:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2046+0x1>
     a8a:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2046+0x2>
     a8e:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2046+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     a92:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2047>
     a96:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2047+0x1>
     a9a:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2047+0x2>
     a9e:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2047+0x3>
     aa2:	1b c0       	rjmp	.+54     	; 0xada <__stack+0x27b>
			}else{														//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed += rp6Data.turnRate;										//Increase the left motor with the set turn rate
     aa4:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <rp6Data+0x4>
     aa8:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <rp6Data+0x5>
     aac:	c8 0e       	add	r12, r24
     aae:	d9 1e       	adc	r13, r25
     ab0:	e1 1c       	adc	r14, r1
     ab2:	f1 1c       	adc	r15, r1
     ab4:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.2046>
     ab8:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.2046+0x1>
     abc:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.2046+0x2>
     ac0:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.2046+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold;							//Set right motor to minimal
     ac4:	c2 01       	movw	r24, r4
     ac6:	a0 e0       	ldi	r26, 0x00	; 0
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2047>
     ace:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2047+0x1>
     ad2:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2047+0x2>
     ad6:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2047+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     ada:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2047>
     ade:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2047+0x1>
     ae2:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2047+0x2>
     ae6:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2047+0x3>
     aea:	d7 01       	movw	r26, r14
     aec:	c6 01       	movw	r24, r12
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	aa 1f       	adc	r26, r26
     af4:	bb 1f       	adc	r27, r27
     af6:	8c 0d       	add	r24, r12
     af8:	9d 1d       	adc	r25, r13
     afa:	ae 1d       	adc	r26, r14
     afc:	bf 1d       	adc	r27, r15
     afe:	ac 01       	movw	r20, r24
     b00:	bd 01       	movw	r22, r26
     b02:	44 0f       	add	r20, r20
     b04:	55 1f       	adc	r21, r21
     b06:	66 1f       	adc	r22, r22
     b08:	77 1f       	adc	r23, r23
     b0a:	44 0f       	add	r20, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	66 1f       	adc	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	8c 01       	movw	r16, r24
     b14:	9d 01       	movw	r18, r26
     b16:	04 0f       	add	r16, r20
     b18:	15 1f       	adc	r17, r21
     b1a:	26 1f       	adc	r18, r22
     b1c:	37 1f       	adc	r19, r23
     b1e:	c9 01       	movw	r24, r18
     b20:	b8 01       	movw	r22, r16
     b22:	24 e6       	ldi	r18, 0x64	; 100
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__udivmodsi4>
     b2e:	c2 0e       	add	r12, r18
     b30:	d3 1e       	adc	r13, r19
     b32:	e4 1e       	adc	r14, r20
     b34:	f5 1e       	adc	r15, r21
     b36:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2047>
     b3a:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2047+0x1>
     b3e:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2047+0x2>
     b42:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2047+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     b46:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2046>
     b4a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2046+0x1>
     b4e:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2046+0x2>
     b52:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2046+0x3>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	94 46       	sbci	r25, 0x64	; 100
     b5a:	a1 05       	cpc	r26, r1
     b5c:	b1 05       	cpc	r27, r1
     b5e:	60 f0       	brcs	.+24     	; 0xb78 <__stack+0x319>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	94 e6       	ldi	r25, 0x64	; 100
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2046>
     b6c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2046+0x1>
     b70:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2046+0x2>
     b74:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2046+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     b78:	21 e3       	ldi	r18, 0x31	; 49
     b7a:	c2 16       	cp	r12, r18
     b7c:	25 e7       	ldi	r18, 0x75	; 117
     b7e:	d2 06       	cpc	r13, r18
     b80:	e1 04       	cpc	r14, r1
     b82:	f1 04       	cpc	r15, r1
     b84:	60 f0       	brcs	.+24     	; 0xb9e <__stack+0x33f>
		rightMotorSpeed = 30000;						//Set it back to its max
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	95 e7       	ldi	r25, 0x75	; 117
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2047>
     b92:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2047+0x1>
     b96:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2047+0x2>
     b9a:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2047+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     b9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2044>
     ba2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2044+0x1>
     ba6:	89 2b       	or	r24, r25
     ba8:	11 f0       	breq	.+4      	; 0xbae <__stack+0x34f>
		PORTC &= 0b11111011;
     baa:	aa 98       	cbi	0x15, 2	; 21
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <__stack+0x351>
	}else{
		PORTC |= 0b00000100;
     bae:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     bb0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     bb4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     bb8:	89 2b       	or	r24, r25
     bba:	11 f0       	breq	.+4      	; 0xbc0 <__stack+0x361>
		PORTC &= 0b11110111;
     bbc:	ab 98       	cbi	0x15, 3	; 21
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <__stack+0x363>
	}else{
		PORTC |= 0b00001000;
     bc0:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     bc2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2047>
     bc6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2047+0x1>
     bca:	9b bd       	out	0x2b, r25	; 43
     bcc:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     bce:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2046>
     bd2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2046+0x1>
     bd6:	99 bd       	out	0x29, r25	; 41
     bd8:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	6d 96       	adiw	r28, 0x1d	; 29
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	3f 90       	pop	r3
     c0c:	2f 90       	pop	r2
     c0e:	08 95       	ret

00000c10 <main>:
	return databyte++;
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     c10:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     c12:	0e 94 be 00 	call	0x17c	; 0x17c <init_micros>
	
	init_motor();
     c16:	0e 94 ae 01 	call	0x35c	; 0x35c <init_motor>
	init_LED();
     c1a:	0e 94 b7 00 	call	0x16e	; 0x16e <init_LED>
	
	init_i2c_slave(8);
     c1e:	88 e0       	ldi	r24, 0x08	; 8
     c20:	0e 94 49 00 	call	0x92	; 0x92 <init_i2c_slave>
	
	init_rp6Data();
     c24:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <init_rp6Data>
	//-----------------------
	
	while(1){
		motorDriver();
     c28:	0e 94 f7 01 	call	0x3ee	; 0x3ee <motorDriver>
     c2c:	fd cf       	rjmp	.-6      	; 0xc28 <main+0x18>

00000c2e <__subsf3>:
     c2e:	50 58       	subi	r21, 0x80	; 128

00000c30 <__addsf3>:
     c30:	bb 27       	eor	r27, r27
     c32:	aa 27       	eor	r26, r26
     c34:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__addsf3x>
     c38:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_round>
     c3c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscA>
     c40:	38 f0       	brcs	.+14     	; 0xc50 <__addsf3+0x20>
     c42:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscB>
     c46:	20 f0       	brcs	.+8      	; 0xc50 <__addsf3+0x20>
     c48:	39 f4       	brne	.+14     	; 0xc58 <__addsf3+0x28>
     c4a:	9f 3f       	cpi	r25, 0xFF	; 255
     c4c:	19 f4       	brne	.+6      	; 0xc54 <__addsf3+0x24>
     c4e:	26 f4       	brtc	.+8      	; 0xc58 <__addsf3+0x28>
     c50:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>
     c54:	0e f4       	brtc	.+2      	; 0xc58 <__addsf3+0x28>
     c56:	e0 95       	com	r30
     c58:	e7 fb       	bst	r30, 7
     c5a:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>

00000c5e <__addsf3x>:
     c5e:	e9 2f       	mov	r30, r25
     c60:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_split3>
     c64:	58 f3       	brcs	.-42     	; 0xc3c <__addsf3+0xc>
     c66:	ba 17       	cp	r27, r26
     c68:	62 07       	cpc	r22, r18
     c6a:	73 07       	cpc	r23, r19
     c6c:	84 07       	cpc	r24, r20
     c6e:	95 07       	cpc	r25, r21
     c70:	20 f0       	brcs	.+8      	; 0xc7a <__addsf3x+0x1c>
     c72:	79 f4       	brne	.+30     	; 0xc92 <__addsf3x+0x34>
     c74:	a6 f5       	brtc	.+104    	; 0xcde <__addsf3x+0x80>
     c76:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_zero>
     c7a:	0e f4       	brtc	.+2      	; 0xc7e <__addsf3x+0x20>
     c7c:	e0 95       	com	r30
     c7e:	0b 2e       	mov	r0, r27
     c80:	ba 2f       	mov	r27, r26
     c82:	a0 2d       	mov	r26, r0
     c84:	0b 01       	movw	r0, r22
     c86:	b9 01       	movw	r22, r18
     c88:	90 01       	movw	r18, r0
     c8a:	0c 01       	movw	r0, r24
     c8c:	ca 01       	movw	r24, r20
     c8e:	a0 01       	movw	r20, r0
     c90:	11 24       	eor	r1, r1
     c92:	ff 27       	eor	r31, r31
     c94:	59 1b       	sub	r21, r25
     c96:	99 f0       	breq	.+38     	; 0xcbe <__addsf3x+0x60>
     c98:	59 3f       	cpi	r21, 0xF9	; 249
     c9a:	50 f4       	brcc	.+20     	; 0xcb0 <__addsf3x+0x52>
     c9c:	50 3e       	cpi	r21, 0xE0	; 224
     c9e:	68 f1       	brcs	.+90     	; 0xcfa <__addsf3x+0x9c>
     ca0:	1a 16       	cp	r1, r26
     ca2:	f0 40       	sbci	r31, 0x00	; 0
     ca4:	a2 2f       	mov	r26, r18
     ca6:	23 2f       	mov	r18, r19
     ca8:	34 2f       	mov	r19, r20
     caa:	44 27       	eor	r20, r20
     cac:	58 5f       	subi	r21, 0xF8	; 248
     cae:	f3 cf       	rjmp	.-26     	; 0xc96 <__addsf3x+0x38>
     cb0:	46 95       	lsr	r20
     cb2:	37 95       	ror	r19
     cb4:	27 95       	ror	r18
     cb6:	a7 95       	ror	r26
     cb8:	f0 40       	sbci	r31, 0x00	; 0
     cba:	53 95       	inc	r21
     cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__addsf3x+0x52>
     cbe:	7e f4       	brtc	.+30     	; 0xcde <__addsf3x+0x80>
     cc0:	1f 16       	cp	r1, r31
     cc2:	ba 0b       	sbc	r27, r26
     cc4:	62 0b       	sbc	r22, r18
     cc6:	73 0b       	sbc	r23, r19
     cc8:	84 0b       	sbc	r24, r20
     cca:	ba f0       	brmi	.+46     	; 0xcfa <__addsf3x+0x9c>
     ccc:	91 50       	subi	r25, 0x01	; 1
     cce:	a1 f0       	breq	.+40     	; 0xcf8 <__addsf3x+0x9a>
     cd0:	ff 0f       	add	r31, r31
     cd2:	bb 1f       	adc	r27, r27
     cd4:	66 1f       	adc	r22, r22
     cd6:	77 1f       	adc	r23, r23
     cd8:	88 1f       	adc	r24, r24
     cda:	c2 f7       	brpl	.-16     	; 0xccc <__addsf3x+0x6e>
     cdc:	0e c0       	rjmp	.+28     	; 0xcfa <__addsf3x+0x9c>
     cde:	ba 0f       	add	r27, r26
     ce0:	62 1f       	adc	r22, r18
     ce2:	73 1f       	adc	r23, r19
     ce4:	84 1f       	adc	r24, r20
     ce6:	48 f4       	brcc	.+18     	; 0xcfa <__addsf3x+0x9c>
     ce8:	87 95       	ror	r24
     cea:	77 95       	ror	r23
     cec:	67 95       	ror	r22
     cee:	b7 95       	ror	r27
     cf0:	f7 95       	ror	r31
     cf2:	9e 3f       	cpi	r25, 0xFE	; 254
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <__addsf3x+0x9a>
     cf6:	b0 cf       	rjmp	.-160    	; 0xc58 <__addsf3+0x28>
     cf8:	93 95       	inc	r25
     cfa:	88 0f       	add	r24, r24
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <__addsf3x+0xa2>
     cfe:	99 27       	eor	r25, r25
     d00:	ee 0f       	add	r30, r30
     d02:	97 95       	ror	r25
     d04:	87 95       	ror	r24
     d06:	08 95       	ret

00000d08 <__divsf3>:
     d08:	0e 94 98 06 	call	0xd30	; 0xd30 <__divsf3x>
     d0c:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_round>
     d10:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscB>
     d14:	58 f0       	brcs	.+22     	; 0xd2c <__divsf3+0x24>
     d16:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscA>
     d1a:	40 f0       	brcs	.+16     	; 0xd2c <__divsf3+0x24>
     d1c:	29 f4       	brne	.+10     	; 0xd28 <__divsf3+0x20>
     d1e:	5f 3f       	cpi	r21, 0xFF	; 255
     d20:	29 f0       	breq	.+10     	; 0xd2c <__divsf3+0x24>
     d22:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     d26:	51 11       	cpse	r21, r1
     d28:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
     d2c:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>

00000d30 <__divsf3x>:
     d30:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_split3>
     d34:	68 f3       	brcs	.-38     	; 0xd10 <__divsf3+0x8>

00000d36 <__divsf3_pse>:
     d36:	99 23       	and	r25, r25
     d38:	b1 f3       	breq	.-20     	; 0xd26 <__divsf3+0x1e>
     d3a:	55 23       	and	r21, r21
     d3c:	91 f3       	breq	.-28     	; 0xd22 <__divsf3+0x1a>
     d3e:	95 1b       	sub	r25, r21
     d40:	55 0b       	sbc	r21, r21
     d42:	bb 27       	eor	r27, r27
     d44:	aa 27       	eor	r26, r26
     d46:	62 17       	cp	r22, r18
     d48:	73 07       	cpc	r23, r19
     d4a:	84 07       	cpc	r24, r20
     d4c:	38 f0       	brcs	.+14     	; 0xd5c <__divsf3_pse+0x26>
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	aa 1f       	adc	r26, r26
     d5a:	a9 f3       	breq	.-22     	; 0xd46 <__divsf3_pse+0x10>
     d5c:	35 d0       	rcall	.+106    	; 0xdc8 <__divsf3_pse+0x92>
     d5e:	0e 2e       	mov	r0, r30
     d60:	3a f0       	brmi	.+14     	; 0xd70 <__divsf3_pse+0x3a>
     d62:	e0 e8       	ldi	r30, 0x80	; 128
     d64:	32 d0       	rcall	.+100    	; 0xdca <__divsf3_pse+0x94>
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	50 40       	sbci	r21, 0x00	; 0
     d6a:	e6 95       	lsr	r30
     d6c:	00 1c       	adc	r0, r0
     d6e:	ca f7       	brpl	.-14     	; 0xd62 <__divsf3_pse+0x2c>
     d70:	2b d0       	rcall	.+86     	; 0xdc8 <__divsf3_pse+0x92>
     d72:	fe 2f       	mov	r31, r30
     d74:	29 d0       	rcall	.+82     	; 0xdc8 <__divsf3_pse+0x92>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	bb 1f       	adc	r27, r27
     d7e:	26 17       	cp	r18, r22
     d80:	37 07       	cpc	r19, r23
     d82:	48 07       	cpc	r20, r24
     d84:	ab 07       	cpc	r26, r27
     d86:	b0 e8       	ldi	r27, 0x80	; 128
     d88:	09 f0       	breq	.+2      	; 0xd8c <__divsf3_pse+0x56>
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	80 2d       	mov	r24, r0
     d8e:	bf 01       	movw	r22, r30
     d90:	ff 27       	eor	r31, r31
     d92:	93 58       	subi	r25, 0x83	; 131
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	3a f0       	brmi	.+14     	; 0xda6 <__divsf3_pse+0x70>
     d98:	9e 3f       	cpi	r25, 0xFE	; 254
     d9a:	51 05       	cpc	r21, r1
     d9c:	78 f0       	brcs	.+30     	; 0xdbc <__divsf3_pse+0x86>
     d9e:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     da2:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
     da6:	5f 3f       	cpi	r21, 0xFF	; 255
     da8:	e4 f3       	brlt	.-8      	; 0xda2 <__divsf3_pse+0x6c>
     daa:	98 3e       	cpi	r25, 0xE8	; 232
     dac:	d4 f3       	brlt	.-12     	; 0xda2 <__divsf3_pse+0x6c>
     dae:	86 95       	lsr	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b7 95       	ror	r27
     db6:	f7 95       	ror	r31
     db8:	9f 5f       	subi	r25, 0xFF	; 255
     dba:	c9 f7       	brne	.-14     	; 0xdae <__divsf3_pse+0x78>
     dbc:	88 0f       	add	r24, r24
     dbe:	91 1d       	adc	r25, r1
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	97 f9       	bld	r25, 7
     dc6:	08 95       	ret
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	bb 1f       	adc	r27, r27
     dd2:	62 17       	cp	r22, r18
     dd4:	73 07       	cpc	r23, r19
     dd6:	84 07       	cpc	r24, r20
     dd8:	ba 07       	cpc	r27, r26
     dda:	20 f0       	brcs	.+8      	; 0xde4 <__divsf3_pse+0xae>
     ddc:	62 1b       	sub	r22, r18
     dde:	73 0b       	sbc	r23, r19
     de0:	84 0b       	sbc	r24, r20
     de2:	ba 0b       	sbc	r27, r26
     de4:	ee 1f       	adc	r30, r30
     de6:	88 f7       	brcc	.-30     	; 0xdca <__divsf3_pse+0x94>
     de8:	e0 95       	com	r30
     dea:	08 95       	ret

00000dec <__fixunssfsi>:
     dec:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_splitA>
     df0:	88 f0       	brcs	.+34     	; 0xe14 <__fixunssfsi+0x28>
     df2:	9f 57       	subi	r25, 0x7F	; 127
     df4:	98 f0       	brcs	.+38     	; 0xe1c <__fixunssfsi+0x30>
     df6:	b9 2f       	mov	r27, r25
     df8:	99 27       	eor	r25, r25
     dfa:	b7 51       	subi	r27, 0x17	; 23
     dfc:	b0 f0       	brcs	.+44     	; 0xe2a <__fixunssfsi+0x3e>
     dfe:	e1 f0       	breq	.+56     	; 0xe38 <__fixunssfsi+0x4c>
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	88 1f       	adc	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	1a f0       	brmi	.+6      	; 0xe10 <__fixunssfsi+0x24>
     e0a:	ba 95       	dec	r27
     e0c:	c9 f7       	brne	.-14     	; 0xe00 <__fixunssfsi+0x14>
     e0e:	14 c0       	rjmp	.+40     	; 0xe38 <__fixunssfsi+0x4c>
     e10:	b1 30       	cpi	r27, 0x01	; 1
     e12:	91 f0       	breq	.+36     	; 0xe38 <__fixunssfsi+0x4c>
     e14:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_zero>
     e18:	b1 e0       	ldi	r27, 0x01	; 1
     e1a:	08 95       	ret
     e1c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_zero>
     e20:	67 2f       	mov	r22, r23
     e22:	78 2f       	mov	r23, r24
     e24:	88 27       	eor	r24, r24
     e26:	b8 5f       	subi	r27, 0xF8	; 248
     e28:	39 f0       	breq	.+14     	; 0xe38 <__fixunssfsi+0x4c>
     e2a:	b9 3f       	cpi	r27, 0xF9	; 249
     e2c:	cc f3       	brlt	.-14     	; 0xe20 <__fixunssfsi+0x34>
     e2e:	86 95       	lsr	r24
     e30:	77 95       	ror	r23
     e32:	67 95       	ror	r22
     e34:	b3 95       	inc	r27
     e36:	d9 f7       	brne	.-10     	; 0xe2e <__fixunssfsi+0x42>
     e38:	3e f4       	brtc	.+14     	; 0xe48 <__fixunssfsi+0x5c>
     e3a:	90 95       	com	r25
     e3c:	80 95       	com	r24
     e3e:	70 95       	com	r23
     e40:	61 95       	neg	r22
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	8f 4f       	sbci	r24, 0xFF	; 255
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	08 95       	ret

00000e4a <__floatdisf>:
     e4a:	97 fb       	bst	r25, 7
     e4c:	16 f4       	brtc	.+4      	; 0xe52 <__floatdisf+0x8>
     e4e:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_negdi>
     e52:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_di2sf>

00000e56 <__floatunsisf>:
     e56:	e8 94       	clt
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <__floatsisf+0x12>

00000e5a <__floatsisf>:
     e5a:	97 fb       	bst	r25, 7
     e5c:	3e f4       	brtc	.+14     	; 0xe6c <__floatsisf+0x12>
     e5e:	90 95       	com	r25
     e60:	80 95       	com	r24
     e62:	70 95       	com	r23
     e64:	61 95       	neg	r22
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	99 23       	and	r25, r25
     e6e:	a9 f0       	breq	.+42     	; 0xe9a <__floatsisf+0x40>
     e70:	f9 2f       	mov	r31, r25
     e72:	96 e9       	ldi	r25, 0x96	; 150
     e74:	bb 27       	eor	r27, r27
     e76:	93 95       	inc	r25
     e78:	f6 95       	lsr	r31
     e7a:	87 95       	ror	r24
     e7c:	77 95       	ror	r23
     e7e:	67 95       	ror	r22
     e80:	b7 95       	ror	r27
     e82:	f1 11       	cpse	r31, r1
     e84:	f8 cf       	rjmp	.-16     	; 0xe76 <__floatsisf+0x1c>
     e86:	fa f4       	brpl	.+62     	; 0xec6 <__floatsisf+0x6c>
     e88:	bb 0f       	add	r27, r27
     e8a:	11 f4       	brne	.+4      	; 0xe90 <__floatsisf+0x36>
     e8c:	60 ff       	sbrs	r22, 0
     e8e:	1b c0       	rjmp	.+54     	; 0xec6 <__floatsisf+0x6c>
     e90:	6f 5f       	subi	r22, 0xFF	; 255
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <__floatsisf+0x6c>
     e9a:	88 23       	and	r24, r24
     e9c:	11 f0       	breq	.+4      	; 0xea2 <__floatsisf+0x48>
     e9e:	96 e9       	ldi	r25, 0x96	; 150
     ea0:	11 c0       	rjmp	.+34     	; 0xec4 <__floatsisf+0x6a>
     ea2:	77 23       	and	r23, r23
     ea4:	21 f0       	breq	.+8      	; 0xeae <__floatsisf+0x54>
     ea6:	9e e8       	ldi	r25, 0x8E	; 142
     ea8:	87 2f       	mov	r24, r23
     eaa:	76 2f       	mov	r23, r22
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <__floatsisf+0x5e>
     eae:	66 23       	and	r22, r22
     eb0:	71 f0       	breq	.+28     	; 0xece <__floatsisf+0x74>
     eb2:	96 e8       	ldi	r25, 0x86	; 134
     eb4:	86 2f       	mov	r24, r22
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	2a f0       	brmi	.+10     	; 0xec6 <__floatsisf+0x6c>
     ebc:	9a 95       	dec	r25
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	da f7       	brpl	.-10     	; 0xebc <__floatsisf+0x62>
     ec6:	88 0f       	add	r24, r24
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	97 f9       	bld	r25, 7
     ece:	08 95       	ret

00000ed0 <__floatundisf>:
     ed0:	e8 94       	clt

00000ed2 <__fp_di2sf>:
     ed2:	f9 2f       	mov	r31, r25
     ed4:	96 eb       	ldi	r25, 0xB6	; 182
     ed6:	ff 23       	and	r31, r31
     ed8:	81 f0       	breq	.+32     	; 0xefa <__fp_di2sf+0x28>
     eda:	12 16       	cp	r1, r18
     edc:	13 06       	cpc	r1, r19
     ede:	14 06       	cpc	r1, r20
     ee0:	44 0b       	sbc	r20, r20
     ee2:	93 95       	inc	r25
     ee4:	f6 95       	lsr	r31
     ee6:	87 95       	ror	r24
     ee8:	77 95       	ror	r23
     eea:	67 95       	ror	r22
     eec:	57 95       	ror	r21
     eee:	40 40       	sbci	r20, 0x00	; 0
     ef0:	ff 23       	and	r31, r31
     ef2:	b9 f7       	brne	.-18     	; 0xee2 <__fp_di2sf+0x10>
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__fp_di2sf+0x5a>
     ef6:	99 27       	eor	r25, r25
     ef8:	08 95       	ret
     efa:	88 23       	and	r24, r24
     efc:	51 f4       	brne	.+20     	; 0xf12 <__fp_di2sf+0x40>
     efe:	98 50       	subi	r25, 0x08	; 8
     f00:	d2 f7       	brpl	.-12     	; 0xef6 <__fp_di2sf+0x24>
     f02:	87 2b       	or	r24, r23
     f04:	76 2f       	mov	r23, r22
     f06:	65 2f       	mov	r22, r21
     f08:	54 2f       	mov	r21, r20
     f0a:	43 2f       	mov	r20, r19
     f0c:	32 2f       	mov	r19, r18
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	b1 f3       	breq	.-20     	; 0xefe <__fp_di2sf+0x2c>
     f12:	12 16       	cp	r1, r18
     f14:	13 06       	cpc	r1, r19
     f16:	14 06       	cpc	r1, r20
     f18:	44 0b       	sbc	r20, r20
     f1a:	88 23       	and	r24, r24
     f1c:	3a f0       	brmi	.+14     	; 0xf2c <__fp_di2sf+0x5a>
     f1e:	9a 95       	dec	r25
     f20:	44 0f       	add	r20, r20
     f22:	55 1f       	adc	r21, r21
     f24:	66 1f       	adc	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	ca f7       	brpl	.-14     	; 0xf1e <__fp_di2sf+0x4c>
     f2c:	55 23       	and	r21, r21
     f2e:	4a f4       	brpl	.+18     	; 0xf42 <__fp_di2sf+0x70>
     f30:	44 0f       	add	r20, r20
     f32:	55 1f       	adc	r21, r21
     f34:	11 f4       	brne	.+4      	; 0xf3a <__fp_di2sf+0x68>
     f36:	60 ff       	sbrs	r22, 0
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <__fp_di2sf+0x70>
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	88 0f       	add	r24, r24
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__fp_inf>:
     f4c:	97 f9       	bld	r25, 7
     f4e:	9f 67       	ori	r25, 0x7F	; 127
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	08 95       	ret

00000f58 <__fp_nan>:
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	08 95       	ret

00000f5e <__fp_negdi>:
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	60 95       	com	r22
     f66:	50 95       	com	r21
     f68:	40 95       	com	r20
     f6a:	30 95       	com	r19
     f6c:	21 95       	neg	r18
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	4f 4f       	sbci	r20, 0xFF	; 255
     f72:	5f 4f       	sbci	r21, 0xFF	; 255
     f74:	6f 4f       	sbci	r22, 0xFF	; 255
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	8f 4f       	sbci	r24, 0xFF	; 255
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	08 95       	ret

00000f7e <__fp_pscA>:
     f7e:	00 24       	eor	r0, r0
     f80:	0a 94       	dec	r0
     f82:	16 16       	cp	r1, r22
     f84:	17 06       	cpc	r1, r23
     f86:	18 06       	cpc	r1, r24
     f88:	09 06       	cpc	r0, r25
     f8a:	08 95       	ret

00000f8c <__fp_pscB>:
     f8c:	00 24       	eor	r0, r0
     f8e:	0a 94       	dec	r0
     f90:	12 16       	cp	r1, r18
     f92:	13 06       	cpc	r1, r19
     f94:	14 06       	cpc	r1, r20
     f96:	05 06       	cpc	r0, r21
     f98:	08 95       	ret

00000f9a <__fp_round>:
     f9a:	09 2e       	mov	r0, r25
     f9c:	03 94       	inc	r0
     f9e:	00 0c       	add	r0, r0
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <__fp_round+0xc>
     fa2:	88 23       	and	r24, r24
     fa4:	52 f0       	brmi	.+20     	; 0xfba <__fp_round+0x20>
     fa6:	bb 0f       	add	r27, r27
     fa8:	40 f4       	brcc	.+16     	; 0xfba <__fp_round+0x20>
     faa:	bf 2b       	or	r27, r31
     fac:	11 f4       	brne	.+4      	; 0xfb2 <__fp_round+0x18>
     fae:	60 ff       	sbrs	r22, 0
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <__fp_round+0x20>
     fb2:	6f 5f       	subi	r22, 0xFF	; 255
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	08 95       	ret

00000fbc <__fp_split3>:
     fbc:	57 fd       	sbrc	r21, 7
     fbe:	90 58       	subi	r25, 0x80	; 128
     fc0:	44 0f       	add	r20, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	59 f0       	breq	.+22     	; 0xfdc <__fp_splitA+0x10>
     fc6:	5f 3f       	cpi	r21, 0xFF	; 255
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <__fp_splitA+0x1a>
     fca:	47 95       	ror	r20

00000fcc <__fp_splitA>:
     fcc:	88 0f       	add	r24, r24
     fce:	97 fb       	bst	r25, 7
     fd0:	99 1f       	adc	r25, r25
     fd2:	61 f0       	breq	.+24     	; 0xfec <__fp_splitA+0x20>
     fd4:	9f 3f       	cpi	r25, 0xFF	; 255
     fd6:	79 f0       	breq	.+30     	; 0xff6 <__fp_splitA+0x2a>
     fd8:	87 95       	ror	r24
     fda:	08 95       	ret
     fdc:	12 16       	cp	r1, r18
     fde:	13 06       	cpc	r1, r19
     fe0:	14 06       	cpc	r1, r20
     fe2:	55 1f       	adc	r21, r21
     fe4:	f2 cf       	rjmp	.-28     	; 0xfca <__fp_split3+0xe>
     fe6:	46 95       	lsr	r20
     fe8:	f1 df       	rcall	.-30     	; 0xfcc <__fp_splitA>
     fea:	08 c0       	rjmp	.+16     	; 0xffc <__fp_splitA+0x30>
     fec:	16 16       	cp	r1, r22
     fee:	17 06       	cpc	r1, r23
     ff0:	18 06       	cpc	r1, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	f1 cf       	rjmp	.-30     	; 0xfd8 <__fp_splitA+0xc>
     ff6:	86 95       	lsr	r24
     ff8:	71 05       	cpc	r23, r1
     ffa:	61 05       	cpc	r22, r1
     ffc:	08 94       	sec
     ffe:	08 95       	ret

00001000 <__fp_zero>:
    1000:	e8 94       	clt

00001002 <__fp_szero>:
    1002:	bb 27       	eor	r27, r27
    1004:	66 27       	eor	r22, r22
    1006:	77 27       	eor	r23, r23
    1008:	cb 01       	movw	r24, r22
    100a:	97 f9       	bld	r25, 7
    100c:	08 95       	ret

0000100e <__mulsf3>:
    100e:	0e 94 1a 08 	call	0x1034	; 0x1034 <__mulsf3x>
    1012:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_round>
    1016:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscA>
    101a:	38 f0       	brcs	.+14     	; 0x102a <__mulsf3+0x1c>
    101c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscB>
    1020:	20 f0       	brcs	.+8      	; 0x102a <__mulsf3+0x1c>
    1022:	95 23       	and	r25, r21
    1024:	11 f0       	breq	.+4      	; 0x102a <__mulsf3+0x1c>
    1026:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
    102a:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>
    102e:	11 24       	eor	r1, r1
    1030:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>

00001034 <__mulsf3x>:
    1034:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_split3>
    1038:	70 f3       	brcs	.-36     	; 0x1016 <__mulsf3+0x8>

0000103a <__mulsf3_pse>:
    103a:	95 9f       	mul	r25, r21
    103c:	c1 f3       	breq	.-16     	; 0x102e <__mulsf3+0x20>
    103e:	95 0f       	add	r25, r21
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	55 1f       	adc	r21, r21
    1044:	62 9f       	mul	r22, r18
    1046:	f0 01       	movw	r30, r0
    1048:	72 9f       	mul	r23, r18
    104a:	bb 27       	eor	r27, r27
    104c:	f0 0d       	add	r31, r0
    104e:	b1 1d       	adc	r27, r1
    1050:	63 9f       	mul	r22, r19
    1052:	aa 27       	eor	r26, r26
    1054:	f0 0d       	add	r31, r0
    1056:	b1 1d       	adc	r27, r1
    1058:	aa 1f       	adc	r26, r26
    105a:	64 9f       	mul	r22, r20
    105c:	66 27       	eor	r22, r22
    105e:	b0 0d       	add	r27, r0
    1060:	a1 1d       	adc	r26, r1
    1062:	66 1f       	adc	r22, r22
    1064:	82 9f       	mul	r24, r18
    1066:	22 27       	eor	r18, r18
    1068:	b0 0d       	add	r27, r0
    106a:	a1 1d       	adc	r26, r1
    106c:	62 1f       	adc	r22, r18
    106e:	73 9f       	mul	r23, r19
    1070:	b0 0d       	add	r27, r0
    1072:	a1 1d       	adc	r26, r1
    1074:	62 1f       	adc	r22, r18
    1076:	83 9f       	mul	r24, r19
    1078:	a0 0d       	add	r26, r0
    107a:	61 1d       	adc	r22, r1
    107c:	22 1f       	adc	r18, r18
    107e:	74 9f       	mul	r23, r20
    1080:	33 27       	eor	r19, r19
    1082:	a0 0d       	add	r26, r0
    1084:	61 1d       	adc	r22, r1
    1086:	23 1f       	adc	r18, r19
    1088:	84 9f       	mul	r24, r20
    108a:	60 0d       	add	r22, r0
    108c:	21 1d       	adc	r18, r1
    108e:	82 2f       	mov	r24, r18
    1090:	76 2f       	mov	r23, r22
    1092:	6a 2f       	mov	r22, r26
    1094:	11 24       	eor	r1, r1
    1096:	9f 57       	subi	r25, 0x7F	; 127
    1098:	50 40       	sbci	r21, 0x00	; 0
    109a:	9a f0       	brmi	.+38     	; 0x10c2 <__mulsf3_pse+0x88>
    109c:	f1 f0       	breq	.+60     	; 0x10da <__mulsf3_pse+0xa0>
    109e:	88 23       	and	r24, r24
    10a0:	4a f0       	brmi	.+18     	; 0x10b4 <__mulsf3_pse+0x7a>
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	bb 1f       	adc	r27, r27
    10a8:	66 1f       	adc	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	91 50       	subi	r25, 0x01	; 1
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	a9 f7       	brne	.-22     	; 0x109e <__mulsf3_pse+0x64>
    10b4:	9e 3f       	cpi	r25, 0xFE	; 254
    10b6:	51 05       	cpc	r21, r1
    10b8:	80 f0       	brcs	.+32     	; 0x10da <__mulsf3_pse+0xa0>
    10ba:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
    10be:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
    10c2:	5f 3f       	cpi	r21, 0xFF	; 255
    10c4:	e4 f3       	brlt	.-8      	; 0x10be <__mulsf3_pse+0x84>
    10c6:	98 3e       	cpi	r25, 0xE8	; 232
    10c8:	d4 f3       	brlt	.-12     	; 0x10be <__mulsf3_pse+0x84>
    10ca:	86 95       	lsr	r24
    10cc:	77 95       	ror	r23
    10ce:	67 95       	ror	r22
    10d0:	b7 95       	ror	r27
    10d2:	f7 95       	ror	r31
    10d4:	e7 95       	ror	r30
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	c1 f7       	brne	.-16     	; 0x10ca <__mulsf3_pse+0x90>
    10da:	fe 2b       	or	r31, r30
    10dc:	88 0f       	add	r24, r24
    10de:	91 1d       	adc	r25, r1
    10e0:	96 95       	lsr	r25
    10e2:	87 95       	ror	r24
    10e4:	97 f9       	bld	r25, 7
    10e6:	08 95       	ret
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <__mulsf3_pse+0xb6>
    10ea:	16 f4       	brtc	.+4      	; 0x10f0 <__mulsf3_pse+0xb6>
    10ec:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>
    10f0:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__fp_mpack>

000010f4 <sqrt>:
    10f4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_splitA>
    10f8:	b8 f3       	brcs	.-18     	; 0x10e8 <__mulsf3_pse+0xae>
    10fa:	99 23       	and	r25, r25
    10fc:	c9 f3       	breq	.-14     	; 0x10f0 <__mulsf3_pse+0xb6>
    10fe:	b6 f3       	brts	.-20     	; 0x10ec <__mulsf3_pse+0xb2>
    1100:	9f 57       	subi	r25, 0x7F	; 127
    1102:	55 0b       	sbc	r21, r21
    1104:	87 ff       	sbrs	r24, 7
    1106:	0e 94 c8 08 	call	0x1190	; 0x1190 <__fp_norm2>
    110a:	00 24       	eor	r0, r0
    110c:	a0 e6       	ldi	r26, 0x60	; 96
    110e:	40 ea       	ldi	r20, 0xA0	; 160
    1110:	90 01       	movw	r18, r0
    1112:	80 58       	subi	r24, 0x80	; 128
    1114:	56 95       	lsr	r21
    1116:	97 95       	ror	r25
    1118:	28 f4       	brcc	.+10     	; 0x1124 <sqrt+0x30>
    111a:	80 5c       	subi	r24, 0xC0	; 192
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	20 f0       	brcs	.+8      	; 0x112c <sqrt+0x38>
    1124:	26 17       	cp	r18, r22
    1126:	37 07       	cpc	r19, r23
    1128:	48 07       	cpc	r20, r24
    112a:	30 f4       	brcc	.+12     	; 0x1138 <sqrt+0x44>
    112c:	62 1b       	sub	r22, r18
    112e:	73 0b       	sbc	r23, r19
    1130:	84 0b       	sbc	r24, r20
    1132:	20 29       	or	r18, r0
    1134:	31 29       	or	r19, r1
    1136:	4a 2b       	or	r20, r26
    1138:	a6 95       	lsr	r26
    113a:	17 94       	ror	r1
    113c:	07 94       	ror	r0
    113e:	20 25       	eor	r18, r0
    1140:	31 25       	eor	r19, r1
    1142:	4a 27       	eor	r20, r26
    1144:	58 f7       	brcc	.-42     	; 0x111c <sqrt+0x28>
    1146:	66 0f       	add	r22, r22
    1148:	77 1f       	adc	r23, r23
    114a:	88 1f       	adc	r24, r24
    114c:	20 f0       	brcs	.+8      	; 0x1156 <sqrt+0x62>
    114e:	26 17       	cp	r18, r22
    1150:	37 07       	cpc	r19, r23
    1152:	48 07       	cpc	r20, r24
    1154:	30 f4       	brcc	.+12     	; 0x1162 <sqrt+0x6e>
    1156:	62 0b       	sbc	r22, r18
    1158:	73 0b       	sbc	r23, r19
    115a:	84 0b       	sbc	r24, r20
    115c:	20 0d       	add	r18, r0
    115e:	31 1d       	adc	r19, r1
    1160:	41 1d       	adc	r20, r1
    1162:	a0 95       	com	r26
    1164:	81 f7       	brne	.-32     	; 0x1146 <sqrt+0x52>
    1166:	b9 01       	movw	r22, r18
    1168:	84 2f       	mov	r24, r20
    116a:	91 58       	subi	r25, 0x81	; 129
    116c:	88 0f       	add	r24, r24
    116e:	96 95       	lsr	r25
    1170:	87 95       	ror	r24
    1172:	08 95       	ret

00001174 <__fp_mpack>:
    1174:	9f 3f       	cpi	r25, 0xFF	; 255
    1176:	31 f0       	breq	.+12     	; 0x1184 <__fp_mpack_finite+0xc>

00001178 <__fp_mpack_finite>:
    1178:	91 50       	subi	r25, 0x01	; 1
    117a:	20 f4       	brcc	.+8      	; 0x1184 <__fp_mpack_finite+0xc>
    117c:	87 95       	ror	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	b7 95       	ror	r27
    1184:	88 0f       	add	r24, r24
    1186:	91 1d       	adc	r25, r1
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__fp_norm2>:
    1190:	91 50       	subi	r25, 0x01	; 1
    1192:	50 40       	sbci	r21, 0x00	; 0
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	d2 f7       	brpl	.-12     	; 0x1190 <__fp_norm2>
    119c:	08 95       	ret

0000119e <__divmodhi4>:
    119e:	97 fb       	bst	r25, 7
    11a0:	07 2e       	mov	r0, r23
    11a2:	16 f4       	brtc	.+4      	; 0x11a8 <__divmodhi4+0xa>
    11a4:	00 94       	com	r0
    11a6:	07 d0       	rcall	.+14     	; 0x11b6 <__divmodhi4_neg1>
    11a8:	77 fd       	sbrc	r23, 7
    11aa:	09 d0       	rcall	.+18     	; 0x11be <__divmodhi4_neg2>
    11ac:	0e 94 81 0a 	call	0x1502	; 0x1502 <__udivmodhi4>
    11b0:	07 fc       	sbrc	r0, 7
    11b2:	05 d0       	rcall	.+10     	; 0x11be <__divmodhi4_neg2>
    11b4:	3e f4       	brtc	.+14     	; 0x11c4 <__divmodhi4_exit>

000011b6 <__divmodhi4_neg1>:
    11b6:	90 95       	com	r25
    11b8:	81 95       	neg	r24
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	08 95       	ret

000011be <__divmodhi4_neg2>:
    11be:	70 95       	com	r23
    11c0:	61 95       	neg	r22
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255

000011c4 <__divmodhi4_exit>:
    11c4:	08 95       	ret

000011c6 <__udivmodsi4>:
    11c6:	a1 e2       	ldi	r26, 0x21	; 33
    11c8:	1a 2e       	mov	r1, r26
    11ca:	aa 1b       	sub	r26, r26
    11cc:	bb 1b       	sub	r27, r27
    11ce:	fd 01       	movw	r30, r26
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <__udivmodsi4_ep>

000011d2 <__udivmodsi4_loop>:
    11d2:	aa 1f       	adc	r26, r26
    11d4:	bb 1f       	adc	r27, r27
    11d6:	ee 1f       	adc	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	a2 17       	cp	r26, r18
    11dc:	b3 07       	cpc	r27, r19
    11de:	e4 07       	cpc	r30, r20
    11e0:	f5 07       	cpc	r31, r21
    11e2:	20 f0       	brcs	.+8      	; 0x11ec <__udivmodsi4_ep>
    11e4:	a2 1b       	sub	r26, r18
    11e6:	b3 0b       	sbc	r27, r19
    11e8:	e4 0b       	sbc	r30, r20
    11ea:	f5 0b       	sbc	r31, r21

000011ec <__udivmodsi4_ep>:
    11ec:	66 1f       	adc	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	1a 94       	dec	r1
    11f6:	69 f7       	brne	.-38     	; 0x11d2 <__udivmodsi4_loop>
    11f8:	60 95       	com	r22
    11fa:	70 95       	com	r23
    11fc:	80 95       	com	r24
    11fe:	90 95       	com	r25
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	bd 01       	movw	r22, r26
    1206:	cf 01       	movw	r24, r30
    1208:	08 95       	ret

0000120a <__muldi3>:
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	1f 93       	push	r17
    1210:	0f 93       	push	r16
    1212:	9a 9d       	mul	r25, r10
    1214:	f0 2d       	mov	r31, r0
    1216:	21 9f       	mul	r18, r17
    1218:	f0 0d       	add	r31, r0
    121a:	8b 9d       	mul	r24, r11
    121c:	f0 0d       	add	r31, r0
    121e:	8a 9d       	mul	r24, r10
    1220:	e0 2d       	mov	r30, r0
    1222:	f1 0d       	add	r31, r1
    1224:	03 9f       	mul	r16, r19
    1226:	f0 0d       	add	r31, r0
    1228:	02 9f       	mul	r16, r18
    122a:	e0 0d       	add	r30, r0
    122c:	f1 1d       	adc	r31, r1
    122e:	4e 9d       	mul	r20, r14
    1230:	e0 0d       	add	r30, r0
    1232:	f1 1d       	adc	r31, r1
    1234:	5e 9d       	mul	r21, r14
    1236:	f0 0d       	add	r31, r0
    1238:	4f 9d       	mul	r20, r15
    123a:	f0 0d       	add	r31, r0
    123c:	7f 93       	push	r23
    123e:	6f 93       	push	r22
    1240:	bf 92       	push	r11
    1242:	af 92       	push	r10
    1244:	5f 93       	push	r21
    1246:	4f 93       	push	r20
    1248:	d5 01       	movw	r26, r10
    124a:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    124e:	8b 01       	movw	r16, r22
    1250:	ac 01       	movw	r20, r24
    1252:	d7 01       	movw	r26, r14
    1254:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    1258:	eb 01       	movw	r28, r22
    125a:	e8 0f       	add	r30, r24
    125c:	f9 1f       	adc	r31, r25
    125e:	d6 01       	movw	r26, r12
    1260:	0e 94 55 09 	call	0x12aa	; 0x12aa <__muldi3_6>
    1264:	2f 91       	pop	r18
    1266:	3f 91       	pop	r19
    1268:	d6 01       	movw	r26, r12
    126a:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    126e:	c6 0f       	add	r28, r22
    1270:	d7 1f       	adc	r29, r23
    1272:	e8 1f       	adc	r30, r24
    1274:	f9 1f       	adc	r31, r25
    1276:	af 91       	pop	r26
    1278:	bf 91       	pop	r27
    127a:	0e 94 55 09 	call	0x12aa	; 0x12aa <__muldi3_6>
    127e:	2f 91       	pop	r18
    1280:	3f 91       	pop	r19
    1282:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    1286:	c6 0f       	add	r28, r22
    1288:	d7 1f       	adc	r29, r23
    128a:	e8 1f       	adc	r30, r24
    128c:	f9 1f       	adc	r31, r25
    128e:	d6 01       	movw	r26, r12
    1290:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    1294:	e6 0f       	add	r30, r22
    1296:	f7 1f       	adc	r31, r23
    1298:	98 01       	movw	r18, r16
    129a:	be 01       	movw	r22, r28
    129c:	cf 01       	movw	r24, r30
    129e:	11 24       	eor	r1, r1
    12a0:	0f 91       	pop	r16
    12a2:	1f 91       	pop	r17
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <__muldi3_6>:
    12aa:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    12ae:	46 0f       	add	r20, r22
    12b0:	57 1f       	adc	r21, r23
    12b2:	c8 1f       	adc	r28, r24
    12b4:	d9 1f       	adc	r29, r25
    12b6:	08 f4       	brcc	.+2      	; 0x12ba <__muldi3_6+0x10>
    12b8:	31 96       	adiw	r30, 0x01	; 1
    12ba:	08 95       	ret

000012bc <__moddi3>:
    12bc:	68 94       	set
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <__divdi3_moddi3>

000012c0 <__divdi3>:
    12c0:	e8 94       	clt

000012c2 <__divdi3_moddi3>:
    12c2:	f9 2f       	mov	r31, r25
    12c4:	f1 2b       	or	r31, r17
    12c6:	12 f0       	brmi	.+4      	; 0x12cc <__divdi3_moddi3+0xa>
    12c8:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__udivdi3_umoddi3>
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ec e6       	ldi	r30, 0x6C	; 108
    12d2:	f9 e0       	ldi	r31, 0x09	; 9
    12d4:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__prologue_saves__+0xc>
    12d8:	09 2e       	mov	r0, r25
    12da:	05 94       	asr	r0
    12dc:	22 f4       	brpl	.+8      	; 0x12e6 <__divdi3_moddi3+0x24>
    12de:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__negdi2>
    12e2:	11 23       	and	r17, r17
    12e4:	92 f4       	brpl	.+36     	; 0x130a <__divdi3_moddi3+0x48>
    12e6:	f0 e8       	ldi	r31, 0x80	; 128
    12e8:	0f 26       	eor	r0, r31
    12ea:	ff ef       	ldi	r31, 0xFF	; 255
    12ec:	e0 94       	com	r14
    12ee:	f0 94       	com	r15
    12f0:	00 95       	com	r16
    12f2:	10 95       	com	r17
    12f4:	b0 94       	com	r11
    12f6:	c0 94       	com	r12
    12f8:	d0 94       	com	r13
    12fa:	a1 94       	neg	r10
    12fc:	bf 0a       	sbc	r11, r31
    12fe:	cf 0a       	sbc	r12, r31
    1300:	df 0a       	sbc	r13, r31
    1302:	ef 0a       	sbc	r14, r31
    1304:	ff 0a       	sbc	r15, r31
    1306:	0f 0b       	sbc	r16, r31
    1308:	1f 0b       	sbc	r17, r31
    130a:	0e 94 9d 09 	call	0x133a	; 0x133a <__udivmod64>
    130e:	07 fc       	sbrc	r0, 7
    1310:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__negdi2>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	ec e0       	ldi	r30, 0x0C	; 12
    131a:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__epilogue_restores__+0xc>

0000131e <__umoddi3>:
    131e:	68 94       	set
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <__udivdi3_umoddi3>

00001322 <__udivdi3>:
    1322:	e8 94       	clt

00001324 <__udivdi3_umoddi3>:
    1324:	8f 92       	push	r8
    1326:	9f 92       	push	r9
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	0e 94 9d 09 	call	0x133a	; 0x133a <__udivmod64>
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	9f 90       	pop	r9
    1336:	8f 90       	pop	r8
    1338:	08 95       	ret

0000133a <__udivmod64>:
    133a:	88 24       	eor	r8, r8
    133c:	99 24       	eor	r9, r9
    133e:	f4 01       	movw	r30, r8
    1340:	e4 01       	movw	r28, r8
    1342:	b0 e4       	ldi	r27, 0x40	; 64
    1344:	9f 93       	push	r25
    1346:	aa 27       	eor	r26, r26
    1348:	9a 15       	cp	r25, r10
    134a:	8b 04       	cpc	r8, r11
    134c:	9c 04       	cpc	r9, r12
    134e:	ed 05       	cpc	r30, r13
    1350:	fe 05       	cpc	r31, r14
    1352:	cf 05       	cpc	r28, r15
    1354:	d0 07       	cpc	r29, r16
    1356:	a1 07       	cpc	r26, r17
    1358:	98 f4       	brcc	.+38     	; 0x1380 <__udivmod64+0x46>
    135a:	ad 2f       	mov	r26, r29
    135c:	dc 2f       	mov	r29, r28
    135e:	cf 2f       	mov	r28, r31
    1360:	fe 2f       	mov	r31, r30
    1362:	e9 2d       	mov	r30, r9
    1364:	98 2c       	mov	r9, r8
    1366:	89 2e       	mov	r8, r25
    1368:	98 2f       	mov	r25, r24
    136a:	87 2f       	mov	r24, r23
    136c:	76 2f       	mov	r23, r22
    136e:	65 2f       	mov	r22, r21
    1370:	54 2f       	mov	r21, r20
    1372:	43 2f       	mov	r20, r19
    1374:	32 2f       	mov	r19, r18
    1376:	22 27       	eor	r18, r18
    1378:	b8 50       	subi	r27, 0x08	; 8
    137a:	31 f7       	brne	.-52     	; 0x1348 <__udivmod64+0xe>
    137c:	bf 91       	pop	r27
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <__udivmod64+0x94>
    1380:	1b 2e       	mov	r1, r27
    1382:	bf 91       	pop	r27
    1384:	bb 27       	eor	r27, r27
    1386:	22 0f       	add	r18, r18
    1388:	33 1f       	adc	r19, r19
    138a:	44 1f       	adc	r20, r20
    138c:	55 1f       	adc	r21, r21
    138e:	66 1f       	adc	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	88 1f       	adc	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	88 1c       	adc	r8, r8
    1398:	99 1c       	adc	r9, r9
    139a:	ee 1f       	adc	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	cc 1f       	adc	r28, r28
    13a0:	dd 1f       	adc	r29, r29
    13a2:	aa 1f       	adc	r26, r26
    13a4:	bb 1f       	adc	r27, r27
    13a6:	8a 14       	cp	r8, r10
    13a8:	9b 04       	cpc	r9, r11
    13aa:	ec 05       	cpc	r30, r12
    13ac:	fd 05       	cpc	r31, r13
    13ae:	ce 05       	cpc	r28, r14
    13b0:	df 05       	cpc	r29, r15
    13b2:	a0 07       	cpc	r26, r16
    13b4:	b1 07       	cpc	r27, r17
    13b6:	48 f0       	brcs	.+18     	; 0x13ca <__udivmod64+0x90>
    13b8:	8a 18       	sub	r8, r10
    13ba:	9b 08       	sbc	r9, r11
    13bc:	ec 09       	sbc	r30, r12
    13be:	fd 09       	sbc	r31, r13
    13c0:	ce 09       	sbc	r28, r14
    13c2:	df 09       	sbc	r29, r15
    13c4:	a0 0b       	sbc	r26, r16
    13c6:	b1 0b       	sbc	r27, r17
    13c8:	21 60       	ori	r18, 0x01	; 1
    13ca:	1a 94       	dec	r1
    13cc:	e1 f6       	brne	.-72     	; 0x1386 <__udivmod64+0x4c>
    13ce:	2e f4       	brtc	.+10     	; 0x13da <__udivmod64+0xa0>
    13d0:	94 01       	movw	r18, r8
    13d2:	af 01       	movw	r20, r30
    13d4:	be 01       	movw	r22, r28
    13d6:	cd 01       	movw	r24, r26
    13d8:	00 0c       	add	r0, r0
    13da:	08 95       	ret

000013dc <__negdi2>:
    13dc:	60 95       	com	r22
    13de:	70 95       	com	r23
    13e0:	80 95       	com	r24
    13e2:	90 95       	com	r25
    13e4:	30 95       	com	r19
    13e6:	40 95       	com	r20
    13e8:	50 95       	com	r21
    13ea:	21 95       	neg	r18
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	4f 4f       	sbci	r20, 0xFF	; 255
    13f0:	5f 4f       	sbci	r21, 0xFF	; 255
    13f2:	6f 4f       	sbci	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	8f 4f       	sbci	r24, 0xFF	; 255
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	08 95       	ret

000013fc <__prologue_saves__>:
    13fc:	2f 92       	push	r2
    13fe:	3f 92       	push	r3
    1400:	4f 92       	push	r4
    1402:	5f 92       	push	r5
    1404:	6f 92       	push	r6
    1406:	7f 92       	push	r7
    1408:	8f 92       	push	r8
    140a:	9f 92       	push	r9
    140c:	af 92       	push	r10
    140e:	bf 92       	push	r11
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	ca 1b       	sub	r28, r26
    1426:	db 0b       	sbc	r29, r27
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	09 94       	ijmp

00001434 <__epilogue_restores__>:
    1434:	2a 88       	ldd	r2, Y+18	; 0x12
    1436:	39 88       	ldd	r3, Y+17	; 0x11
    1438:	48 88       	ldd	r4, Y+16	; 0x10
    143a:	5f 84       	ldd	r5, Y+15	; 0x0f
    143c:	6e 84       	ldd	r6, Y+14	; 0x0e
    143e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1440:	8c 84       	ldd	r8, Y+12	; 0x0c
    1442:	9b 84       	ldd	r9, Y+11	; 0x0b
    1444:	aa 84       	ldd	r10, Y+10	; 0x0a
    1446:	b9 84       	ldd	r11, Y+9	; 0x09
    1448:	c8 84       	ldd	r12, Y+8	; 0x08
    144a:	df 80       	ldd	r13, Y+7	; 0x07
    144c:	ee 80       	ldd	r14, Y+6	; 0x06
    144e:	fd 80       	ldd	r15, Y+5	; 0x05
    1450:	0c 81       	ldd	r16, Y+4	; 0x04
    1452:	1b 81       	ldd	r17, Y+3	; 0x03
    1454:	aa 81       	ldd	r26, Y+2	; 0x02
    1456:	b9 81       	ldd	r27, Y+1	; 0x01
    1458:	ce 0f       	add	r28, r30
    145a:	d1 1d       	adc	r29, r1
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	ed 01       	movw	r28, r26
    1468:	08 95       	ret

0000146a <__ashldi3>:
    146a:	0f 93       	push	r16
    146c:	08 30       	cpi	r16, 0x08	; 8
    146e:	90 f0       	brcs	.+36     	; 0x1494 <__ashldi3+0x2a>
    1470:	98 2f       	mov	r25, r24
    1472:	87 2f       	mov	r24, r23
    1474:	76 2f       	mov	r23, r22
    1476:	65 2f       	mov	r22, r21
    1478:	54 2f       	mov	r21, r20
    147a:	43 2f       	mov	r20, r19
    147c:	32 2f       	mov	r19, r18
    147e:	22 27       	eor	r18, r18
    1480:	08 50       	subi	r16, 0x08	; 8
    1482:	f4 cf       	rjmp	.-24     	; 0x146c <__ashldi3+0x2>
    1484:	22 0f       	add	r18, r18
    1486:	33 1f       	adc	r19, r19
    1488:	44 1f       	adc	r20, r20
    148a:	55 1f       	adc	r21, r21
    148c:	66 1f       	adc	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 95       	dec	r16
    1496:	b2 f7       	brpl	.-20     	; 0x1484 <__ashldi3+0x1a>
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <__adddi3>:
    149c:	2a 0d       	add	r18, r10
    149e:	3b 1d       	adc	r19, r11
    14a0:	4c 1d       	adc	r20, r12
    14a2:	5d 1d       	adc	r21, r13
    14a4:	6e 1d       	adc	r22, r14
    14a6:	7f 1d       	adc	r23, r15
    14a8:	80 1f       	adc	r24, r16
    14aa:	91 1f       	adc	r25, r17
    14ac:	08 95       	ret

000014ae <__adddi3_s8>:
    14ae:	00 24       	eor	r0, r0
    14b0:	a7 fd       	sbrc	r26, 7
    14b2:	00 94       	com	r0
    14b4:	2a 0f       	add	r18, r26
    14b6:	30 1d       	adc	r19, r0
    14b8:	40 1d       	adc	r20, r0
    14ba:	50 1d       	adc	r21, r0
    14bc:	60 1d       	adc	r22, r0
    14be:	70 1d       	adc	r23, r0
    14c0:	80 1d       	adc	r24, r0
    14c2:	90 1d       	adc	r25, r0
    14c4:	08 95       	ret

000014c6 <__subdi3>:
    14c6:	2a 19       	sub	r18, r10
    14c8:	3b 09       	sbc	r19, r11
    14ca:	4c 09       	sbc	r20, r12
    14cc:	5d 09       	sbc	r21, r13
    14ce:	6e 09       	sbc	r22, r14
    14d0:	7f 09       	sbc	r23, r15
    14d2:	80 0b       	sbc	r24, r16
    14d4:	91 0b       	sbc	r25, r17
    14d6:	08 95       	ret

000014d8 <__cmpdi2>:
    14d8:	2a 15       	cp	r18, r10
    14da:	3b 05       	cpc	r19, r11
    14dc:	4c 05       	cpc	r20, r12
    14de:	5d 05       	cpc	r21, r13
    14e0:	6e 05       	cpc	r22, r14
    14e2:	7f 05       	cpc	r23, r15
    14e4:	80 07       	cpc	r24, r16
    14e6:	91 07       	cpc	r25, r17
    14e8:	08 95       	ret

000014ea <__cmpdi2_s8>:
    14ea:	00 24       	eor	r0, r0
    14ec:	a7 fd       	sbrc	r26, 7
    14ee:	00 94       	com	r0
    14f0:	2a 17       	cp	r18, r26
    14f2:	30 05       	cpc	r19, r0
    14f4:	40 05       	cpc	r20, r0
    14f6:	50 05       	cpc	r21, r0
    14f8:	60 05       	cpc	r22, r0
    14fa:	70 05       	cpc	r23, r0
    14fc:	80 05       	cpc	r24, r0
    14fe:	90 05       	cpc	r25, r0
    1500:	08 95       	ret

00001502 <__udivmodhi4>:
    1502:	aa 1b       	sub	r26, r26
    1504:	bb 1b       	sub	r27, r27
    1506:	51 e1       	ldi	r21, 0x11	; 17
    1508:	07 c0       	rjmp	.+14     	; 0x1518 <__udivmodhi4_ep>

0000150a <__udivmodhi4_loop>:
    150a:	aa 1f       	adc	r26, r26
    150c:	bb 1f       	adc	r27, r27
    150e:	a6 17       	cp	r26, r22
    1510:	b7 07       	cpc	r27, r23
    1512:	10 f0       	brcs	.+4      	; 0x1518 <__udivmodhi4_ep>
    1514:	a6 1b       	sub	r26, r22
    1516:	b7 0b       	sbc	r27, r23

00001518 <__udivmodhi4_ep>:
    1518:	88 1f       	adc	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	5a 95       	dec	r21
    151e:	a9 f7       	brne	.-22     	; 0x150a <__udivmodhi4_loop>
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	08 95       	ret

0000152a <__umulhisi3>:
    152a:	a2 9f       	mul	r26, r18
    152c:	b0 01       	movw	r22, r0
    152e:	b3 9f       	mul	r27, r19
    1530:	c0 01       	movw	r24, r0
    1532:	a3 9f       	mul	r26, r19
    1534:	70 0d       	add	r23, r0
    1536:	81 1d       	adc	r24, r1
    1538:	11 24       	eor	r1, r1
    153a:	91 1d       	adc	r25, r1
    153c:	b2 9f       	mul	r27, r18
    153e:	70 0d       	add	r23, r0
    1540:	81 1d       	adc	r24, r1
    1542:	11 24       	eor	r1, r1
    1544:	91 1d       	adc	r25, r1
    1546:	08 95       	ret

00001548 <_exit>:
    1548:	f8 94       	cli

0000154a <__stop_program>:
    154a:	ff cf       	rjmp	.-2      	; 0x154a <__stop_program>
