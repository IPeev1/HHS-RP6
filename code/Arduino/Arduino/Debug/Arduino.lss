
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .data         00000180  00800200  000022a8  0000233c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000640  00800380  00800380  000024bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e0  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000126a  00000000  00000000  00004a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001361  00000000  00000000  00005d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00007068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bba  00000000  00000000  0000765c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001260  00000000  00000000  00008216  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00009476  2**0
=======
  0 .data         00000122  00800200  00001d56  00001dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000062f  00800322  00800322  00001f0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000223d  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e0  00000000  00000000  00004331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001296  00000000  00000000  00005511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  000067a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba5  00000000  00000000  00006df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001319  00000000  00000000  0000799d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008cb6  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
<<<<<<< Updated upstream
      3c:	f5 c7       	rjmp	.+4074   	; 0x1028 <__vector_15>
      3e:	00 00       	nop
      40:	cd c0       	rjmp	.+410    	; 0x1dc <__bad_interrupt>
=======
      3c:	e0 c6       	rjmp	.+3520   	; 0xdfe <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
>>>>>>> Stashed changes
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__vector_25>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
<<<<<<< Updated upstream
      8c:	d3 c2       	rjmp	.+1446   	; 0x634 <__vector_35>
=======
      8c:	02 c3       	rjmp	.+1540   	; 0x692 <__vector_35>
>>>>>>> Stashed changes
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
<<<<<<< Updated upstream
      9c:	c5 c5       	rjmp	.+2954   	; 0xc28 <__vector_39>
=======
      9c:	b1 c4       	rjmp	.+2402   	; 0xa00 <__vector_39>
>>>>>>> Stashed changes
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
<<<<<<< Updated upstream
      a8:	99 c0       	rjmp	.+306    	; 0x1dc <__bad_interrupt>
=======
      a8:	ec c3       	rjmp	.+2008   	; 0x882 <__vector_42>
>>>>>>> Stashed changes
      aa:	00 00       	nop
      ac:	96 c0       	rjmp	.+300    	; 0x1da <__bad_interrupt>
      ae:	00 00       	nop
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	92 c0       	rjmp	.+292    	; 0x1da <__bad_interrupt>
      b6:	00 00       	nop
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
<<<<<<< Updated upstream
      e4:	1c 02       	muls	r17, r28
      e6:	d1 02       	muls	r29, r17
      e8:	d1 02       	muls	r29, r17
      ea:	29 02       	muls	r18, r25
      ec:	d1 02       	muls	r29, r17
      ee:	d1 02       	muls	r29, r17
      f0:	d1 02       	muls	r29, r17
      f2:	d1 02       	muls	r29, r17
      f4:	d1 02       	muls	r29, r17
      f6:	d1 02       	muls	r29, r17
      f8:	d1 02       	muls	r29, r17
      fa:	d1 02       	muls	r29, r17
      fc:	5b 02       	muls	r21, r27
      fe:	c4 02       	muls	r28, r20
     100:	d1 02       	muls	r29, r17
     102:	b1 02       	muls	r27, r17
     104:	50 02       	muls	r21, r16
     106:	45 02       	muls	r20, r21
     108:	0f 02       	muls	r16, r31
     10a:	36 02       	muls	r19, r22
     10c:	a4 02       	muls	r26, r20
     10e:	d1 02       	muls	r29, r17
     110:	02 02       	muls	r16, r18
     112:	d1 02       	muls	r29, r17
     114:	d1 02       	muls	r29, r17
     116:	c9 02       	muls	r28, r25
=======
      e4:	1b 02       	muls	r17, r27
      e6:	00 03       	mulsu	r16, r16
      e8:	00 03       	mulsu	r16, r16
      ea:	28 02       	muls	r18, r24
      ec:	00 03       	mulsu	r16, r16
      ee:	00 03       	mulsu	r16, r16
      f0:	00 03       	mulsu	r16, r16
      f2:	00 03       	mulsu	r16, r16
      f4:	00 03       	mulsu	r16, r16
      f6:	00 03       	mulsu	r16, r16
      f8:	00 03       	mulsu	r16, r16
      fa:	00 03       	mulsu	r16, r16
      fc:	5a 02       	muls	r21, r26
      fe:	f3 02       	muls	r31, r19
     100:	00 03       	mulsu	r16, r16
     102:	c3 02       	muls	r28, r19
     104:	4f 02       	muls	r20, r31
     106:	44 02       	muls	r20, r20
     108:	0e 02       	muls	r16, r30
     10a:	35 02       	muls	r19, r21
     10c:	b5 02       	muls	r27, r21
     10e:	00 03       	mulsu	r16, r16
     110:	01 02       	muls	r16, r17
     112:	00 03       	mulsu	r16, r16
     114:	00 03       	mulsu	r16, r16
     116:	f8 02       	muls	r31, r24
>>>>>>> Stashed changes
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
<<<<<<< Updated upstream
     190:	01 c4       	rjmp	.+2050   	; 0x994 <hardcoreParcour+0x21e>
=======
     190:	01 c4       	rjmp	.+2050   	; 0x994 <arduinoDataInterpreter+0x3a>
>>>>>>> Stashed changes
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
<<<<<<< Updated upstream
     1b0:	e8 ea       	ldi	r30, 0xA8	; 168
     1b2:	f2 e2       	ldi	r31, 0x22	; 34
=======
     1b0:	e6 e5       	ldi	r30, 0x56	; 86
     1b2:	fd e1       	ldi	r31, 0x1D	; 29
>>>>>>> Stashed changes
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
<<<<<<< Updated upstream
     1be:	a0 38       	cpi	r26, 0x80	; 128
=======
     1be:	a2 32       	cpi	r26, 0x22	; 34
>>>>>>> Stashed changes
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	29 e0       	ldi	r18, 0x09	; 9
<<<<<<< Updated upstream
     1c6:	a0 e8       	ldi	r26, 0x80	; 128
=======
     1c6:	a2 e2       	ldi	r26, 0x22	; 34
>>>>>>> Stashed changes
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
<<<<<<< Updated upstream
     1ce:	a0 3c       	cpi	r26, 0xC0	; 192
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <main>
     1d8:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <_exit>
=======
     1ce:	a1 35       	cpi	r26, 0x51	; 81
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	f1 d6       	rcall	.+3554   	; 0xfb8 <main>
     1d6:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <_exit>
>>>>>>> Stashed changes

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <init_USART>:
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
}
<<<<<<< Updated upstream
     1de:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e2:	e1 ec       	ldi	r30, 0xC1	; 193
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	80 69       	ori	r24, 0x90	; 144
     1ea:	80 83       	st	Z, r24
     1ec:	80 81       	ld	r24, Z
     1ee:	88 60       	ori	r24, 0x08	; 8
     1f0:	80 83       	st	Z, r24
     1f2:	e2 ec       	ldi	r30, 0xC2	; 194
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	86 60       	ori	r24, 0x06	; 6
     1fa:	80 83       	st	Z, r24
     1fc:	80 e1       	ldi	r24, 0x10	; 16
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     208:	08 95       	ret

0000020a <__vector_25>:
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	0b b6       	in	r0, 0x3b	; 59
     216:	0f 92       	push	r0
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	2f 93       	push	r18
     226:	3f 93       	push	r19
     228:	4f 93       	push	r20
     22a:	5f 93       	push	r21
     22c:	6f 93       	push	r22
     22e:	7f 93       	push	r23
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	bf 93       	push	r27
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
     240:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     244:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTreceived>
     248:	90 ed       	ldi	r25, 0xD0	; 208
     24a:	98 0f       	add	r25, r24
     24c:	9a 30       	cpi	r25, 0x0A	; 10
     24e:	10 f0       	brcs	.+4      	; 0x254 <__vector_25+0x4a>
     250:	80 32       	cpi	r24, 0x20	; 32
     252:	99 f4       	brne	.+38     	; 0x27a <__vector_25+0x70>
     254:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <USARTinputPos>
     258:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <USARTinputPos+0x1>
     25c:	2f 3f       	cpi	r18, 0xFF	; 255
     25e:	31 05       	cpc	r19, r1
     260:	0c f0       	brlt	.+2      	; 0x264 <__vector_25+0x5a>
     262:	ae c1       	rjmp	.+860    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     264:	2f 5f       	subi	r18, 0xFF	; 255
     266:	3f 4f       	sbci	r19, 0xFF	; 255
     268:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <USARTinputPos+0x1>
     26c:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <USARTinputPos>
     270:	f9 01       	movw	r30, r18
     272:	e1 5f       	subi	r30, 0xF1	; 241
     274:	fb 4f       	sbci	r31, 0xFB	; 251
     276:	80 83       	st	Z, r24
     278:	a3 c1       	rjmp	.+838    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     27a:	9f e9       	ldi	r25, 0x9F	; 159
     27c:	98 0f       	add	r25, r24
     27e:	9a 31       	cpi	r25, 0x1A	; 26
     280:	28 f4       	brcc	.+10     	; 0x28c <__vector_25+0x82>
     282:	82 36       	cpi	r24, 0x62	; 98
     284:	29 f0       	breq	.+10     	; 0x290 <__vector_25+0x86>
     286:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     28a:	9a c1       	rjmp	.+820    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     28c:	82 36       	cpi	r24, 0x62	; 98
     28e:	51 f4       	brne	.+20     	; 0x2a4 <__vector_25+0x9a>
     290:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     294:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     29e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     2a2:	8e c1       	rjmp	.+796    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     2a4:	8d 30       	cpi	r24, 0x0D	; 13
     2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_25+0xa0>
     2a8:	8b c1       	rjmp	.+790    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     2aa:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <USARTinputPos>
     2ae:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USARTinputPos+0x1>
     2b2:	11 23       	and	r17, r17
     2b4:	0c f4       	brge	.+2      	; 0x2b8 <__vector_25+0xae>
     2b6:	92 c0       	rjmp	.+292    	; 0x3dc <__vector_25+0x1d2>
     2b8:	e8 e9       	ldi	r30, 0x98	; 152
     2ba:	f3 e0       	ldi	r31, 0x03	; 3
     2bc:	11 82       	std	Z+1, r1	; 0x01
     2be:	10 82       	st	Z, r1
     2c0:	13 82       	std	Z+3, r1	; 0x03
     2c2:	12 82       	std	Z+2, r1	; 0x02
     2c4:	15 82       	std	Z+5, r1	; 0x05
     2c6:	14 82       	std	Z+4, r1	; 0x04
     2c8:	e2 e9       	ldi	r30, 0x92	; 146
     2ca:	f3 e0       	ldi	r31, 0x03	; 3
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	9f ef       	ldi	r25, 0xFF	; 255
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	80 83       	st	Z, r24
     2d4:	93 83       	std	Z+3, r25	; 0x03
     2d6:	82 83       	std	Z+2, r24	; 0x02
     2d8:	95 83       	std	Z+5, r25	; 0x05
     2da:	84 83       	std	Z+4, r24	; 0x04
     2dc:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <numberStart.2004+0x1>
     2e0:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <numberStart.2004>
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	fc 01       	movw	r30, r24
     2f0:	e1 5f       	subi	r30, 0xF1	; 241
     2f2:	fb 4f       	sbci	r31, 0xFB	; 251
     2f4:	30 81       	ld	r19, Z
     2f6:	30 32       	cpi	r19, 0x20	; 32
     2f8:	79 f4       	brne	.+30     	; 0x318 <__vector_25+0x10e>
     2fa:	4f 5f       	subi	r20, 0xFF	; 255
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
     2fe:	fa 01       	movw	r30, r20
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	e4 57       	subi	r30, 0x74	; 116
     306:	fc 4f       	sbci	r31, 0xFC	; 252
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	80 83       	st	Z, r24
     30e:	43 30       	cpi	r20, 0x03	; 3
     310:	51 05       	cpc	r21, r1
     312:	0c f0       	brlt	.+2      	; 0x316 <__vector_25+0x10c>
     314:	4f c1       	rjmp	.+670    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     316:	0a c0       	rjmp	.+20     	; 0x32c <__vector_25+0x122>
     318:	fa 01       	movw	r30, r20
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	ee 56       	subi	r30, 0x6E	; 110
     320:	fc 4f       	sbci	r31, 0xFC	; 252
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
     32c:	2f 5f       	subi	r18, 0xFF	; 255
     32e:	82 2f       	mov	r24, r18
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	dc f6       	brge	.-74     	; 0x2ee <__vector_25+0xe4>
     338:	3d c1       	rjmp	.+634    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     33a:	f9 01       	movw	r30, r18
     33c:	e1 5f       	subi	r30, 0xF1	; 241
     33e:	fb 4f       	sbci	r31, 0xFB	; 251
     340:	c0 80       	ld	r12, Z
     342:	60 e2       	ldi	r22, 0x20	; 32
     344:	c6 12       	cpse	r12, r22
     346:	09 c0       	rjmp	.+18     	; 0x35a <__vector_25+0x150>
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	e8 1a       	sub	r14, r24
     34c:	f8 0a       	sbc	r15, r24
     34e:	63 e0       	ldi	r22, 0x03	; 3
     350:	e6 16       	cp	r14, r22
     352:	f1 04       	cpc	r15, r1
     354:	0c f0       	brlt	.+2      	; 0x358 <__vector_25+0x14e>
     356:	42 c0       	rjmp	.+132    	; 0x3dc <__vector_25+0x1d2>
     358:	3a c0       	rjmp	.+116    	; 0x3ce <__vector_25+0x1c4>
     35a:	e7 01       	movw	r28, r14
     35c:	cc 0f       	add	r28, r28
     35e:	dd 1f       	adc	r29, r29
     360:	de 01       	movw	r26, r28
     362:	ae 56       	subi	r26, 0x6E	; 110
     364:	bc 4f       	sbci	r27, 0xFC	; 252
     366:	fe 01       	movw	r30, r28
     368:	e4 57       	subi	r30, 0x74	; 116
     36a:	fc 4f       	sbci	r31, 0xFC	; 252
     36c:	6d 91       	ld	r22, X+
     36e:	7c 91       	ld	r23, X
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	68 0f       	add	r22, r24
     376:	79 1f       	adc	r23, r25
     378:	62 1b       	sub	r22, r18
     37a:	73 0b       	sbc	r23, r19
     37c:	07 2e       	mov	r0, r23
     37e:	00 0c       	add	r0, r0
     380:	88 0b       	sbc	r24, r24
     382:	99 0b       	sbc	r25, r25
     384:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__floatsisf>
     388:	9b 01       	movw	r18, r22
     38a:	ac 01       	movw	r20, r24
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	91 e4       	ldi	r25, 0x41	; 65
     394:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <pow>
     398:	c8 56       	subi	r28, 0x68	; 104
     39a:	dc 4f       	sbci	r29, 0xFC	; 252
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	5f e3       	ldi	r21, 0x3F	; 63
     3a4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
     3a8:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fixsfsi>
     3ac:	20 ed       	ldi	r18, 0xD0	; 208
     3ae:	2c 0d       	add	r18, r12
     3b0:	42 2f       	mov	r20, r18
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	46 9f       	mul	r20, r22
     3b6:	90 01       	movw	r18, r0
     3b8:	47 9f       	mul	r20, r23
     3ba:	30 0d       	add	r19, r0
     3bc:	56 9f       	mul	r21, r22
     3be:	30 0d       	add	r19, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	88 81       	ld	r24, Y
     3c4:	99 81       	ldd	r25, Y+1	; 0x01
     3c6:	82 0f       	add	r24, r18
     3c8:	93 1f       	adc	r25, r19
     3ca:	99 83       	std	Y+1, r25	; 0x01
     3cc:	88 83       	st	Y, r24
     3ce:	d3 94       	inc	r13
     3d0:	2d 2d       	mov	r18, r13
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	02 17       	cp	r16, r18
     3d6:	13 07       	cpc	r17, r19
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <__vector_25+0x1d2>
     3da:	af cf       	rjmp	.-162    	; 0x33a <__vector_25+0x130>
     3dc:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     3e0:	ee 23       	and	r30, r30
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <__vector_25+0x1dc>
     3e4:	de c0       	rjmp	.+444    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     3e6:	8e 2f       	mov	r24, r30
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	e1 56       	subi	r30, 0x61	; 97
     3ee:	f1 09       	sbc	r31, r1
     3f0:	ea 31       	cpi	r30, 0x1A	; 26
     3f2:	f1 05       	cpc	r31, r1
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__vector_25+0x1ee>
     3f6:	d5 c0       	rjmp	.+426    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     3f8:	88 27       	eor	r24, r24
     3fa:	ee 58       	subi	r30, 0x8E	; 142
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	8f 4f       	sbci	r24, 0xFF	; 255
     400:	0c 94 36 10 	jmp	0x206c	; 0x206c <__tablejump2__>
     404:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     408:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <rp6Data+0x2>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     410:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <rp6Data+0x2>
     414:	c6 c0       	rjmp	.+396    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <rp6Data+0x2>
     41c:	c2 c0       	rjmp	.+388    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     41e:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     422:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <rp6Data+0x2>
     426:	8f 3f       	cpi	r24, 0xFF	; 255
     428:	19 f4       	brne	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42a:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <rp6Data+0x2>
     42e:	b9 c0       	rjmp	.+370    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <rp6Data+0x2>
     436:	b5 c0       	rjmp	.+362    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     438:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     43c:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
     440:	8f 3f       	cpi	r24, 0xFF	; 255
     442:	19 f4       	brne	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     448:	ac c0       	rjmp	.+344    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     450:	a8 c0       	rjmp	.+336    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     452:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     456:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	19 f4       	brne	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     45e:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     462:	9f c0       	rjmp	.+318    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     46a:	9b c0       	rjmp	.+310    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     46c:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     470:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <number.2002>
     474:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <number.2002+0x1>
     478:	85 36       	cpi	r24, 0x65	; 101
     47a:	91 05       	cpc	r25, r1
     47c:	08 f0       	brcs	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	91 c0       	rjmp	.+290    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     480:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <rp6Data+0x1>
     484:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <rp6Data>
     488:	8c c0       	rjmp	.+280    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     48a:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     48e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <number.2002>
     492:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <number.2002+0x1>
     496:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <rp6Data+0x7>
     49a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <rp6Data+0x6>
     49e:	81 c0       	rjmp	.+258    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     4a0:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     4a4:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <number.2002>
     4a8:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <number.2002+0x1>
     4ac:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <rp6Data+0x5>
     4b0:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <rp6Data+0x4>
     4b4:	76 c0       	rjmp	.+236    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     4b6:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <programmedAmount>
     4ba:	30 91 af 03 	lds	r19, 0x03AF	; 0x8003af <programmedAmount+0x1>
     4be:	c9 01       	movw	r24, r18
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <programmedAmount+0x1>
     4c6:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <programmedAmount>
     4ca:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <number.2002>
     4ce:	50 91 99 03 	lds	r21, 0x0399	; 0x800399 <number.2002+0x1>
     4d2:	47 36       	cpi	r20, 0x67	; 103
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	56 07       	cpc	r21, r22
     4d8:	70 f0       	brcs	.+28     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4da:	f9 01       	movw	r30, r18
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	e2 0f       	add	r30, r18
     4e2:	f3 1f       	adc	r31, r19
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	e0 5f       	subi	r30, 0xF0	; 240
     4ea:	fa 4f       	sbci	r31, 0xFA	; 250
     4ec:	27 e6       	ldi	r18, 0x67	; 103
     4ee:	31 e0       	ldi	r19, 0x01	; 1
     4f0:	31 83       	std	Z+1, r19	; 0x01
     4f2:	20 83       	st	Z, r18
     4f4:	0b c0       	rjmp	.+22     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4f6:	f9 01       	movw	r30, r18
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e2 0f       	add	r30, r18
     4fe:	f3 1f       	adc	r31, r19
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e0 5f       	subi	r30, 0xF0	; 240
     506:	fa 4f       	sbci	r31, 0xFA	; 250
     508:	51 83       	std	Z+1, r21	; 0x01
     50a:	40 83       	st	Z, r20
     50c:	9c 01       	movw	r18, r24
     50e:	22 0f       	add	r18, r18
     510:	33 1f       	adc	r19, r19
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	fc 01       	movw	r30, r24
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	e4 5f       	subi	r30, 0xF4	; 244
     51e:	fa 4f       	sbci	r31, 0xFA	; 250
     520:	a8 e9       	ldi	r26, 0x98	; 152
     522:	b3 e0       	ldi	r27, 0x03	; 3
     524:	12 96       	adiw	r26, 0x02	; 2
     526:	2d 91       	ld	r18, X+
     528:	3c 91       	ld	r19, X
     52a:	13 97       	sbiw	r26, 0x03	; 3
     52c:	31 83       	std	Z+1, r19	; 0x01
     52e:	20 83       	st	Z, r18
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	fc 01       	movw	r30, r24
     536:	e2 5f       	subi	r30, 0xF2	; 242
     538:	fa 4f       	sbci	r31, 0xFA	; 250
     53a:	14 96       	adiw	r26, 0x04	; 4
     53c:	8d 91       	ld	r24, X+
     53e:	9c 91       	ld	r25, X
     540:	15 97       	sbiw	r26, 0x05	; 5
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
     546:	2d c0       	rjmp	.+90     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     548:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <programmedAmount>
     54c:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <programmedAmount+0x1>
     550:	18 16       	cp	r1, r24
     552:	19 06       	cpc	r1, r25
     554:	34 f5       	brge	.+76     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <programmedAmount+0x1>
     55c:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <programmedAmount>
     560:	20 c0       	rjmp	.+64     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     562:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <number.2002>
     566:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <number.2002+0x1>
     56a:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <programmedAmount>
     56e:	30 91 af 03 	lds	r19, 0x03AF	; 0x8003af <programmedAmount+0x1>
     572:	82 17       	cp	r24, r18
     574:	93 07       	cpc	r25, r19
     576:	a8 f4       	brcc	.+42     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     578:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <currentParcourLine+0x1>
     57c:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <currentParcourLine>
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <runParcour>
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     588:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <programmedAmount+0x1>
     58c:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <programmedAmount>
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     592:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     596:	e8 ef       	ldi	r30, 0xF8	; 248
     598:	f3 e0       	ldi	r31, 0x03	; 3
     59a:	11 82       	std	Z+1, r1	; 0x01
     59c:	10 82       	st	Z, r1
     59e:	13 82       	std	Z+3, r1	; 0x03
     5a0:	12 82       	std	Z+2, r1	; 0x02
     5a2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	9f ef       	ldi	r25, 0xFF	; 255
     5aa:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     5ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	d1 2c       	mov	r13, r1
     5ba:	e1 2c       	mov	r14, r1
     5bc:	f1 2c       	mov	r15, r1
     5be:	bd ce       	rjmp	.-646    	; 0x33a <__vector_25+0x130>
     5c0:	ff 91       	pop	r31
     5c2:	ef 91       	pop	r30
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <init_micros>:
     5f6:	e1 e9       	ldi	r30, 0x91	; 145
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	80 83       	st	Z, r24
     600:	e1 e7       	ldi	r30, 0x71	; 113
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	81 60       	ori	r24, 0x01	; 1
     608:	80 83       	st	Z, r24
     60a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     60e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     612:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <t3TotalOverflow>
     616:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <t3TotalOverflow+0x1>
     61a:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <t3TotalOverflow+0x2>
     61e:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <t3TotalOverflow+0x3>
     622:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <t3TotalOverflow+0x4>
     626:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <t3TotalOverflow+0x5>
     62a:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <t3TotalOverflow+0x6>
     62e:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <t3TotalOverflow+0x7>
     632:	08 95       	ret

00000634 <__vector_35>:
     634:	1f 92       	push	r1
     636:	0f 92       	push	r0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	0f 92       	push	r0
     63c:	11 24       	eor	r1, r1
     63e:	2f 93       	push	r18
     640:	3f 93       	push	r19
     642:	4f 93       	push	r20
     644:	5f 93       	push	r21
     646:	6f 93       	push	r22
     648:	7f 93       	push	r23
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <t3TotalOverflow>
     654:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <t3TotalOverflow+0x1>
     658:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <t3TotalOverflow+0x2>
     65c:	50 91 d5 03 	lds	r21, 0x03D5	; 0x8003d5 <t3TotalOverflow+0x3>
     660:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <t3TotalOverflow+0x4>
     664:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <t3TotalOverflow+0x5>
     668:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <t3TotalOverflow+0x6>
     66c:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <t3TotalOverflow+0x7>
     670:	a1 e0       	ldi	r26, 0x01	; 1
     672:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__adddi3_s8>
     676:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <t3TotalOverflow>
     67a:	30 93 d3 03 	sts	0x03D3, r19	; 0x8003d3 <t3TotalOverflow+0x1>
     67e:	40 93 d4 03 	sts	0x03D4, r20	; 0x8003d4 <t3TotalOverflow+0x2>
     682:	50 93 d5 03 	sts	0x03D5, r21	; 0x8003d5 <t3TotalOverflow+0x3>
     686:	60 93 d6 03 	sts	0x03D6, r22	; 0x8003d6 <t3TotalOverflow+0x4>
     68a:	70 93 d7 03 	sts	0x03D7, r23	; 0x8003d7 <t3TotalOverflow+0x5>
     68e:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <t3TotalOverflow+0x6>
     692:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <t3TotalOverflow+0x7>
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <micros>:
     6b2:	4f 92       	push	r4
     6b4:	5f 92       	push	r5
     6b6:	6f 92       	push	r6
     6b8:	7f 92       	push	r7
     6ba:	8f 92       	push	r8
     6bc:	9f 92       	push	r9
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     6d2:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     6d6:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <t3TotalOverflow>
     6da:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <t3TotalOverflow+0x1>
     6de:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <t3TotalOverflow+0x2>
     6e2:	50 91 d5 03 	lds	r21, 0x03D5	; 0x8003d5 <t3TotalOverflow+0x3>
     6e6:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <t3TotalOverflow+0x4>
     6ea:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <t3TotalOverflow+0x5>
     6ee:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <t3TotalOverflow+0x6>
     6f2:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <t3TotalOverflow+0x7>
     6f6:	98 2c       	mov	r9, r8
     6f8:	88 24       	eor	r8, r8
     6fa:	99 0c       	add	r9, r9
     6fc:	99 0c       	add	r9, r9
     6fe:	99 0c       	add	r9, r9
     700:	99 0c       	add	r9, r9
     702:	09 2c       	mov	r0, r9
     704:	00 0c       	add	r0, r0
     706:	aa 08       	sbc	r10, r10
     708:	bb 08       	sbc	r11, r11
     70a:	bb 20       	and	r11, r11
     70c:	2c f4       	brge	.+10     	; 0x718 <micros+0x66>
     70e:	ef ef       	ldi	r30, 0xFF	; 255
     710:	8e 0e       	add	r8, r30
     712:	9e 1e       	adc	r9, r30
     714:	a1 1c       	adc	r10, r1
     716:	b1 1c       	adc	r11, r1
     718:	25 01       	movw	r4, r10
     71a:	77 24       	eor	r7, r7
     71c:	57 fc       	sbrc	r5, 7
     71e:	70 94       	com	r7
     720:	67 2c       	mov	r6, r7
     722:	bb 0c       	add	r11, r11
     724:	88 08       	sbc	r8, r8
     726:	98 2c       	mov	r9, r8
     728:	54 01       	movw	r10, r8
     72a:	0c e0       	ldi	r16, 0x0C	; 12
     72c:	0e 94 a6 10 	call	0x214c	; 0x214c <__ashldi3>
     730:	f2 2f       	mov	r31, r18
     732:	e3 2f       	mov	r30, r19
     734:	c4 2e       	mov	r12, r20
     736:	d5 2e       	mov	r13, r21
     738:	e6 2e       	mov	r14, r22
     73a:	f7 2e       	mov	r15, r23
     73c:	08 2f       	mov	r16, r24
     73e:	19 2f       	mov	r17, r25
     740:	24 2d       	mov	r18, r4
     742:	35 2d       	mov	r19, r5
     744:	46 2d       	mov	r20, r6
     746:	57 2d       	mov	r21, r7
     748:	68 2d       	mov	r22, r8
     74a:	78 2d       	mov	r23, r8
     74c:	88 2d       	mov	r24, r8
     74e:	98 2d       	mov	r25, r8
     750:	af 2e       	mov	r10, r31
     752:	be 2e       	mov	r11, r30
     754:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__adddi3>
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	7f 90       	pop	r7
     76e:	6f 90       	pop	r6
     770:	5f 90       	pop	r5
     772:	4f 90       	pop	r4
     774:	08 95       	ret

00000776 <hardcoreParcour>:
     776:	2f 92       	push	r2
     778:	3f 92       	push	r3
     77a:	4f 92       	push	r4
     77c:	5f 92       	push	r5
     77e:	6f 92       	push	r6
     780:	7f 92       	push	r7
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	2c 97       	sbiw	r28, 0x0c	; 12
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <runParcour>
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <hardcoreParcour+0x3e>
     7b2:	8b c1       	rjmp	.+790    	; 0xaca <hardcoreParcour+0x354>
     7b4:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <running.1991>
     7b8:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <running.1991+0x1>
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	61 f5       	brne	.+88     	; 0x818 <hardcoreParcour+0xa2>
     7c0:	e8 ef       	ldi	r30, 0xF8	; 248
     7c2:	f3 e0       	ldi	r31, 0x03	; 3
     7c4:	11 82       	std	Z+1, r1	; 0x01
     7c6:	10 82       	st	Z, r1
     7c8:	13 82       	std	Z+3, r1	; 0x03
     7ca:	87 85       	ldd	r24, Z+15	; 0x0f
     7cc:	90 89       	ldd	r25, Z+16	; 0x10
     7ce:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <startDegrees+0x1>
     7d2:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <startDegrees>
     7d6:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <parcourLineState>
     7da:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <arduinoData+0x2>
     7de:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <arduinoData+0x3>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <hardcoreParcour+0x72>
     7e6:	74 c1       	rjmp	.+744    	; 0xad0 <hardcoreParcour+0x35a>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <running.1991+0x1>
     7f0:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <running.1991>
     7f4:	6d c1       	rjmp	.+730    	; 0xad0 <hardcoreParcour+0x35a>
     7f6:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <running.1991>
     7fa:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <running.1991+0x1>
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	09 f0       	breq	.+2      	; 0x804 <hardcoreParcour+0x8e>
     802:	66 c1       	rjmp	.+716    	; 0xad0 <hardcoreParcour+0x35a>
     804:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <running.1991+0x1>
     808:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <running.1991>
     80c:	e8 ef       	ldi	r30, 0xF8	; 248
     80e:	f3 e0       	ldi	r31, 0x03	; 3
     810:	11 82       	std	Z+1, r1	; 0x01
     812:	10 82       	st	Z, r1
     814:	13 82       	std	Z+3, r1	; 0x03
     816:	5c c1       	rjmp	.+696    	; 0xad0 <hardcoreParcour+0x35a>
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	09 f0       	breq	.+2      	; 0x81e <hardcoreParcour+0xa8>
     81c:	59 c1       	rjmp	.+690    	; 0xad0 <hardcoreParcour+0x35a>
     81e:	00 91 ac 03 	lds	r16, 0x03AC	; 0x8003ac <currentParcourLine>
     822:	10 91 ad 03 	lds	r17, 0x03AD	; 0x8003ad <currentParcourLine+0x1>
     826:	1c 87       	std	Y+12, r17	; 0x0c
     828:	0b 87       	std	Y+11, r16	; 0x0b
     82a:	c8 01       	movw	r24, r16
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	48 01       	movw	r8, r16
     832:	88 0e       	add	r8, r24
     834:	99 1e       	adc	r9, r25
     836:	f4 01       	movw	r30, r8
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	e0 5f       	subi	r30, 0xF0	; 240
     83e:	fa 4f       	sbci	r31, 0xFA	; 250
     840:	20 81       	ld	r18, Z
     842:	31 81       	ldd	r19, Z+1	; 0x01
     844:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <startDegrees>
     848:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <startDegrees+0x1>
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	88 36       	cpi	r24, 0x68	; 104
     852:	11 e0       	ldi	r17, 0x01	; 1
     854:	91 07       	cpc	r25, r17
     856:	28 f4       	brcc	.+10     	; 0x862 <hardcoreParcour+0xec>
     858:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <targetAngle.1990+0x1>
     85c:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <targetAngle.1990>
     860:	06 c0       	rjmp	.+12     	; 0x86e <hardcoreParcour+0xf8>
     862:	88 56       	subi	r24, 0x68	; 104
     864:	91 40       	sbci	r25, 0x01	; 1
     866:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <targetAngle.1990+0x1>
     86a:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <targetAngle.1990>
     86e:	e8 ef       	ldi	r30, 0xF8	; 248
     870:	f3 e0       	ldi	r31, 0x03	; 3
     872:	27 84       	ldd	r2, Z+15	; 0x0f
     874:	30 88       	ldd	r3, Z+16	; 0x10
     876:	41 88       	ldd	r4, Z+17	; 0x11
     878:	52 88       	ldd	r5, Z+18	; 0x12
     87a:	63 88       	ldd	r6, Z+19	; 0x13
     87c:	74 88       	ldd	r7, Z+20	; 0x14
     87e:	25 89       	ldd	r18, Z+21	; 0x15
     880:	29 87       	std	Y+9, r18	; 0x09
     882:	36 89       	ldd	r19, Z+22	; 0x16
     884:	3a 87       	std	Y+10, r19	; 0x0a
     886:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <targetAngle.1990>
     88a:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <targetAngle.1990+0x1>
     88e:	8c 01       	movw	r16, r24
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	ba 01       	movw	r22, r20
     89a:	89 83       	std	Y+1, r24	; 0x01
     89c:	1a 83       	std	Y+2, r17	; 0x02
     89e:	2b 83       	std	Y+3, r18	; 0x03
     8a0:	3c 83       	std	Y+4, r19	; 0x04
     8a2:	4d 83       	std	Y+5, r20	; 0x05
     8a4:	5e 83       	std	Y+6, r21	; 0x06
     8a6:	6f 83       	std	Y+7, r22	; 0x07
     8a8:	78 87       	std	Y+8, r23	; 0x08
     8aa:	22 2d       	mov	r18, r2
     8ac:	33 2d       	mov	r19, r3
     8ae:	44 2d       	mov	r20, r4
     8b0:	55 2d       	mov	r21, r5
     8b2:	66 2d       	mov	r22, r6
     8b4:	77 2d       	mov	r23, r7
     8b6:	89 85       	ldd	r24, Y+9	; 0x09
     8b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ba:	a0 2e       	mov	r10, r16
     8bc:	b1 2e       	mov	r11, r17
     8be:	c1 2c       	mov	r12, r1
     8c0:	d1 2c       	mov	r13, r1
     8c2:	e1 2c       	mov	r14, r1
     8c4:	f1 2c       	mov	r15, r1
     8c6:	00 e0       	ldi	r16, 0x00	; 0
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__subdi3>
     8ce:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatundisf>
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
     8d6:	a7 01       	movw	r20, r14
     8d8:	96 01       	movw	r18, r12
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__mulsf3>
     8e2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <sqrt>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 ea       	ldi	r20, 0xA0	; 160
     8f0:	51 e4       	ldi	r21, 0x41	; 65
     8f2:	e8 d7       	rcall	.+4048   	; 0x18c4 <__cmpsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	0c f0       	brlt	.+2      	; 0x8fa <hardcoreParcour+0x184>
     8f8:	9b c0       	rjmp	.+310    	; 0xa30 <hardcoreParcour+0x2ba>
     8fa:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <parcourLineState>
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	09 f4       	brne	.+2      	; 0x904 <hardcoreParcour+0x18e>
     902:	54 c0       	rjmp	.+168    	; 0x9ac <hardcoreParcour+0x236>
     904:	38 f0       	brcs	.+14     	; 0x914 <hardcoreParcour+0x19e>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	09 f4       	brne	.+2      	; 0x90c <hardcoreParcour+0x196>
     90a:	71 c0       	rjmp	.+226    	; 0x9ee <hardcoreParcour+0x278>
     90c:	83 30       	cpi	r24, 0x03	; 3
     90e:	09 f4       	brne	.+2      	; 0x912 <hardcoreParcour+0x19c>
     910:	79 c0       	rjmp	.+242    	; 0xa04 <hardcoreParcour+0x28e>
     912:	de c0       	rjmp	.+444    	; 0xad0 <hardcoreParcour+0x35a>
     914:	f4 01       	movw	r30, r8
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ee 5e       	subi	r30, 0xEE	; 238
     91c:	fa 4f       	sbci	r31, 0xFA	; 250
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	e8 ef       	ldi	r30, 0xF8	; 248
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	91 83       	std	Z+1, r25	; 0x01
     928:	80 83       	st	Z, r24
     92a:	c3 de       	rcall	.-634    	; 0x6b2 <micros>
     92c:	a2 2e       	mov	r10, r18
     92e:	b3 2e       	mov	r11, r19
     930:	c4 2e       	mov	r12, r20
     932:	d5 2e       	mov	r13, r21
     934:	e6 2e       	mov	r14, r22
     936:	f7 2e       	mov	r15, r23
     938:	08 2f       	mov	r16, r24
     93a:	19 2f       	mov	r17, r25
     93c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <currentParcourLine>
     940:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <currentParcourLine+0x1>
     944:	fc 01       	movw	r30, r24
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	e8 0f       	add	r30, r24
     94c:	f9 1f       	adc	r31, r25
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ec 5e       	subi	r30, 0xEC	; 236
     954:	fa 4f       	sbci	r31, 0xFA	; 250
     956:	20 81       	ld	r18, Z
     958:	31 81       	ldd	r19, Z+1	; 0x01
     95a:	88 ee       	ldi	r24, 0xE8	; 232
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	28 9f       	mul	r18, r24
     960:	a0 01       	movw	r20, r0
     962:	29 9f       	mul	r18, r25
     964:	50 0d       	add	r21, r0
     966:	38 9f       	mul	r19, r24
     968:	50 0d       	add	r21, r0
     96a:	11 24       	eor	r1, r1
     96c:	24 2f       	mov	r18, r20
     96e:	35 2f       	mov	r19, r21
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__adddi3>
     980:	20 93 a2 03 	sts	0x03A2, r18	; 0x8003a2 <parcourCommandTimer>
     984:	30 93 a3 03 	sts	0x03A3, r19	; 0x8003a3 <parcourCommandTimer+0x1>
     988:	40 93 a4 03 	sts	0x03A4, r20	; 0x8003a4 <parcourCommandTimer+0x2>
     98c:	50 93 a5 03 	sts	0x03A5, r21	; 0x8003a5 <parcourCommandTimer+0x3>
     990:	60 93 a6 03 	sts	0x03A6, r22	; 0x8003a6 <parcourCommandTimer+0x4>
     994:	70 93 a7 03 	sts	0x03A7, r23	; 0x8003a7 <parcourCommandTimer+0x5>
     998:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <parcourCommandTimer+0x6>
     99c:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <parcourCommandTimer+0x7>
     9a0:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <parcourLineState>
     9aa:	92 c0       	rjmp	.+292    	; 0xad0 <hardcoreParcour+0x35a>
     9ac:	82 de       	rcall	.-764    	; 0x6b2 <micros>
     9ae:	a0 90 a2 03 	lds	r10, 0x03A2	; 0x8003a2 <parcourCommandTimer>
     9b2:	b0 90 a3 03 	lds	r11, 0x03A3	; 0x8003a3 <parcourCommandTimer+0x1>
     9b6:	c0 90 a4 03 	lds	r12, 0x03A4	; 0x8003a4 <parcourCommandTimer+0x2>
     9ba:	d0 90 a5 03 	lds	r13, 0x03A5	; 0x8003a5 <parcourCommandTimer+0x3>
     9be:	e0 90 a6 03 	lds	r14, 0x03A6	; 0x8003a6 <parcourCommandTimer+0x4>
     9c2:	f0 90 a7 03 	lds	r15, 0x03A7	; 0x8003a7 <parcourCommandTimer+0x5>
     9c6:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <parcourCommandTimer+0x6>
     9ca:	10 91 a9 03 	lds	r17, 0x03A9	; 0x8003a9 <parcourCommandTimer+0x7>
     9ce:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__cmpdi2>
     9d2:	51 f0       	breq	.+20     	; 0x9e8 <hardcoreParcour+0x272>
     9d4:	48 f0       	brcs	.+18     	; 0x9e8 <hardcoreParcour+0x272>
     9d6:	e8 ef       	ldi	r30, 0xF8	; 248
     9d8:	f3 e0       	ldi	r31, 0x03	; 3
     9da:	11 82       	std	Z+1, r1	; 0x01
     9dc:	10 82       	st	Z, r1
     9de:	13 82       	std	Z+3, r1	; 0x03
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <parcourLineState>
     9e6:	74 c0       	rjmp	.+232    	; 0xad0 <hardcoreParcour+0x35a>
     9e8:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     9ec:	71 c0       	rjmp	.+226    	; 0xad0 <hardcoreParcour+0x35a>
     9ee:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <arduinoData+0x2>
     9f2:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <arduinoData+0x3>
     9f6:	89 2b       	or	r24, r25
     9f8:	09 f0       	breq	.+2      	; 0x9fc <hardcoreParcour+0x286>
     9fa:	6a c0       	rjmp	.+212    	; 0xad0 <hardcoreParcour+0x35a>
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <parcourLineState>
     a02:	66 c0       	rjmp	.+204    	; 0xad0 <hardcoreParcour+0x35a>
     a04:	0b 85       	ldd	r16, Y+11	; 0x0b
     a06:	1c 85       	ldd	r17, Y+12	; 0x0c
     a08:	0f 5f       	subi	r16, 0xFF	; 255
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	10 93 ad 03 	sts	0x03AD, r17	; 0x8003ad <currentParcourLine+0x1>
     a10:	00 93 ac 03 	sts	0x03AC, r16	; 0x8003ac <currentParcourLine>
     a14:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <parcourLineState>
     a18:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <programmedAmount>
     a1c:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <programmedAmount+0x1>
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	80 17       	cp	r24, r16
     a24:	91 07       	cpc	r25, r17
     a26:	0c f0       	brlt	.+2      	; 0xa2a <hardcoreParcour+0x2b4>
     a28:	53 c0       	rjmp	.+166    	; 0xad0 <hardcoreParcour+0x35a>
     a2a:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
     a2e:	50 c0       	rjmp	.+160    	; 0xad0 <hardcoreParcour+0x35a>
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	43 e3       	ldi	r20, 0x33	; 51
     a36:	53 e4       	ldi	r21, 0x43	; 67
     a38:	c7 01       	movw	r24, r14
     a3a:	b6 01       	movw	r22, r12
     a3c:	43 d7       	rcall	.+3718   	; 0x18c4 <__cmpsf2>
     a3e:	88 23       	and	r24, r24
     a40:	14 f5       	brge	.+68     	; 0xa86 <hardcoreParcour+0x310>
     a42:	88 e2       	ldi	r24, 0x28	; 40
     a44:	93 e2       	ldi	r25, 0x23	; 35
     a46:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <rp6Data+0x7>
     a4a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <rp6Data+0x6>
     a4e:	22 2d       	mov	r18, r2
     a50:	33 2d       	mov	r19, r3
     a52:	44 2d       	mov	r20, r4
     a54:	55 2d       	mov	r21, r5
     a56:	66 2d       	mov	r22, r6
     a58:	77 2d       	mov	r23, r7
     a5a:	89 85       	ldd	r24, Y+9	; 0x09
     a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5e:	a9 80       	ldd	r10, Y+1	; 0x01
     a60:	ba 80       	ldd	r11, Y+2	; 0x02
     a62:	c1 2c       	mov	r12, r1
     a64:	d1 2c       	mov	r13, r1
     a66:	e1 2c       	mov	r14, r1
     a68:	f1 2c       	mov	r15, r1
     a6a:	00 e0       	ldi	r16, 0x00	; 0
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__cmpdi2>
     a72:	29 f0       	breq	.+10     	; 0xa7e <hardcoreParcour+0x308>
     a74:	20 f0       	brcs	.+8      	; 0xa7e <hardcoreParcour+0x308>
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     a7c:	29 c0       	rjmp	.+82     	; 0xad0 <hardcoreParcour+0x35a>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     a84:	25 c0       	rjmp	.+74     	; 0xad0 <hardcoreParcour+0x35a>
     a86:	88 e2       	ldi	r24, 0x28	; 40
     a88:	93 e2       	ldi	r25, 0x23	; 35
     a8a:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <rp6Data+0x7>
     a8e:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <rp6Data+0x6>
     a92:	22 2d       	mov	r18, r2
     a94:	33 2d       	mov	r19, r3
     a96:	44 2d       	mov	r20, r4
     a98:	55 2d       	mov	r21, r5
     a9a:	66 2d       	mov	r22, r6
     a9c:	77 2d       	mov	r23, r7
     a9e:	89 85       	ldd	r24, Y+9	; 0x09
     aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa2:	a9 80       	ldd	r10, Y+1	; 0x01
     aa4:	ba 80       	ldd	r11, Y+2	; 0x02
     aa6:	c1 2c       	mov	r12, r1
     aa8:	d1 2c       	mov	r13, r1
     aaa:	e1 2c       	mov	r14, r1
     aac:	f1 2c       	mov	r15, r1
     aae:	00 e0       	ldi	r16, 0x00	; 0
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__cmpdi2>
     ab6:	29 f0       	breq	.+10     	; 0xac2 <hardcoreParcour+0x34c>
     ab8:	20 f0       	brcs	.+8      	; 0xac2 <hardcoreParcour+0x34c>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <hardcoreParcour+0x35a>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <hardcoreParcour+0x35a>
     aca:	88 23       	and	r24, r24
     acc:	09 f4       	brne	.+2      	; 0xad0 <hardcoreParcour+0x35a>
     ace:	93 ce       	rjmp	.-730    	; 0x7f6 <hardcoreParcour+0x80>
     ad0:	2c 96       	adiw	r28, 0x0c	; 12
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	5f 90       	pop	r5
     afa:	4f 90       	pop	r4
     afc:	3f 90       	pop	r3
     afe:	2f 90       	pop	r2
     b00:	08 95       	ret

00000b02 <init_TWI>:
     b02:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b06:	88 e4       	ldi	r24, 0x48	; 72
     b08:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b12:	08 95       	ret

00000b14 <init_TWI_Timer2>:
     b14:	e1 eb       	ldi	r30, 0xB1	; 177
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	87 60       	ori	r24, 0x07	; 7
     b1c:	80 83       	st	Z, r24
     b1e:	e0 e7       	ldi	r30, 0x70	; 112
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	80 83       	st	Z, r24
     b28:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     b2c:	08 95       	ret

00000b2e <init_arduinoData>:
     b2e:	ea ed       	ldi	r30, 0xDA	; 218
     b30:	f3 e0       	ldi	r31, 0x03	; 3
     b32:	11 82       	std	Z+1, r1	; 0x01
     b34:	10 82       	st	Z, r1
     b36:	13 82       	std	Z+3, r1	; 0x03
     b38:	12 82       	std	Z+2, r1	; 0x02
     b3a:	15 82       	std	Z+5, r1	; 0x05
     b3c:	14 82       	std	Z+4, r1	; 0x04
     b3e:	17 82       	std	Z+7, r1	; 0x07
     b40:	16 82       	std	Z+6, r1	; 0x06
     b42:	11 86       	std	Z+9, r1	; 0x09
     b44:	10 86       	std	Z+8, r1	; 0x08
     b46:	08 95       	ret

00000b48 <init_rp6Data>:
     b48:	e8 ef       	ldi	r30, 0xF8	; 248
     b4a:	f3 e0       	ldi	r31, 0x03	; 3
     b4c:	11 82       	std	Z+1, r1	; 0x01
     b4e:	10 82       	st	Z, r1
     b50:	12 82       	std	Z+2, r1	; 0x02
     b52:	13 82       	std	Z+3, r1	; 0x03
     b54:	84 e2       	ldi	r24, 0x24	; 36
     b56:	93 e1       	ldi	r25, 0x13	; 19
     b58:	95 83       	std	Z+5, r25	; 0x05
     b5a:	84 83       	std	Z+4, r24	; 0x04
     b5c:	88 e2       	ldi	r24, 0x28	; 40
     b5e:	93 e2       	ldi	r25, 0x23	; 35
     b60:	97 83       	std	Z+7, r25	; 0x07
     b62:	86 83       	std	Z+6, r24	; 0x06
     b64:	88 e8       	ldi	r24, 0x88	; 136
     b66:	93 e1       	ldi	r25, 0x13	; 19
     b68:	91 87       	std	Z+9, r25	; 0x09
     b6a:	80 87       	std	Z+8, r24	; 0x08
     b6c:	88 ec       	ldi	r24, 0xC8	; 200
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	82 87       	std	Z+10, r24	; 0x0a
     b76:	93 87       	std	Z+11, r25	; 0x0b
     b78:	a4 87       	std	Z+12, r26	; 0x0c
     b7a:	b5 87       	std	Z+13, r27	; 0x0d
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	86 87       	std	Z+14, r24	; 0x0e
     b80:	08 95       	ret

00000b82 <arduinoDataInterpreter>:
     b82:	aa ed       	ldi	r26, 0xDA	; 218
     b84:	b3 e0       	ldi	r27, 0x03	; 3
     b86:	ee eb       	ldi	r30, 0xBE	; 190
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	98 2f       	mov	r25, r24
     b90:	88 27       	eor	r24, r24
     b92:	22 81       	ldd	r18, Z+2	; 0x02
     b94:	82 0f       	add	r24, r18
     b96:	91 1d       	adc	r25, r1
     b98:	11 96       	adiw	r26, 0x01	; 1
     b9a:	9c 93       	st	X, r25
     b9c:	8e 93       	st	-X, r24
     b9e:	83 81       	ldd	r24, Z+3	; 0x03
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	98 2f       	mov	r25, r24
     ba4:	88 27       	eor	r24, r24
     ba6:	24 81       	ldd	r18, Z+4	; 0x04
     ba8:	82 0f       	add	r24, r18
     baa:	91 1d       	adc	r25, r1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	85 81       	ldd	r24, Z+5	; 0x05
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	98 2f       	mov	r25, r24
     bba:	88 27       	eor	r24, r24
     bbc:	26 81       	ldd	r18, Z+6	; 0x06
     bbe:	82 0f       	add	r24, r18
     bc0:	91 1d       	adc	r25, r1
     bc2:	15 96       	adiw	r26, 0x05	; 5
     bc4:	9c 93       	st	X, r25
     bc6:	8e 93       	st	-X, r24
     bc8:	14 97       	sbiw	r26, 0x04	; 4
     bca:	87 81       	ldd	r24, Z+7	; 0x07
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	98 2f       	mov	r25, r24
     bd0:	88 27       	eor	r24, r24
     bd2:	20 85       	ldd	r18, Z+8	; 0x08
     bd4:	82 0f       	add	r24, r18
     bd6:	91 1d       	adc	r25, r1
     bd8:	17 96       	adiw	r26, 0x07	; 7
     bda:	9c 93       	st	X, r25
     bdc:	8e 93       	st	-X, r24
     bde:	16 97       	sbiw	r26, 0x06	; 6
     be0:	81 85       	ldd	r24, Z+9	; 0x09
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	98 2f       	mov	r25, r24
     be6:	88 27       	eor	r24, r24
     be8:	22 85       	ldd	r18, Z+10	; 0x0a
     bea:	82 0f       	add	r24, r18
     bec:	91 1d       	adc	r25, r1
     bee:	19 96       	adiw	r26, 0x09	; 9
     bf0:	9c 93       	st	X, r25
     bf2:	8e 93       	st	-X, r24
     bf4:	18 97       	sbiw	r26, 0x08	; 8
     bf6:	08 95       	ret

00000bf8 <I2C_receiveInterpreter>:
     bf8:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <receiveDataTWI>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <I2C_receiveInterpreter+0xa>
     c00:	c0 cf       	rjmp	.-128    	; 0xb82 <arduinoDataInterpreter>
     c02:	08 95       	ret

00000c04 <clearSendData>:
     c04:	e4 ee       	ldi	r30, 0xE4	; 228
     c06:	f3 e0       	ldi	r31, 0x03	; 3
     c08:	88 ef       	ldi	r24, 0xF8	; 248
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	11 92       	st	Z+, r1
     c0e:	e8 17       	cp	r30, r24
     c10:	f9 07       	cpc	r31, r25
     c12:	e1 f7       	brne	.-8      	; 0xc0c <clearSendData+0x8>
     c14:	08 95       	ret

00000c16 <clearReceiveData>:
     c16:	ee eb       	ldi	r30, 0xBE	; 190
     c18:	f3 e0       	ldi	r31, 0x03	; 3
     c1a:	82 ed       	ldi	r24, 0xD2	; 210
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	11 92       	st	Z+, r1
     c20:	e8 17       	cp	r30, r24
     c22:	f9 07       	cpc	r31, r25
     c24:	e1 f7       	brne	.-8      	; 0xc1e <clearReceiveData+0x8>
     c26:	08 95       	ret

00000c28 <__vector_39>:
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	0b b6       	in	r0, 0x3b	; 59
     c34:	0f 92       	push	r0
     c36:	af 92       	push	r10
     c38:	bf 92       	push	r11
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     c66:	80 35       	cpi	r24, 0x50	; 80
     c68:	c1 f0       	breq	.+48     	; 0xc9a <__vector_39+0x72>
     c6a:	88 35       	cpi	r24, 0x58	; 88
     c6c:	a9 f1       	breq	.+106    	; 0xcd8 <__vector_39+0xb0>
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	09 f0       	breq	.+2      	; 0xc74 <__vector_39+0x4c>
     c72:	8a c0       	rjmp	.+276    	; 0xd88 <__vector_39+0x160>
     c74:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <compassFlag>
     c78:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <compassFlag+0x1>
     c7c:	89 2b       	or	r24, r25
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__vector_39+0x60>
     c80:	85 e8       	ldi	r24, 0x85	; 133
     c82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c86:	80 c0       	rjmp	.+256    	; 0xd88 <__vector_39+0x160>
     c88:	c6 df       	rcall	.-116    	; 0xc16 <clearReceiveData>
     c8a:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <bytecounter.2066+0x1>
     c8e:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <bytecounter.2066>
     c92:	85 ec       	ldi	r24, 0xC5	; 197
     c94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c98:	77 c0       	rjmp	.+238    	; 0xd88 <__vector_39+0x160>
     c9a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <bytecounter.2066>
     c9e:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <bytecounter.2066+0x1>
     ca2:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ca6:	fc 01       	movw	r30, r24
     ca8:	e2 54       	subi	r30, 0x42	; 66
     caa:	fc 4f       	sbci	r31, 0xFC	; 252
     cac:	20 83       	st	Z, r18
     cae:	82 31       	cpi	r24, 0x12	; 18
     cb0:	91 05       	cpc	r25, r1
     cb2:	4c f4       	brge	.+18     	; 0xcc6 <__vector_39+0x9e>
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <bytecounter.2066+0x1>
     cba:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <bytecounter.2066>
     cbe:	85 ec       	ldi	r24, 0xC5	; 197
     cc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     cc4:	61 c0       	rjmp	.+194    	; 0xd88 <__vector_39+0x160>
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <bytecounter.2066+0x1>
     ccc:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <bytecounter.2066>
     cd0:	85 e8       	ldi	r24, 0x85	; 133
     cd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     cd6:	58 c0       	rjmp	.+176    	; 0xd88 <__vector_39+0x160>
     cd8:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <compassFlag>
     cdc:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <compassFlag+0x1>
     ce0:	89 2b       	or	r24, r25
     ce2:	71 f4       	brne	.+28     	; 0xd00 <__vector_39+0xd8>
     ce4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ce8:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <bytecounter.2066>
     cec:	f0 91 87 03 	lds	r31, 0x0387	; 0x800387 <bytecounter.2066+0x1>
     cf0:	e2 54       	subi	r30, 0x42	; 66
     cf2:	fc 4f       	sbci	r31, 0xFC	; 252
     cf4:	80 83       	st	Z, r24
     cf6:	85 e9       	ldi	r24, 0x95	; 149
     cf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     cfc:	7d df       	rcall	.-262    	; 0xbf8 <I2C_receiveInterpreter>
     cfe:	44 c0       	rjmp	.+136    	; 0xd88 <__vector_39+0x160>
     d00:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     d04:	c8 ef       	ldi	r28, 0xF8	; 248
     d06:	d3 e0       	ldi	r29, 0x03	; 3
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	03 e0       	ldi	r16, 0x03	; 3
     d18:	0e 94 a6 10 	call	0x214c	; 0x214c <__ashldi3>
     d1c:	a2 2e       	mov	r10, r18
     d1e:	b3 2e       	mov	r11, r19
     d20:	c4 2e       	mov	r12, r20
     d22:	d5 2e       	mov	r13, r21
     d24:	e6 2e       	mov	r14, r22
     d26:	f7 2e       	mov	r15, r23
     d28:	e8 2f       	mov	r30, r24
     d2a:	19 2f       	mov	r17, r25
     d2c:	02 e0       	ldi	r16, 0x02	; 2
     d2e:	0e 94 a6 10 	call	0x214c	; 0x214c <__ashldi3>
     d32:	0e 2f       	mov	r16, r30
     d34:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__subdi3>
     d38:	a2 2e       	mov	r10, r18
     d3a:	b3 2e       	mov	r11, r19
     d3c:	c4 2e       	mov	r12, r20
     d3e:	d5 2e       	mov	r13, r21
     d40:	e6 2e       	mov	r14, r22
     d42:	f7 2e       	mov	r15, r23
     d44:	e8 2f       	mov	r30, r24
     d46:	19 2f       	mov	r17, r25
     d48:	04 e0       	ldi	r16, 0x04	; 4
     d4a:	0e 94 a6 10 	call	0x214c	; 0x214c <__ashldi3>
     d4e:	0e 2f       	mov	r16, r30
     d50:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__subdi3>
     d54:	aa 24       	eor	r10, r10
     d56:	aa 94       	dec	r10
     d58:	b1 2c       	mov	r11, r1
     d5a:	c1 2c       	mov	r12, r1
     d5c:	d1 2c       	mov	r13, r1
     d5e:	e1 2c       	mov	r14, r1
     d60:	f1 2c       	mov	r15, r1
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	10 e0       	ldi	r17, 0x00	; 0
     d66:	0e 94 4a 10 	call	0x2094	; 0x2094 <__udivdi3>
     d6a:	2f 87       	std	Y+15, r18	; 0x0f
     d6c:	38 8b       	std	Y+16, r19	; 0x10
     d6e:	49 8b       	std	Y+17, r20	; 0x11
     d70:	5a 8b       	std	Y+18, r21	; 0x12
     d72:	6b 8b       	std	Y+19, r22	; 0x13
     d74:	7c 8b       	std	Y+20, r23	; 0x14
     d76:	8d 8b       	std	Y+21, r24	; 0x15
     d78:	9e 8b       	std	Y+22, r25	; 0x16
     d7a:	85 e9       	ldi	r24, 0x95	; 149
     d7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d80:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <compassFlag+0x1>
     d84:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <compassFlag>
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	0f 90       	pop	r0
     db6:	0b be       	out	0x3b, r0	; 59
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <TWIwaitUntilReady>:
=======
     1dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e0:	e1 ec       	ldi	r30, 0xC1	; 193
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 69       	ori	r24, 0x90	; 144
     1e8:	80 83       	st	Z, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 60       	ori	r24, 0x08	; 8
     1ee:	80 83       	st	Z, r24
     1f0:	e2 ec       	ldi	r30, 0xC2	; 194
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	86 60       	ori	r24, 0x06	; 6
     1f8:	80 83       	st	Z, r24
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     206:	08 95       	ret

00000208 <__vector_25>:
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
     23e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     242:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTreceived>
     246:	90 ed       	ldi	r25, 0xD0	; 208
     248:	98 0f       	add	r25, r24
     24a:	9a 30       	cpi	r25, 0x0A	; 10
     24c:	10 f0       	brcs	.+4      	; 0x252 <__vector_25+0x4a>
     24e:	80 32       	cpi	r24, 0x20	; 32
     250:	99 f4       	brne	.+38     	; 0x278 <__vector_25+0x70>
     252:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <USARTinputPos>
     256:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <USARTinputPos+0x1>
     25a:	2f 3f       	cpi	r18, 0xFF	; 255
     25c:	31 05       	cpc	r19, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <__vector_25+0x5a>
     260:	de c1       	rjmp	.+956    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <USARTinputPos+0x1>
     26a:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <USARTinputPos>
     26e:	f9 01       	movw	r30, r18
     270:	e0 56       	subi	r30, 0x60	; 96
     272:	fc 4f       	sbci	r31, 0xFC	; 252
     274:	80 83       	st	Z, r24
     276:	d3 c1       	rjmp	.+934    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     278:	9f e9       	ldi	r25, 0x9F	; 159
     27a:	98 0f       	add	r25, r24
     27c:	9a 31       	cpi	r25, 0x1A	; 26
     27e:	28 f4       	brcc	.+10     	; 0x28a <__vector_25+0x82>
     280:	82 36       	cpi	r24, 0x62	; 98
     282:	29 f0       	breq	.+10     	; 0x28e <__vector_25+0x86>
     284:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     288:	ca c1       	rjmp	.+916    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     28a:	82 36       	cpi	r24, 0x62	; 98
     28c:	51 f4       	brne	.+20     	; 0x2a2 <__vector_25+0x9a>
     28e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     292:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     29c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     2a0:	be c1       	rjmp	.+892    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     2a2:	8d 30       	cpi	r24, 0x0D	; 13
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_25+0xa0>
     2a6:	bb c1       	rjmp	.+886    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     2a8:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <USARTinputPos>
     2ac:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USARTinputPos+0x1>
     2b0:	11 23       	and	r17, r17
     2b2:	0c f4       	brge	.+2      	; 0x2b6 <__vector_25+0xae>
     2b4:	92 c0       	rjmp	.+292    	; 0x3da <__vector_25+0x1d2>
     2b6:	ea e3       	ldi	r30, 0x3A	; 58
     2b8:	f3 e0       	ldi	r31, 0x03	; 3
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	10 82       	st	Z, r1
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	15 82       	std	Z+5, r1	; 0x05
     2c4:	14 82       	std	Z+4, r1	; 0x04
     2c6:	e4 e3       	ldi	r30, 0x34	; 52
     2c8:	f3 e0       	ldi	r31, 0x03	; 3
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	9f ef       	ldi	r25, 0xFF	; 255
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	80 83       	st	Z, r24
     2d2:	93 83       	std	Z+3, r25	; 0x03
     2d4:	82 83       	std	Z+2, r24	; 0x02
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <numberStart.2002+0x1>
     2de:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <numberStart.2002>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	e0 56       	subi	r30, 0x60	; 96
     2f0:	fc 4f       	sbci	r31, 0xFC	; 252
     2f2:	30 81       	ld	r19, Z
     2f4:	30 32       	cpi	r19, 0x20	; 32
     2f6:	79 f4       	brne	.+30     	; 0x316 <__vector_25+0x10e>
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	fa 01       	movw	r30, r20
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	e2 5d       	subi	r30, 0xD2	; 210
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	43 30       	cpi	r20, 0x03	; 3
     30e:	51 05       	cpc	r21, r1
     310:	0c f0       	brlt	.+2      	; 0x314 <__vector_25+0x10c>
     312:	7f c1       	rjmp	.+766    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     314:	0a c0       	rjmp	.+20     	; 0x32a <__vector_25+0x122>
     316:	fa 01       	movw	r30, r20
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	ec 5c       	subi	r30, 0xCC	; 204
     31e:	fc 4f       	sbci	r31, 0xFC	; 252
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	80 83       	st	Z, r24
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	82 2f       	mov	r24, r18
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 17       	cp	r16, r24
     332:	19 07       	cpc	r17, r25
     334:	dc f6       	brge	.-74     	; 0x2ec <__vector_25+0xe4>
     336:	6d c1       	rjmp	.+730    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     338:	f9 01       	movw	r30, r18
     33a:	e0 56       	subi	r30, 0x60	; 96
     33c:	fc 4f       	sbci	r31, 0xFC	; 252
     33e:	c0 80       	ld	r12, Z
     340:	60 e2       	ldi	r22, 0x20	; 32
     342:	c6 12       	cpse	r12, r22
     344:	09 c0       	rjmp	.+18     	; 0x358 <__vector_25+0x150>
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	e8 1a       	sub	r14, r24
     34a:	f8 0a       	sbc	r15, r24
     34c:	63 e0       	ldi	r22, 0x03	; 3
     34e:	e6 16       	cp	r14, r22
     350:	f1 04       	cpc	r15, r1
     352:	0c f0       	brlt	.+2      	; 0x356 <__vector_25+0x14e>
     354:	42 c0       	rjmp	.+132    	; 0x3da <__vector_25+0x1d2>
     356:	3a c0       	rjmp	.+116    	; 0x3cc <__vector_25+0x1c4>
     358:	e7 01       	movw	r28, r14
     35a:	cc 0f       	add	r28, r28
     35c:	dd 1f       	adc	r29, r29
     35e:	de 01       	movw	r26, r28
     360:	ac 5c       	subi	r26, 0xCC	; 204
     362:	bc 4f       	sbci	r27, 0xFC	; 252
     364:	fe 01       	movw	r30, r28
     366:	e2 5d       	subi	r30, 0xD2	; 210
     368:	fc 4f       	sbci	r31, 0xFC	; 252
     36a:	6d 91       	ld	r22, X+
     36c:	7c 91       	ld	r23, X
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	68 0f       	add	r22, r24
     374:	79 1f       	adc	r23, r25
     376:	62 1b       	sub	r22, r18
     378:	73 0b       	sbc	r23, r19
     37a:	07 2e       	mov	r0, r23
     37c:	00 0c       	add	r0, r0
     37e:	88 0b       	sbc	r24, r24
     380:	99 0b       	sbc	r25, r25
     382:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatsisf>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 e4       	ldi	r25, 0x41	; 65
     392:	0e 94 9e 0b 	call	0x173c	; 0x173c <pow>
     396:	c6 5c       	subi	r28, 0xC6	; 198
     398:	dc 4f       	sbci	r29, 0xFC	; 252
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	0e 94 18 0a 	call	0x1430	; 0x1430 <__addsf3>
     3a6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fixsfsi>
     3aa:	20 ed       	ldi	r18, 0xD0	; 208
     3ac:	2c 0d       	add	r18, r12
     3ae:	42 2f       	mov	r20, r18
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	46 9f       	mul	r20, r22
     3b4:	90 01       	movw	r18, r0
     3b6:	47 9f       	mul	r20, r23
     3b8:	30 0d       	add	r19, r0
     3ba:	56 9f       	mul	r21, r22
     3bc:	30 0d       	add	r19, r0
     3be:	11 24       	eor	r1, r1
     3c0:	88 81       	ld	r24, Y
     3c2:	99 81       	ldd	r25, Y+1	; 0x01
     3c4:	82 0f       	add	r24, r18
     3c6:	93 1f       	adc	r25, r19
     3c8:	99 83       	std	Y+1, r25	; 0x01
     3ca:	88 83       	st	Y, r24
     3cc:	d3 94       	inc	r13
     3ce:	2d 2d       	mov	r18, r13
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	02 17       	cp	r16, r18
     3d4:	13 07       	cpc	r17, r19
     3d6:	0c f0       	brlt	.+2      	; 0x3da <__vector_25+0x1d2>
     3d8:	af cf       	rjmp	.-162    	; 0x338 <__vector_25+0x130>
     3da:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     3de:	ee 23       	and	r30, r30
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <__vector_25+0x1dc>
     3e2:	0e c1       	rjmp	.+540    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     3e4:	8e 2f       	mov	r24, r30
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	fc 01       	movw	r30, r24
     3ea:	e1 56       	subi	r30, 0x61	; 97
     3ec:	f1 09       	sbc	r31, r1
     3ee:	ea 31       	cpi	r30, 0x1A	; 26
     3f0:	f1 05       	cpc	r31, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__vector_25+0x1ee>
     3f4:	05 c1       	rjmp	.+522    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     3f6:	88 27       	eor	r24, r24
     3f8:	ee 58       	subi	r30, 0x8E	; 142
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	8f 4f       	sbci	r24, 0xFF	; 255
     3fe:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__tablejump2__>
     402:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     406:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rp6Data+0x2>
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	19 f4       	brne	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40e:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <rp6Data+0x2>
     412:	f6 c0       	rjmp	.+492    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <rp6Data+0x2>
     41a:	f2 c0       	rjmp	.+484    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     41c:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     420:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rp6Data+0x2>
     424:	8f 3f       	cpi	r24, 0xFF	; 255
     426:	19 f4       	brne	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     428:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <rp6Data+0x2>
     42c:	e9 c0       	rjmp	.+466    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <rp6Data+0x2>
     434:	e5 c0       	rjmp	.+458    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     436:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     43a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <rp6Data+0x3>
     43e:	8f 3f       	cpi	r24, 0xFF	; 255
     440:	19 f4       	brne	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     442:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <rp6Data+0x3>
     446:	dc c0       	rjmp	.+440    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <rp6Data+0x3>
     44e:	d8 c0       	rjmp	.+432    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     450:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     454:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <rp6Data+0x3>
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	19 f4       	brne	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45c:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <rp6Data+0x3>
     460:	cf c0       	rjmp	.+414    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <rp6Data+0x3>
     468:	cb c0       	rjmp	.+406    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     46a:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     46e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <number.2000>
     472:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <number.2000+0x1>
     476:	85 36       	cpi	r24, 0x65	; 101
     478:	91 05       	cpc	r25, r1
     47a:	08 f0       	brcs	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47c:	c1 c0       	rjmp	.+386    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     47e:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <rp6Data+0x1>
     482:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <rp6Data>
     486:	bc c0       	rjmp	.+376    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     488:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     48c:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <number.2000>
     490:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <number.2000+0x1>
     494:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <rp6Data+0x7>
     498:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <rp6Data+0x6>
     49c:	b1 c0       	rjmp	.+354    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     49e:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     4a2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <number.2000>
     4a6:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <number.2000+0x1>
     4aa:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <rp6Data+0x5>
     4ae:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <rp6Data+0x4>
     4b2:	a6 c0       	rjmp	.+332    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     4b4:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <programmedAmount>
     4b8:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <programmedAmount+0x1>
     4bc:	c9 01       	movw	r24, r18
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <programmedAmount+0x1>
     4c4:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <programmedAmount>
     4c8:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <number.2000>
     4cc:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <number.2000+0x1>
     4d0:	47 36       	cpi	r20, 0x67	; 103
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	56 07       	cpc	r21, r22
     4d6:	70 f0       	brcs	.+28     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4d8:	f9 01       	movw	r30, r18
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	e2 0f       	add	r30, r18
     4e0:	f3 1f       	adc	r31, r19
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ef 55       	subi	r30, 0x5F	; 95
     4e8:	fb 4f       	sbci	r31, 0xFB	; 251
     4ea:	27 e6       	ldi	r18, 0x67	; 103
     4ec:	31 e0       	ldi	r19, 0x01	; 1
     4ee:	31 83       	std	Z+1, r19	; 0x01
     4f0:	20 83       	st	Z, r18
     4f2:	0b c0       	rjmp	.+22     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     4f4:	f9 01       	movw	r30, r18
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	e2 0f       	add	r30, r18
     4fc:	f3 1f       	adc	r31, r19
     4fe:	ee 0f       	add	r30, r30
     500:	ff 1f       	adc	r31, r31
     502:	ef 55       	subi	r30, 0x5F	; 95
     504:	fb 4f       	sbci	r31, 0xFB	; 251
     506:	51 83       	std	Z+1, r21	; 0x01
     508:	40 83       	st	Z, r20
     50a:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <number.2000+0x2>
     50e:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <number.2000+0x3>
     512:	25 36       	cpi	r18, 0x65	; 101
     514:	31 05       	cpc	r19, r1
     516:	70 f0       	brcs	.+28     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     518:	fc 01       	movw	r30, r24
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	e8 0f       	add	r30, r24
     520:	f9 1f       	adc	r31, r25
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	e3 56       	subi	r30, 0x63	; 99
     528:	fb 4f       	sbci	r31, 0xFB	; 251
     52a:	24 e6       	ldi	r18, 0x64	; 100
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	31 83       	std	Z+1, r19	; 0x01
     530:	20 83       	st	Z, r18
     532:	0b c0       	rjmp	.+22     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     534:	fc 01       	movw	r30, r24
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	e8 0f       	add	r30, r24
     53c:	f9 1f       	adc	r31, r25
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	e3 56       	subi	r30, 0x63	; 99
     544:	fb 4f       	sbci	r31, 0xFB	; 251
     546:	31 83       	std	Z+1, r19	; 0x01
     548:	20 83       	st	Z, r18
     54a:	fc 01       	movw	r30, r24
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	e8 0f       	add	r30, r24
     552:	f9 1f       	adc	r31, r25
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	e1 56       	subi	r30, 0x61	; 97
     55a:	fb 4f       	sbci	r31, 0xFB	; 251
     55c:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <number.2000+0x4>
     560:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <number.2000+0x5>
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	80 83       	st	Z, r24
     568:	4b c0       	rjmp	.+150    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     56a:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <programmedAmount>
     56e:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <programmedAmount+0x1>
     572:	18 16       	cp	r1, r24
     574:	19 06       	cpc	r1, r25
     576:	0c f0       	brlt	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     578:	43 c0       	rjmp	.+134    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <programmedAmount+0x1>
     580:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <programmedAmount>
     584:	3d c0       	rjmp	.+122    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     586:	e1 ea       	ldi	r30, 0xA1	; 161
     588:	f4 e0       	ldi	r31, 0x04	; 4
     58a:	8a e5       	ldi	r24, 0x5A	; 90
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	91 83       	std	Z+1, r25	; 0x01
     590:	80 83       	st	Z, r24
     592:	82 e3       	ldi	r24, 0x32	; 50
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	93 83       	std	Z+3, r25	; 0x03
     598:	82 83       	std	Z+2, r24	; 0x02
     59a:	20 ed       	ldi	r18, 0xD0	; 208
     59c:	37 e0       	ldi	r19, 0x07	; 7
     59e:	35 83       	std	Z+5, r19	; 0x05
     5a0:	24 83       	std	Z+4, r18	; 0x04
     5a2:	17 82       	std	Z+7, r1	; 0x07
     5a4:	16 82       	std	Z+6, r1	; 0x06
     5a6:	91 87       	std	Z+9, r25	; 0x09
     5a8:	80 87       	std	Z+8, r24	; 0x08
     5aa:	88 ee       	ldi	r24, 0xE8	; 232
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	93 87       	std	Z+11, r25	; 0x0b
     5b0:	82 87       	std	Z+10, r24	; 0x0a
     5b2:	8e e0       	ldi	r24, 0x0E	; 14
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	95 87       	std	Z+13, r25	; 0x0d
     5b8:	84 87       	std	Z+12, r24	; 0x0c
     5ba:	84 e6       	ldi	r24, 0x64	; 100
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	97 87       	std	Z+15, r25	; 0x0f
     5c0:	86 87       	std	Z+14, r24	; 0x0e
     5c2:	88 eb       	ldi	r24, 0xB8	; 184
     5c4:	9b e0       	ldi	r25, 0x0B	; 11
     5c6:	91 8b       	std	Z+17, r25	; 0x11
     5c8:	80 8b       	std	Z+16, r24	; 0x10
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <programmedAmount+0x1>
     5d2:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <programmedAmount>
     5d6:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <currentParcourLine+0x1>
     5da:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <currentParcourLine>
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <runParcour>
     5e4:	0d c0       	rjmp	.+26     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     5e6:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <programmedAmount+0x1>
     5ea:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <programmedAmount>
     5ee:	08 c0       	rjmp	.+16     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     5f0:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
     5f4:	e9 e8       	ldi	r30, 0x89	; 137
     5f6:	f3 e0       	ldi	r31, 0x03	; 3
     5f8:	11 82       	std	Z+1, r1	; 0x01
     5fa:	10 82       	st	Z, r1
     5fc:	13 82       	std	Z+3, r1	; 0x03
     5fe:	12 82       	std	Z+2, r1	; 0x02
     600:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     60c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     610:	06 c0       	rjmp	.+12     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	d1 2c       	mov	r13, r1
     618:	e1 2c       	mov	r14, r1
     61a:	f1 2c       	mov	r15, r1
     61c:	8d ce       	rjmp	.-742    	; 0x338 <__vector_25+0x130>
     61e:	ff 91       	pop	r31
     620:	ef 91       	pop	r30
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	bf 91       	pop	r27
     628:	af 91       	pop	r26
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	7f 91       	pop	r23
     630:	6f 91       	pop	r22
     632:	5f 91       	pop	r21
     634:	4f 91       	pop	r20
     636:	3f 91       	pop	r19
     638:	2f 91       	pop	r18
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	0f 90       	pop	r0
     648:	0b be       	out	0x3b, r0	; 59
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <init_micros>:
     654:	e1 e9       	ldi	r30, 0x91	; 145
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	81 60       	ori	r24, 0x01	; 1
     65c:	80 83       	st	Z, r24
     65e:	e1 e7       	ldi	r30, 0x71	; 113
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	81 60       	ori	r24, 0x01	; 1
     666:	80 83       	st	Z, r24
     668:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     66c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     670:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <t3TotalOverflow>
     674:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <t3TotalOverflow+0x1>
     678:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <t3TotalOverflow+0x2>
     67c:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <t3TotalOverflow+0x3>
     680:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <t3TotalOverflow+0x4>
     684:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <t3TotalOverflow+0x5>
     688:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <t3TotalOverflow+0x6>
     68c:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <t3TotalOverflow+0x7>
     690:	08 95       	ret

00000692 <__vector_35>:
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	2f 93       	push	r18
     69e:	3f 93       	push	r19
     6a0:	4f 93       	push	r20
     6a2:	5f 93       	push	r21
     6a4:	6f 93       	push	r22
     6a6:	7f 93       	push	r23
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <t3TotalOverflow>
     6b2:	30 91 64 03 	lds	r19, 0x0364	; 0x800364 <t3TotalOverflow+0x1>
     6b6:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <t3TotalOverflow+0x2>
     6ba:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <t3TotalOverflow+0x3>
     6be:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <t3TotalOverflow+0x4>
     6c2:	70 91 68 03 	lds	r23, 0x0368	; 0x800368 <t3TotalOverflow+0x5>
     6c6:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <t3TotalOverflow+0x6>
     6ca:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <t3TotalOverflow+0x7>
     6ce:	a1 e0       	ldi	r26, 0x01	; 1
     6d0:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__adddi3_s8>
     6d4:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <t3TotalOverflow>
     6d8:	30 93 64 03 	sts	0x0364, r19	; 0x800364 <t3TotalOverflow+0x1>
     6dc:	40 93 65 03 	sts	0x0365, r20	; 0x800365 <t3TotalOverflow+0x2>
     6e0:	50 93 66 03 	sts	0x0366, r21	; 0x800366 <t3TotalOverflow+0x3>
     6e4:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <t3TotalOverflow+0x4>
     6e8:	70 93 68 03 	sts	0x0368, r23	; 0x800368 <t3TotalOverflow+0x5>
     6ec:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <t3TotalOverflow+0x6>
     6f0:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <t3TotalOverflow+0x7>
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	7f 91       	pop	r23
     6fc:	6f 91       	pop	r22
     6fe:	5f 91       	pop	r21
     700:	4f 91       	pop	r20
     702:	3f 91       	pop	r19
     704:	2f 91       	pop	r18
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63
     70a:	0f 90       	pop	r0
     70c:	1f 90       	pop	r1
     70e:	18 95       	reti

00000710 <micros>:
     710:	4f 92       	push	r4
     712:	5f 92       	push	r5
     714:	6f 92       	push	r6
     716:	7f 92       	push	r7
     718:	8f 92       	push	r8
     71a:	9f 92       	push	r9
     71c:	af 92       	push	r10
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     730:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     734:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <t3TotalOverflow>
     738:	30 91 64 03 	lds	r19, 0x0364	; 0x800364 <t3TotalOverflow+0x1>
     73c:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <t3TotalOverflow+0x2>
     740:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <t3TotalOverflow+0x3>
     744:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <t3TotalOverflow+0x4>
     748:	70 91 68 03 	lds	r23, 0x0368	; 0x800368 <t3TotalOverflow+0x5>
     74c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <t3TotalOverflow+0x6>
     750:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <t3TotalOverflow+0x7>
     754:	98 2c       	mov	r9, r8
     756:	88 24       	eor	r8, r8
     758:	99 0c       	add	r9, r9
     75a:	99 0c       	add	r9, r9
     75c:	99 0c       	add	r9, r9
     75e:	99 0c       	add	r9, r9
     760:	09 2c       	mov	r0, r9
     762:	00 0c       	add	r0, r0
     764:	aa 08       	sbc	r10, r10
     766:	bb 08       	sbc	r11, r11
     768:	bb 20       	and	r11, r11
     76a:	2c f4       	brge	.+10     	; 0x776 <micros+0x66>
     76c:	ef ef       	ldi	r30, 0xFF	; 255
     76e:	8e 0e       	add	r8, r30
     770:	9e 1e       	adc	r9, r30
     772:	a1 1c       	adc	r10, r1
     774:	b1 1c       	adc	r11, r1
     776:	25 01       	movw	r4, r10
     778:	77 24       	eor	r7, r7
     77a:	57 fc       	sbrc	r5, 7
     77c:	70 94       	com	r7
     77e:	67 2c       	mov	r6, r7
     780:	bb 0c       	add	r11, r11
     782:	88 08       	sbc	r8, r8
     784:	98 2c       	mov	r9, r8
     786:	54 01       	movw	r10, r8
     788:	0c e0       	ldi	r16, 0x0C	; 12
     78a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__ashldi3>
     78e:	f2 2f       	mov	r31, r18
     790:	e3 2f       	mov	r30, r19
     792:	c4 2e       	mov	r12, r20
     794:	d5 2e       	mov	r13, r21
     796:	e6 2e       	mov	r14, r22
     798:	f7 2e       	mov	r15, r23
     79a:	08 2f       	mov	r16, r24
     79c:	19 2f       	mov	r17, r25
     79e:	24 2d       	mov	r18, r4
     7a0:	35 2d       	mov	r19, r5
     7a2:	46 2d       	mov	r20, r6
     7a4:	57 2d       	mov	r21, r7
     7a6:	68 2d       	mov	r22, r8
     7a8:	78 2d       	mov	r23, r8
     7aa:	88 2d       	mov	r24, r8
     7ac:	98 2d       	mov	r25, r8
     7ae:	af 2e       	mov	r10, r31
     7b0:	be 2e       	mov	r11, r30
     7b2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__adddi3>
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	9f 90       	pop	r9
     7c8:	8f 90       	pop	r8
     7ca:	7f 90       	pop	r7
     7cc:	6f 90       	pop	r6
     7ce:	5f 90       	pop	r5
     7d0:	4f 90       	pop	r4
     7d2:	08 95       	ret

000007d4 <init_TWI>:
     7d4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     7d8:	88 e4       	ldi	r24, 0x48	; 72
     7da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     7e4:	08 95       	ret

000007e6 <init_TWI_Timer2>:
     7e6:	e1 eb       	ldi	r30, 0xB1	; 177
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	87 60       	ori	r24, 0x07	; 7
     7ee:	80 83       	st	Z, r24
     7f0:	e0 e7       	ldi	r30, 0x70	; 112
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	81 60       	ori	r24, 0x01	; 1
     7f8:	80 83       	st	Z, r24
     7fa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     7fe:	08 95       	ret

00000800 <init_PWM_Timer4>:
     800:	88 e0       	ldi	r24, 0x08	; 8
     802:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     806:	a0 ea       	ldi	r26, 0xA0	; 160
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	1c 92       	st	X, r1
     80c:	e1 ea       	ldi	r30, 0xA1	; 161
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	10 82       	st	Z, r1
     812:	82 e8       	ldi	r24, 0x82	; 130
     814:	8c 93       	st	X, r24
     816:	81 e1       	ldi	r24, 0x11	; 17
     818:	80 83       	st	Z, r24
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	9f e1       	ldi	r25, 0x1F	; 31
     824:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     828:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     82c:	08 95       	ret

0000082e <init_arduinoData>:
     82e:	eb e6       	ldi	r30, 0x6B	; 107
     830:	f3 e0       	ldi	r31, 0x03	; 3
     832:	11 82       	std	Z+1, r1	; 0x01
     834:	10 82       	st	Z, r1
     836:	13 82       	std	Z+3, r1	; 0x03
     838:	12 82       	std	Z+2, r1	; 0x02
     83a:	15 82       	std	Z+5, r1	; 0x05
     83c:	14 82       	std	Z+4, r1	; 0x04
     83e:	17 82       	std	Z+7, r1	; 0x07
     840:	16 82       	std	Z+6, r1	; 0x06
     842:	11 86       	std	Z+9, r1	; 0x09
     844:	10 86       	std	Z+8, r1	; 0x08
     846:	08 95       	ret

00000848 <init_rp6Data>:
     848:	e9 e8       	ldi	r30, 0x89	; 137
     84a:	f3 e0       	ldi	r31, 0x03	; 3
     84c:	11 82       	std	Z+1, r1	; 0x01
     84e:	10 82       	st	Z, r1
     850:	12 82       	std	Z+2, r1	; 0x02
     852:	13 82       	std	Z+3, r1	; 0x03
     854:	84 e2       	ldi	r24, 0x24	; 36
     856:	93 e1       	ldi	r25, 0x13	; 19
     858:	95 83       	std	Z+5, r25	; 0x05
     85a:	84 83       	std	Z+4, r24	; 0x04
     85c:	88 e2       	ldi	r24, 0x28	; 40
     85e:	93 e2       	ldi	r25, 0x23	; 35
     860:	97 83       	std	Z+7, r25	; 0x07
     862:	86 83       	std	Z+6, r24	; 0x06
     864:	88 e8       	ldi	r24, 0x88	; 136
     866:	93 e1       	ldi	r25, 0x13	; 19
     868:	91 87       	std	Z+9, r25	; 0x09
     86a:	80 87       	std	Z+8, r24	; 0x08
     86c:	88 ec       	ldi	r24, 0xC8	; 200
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a0 e0       	ldi	r26, 0x00	; 0
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	82 87       	std	Z+10, r24	; 0x0a
     876:	93 87       	std	Z+11, r25	; 0x0b
     878:	a4 87       	std	Z+12, r26	; 0x0c
     87a:	b5 87       	std	Z+13, r27	; 0x0d
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	86 87       	std	Z+14, r24	; 0x0e
     880:	08 95       	ret

00000882 <__vector_42>:
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	0b b6       	in	r0, 0x3b	; 59
     88e:	0f 92       	push	r0
     890:	af 92       	push	r10
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
     8b8:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rp6Data+0x2>
     8bc:	8f 3f       	cpi	r24, 0xFF	; 255
     8be:	91 f5       	brne	.+100    	; 0x924 <__vector_42+0xa2>
     8c0:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <rp6Data>
     8c4:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <rp6Data+0x1>
     8c8:	89 2b       	or	r24, r25
     8ca:	61 f1       	breq	.+88     	; 0x924 <__vector_42+0xa2>
     8cc:	21 df       	rcall	.-446    	; 0x710 <micros>
     8ce:	68 94       	set
     8d0:	aa 24       	eor	r10, r10
     8d2:	a5 f8       	bld	r10, 5
     8d4:	0f 2e       	mov	r0, r31
     8d6:	f1 ea       	ldi	r31, 0xA1	; 161
     8d8:	bf 2e       	mov	r11, r31
     8da:	f0 2d       	mov	r31, r0
     8dc:	0f 2e       	mov	r0, r31
     8de:	f7 e0       	ldi	r31, 0x07	; 7
     8e0:	cf 2e       	mov	r12, r31
     8e2:	f0 2d       	mov	r31, r0
     8e4:	d1 2c       	mov	r13, r1
     8e6:	e1 2c       	mov	r14, r1
     8e8:	f1 2c       	mov	r15, r1
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__umoddi3>
     8f2:	a0 e0       	ldi	r26, 0x00	; 0
     8f4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__cmpdi2_s8>
     8f8:	a9 f4       	brne	.+42     	; 0x924 <__vector_42+0xa2>
     8fa:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     8fe:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     902:	89 2b       	or	r24, r25
     904:	59 f4       	brne	.+22     	; 0x91c <__vector_42+0x9a>
     906:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     90a:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     916:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__vector_42+0xa2>
     91c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     920:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	0f 90       	pop	r0
     94e:	0b be       	out	0x3b, r0	; 59
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <arduinoDataInterpreter>:
     95a:	ab e6       	ldi	r26, 0x6B	; 107
     95c:	b3 e0       	ldi	r27, 0x03	; 3
     95e:	ef e4       	ldi	r30, 0x4F	; 79
     960:	f3 e0       	ldi	r31, 0x03	; 3
     962:	81 81       	ldd	r24, Z+1	; 0x01
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	98 2f       	mov	r25, r24
     968:	88 27       	eor	r24, r24
     96a:	22 81       	ldd	r18, Z+2	; 0x02
     96c:	82 0f       	add	r24, r18
     96e:	91 1d       	adc	r25, r1
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	9c 93       	st	X, r25
     974:	8e 93       	st	-X, r24
     976:	83 81       	ldd	r24, Z+3	; 0x03
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	98 2f       	mov	r25, r24
     97c:	88 27       	eor	r24, r24
     97e:	24 81       	ldd	r18, Z+4	; 0x04
     980:	82 0f       	add	r24, r18
     982:	91 1d       	adc	r25, r1
     984:	13 96       	adiw	r26, 0x03	; 3
     986:	9c 93       	st	X, r25
     988:	8e 93       	st	-X, r24
     98a:	12 97       	sbiw	r26, 0x02	; 2
     98c:	85 81       	ldd	r24, Z+5	; 0x05
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	98 2f       	mov	r25, r24
     992:	88 27       	eor	r24, r24
     994:	26 81       	ldd	r18, Z+6	; 0x06
     996:	82 0f       	add	r24, r18
     998:	91 1d       	adc	r25, r1
     99a:	15 96       	adiw	r26, 0x05	; 5
     99c:	9c 93       	st	X, r25
     99e:	8e 93       	st	-X, r24
     9a0:	14 97       	sbiw	r26, 0x04	; 4
     9a2:	87 81       	ldd	r24, Z+7	; 0x07
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	98 2f       	mov	r25, r24
     9a8:	88 27       	eor	r24, r24
     9aa:	20 85       	ldd	r18, Z+8	; 0x08
     9ac:	82 0f       	add	r24, r18
     9ae:	91 1d       	adc	r25, r1
     9b0:	17 96       	adiw	r26, 0x07	; 7
     9b2:	9c 93       	st	X, r25
     9b4:	8e 93       	st	-X, r24
     9b6:	16 97       	sbiw	r26, 0x06	; 6
     9b8:	81 85       	ldd	r24, Z+9	; 0x09
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	98 2f       	mov	r25, r24
     9be:	88 27       	eor	r24, r24
     9c0:	22 85       	ldd	r18, Z+10	; 0x0a
     9c2:	82 0f       	add	r24, r18
     9c4:	91 1d       	adc	r25, r1
     9c6:	19 96       	adiw	r26, 0x09	; 9
     9c8:	9c 93       	st	X, r25
     9ca:	8e 93       	st	-X, r24
     9cc:	18 97       	sbiw	r26, 0x08	; 8
     9ce:	08 95       	ret

000009d0 <I2C_receiveInterpreter>:
     9d0:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <receiveDataTWI>
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	09 f4       	brne	.+2      	; 0x9da <I2C_receiveInterpreter+0xa>
     9d8:	c0 cf       	rjmp	.-128    	; 0x95a <arduinoDataInterpreter>
     9da:	08 95       	ret

000009dc <clearSendData>:
     9dc:	e5 e7       	ldi	r30, 0x75	; 117
     9de:	f3 e0       	ldi	r31, 0x03	; 3
     9e0:	89 e8       	ldi	r24, 0x89	; 137
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	11 92       	st	Z+, r1
     9e6:	e8 17       	cp	r30, r24
     9e8:	f9 07       	cpc	r31, r25
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <clearSendData+0x8>
     9ec:	08 95       	ret

000009ee <clearReceiveData>:
     9ee:	ef e4       	ldi	r30, 0x4F	; 79
     9f0:	f3 e0       	ldi	r31, 0x03	; 3
     9f2:	83 e6       	ldi	r24, 0x63	; 99
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	11 92       	st	Z+, r1
     9f8:	e8 17       	cp	r30, r24
     9fa:	f9 07       	cpc	r31, r25
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <clearReceiveData+0x8>
     9fe:	08 95       	ret

00000a00 <__vector_39>:
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	0b b6       	in	r0, 0x3b	; 59
     a0c:	0f 92       	push	r0
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31
     a3a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     a3e:	80 35       	cpi	r24, 0x50	; 80
     a40:	c1 f0       	breq	.+48     	; 0xa72 <__vector_39+0x72>
     a42:	88 35       	cpi	r24, 0x58	; 88
     a44:	a9 f1       	breq	.+106    	; 0xab0 <__vector_39+0xb0>
     a46:	80 34       	cpi	r24, 0x40	; 64
     a48:	09 f0       	breq	.+2      	; 0xa4c <__vector_39+0x4c>
     a4a:	8a c0       	rjmp	.+276    	; 0xb60 <__vector_39+0x160>
     a4c:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <compassFlag>
     a50:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <compassFlag+0x1>
     a54:	89 2b       	or	r24, r25
     a56:	21 f0       	breq	.+8      	; 0xa60 <__vector_39+0x60>
     a58:	85 e8       	ldi	r24, 0x85	; 133
     a5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a5e:	80 c0       	rjmp	.+256    	; 0xb60 <__vector_39+0x160>
     a60:	c6 df       	rcall	.-116    	; 0x9ee <clearReceiveData>
     a62:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <bytecounter.2065+0x1>
     a66:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <bytecounter.2065>
     a6a:	85 ec       	ldi	r24, 0xC5	; 197
     a6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a70:	77 c0       	rjmp	.+238    	; 0xb60 <__vector_39+0x160>
     a72:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <bytecounter.2065>
     a76:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <bytecounter.2065+0x1>
     a7a:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     a7e:	fc 01       	movw	r30, r24
     a80:	e1 5b       	subi	r30, 0xB1	; 177
     a82:	fc 4f       	sbci	r31, 0xFC	; 252
     a84:	20 83       	st	Z, r18
     a86:	82 31       	cpi	r24, 0x12	; 18
     a88:	91 05       	cpc	r25, r1
     a8a:	4c f4       	brge	.+18     	; 0xa9e <__vector_39+0x9e>
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <bytecounter.2065+0x1>
     a92:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <bytecounter.2065>
     a96:	85 ec       	ldi	r24, 0xC5	; 197
     a98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a9c:	61 c0       	rjmp	.+194    	; 0xb60 <__vector_39+0x160>
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <bytecounter.2065+0x1>
     aa4:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <bytecounter.2065>
     aa8:	85 e8       	ldi	r24, 0x85	; 133
     aaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     aae:	58 c0       	rjmp	.+176    	; 0xb60 <__vector_39+0x160>
     ab0:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <compassFlag>
     ab4:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <compassFlag+0x1>
     ab8:	89 2b       	or	r24, r25
     aba:	71 f4       	brne	.+28     	; 0xad8 <__vector_39+0xd8>
     abc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ac0:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <bytecounter.2065>
     ac4:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <bytecounter.2065+0x1>
     ac8:	e1 5b       	subi	r30, 0xB1	; 177
     aca:	fc 4f       	sbci	r31, 0xFC	; 252
     acc:	80 83       	st	Z, r24
     ace:	85 e9       	ldi	r24, 0x95	; 149
     ad0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ad4:	7d df       	rcall	.-262    	; 0x9d0 <I2C_receiveInterpreter>
     ad6:	44 c0       	rjmp	.+136    	; 0xb60 <__vector_39+0x160>
     ad8:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     adc:	c9 e8       	ldi	r28, 0x89	; 137
     ade:	d3 e0       	ldi	r29, 0x03	; 3
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	03 e0       	ldi	r16, 0x03	; 3
     af0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__ashldi3>
     af4:	a2 2e       	mov	r10, r18
     af6:	b3 2e       	mov	r11, r19
     af8:	c4 2e       	mov	r12, r20
     afa:	d5 2e       	mov	r13, r21
     afc:	e6 2e       	mov	r14, r22
     afe:	f7 2e       	mov	r15, r23
     b00:	e8 2f       	mov	r30, r24
     b02:	19 2f       	mov	r17, r25
     b04:	02 e0       	ldi	r16, 0x02	; 2
     b06:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__ashldi3>
     b0a:	0e 2f       	mov	r16, r30
     b0c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__subdi3>
     b10:	a2 2e       	mov	r10, r18
     b12:	b3 2e       	mov	r11, r19
     b14:	c4 2e       	mov	r12, r20
     b16:	d5 2e       	mov	r13, r21
     b18:	e6 2e       	mov	r14, r22
     b1a:	f7 2e       	mov	r15, r23
     b1c:	e8 2f       	mov	r30, r24
     b1e:	19 2f       	mov	r17, r25
     b20:	04 e0       	ldi	r16, 0x04	; 4
     b22:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__ashldi3>
     b26:	0e 2f       	mov	r16, r30
     b28:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__subdi3>
     b2c:	aa 24       	eor	r10, r10
     b2e:	aa 94       	dec	r10
     b30:	b1 2c       	mov	r11, r1
     b32:	c1 2c       	mov	r12, r1
     b34:	d1 2c       	mov	r13, r1
     b36:	e1 2c       	mov	r14, r1
     b38:	f1 2c       	mov	r15, r1
     b3a:	00 e0       	ldi	r16, 0x00	; 0
     b3c:	10 e0       	ldi	r17, 0x00	; 0
     b3e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__udivdi3>
     b42:	2f 87       	std	Y+15, r18	; 0x0f
     b44:	38 8b       	std	Y+16, r19	; 0x10
     b46:	49 8b       	std	Y+17, r20	; 0x11
     b48:	5a 8b       	std	Y+18, r21	; 0x12
     b4a:	6b 8b       	std	Y+19, r22	; 0x13
     b4c:	7c 8b       	std	Y+20, r23	; 0x14
     b4e:	8d 8b       	std	Y+21, r24	; 0x15
     b50:	9e 8b       	std	Y+22, r25	; 0x16
     b52:	85 e9       	ldi	r24, 0x95	; 149
     b54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b58:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <compassFlag+0x1>
     b5c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <compassFlag>
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	7f 91       	pop	r23
     b72:	6f 91       	pop	r22
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	0f 90       	pop	r0
     b8e:	0b be       	out	0x3b, r0	; 59
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	18 95       	reti

00000b9a <TWIwaitUntilReady>:
>>>>>>> Stashed changes


void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
<<<<<<< Updated upstream
     dc2:	ec eb       	ldi	r30, 0xBC	; 188
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	88 23       	and	r24, r24
     dca:	ec f7       	brge	.-6      	; 0xdc6 <TWIwaitUntilReady+0x4>
}
     dcc:	08 95       	ret

00000dce <checkCode>:


void checkCode(uint8_t code){
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	cf 5f       	subi	r28, 0xFF	; 255
     dd8:	d1 09       	sbc	r29, r1
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
=======
     b9a:	ec eb       	ldi	r30, 0xBC	; 188
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 23       	and	r24, r24
     ba2:	ec f7       	brge	.-6      	; 0xb9e <TWIwaitUntilReady+0x4>
}
     ba4:	08 95       	ret

00000ba6 <checkCode>:


void checkCode(uint8_t code){
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	cf 5f       	subi	r28, 0xFF	; 255
     bb0:	d1 09       	sbc	r29, r1
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
>>>>>>> Stashed changes
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
<<<<<<< Updated upstream
     de4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
=======
     bbc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
>>>>>>> Stashed changes
	while (!(TWCR & (1 << TWINT)));
}


void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
<<<<<<< Updated upstream
     de8:	98 7f       	andi	r25, 0xF8	; 248
     dea:	89 17       	cp	r24, r25
     dec:	89 f0       	breq	.+34     	; 0xe10 <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     dee:	80 e1       	ldi	r24, 0x10	; 16
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	37 d4       	rcall	.+2158   	; 0x1662 <writeString>
=======
     bc0:	98 7f       	andi	r25, 0xF8	; 248
     bc2:	89 17       	cp	r24, r25
     bc4:	89 f0       	breq	.+34     	; 0xbe8 <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     bc6:	86 e1       	ldi	r24, 0x16	; 22
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	76 d3       	rcall	.+1772   	; 0x12b8 <writeString>
>>>>>>> Stashed changes
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
<<<<<<< Updated upstream
     df4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
=======
     bcc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
>>>>>>> Stashed changes
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
<<<<<<< Updated upstream
     df8:	88 7f       	andi	r24, 0xF8	; 248
     dfa:	40 e1       	ldi	r20, 0x10	; 16
     dfc:	be 01       	movw	r22, r28
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 1f 11 	call	0x223e	; 0x223e <__itoa_ncheck>
=======
     bd0:	88 7f       	andi	r24, 0xF8	; 248
     bd2:	40 e1       	ldi	r20, 0x10	; 16
     bd4:	be 01       	movw	r22, r28
     bd6:	6f 5f       	subi	r22, 0xFF	; 255
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__itoa_ncheck>
>>>>>>> Stashed changes

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
<<<<<<< Updated upstream
     e08:	2c d4       	rcall	.+2136   	; 0x1662 <writeString>
		writeString("\n\n\r");
     e0a:	8b e3       	ldi	r24, 0x3B	; 59
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	29 d4       	rcall	.+2130   	; 0x1662 <writeString>
	}
}
     e10:	c1 50       	subi	r28, 0x01	; 1
     e12:	df 4f       	sbci	r29, 0xFF	; 255
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	c8 2f       	mov	r28, r24
     e38:	8b 01       	movw	r16, r22
	
	TWISendStart();
     e3a:	0f 2e       	mov	r0, r31
     e3c:	fc eb       	ldi	r31, 0xBC	; 188
     e3e:	cf 2e       	mov	r12, r31
     e40:	d1 2c       	mov	r13, r1
     e42:	f0 2d       	mov	r31, r0
     e44:	85 ea       	ldi	r24, 0xA5	; 165
     e46:	f6 01       	movw	r30, r12
     e48:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     e4a:	bb df       	rcall	.-138    	; 0xdc2 <TWIwaitUntilReady>
	checkCode(0x08);
     e4c:	88 e0       	ldi	r24, 0x08	; 8
     e4e:	bf df       	rcall	.-130    	; 0xdce <checkCode>
	
	TWIWrite((address << 1));
     e50:	cc 0f       	add	r28, r28
=======
     be0:	6b d3       	rcall	.+1750   	; 0x12b8 <writeString>
		writeString("\n\n\r");
     be2:	81 e4       	ldi	r24, 0x41	; 65
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	68 d3       	rcall	.+1744   	; 0x12b8 <writeString>
	}
}
     be8:	c1 50       	subi	r28, 0x01	; 1
     bea:	df 4f       	sbci	r29, 0xFF	; 255
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     bfc:	af 92       	push	r10
     bfe:	bf 92       	push	r11
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	c8 2f       	mov	r28, r24
     c10:	8b 01       	movw	r16, r22
	
	TWISendStart();
     c12:	0f 2e       	mov	r0, r31
     c14:	fc eb       	ldi	r31, 0xBC	; 188
     c16:	cf 2e       	mov	r12, r31
     c18:	d1 2c       	mov	r13, r1
     c1a:	f0 2d       	mov	r31, r0
     c1c:	85 ea       	ldi	r24, 0xA5	; 165
     c1e:	f6 01       	movw	r30, r12
     c20:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     c22:	bb df       	rcall	.-138    	; 0xb9a <TWIwaitUntilReady>
	checkCode(0x08);
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	bf df       	rcall	.-130    	; 0xba6 <checkCode>
	
	TWIWrite((address << 1));
     c28:	cc 0f       	add	r28, r28
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     e52:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     e56:	85 e8       	ldi	r24, 0x85	; 133
     e58:	f6 01       	movw	r30, r12
=======
     c2a:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     c2e:	85 e8       	ldi	r24, 0x85	; 133
     c30:	f6 01       	movw	r30, r12
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     e5a:	80 83       	st	Z, r24
	checkCode(0x18);
     e5c:	b2 df       	rcall	.-156    	; 0xdc2 <TWIwaitUntilReady>
     e5e:	88 e1       	ldi	r24, 0x18	; 24
     e60:	b6 df       	rcall	.-148    	; 0xdce <checkCode>
     e62:	e8 01       	movw	r28, r16
     e64:	0c 5e       	subi	r16, 0xEC	; 236
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
=======
     c32:	80 83       	st	Z, r24
	checkCode(0x18);
     c34:	b2 df       	rcall	.-156    	; 0xb9a <TWIwaitUntilReady>
     c36:	88 e1       	ldi	r24, 0x18	; 24
     c38:	b6 df       	rcall	.-148    	; 0xba6 <checkCode>
     c3a:	e8 01       	movw	r28, r16
     c3c:	0c 5e       	subi	r16, 0xEC	; 236
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     e68:	0f 2e       	mov	r0, r31
     e6a:	fb eb       	ldi	r31, 0xBB	; 187
     e6c:	af 2e       	mov	r10, r31
     e6e:	b1 2c       	mov	r11, r1
     e70:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     e72:	0f 2e       	mov	r0, r31
     e74:	f5 e8       	ldi	r31, 0x85	; 133
     e76:	ff 2e       	mov	r15, r31
     e78:	f0 2d       	mov	r31, r0
=======
     c40:	0f 2e       	mov	r0, r31
     c42:	fb eb       	ldi	r31, 0xBB	; 187
     c44:	af 2e       	mov	r10, r31
     c46:	b1 2c       	mov	r11, r1
     c48:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     c4a:	0f 2e       	mov	r0, r31
     c4c:	f5 e8       	ldi	r31, 0x85	; 133
     c4e:	ff 2e       	mov	r15, r31
     c50:	f0 2d       	mov	r31, r0
>>>>>>> Stashed changes
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
<<<<<<< Updated upstream
     e7a:	89 91       	ld	r24, Y+
=======
     c52:	89 91       	ld	r24, Y+
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     e7c:	f5 01       	movw	r30, r10
	TWISendTransmit();
     e7e:	80 83       	st	Z, r24
=======
     c54:	f5 01       	movw	r30, r10
	TWISendTransmit();
     c56:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
<<<<<<< Updated upstream
     e80:	f6 01       	movw	r30, r12
     e82:	f0 82       	st	Z, r15
		checkCode(0x28);
     e84:	9e df       	rcall	.-196    	; 0xdc2 <TWIwaitUntilReady>
     e86:	88 e2       	ldi	r24, 0x28	; 40
     e88:	a2 df       	rcall	.-188    	; 0xdce <checkCode>
=======
     c58:	f6 01       	movw	r30, r12
     c5a:	f0 82       	st	Z, r15
		checkCode(0x28);
     c5c:	9e df       	rcall	.-196    	; 0xb9a <TWIwaitUntilReady>
     c5e:	88 e2       	ldi	r24, 0x28	; 40
     c60:	a2 df       	rcall	.-188    	; 0xba6 <checkCode>
>>>>>>> Stashed changes
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
<<<<<<< Updated upstream
     e8a:	c0 17       	cp	r28, r16
     e8c:	d1 07       	cpc	r29, r17
     e8e:	a9 f7       	brne	.-22     	; 0xe7a <writeToSlave+0x56>
=======
     c62:	c0 17       	cp	r28, r16
     c64:	d1 07       	cpc	r29, r17
     c66:	a9 f7       	brne	.-22     	; 0xc52 <writeToSlave+0x56>
>>>>>>> Stashed changes
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
		checkCode(0x28);
	}
	
	TWISendStop();
<<<<<<< Updated upstream
     e90:	85 e9       	ldi	r24, 0x95	; 149
     e92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	bf 90       	pop	r11
     ea6:	af 90       	pop	r10
     ea8:	08 95       	ret

00000eaa <rp6DataConstructor>:
=======
     c68:	85 e9       	ldi	r24, 0x95	; 149
     c6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	08 95       	ret

00000c82 <rp6DataConstructor>:
>>>>>>> Stashed changes
	arduinoData.actualRightMotorSpeed = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
	arduinoData.totalDistance = (receiveDataTWI[9] << 8) + receiveDataTWI[10];
}


void rp6DataConstructor(){
<<<<<<< Updated upstream
     eaa:	0f 93       	push	r16
     eac:	cf 93       	push	r28
	clearSendData();
     eae:	aa de       	rcall	.-684    	; 0xc04 <clearSendData>
	
	sendDataTWI[0] = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     eb6:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <rp6Data>
     eba:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <rp6Data+0x1>
     ebe:	85 36       	cpi	r24, 0x65	; 101
     ec0:	91 05       	cpc	r25, r1
     ec2:	30 f0       	brcs	.+12     	; 0xed0 <rp6DataConstructor+0x26>
     ec4:	84 e6       	ldi	r24, 0x64	; 100
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <rp6Data+0x1>
     ecc:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     ed0:	a4 ee       	ldi	r26, 0xE4	; 228
     ed2:	b3 e0       	ldi	r27, 0x03	; 3
     ed4:	e8 ef       	ldi	r30, 0xF8	; 248
     ed6:	f3 e0       	ldi	r31, 0x03	; 3
     ed8:	80 81       	ld	r24, Z
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	8c 93       	st	X, r24
     ede:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	12 96       	adiw	r26, 0x02	; 2
     ee6:	8c 93       	st	X, r24
     ee8:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     eea:	83 81       	ldd	r24, Z+3	; 0x03
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	13 96       	adiw	r26, 0x03	; 3
     ef0:	8c 93       	st	X, r24
     ef2:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     ef4:	84 81       	ldd	r24, Z+4	; 0x04
     ef6:	95 81       	ldd	r25, Z+5	; 0x05
     ef8:	14 96       	adiw	r26, 0x04	; 4
     efa:	9c 93       	st	X, r25
     efc:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     efe:	15 96       	adiw	r26, 0x05	; 5
     f00:	8c 93       	st	X, r24
     f02:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     f04:	86 81       	ldd	r24, Z+6	; 0x06
     f06:	97 81       	ldd	r25, Z+7	; 0x07
     f08:	16 96       	adiw	r26, 0x06	; 6
     f0a:	9c 93       	st	X, r25
     f0c:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     f0e:	17 96       	adiw	r26, 0x07	; 7
     f10:	8c 93       	st	X, r24
     f12:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     f14:	80 85       	ldd	r24, Z+8	; 0x08
     f16:	91 85       	ldd	r25, Z+9	; 0x09
     f18:	18 96       	adiw	r26, 0x08	; 8
     f1a:	9c 93       	st	X, r25
     f1c:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     f1e:	19 96       	adiw	r26, 0x09	; 9
     f20:	8c 93       	st	X, r24
     f22:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     f24:	82 85       	ldd	r24, Z+10	; 0x0a
     f26:	93 85       	ldd	r25, Z+11	; 0x0b
     f28:	1a 96       	adiw	r26, 0x0a	; 10
     f2a:	9c 93       	st	X, r25
     f2c:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     f2e:	1b 96       	adiw	r26, 0x0b	; 11
     f30:	8c 93       	st	X, r24
     f32:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     f34:	86 85       	ldd	r24, Z+14	; 0x0e
     f36:	1c 96       	adiw	r26, 0x0c	; 12
     f38:	8c 93       	st	X, r24
     f3a:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     f3c:	c7 85       	ldd	r28, Z+15	; 0x0f
     f3e:	30 89       	ldd	r19, Z+16	; 0x10
     f40:	41 89       	ldd	r20, Z+17	; 0x11
     f42:	52 89       	ldd	r21, Z+18	; 0x12
     f44:	63 89       	ldd	r22, Z+19	; 0x13
     f46:	74 89       	ldd	r23, Z+20	; 0x14
     f48:	2c 2f       	mov	r18, r28
     f4a:	85 89       	ldd	r24, Z+21	; 0x15
     f4c:	96 89       	ldd	r25, Z+22	; 0x16
     f4e:	08 e0       	ldi	r16, 0x08	; 8
     f50:	0e 94 c1 10 	call	0x2182	; 0x2182 <__lshrdi3>
     f54:	1d 96       	adiw	r26, 0x0d	; 13
     f56:	2c 93       	st	X, r18
     f58:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     f5a:	1e 96       	adiw	r26, 0x0e	; 14
     f5c:	cc 93       	st	X, r28
     f5e:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     f60:	1f 96       	adiw	r26, 0x0f	; 15
     f62:	1c 92       	st	X, r1
     f64:	1f 97       	sbiw	r26, 0x0f	; 15
     f66:	50 96       	adiw	r26, 0x10	; 16
     f68:	1c 92       	st	X, r1
     f6a:	50 97       	sbiw	r26, 0x10	; 16
     f6c:	51 96       	adiw	r26, 0x11	; 17
     f6e:	1c 92       	st	X, r1
     f70:	51 97       	sbiw	r26, 0x11	; 17
     f72:	52 96       	adiw	r26, 0x12	; 18
     f74:	1c 92       	st	X, r1
     f76:	52 97       	sbiw	r26, 0x12	; 18
     f78:	53 96       	adiw	r26, 0x13	; 19
     f7a:	1c 92       	st	X, r1
     f7c:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     f7e:	bd 01       	movw	r22, r26
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	50 df       	rcall	.-352    	; 0xe24 <writeToSlave>
}
     f84:	cf 91       	pop	r28
     f86:	0f 91       	pop	r16
     f88:	08 95       	ret

00000f8a <readFromCompass>:
=======
     c82:	0f 93       	push	r16
     c84:	cf 93       	push	r28
	clearSendData();
     c86:	aa de       	rcall	.-684    	; 0x9dc <clearSendData>
	
	sendDataTWI[0] = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     c8e:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <rp6Data>
     c92:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <rp6Data+0x1>
     c96:	85 36       	cpi	r24, 0x65	; 101
     c98:	91 05       	cpc	r25, r1
     c9a:	30 f0       	brcs	.+12     	; 0xca8 <rp6DataConstructor+0x26>
     c9c:	84 e6       	ldi	r24, 0x64	; 100
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <rp6Data+0x1>
     ca4:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     ca8:	a5 e7       	ldi	r26, 0x75	; 117
     caa:	b3 e0       	ldi	r27, 0x03	; 3
     cac:	e9 e8       	ldi	r30, 0x89	; 137
     cae:	f3 e0       	ldi	r31, 0x03	; 3
     cb0:	80 81       	ld	r24, Z
     cb2:	11 96       	adiw	r26, 0x01	; 1
     cb4:	8c 93       	st	X, r24
     cb6:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	8c 93       	st	X, r24
     cc0:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     cc2:	83 81       	ldd	r24, Z+3	; 0x03
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	13 96       	adiw	r26, 0x03	; 3
     cc8:	8c 93       	st	X, r24
     cca:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     ccc:	84 81       	ldd	r24, Z+4	; 0x04
     cce:	95 81       	ldd	r25, Z+5	; 0x05
     cd0:	14 96       	adiw	r26, 0x04	; 4
     cd2:	9c 93       	st	X, r25
     cd4:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     cd6:	15 96       	adiw	r26, 0x05	; 5
     cd8:	8c 93       	st	X, r24
     cda:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     cdc:	86 81       	ldd	r24, Z+6	; 0x06
     cde:	97 81       	ldd	r25, Z+7	; 0x07
     ce0:	16 96       	adiw	r26, 0x06	; 6
     ce2:	9c 93       	st	X, r25
     ce4:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     ce6:	17 96       	adiw	r26, 0x07	; 7
     ce8:	8c 93       	st	X, r24
     cea:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     cec:	80 85       	ldd	r24, Z+8	; 0x08
     cee:	91 85       	ldd	r25, Z+9	; 0x09
     cf0:	18 96       	adiw	r26, 0x08	; 8
     cf2:	9c 93       	st	X, r25
     cf4:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     cf6:	19 96       	adiw	r26, 0x09	; 9
     cf8:	8c 93       	st	X, r24
     cfa:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     cfc:	82 85       	ldd	r24, Z+10	; 0x0a
     cfe:	93 85       	ldd	r25, Z+11	; 0x0b
     d00:	1a 96       	adiw	r26, 0x0a	; 10
     d02:	9c 93       	st	X, r25
     d04:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     d06:	1b 96       	adiw	r26, 0x0b	; 11
     d08:	8c 93       	st	X, r24
     d0a:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     d0c:	86 85       	ldd	r24, Z+14	; 0x0e
     d0e:	1c 96       	adiw	r26, 0x0c	; 12
     d10:	8c 93       	st	X, r24
     d12:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     d14:	c7 85       	ldd	r28, Z+15	; 0x0f
     d16:	30 89       	ldd	r19, Z+16	; 0x10
     d18:	41 89       	ldd	r20, Z+17	; 0x11
     d1a:	52 89       	ldd	r21, Z+18	; 0x12
     d1c:	63 89       	ldd	r22, Z+19	; 0x13
     d1e:	74 89       	ldd	r23, Z+20	; 0x14
     d20:	2c 2f       	mov	r18, r28
     d22:	85 89       	ldd	r24, Z+21	; 0x15
     d24:	96 89       	ldd	r25, Z+22	; 0x16
     d26:	08 e0       	ldi	r16, 0x08	; 8
     d28:	81 d7       	rcall	.+3842   	; 0x1c2c <__ashrdi3>
     d2a:	1d 96       	adiw	r26, 0x0d	; 13
     d2c:	2c 93       	st	X, r18
     d2e:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     d30:	1e 96       	adiw	r26, 0x0e	; 14
     d32:	cc 93       	st	X, r28
     d34:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     d36:	1f 96       	adiw	r26, 0x0f	; 15
     d38:	1c 92       	st	X, r1
     d3a:	1f 97       	sbiw	r26, 0x0f	; 15
     d3c:	50 96       	adiw	r26, 0x10	; 16
     d3e:	1c 92       	st	X, r1
     d40:	50 97       	sbiw	r26, 0x10	; 16
     d42:	51 96       	adiw	r26, 0x11	; 17
     d44:	1c 92       	st	X, r1
     d46:	51 97       	sbiw	r26, 0x11	; 17
     d48:	52 96       	adiw	r26, 0x12	; 18
     d4a:	1c 92       	st	X, r1
     d4c:	52 97       	sbiw	r26, 0x12	; 18
     d4e:	53 96       	adiw	r26, 0x13	; 19
     d50:	1c 92       	st	X, r1
     d52:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     d54:	bd 01       	movw	r22, r26
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	51 df       	rcall	.-350    	; 0xbfc <writeToSlave>
}
     d5a:	cf 91       	pop	r28
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <readFromCompass>:
>>>>>>> Stashed changes
	TWISendStop();
	
}


void readFromCompass(){
<<<<<<< Updated upstream
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
	compassFlag = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <compassFlag+0x1>
     f9e:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <compassFlag>
	TWISendStart();
     fa2:	cc eb       	ldi	r28, 0xBC	; 188
     fa4:	d0 e0       	ldi	r29, 0x00	; 0
     fa6:	05 ea       	ldi	r16, 0xA5	; 165
     fa8:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     faa:	0b df       	rcall	.-490    	; 0xdc2 <TWIwaitUntilReady>
	checkCode(0x08);
     fac:	88 e0       	ldi	r24, 0x08	; 8
     fae:	0f df       	rcall	.-482    	; 0xdce <checkCode>
=======
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
	compassFlag = 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <compassFlag+0x1>
     d74:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <compassFlag>
	TWISendStart();
     d78:	cc eb       	ldi	r28, 0xBC	; 188
     d7a:	d0 e0       	ldi	r29, 0x00	; 0
     d7c:	05 ea       	ldi	r16, 0xA5	; 165
     d7e:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     d80:	0c df       	rcall	.-488    	; 0xb9a <TWIwaitUntilReady>
	checkCode(0x08);
     d82:	88 e0       	ldi	r24, 0x08	; 8
     d84:	10 df       	rcall	.-480    	; 0xba6 <checkCode>
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     fb0:	0f 2e       	mov	r0, r31
     fb2:	fb eb       	ldi	r31, 0xBB	; 187
     fb4:	ef 2e       	mov	r14, r31
     fb6:	f1 2c       	mov	r15, r1
     fb8:	f0 2d       	mov	r31, r0
     fba:	80 ec       	ldi	r24, 0xC0	; 192
     fbc:	f7 01       	movw	r30, r14
     fbe:	80 83       	st	Z, r24
	TWISendTransmit();
     fc0:	15 e8       	ldi	r17, 0x85	; 133
=======
     d86:	0f 2e       	mov	r0, r31
     d88:	fb eb       	ldi	r31, 0xBB	; 187
     d8a:	ef 2e       	mov	r14, r31
     d8c:	f1 2c       	mov	r15, r1
     d8e:	f0 2d       	mov	r31, r0
     d90:	80 ec       	ldi	r24, 0xC0	; 192
     d92:	f7 01       	movw	r30, r14
     d94:	80 83       	st	Z, r24
	TWISendTransmit();
     d96:	15 e8       	ldi	r17, 0x85	; 133
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite(0xC0);
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     fc2:	18 83       	st	Y, r17
	checkCode(0x18);
     fc4:	fe de       	rcall	.-516    	; 0xdc2 <TWIwaitUntilReady>
     fc6:	88 e1       	ldi	r24, 0x18	; 24
     fc8:	02 df       	rcall	.-508    	; 0xdce <checkCode>
=======
     d98:	18 83       	st	Y, r17
	checkCode(0x18);
     d9a:	ff de       	rcall	.-514    	; 0xb9a <TWIwaitUntilReady>
     d9c:	88 e1       	ldi	r24, 0x18	; 24
     d9e:	03 df       	rcall	.-506    	; 0xba6 <checkCode>
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	f7 01       	movw	r30, r14
	TWISendTransmit();
     fce:	80 83       	st	Z, r24
=======
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	f7 01       	movw	r30, r14
	TWISendTransmit();
     da4:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	TWIWrite(0xC0);
	TWIwaitUntilReady();
	checkCode(0x18);
	
	TWIWrite(1);
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     fd0:	18 83       	st	Y, r17
	checkCode(0x28);
     fd2:	f7 de       	rcall	.-530    	; 0xdc2 <TWIwaitUntilReady>
     fd4:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     fd6:	fb de       	rcall	.-522    	; 0xdce <checkCode>
	TWIwaitUntilReady();
     fd8:	08 83       	st	Y, r16
	checkCode(0x10);
     fda:	f3 de       	rcall	.-538    	; 0xdc2 <TWIwaitUntilReady>
     fdc:	80 e1       	ldi	r24, 0x10	; 16
     fde:	f7 de       	rcall	.-530    	; 0xdce <checkCode>
=======
     da6:	18 83       	st	Y, r17
	checkCode(0x28);
     da8:	f8 de       	rcall	.-528    	; 0xb9a <TWIwaitUntilReady>
     daa:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     dac:	fc de       	rcall	.-520    	; 0xba6 <checkCode>
	TWIwaitUntilReady();
     dae:	08 83       	st	Y, r16
	checkCode(0x10);
     db0:	f4 de       	rcall	.-536    	; 0xb9a <TWIwaitUntilReady>
     db2:	80 e1       	ldi	r24, 0x10	; 16
     db4:	f8 de       	rcall	.-528    	; 0xba6 <checkCode>
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     fe0:	81 ec       	ldi	r24, 0xC1	; 193
     fe2:	f7 01       	movw	r30, r14
     fe4:	80 83       	st	Z, r24
	TWISendTransmit();
     fe6:	18 83       	st	Y, r17
=======
     db6:	81 ec       	ldi	r24, 0xC1	; 193
     db8:	f7 01       	movw	r30, r14
     dba:	80 83       	st	Z, r24
	TWISendTransmit();
     dbc:	18 83       	st	Y, r17
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x10);
	
	TWIWrite(0xC1);
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     fe8:	ec de       	rcall	.-552    	; 0xdc2 <TWIwaitUntilReady>
     fea:	df 91       	pop	r29
}
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	08 95       	ret

00000ff8 <readFromSlave>:
     ff8:	0f 93       	push	r16


void readFromSlave(uint8_t address){
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	c8 2f       	mov	r28, r24
	
	TWISendStart();
    1000:	0c eb       	ldi	r16, 0xBC	; 188
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	85 ea       	ldi	r24, 0xA5	; 165
    1006:	f8 01       	movw	r30, r16
    1008:	80 83       	st	Z, r24
	TWIwaitUntilReady();
    100a:	db de       	rcall	.-586    	; 0xdc2 <TWIwaitUntilReady>
	checkCode(0x08);
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	df de       	rcall	.-578    	; 0xdce <checkCode>
	
	TWIWrite( (address << 1) + 1 );
    1010:	cc 0f       	add	r28, r28
    1012:	cf 5f       	subi	r28, 0xFF	; 255
=======
     dbe:	ed de       	rcall	.-550    	; 0xb9a <TWIwaitUntilReady>
     dc0:	df 91       	pop	r29
}
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	08 95       	ret

00000dce <readFromSlave>:
     dce:	0f 93       	push	r16


void readFromSlave(uint8_t address){
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	c8 2f       	mov	r28, r24
	
	TWISendStart();
     dd6:	0c eb       	ldi	r16, 0xBC	; 188
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	85 ea       	ldi	r24, 0xA5	; 165
     ddc:	f8 01       	movw	r30, r16
     dde:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     de0:	dc de       	rcall	.-584    	; 0xb9a <TWIwaitUntilReady>
	checkCode(0x08);
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	e0 de       	rcall	.-576    	; 0xba6 <checkCode>
	
	TWIWrite( (address << 1) + 1 );
     de6:	cc 0f       	add	r28, r28
     de8:	cf 5f       	subi	r28, 0xFF	; 255
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
    1014:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
    1018:	85 e8       	ldi	r24, 0x85	; 133
    101a:	f8 01       	movw	r30, r16
=======
     dea:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     dee:	85 e8       	ldi	r24, 0x85	; 133
     df0:	f8 01       	movw	r30, r16
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite( (address << 1) + 1 );
	TWIwaitUntilReady();
<<<<<<< Updated upstream
    101c:	80 83       	st	Z, r24
    101e:	d1 de       	rcall	.-606    	; 0xdc2 <TWIwaitUntilReady>
	
}
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <__vector_15>:
=======
     df2:	80 83       	st	Z, r24
     df4:	d2 de       	rcall	.-604    	; 0xb9a <TWIwaitUntilReady>
	
}
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <__vector_15>:
>>>>>>> Stashed changes
		break;
	}
}


ISR(TIMER2_OVF_vect){
<<<<<<< Updated upstream
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	0b b6       	in	r0, 0x3b	; 59
    1034:	0f 92       	push	r0
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 4){
    104e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <counter.2077>
    1052:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <counter.2077+0x1>
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	91 05       	cpc	r25, r1
    105a:	11 f4       	brne	.+4      	; 0x1060 <__vector_15+0x38>
		rp6DataConstructor();
    105c:	26 df       	rcall	.-436    	; 0xeaa <rp6DataConstructor>
    105e:	0d c0       	rjmp	.+26     	; 0x107a <__vector_15+0x52>
	}else if(counter == 8){
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	91 05       	cpc	r25, r1
		readFromCompass();
    1064:	11 f4       	brne	.+4      	; 0x106a <__vector_15+0x42>
    1066:	91 df       	rcall	.-222    	; 0xf8a <readFromCompass>
    1068:	08 c0       	rjmp	.+16     	; 0x107a <__vector_15+0x52>
	}else if(counter >= 12){
    106a:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromSlave(RP6_ADDRESS);
    106c:	34 f0       	brlt	.+12     	; 0x107a <__vector_15+0x52>
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	c3 df       	rcall	.-122    	; 0xff8 <readFromSlave>
		counter = 0;
    1072:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <counter.2077+0x1>
    1076:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <counter.2077>
	}
	
	counter++;
    107a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <counter.2077>
    107e:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <counter.2077+0x1>
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <counter.2077+0x1>
    1088:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <counter.2077>
}
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0b be       	out	0x3b, r0	; 59
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <turnSignal>:
=======
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	0b b6       	in	r0, 0x3b	; 59
     e0a:	0f 92       	push	r0
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 3){
     e24:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <counter.2076>
     e28:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <counter.2076+0x1>
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	91 05       	cpc	r25, r1
     e30:	11 f4       	brne	.+4      	; 0xe36 <__vector_15+0x38>
		rp6DataConstructor();
     e32:	27 df       	rcall	.-434    	; 0xc82 <rp6DataConstructor>
     e34:	12 c0       	rjmp	.+36     	; 0xe5a <__vector_15+0x5c>
	}else if(counter == 6){
     e36:	86 30       	cpi	r24, 0x06	; 6
     e38:	91 05       	cpc	r25, r1
		readFromCompass();
     e3a:	11 f4       	brne	.+4      	; 0xe40 <__vector_15+0x42>
     e3c:	91 df       	rcall	.-222    	; 0xd60 <readFromCompass>
     e3e:	0d c0       	rjmp	.+26     	; 0xe5a <__vector_15+0x5c>
	}else if(counter == 9){
     e40:	89 30       	cpi	r24, 0x09	; 9
     e42:	91 05       	cpc	r25, r1
		readFromSlave(RP6_ADDRESS);
     e44:	19 f4       	brne	.+6      	; 0xe4c <__vector_15+0x4e>
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	c2 df       	rcall	.-124    	; 0xdce <readFromSlave>
	}else if(counter >= 12){
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <__vector_15+0x5c>
     e4c:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromCompass();
     e4e:	2c f0       	brlt	.+10     	; 0xe5a <__vector_15+0x5c>
     e50:	87 df       	rcall	.-242    	; 0xd60 <readFromCompass>
		counter = 0;
     e52:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <counter.2076+0x1>
     e56:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <counter.2076>
	}
	
	counter++;
     e5a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <counter.2076>
     e5e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <counter.2076+0x1>
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <counter.2076+0x1>
     e68:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <counter.2076>
}
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	0f 90       	pop	r0
     e86:	0b be       	out	0x3b, r0	; 59
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <turnSignal>:
>>>>>>> Stashed changes
	TWIwaitUntilReady();
	
}


void turnSignal(){
<<<<<<< Updated upstream
    10b2:	4f 92       	push	r4
    10b4:	5f 92       	push	r5
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
=======
     e92:	4f 92       	push	r4
     e94:	5f 92       	push	r5
     e96:	6f 92       	push	r6
     e98:	7f 92       	push	r7
     e9a:	8f 92       	push	r8
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
>>>>>>> Stashed changes
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
<<<<<<< Updated upstream
    10ce:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
    10d0:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
    10d2:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
    10d6:	8f 3f       	cpi	r24, 0xFF	; 255
    10d8:	b1 f5       	brne	.+108    	; 0x1146 <turnSignal+0x94>
		if(turnSignalStart < micros()){
    10da:	40 90 80 03 	lds	r4, 0x0380	; 0x800380 <__data_end>
    10de:	50 90 81 03 	lds	r5, 0x0381	; 0x800381 <__data_end+0x1>
    10e2:	60 90 82 03 	lds	r6, 0x0382	; 0x800382 <__data_end+0x2>
    10e6:	70 90 83 03 	lds	r7, 0x0383	; 0x800383 <__data_end+0x3>
    10ea:	e3 da       	rcall	.-2618   	; 0x6b2 <micros>
    10ec:	f2 2f       	mov	r31, r18
    10ee:	e3 2f       	mov	r30, r19
    10f0:	c4 2e       	mov	r12, r20
    10f2:	d5 2e       	mov	r13, r21
    10f4:	e6 2e       	mov	r14, r22
    10f6:	f7 2e       	mov	r15, r23
    10f8:	08 2f       	mov	r16, r24
    10fa:	19 2f       	mov	r17, r25
    10fc:	24 2d       	mov	r18, r4
    10fe:	35 2d       	mov	r19, r5
    1100:	46 2d       	mov	r20, r6
    1102:	57 2d       	mov	r21, r7
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	af 2e       	mov	r10, r31
    110e:	be 2e       	mov	r11, r30
    1110:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__cmpdi2>
    1114:	c0 f4       	brcc	.+48     	; 0x1146 <turnSignal+0x94>
			PORTC ^= (1 << PINC1);	
    1116:	98 b1       	in	r25, 0x08	; 8
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
    111c:	88 b9       	out	0x08, r24	; 8
    111e:	c9 da       	rcall	.-2670   	; 0x6b2 <micros>
    1120:	82 2e       	mov	r8, r18
    1122:	93 2e       	mov	r9, r19
    1124:	a4 2e       	mov	r10, r20
    1126:	b5 2e       	mov	r11, r21
    1128:	80 e2       	ldi	r24, 0x20	; 32
    112a:	88 0e       	add	r8, r24
    112c:	81 ea       	ldi	r24, 0xA1	; 161
    112e:	98 1e       	adc	r9, r24
    1130:	87 e0       	ldi	r24, 0x07	; 7
    1132:	a8 1e       	adc	r10, r24
    1134:	b1 1c       	adc	r11, r1
    1136:	80 92 80 03 	sts	0x0380, r8	; 0x800380 <__data_end>
    113a:	90 92 81 03 	sts	0x0381, r9	; 0x800381 <__data_end+0x1>
    113e:	a0 92 82 03 	sts	0x0382, r10	; 0x800382 <__data_end+0x2>
    1142:	b0 92 83 03 	sts	0x0383, r11	; 0x800383 <__data_end+0x3>
		}
	}
	if(rp6Data.turnDirection == 1){
    1146:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	a9 f5       	brne	.+106    	; 0x11b8 <turnSignal+0x106>
		if(turnSignalStart < micros()){
    114e:	40 90 80 03 	lds	r4, 0x0380	; 0x800380 <__data_end>
    1152:	50 90 81 03 	lds	r5, 0x0381	; 0x800381 <__data_end+0x1>
    1156:	60 90 82 03 	lds	r6, 0x0382	; 0x800382 <__data_end+0x2>
    115a:	70 90 83 03 	lds	r7, 0x0383	; 0x800383 <__data_end+0x3>
    115e:	a9 da       	rcall	.-2734   	; 0x6b2 <micros>
    1160:	f2 2f       	mov	r31, r18
    1162:	e3 2f       	mov	r30, r19
    1164:	c4 2e       	mov	r12, r20
    1166:	d5 2e       	mov	r13, r21
    1168:	e6 2e       	mov	r14, r22
    116a:	f7 2e       	mov	r15, r23
    116c:	08 2f       	mov	r16, r24
    116e:	19 2f       	mov	r17, r25
    1170:	24 2d       	mov	r18, r4
    1172:	35 2d       	mov	r19, r5
    1174:	46 2d       	mov	r20, r6
    1176:	57 2d       	mov	r21, r7
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	af 2e       	mov	r10, r31
    1182:	be 2e       	mov	r11, r30
    1184:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__cmpdi2>
    1188:	b8 f4       	brcc	.+46     	; 0x11b8 <turnSignal+0x106>
			PORTD ^= (1 << PIND7);
    118a:	8b b1       	in	r24, 0x0b	; 11
    118c:	80 58       	subi	r24, 0x80	; 128
			turnSignalStart = micros() + turnSignalDelay;
    118e:	8b b9       	out	0x0b, r24	; 11
    1190:	90 da       	rcall	.-2784   	; 0x6b2 <micros>
    1192:	82 2e       	mov	r8, r18
    1194:	93 2e       	mov	r9, r19
    1196:	a4 2e       	mov	r10, r20
    1198:	b5 2e       	mov	r11, r21
    119a:	80 e2       	ldi	r24, 0x20	; 32
    119c:	88 0e       	add	r8, r24
    119e:	81 ea       	ldi	r24, 0xA1	; 161
    11a0:	98 1e       	adc	r9, r24
    11a2:	87 e0       	ldi	r24, 0x07	; 7
    11a4:	a8 1e       	adc	r10, r24
    11a6:	b1 1c       	adc	r11, r1
    11a8:	80 92 80 03 	sts	0x0380, r8	; 0x800380 <__data_end>
    11ac:	90 92 81 03 	sts	0x0381, r9	; 0x800381 <__data_end+0x1>
    11b0:	a0 92 82 03 	sts	0x0382, r10	; 0x800382 <__data_end+0x2>
    11b4:	b0 92 83 03 	sts	0x0383, r11	; 0x800383 <__data_end+0x3>
		}
	}
}
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	bf 90       	pop	r11
    11c6:	af 90       	pop	r10
    11c8:	9f 90       	pop	r9
    11ca:	8f 90       	pop	r8
    11cc:	7f 90       	pop	r7
    11ce:	6f 90       	pop	r6
    11d0:	5f 90       	pop	r5
    11d2:	4f 90       	pop	r4
    11d4:	08 95       	ret

000011d6 <main>:
uint64_t parcourCommandTimer = 0;
void hardcoreParcour();

//Other functions ---------------------------------
void init_interrupt(){
	sei();									//Enable global interrupts
    11d6:	78 94       	sei
=======
     eae:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     eb0:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     eb2:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <rp6Data+0x3>
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	b9 f5       	brne	.+110    	; 0xf28 <turnSignal+0x96>
		if(turnSignalStart < micros()){
     eba:	40 90 22 03 	lds	r4, 0x0322	; 0x800322 <__data_end>
     ebe:	50 90 23 03 	lds	r5, 0x0323	; 0x800323 <__data_end+0x1>
     ec2:	60 90 24 03 	lds	r6, 0x0324	; 0x800324 <__data_end+0x2>
     ec6:	70 90 25 03 	lds	r7, 0x0325	; 0x800325 <__data_end+0x3>
     eca:	22 dc       	rcall	.-1980   	; 0x710 <micros>
     ecc:	f2 2f       	mov	r31, r18
     ece:	e3 2f       	mov	r30, r19
     ed0:	c4 2e       	mov	r12, r20
     ed2:	d5 2e       	mov	r13, r21
     ed4:	e6 2e       	mov	r14, r22
     ed6:	f7 2e       	mov	r15, r23
     ed8:	08 2f       	mov	r16, r24
     eda:	19 2f       	mov	r17, r25
     edc:	24 2d       	mov	r18, r4
     ede:	35 2d       	mov	r19, r5
     ee0:	46 2d       	mov	r20, r6
     ee2:	57 2d       	mov	r21, r7
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	af 2e       	mov	r10, r31
     eee:	be 2e       	mov	r11, r30
     ef0:	d9 d6       	rcall	.+3506   	; 0x1ca4 <__cmpdi2>
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <turnSignal+0x64>
     ef4:	52 c0       	rjmp	.+164    	; 0xf9a <turnSignal+0x108>
			PORTC ^= (1 << PINC1);	
     ef6:	98 b1       	in	r25, 0x08	; 8
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
     efc:	88 b9       	out	0x08, r24	; 8
     efe:	08 dc       	rcall	.-2032   	; 0x710 <micros>
     f00:	82 2e       	mov	r8, r18
     f02:	93 2e       	mov	r9, r19
     f04:	a4 2e       	mov	r10, r20
     f06:	b5 2e       	mov	r11, r21
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	88 0e       	add	r8, r24
     f0c:	81 ea       	ldi	r24, 0xA1	; 161
     f0e:	98 1e       	adc	r9, r24
     f10:	87 e0       	ldi	r24, 0x07	; 7
     f12:	a8 1e       	adc	r10, r24
     f14:	b1 1c       	adc	r11, r1
     f16:	80 92 22 03 	sts	0x0322, r8	; 0x800322 <__data_end>
     f1a:	90 92 23 03 	sts	0x0323, r9	; 0x800323 <__data_end+0x1>
     f1e:	a0 92 24 03 	sts	0x0324, r10	; 0x800324 <__data_end+0x2>
     f22:	b0 92 25 03 	sts	0x0325, r11	; 0x800325 <__data_end+0x3>
     f26:	39 c0       	rjmp	.+114    	; 0xf9a <turnSignal+0x108>
		}
	}else if(rp6Data.turnDirection == 1){
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	a9 f5       	brne	.+106    	; 0xf96 <turnSignal+0x104>
		if(turnSignalStart < micros()){
     f2c:	40 90 22 03 	lds	r4, 0x0322	; 0x800322 <__data_end>
     f30:	50 90 23 03 	lds	r5, 0x0323	; 0x800323 <__data_end+0x1>
     f34:	60 90 24 03 	lds	r6, 0x0324	; 0x800324 <__data_end+0x2>
     f38:	70 90 25 03 	lds	r7, 0x0325	; 0x800325 <__data_end+0x3>
     f3c:	e9 db       	rcall	.-2094   	; 0x710 <micros>
     f3e:	f2 2f       	mov	r31, r18
     f40:	e3 2f       	mov	r30, r19
     f42:	c4 2e       	mov	r12, r20
     f44:	d5 2e       	mov	r13, r21
     f46:	e6 2e       	mov	r14, r22
     f48:	f7 2e       	mov	r15, r23
     f4a:	08 2f       	mov	r16, r24
     f4c:	19 2f       	mov	r17, r25
     f4e:	24 2d       	mov	r18, r4
     f50:	35 2d       	mov	r19, r5
     f52:	46 2d       	mov	r20, r6
     f54:	57 2d       	mov	r21, r7
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	af 2e       	mov	r10, r31
     f60:	be 2e       	mov	r11, r30
     f62:	a0 d6       	rcall	.+3392   	; 0x1ca4 <__cmpdi2>
     f64:	d0 f4       	brcc	.+52     	; 0xf9a <turnSignal+0x108>
			PORTD ^= (1 << PIND7);
     f66:	8b b1       	in	r24, 0x0b	; 11
     f68:	80 58       	subi	r24, 0x80	; 128
     f6a:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     f6c:	d1 db       	rcall	.-2142   	; 0x710 <micros>
     f6e:	82 2e       	mov	r8, r18
     f70:	93 2e       	mov	r9, r19
     f72:	a4 2e       	mov	r10, r20
     f74:	b5 2e       	mov	r11, r21
     f76:	80 e2       	ldi	r24, 0x20	; 32
     f78:	88 0e       	add	r8, r24
     f7a:	81 ea       	ldi	r24, 0xA1	; 161
     f7c:	98 1e       	adc	r9, r24
     f7e:	87 e0       	ldi	r24, 0x07	; 7
     f80:	a8 1e       	adc	r10, r24
     f82:	b1 1c       	adc	r11, r1
     f84:	80 92 22 03 	sts	0x0322, r8	; 0x800322 <__data_end>
     f88:	90 92 23 03 	sts	0x0323, r9	; 0x800323 <__data_end+0x1>
     f8c:	a0 92 24 03 	sts	0x0324, r10	; 0x800324 <__data_end+0x2>
     f90:	b0 92 25 03 	sts	0x0325, r11	; 0x800325 <__data_end+0x3>
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <turnSignal+0x108>
     f96:	41 98       	cbi	0x08, 1	; 8
		}
	}else{
		PORTC &= ~(1<<PINC1);
     f98:	5f 98       	cbi	0x0b, 7	; 11
		PORTD &= ~(1<<PIND7);
     f9a:	1f 91       	pop	r17
	}
}
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	7f 90       	pop	r7
     fb0:	6f 90       	pop	r6
     fb2:	5f 90       	pop	r5
     fb4:	4f 90       	pop	r4
     fb6:	08 95       	ret

00000fb8 <main>:
     fb8:	78 94       	sei
>>>>>>> Stashed changes


int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
<<<<<<< Updated upstream
    11d8:	0e da       	rcall	.-3044   	; 0x5f6 <init_micros>
	init_USART();
    11da:	01 d8       	rcall	.-4094   	; 0x1de <init_USART>
	init_TWI();
    11dc:	92 dc       	rcall	.-1756   	; 0xb02 <init_TWI>
	init_TWI_Timer2();
    11de:	9a dc       	rcall	.-1740   	; 0xb14 <init_TWI_Timer2>
	initBackBeep();
    11e0:	70 d2       	rcall	.+1248   	; 0x16c2 <initBackBeep>
	init_rp6Data();
    11e2:	b2 dc       	rcall	.-1692   	; 0xb48 <init_rp6Data>
    11e4:	a4 dc       	rcall	.-1720   	; 0xb2e <init_arduinoData>
	init_arduinoData();
    11e6:	7e d2       	rcall	.+1276   	; 0x16e4 <initTimer>
    11e8:	0e 94 ef 00 	call	0x1de	; 0x1de <init_USART>
	initTimer();
    11ec:	0f 2e       	mov	r0, r31
	init_USART();
    11ee:	f8 ef       	ldi	r31, 0xF8	; 248
=======
     fba:	4c db       	rcall	.-2408   	; 0x654 <init_micros>
	init_USART();
     fbc:	0f d9       	rcall	.-3554   	; 0x1dc <init_USART>
	init_TWI();
     fbe:	0a dc       	rcall	.-2028   	; 0x7d4 <init_TWI>
	init_TWI_Timer2();
     fc0:	12 dc       	rcall	.-2012   	; 0x7e6 <init_TWI_Timer2>
	init_PWM_Timer4();
     fc2:	1e dc       	rcall	.-1988   	; 0x800 <init_PWM_Timer4>
	init_rp6Data();
     fc4:	41 dc       	rcall	.-1918   	; 0x848 <init_rp6Data>
     fc6:	33 dc       	rcall	.-1946   	; 0x82e <init_arduinoData>
	init_arduinoData();
     fc8:	a7 d1       	rcall	.+846    	; 0x1318 <initTimer>
     fca:	08 d9       	rcall	.-3568   	; 0x1dc <init_USART>
	initTimer();
     fcc:	0f 2e       	mov	r0, r31
	init_USART();
     fce:	f9 e8       	ldi	r31, 0x89	; 137
     fd0:	2f 2e       	mov	r2, r31
>>>>>>> Stashed changes
		if (ultrasonicSensorTimer < micros()) {
			writeString("\f\r");
			writeString("Distance to object: ");
			writeInt(ultrasonicSensor());
			writeString("mm\n\rCompass Angle: ");
			writeInt(rp6Data.compassAngle);
<<<<<<< Updated upstream
    11f0:	2f 2e       	mov	r2, r31
    11f2:	f3 e0       	ldi	r31, 0x03	; 3
    11f4:	3f 2e       	mov	r3, r31
    11f6:	f0 2d       	mov	r31, r0
    11f8:	5c df       	rcall	.-328    	; 0x10b2 <turnSignal>
	initTimer();
=======
     fd2:	f3 e0       	ldi	r31, 0x03	; 3
     fd4:	3f 2e       	mov	r3, r31
     fd6:	f0 2d       	mov	r31, r0
     fd8:	5c df       	rcall	.-328    	; 0xe92 <turnSignal>
     fda:	40 90 4b 03 	lds	r4, 0x034B	; 0x80034b <ultrasonicSensorTimer>
>>>>>>> Stashed changes
	init_USART();
	//-----------------------
	
	while (1){
		turnSignal();
<<<<<<< Updated upstream
    11fa:	bd da       	rcall	.-2694   	; 0x776 <hardcoreParcour>
    11fc:	40 90 ba 03 	lds	r4, 0x03BA	; 0x8003ba <ultrasonicSensorTimer>
		
		hardcoreParcour();
		
		if (ultrasonicSensorTimer < micros()) {
    1200:	50 90 bb 03 	lds	r5, 0x03BB	; 0x8003bb <ultrasonicSensorTimer+0x1>
    1204:	60 90 bc 03 	lds	r6, 0x03BC	; 0x8003bc <ultrasonicSensorTimer+0x2>
    1208:	70 90 bd 03 	lds	r7, 0x03BD	; 0x8003bd <ultrasonicSensorTimer+0x3>
    120c:	52 da       	rcall	.-2908   	; 0x6b2 <micros>
    120e:	f2 2f       	mov	r31, r18
    1210:	e3 2f       	mov	r30, r19
    1212:	c4 2e       	mov	r12, r20
    1214:	d5 2e       	mov	r13, r21
    1216:	e6 2e       	mov	r14, r22
    1218:	f7 2e       	mov	r15, r23
    121a:	08 2f       	mov	r16, r24
    121c:	19 2f       	mov	r17, r25
    121e:	24 2d       	mov	r18, r4
    1220:	35 2d       	mov	r19, r5
    1222:	46 2d       	mov	r20, r6
    1224:	57 2d       	mov	r21, r7
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	af 2e       	mov	r10, r31
    1230:	be 2e       	mov	r11, r30
    1232:	e1 d7       	rcall	.+4034   	; 0x21f6 <__cmpdi2>
    1234:	08 f0       	brcs	.+2      	; 0x1238 <main+0x62>
    1236:	fe c0       	rjmp	.+508    	; 0x1434 <main+0x25e>
			writeString("\f\r");
    1238:	8f e3       	ldi	r24, 0x3F	; 63
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	12 d2       	rcall	.+1060   	; 0x1662 <writeString>
			writeString("Distance to object: ");
    123e:	82 e4       	ldi	r24, 0x42	; 66
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0f d2       	rcall	.+1054   	; 0x1662 <writeString>
			writeInt(ultrasonicSensor());
    1244:	59 d2       	rcall	.+1202   	; 0x16f8 <ultrasonicSensor>
    1246:	22 d2       	rcall	.+1092   	; 0x168c <writeInt>
    1248:	87 e5       	ldi	r24, 0x57	; 87
			writeString("mm\n\rCompass Angle: ");
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	0a d2       	rcall	.+1044   	; 0x1662 <writeString>
    124e:	f1 01       	movw	r30, r2
			writeInt(rp6Data.compassAngle);
    1250:	87 85       	ldd	r24, Z+15	; 0x0f
    1252:	90 89       	ldd	r25, Z+16	; 0x10
    1254:	1b d2       	rcall	.+1078   	; 0x168c <writeInt>
    1256:	8b e6       	ldi	r24, 0x6B	; 107
			writeString(" degrees");
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	03 d2       	rcall	.+1030   	; 0x1662 <writeString>
    125c:	84 e7       	ldi	r24, 0x74	; 116
			writeString("\n\n\rSet speed: ");
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	00 d2       	rcall	.+1024   	; 0x1662 <writeString>
    1262:	f1 01       	movw	r30, r2
    1264:	80 81       	ld	r24, Z
			writeInt(rp6Data.driveSpeed);
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	11 d2       	rcall	.+1058   	; 0x168c <writeInt>
    126a:	83 e8       	ldi	r24, 0x83	; 131
    126c:	92 e0       	ldi	r25, 0x02	; 2
			writeString("%\n\n\rDirection: ");
    126e:	f9 d1       	rcall	.+1010   	; 0x1662 <writeString>
    1270:	f1 01       	movw	r30, r2
    1272:	82 81       	ldd	r24, Z+2	; 0x02
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	21 f4       	brne	.+8      	; 0x1280 <main+0xaa>
    1278:	83 e9       	ldi	r24, 0x93	; 147
    127a:	92 e0       	ldi	r25, 0x02	; 2
    127c:	f2 d1       	rcall	.+996    	; 0x1662 <writeString>
    127e:	0b c0       	rjmp	.+22     	; 0x1296 <main+0xc0>
    1280:	81 11       	cpse	r24, r1
    1282:	04 c0       	rjmp	.+8      	; 0x128c <main+0xb6>
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
    1284:	8d e9       	ldi	r24, 0x9D	; 157
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	ec d1       	rcall	.+984    	; 0x1662 <writeString>
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <main+0xc0>
    128c:	8f 3f       	cpi	r24, 0xFF	; 255
    128e:	19 f4       	brne	.+6      	; 0x1296 <main+0xc0>
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
    1290:	8a ea       	ldi	r24, 0xAA	; 170
    1292:	92 e0       	ldi	r25, 0x02	; 2
    1294:	e6 d1       	rcall	.+972    	; 0x1662 <writeString>
    1296:	f1 01       	movw	r30, r2
			if(rp6Data.turnDirection == -1) writeString("turning left");
    1298:	83 81       	ldd	r24, Z+3	; 0x03
    129a:	8f 3f       	cpi	r24, 0xFF	; 255
    129c:	21 f4       	brne	.+8      	; 0x12a6 <main+0xd0>
    129e:	86 eb       	ldi	r24, 0xB6	; 182
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	df d1       	rcall	.+958    	; 0x1662 <writeString>
    12a4:	0b c0       	rjmp	.+22     	; 0x12bc <main+0xe6>
			else if(rp6Data.turnDirection == 0) writeString("going straight");
    12a6:	81 11       	cpse	r24, r1
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <main+0xdc>
    12aa:	83 ec       	ldi	r24, 0xC3	; 195
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	d9 d1       	rcall	.+946    	; 0x1662 <writeString>
			else if(rp6Data.turnDirection == 1) writeString("turning right");
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <main+0xe6>
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	19 f4       	brne	.+6      	; 0x12bc <main+0xe6>
    12b6:	82 ed       	ldi	r24, 0xD2	; 210
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	d3 d1       	rcall	.+934    	; 0x1662 <writeString>
			writeString("\n\rAcceleration rate: ");
    12bc:	80 ee       	ldi	r24, 0xE0	; 224
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	d0 d1       	rcall	.+928    	; 0x1662 <writeString>
			writeInt(rp6Data.accelerationRate);
    12c2:	f1 01       	movw	r30, r2
    12c4:	84 81       	ldd	r24, Z+4	; 0x04
    12c6:	95 81       	ldd	r25, Z+5	; 0x05
    12c8:	e1 d1       	rcall	.+962    	; 0x168c <writeInt>
			writeString("\n\rTurn rate: ");
    12ca:	86 ef       	ldi	r24, 0xF6	; 246
    12cc:	92 e0       	ldi	r25, 0x02	; 2
    12ce:	c9 d1       	rcall	.+914    	; 0x1662 <writeString>
			writeInt(rp6Data.turnRate);
    12d0:	f1 01       	movw	r30, r2
    12d2:	86 81       	ldd	r24, Z+6	; 0x06
    12d4:	97 81       	ldd	r25, Z+7	; 0x07
    12d6:	da d1       	rcall	.+948    	; 0x168c <writeInt>
			writeString("\n\rActual Speed: ");
    12d8:	84 e0       	ldi	r24, 0x04	; 4
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	c2 d1       	rcall	.+900    	; 0x1662 <writeString>
    12de:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <arduinoData+0x2>
			writeInt((arduinoData.actualDriveSpeed * 100) / 25600);
    12e2:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <arduinoData+0x3>
    12e6:	f4 e6       	ldi	r31, 0x64	; 100
    12e8:	f2 9f       	mul	r31, r18
    12ea:	c0 01       	movw	r24, r0
    12ec:	f3 9f       	mul	r31, r19
    12ee:	90 0d       	add	r25, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	74 e6       	ldi	r23, 0x64	; 100
    12f6:	84 d6       	rcall	.+3336   	; 0x2000 <__udivmodhi4>
    12f8:	cb 01       	movw	r24, r22
    12fa:	c8 d1       	rcall	.+912    	; 0x168c <writeInt>
    12fc:	85 e1       	ldi	r24, 0x15	; 21
    12fe:	93 e0       	ldi	r25, 0x03	; 3
			writeString("%");
    1300:	b0 d1       	rcall	.+864    	; 0x1662 <writeString>
    1302:	87 e1       	ldi	r24, 0x17	; 23
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	ad d1       	rcall	.+858    	; 0x1662 <writeString>
			
			writeString("\n\n\rCommand: ");
    1308:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
    130c:	a2 d1       	rcall	.+836    	; 0x1652 <writeChar>
    130e:	84 e2       	ldi	r24, 0x24	; 36
			writeChar(USARTcommand);
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	a7 d1       	rcall	.+846    	; 0x1662 <writeString>
    1314:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
			writeString("\n\rValue: ");			
    1318:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    131c:	99 23       	and	r25, r25
			if(USARTinputPos >= 0){
    131e:	84 f0       	brlt	.+32     	; 0x1340 <main+0x16a>
    1320:	0f e0       	ldi	r16, 0x0F	; 15
    1322:	14 e0       	ldi	r17, 0x04	; 4
    1324:	c0 e0       	ldi	r28, 0x00	; 0
    1326:	d0 e0       	ldi	r29, 0x00	; 0
    1328:	f8 01       	movw	r30, r16
    132a:	81 91       	ld	r24, Z+
    132c:	8f 01       	movw	r16, r30
				for(int i = 0; i <= USARTinputPos; i++){
					writeChar(USARTinput[i]);
    132e:	91 d1       	rcall	.+802    	; 0x1652 <writeChar>
    1330:	21 96       	adiw	r28, 0x01	; 1
    1332:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
    1336:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
=======
     fde:	50 90 4c 03 	lds	r5, 0x034C	; 0x80034c <ultrasonicSensorTimer+0x1>
// 			hardcoreParcour();
// 			
// 			parcourRunTimer = micros() + parcourRunTimerSpeed;
// 		}
		
		if (ultrasonicSensorTimer < micros()) {
     fe2:	60 90 4d 03 	lds	r6, 0x034D	; 0x80034d <ultrasonicSensorTimer+0x2>
     fe6:	70 90 4e 03 	lds	r7, 0x034E	; 0x80034e <ultrasonicSensorTimer+0x3>
     fea:	92 db       	rcall	.-2268   	; 0x710 <micros>
     fec:	f2 2f       	mov	r31, r18
     fee:	e3 2f       	mov	r30, r19
     ff0:	c4 2e       	mov	r12, r20
     ff2:	d5 2e       	mov	r13, r21
     ff4:	e6 2e       	mov	r14, r22
     ff6:	f7 2e       	mov	r15, r23
     ff8:	08 2f       	mov	r16, r24
     ffa:	19 2f       	mov	r17, r25
     ffc:	24 2d       	mov	r18, r4
     ffe:	35 2d       	mov	r19, r5
    1000:	46 2d       	mov	r20, r6
    1002:	57 2d       	mov	r21, r7
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	af 2e       	mov	r10, r31
    100e:	be 2e       	mov	r11, r30
    1010:	49 d6       	rcall	.+3218   	; 0x1ca4 <__cmpdi2>
    1012:	08 f0       	brcs	.+2      	; 0x1016 <main+0x5e>
    1014:	88 c0       	rjmp	.+272    	; 0x1126 <main+0x16e>
			writeString("\f\r");
    1016:	85 e4       	ldi	r24, 0x45	; 69
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	4e d1       	rcall	.+668    	; 0x12b8 <writeString>
			writeString("Distance to object: ");
    101c:	88 e4       	ldi	r24, 0x48	; 72
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	4b d1       	rcall	.+662    	; 0x12b8 <writeString>
			writeInt(ultrasonicSensor());
    1022:	84 d1       	rcall	.+776    	; 0x132c <ultrasonicSensor>
    1024:	5e d1       	rcall	.+700    	; 0x12e2 <writeInt>
    1026:	8d e5       	ldi	r24, 0x5D	; 93
			writeString("mm\n\rCompass Angle: ");
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	46 d1       	rcall	.+652    	; 0x12b8 <writeString>
    102c:	f1 01       	movw	r30, r2
			writeInt(rp6Data.compassAngle);
    102e:	87 85       	ldd	r24, Z+15	; 0x0f
    1030:	90 89       	ldd	r25, Z+16	; 0x10
    1032:	57 d1       	rcall	.+686    	; 0x12e2 <writeInt>
    1034:	81 e7       	ldi	r24, 0x71	; 113
    1036:	92 e0       	ldi	r25, 0x02	; 2
			writeString(" degrees");
    1038:	3f d1       	rcall	.+638    	; 0x12b8 <writeString>
    103a:	8a e7       	ldi	r24, 0x7A	; 122
    103c:	92 e0       	ldi	r25, 0x02	; 2
			writeString("\n\n\rSet speed: ");
    103e:	3c d1       	rcall	.+632    	; 0x12b8 <writeString>
    1040:	f1 01       	movw	r30, r2
    1042:	80 81       	ld	r24, Z
			writeInt(rp6Data.driveSpeed);
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	4d d1       	rcall	.+666    	; 0x12e2 <writeInt>
    1048:	89 e8       	ldi	r24, 0x89	; 137
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	35 d1       	rcall	.+618    	; 0x12b8 <writeString>
			writeString("%\n\n\rDirection: ");
    104e:	f1 01       	movw	r30, r2
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	81 30       	cpi	r24, 0x01	; 1
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
    1054:	21 f4       	brne	.+8      	; 0x105e <main+0xa6>
    1056:	89 e9       	ldi	r24, 0x99	; 153
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	2e d1       	rcall	.+604    	; 0x12b8 <writeString>
    105c:	0b c0       	rjmp	.+22     	; 0x1074 <main+0xbc>
    105e:	81 11       	cpse	r24, r1
    1060:	04 c0       	rjmp	.+8      	; 0x106a <main+0xb2>
    1062:	83 ea       	ldi	r24, 0xA3	; 163
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	28 d1       	rcall	.+592    	; 0x12b8 <writeString>
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <main+0xbc>
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	19 f4       	brne	.+6      	; 0x1074 <main+0xbc>
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
    106e:	80 eb       	ldi	r24, 0xB0	; 176
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	22 d1       	rcall	.+580    	; 0x12b8 <writeString>
    1074:	f1 01       	movw	r30, r2
    1076:	83 81       	ldd	r24, Z+3	; 0x03
			if(rp6Data.turnDirection == -1) writeString("turning left");
    1078:	8f 3f       	cpi	r24, 0xFF	; 255
    107a:	21 f4       	brne	.+8      	; 0x1084 <main+0xcc>
    107c:	8c eb       	ldi	r24, 0xBC	; 188
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	1b d1       	rcall	.+566    	; 0x12b8 <writeString>
    1082:	0b c0       	rjmp	.+22     	; 0x109a <main+0xe2>
    1084:	81 11       	cpse	r24, r1
			else if(rp6Data.turnDirection == 0) writeString("going straight");
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <main+0xd8>
    1088:	89 ec       	ldi	r24, 0xC9	; 201
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	15 d1       	rcall	.+554    	; 0x12b8 <writeString>
    108e:	05 c0       	rjmp	.+10     	; 0x109a <main+0xe2>
			else if(rp6Data.turnDirection == 1) writeString("turning right");
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	19 f4       	brne	.+6      	; 0x109a <main+0xe2>
    1094:	88 ed       	ldi	r24, 0xD8	; 216
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	0f d1       	rcall	.+542    	; 0x12b8 <writeString>
			writeString("\n\rAcceleration rate: ");
    109a:	86 ee       	ldi	r24, 0xE6	; 230
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	0c d1       	rcall	.+536    	; 0x12b8 <writeString>
    10a0:	f1 01       	movw	r30, r2
			writeInt(rp6Data.accelerationRate);
    10a2:	84 81       	ldd	r24, Z+4	; 0x04
    10a4:	95 81       	ldd	r25, Z+5	; 0x05
    10a6:	1d d1       	rcall	.+570    	; 0x12e2 <writeInt>
    10a8:	8c ef       	ldi	r24, 0xFC	; 252
			writeString("\n\rTurn rate: ");
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	05 d1       	rcall	.+522    	; 0x12b8 <writeString>
    10ae:	f1 01       	movw	r30, r2
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
			writeInt(rp6Data.turnRate);
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	16 d1       	rcall	.+556    	; 0x12e2 <writeInt>
    10b6:	8a e0       	ldi	r24, 0x0A	; 10
    10b8:	93 e0       	ldi	r25, 0x03	; 3
// 			writeString("%");
			
// 			writeString("\n\n\rRunning parcour? ");
// 			writeInt(runParcour);
			
			writeString("\n\n\rCommand: ");
    10ba:	fe d0       	rcall	.+508    	; 0x12b8 <writeString>
    10bc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
    10c0:	f3 d0       	rcall	.+486    	; 0x12a8 <writeChar>
			writeChar(USARTcommand);
    10c2:	87 e1       	ldi	r24, 0x17	; 23
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	f8 d0       	rcall	.+496    	; 0x12b8 <writeString>
    10c8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
			writeString("\n\rValue: ");			
    10cc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    10d0:	99 23       	and	r25, r25
			if(USARTinputPos >= 0){
    10d2:	84 f0       	brlt	.+32     	; 0x10f4 <main+0x13c>
    10d4:	00 ea       	ldi	r16, 0xA0	; 160
    10d6:	13 e0       	ldi	r17, 0x03	; 3
    10d8:	c0 e0       	ldi	r28, 0x00	; 0
    10da:	d0 e0       	ldi	r29, 0x00	; 0
    10dc:	f8 01       	movw	r30, r16
    10de:	81 91       	ld	r24, Z+
    10e0:	8f 01       	movw	r16, r30
    10e2:	e2 d0       	rcall	.+452    	; 0x12a8 <writeChar>
    10e4:	21 96       	adiw	r28, 0x01	; 1
				for(int i = 0; i <= USARTinputPos; i++){
					writeChar(USARTinput[i]);
    10e6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
    10ea:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    10ee:	8c 17       	cp	r24, r28
>>>>>>> Stashed changes
			
			writeString("\n\n\rCommand: ");
			writeChar(USARTcommand);
			writeString("\n\rValue: ");			
			if(USARTinputPos >= 0){
				for(int i = 0; i <= USARTinputPos; i++){
<<<<<<< Updated upstream
    133a:	8c 17       	cp	r24, r28
    133c:	9d 07       	cpc	r25, r29
    133e:	a4 f7       	brge	.-24     	; 0x1328 <main+0x152>
    1340:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <runParcour>
    1344:	88 23       	and	r24, r24
					writeChar(USARTinput[i]);
				}
			}
			
			if(runParcour){
    1346:	09 f4       	brne	.+2      	; 0x134a <main+0x174>
    1348:	5c c0       	rjmp	.+184    	; 0x1402 <main+0x22c>
    134a:	8e e2       	ldi	r24, 0x2E	; 46
    134c:	93 e0       	ldi	r25, 0x03	; 3
    134e:	89 d1       	rcall	.+786    	; 0x1662 <writeString>
				writeString("\n\n\n\r---- AUTOPILOT ON ----");
    1350:	89 e4       	ldi	r24, 0x49	; 73
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	86 d1       	rcall	.+780    	; 0x1662 <writeString>
    1356:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <currentParcourLine>
				writeString("Current command: ");
    135a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <currentParcourLine+0x1>
    135e:	96 d1       	rcall	.+812    	; 0x168c <writeInt>
				writeInt(currentParcourLine);
    1360:	8b e5       	ldi	r24, 0x5B	; 91
    1362:	93 e0       	ldi	r25, 0x03	; 3
    1364:	7e d1       	rcall	.+764    	; 0x1662 <writeString>
    1366:	40 90 a2 03 	lds	r4, 0x03A2	; 0x8003a2 <parcourCommandTimer>
				writeString("\n\rTime left: ");
    136a:	50 90 a3 03 	lds	r5, 0x03A3	; 0x8003a3 <parcourCommandTimer+0x1>
    136e:	60 90 a4 03 	lds	r6, 0x03A4	; 0x8003a4 <parcourCommandTimer+0x2>
				int64_t timeLeft = (parcourCommandTimer - micros()) / 1000;
    1372:	70 90 a5 03 	lds	r7, 0x03A5	; 0x8003a5 <parcourCommandTimer+0x3>
    1376:	80 90 a6 03 	lds	r8, 0x03A6	; 0x8003a6 <parcourCommandTimer+0x4>
    137a:	90 90 a7 03 	lds	r9, 0x03A7	; 0x8003a7 <parcourCommandTimer+0x5>
    137e:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <parcourCommandTimer+0x6>
    1382:	c0 91 a9 03 	lds	r28, 0x03A9	; 0x8003a9 <parcourCommandTimer+0x7>
    1386:	95 d9       	rcall	.-3286   	; 0x6b2 <micros>
    1388:	a2 2e       	mov	r10, r18
    138a:	b3 2e       	mov	r11, r19
    138c:	c4 2e       	mov	r12, r20
    138e:	d5 2e       	mov	r13, r21
    1390:	e6 2e       	mov	r14, r22
    1392:	f7 2e       	mov	r15, r23
    1394:	08 2f       	mov	r16, r24
    1396:	19 2f       	mov	r17, r25
    1398:	24 2d       	mov	r18, r4
    139a:	35 2d       	mov	r19, r5
    139c:	46 2d       	mov	r20, r6
    139e:	57 2d       	mov	r21, r7
    13a0:	68 2d       	mov	r22, r8
    13a2:	79 2d       	mov	r23, r9
    13a4:	8d 2f       	mov	r24, r29
    13a6:	9c 2f       	mov	r25, r28
    13a8:	1d d7       	rcall	.+3642   	; 0x21e4 <__subdi3>
    13aa:	0f 2e       	mov	r0, r31
    13ac:	f8 ee       	ldi	r31, 0xE8	; 232
    13ae:	af 2e       	mov	r10, r31
    13b0:	f0 2d       	mov	r31, r0
    13b2:	0f 2e       	mov	r0, r31
    13b4:	f3 e0       	ldi	r31, 0x03	; 3
    13b6:	bf 2e       	mov	r11, r31
    13b8:	f0 2d       	mov	r31, r0
    13ba:	c1 2c       	mov	r12, r1
    13bc:	d1 2c       	mov	r13, r1
    13be:	e1 2c       	mov	r14, r1
    13c0:	f1 2c       	mov	r15, r1
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	66 d6       	rcall	.+3276   	; 0x2094 <__udivdi3>
    13c8:	e3 2f       	mov	r30, r19
    13ca:	a0 e0       	ldi	r26, 0x00	; 0
				if(timeLeft >= 0){
    13cc:	1d d7       	rcall	.+3642   	; 0x2208 <__cmpdi2_s8>
    13ce:	24 f0       	brlt	.+8      	; 0x13d8 <main+0x202>
    13d0:	82 2f       	mov	r24, r18
    13d2:	9e 2f       	mov	r25, r30
					writeInt(timeLeft);
    13d4:	5b d1       	rcall	.+694    	; 0x168c <writeInt>
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <main+0x208>
    13d8:	89 e6       	ldi	r24, 0x69	; 105
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	42 d1       	rcall	.+644    	; 0x1662 <writeString>
				}else{
					writeString("0");
    13de:	8b e6       	ldi	r24, 0x6B	; 107
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    13e2:	3f d1       	rcall	.+638    	; 0x1662 <writeString>
    13e4:	8e e6       	ldi	r24, 0x6E	; 110
				}
				writeString("ms");
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    13e8:	3c d1       	rcall	.+632    	; 0x1662 <writeString>
    13ea:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <programmedAmount>
				writeString("\n\rCommands left: ");
    13ee:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <programmedAmount+0x1>
    13f2:	01 97       	sbiw	r24, 0x01	; 1
				writeInt(programmedAmount - 1 - currentParcourLine);
    13f4:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <currentParcourLine>
    13f8:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <currentParcourLine+0x1>
    13fc:	82 1b       	sub	r24, r18
    13fe:	93 0b       	sbc	r25, r19
    1400:	45 d1       	rcall	.+650    	; 0x168c <writeInt>
    1402:	57 d9       	rcall	.-3410   	; 0x6b2 <micros>
    1404:	82 2e       	mov	r8, r18
    1406:	93 2e       	mov	r9, r19
    1408:	a4 2e       	mov	r10, r20
    140a:	b5 2e       	mov	r11, r21
    140c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ultrasonicSensorSpeed>
			}
			
			ultrasonicSensorTimer = micros() + ultrasonicSensorSpeed;
    1410:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ultrasonicSensorSpeed+0x1>
    1414:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ultrasonicSensorSpeed+0x2>
    1418:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ultrasonicSensorSpeed+0x3>
    141c:	88 0e       	add	r8, r24
    141e:	99 1e       	adc	r9, r25
    1420:	aa 1e       	adc	r10, r26
    1422:	bb 1e       	adc	r11, r27
    1424:	80 92 ba 03 	sts	0x03BA, r8	; 0x8003ba <ultrasonicSensorTimer>
    1428:	90 92 bb 03 	sts	0x03BB, r9	; 0x8003bb <ultrasonicSensorTimer+0x1>
    142c:	a0 92 bc 03 	sts	0x03BC, r10	; 0x8003bc <ultrasonicSensorTimer+0x2>
    1430:	b0 92 bd 03 	sts	0x03BD, r11	; 0x8003bd <ultrasonicSensorTimer+0x3>
    1434:	40 90 b6 03 	lds	r4, 0x03B6	; 0x8003b6 <stoptimer>
    1438:	50 90 b7 03 	lds	r5, 0x03B7	; 0x8003b7 <stoptimer+0x1>
    143c:	60 90 b8 03 	lds	r6, 0x03B8	; 0x8003b8 <stoptimer+0x2>
		}
		
		if(stoptimer < micros()){
    1440:	70 90 b9 03 	lds	r7, 0x03B9	; 0x8003b9 <stoptimer+0x3>
    1444:	36 d9       	rcall	.-3476   	; 0x6b2 <micros>
    1446:	f2 2f       	mov	r31, r18
    1448:	e3 2f       	mov	r30, r19
    144a:	c4 2e       	mov	r12, r20
    144c:	d5 2e       	mov	r13, r21
    144e:	e6 2e       	mov	r14, r22
    1450:	f7 2e       	mov	r15, r23
    1452:	08 2f       	mov	r16, r24
    1454:	19 2f       	mov	r17, r25
    1456:	24 2d       	mov	r18, r4
    1458:	35 2d       	mov	r19, r5
    145a:	46 2d       	mov	r20, r6
    145c:	57 2d       	mov	r21, r7
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	af 2e       	mov	r10, r31
    1468:	be 2e       	mov	r11, r30
    146a:	c5 d6       	rcall	.+3466   	; 0x21f6 <__cmpdi2>
    146c:	08 f0       	brcs	.+2      	; 0x1470 <main+0x29a>
    146e:	a2 c0       	rjmp	.+324    	; 0x15b4 <main+0x3de>
    1470:	ea ed       	ldi	r30, 0xDA	; 218
    1472:	f3 e0       	ldi	r31, 0x03	; 3
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	89 2b       	or	r24, r25
    147a:	19 f0       	breq	.+6      	; 0x1482 <main+0x2ac>
    147c:	f1 01       	movw	r30, r2
			
			if(arduinoData.bumperFlag) {
    147e:	11 82       	std	Z+1, r1	; 0x01
    1480:	10 82       	st	Z, r1
    1482:	3a d1       	rcall	.+628    	; 0x16f8 <ultrasonicSensor>
    1484:	81 39       	cpi	r24, 0x91	; 145
    1486:	f1 e0       	ldi	r31, 0x01	; 1
    1488:	9f 07       	cpc	r25, r31
				rp6Data.driveSpeed = 0;
    148a:	78 f0       	brcs	.+30     	; 0x14aa <main+0x2d4>
    148c:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <stopState.2039>
			}
			
			uint16_t distance = ultrasonicSensor();
    1490:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <stopState.2039+0x1>
=======
    10f0:	9d 07       	cpc	r25, r29
    10f2:	a4 f7       	brge	.-24     	; 0x10dc <main+0x124>
    10f4:	0d db       	rcall	.-2534   	; 0x710 <micros>
    10f6:	82 2e       	mov	r8, r18
    10f8:	93 2e       	mov	r9, r19
    10fa:	a4 2e       	mov	r10, r20
    10fc:	b5 2e       	mov	r11, r21
// 				writeInt(programmedParcour[((programmedAmount - 1) * 3) + 1]);
// 				writeString(" ");
// 				writeInt(programmedParcour[((programmedAmount - 1) * 3) + 2]);
// 			}
			
			ultrasonicSensorTimer = micros() + ultrasonicSensorSpeed;
    10fe:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ultrasonicSensorSpeed>
    1102:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ultrasonicSensorSpeed+0x1>
    1106:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ultrasonicSensorSpeed+0x2>
    110a:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ultrasonicSensorSpeed+0x3>
    110e:	88 0e       	add	r8, r24
    1110:	99 1e       	adc	r9, r25
    1112:	aa 1e       	adc	r10, r26
    1114:	bb 1e       	adc	r11, r27
    1116:	80 92 4b 03 	sts	0x034B, r8	; 0x80034b <ultrasonicSensorTimer>
    111a:	90 92 4c 03 	sts	0x034C, r9	; 0x80034c <ultrasonicSensorTimer+0x1>
    111e:	a0 92 4d 03 	sts	0x034D, r10	; 0x80034d <ultrasonicSensorTimer+0x2>
    1122:	b0 92 4e 03 	sts	0x034E, r11	; 0x80034e <ultrasonicSensorTimer+0x3>
    1126:	40 90 47 03 	lds	r4, 0x0347	; 0x800347 <stoptimer>
    112a:	50 90 48 03 	lds	r5, 0x0348	; 0x800348 <stoptimer+0x1>
    112e:	60 90 49 03 	lds	r6, 0x0349	; 0x800349 <stoptimer+0x2>
		}
		
		if(stoptimer < micros()){
    1132:	70 90 4a 03 	lds	r7, 0x034A	; 0x80034a <stoptimer+0x3>
    1136:	ec da       	rcall	.-2600   	; 0x710 <micros>
    1138:	f2 2f       	mov	r31, r18
    113a:	e3 2f       	mov	r30, r19
    113c:	c4 2e       	mov	r12, r20
    113e:	d5 2e       	mov	r13, r21
    1140:	e6 2e       	mov	r14, r22
    1142:	f7 2e       	mov	r15, r23
    1144:	08 2f       	mov	r16, r24
    1146:	19 2f       	mov	r17, r25
    1148:	24 2d       	mov	r18, r4
    114a:	35 2d       	mov	r19, r5
    114c:	46 2d       	mov	r20, r6
    114e:	57 2d       	mov	r21, r7
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	af 2e       	mov	r10, r31
    115a:	be 2e       	mov	r11, r30
    115c:	a3 d5       	rcall	.+2886   	; 0x1ca4 <__cmpdi2>
    115e:	08 f0       	brcs	.+2      	; 0x1162 <main+0x1aa>
    1160:	3b cf       	rjmp	.-394    	; 0xfd8 <main+0x20>
    1162:	eb e6       	ldi	r30, 0x6B	; 107
    1164:	f3 e0       	ldi	r31, 0x03	; 3
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	89 2b       	or	r24, r25
    116c:	19 f0       	breq	.+6      	; 0x1174 <main+0x1bc>
			
			if(arduinoData.bumperFlag) {
    116e:	f1 01       	movw	r30, r2
    1170:	11 82       	std	Z+1, r1	; 0x01
    1172:	10 82       	st	Z, r1
    1174:	db d0       	rcall	.+438    	; 0x132c <ultrasonicSensor>
    1176:	81 39       	cpi	r24, 0x91	; 145
    1178:	f1 e0       	ldi	r31, 0x01	; 1
				rp6Data.driveSpeed = 0;
    117a:	9f 07       	cpc	r25, r31
    117c:	78 f0       	brcs	.+30     	; 0x119c <main+0x1e4>
    117e:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <stopState.2036>
			}
			
			uint16_t distance = ultrasonicSensor();
    1182:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <stopState.2036+0x1>
>>>>>>> Stashed changes
			static int stopState = 0;
			static uint16_t tempAcceleration;
			
			if(distance > 400 && stopState == 1){
<<<<<<< Updated upstream
    1494:	21 30       	cpi	r18, 0x01	; 1
    1496:	31 05       	cpc	r19, r1
    1498:	41 f4       	brne	.+16     	; 0x14aa <main+0x2d4>
    149a:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <tempAcceleration.2040>
    149e:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <tempAcceleration.2040+0x1>
    14a2:	f1 01       	movw	r30, r2
    14a4:	35 83       	std	Z+5, r19	; 0x05
    14a6:	24 83       	std	Z+4, r18	; 0x04
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <main+0x2f2>
				rp6Data.accelerationRate = tempAcceleration;
    14aa:	8d 32       	cpi	r24, 0x2D	; 45
    14ac:	f1 e0       	ldi	r31, 0x01	; 1
    14ae:	9f 07       	cpc	r25, r31
    14b0:	58 f0       	brcs	.+22     	; 0x14c8 <main+0x2f2>
    14b2:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <stopState.2039>
    14b6:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <stopState.2039+0x1>
			}else if(distance > 300 && stopState == 2){
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	21 f4       	brne	.+8      	; 0x14c8 <main+0x2f2>
    14c0:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <stopState.2039+0x1>
    14c4:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <stopState.2039>
    14c8:	80 39       	cpi	r24, 0x90	; 144
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	92 07       	cpc	r25, r18
    14ce:	10 f4       	brcc	.+4      	; 0x14d4 <main+0x2fe>
				stopState = 0;
    14d0:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <runParcour>
    14d4:	9c 01       	movw	r18, r24
    14d6:	2d 52       	subi	r18, 0x2D	; 45
			}
			
			if(distance < 400){
    14d8:	31 40       	sbci	r19, 0x01	; 1
    14da:	23 36       	cpi	r18, 0x63	; 99
    14dc:	31 05       	cpc	r19, r1
    14de:	70 f4       	brcc	.+28     	; 0x14fc <main+0x326>
				runParcour = 0;
    14e0:	f1 01       	movw	r30, r2
    14e2:	20 81       	ld	r18, Z
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
    14e4:	31 81       	ldd	r19, Z+1	; 0x01
    14e6:	29 32       	cpi	r18, 0x29	; 41
    14e8:	31 05       	cpc	r19, r1
    14ea:	40 f0       	brcs	.+16     	; 0x14fc <main+0x326>
    14ec:	22 81       	ldd	r18, Z+2	; 0x02
    14ee:	21 30       	cpi	r18, 0x01	; 1
    14f0:	29 f4       	brne	.+10     	; 0x14fc <main+0x326>
    14f2:	88 e2       	ldi	r24, 0x28	; 40
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
    14fa:	43 c0       	rjmp	.+134    	; 0x1582 <main+0x3ac>
    14fc:	9c 01       	movw	r18, r24
    14fe:	26 55       	subi	r18, 0x56	; 86
    1500:	31 09       	sbc	r19, r1
				rp6Data.driveSpeed = 40;
    1502:	26 3d       	cpi	r18, 0xD6	; 214
    1504:	31 05       	cpc	r19, r1
    1506:	70 f4       	brcc	.+28     	; 0x1524 <main+0x34e>
    1508:	f1 01       	movw	r30, r2
    150a:	20 81       	ld	r18, Z
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
    150c:	31 81       	ldd	r19, Z+1	; 0x01
    150e:	2a 31       	cpi	r18, 0x1A	; 26
    1510:	31 05       	cpc	r19, r1
    1512:	40 f0       	brcs	.+16     	; 0x1524 <main+0x34e>
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	a1 f5       	brne	.+104    	; 0x1582 <main+0x3ac>
    151a:	89 e1       	ldi	r24, 0x19	; 25
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	2f c0       	rjmp	.+94     	; 0x1582 <main+0x3ac>
    1524:	85 35       	cpi	r24, 0x55	; 85
    1526:	91 05       	cpc	r25, r1
				rp6Data.driveSpeed = 25;
    1528:	60 f5       	brcc	.+88     	; 0x1582 <main+0x3ac>
    152a:	f1 01       	movw	r30, r2
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	41 f5       	brne	.+80     	; 0x1582 <main+0x3ac>
			}else if(distance < 85 && rp6Data.driveDirection == 1){
    1532:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <stopState.2039>
    1536:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <stopState.2039+0x1>
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	99 f4       	brne	.+38     	; 0x1564 <main+0x38e>
    153e:	84 81       	ldd	r24, Z+4	; 0x04
				if(stopState == 0){
    1540:	95 81       	ldd	r25, Z+5	; 0x05
    1542:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <tempAcceleration.2040+0x1>
    1546:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <tempAcceleration.2040>
    154a:	88 e8       	ldi	r24, 0x88	; 136
					tempAcceleration = rp6Data.accelerationRate;
    154c:	93 e1       	ldi	r25, 0x13	; 19
    154e:	95 83       	std	Z+5, r25	; 0x05
    1550:	84 83       	std	Z+4, r24	; 0x04
    1552:	11 82       	std	Z+1, r1	; 0x01
    1554:	10 82       	st	Z, r1
    1556:	e1 e0       	ldi	r30, 0x01	; 1
					rp6Data.accelerationRate = 5000;
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	f0 93 8b 03 	sts	0x038B, r31	; 0x80038b <stopState.2039+0x1>
    155e:	e0 93 8a 03 	sts	0x038A, r30	; 0x80038a <stopState.2039>
					rp6Data.driveSpeed = 0;
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <main+0x3ac>
					stopState = 1;
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	69 f4       	brne	.+26     	; 0x1582 <main+0x3ac>
    1568:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <tempAcceleration.2040>
    156c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <tempAcceleration.2040+0x1>
				}else if(stopState == 1){
    1570:	f1 01       	movw	r30, r2
    1572:	95 83       	std	Z+5, r25	; 0x05
					rp6Data.accelerationRate = tempAcceleration;
    1574:	84 83       	std	Z+4, r24	; 0x04
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <stopState.2039+0x1>
    157e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <stopState.2039>
					stopState = 2;
    1582:	97 d8       	rcall	.-3794   	; 0x6b2 <micros>
    1584:	82 2e       	mov	r8, r18
    1586:	93 2e       	mov	r9, r19
    1588:	a4 2e       	mov	r10, r20
    158a:	b5 2e       	mov	r11, r21
=======
    1186:	21 30       	cpi	r18, 0x01	; 1
    1188:	31 05       	cpc	r19, r1
    118a:	41 f4       	brne	.+16     	; 0x119c <main+0x1e4>
    118c:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <tempAcceleration.2037>
    1190:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <tempAcceleration.2037+0x1>
    1194:	f1 01       	movw	r30, r2
    1196:	35 83       	std	Z+5, r19	; 0x05
    1198:	24 83       	std	Z+4, r18	; 0x04
				rp6Data.accelerationRate = tempAcceleration;
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <main+0x202>
    119c:	8d 32       	cpi	r24, 0x2D	; 45
    119e:	f1 e0       	ldi	r31, 0x01	; 1
    11a0:	9f 07       	cpc	r25, r31
    11a2:	58 f0       	brcs	.+22     	; 0x11ba <main+0x202>
    11a4:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <stopState.2036>
    11a8:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <stopState.2036+0x1>
			}else if(distance > 300 && stopState == 2){
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	21 f4       	brne	.+8      	; 0x11ba <main+0x202>
    11b2:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <stopState.2036+0x1>
    11b6:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <stopState.2036>
    11ba:	80 39       	cpi	r24, 0x90	; 144
    11bc:	21 e0       	ldi	r18, 0x01	; 1
    11be:	92 07       	cpc	r25, r18
				stopState = 0;
    11c0:	10 f4       	brcc	.+4      	; 0x11c6 <main+0x20e>
    11c2:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <runParcour>
    11c6:	9c 01       	movw	r18, r24
			}
			
			if(distance < 400){
    11c8:	2d 52       	subi	r18, 0x2D	; 45
    11ca:	31 40       	sbci	r19, 0x01	; 1
    11cc:	23 36       	cpi	r18, 0x63	; 99
    11ce:	31 05       	cpc	r19, r1
				runParcour = 0;
    11d0:	70 f4       	brcc	.+28     	; 0x11ee <main+0x236>
    11d2:	f1 01       	movw	r30, r2
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
    11d4:	20 81       	ld	r18, Z
    11d6:	31 81       	ldd	r19, Z+1	; 0x01
    11d8:	29 32       	cpi	r18, 0x29	; 41
    11da:	31 05       	cpc	r19, r1
    11dc:	40 f0       	brcs	.+16     	; 0x11ee <main+0x236>
    11de:	22 81       	ldd	r18, Z+2	; 0x02
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	29 f4       	brne	.+10     	; 0x11ee <main+0x236>
    11e4:	88 e2       	ldi	r24, 0x28	; 40
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
    11ec:	43 c0       	rjmp	.+134    	; 0x1274 <main+0x2bc>
    11ee:	9c 01       	movw	r18, r24
    11f0:	26 55       	subi	r18, 0x56	; 86
				rp6Data.driveSpeed = 40;
    11f2:	31 09       	sbc	r19, r1
    11f4:	26 3d       	cpi	r18, 0xD6	; 214
    11f6:	31 05       	cpc	r19, r1
    11f8:	70 f4       	brcc	.+28     	; 0x1216 <main+0x25e>
    11fa:	f1 01       	movw	r30, r2
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
    11fc:	20 81       	ld	r18, Z
    11fe:	31 81       	ldd	r19, Z+1	; 0x01
    1200:	2a 31       	cpi	r18, 0x1A	; 26
    1202:	31 05       	cpc	r19, r1
    1204:	40 f0       	brcs	.+16     	; 0x1216 <main+0x25e>
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	a1 f5       	brne	.+104    	; 0x1274 <main+0x2bc>
    120c:	89 e1       	ldi	r24, 0x19	; 25
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	2f c0       	rjmp	.+94     	; 0x1274 <main+0x2bc>
    1216:	85 35       	cpi	r24, 0x55	; 85
    1218:	91 05       	cpc	r25, r1
				rp6Data.driveSpeed = 25;
    121a:	60 f5       	brcc	.+88     	; 0x1274 <main+0x2bc>
    121c:	f1 01       	movw	r30, r2
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	41 f5       	brne	.+80     	; 0x1274 <main+0x2bc>
			}else if(distance < 85 && rp6Data.driveDirection == 1){
    1224:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <stopState.2036>
    1228:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <stopState.2036+0x1>
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	99 f4       	brne	.+38     	; 0x1256 <main+0x29e>
    1230:	84 81       	ldd	r24, Z+4	; 0x04
				if(stopState == 0){
    1232:	95 81       	ldd	r25, Z+5	; 0x05
    1234:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <tempAcceleration.2037+0x1>
    1238:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <tempAcceleration.2037>
					tempAcceleration = rp6Data.accelerationRate;
    123c:	88 e8       	ldi	r24, 0x88	; 136
    123e:	93 e1       	ldi	r25, 0x13	; 19
    1240:	95 83       	std	Z+5, r25	; 0x05
    1242:	84 83       	std	Z+4, r24	; 0x04
    1244:	11 82       	std	Z+1, r1	; 0x01
    1246:	10 82       	st	Z, r1
					rp6Data.accelerationRate = 5000;
    1248:	e1 e0       	ldi	r30, 0x01	; 1
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	f0 93 2d 03 	sts	0x032D, r31	; 0x80032d <stopState.2036+0x1>
					rp6Data.driveSpeed = 0;
    1250:	e0 93 2c 03 	sts	0x032C, r30	; 0x80032c <stopState.2036>
					stopState = 1;
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <main+0x2bc>
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	69 f4       	brne	.+26     	; 0x1274 <main+0x2bc>
    125a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tempAcceleration.2037>
    125e:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tempAcceleration.2037+0x1>
				}else if(stopState == 1){
    1262:	f1 01       	movw	r30, r2
    1264:	95 83       	std	Z+5, r25	; 0x05
					rp6Data.accelerationRate = tempAcceleration;
    1266:	84 83       	std	Z+4, r24	; 0x04
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <stopState.2036+0x1>
    1270:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <stopState.2036>
					stopState = 2;
    1274:	4d da       	rcall	.-2918   	; 0x710 <micros>
    1276:	82 2e       	mov	r8, r18
    1278:	93 2e       	mov	r9, r19
    127a:	a4 2e       	mov	r10, r20
    127c:	b5 2e       	mov	r11, r21
    127e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stoptimerspeed>
>>>>>>> Stashed changes
				}
			}
			
			stoptimer = micros() + stoptimerspeed;
<<<<<<< Updated upstream
    158c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <stoptimerspeed>
    1590:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <stoptimerspeed+0x1>
    1594:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <stoptimerspeed+0x2>
    1598:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <stoptimerspeed+0x3>
    159c:	88 0e       	add	r8, r24
    159e:	99 1e       	adc	r9, r25
    15a0:	aa 1e       	adc	r10, r26
    15a2:	bb 1e       	adc	r11, r27
    15a4:	80 92 b6 03 	sts	0x03B6, r8	; 0x8003b6 <stoptimer>
    15a8:	90 92 b7 03 	sts	0x03B7, r9	; 0x8003b7 <stoptimer+0x1>
    15ac:	a0 92 b8 03 	sts	0x03B8, r10	; 0x8003b8 <stoptimer+0x2>
    15b0:	b0 92 b9 03 	sts	0x03B9, r11	; 0x8003b9 <stoptimer+0x3>
    15b4:	40 90 b2 03 	lds	r4, 0x03B2	; 0x8003b2 <backBeepTimer>
    15b8:	50 90 b3 03 	lds	r5, 0x03B3	; 0x8003b3 <backBeepTimer+0x1>
    15bc:	60 90 b4 03 	lds	r6, 0x03B4	; 0x8003b4 <backBeepTimer+0x2>
		}
		
		if (backBeepTimer < micros()) {
    15c0:	70 90 b5 03 	lds	r7, 0x03B5	; 0x8003b5 <backBeepTimer+0x3>
    15c4:	76 d8       	rcall	.-3860   	; 0x6b2 <micros>
    15c6:	f2 2f       	mov	r31, r18
    15c8:	e3 2f       	mov	r30, r19
    15ca:	c4 2e       	mov	r12, r20
    15cc:	d5 2e       	mov	r13, r21
    15ce:	e6 2e       	mov	r14, r22
    15d0:	f7 2e       	mov	r15, r23
    15d2:	08 2f       	mov	r16, r24
    15d4:	19 2f       	mov	r17, r25
    15d6:	24 2d       	mov	r18, r4
    15d8:	35 2d       	mov	r19, r5
    15da:	46 2d       	mov	r20, r6
    15dc:	57 2d       	mov	r21, r7
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	af 2e       	mov	r10, r31
    15e8:	be 2e       	mov	r11, r30
    15ea:	05 d6       	rcall	.+3082   	; 0x21f6 <__cmpdi2>
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <main+0x41a>
    15ee:	04 ce       	rjmp	.-1016   	; 0x11f8 <main+0x22>
    15f0:	f1 01       	movw	r30, r2
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	8f 3f       	cpi	r24, 0xFF	; 255
    15f6:	21 f4       	brne	.+8      	; 0x1600 <main+0x42a>
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	45 97       	sbiw	r24, 0x15	; 21
			if ((rp6Data.driveDirection == -1 && rp6Data.driveSpeed > 20)  || arduinoData.bumperFlag) {
    15fe:	38 f4       	brcc	.+14     	; 0x160e <main+0x438>
    1600:	ea ed       	ldi	r30, 0xDA	; 218
    1602:	f3 e0       	ldi	r31, 0x03	; 3
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	89 2b       	or	r24, r25
    160a:	09 f4       	brne	.+2      	; 0x160e <main+0x438>
    160c:	f5 cd       	rjmp	.-1046   	; 0x11f8 <main+0x22>
    160e:	e1 e0       	ldi	r30, 0x01	; 1
    1610:	f1 e0       	ldi	r31, 0x01	; 1
    1612:	80 81       	ld	r24, Z
    1614:	f8 e0       	ldi	r31, 0x08	; 8
    1616:	8f 27       	eor	r24, r31
    1618:	e1 e0       	ldi	r30, 0x01	; 1
    161a:	f1 e0       	ldi	r31, 0x01	; 1
				DDRH ^= (1 << BEEPER);
    161c:	80 83       	st	Z, r24
    161e:	49 d8       	rcall	.-3950   	; 0x6b2 <micros>
    1620:	82 2e       	mov	r8, r18
    1622:	93 2e       	mov	r9, r19
    1624:	a4 2e       	mov	r10, r20
    1626:	b5 2e       	mov	r11, r21
    1628:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <backBeepSpeed>
				backBeepTimer = micros() + backBeepSpeed;
    162c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <backBeepSpeed+0x1>
    1630:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <backBeepSpeed+0x2>
    1634:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <backBeepSpeed+0x3>
    1638:	88 0e       	add	r8, r24
    163a:	99 1e       	adc	r9, r25
    163c:	aa 1e       	adc	r10, r26
    163e:	bb 1e       	adc	r11, r27
    1640:	80 92 b2 03 	sts	0x03B2, r8	; 0x8003b2 <backBeepTimer>
    1644:	90 92 b3 03 	sts	0x03B3, r9	; 0x8003b3 <backBeepTimer+0x1>
    1648:	a0 92 b4 03 	sts	0x03B4, r10	; 0x8003b4 <backBeepTimer+0x2>
    164c:	b0 92 b5 03 	sts	0x03B5, r11	; 0x8003b5 <backBeepTimer+0x3>
    1650:	d3 cd       	rjmp	.-1114   	; 0x11f8 <main+0x22>

00001652 <writeChar>:
=======
    1282:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stoptimerspeed+0x1>
    1286:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <stoptimerspeed+0x2>
    128a:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <stoptimerspeed+0x3>
    128e:	88 0e       	add	r8, r24
    1290:	99 1e       	adc	r9, r25
    1292:	aa 1e       	adc	r10, r26
    1294:	bb 1e       	adc	r11, r27
    1296:	80 92 47 03 	sts	0x0347, r8	; 0x800347 <stoptimer>
    129a:	90 92 48 03 	sts	0x0348, r9	; 0x800348 <stoptimer+0x1>
    129e:	a0 92 49 03 	sts	0x0349, r10	; 0x800349 <stoptimer+0x2>
    12a2:	b0 92 4a 03 	sts	0x034A, r11	; 0x80034a <stoptimer+0x3>
    12a6:	98 ce       	rjmp	.-720    	; 0xfd8 <main+0x20>

000012a8 <writeChar>:
>>>>>>> Stashed changes
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
<<<<<<< Updated upstream
    1652:	e0 ec       	ldi	r30, 0xC0	; 192
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	90 81       	ld	r25, Z
    1658:	95 ff       	sbrs	r25, 5
    165a:	fd cf       	rjmp	.-6      	; 0x1656 <writeChar+0x4>
	UDR0 = x;
    165c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1660:	08 95       	ret

00001662 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    166a:	80 81       	ld	r24, Z
    166c:	88 23       	and	r24, r24
    166e:	51 f0       	breq	.+20     	; 0x1684 <writeString+0x22>
    1670:	8f 01       	movw	r16, r30
    1672:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    1674:	ee df       	rcall	.-36     	; 0x1652 <writeChar>
=======
    12a8:	e0 ec       	ldi	r30, 0xC0	; 192
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	90 81       	ld	r25, Z
    12ae:	95 ff       	sbrs	r25, 5
    12b0:	fd cf       	rjmp	.-6      	; 0x12ac <writeChar+0x4>
	UDR0 = x;
    12b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12b6:	08 95       	ret

000012b8 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    12c0:	80 81       	ld	r24, Z
    12c2:	88 23       	and	r24, r24
    12c4:	51 f0       	breq	.+20     	; 0x12da <writeString+0x22>
    12c6:	8f 01       	movw	r16, r30
    12c8:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    12ca:	ee df       	rcall	.-36     	; 0x12a8 <writeChar>
>>>>>>> Stashed changes
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
<<<<<<< Updated upstream
    1676:	cf 5f       	subi	r28, 0xFF	; 255
    1678:	f8 01       	movw	r30, r16
    167a:	ec 0f       	add	r30, r28
    167c:	f1 1d       	adc	r31, r1
    167e:	80 81       	ld	r24, Z
    1680:	81 11       	cpse	r24, r1
    1682:	f8 cf       	rjmp	.-16     	; 0x1674 <writeString+0x12>
		writeChar( st[i] );
	}
}
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	28 97       	sbiw	r28, 0x08	; 8
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	4a e0       	ldi	r20, 0x0A	; 10
    16a2:	be 01       	movw	r22, r28
    16a4:	6f 5f       	subi	r22, 0xFF	; 255
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	ca d5       	rcall	.+2964   	; 0x223e <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	d9 df       	rcall	.-78     	; 0x1662 <writeString>
}
    16b0:	28 96       	adiw	r28, 0x08	; 8
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <initBackBeep>:

#define PRESCALER 256

void initBackBeep() {
	
	TCCR4A |= (1 << COM4A0);				//Toggle OC1A on match
    16c2:	e0 ea       	ldi	r30, 0xA0	; 160
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 64       	ori	r24, 0x40	; 64
    16ca:	80 83       	st	Z, r24
	TCCR4B |= (1 << CS42) | (1 << WGM42);	//Prescaler 256, CTC mode
    16cc:	e1 ea       	ldi	r30, 0xA1	; 161
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8c 60       	ori	r24, 0x0C	; 12
    16d4:	80 83       	st	Z, r24
	OCR4A = freqToOCR(BEEP_FREQ);
    16d6:	8e e4       	ldi	r24, 0x4E	; 78
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    16de:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    16e2:	08 95       	ret

000016e4 <initTimer>:
=======
    12cc:	cf 5f       	subi	r28, 0xFF	; 255
    12ce:	f8 01       	movw	r30, r16
    12d0:	ec 0f       	add	r30, r28
    12d2:	f1 1d       	adc	r31, r1
    12d4:	80 81       	ld	r24, Z
    12d6:	81 11       	cpse	r24, r1
    12d8:	f8 cf       	rjmp	.-16     	; 0x12ca <writeString+0x12>
		writeChar( st[i] );
	}
}
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	28 97       	sbiw	r28, 0x08	; 8
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	4a e0       	ldi	r20, 0x0A	; 10
    12f8:	be 01       	movw	r22, r28
    12fa:	6f 5f       	subi	r22, 0xFF	; 255
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	f6 d4       	rcall	.+2540   	; 0x1cec <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	d9 df       	rcall	.-78     	; 0x12b8 <writeString>
}
    1306:	28 96       	adiw	r28, 0x08	; 8
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <initTimer>:
>>>>>>> Stashed changes
#define PORT_REGISTER PORTL
#define PIN_REGISTER PINL

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
<<<<<<< Updated upstream
    16e4:	e1 e8       	ldi	r30, 0x81	; 129
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	82 60       	ori	r24, 0x02	; 2
    16ec:	80 83       	st	Z, r24
	TCNT1 = 0;
    16ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    16f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    16f6:	08 95       	ret

000016f8 <ultrasonicSensor>:
}

int ultrasonicSensor() {
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    16fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1700:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
=======
    1318:	e1 e8       	ldi	r30, 0x81	; 129
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	82 60       	ori	r24, 0x02	; 2
    1320:	80 83       	st	Z, r24
	TCNT1 = 0;
    1322:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1326:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    132a:	08 95       	ret

0000132c <ultrasonicSensor>:
}

int ultrasonicSensor() {
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    1330:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1334:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
>>>>>>> Stashed changes
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER); //Set TRIGGER pin as output
<<<<<<< Updated upstream
    1704:	aa e0       	ldi	r26, 0x0A	; 10
    1706:	b1 e0       	ldi	r27, 0x01	; 1
    1708:	8c 91       	ld	r24, X
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    170e:	eb e0       	ldi	r30, 0x0B	; 11
    1710:	f1 e0       	ldi	r31, 0x01	; 1
    1712:	80 81       	ld	r24, Z
    1714:	8d 7f       	andi	r24, 0xFD	; 253
    1716:	80 83       	st	Z, r24
=======
    1338:	aa e0       	ldi	r26, 0x0A	; 10
    133a:	b1 e0       	ldi	r27, 0x01	; 1
    133c:	8c 91       	ld	r24, X
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    1342:	eb e0       	ldi	r30, 0x0B	; 11
    1344:	f1 e0       	ldi	r31, 0x01	; 1
    1346:	80 81       	ld	r24, Z
    1348:	8d 7f       	andi	r24, 0xFD	; 253
    134a:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< Updated upstream
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	2a 95       	dec	r18
    171c:	f1 f7       	brne	.-4      	; 0x171a <ultrasonicSensor+0x22>
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    1720:	80 81       	ld	r24, Z
    1722:	82 60       	ori	r24, 0x02	; 2
    1724:	80 83       	st	Z, r24
    1726:	8a e1       	ldi	r24, 0x1A	; 26
    1728:	8a 95       	dec	r24
    172a:	f1 f7       	brne	.-4      	; 0x1728 <ultrasonicSensor+0x30>
    172c:	00 c0       	rjmp	.+0      	; 0x172e <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    172e:	80 81       	ld	r24, Z
    1730:	8d 7f       	andi	r24, 0xFD	; 253
    1732:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    1734:	8c 91       	ld	r24, X
    1736:	8d 7f       	andi	r24, 0xFD	; 253
    1738:	8c 93       	st	X, r24
=======
    134c:	2a e0       	ldi	r18, 0x0A	; 10
    134e:	2a 95       	dec	r18
    1350:	f1 f7       	brne	.-4      	; 0x134e <ultrasonicSensor+0x22>
    1352:	00 c0       	rjmp	.+0      	; 0x1354 <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    1354:	80 81       	ld	r24, Z
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	80 83       	st	Z, r24
    135a:	8a e1       	ldi	r24, 0x1A	; 26
    135c:	8a 95       	dec	r24
    135e:	f1 f7       	brne	.-4      	; 0x135c <ultrasonicSensor+0x30>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    1362:	80 81       	ld	r24, Z
    1364:	8d 7f       	andi	r24, 0xFD	; 253
    1366:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    1368:	8c 91       	ld	r24, X
    136a:	8d 7f       	andi	r24, 0xFD	; 253
    136c:	8c 93       	st	X, r24
>>>>>>> Stashed changes
	
	TCNT1 = 0; //Reset value of TCNT1
	
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
<<<<<<< Updated upstream
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	dc 01       	movw	r26, r24
=======
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	dc 01       	movw	r26, r24
>>>>>>> Stashed changes
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
<<<<<<< Updated upstream
    1740:	e9 e0       	ldi	r30, 0x09	; 9
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	0a c0       	rjmp	.+20     	; 0x175a <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	a1 1d       	adc	r26, r1
    174a:	b1 1d       	adc	r27, r1
    174c:	81 34       	cpi	r24, 0x41	; 65
    174e:	2c e9       	ldi	r18, 0x9C	; 156
    1750:	92 07       	cpc	r25, r18
    1752:	a1 05       	cpc	r26, r1
    1754:	b1 05       	cpc	r27, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <ultrasonicSensor+0x62>
    1758:	45 c0       	rjmp	.+138    	; 0x17e4 <ultrasonicSensor+0xec>
=======
    1374:	e9 e0       	ldi	r30, 0x09	; 9
    1376:	f1 e0       	ldi	r31, 0x01	; 1
    1378:	0a c0       	rjmp	.+20     	; 0x138e <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	a1 1d       	adc	r26, r1
    137e:	b1 1d       	adc	r27, r1
    1380:	81 34       	cpi	r24, 0x41	; 65
    1382:	2c e9       	ldi	r18, 0x9C	; 156
    1384:	92 07       	cpc	r25, r18
    1386:	a1 05       	cpc	r26, r1
    1388:	b1 05       	cpc	r27, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <ultrasonicSensor+0x62>
    138c:	45 c0       	rjmp	.+138    	; 0x1418 <ultrasonicSensor+0xec>
>>>>>>> Stashed changes
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
<<<<<<< Updated upstream
    175a:	20 81       	ld	r18, Z
    175c:	21 fd       	sbrc	r18, 1
    175e:	f3 cf       	rjmp	.-26     	; 0x1746 <ultrasonicSensor+0x4e>
=======
    138e:	20 81       	ld	r18, Z
    1390:	21 fd       	sbrc	r18, 1
    1392:	f3 cf       	rjmp	.-26     	; 0x137a <ultrasonicSensor+0x4e>
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
<<<<<<< Updated upstream
    1760:	e9 e0       	ldi	r30, 0x09	; 9
    1762:	f1 e0       	ldi	r31, 0x01	; 1
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    1766:	ac 01       	movw	r20, r24
    1768:	bd 01       	movw	r22, r26
    176a:	4f 5f       	subi	r20, 0xFF	; 255
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
    176e:	6f 4f       	sbci	r22, 0xFF	; 255
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	80 34       	cpi	r24, 0x40	; 64
    1774:	9c 49       	sbci	r25, 0x9C	; 156
    1776:	a1 05       	cpc	r26, r1
    1778:	b1 05       	cpc	r27, r1
    177a:	b9 f1       	breq	.+110    	; 0x17ea <ultrasonicSensor+0xf2>
    177c:	db 01       	movw	r26, r22
    177e:	ca 01       	movw	r24, r20
=======
    1394:	e9 e0       	ldi	r30, 0x09	; 9
    1396:	f1 e0       	ldi	r31, 0x01	; 1
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    139a:	ac 01       	movw	r20, r24
    139c:	bd 01       	movw	r22, r26
    139e:	4f 5f       	subi	r20, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	6f 4f       	sbci	r22, 0xFF	; 255
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	80 34       	cpi	r24, 0x40	; 64
    13a8:	9c 49       	sbci	r25, 0x9C	; 156
    13aa:	a1 05       	cpc	r26, r1
    13ac:	b1 05       	cpc	r27, r1
    13ae:	b9 f1       	breq	.+110    	; 0x141e <ultrasonicSensor+0xf2>
    13b0:	db 01       	movw	r26, r22
    13b2:	ca 01       	movw	r24, r20
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
<<<<<<< Updated upstream
    1780:	20 81       	ld	r18, Z
    1782:	21 ff       	sbrs	r18, 1
    1784:	f0 cf       	rjmp	.-32     	; 0x1766 <ultrasonicSensor+0x6e>
=======
    13b4:	20 81       	ld	r18, Z
    13b6:	21 ff       	sbrs	r18, 1
    13b8:	f0 cf       	rjmp	.-32     	; 0x139a <ultrasonicSensor+0x6e>
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
<<<<<<< Updated upstream
    1786:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    178a:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    178e:	e9 e0       	ldi	r30, 0x09	; 9
    1790:	f1 e0       	ldi	r31, 0x01	; 1
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    1794:	ac 01       	movw	r20, r24
    1796:	bd 01       	movw	r22, r26
    1798:	4f 5f       	subi	r20, 0xFF	; 255
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	6f 4f       	sbci	r22, 0xFF	; 255
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	80 34       	cpi	r24, 0x40	; 64
    17a2:	9c 49       	sbci	r25, 0x9C	; 156
    17a4:	a1 05       	cpc	r26, r1
    17a6:	b1 05       	cpc	r27, r1
    17a8:	19 f1       	breq	.+70     	; 0x17f0 <ultrasonicSensor+0xf8>
    17aa:	db 01       	movw	r26, r22
    17ac:	ca 01       	movw	r24, r20
=======
    13ba:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    13be:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    13c2:	e9 e0       	ldi	r30, 0x09	; 9
    13c4:	f1 e0       	ldi	r31, 0x01	; 1
    13c6:	0d c0       	rjmp	.+26     	; 0x13e2 <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    13c8:	ac 01       	movw	r20, r24
    13ca:	bd 01       	movw	r22, r26
    13cc:	4f 5f       	subi	r20, 0xFF	; 255
    13ce:	5f 4f       	sbci	r21, 0xFF	; 255
    13d0:	6f 4f       	sbci	r22, 0xFF	; 255
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	80 34       	cpi	r24, 0x40	; 64
    13d6:	9c 49       	sbci	r25, 0x9C	; 156
    13d8:	a1 05       	cpc	r26, r1
    13da:	b1 05       	cpc	r27, r1
    13dc:	19 f1       	breq	.+70     	; 0x1424 <ultrasonicSensor+0xf8>
    13de:	db 01       	movw	r26, r22
    13e0:	ca 01       	movw	r24, r20
>>>>>>> Stashed changes
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
<<<<<<< Updated upstream
    17ae:	20 81       	ld	r18, Z
    17b0:	21 fd       	sbrc	r18, 1
    17b2:	f0 cf       	rjmp	.-32     	; 0x1794 <ultrasonicSensor+0x9c>
=======
    13e2:	20 81       	ld	r18, Z
    13e4:	21 fd       	sbrc	r18, 1
    13e6:	f0 cf       	rjmp	.-32     	; 0x13c8 <ultrasonicSensor+0x9c>
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
<<<<<<< Updated upstream
    17b4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    17b8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
=======
    13e8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    13ec:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
>>>>>>> Stashed changes
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
<<<<<<< Updated upstream
    17bc:	c9 01       	movw	r24, r18
    17be:	a0 e0       	ldi	r26, 0x00	; 0
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	9c 01       	movw	r18, r24
    17c4:	ad 01       	movw	r20, r26
    17c6:	2c 1b       	sub	r18, r28
    17c8:	3d 0b       	sbc	r19, r29
    17ca:	41 09       	sbc	r20, r1
    17cc:	51 09       	sbc	r21, r1
    17ce:	a3 eb       	ldi	r26, 0xB3	; 179
    17d0:	b6 e0       	ldi	r27, 0x06	; 6
    17d2:	54 d4       	rcall	.+2216   	; 0x207c <__muluhisi3>
    17d4:	20 e2       	ldi	r18, 0x20	; 32
    17d6:	3e e4       	ldi	r19, 0x4E	; 78
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	25 d4       	rcall	.+2122   	; 0x2028 <__udivmodsi4>
    17de:	c9 01       	movw	r24, r18
    17e0:	05 97       	sbiw	r24, 0x05	; 5
=======
    13f0:	c9 01       	movw	r24, r18
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	9c 01       	movw	r18, r24
    13f8:	ad 01       	movw	r20, r26
    13fa:	2c 1b       	sub	r18, r28
    13fc:	3d 0b       	sbc	r19, r29
    13fe:	41 09       	sbc	r20, r1
    1400:	51 09       	sbc	r21, r1
    1402:	a3 eb       	ldi	r26, 0xB3	; 179
    1404:	b6 e0       	ldi	r27, 0x06	; 6
    1406:	91 d3       	rcall	.+1826   	; 0x1b2a <__muluhisi3>
    1408:	20 e2       	ldi	r18, 0x20	; 32
    140a:	3e e4       	ldi	r19, 0x4E	; 78
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	62 d3       	rcall	.+1732   	; 0x1ad6 <__udivmodsi4>
    1412:	c9 01       	movw	r24, r18
    1414:	05 97       	sbiw	r24, 0x05	; 5
>>>>>>> Stashed changes
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
<<<<<<< Updated upstream
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <ultrasonicSensor+0xfc>
=======
    1416:	08 c0       	rjmp	.+16     	; 0x1428 <ultrasonicSensor+0xfc>
>>>>>>> Stashed changes
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
<<<<<<< Updated upstream
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <ultrasonicSensor+0xfc>
=======
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <ultrasonicSensor+0xfc>
>>>>>>> Stashed changes
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
<<<<<<< Updated upstream
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <ultrasonicSensor+0xfc>
=======
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <ultrasonicSensor+0xfc>
>>>>>>> Stashed changes
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
<<<<<<< Updated upstream
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
=======
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> Stashed changes
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
}
<<<<<<< Updated upstream
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <__subsf3>:
    17fa:	50 58       	subi	r21, 0x80	; 128

000017fc <__addsf3>:
    17fc:	bb 27       	eor	r27, r27
    17fe:	aa 27       	eor	r26, r26
    1800:	0e d0       	rcall	.+28     	; 0x181e <__addsf3x>
    1802:	b3 c1       	rjmp	.+870    	; 0x1b6a <__fp_round>
    1804:	a4 d1       	rcall	.+840    	; 0x1b4e <__fp_pscA>
    1806:	30 f0       	brcs	.+12     	; 0x1814 <__addsf3+0x18>
    1808:	a9 d1       	rcall	.+850    	; 0x1b5c <__fp_pscB>
    180a:	20 f0       	brcs	.+8      	; 0x1814 <__addsf3+0x18>
    180c:	31 f4       	brne	.+12     	; 0x181a <__addsf3+0x1e>
    180e:	9f 3f       	cpi	r25, 0xFF	; 255
    1810:	11 f4       	brne	.+4      	; 0x1816 <__addsf3+0x1a>
    1812:	1e f4       	brtc	.+6      	; 0x181a <__addsf3+0x1e>
    1814:	99 c1       	rjmp	.+818    	; 0x1b48 <__fp_nan>
    1816:	0e f4       	brtc	.+2      	; 0x181a <__addsf3+0x1e>
    1818:	e0 95       	com	r30
    181a:	e7 fb       	bst	r30, 7
    181c:	8f c1       	rjmp	.+798    	; 0x1b3c <__fp_inf>

0000181e <__addsf3x>:
    181e:	e9 2f       	mov	r30, r25
    1820:	b5 d1       	rcall	.+874    	; 0x1b8c <__fp_split3>
    1822:	80 f3       	brcs	.-32     	; 0x1804 <__addsf3+0x8>
    1824:	ba 17       	cp	r27, r26
    1826:	62 07       	cpc	r22, r18
    1828:	73 07       	cpc	r23, r19
    182a:	84 07       	cpc	r24, r20
    182c:	95 07       	cpc	r25, r21
    182e:	18 f0       	brcs	.+6      	; 0x1836 <__addsf3x+0x18>
    1830:	71 f4       	brne	.+28     	; 0x184e <__addsf3x+0x30>
    1832:	9e f5       	brtc	.+102    	; 0x189a <__addsf3x+0x7c>
    1834:	cd c1       	rjmp	.+922    	; 0x1bd0 <__fp_zero>
    1836:	0e f4       	brtc	.+2      	; 0x183a <__addsf3x+0x1c>
    1838:	e0 95       	com	r30
    183a:	0b 2e       	mov	r0, r27
    183c:	ba 2f       	mov	r27, r26
    183e:	a0 2d       	mov	r26, r0
    1840:	0b 01       	movw	r0, r22
    1842:	b9 01       	movw	r22, r18
    1844:	90 01       	movw	r18, r0
    1846:	0c 01       	movw	r0, r24
    1848:	ca 01       	movw	r24, r20
    184a:	a0 01       	movw	r20, r0
    184c:	11 24       	eor	r1, r1
    184e:	ff 27       	eor	r31, r31
    1850:	59 1b       	sub	r21, r25
    1852:	99 f0       	breq	.+38     	; 0x187a <__addsf3x+0x5c>
    1854:	59 3f       	cpi	r21, 0xF9	; 249
    1856:	50 f4       	brcc	.+20     	; 0x186c <__addsf3x+0x4e>
    1858:	50 3e       	cpi	r21, 0xE0	; 224
    185a:	68 f1       	brcs	.+90     	; 0x18b6 <__addsf3x+0x98>
    185c:	1a 16       	cp	r1, r26
    185e:	f0 40       	sbci	r31, 0x00	; 0
    1860:	a2 2f       	mov	r26, r18
    1862:	23 2f       	mov	r18, r19
    1864:	34 2f       	mov	r19, r20
    1866:	44 27       	eor	r20, r20
    1868:	58 5f       	subi	r21, 0xF8	; 248
    186a:	f3 cf       	rjmp	.-26     	; 0x1852 <__addsf3x+0x34>
    186c:	46 95       	lsr	r20
    186e:	37 95       	ror	r19
    1870:	27 95       	ror	r18
    1872:	a7 95       	ror	r26
    1874:	f0 40       	sbci	r31, 0x00	; 0
    1876:	53 95       	inc	r21
    1878:	c9 f7       	brne	.-14     	; 0x186c <__addsf3x+0x4e>
    187a:	7e f4       	brtc	.+30     	; 0x189a <__addsf3x+0x7c>
    187c:	1f 16       	cp	r1, r31
    187e:	ba 0b       	sbc	r27, r26
    1880:	62 0b       	sbc	r22, r18
    1882:	73 0b       	sbc	r23, r19
    1884:	84 0b       	sbc	r24, r20
    1886:	ba f0       	brmi	.+46     	; 0x18b6 <__addsf3x+0x98>
    1888:	91 50       	subi	r25, 0x01	; 1
    188a:	a1 f0       	breq	.+40     	; 0x18b4 <__addsf3x+0x96>
    188c:	ff 0f       	add	r31, r31
    188e:	bb 1f       	adc	r27, r27
    1890:	66 1f       	adc	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	88 1f       	adc	r24, r24
    1896:	c2 f7       	brpl	.-16     	; 0x1888 <__addsf3x+0x6a>
    1898:	0e c0       	rjmp	.+28     	; 0x18b6 <__addsf3x+0x98>
    189a:	ba 0f       	add	r27, r26
    189c:	62 1f       	adc	r22, r18
    189e:	73 1f       	adc	r23, r19
    18a0:	84 1f       	adc	r24, r20
    18a2:	48 f4       	brcc	.+18     	; 0x18b6 <__addsf3x+0x98>
    18a4:	87 95       	ror	r24
    18a6:	77 95       	ror	r23
    18a8:	67 95       	ror	r22
    18aa:	b7 95       	ror	r27
    18ac:	f7 95       	ror	r31
    18ae:	9e 3f       	cpi	r25, 0xFE	; 254
    18b0:	08 f0       	brcs	.+2      	; 0x18b4 <__addsf3x+0x96>
    18b2:	b3 cf       	rjmp	.-154    	; 0x181a <__addsf3+0x1e>
    18b4:	93 95       	inc	r25
    18b6:	88 0f       	add	r24, r24
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <__addsf3x+0x9e>
    18ba:	99 27       	eor	r25, r25
    18bc:	ee 0f       	add	r30, r30
    18be:	97 95       	ror	r25
    18c0:	87 95       	ror	r24
    18c2:	08 95       	ret

000018c4 <__cmpsf2>:
    18c4:	17 d1       	rcall	.+558    	; 0x1af4 <__fp_cmp>
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <__cmpsf2+0x6>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	08 95       	ret

000018cc <__divsf3>:
    18cc:	0c d0       	rcall	.+24     	; 0x18e6 <__divsf3x>
    18ce:	4d c1       	rjmp	.+666    	; 0x1b6a <__fp_round>
    18d0:	45 d1       	rcall	.+650    	; 0x1b5c <__fp_pscB>
    18d2:	40 f0       	brcs	.+16     	; 0x18e4 <__divsf3+0x18>
    18d4:	3c d1       	rcall	.+632    	; 0x1b4e <__fp_pscA>
    18d6:	30 f0       	brcs	.+12     	; 0x18e4 <__divsf3+0x18>
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <__divsf3+0x16>
    18da:	5f 3f       	cpi	r21, 0xFF	; 255
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <__divsf3+0x18>
    18de:	2e c1       	rjmp	.+604    	; 0x1b3c <__fp_inf>
    18e0:	51 11       	cpse	r21, r1
    18e2:	77 c1       	rjmp	.+750    	; 0x1bd2 <__fp_szero>
    18e4:	31 c1       	rjmp	.+610    	; 0x1b48 <__fp_nan>

000018e6 <__divsf3x>:
    18e6:	52 d1       	rcall	.+676    	; 0x1b8c <__fp_split3>
    18e8:	98 f3       	brcs	.-26     	; 0x18d0 <__divsf3+0x4>

000018ea <__divsf3_pse>:
    18ea:	99 23       	and	r25, r25
    18ec:	c9 f3       	breq	.-14     	; 0x18e0 <__divsf3+0x14>
    18ee:	55 23       	and	r21, r21
    18f0:	b1 f3       	breq	.-20     	; 0x18de <__divsf3+0x12>
    18f2:	95 1b       	sub	r25, r21
    18f4:	55 0b       	sbc	r21, r21
    18f6:	bb 27       	eor	r27, r27
    18f8:	aa 27       	eor	r26, r26
    18fa:	62 17       	cp	r22, r18
    18fc:	73 07       	cpc	r23, r19
    18fe:	84 07       	cpc	r24, r20
    1900:	38 f0       	brcs	.+14     	; 0x1910 <__divsf3_pse+0x26>
    1902:	9f 5f       	subi	r25, 0xFF	; 255
    1904:	5f 4f       	sbci	r21, 0xFF	; 255
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	44 1f       	adc	r20, r20
    190c:	aa 1f       	adc	r26, r26
    190e:	a9 f3       	breq	.-22     	; 0x18fa <__divsf3_pse+0x10>
    1910:	33 d0       	rcall	.+102    	; 0x1978 <__divsf3_pse+0x8e>
    1912:	0e 2e       	mov	r0, r30
    1914:	3a f0       	brmi	.+14     	; 0x1924 <__divsf3_pse+0x3a>
    1916:	e0 e8       	ldi	r30, 0x80	; 128
    1918:	30 d0       	rcall	.+96     	; 0x197a <__divsf3_pse+0x90>
    191a:	91 50       	subi	r25, 0x01	; 1
    191c:	50 40       	sbci	r21, 0x00	; 0
    191e:	e6 95       	lsr	r30
    1920:	00 1c       	adc	r0, r0
    1922:	ca f7       	brpl	.-14     	; 0x1916 <__divsf3_pse+0x2c>
    1924:	29 d0       	rcall	.+82     	; 0x1978 <__divsf3_pse+0x8e>
    1926:	fe 2f       	mov	r31, r30
    1928:	27 d0       	rcall	.+78     	; 0x1978 <__divsf3_pse+0x8e>
    192a:	66 0f       	add	r22, r22
    192c:	77 1f       	adc	r23, r23
    192e:	88 1f       	adc	r24, r24
    1930:	bb 1f       	adc	r27, r27
    1932:	26 17       	cp	r18, r22
    1934:	37 07       	cpc	r19, r23
    1936:	48 07       	cpc	r20, r24
    1938:	ab 07       	cpc	r26, r27
    193a:	b0 e8       	ldi	r27, 0x80	; 128
    193c:	09 f0       	breq	.+2      	; 0x1940 <__divsf3_pse+0x56>
    193e:	bb 0b       	sbc	r27, r27
    1940:	80 2d       	mov	r24, r0
    1942:	bf 01       	movw	r22, r30
    1944:	ff 27       	eor	r31, r31
    1946:	93 58       	subi	r25, 0x83	; 131
    1948:	5f 4f       	sbci	r21, 0xFF	; 255
    194a:	2a f0       	brmi	.+10     	; 0x1956 <__divsf3_pse+0x6c>
    194c:	9e 3f       	cpi	r25, 0xFE	; 254
    194e:	51 05       	cpc	r21, r1
    1950:	68 f0       	brcs	.+26     	; 0x196c <__divsf3_pse+0x82>
    1952:	f4 c0       	rjmp	.+488    	; 0x1b3c <__fp_inf>
    1954:	3e c1       	rjmp	.+636    	; 0x1bd2 <__fp_szero>
    1956:	5f 3f       	cpi	r21, 0xFF	; 255
    1958:	ec f3       	brlt	.-6      	; 0x1954 <__divsf3_pse+0x6a>
    195a:	98 3e       	cpi	r25, 0xE8	; 232
    195c:	dc f3       	brlt	.-10     	; 0x1954 <__divsf3_pse+0x6a>
    195e:	86 95       	lsr	r24
    1960:	77 95       	ror	r23
    1962:	67 95       	ror	r22
    1964:	b7 95       	ror	r27
    1966:	f7 95       	ror	r31
    1968:	9f 5f       	subi	r25, 0xFF	; 255
    196a:	c9 f7       	brne	.-14     	; 0x195e <__divsf3_pse+0x74>
    196c:	88 0f       	add	r24, r24
    196e:	91 1d       	adc	r25, r1
    1970:	96 95       	lsr	r25
    1972:	87 95       	ror	r24
    1974:	97 f9       	bld	r25, 7
    1976:	08 95       	ret
    1978:	e1 e0       	ldi	r30, 0x01	; 1
    197a:	66 0f       	add	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	88 1f       	adc	r24, r24
    1980:	bb 1f       	adc	r27, r27
    1982:	62 17       	cp	r22, r18
    1984:	73 07       	cpc	r23, r19
    1986:	84 07       	cpc	r24, r20
    1988:	ba 07       	cpc	r27, r26
    198a:	20 f0       	brcs	.+8      	; 0x1994 <__divsf3_pse+0xaa>
    198c:	62 1b       	sub	r22, r18
    198e:	73 0b       	sbc	r23, r19
    1990:	84 0b       	sbc	r24, r20
    1992:	ba 0b       	sbc	r27, r26
    1994:	ee 1f       	adc	r30, r30
    1996:	88 f7       	brcc	.-30     	; 0x197a <__divsf3_pse+0x90>
    1998:	e0 95       	com	r30
    199a:	08 95       	ret

0000199c <__fixsfsi>:
    199c:	04 d0       	rcall	.+8      	; 0x19a6 <__fixunssfsi>
    199e:	68 94       	set
    19a0:	b1 11       	cpse	r27, r1
    19a2:	17 c1       	rjmp	.+558    	; 0x1bd2 <__fp_szero>
    19a4:	08 95       	ret

000019a6 <__fixunssfsi>:
    19a6:	fa d0       	rcall	.+500    	; 0x1b9c <__fp_splitA>
    19a8:	88 f0       	brcs	.+34     	; 0x19cc <__fixunssfsi+0x26>
    19aa:	9f 57       	subi	r25, 0x7F	; 127
    19ac:	90 f0       	brcs	.+36     	; 0x19d2 <__fixunssfsi+0x2c>
    19ae:	b9 2f       	mov	r27, r25
    19b0:	99 27       	eor	r25, r25
    19b2:	b7 51       	subi	r27, 0x17	; 23
    19b4:	a0 f0       	brcs	.+40     	; 0x19de <__fixunssfsi+0x38>
    19b6:	d1 f0       	breq	.+52     	; 0x19ec <__fixunssfsi+0x46>
    19b8:	66 0f       	add	r22, r22
    19ba:	77 1f       	adc	r23, r23
    19bc:	88 1f       	adc	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	1a f0       	brmi	.+6      	; 0x19c8 <__fixunssfsi+0x22>
    19c2:	ba 95       	dec	r27
    19c4:	c9 f7       	brne	.-14     	; 0x19b8 <__fixunssfsi+0x12>
    19c6:	12 c0       	rjmp	.+36     	; 0x19ec <__fixunssfsi+0x46>
    19c8:	b1 30       	cpi	r27, 0x01	; 1
    19ca:	81 f0       	breq	.+32     	; 0x19ec <__fixunssfsi+0x46>
    19cc:	01 d1       	rcall	.+514    	; 0x1bd0 <__fp_zero>
    19ce:	b1 e0       	ldi	r27, 0x01	; 1
    19d0:	08 95       	ret
    19d2:	fe c0       	rjmp	.+508    	; 0x1bd0 <__fp_zero>
    19d4:	67 2f       	mov	r22, r23
    19d6:	78 2f       	mov	r23, r24
    19d8:	88 27       	eor	r24, r24
    19da:	b8 5f       	subi	r27, 0xF8	; 248
    19dc:	39 f0       	breq	.+14     	; 0x19ec <__fixunssfsi+0x46>
    19de:	b9 3f       	cpi	r27, 0xF9	; 249
    19e0:	cc f3       	brlt	.-14     	; 0x19d4 <__fixunssfsi+0x2e>
    19e2:	86 95       	lsr	r24
    19e4:	77 95       	ror	r23
    19e6:	67 95       	ror	r22
    19e8:	b3 95       	inc	r27
    19ea:	d9 f7       	brne	.-10     	; 0x19e2 <__fixunssfsi+0x3c>
    19ec:	3e f4       	brtc	.+14     	; 0x19fc <__fixunssfsi+0x56>
    19ee:	90 95       	com	r25
    19f0:	80 95       	com	r24
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	08 95       	ret

000019fe <__floatunsisf>:
    19fe:	e8 94       	clt
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <__floatsisf+0x12>

00001a02 <__floatsisf>:
    1a02:	97 fb       	bst	r25, 7
    1a04:	3e f4       	brtc	.+14     	; 0x1a14 <__floatsisf+0x12>
    1a06:	90 95       	com	r25
    1a08:	80 95       	com	r24
    1a0a:	70 95       	com	r23
    1a0c:	61 95       	neg	r22
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	8f 4f       	sbci	r24, 0xFF	; 255
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	99 23       	and	r25, r25
    1a16:	a9 f0       	breq	.+42     	; 0x1a42 <__floatsisf+0x40>
    1a18:	f9 2f       	mov	r31, r25
    1a1a:	96 e9       	ldi	r25, 0x96	; 150
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	93 95       	inc	r25
    1a20:	f6 95       	lsr	r31
    1a22:	87 95       	ror	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	b7 95       	ror	r27
    1a2a:	f1 11       	cpse	r31, r1
    1a2c:	f8 cf       	rjmp	.-16     	; 0x1a1e <__floatsisf+0x1c>
    1a2e:	fa f4       	brpl	.+62     	; 0x1a6e <__floatsisf+0x6c>
    1a30:	bb 0f       	add	r27, r27
    1a32:	11 f4       	brne	.+4      	; 0x1a38 <__floatsisf+0x36>
    1a34:	60 ff       	sbrs	r22, 0
    1a36:	1b c0       	rjmp	.+54     	; 0x1a6e <__floatsisf+0x6c>
    1a38:	6f 5f       	subi	r22, 0xFF	; 255
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	16 c0       	rjmp	.+44     	; 0x1a6e <__floatsisf+0x6c>
    1a42:	88 23       	and	r24, r24
    1a44:	11 f0       	breq	.+4      	; 0x1a4a <__floatsisf+0x48>
    1a46:	96 e9       	ldi	r25, 0x96	; 150
    1a48:	11 c0       	rjmp	.+34     	; 0x1a6c <__floatsisf+0x6a>
    1a4a:	77 23       	and	r23, r23
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <__floatsisf+0x54>
    1a4e:	9e e8       	ldi	r25, 0x8E	; 142
    1a50:	87 2f       	mov	r24, r23
    1a52:	76 2f       	mov	r23, r22
    1a54:	05 c0       	rjmp	.+10     	; 0x1a60 <__floatsisf+0x5e>
    1a56:	66 23       	and	r22, r22
    1a58:	71 f0       	breq	.+28     	; 0x1a76 <__floatsisf+0x74>
    1a5a:	96 e8       	ldi	r25, 0x86	; 134
    1a5c:	86 2f       	mov	r24, r22
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	2a f0       	brmi	.+10     	; 0x1a6e <__floatsisf+0x6c>
    1a64:	9a 95       	dec	r25
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	da f7       	brpl	.-10     	; 0x1a64 <__floatsisf+0x62>
    1a6e:	88 0f       	add	r24, r24
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret

00001a78 <__floatundisf>:
    1a78:	e8 94       	clt

00001a7a <__fp_di2sf>:
    1a7a:	f9 2f       	mov	r31, r25
    1a7c:	96 eb       	ldi	r25, 0xB6	; 182
    1a7e:	ff 23       	and	r31, r31
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <__fp_di2sf+0x28>
    1a82:	12 16       	cp	r1, r18
    1a84:	13 06       	cpc	r1, r19
    1a86:	14 06       	cpc	r1, r20
    1a88:	44 0b       	sbc	r20, r20
    1a8a:	93 95       	inc	r25
    1a8c:	f6 95       	lsr	r31
    1a8e:	87 95       	ror	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	57 95       	ror	r21
    1a96:	40 40       	sbci	r20, 0x00	; 0
    1a98:	ff 23       	and	r31, r31
    1a9a:	b9 f7       	brne	.-18     	; 0x1a8a <__fp_di2sf+0x10>
    1a9c:	1b c0       	rjmp	.+54     	; 0x1ad4 <__fp_di2sf+0x5a>
    1a9e:	99 27       	eor	r25, r25
    1aa0:	08 95       	ret
    1aa2:	88 23       	and	r24, r24
    1aa4:	51 f4       	brne	.+20     	; 0x1aba <__fp_di2sf+0x40>
    1aa6:	98 50       	subi	r25, 0x08	; 8
    1aa8:	d2 f7       	brpl	.-12     	; 0x1a9e <__fp_di2sf+0x24>
    1aaa:	87 2b       	or	r24, r23
    1aac:	76 2f       	mov	r23, r22
    1aae:	65 2f       	mov	r22, r21
    1ab0:	54 2f       	mov	r21, r20
    1ab2:	43 2f       	mov	r20, r19
    1ab4:	32 2f       	mov	r19, r18
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	b1 f3       	breq	.-20     	; 0x1aa6 <__fp_di2sf+0x2c>
    1aba:	12 16       	cp	r1, r18
    1abc:	13 06       	cpc	r1, r19
    1abe:	14 06       	cpc	r1, r20
    1ac0:	44 0b       	sbc	r20, r20
    1ac2:	88 23       	and	r24, r24
    1ac4:	3a f0       	brmi	.+14     	; 0x1ad4 <__fp_di2sf+0x5a>
    1ac6:	9a 95       	dec	r25
    1ac8:	44 0f       	add	r20, r20
    1aca:	55 1f       	adc	r21, r21
    1acc:	66 1f       	adc	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	ca f7       	brpl	.-14     	; 0x1ac6 <__fp_di2sf+0x4c>
    1ad4:	55 23       	and	r21, r21
    1ad6:	4a f4       	brpl	.+18     	; 0x1aea <__fp_di2sf+0x70>
    1ad8:	44 0f       	add	r20, r20
    1ada:	55 1f       	adc	r21, r21
    1adc:	11 f4       	brne	.+4      	; 0x1ae2 <__fp_di2sf+0x68>
    1ade:	60 ff       	sbrs	r22, 0
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <__fp_di2sf+0x70>
    1ae2:	6f 5f       	subi	r22, 0xFF	; 255
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	88 0f       	add	r24, r24
    1aec:	96 95       	lsr	r25
    1aee:	87 95       	ror	r24
    1af0:	97 f9       	bld	r25, 7
    1af2:	08 95       	ret

00001af4 <__fp_cmp>:
    1af4:	99 0f       	add	r25, r25
    1af6:	00 08       	sbc	r0, r0
    1af8:	55 0f       	add	r21, r21
    1afa:	aa 0b       	sbc	r26, r26
    1afc:	e0 e8       	ldi	r30, 0x80	; 128
    1afe:	fe ef       	ldi	r31, 0xFE	; 254
    1b00:	16 16       	cp	r1, r22
    1b02:	17 06       	cpc	r1, r23
    1b04:	e8 07       	cpc	r30, r24
    1b06:	f9 07       	cpc	r31, r25
    1b08:	c0 f0       	brcs	.+48     	; 0x1b3a <__fp_cmp+0x46>
    1b0a:	12 16       	cp	r1, r18
    1b0c:	13 06       	cpc	r1, r19
    1b0e:	e4 07       	cpc	r30, r20
    1b10:	f5 07       	cpc	r31, r21
    1b12:	98 f0       	brcs	.+38     	; 0x1b3a <__fp_cmp+0x46>
    1b14:	62 1b       	sub	r22, r18
    1b16:	73 0b       	sbc	r23, r19
    1b18:	84 0b       	sbc	r24, r20
    1b1a:	95 0b       	sbc	r25, r21
    1b1c:	39 f4       	brne	.+14     	; 0x1b2c <__fp_cmp+0x38>
    1b1e:	0a 26       	eor	r0, r26
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <__fp_cmp+0x46>
    1b22:	23 2b       	or	r18, r19
    1b24:	24 2b       	or	r18, r20
    1b26:	25 2b       	or	r18, r21
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <__fp_cmp+0x3e>
    1b2a:	08 95       	ret
    1b2c:	0a 26       	eor	r0, r26
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <__fp_cmp+0x3e>
    1b30:	a1 40       	sbci	r26, 0x01	; 1
    1b32:	a6 95       	lsr	r26
    1b34:	8f ef       	ldi	r24, 0xFF	; 255
    1b36:	81 1d       	adc	r24, r1
    1b38:	81 1d       	adc	r24, r1
    1b3a:	08 95       	ret

00001b3c <__fp_inf>:
    1b3c:	97 f9       	bld	r25, 7
    1b3e:	9f 67       	ori	r25, 0x7F	; 127
    1b40:	80 e8       	ldi	r24, 0x80	; 128
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	08 95       	ret

00001b48 <__fp_nan>:
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	80 ec       	ldi	r24, 0xC0	; 192
    1b4c:	08 95       	ret

00001b4e <__fp_pscA>:
    1b4e:	00 24       	eor	r0, r0
    1b50:	0a 94       	dec	r0
    1b52:	16 16       	cp	r1, r22
    1b54:	17 06       	cpc	r1, r23
    1b56:	18 06       	cpc	r1, r24
    1b58:	09 06       	cpc	r0, r25
    1b5a:	08 95       	ret

00001b5c <__fp_pscB>:
    1b5c:	00 24       	eor	r0, r0
    1b5e:	0a 94       	dec	r0
    1b60:	12 16       	cp	r1, r18
    1b62:	13 06       	cpc	r1, r19
    1b64:	14 06       	cpc	r1, r20
    1b66:	05 06       	cpc	r0, r21
    1b68:	08 95       	ret

00001b6a <__fp_round>:
    1b6a:	09 2e       	mov	r0, r25
    1b6c:	03 94       	inc	r0
    1b6e:	00 0c       	add	r0, r0
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <__fp_round+0xc>
    1b72:	88 23       	and	r24, r24
    1b74:	52 f0       	brmi	.+20     	; 0x1b8a <__fp_round+0x20>
    1b76:	bb 0f       	add	r27, r27
    1b78:	40 f4       	brcc	.+16     	; 0x1b8a <__fp_round+0x20>
    1b7a:	bf 2b       	or	r27, r31
    1b7c:	11 f4       	brne	.+4      	; 0x1b82 <__fp_round+0x18>
    1b7e:	60 ff       	sbrs	r22, 0
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <__fp_round+0x20>
    1b82:	6f 5f       	subi	r22, 0xFF	; 255
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	8f 4f       	sbci	r24, 0xFF	; 255
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	08 95       	ret

00001b8c <__fp_split3>:
    1b8c:	57 fd       	sbrc	r21, 7
    1b8e:	90 58       	subi	r25, 0x80	; 128
    1b90:	44 0f       	add	r20, r20
    1b92:	55 1f       	adc	r21, r21
    1b94:	59 f0       	breq	.+22     	; 0x1bac <__fp_splitA+0x10>
    1b96:	5f 3f       	cpi	r21, 0xFF	; 255
    1b98:	71 f0       	breq	.+28     	; 0x1bb6 <__fp_splitA+0x1a>
    1b9a:	47 95       	ror	r20

00001b9c <__fp_splitA>:
    1b9c:	88 0f       	add	r24, r24
    1b9e:	97 fb       	bst	r25, 7
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <__fp_splitA+0x20>
    1ba4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba6:	79 f0       	breq	.+30     	; 0x1bc6 <__fp_splitA+0x2a>
    1ba8:	87 95       	ror	r24
    1baa:	08 95       	ret
    1bac:	12 16       	cp	r1, r18
    1bae:	13 06       	cpc	r1, r19
    1bb0:	14 06       	cpc	r1, r20
    1bb2:	55 1f       	adc	r21, r21
    1bb4:	f2 cf       	rjmp	.-28     	; 0x1b9a <__fp_split3+0xe>
    1bb6:	46 95       	lsr	r20
    1bb8:	f1 df       	rcall	.-30     	; 0x1b9c <__fp_splitA>
    1bba:	08 c0       	rjmp	.+16     	; 0x1bcc <__fp_splitA+0x30>
    1bbc:	16 16       	cp	r1, r22
    1bbe:	17 06       	cpc	r1, r23
    1bc0:	18 06       	cpc	r1, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	f1 cf       	rjmp	.-30     	; 0x1ba8 <__fp_splitA+0xc>
    1bc6:	86 95       	lsr	r24
    1bc8:	71 05       	cpc	r23, r1
    1bca:	61 05       	cpc	r22, r1
    1bcc:	08 94       	sec
    1bce:	08 95       	ret

00001bd0 <__fp_zero>:
    1bd0:	e8 94       	clt

00001bd2 <__fp_szero>:
    1bd2:	bb 27       	eor	r27, r27
    1bd4:	66 27       	eor	r22, r22
    1bd6:	77 27       	eor	r23, r23
    1bd8:	cb 01       	movw	r24, r22
    1bda:	97 f9       	bld	r25, 7
    1bdc:	08 95       	ret

00001bde <__mulsf3>:
    1bde:	0b d0       	rcall	.+22     	; 0x1bf6 <__mulsf3x>
    1be0:	c4 cf       	rjmp	.-120    	; 0x1b6a <__fp_round>
    1be2:	b5 df       	rcall	.-150    	; 0x1b4e <__fp_pscA>
    1be4:	28 f0       	brcs	.+10     	; 0x1bf0 <__mulsf3+0x12>
    1be6:	ba df       	rcall	.-140    	; 0x1b5c <__fp_pscB>
    1be8:	18 f0       	brcs	.+6      	; 0x1bf0 <__mulsf3+0x12>
    1bea:	95 23       	and	r25, r21
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <__mulsf3+0x12>
    1bee:	a6 cf       	rjmp	.-180    	; 0x1b3c <__fp_inf>
    1bf0:	ab cf       	rjmp	.-170    	; 0x1b48 <__fp_nan>
    1bf2:	11 24       	eor	r1, r1
    1bf4:	ee cf       	rjmp	.-36     	; 0x1bd2 <__fp_szero>

00001bf6 <__mulsf3x>:
    1bf6:	ca df       	rcall	.-108    	; 0x1b8c <__fp_split3>
    1bf8:	a0 f3       	brcs	.-24     	; 0x1be2 <__mulsf3+0x4>

00001bfa <__mulsf3_pse>:
    1bfa:	95 9f       	mul	r25, r21
    1bfc:	d1 f3       	breq	.-12     	; 0x1bf2 <__mulsf3+0x14>
    1bfe:	95 0f       	add	r25, r21
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	55 1f       	adc	r21, r21
    1c04:	62 9f       	mul	r22, r18
    1c06:	f0 01       	movw	r30, r0
    1c08:	72 9f       	mul	r23, r18
    1c0a:	bb 27       	eor	r27, r27
    1c0c:	f0 0d       	add	r31, r0
    1c0e:	b1 1d       	adc	r27, r1
    1c10:	63 9f       	mul	r22, r19
    1c12:	aa 27       	eor	r26, r26
    1c14:	f0 0d       	add	r31, r0
    1c16:	b1 1d       	adc	r27, r1
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	64 9f       	mul	r22, r20
    1c1c:	66 27       	eor	r22, r22
    1c1e:	b0 0d       	add	r27, r0
    1c20:	a1 1d       	adc	r26, r1
    1c22:	66 1f       	adc	r22, r22
    1c24:	82 9f       	mul	r24, r18
    1c26:	22 27       	eor	r18, r18
    1c28:	b0 0d       	add	r27, r0
    1c2a:	a1 1d       	adc	r26, r1
    1c2c:	62 1f       	adc	r22, r18
    1c2e:	73 9f       	mul	r23, r19
    1c30:	b0 0d       	add	r27, r0
    1c32:	a1 1d       	adc	r26, r1
    1c34:	62 1f       	adc	r22, r18
    1c36:	83 9f       	mul	r24, r19
    1c38:	a0 0d       	add	r26, r0
    1c3a:	61 1d       	adc	r22, r1
    1c3c:	22 1f       	adc	r18, r18
    1c3e:	74 9f       	mul	r23, r20
    1c40:	33 27       	eor	r19, r19
    1c42:	a0 0d       	add	r26, r0
    1c44:	61 1d       	adc	r22, r1
    1c46:	23 1f       	adc	r18, r19
    1c48:	84 9f       	mul	r24, r20
    1c4a:	60 0d       	add	r22, r0
    1c4c:	21 1d       	adc	r18, r1
    1c4e:	82 2f       	mov	r24, r18
    1c50:	76 2f       	mov	r23, r22
    1c52:	6a 2f       	mov	r22, r26
    1c54:	11 24       	eor	r1, r1
    1c56:	9f 57       	subi	r25, 0x7F	; 127
    1c58:	50 40       	sbci	r21, 0x00	; 0
    1c5a:	8a f0       	brmi	.+34     	; 0x1c7e <__mulsf3_pse+0x84>
    1c5c:	e1 f0       	breq	.+56     	; 0x1c96 <__mulsf3_pse+0x9c>
    1c5e:	88 23       	and	r24, r24
    1c60:	4a f0       	brmi	.+18     	; 0x1c74 <__mulsf3_pse+0x7a>
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	bb 1f       	adc	r27, r27
    1c68:	66 1f       	adc	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	91 50       	subi	r25, 0x01	; 1
    1c70:	50 40       	sbci	r21, 0x00	; 0
    1c72:	a9 f7       	brne	.-22     	; 0x1c5e <__mulsf3_pse+0x64>
    1c74:	9e 3f       	cpi	r25, 0xFE	; 254
    1c76:	51 05       	cpc	r21, r1
    1c78:	70 f0       	brcs	.+28     	; 0x1c96 <__mulsf3_pse+0x9c>
    1c7a:	60 cf       	rjmp	.-320    	; 0x1b3c <__fp_inf>
    1c7c:	aa cf       	rjmp	.-172    	; 0x1bd2 <__fp_szero>
    1c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c80:	ec f3       	brlt	.-6      	; 0x1c7c <__mulsf3_pse+0x82>
    1c82:	98 3e       	cpi	r25, 0xE8	; 232
    1c84:	dc f3       	brlt	.-10     	; 0x1c7c <__mulsf3_pse+0x82>
    1c86:	86 95       	lsr	r24
    1c88:	77 95       	ror	r23
    1c8a:	67 95       	ror	r22
    1c8c:	b7 95       	ror	r27
    1c8e:	f7 95       	ror	r31
    1c90:	e7 95       	ror	r30
    1c92:	9f 5f       	subi	r25, 0xFF	; 255
    1c94:	c1 f7       	brne	.-16     	; 0x1c86 <__mulsf3_pse+0x8c>
    1c96:	fe 2b       	or	r31, r30
    1c98:	88 0f       	add	r24, r24
    1c9a:	91 1d       	adc	r25, r1
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	97 f9       	bld	r25, 7
    1ca2:	08 95       	ret

00001ca4 <pow>:
    1ca4:	fa 01       	movw	r30, r20
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	30 96       	adiw	r30, 0x00	; 0
    1cac:	21 05       	cpc	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	99 f1       	breq	.+102    	; 0x1d18 <pow+0x74>
    1cb2:	61 15       	cp	r22, r1
    1cb4:	71 05       	cpc	r23, r1
    1cb6:	61 f4       	brne	.+24     	; 0x1cd0 <pow+0x2c>
    1cb8:	80 38       	cpi	r24, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	9b 07       	cpc	r25, r27
    1cbe:	49 f1       	breq	.+82     	; 0x1d12 <pow+0x6e>
    1cc0:	68 94       	set
    1cc2:	90 38       	cpi	r25, 0x80	; 128
    1cc4:	81 05       	cpc	r24, r1
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <pow+0x3c>
    1cc8:	80 38       	cpi	r24, 0x80	; 128
    1cca:	bf ef       	ldi	r27, 0xFF	; 255
    1ccc:	9b 07       	cpc	r25, r27
    1cce:	41 f0       	breq	.+16     	; 0x1ce0 <pow+0x3c>
    1cd0:	99 23       	and	r25, r25
    1cd2:	42 f5       	brpl	.+80     	; 0x1d24 <pow+0x80>
    1cd4:	ff 3f       	cpi	r31, 0xFF	; 255
    1cd6:	e1 05       	cpc	r30, r1
    1cd8:	31 05       	cpc	r19, r1
    1cda:	21 05       	cpc	r18, r1
    1cdc:	11 f1       	breq	.+68     	; 0x1d22 <pow+0x7e>
    1cde:	e8 94       	clt
    1ce0:	08 94       	sec
    1ce2:	e7 95       	ror	r30
    1ce4:	d9 01       	movw	r26, r18
    1ce6:	aa 23       	and	r26, r26
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <pow+0x50>
    1cea:	ab 2f       	mov	r26, r27
    1cec:	be 2f       	mov	r27, r30
    1cee:	f8 5f       	subi	r31, 0xF8	; 248
    1cf0:	d0 f3       	brcs	.-12     	; 0x1ce6 <pow+0x42>
    1cf2:	10 c0       	rjmp	.+32     	; 0x1d14 <pow+0x70>
    1cf4:	ff 5f       	subi	r31, 0xFF	; 255
    1cf6:	70 f4       	brcc	.+28     	; 0x1d14 <pow+0x70>
    1cf8:	a6 95       	lsr	r26
    1cfa:	e0 f7       	brcc	.-8      	; 0x1cf4 <pow+0x50>
    1cfc:	f7 39       	cpi	r31, 0x97	; 151
    1cfe:	50 f0       	brcs	.+20     	; 0x1d14 <pow+0x70>
    1d00:	19 f0       	breq	.+6      	; 0x1d08 <pow+0x64>
    1d02:	ff 3a       	cpi	r31, 0xAF	; 175
    1d04:	38 f4       	brcc	.+14     	; 0x1d14 <pow+0x70>
    1d06:	9f 77       	andi	r25, 0x7F	; 127
    1d08:	9f 93       	push	r25
    1d0a:	0c d0       	rcall	.+24     	; 0x1d24 <pow+0x80>
    1d0c:	0f 90       	pop	r0
    1d0e:	07 fc       	sbrc	r0, 7
    1d10:	90 58       	subi	r25, 0x80	; 128
    1d12:	08 95       	ret
    1d14:	3e f0       	brts	.+14     	; 0x1d24 <pow+0x80>
    1d16:	18 cf       	rjmp	.-464    	; 0x1b48 <__fp_nan>
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	80 e8       	ldi	r24, 0x80	; 128
    1d1e:	9f e3       	ldi	r25, 0x3F	; 63
    1d20:	08 95       	ret
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	9f 77       	andi	r25, 0x7F	; 127
    1d26:	5f 93       	push	r21
    1d28:	4f 93       	push	r20
    1d2a:	3f 93       	push	r19
    1d2c:	2f 93       	push	r18
    1d2e:	f5 d0       	rcall	.+490    	; 0x1f1a <log>
    1d30:	2f 91       	pop	r18
    1d32:	3f 91       	pop	r19
    1d34:	4f 91       	pop	r20
    1d36:	5f 91       	pop	r21
    1d38:	52 df       	rcall	.-348    	; 0x1bde <__mulsf3>
    1d3a:	47 c0       	rjmp	.+142    	; 0x1dca <exp>
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <pow+0x9e>
    1d3e:	0e f4       	brtc	.+2      	; 0x1d42 <pow+0x9e>
    1d40:	03 cf       	rjmp	.-506    	; 0x1b48 <__fp_nan>
    1d42:	6f c0       	rjmp	.+222    	; 0x1e22 <__fp_mpack>

00001d44 <sqrt>:
    1d44:	2b df       	rcall	.-426    	; 0x1b9c <__fp_splitA>
    1d46:	d0 f3       	brcs	.-12     	; 0x1d3c <pow+0x98>
    1d48:	99 23       	and	r25, r25
    1d4a:	d9 f3       	breq	.-10     	; 0x1d42 <pow+0x9e>
    1d4c:	ce f3       	brts	.-14     	; 0x1d40 <pow+0x9c>
    1d4e:	9f 57       	subi	r25, 0x7F	; 127
    1d50:	55 0b       	sbc	r21, r21
    1d52:	87 ff       	sbrs	r24, 7
    1d54:	74 d0       	rcall	.+232    	; 0x1e3e <__fp_norm2>
    1d56:	00 24       	eor	r0, r0
    1d58:	a0 e6       	ldi	r26, 0x60	; 96
    1d5a:	40 ea       	ldi	r20, 0xA0	; 160
    1d5c:	90 01       	movw	r18, r0
    1d5e:	80 58       	subi	r24, 0x80	; 128
    1d60:	56 95       	lsr	r21
    1d62:	97 95       	ror	r25
    1d64:	28 f4       	brcc	.+10     	; 0x1d70 <sqrt+0x2c>
    1d66:	80 5c       	subi	r24, 0xC0	; 192
    1d68:	66 0f       	add	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	88 1f       	adc	r24, r24
    1d6e:	20 f0       	brcs	.+8      	; 0x1d78 <sqrt+0x34>
    1d70:	26 17       	cp	r18, r22
    1d72:	37 07       	cpc	r19, r23
    1d74:	48 07       	cpc	r20, r24
    1d76:	30 f4       	brcc	.+12     	; 0x1d84 <sqrt+0x40>
    1d78:	62 1b       	sub	r22, r18
    1d7a:	73 0b       	sbc	r23, r19
    1d7c:	84 0b       	sbc	r24, r20
    1d7e:	20 29       	or	r18, r0
    1d80:	31 29       	or	r19, r1
    1d82:	4a 2b       	or	r20, r26
    1d84:	a6 95       	lsr	r26
    1d86:	17 94       	ror	r1
    1d88:	07 94       	ror	r0
    1d8a:	20 25       	eor	r18, r0
    1d8c:	31 25       	eor	r19, r1
    1d8e:	4a 27       	eor	r20, r26
    1d90:	58 f7       	brcc	.-42     	; 0x1d68 <sqrt+0x24>
    1d92:	66 0f       	add	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	20 f0       	brcs	.+8      	; 0x1da2 <sqrt+0x5e>
    1d9a:	26 17       	cp	r18, r22
    1d9c:	37 07       	cpc	r19, r23
    1d9e:	48 07       	cpc	r20, r24
    1da0:	30 f4       	brcc	.+12     	; 0x1dae <sqrt+0x6a>
    1da2:	62 0b       	sbc	r22, r18
    1da4:	73 0b       	sbc	r23, r19
    1da6:	84 0b       	sbc	r24, r20
    1da8:	20 0d       	add	r18, r0
    1daa:	31 1d       	adc	r19, r1
    1dac:	41 1d       	adc	r20, r1
    1dae:	a0 95       	com	r26
    1db0:	81 f7       	brne	.-32     	; 0x1d92 <sqrt+0x4e>
    1db2:	b9 01       	movw	r22, r18
    1db4:	84 2f       	mov	r24, r20
    1db6:	91 58       	subi	r25, 0x81	; 129
    1db8:	88 0f       	add	r24, r24
    1dba:	96 95       	lsr	r25
    1dbc:	87 95       	ror	r24
    1dbe:	08 95       	ret
    1dc0:	19 f4       	brne	.+6      	; 0x1dc8 <sqrt+0x84>
    1dc2:	0e f0       	brts	.+2      	; 0x1dc6 <sqrt+0x82>
    1dc4:	bb ce       	rjmp	.-650    	; 0x1b3c <__fp_inf>
    1dc6:	04 cf       	rjmp	.-504    	; 0x1bd0 <__fp_zero>
    1dc8:	bf ce       	rjmp	.-642    	; 0x1b48 <__fp_nan>

00001dca <exp>:
    1dca:	e8 de       	rcall	.-560    	; 0x1b9c <__fp_splitA>
    1dcc:	c8 f3       	brcs	.-14     	; 0x1dc0 <sqrt+0x7c>
    1dce:	96 38       	cpi	r25, 0x86	; 134
    1dd0:	c0 f7       	brcc	.-16     	; 0x1dc2 <sqrt+0x7e>
    1dd2:	07 f8       	bld	r0, 7
    1dd4:	0f 92       	push	r0
    1dd6:	e8 94       	clt
    1dd8:	2b e3       	ldi	r18, 0x3B	; 59
    1dda:	3a ea       	ldi	r19, 0xAA	; 170
    1ddc:	48 eb       	ldi	r20, 0xB8	; 184
    1dde:	5f e7       	ldi	r21, 0x7F	; 127
    1de0:	0c df       	rcall	.-488    	; 0x1bfa <__mulsf3_pse>
    1de2:	0f 92       	push	r0
    1de4:	0f 92       	push	r0
    1de6:	0f 92       	push	r0
    1de8:	4d b7       	in	r20, 0x3d	; 61
    1dea:	5e b7       	in	r21, 0x3e	; 62
    1dec:	0f 92       	push	r0
    1dee:	d5 d0       	rcall	.+426    	; 0x1f9a <modf>
    1df0:	e8 e1       	ldi	r30, 0x18	; 24
    1df2:	f1 e0       	ldi	r31, 0x01	; 1
    1df4:	2b d0       	rcall	.+86     	; 0x1e4c <__fp_powser>
    1df6:	4f 91       	pop	r20
    1df8:	5f 91       	pop	r21
    1dfa:	ef 91       	pop	r30
    1dfc:	ff 91       	pop	r31
    1dfe:	e5 95       	asr	r30
    1e00:	ee 1f       	adc	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	49 f0       	breq	.+18     	; 0x1e18 <exp+0x4e>
    1e06:	fe 57       	subi	r31, 0x7E	; 126
    1e08:	e0 68       	ori	r30, 0x80	; 128
    1e0a:	44 27       	eor	r20, r20
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	44 1f       	adc	r20, r20
    1e10:	fa 95       	dec	r31
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <exp+0x42>
    1e14:	41 95       	neg	r20
    1e16:	55 0b       	sbc	r21, r21
    1e18:	47 d0       	rcall	.+142    	; 0x1ea8 <ldexp>
    1e1a:	0f 90       	pop	r0
    1e1c:	07 fe       	sbrs	r0, 7
    1e1e:	3b c0       	rjmp	.+118    	; 0x1e96 <inverse>
    1e20:	08 95       	ret

00001e22 <__fp_mpack>:
    1e22:	9f 3f       	cpi	r25, 0xFF	; 255
    1e24:	31 f0       	breq	.+12     	; 0x1e32 <__fp_mpack_finite+0xc>

00001e26 <__fp_mpack_finite>:
    1e26:	91 50       	subi	r25, 0x01	; 1
    1e28:	20 f4       	brcc	.+8      	; 0x1e32 <__fp_mpack_finite+0xc>
    1e2a:	87 95       	ror	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	88 0f       	add	r24, r24
    1e34:	91 1d       	adc	r25, r1
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	97 f9       	bld	r25, 7
    1e3c:	08 95       	ret

00001e3e <__fp_norm2>:
    1e3e:	91 50       	subi	r25, 0x01	; 1
    1e40:	50 40       	sbci	r21, 0x00	; 0
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	d2 f7       	brpl	.-12     	; 0x1e3e <__fp_norm2>
    1e4a:	08 95       	ret

00001e4c <__fp_powser>:
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	1f 93       	push	r17
    1e52:	0f 93       	push	r16
    1e54:	ff 92       	push	r15
    1e56:	ef 92       	push	r14
    1e58:	df 92       	push	r13
    1e5a:	7b 01       	movw	r14, r22
    1e5c:	8c 01       	movw	r16, r24
    1e5e:	68 94       	set
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <__fp_powser+0x20>
    1e62:	da 2e       	mov	r13, r26
    1e64:	ef 01       	movw	r28, r30
    1e66:	c7 de       	rcall	.-626    	; 0x1bf6 <__mulsf3x>
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e8 94       	clt
    1e6c:	a5 91       	lpm	r26, Z+
    1e6e:	25 91       	lpm	r18, Z+
    1e70:	35 91       	lpm	r19, Z+
    1e72:	45 91       	lpm	r20, Z+
    1e74:	55 91       	lpm	r21, Z+
    1e76:	ae f3       	brts	.-22     	; 0x1e62 <__fp_powser+0x16>
    1e78:	ef 01       	movw	r28, r30
    1e7a:	d1 dc       	rcall	.-1630   	; 0x181e <__addsf3x>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	97 01       	movw	r18, r14
    1e80:	a8 01       	movw	r20, r16
    1e82:	da 94       	dec	r13
    1e84:	79 f7       	brne	.-34     	; 0x1e64 <__fp_powser+0x18>
    1e86:	df 90       	pop	r13
    1e88:	ef 90       	pop	r14
    1e8a:	ff 90       	pop	r15
    1e8c:	0f 91       	pop	r16
    1e8e:	1f 91       	pop	r17
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <inverse>:
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	80 e8       	ldi	r24, 0x80	; 128
    1ea0:	9f e3       	ldi	r25, 0x3F	; 63
    1ea2:	14 cd       	rjmp	.-1496   	; 0x18cc <__divsf3>
    1ea4:	4b ce       	rjmp	.-874    	; 0x1b3c <__fp_inf>
    1ea6:	bd cf       	rjmp	.-134    	; 0x1e22 <__fp_mpack>

00001ea8 <ldexp>:
    1ea8:	79 de       	rcall	.-782    	; 0x1b9c <__fp_splitA>
    1eaa:	e8 f3       	brcs	.-6      	; 0x1ea6 <inverse+0x10>
    1eac:	99 23       	and	r25, r25
    1eae:	d9 f3       	breq	.-10     	; 0x1ea6 <inverse+0x10>
    1eb0:	94 0f       	add	r25, r20
    1eb2:	51 1d       	adc	r21, r1
    1eb4:	bb f3       	brvs	.-18     	; 0x1ea4 <inverse+0xe>
    1eb6:	91 50       	subi	r25, 0x01	; 1
    1eb8:	50 40       	sbci	r21, 0x00	; 0
    1eba:	94 f0       	brlt	.+36     	; 0x1ee0 <ldexp+0x38>
    1ebc:	59 f0       	breq	.+22     	; 0x1ed4 <ldexp+0x2c>
    1ebe:	88 23       	and	r24, r24
    1ec0:	32 f0       	brmi	.+12     	; 0x1ece <ldexp+0x26>
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	91 50       	subi	r25, 0x01	; 1
    1eca:	50 40       	sbci	r21, 0x00	; 0
    1ecc:	c1 f7       	brne	.-16     	; 0x1ebe <ldexp+0x16>
    1ece:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	44 f7       	brge	.-48     	; 0x1ea4 <inverse+0xe>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	91 1d       	adc	r25, r1
    1ed8:	96 95       	lsr	r25
    1eda:	87 95       	ror	r24
    1edc:	97 f9       	bld	r25, 7
    1ede:	08 95       	ret
    1ee0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee2:	ac f0       	brlt	.+42     	; 0x1f0e <ldexp+0x66>
    1ee4:	98 3e       	cpi	r25, 0xE8	; 232
    1ee6:	9c f0       	brlt	.+38     	; 0x1f0e <ldexp+0x66>
    1ee8:	bb 27       	eor	r27, r27
    1eea:	86 95       	lsr	r24
    1eec:	77 95       	ror	r23
    1eee:	67 95       	ror	r22
    1ef0:	b7 95       	ror	r27
    1ef2:	08 f4       	brcc	.+2      	; 0x1ef6 <ldexp+0x4e>
    1ef4:	b1 60       	ori	r27, 0x01	; 1
    1ef6:	93 95       	inc	r25
    1ef8:	c1 f7       	brne	.-16     	; 0x1eea <ldexp+0x42>
    1efa:	bb 0f       	add	r27, r27
    1efc:	58 f7       	brcc	.-42     	; 0x1ed4 <ldexp+0x2c>
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <ldexp+0x5c>
    1f00:	60 ff       	sbrs	r22, 0
    1f02:	e8 cf       	rjmp	.-48     	; 0x1ed4 <ldexp+0x2c>
    1f04:	6f 5f       	subi	r22, 0xFF	; 255
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	e3 cf       	rjmp	.-58     	; 0x1ed4 <ldexp+0x2c>
    1f0e:	61 ce       	rjmp	.-830    	; 0x1bd2 <__fp_szero>
    1f10:	0e f0       	brts	.+2      	; 0x1f14 <ldexp+0x6c>
    1f12:	87 cf       	rjmp	.-242    	; 0x1e22 <__fp_mpack>
    1f14:	19 ce       	rjmp	.-974    	; 0x1b48 <__fp_nan>
    1f16:	68 94       	set
    1f18:	11 ce       	rjmp	.-990    	; 0x1b3c <__fp_inf>

00001f1a <log>:
    1f1a:	40 de       	rcall	.-896    	; 0x1b9c <__fp_splitA>
    1f1c:	c8 f3       	brcs	.-14     	; 0x1f10 <ldexp+0x68>
    1f1e:	99 23       	and	r25, r25
    1f20:	d1 f3       	breq	.-12     	; 0x1f16 <ldexp+0x6e>
    1f22:	c6 f3       	brts	.-16     	; 0x1f14 <ldexp+0x6c>
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	1f 93       	push	r17
    1f2a:	0f 93       	push	r16
    1f2c:	ff 92       	push	r15
    1f2e:	c9 2f       	mov	r28, r25
    1f30:	dd 27       	eor	r29, r29
    1f32:	88 23       	and	r24, r24
    1f34:	2a f0       	brmi	.+10     	; 0x1f40 <log+0x26>
    1f36:	21 97       	sbiw	r28, 0x01	; 1
    1f38:	66 0f       	add	r22, r22
    1f3a:	77 1f       	adc	r23, r23
    1f3c:	88 1f       	adc	r24, r24
    1f3e:	da f7       	brpl	.-10     	; 0x1f36 <log+0x1c>
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f eb       	ldi	r21, 0xBF	; 191
    1f48:	9f e3       	ldi	r25, 0x3F	; 63
    1f4a:	88 39       	cpi	r24, 0x98	; 152
    1f4c:	20 f0       	brcs	.+8      	; 0x1f56 <log+0x3c>
    1f4e:	80 3e       	cpi	r24, 0xE0	; 224
    1f50:	30 f0       	brcs	.+12     	; 0x1f5e <log+0x44>
    1f52:	21 96       	adiw	r28, 0x01	; 1
    1f54:	8f 77       	andi	r24, 0x7F	; 127
    1f56:	52 dc       	rcall	.-1884   	; 0x17fc <__addsf3>
    1f58:	e0 e4       	ldi	r30, 0x40	; 64
    1f5a:	f1 e0       	ldi	r31, 0x01	; 1
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <log+0x4a>
    1f5e:	4e dc       	rcall	.-1892   	; 0x17fc <__addsf3>
    1f60:	ed e6       	ldi	r30, 0x6D	; 109
    1f62:	f1 e0       	ldi	r31, 0x01	; 1
    1f64:	73 df       	rcall	.-282    	; 0x1e4c <__fp_powser>
    1f66:	8b 01       	movw	r16, r22
    1f68:	be 01       	movw	r22, r28
    1f6a:	ec 01       	movw	r28, r24
    1f6c:	fb 2e       	mov	r15, r27
    1f6e:	6f 57       	subi	r22, 0x7F	; 127
    1f70:	71 09       	sbc	r23, r1
    1f72:	75 95       	asr	r23
    1f74:	77 1f       	adc	r23, r23
    1f76:	88 0b       	sbc	r24, r24
    1f78:	99 0b       	sbc	r25, r25
    1f7a:	43 dd       	rcall	.-1402   	; 0x1a02 <__floatsisf>
    1f7c:	28 e1       	ldi	r18, 0x18	; 24
    1f7e:	32 e7       	ldi	r19, 0x72	; 114
    1f80:	41 e3       	ldi	r20, 0x31	; 49
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	38 de       	rcall	.-912    	; 0x1bf6 <__mulsf3x>
    1f86:	af 2d       	mov	r26, r15
    1f88:	98 01       	movw	r18, r16
    1f8a:	ae 01       	movw	r20, r28
    1f8c:	ff 90       	pop	r15
    1f8e:	0f 91       	pop	r16
    1f90:	1f 91       	pop	r17
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	43 dc       	rcall	.-1914   	; 0x181e <__addsf3x>
    1f98:	e8 cd       	rjmp	.-1072   	; 0x1b6a <__fp_round>

00001f9a <modf>:
    1f9a:	fa 01       	movw	r30, r20
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	aa 0f       	add	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	9b 01       	movw	r18, r22
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	bf 57       	subi	r27, 0x7F	; 127
    1fa8:	28 f4       	brcc	.+10     	; 0x1fb4 <modf+0x1a>
    1faa:	22 27       	eor	r18, r18
    1fac:	33 27       	eor	r19, r19
    1fae:	44 27       	eor	r20, r20
    1fb0:	50 78       	andi	r21, 0x80	; 128
    1fb2:	1f c0       	rjmp	.+62     	; 0x1ff2 <modf+0x58>
    1fb4:	b7 51       	subi	r27, 0x17	; 23
    1fb6:	88 f4       	brcc	.+34     	; 0x1fda <modf+0x40>
    1fb8:	ab 2f       	mov	r26, r27
    1fba:	00 24       	eor	r0, r0
    1fbc:	46 95       	lsr	r20
    1fbe:	37 95       	ror	r19
    1fc0:	27 95       	ror	r18
    1fc2:	01 1c       	adc	r0, r1
    1fc4:	a3 95       	inc	r26
    1fc6:	d2 f3       	brmi	.-12     	; 0x1fbc <modf+0x22>
    1fc8:	00 20       	and	r0, r0
    1fca:	69 f0       	breq	.+26     	; 0x1fe6 <modf+0x4c>
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	44 1f       	adc	r20, r20
    1fd2:	b3 95       	inc	r27
    1fd4:	da f3       	brmi	.-10     	; 0x1fcc <modf+0x32>
    1fd6:	0d d0       	rcall	.+26     	; 0x1ff2 <modf+0x58>
    1fd8:	10 cc       	rjmp	.-2016   	; 0x17fa <__subsf3>
    1fda:	61 30       	cpi	r22, 0x01	; 1
    1fdc:	71 05       	cpc	r23, r1
    1fde:	a0 e8       	ldi	r26, 0x80	; 128
    1fe0:	8a 07       	cpc	r24, r26
    1fe2:	b9 46       	sbci	r27, 0x69	; 105
    1fe4:	30 f4       	brcc	.+12     	; 0x1ff2 <modf+0x58>
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	66 27       	eor	r22, r22
    1fec:	77 27       	eor	r23, r23
    1fee:	88 27       	eor	r24, r24
    1ff0:	90 78       	andi	r25, 0x80	; 128
    1ff2:	30 96       	adiw	r30, 0x00	; 0
    1ff4:	21 f0       	breq	.+8      	; 0x1ffe <modf+0x64>
    1ff6:	20 83       	st	Z, r18
    1ff8:	31 83       	std	Z+1, r19	; 0x01
    1ffa:	42 83       	std	Z+2, r20	; 0x02
    1ffc:	53 83       	std	Z+3, r21	; 0x03
    1ffe:	08 95       	ret

00002000 <__udivmodhi4>:
    2000:	aa 1b       	sub	r26, r26
    2002:	bb 1b       	sub	r27, r27
    2004:	51 e1       	ldi	r21, 0x11	; 17
    2006:	07 c0       	rjmp	.+14     	; 0x2016 <__udivmodhi4_ep>

00002008 <__udivmodhi4_loop>:
    2008:	aa 1f       	adc	r26, r26
    200a:	bb 1f       	adc	r27, r27
    200c:	a6 17       	cp	r26, r22
    200e:	b7 07       	cpc	r27, r23
    2010:	10 f0       	brcs	.+4      	; 0x2016 <__udivmodhi4_ep>
    2012:	a6 1b       	sub	r26, r22
    2014:	b7 0b       	sbc	r27, r23

00002016 <__udivmodhi4_ep>:
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	5a 95       	dec	r21
    201c:	a9 f7       	brne	.-22     	; 0x2008 <__udivmodhi4_loop>
    201e:	80 95       	com	r24
    2020:	90 95       	com	r25
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	08 95       	ret

00002028 <__udivmodsi4>:
    2028:	a1 e2       	ldi	r26, 0x21	; 33
    202a:	1a 2e       	mov	r1, r26
    202c:	aa 1b       	sub	r26, r26
    202e:	bb 1b       	sub	r27, r27
    2030:	fd 01       	movw	r30, r26
    2032:	0d c0       	rjmp	.+26     	; 0x204e <__udivmodsi4_ep>

00002034 <__udivmodsi4_loop>:
    2034:	aa 1f       	adc	r26, r26
    2036:	bb 1f       	adc	r27, r27
    2038:	ee 1f       	adc	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	a2 17       	cp	r26, r18
    203e:	b3 07       	cpc	r27, r19
    2040:	e4 07       	cpc	r30, r20
    2042:	f5 07       	cpc	r31, r21
    2044:	20 f0       	brcs	.+8      	; 0x204e <__udivmodsi4_ep>
    2046:	a2 1b       	sub	r26, r18
    2048:	b3 0b       	sbc	r27, r19
    204a:	e4 0b       	sbc	r30, r20
    204c:	f5 0b       	sbc	r31, r21

0000204e <__udivmodsi4_ep>:
    204e:	66 1f       	adc	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	88 1f       	adc	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	1a 94       	dec	r1
    2058:	69 f7       	brne	.-38     	; 0x2034 <__udivmodsi4_loop>
    205a:	60 95       	com	r22
    205c:	70 95       	com	r23
    205e:	80 95       	com	r24
    2060:	90 95       	com	r25
    2062:	9b 01       	movw	r18, r22
    2064:	ac 01       	movw	r20, r24
    2066:	bd 01       	movw	r22, r26
    2068:	cf 01       	movw	r24, r30
    206a:	08 95       	ret

0000206c <__tablejump2__>:
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	88 1f       	adc	r24, r24
    2072:	8b bf       	out	0x3b, r24	; 59
    2074:	07 90       	elpm	r0, Z+
    2076:	f6 91       	elpm	r31, Z
    2078:	e0 2d       	mov	r30, r0
    207a:	19 94       	eijmp

0000207c <__muluhisi3>:
    207c:	d1 d0       	rcall	.+418    	; 0x2220 <__umulhisi3>
    207e:	a5 9f       	mul	r26, r21
    2080:	90 0d       	add	r25, r0
    2082:	b4 9f       	mul	r27, r20
    2084:	90 0d       	add	r25, r0
    2086:	a4 9f       	mul	r26, r20
    2088:	80 0d       	add	r24, r0
    208a:	91 1d       	adc	r25, r1
    208c:	11 24       	eor	r1, r1
    208e:	08 95       	ret

00002090 <__umoddi3>:
    2090:	68 94       	set
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <__udivdi3_umoddi3>

00002094 <__udivdi3>:
    2094:	e8 94       	clt

00002096 <__udivdi3_umoddi3>:
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	05 d0       	rcall	.+10     	; 0x20aa <__udivmod64>
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	9f 90       	pop	r9
    20a6:	8f 90       	pop	r8
    20a8:	08 95       	ret

000020aa <__udivmod64>:
    20aa:	88 24       	eor	r8, r8
    20ac:	99 24       	eor	r9, r9
    20ae:	f4 01       	movw	r30, r8
    20b0:	e4 01       	movw	r28, r8
    20b2:	b0 e4       	ldi	r27, 0x40	; 64
    20b4:	9f 93       	push	r25
    20b6:	aa 27       	eor	r26, r26
    20b8:	9a 15       	cp	r25, r10
    20ba:	8b 04       	cpc	r8, r11
    20bc:	9c 04       	cpc	r9, r12
    20be:	ed 05       	cpc	r30, r13
    20c0:	fe 05       	cpc	r31, r14
    20c2:	cf 05       	cpc	r28, r15
    20c4:	d0 07       	cpc	r29, r16
    20c6:	a1 07       	cpc	r26, r17
    20c8:	98 f4       	brcc	.+38     	; 0x20f0 <__udivmod64+0x46>
    20ca:	ad 2f       	mov	r26, r29
    20cc:	dc 2f       	mov	r29, r28
    20ce:	cf 2f       	mov	r28, r31
    20d0:	fe 2f       	mov	r31, r30
    20d2:	e9 2d       	mov	r30, r9
    20d4:	98 2c       	mov	r9, r8
    20d6:	89 2e       	mov	r8, r25
    20d8:	98 2f       	mov	r25, r24
    20da:	87 2f       	mov	r24, r23
    20dc:	76 2f       	mov	r23, r22
    20de:	65 2f       	mov	r22, r21
    20e0:	54 2f       	mov	r21, r20
    20e2:	43 2f       	mov	r20, r19
    20e4:	32 2f       	mov	r19, r18
    20e6:	22 27       	eor	r18, r18
    20e8:	b8 50       	subi	r27, 0x08	; 8
    20ea:	31 f7       	brne	.-52     	; 0x20b8 <__udivmod64+0xe>
    20ec:	bf 91       	pop	r27
    20ee:	27 c0       	rjmp	.+78     	; 0x213e <__udivmod64+0x94>
    20f0:	1b 2e       	mov	r1, r27
    20f2:	bf 91       	pop	r27
    20f4:	bb 27       	eor	r27, r27
    20f6:	22 0f       	add	r18, r18
    20f8:	33 1f       	adc	r19, r19
    20fa:	44 1f       	adc	r20, r20
    20fc:	55 1f       	adc	r21, r21
    20fe:	66 1f       	adc	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	88 1f       	adc	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	88 1c       	adc	r8, r8
    2108:	99 1c       	adc	r9, r9
    210a:	ee 1f       	adc	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	cc 1f       	adc	r28, r28
    2110:	dd 1f       	adc	r29, r29
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	8a 14       	cp	r8, r10
    2118:	9b 04       	cpc	r9, r11
    211a:	ec 05       	cpc	r30, r12
    211c:	fd 05       	cpc	r31, r13
    211e:	ce 05       	cpc	r28, r14
    2120:	df 05       	cpc	r29, r15
    2122:	a0 07       	cpc	r26, r16
    2124:	b1 07       	cpc	r27, r17
    2126:	48 f0       	brcs	.+18     	; 0x213a <__udivmod64+0x90>
    2128:	8a 18       	sub	r8, r10
    212a:	9b 08       	sbc	r9, r11
    212c:	ec 09       	sbc	r30, r12
    212e:	fd 09       	sbc	r31, r13
    2130:	ce 09       	sbc	r28, r14
    2132:	df 09       	sbc	r29, r15
    2134:	a0 0b       	sbc	r26, r16
    2136:	b1 0b       	sbc	r27, r17
    2138:	21 60       	ori	r18, 0x01	; 1
    213a:	1a 94       	dec	r1
    213c:	e1 f6       	brne	.-72     	; 0x20f6 <__udivmod64+0x4c>
    213e:	2e f4       	brtc	.+10     	; 0x214a <__udivmod64+0xa0>
    2140:	94 01       	movw	r18, r8
    2142:	af 01       	movw	r20, r30
    2144:	be 01       	movw	r22, r28
    2146:	cd 01       	movw	r24, r26
    2148:	00 0c       	add	r0, r0
    214a:	08 95       	ret

0000214c <__ashldi3>:
    214c:	0f 93       	push	r16
    214e:	08 30       	cpi	r16, 0x08	; 8
    2150:	90 f0       	brcs	.+36     	; 0x2176 <__ashldi3+0x2a>
    2152:	98 2f       	mov	r25, r24
    2154:	87 2f       	mov	r24, r23
    2156:	76 2f       	mov	r23, r22
    2158:	65 2f       	mov	r22, r21
    215a:	54 2f       	mov	r21, r20
    215c:	43 2f       	mov	r20, r19
    215e:	32 2f       	mov	r19, r18
    2160:	22 27       	eor	r18, r18
    2162:	08 50       	subi	r16, 0x08	; 8
    2164:	f4 cf       	rjmp	.-24     	; 0x214e <__ashldi3+0x2>
    2166:	22 0f       	add	r18, r18
    2168:	33 1f       	adc	r19, r19
    216a:	44 1f       	adc	r20, r20
    216c:	55 1f       	adc	r21, r21
    216e:	66 1f       	adc	r22, r22
    2170:	77 1f       	adc	r23, r23
    2172:	88 1f       	adc	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	0a 95       	dec	r16
    2178:	b2 f7       	brpl	.-20     	; 0x2166 <__ashldi3+0x1a>
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret

0000217e <__ashrdi3>:
    217e:	97 fb       	bst	r25, 7
    2180:	10 f8       	bld	r1, 0

00002182 <__lshrdi3>:
    2182:	16 94       	lsr	r1
    2184:	00 08       	sbc	r0, r0
    2186:	0f 93       	push	r16
    2188:	08 30       	cpi	r16, 0x08	; 8
    218a:	98 f0       	brcs	.+38     	; 0x21b2 <__lshrdi3+0x30>
    218c:	08 50       	subi	r16, 0x08	; 8
    218e:	23 2f       	mov	r18, r19
    2190:	34 2f       	mov	r19, r20
    2192:	45 2f       	mov	r20, r21
    2194:	56 2f       	mov	r21, r22
    2196:	67 2f       	mov	r22, r23
    2198:	78 2f       	mov	r23, r24
    219a:	89 2f       	mov	r24, r25
    219c:	90 2d       	mov	r25, r0
    219e:	f4 cf       	rjmp	.-24     	; 0x2188 <__lshrdi3+0x6>
    21a0:	05 94       	asr	r0
    21a2:	97 95       	ror	r25
    21a4:	87 95       	ror	r24
    21a6:	77 95       	ror	r23
    21a8:	67 95       	ror	r22
    21aa:	57 95       	ror	r21
    21ac:	47 95       	ror	r20
    21ae:	37 95       	ror	r19
    21b0:	27 95       	ror	r18
    21b2:	0a 95       	dec	r16
    21b4:	aa f7       	brpl	.-22     	; 0x21a0 <__lshrdi3+0x1e>
    21b6:	0f 91       	pop	r16
    21b8:	08 95       	ret

000021ba <__adddi3>:
    21ba:	2a 0d       	add	r18, r10
    21bc:	3b 1d       	adc	r19, r11
    21be:	4c 1d       	adc	r20, r12
    21c0:	5d 1d       	adc	r21, r13
    21c2:	6e 1d       	adc	r22, r14
    21c4:	7f 1d       	adc	r23, r15
    21c6:	80 1f       	adc	r24, r16
    21c8:	91 1f       	adc	r25, r17
    21ca:	08 95       	ret

000021cc <__adddi3_s8>:
    21cc:	00 24       	eor	r0, r0
    21ce:	a7 fd       	sbrc	r26, 7
    21d0:	00 94       	com	r0
    21d2:	2a 0f       	add	r18, r26
    21d4:	30 1d       	adc	r19, r0
    21d6:	40 1d       	adc	r20, r0
    21d8:	50 1d       	adc	r21, r0
    21da:	60 1d       	adc	r22, r0
    21dc:	70 1d       	adc	r23, r0
    21de:	80 1d       	adc	r24, r0
    21e0:	90 1d       	adc	r25, r0
    21e2:	08 95       	ret

000021e4 <__subdi3>:
    21e4:	2a 19       	sub	r18, r10
    21e6:	3b 09       	sbc	r19, r11
    21e8:	4c 09       	sbc	r20, r12
    21ea:	5d 09       	sbc	r21, r13
    21ec:	6e 09       	sbc	r22, r14
    21ee:	7f 09       	sbc	r23, r15
    21f0:	80 0b       	sbc	r24, r16
    21f2:	91 0b       	sbc	r25, r17
    21f4:	08 95       	ret

000021f6 <__cmpdi2>:
    21f6:	2a 15       	cp	r18, r10
    21f8:	3b 05       	cpc	r19, r11
    21fa:	4c 05       	cpc	r20, r12
    21fc:	5d 05       	cpc	r21, r13
    21fe:	6e 05       	cpc	r22, r14
    2200:	7f 05       	cpc	r23, r15
    2202:	80 07       	cpc	r24, r16
    2204:	91 07       	cpc	r25, r17
    2206:	08 95       	ret

00002208 <__cmpdi2_s8>:
    2208:	00 24       	eor	r0, r0
    220a:	a7 fd       	sbrc	r26, 7
    220c:	00 94       	com	r0
    220e:	2a 17       	cp	r18, r26
    2210:	30 05       	cpc	r19, r0
    2212:	40 05       	cpc	r20, r0
    2214:	50 05       	cpc	r21, r0
    2216:	60 05       	cpc	r22, r0
    2218:	70 05       	cpc	r23, r0
    221a:	80 05       	cpc	r24, r0
    221c:	90 05       	cpc	r25, r0
    221e:	08 95       	ret

00002220 <__umulhisi3>:
    2220:	a2 9f       	mul	r26, r18
    2222:	b0 01       	movw	r22, r0
    2224:	b3 9f       	mul	r27, r19
    2226:	c0 01       	movw	r24, r0
    2228:	a3 9f       	mul	r26, r19
    222a:	70 0d       	add	r23, r0
    222c:	81 1d       	adc	r24, r1
    222e:	11 24       	eor	r1, r1
    2230:	91 1d       	adc	r25, r1
    2232:	b2 9f       	mul	r27, r18
    2234:	70 0d       	add	r23, r0
    2236:	81 1d       	adc	r24, r1
    2238:	11 24       	eor	r1, r1
    223a:	91 1d       	adc	r25, r1
    223c:	08 95       	ret

0000223e <__itoa_ncheck>:
    223e:	bb 27       	eor	r27, r27
    2240:	4a 30       	cpi	r20, 0x0A	; 10
    2242:	31 f4       	brne	.+12     	; 0x2250 <__itoa_ncheck+0x12>
    2244:	99 23       	and	r25, r25
    2246:	22 f4       	brpl	.+8      	; 0x2250 <__itoa_ncheck+0x12>
    2248:	bd e2       	ldi	r27, 0x2D	; 45
    224a:	90 95       	com	r25
    224c:	81 95       	neg	r24
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <__utoa_common>

00002252 <__utoa_ncheck>:
    2252:	bb 27       	eor	r27, r27

00002254 <__utoa_common>:
    2254:	fb 01       	movw	r30, r22
    2256:	55 27       	eor	r21, r21
    2258:	aa 27       	eor	r26, r26
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	aa 1f       	adc	r26, r26
    2260:	a4 17       	cp	r26, r20
    2262:	10 f0       	brcs	.+4      	; 0x2268 <__utoa_common+0x14>
    2264:	a4 1b       	sub	r26, r20
    2266:	83 95       	inc	r24
    2268:	50 51       	subi	r21, 0x10	; 16
    226a:	b9 f7       	brne	.-18     	; 0x225a <__utoa_common+0x6>
    226c:	a0 5d       	subi	r26, 0xD0	; 208
    226e:	aa 33       	cpi	r26, 0x3A	; 58
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__utoa_common+0x20>
    2272:	a9 5d       	subi	r26, 0xD9	; 217
    2274:	a1 93       	st	Z+, r26
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	79 f7       	brne	.-34     	; 0x2258 <__utoa_common+0x4>
    227a:	b1 11       	cpse	r27, r1
    227c:	b1 93       	st	Z+, r27
    227e:	11 92       	st	Z+, r1
    2280:	cb 01       	movw	r24, r22
    2282:	00 c0       	rjmp	.+0      	; 0x2284 <strrev>

00002284 <strrev>:
    2284:	dc 01       	movw	r26, r24
    2286:	fc 01       	movw	r30, r24
    2288:	67 2f       	mov	r22, r23
    228a:	71 91       	ld	r23, Z+
    228c:	77 23       	and	r23, r23
    228e:	e1 f7       	brne	.-8      	; 0x2288 <strrev+0x4>
    2290:	32 97       	sbiw	r30, 0x02	; 2
    2292:	04 c0       	rjmp	.+8      	; 0x229c <strrev+0x18>
    2294:	7c 91       	ld	r23, X
    2296:	6d 93       	st	X+, r22
    2298:	70 83       	st	Z, r23
    229a:	62 91       	ld	r22, -Z
    229c:	ae 17       	cp	r26, r30
    229e:	bf 07       	cpc	r27, r31
    22a0:	c8 f3       	brcs	.-14     	; 0x2294 <strrev+0x10>
    22a2:	08 95       	ret

000022a4 <_exit>:
    22a4:	f8 94       	cli

000022a6 <__stop_program>:
    22a6:	ff cf       	rjmp	.-2      	; 0x22a6 <__stop_program>
=======
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <__subsf3>:
    142e:	50 58       	subi	r21, 0x80	; 128

00001430 <__addsf3>:
    1430:	bb 27       	eor	r27, r27
    1432:	aa 27       	eor	r26, r26
    1434:	0e d0       	rcall	.+28     	; 0x1452 <__addsf3x>
    1436:	e5 c0       	rjmp	.+458    	; 0x1602 <__fp_round>
    1438:	d6 d0       	rcall	.+428    	; 0x15e6 <__fp_pscA>
    143a:	30 f0       	brcs	.+12     	; 0x1448 <__addsf3+0x18>
    143c:	db d0       	rcall	.+438    	; 0x15f4 <__fp_pscB>
    143e:	20 f0       	brcs	.+8      	; 0x1448 <__addsf3+0x18>
    1440:	31 f4       	brne	.+12     	; 0x144e <__addsf3+0x1e>
    1442:	9f 3f       	cpi	r25, 0xFF	; 255
    1444:	11 f4       	brne	.+4      	; 0x144a <__addsf3+0x1a>
    1446:	1e f4       	brtc	.+6      	; 0x144e <__addsf3+0x1e>
    1448:	cb c0       	rjmp	.+406    	; 0x15e0 <__fp_nan>
    144a:	0e f4       	brtc	.+2      	; 0x144e <__addsf3+0x1e>
    144c:	e0 95       	com	r30
    144e:	e7 fb       	bst	r30, 7
    1450:	c1 c0       	rjmp	.+386    	; 0x15d4 <__fp_inf>

00001452 <__addsf3x>:
    1452:	e9 2f       	mov	r30, r25
    1454:	e7 d0       	rcall	.+462    	; 0x1624 <__fp_split3>
    1456:	80 f3       	brcs	.-32     	; 0x1438 <__addsf3+0x8>
    1458:	ba 17       	cp	r27, r26
    145a:	62 07       	cpc	r22, r18
    145c:	73 07       	cpc	r23, r19
    145e:	84 07       	cpc	r24, r20
    1460:	95 07       	cpc	r25, r21
    1462:	18 f0       	brcs	.+6      	; 0x146a <__addsf3x+0x18>
    1464:	71 f4       	brne	.+28     	; 0x1482 <__addsf3x+0x30>
    1466:	9e f5       	brtc	.+102    	; 0x14ce <__addsf3x+0x7c>
    1468:	ff c0       	rjmp	.+510    	; 0x1668 <__fp_zero>
    146a:	0e f4       	brtc	.+2      	; 0x146e <__addsf3x+0x1c>
    146c:	e0 95       	com	r30
    146e:	0b 2e       	mov	r0, r27
    1470:	ba 2f       	mov	r27, r26
    1472:	a0 2d       	mov	r26, r0
    1474:	0b 01       	movw	r0, r22
    1476:	b9 01       	movw	r22, r18
    1478:	90 01       	movw	r18, r0
    147a:	0c 01       	movw	r0, r24
    147c:	ca 01       	movw	r24, r20
    147e:	a0 01       	movw	r20, r0
    1480:	11 24       	eor	r1, r1
    1482:	ff 27       	eor	r31, r31
    1484:	59 1b       	sub	r21, r25
    1486:	99 f0       	breq	.+38     	; 0x14ae <__addsf3x+0x5c>
    1488:	59 3f       	cpi	r21, 0xF9	; 249
    148a:	50 f4       	brcc	.+20     	; 0x14a0 <__addsf3x+0x4e>
    148c:	50 3e       	cpi	r21, 0xE0	; 224
    148e:	68 f1       	brcs	.+90     	; 0x14ea <__addsf3x+0x98>
    1490:	1a 16       	cp	r1, r26
    1492:	f0 40       	sbci	r31, 0x00	; 0
    1494:	a2 2f       	mov	r26, r18
    1496:	23 2f       	mov	r18, r19
    1498:	34 2f       	mov	r19, r20
    149a:	44 27       	eor	r20, r20
    149c:	58 5f       	subi	r21, 0xF8	; 248
    149e:	f3 cf       	rjmp	.-26     	; 0x1486 <__addsf3x+0x34>
    14a0:	46 95       	lsr	r20
    14a2:	37 95       	ror	r19
    14a4:	27 95       	ror	r18
    14a6:	a7 95       	ror	r26
    14a8:	f0 40       	sbci	r31, 0x00	; 0
    14aa:	53 95       	inc	r21
    14ac:	c9 f7       	brne	.-14     	; 0x14a0 <__addsf3x+0x4e>
    14ae:	7e f4       	brtc	.+30     	; 0x14ce <__addsf3x+0x7c>
    14b0:	1f 16       	cp	r1, r31
    14b2:	ba 0b       	sbc	r27, r26
    14b4:	62 0b       	sbc	r22, r18
    14b6:	73 0b       	sbc	r23, r19
    14b8:	84 0b       	sbc	r24, r20
    14ba:	ba f0       	brmi	.+46     	; 0x14ea <__addsf3x+0x98>
    14bc:	91 50       	subi	r25, 0x01	; 1
    14be:	a1 f0       	breq	.+40     	; 0x14e8 <__addsf3x+0x96>
    14c0:	ff 0f       	add	r31, r31
    14c2:	bb 1f       	adc	r27, r27
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	c2 f7       	brpl	.-16     	; 0x14bc <__addsf3x+0x6a>
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <__addsf3x+0x98>
    14ce:	ba 0f       	add	r27, r26
    14d0:	62 1f       	adc	r22, r18
    14d2:	73 1f       	adc	r23, r19
    14d4:	84 1f       	adc	r24, r20
    14d6:	48 f4       	brcc	.+18     	; 0x14ea <__addsf3x+0x98>
    14d8:	87 95       	ror	r24
    14da:	77 95       	ror	r23
    14dc:	67 95       	ror	r22
    14de:	b7 95       	ror	r27
    14e0:	f7 95       	ror	r31
    14e2:	9e 3f       	cpi	r25, 0xFE	; 254
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <__addsf3x+0x96>
    14e6:	b3 cf       	rjmp	.-154    	; 0x144e <__addsf3+0x1e>
    14e8:	93 95       	inc	r25
    14ea:	88 0f       	add	r24, r24
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <__addsf3x+0x9e>
    14ee:	99 27       	eor	r25, r25
    14f0:	ee 0f       	add	r30, r30
    14f2:	97 95       	ror	r25
    14f4:	87 95       	ror	r24
    14f6:	08 95       	ret

000014f8 <__fixsfsi>:
    14f8:	04 d0       	rcall	.+8      	; 0x1502 <__fixunssfsi>
    14fa:	68 94       	set
    14fc:	b1 11       	cpse	r27, r1
    14fe:	b5 c0       	rjmp	.+362    	; 0x166a <__fp_szero>
    1500:	08 95       	ret

00001502 <__fixunssfsi>:
    1502:	98 d0       	rcall	.+304    	; 0x1634 <__fp_splitA>
    1504:	88 f0       	brcs	.+34     	; 0x1528 <__fixunssfsi+0x26>
    1506:	9f 57       	subi	r25, 0x7F	; 127
    1508:	90 f0       	brcs	.+36     	; 0x152e <__fixunssfsi+0x2c>
    150a:	b9 2f       	mov	r27, r25
    150c:	99 27       	eor	r25, r25
    150e:	b7 51       	subi	r27, 0x17	; 23
    1510:	a0 f0       	brcs	.+40     	; 0x153a <__fixunssfsi+0x38>
    1512:	d1 f0       	breq	.+52     	; 0x1548 <__fixunssfsi+0x46>
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	1a f0       	brmi	.+6      	; 0x1524 <__fixunssfsi+0x22>
    151e:	ba 95       	dec	r27
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__fixunssfsi+0x12>
    1522:	12 c0       	rjmp	.+36     	; 0x1548 <__fixunssfsi+0x46>
    1524:	b1 30       	cpi	r27, 0x01	; 1
    1526:	81 f0       	breq	.+32     	; 0x1548 <__fixunssfsi+0x46>
    1528:	9f d0       	rcall	.+318    	; 0x1668 <__fp_zero>
    152a:	b1 e0       	ldi	r27, 0x01	; 1
    152c:	08 95       	ret
    152e:	9c c0       	rjmp	.+312    	; 0x1668 <__fp_zero>
    1530:	67 2f       	mov	r22, r23
    1532:	78 2f       	mov	r23, r24
    1534:	88 27       	eor	r24, r24
    1536:	b8 5f       	subi	r27, 0xF8	; 248
    1538:	39 f0       	breq	.+14     	; 0x1548 <__fixunssfsi+0x46>
    153a:	b9 3f       	cpi	r27, 0xF9	; 249
    153c:	cc f3       	brlt	.-14     	; 0x1530 <__fixunssfsi+0x2e>
    153e:	86 95       	lsr	r24
    1540:	77 95       	ror	r23
    1542:	67 95       	ror	r22
    1544:	b3 95       	inc	r27
    1546:	d9 f7       	brne	.-10     	; 0x153e <__fixunssfsi+0x3c>
    1548:	3e f4       	brtc	.+14     	; 0x1558 <__fixunssfsi+0x56>
    154a:	90 95       	com	r25
    154c:	80 95       	com	r24
    154e:	70 95       	com	r23
    1550:	61 95       	neg	r22
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__floatunsisf>:
    155a:	e8 94       	clt
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <__floatsisf+0x12>

0000155e <__floatsisf>:
    155e:	97 fb       	bst	r25, 7
    1560:	3e f4       	brtc	.+14     	; 0x1570 <__floatsisf+0x12>
    1562:	90 95       	com	r25
    1564:	80 95       	com	r24
    1566:	70 95       	com	r23
    1568:	61 95       	neg	r22
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	99 23       	and	r25, r25
    1572:	a9 f0       	breq	.+42     	; 0x159e <__floatsisf+0x40>
    1574:	f9 2f       	mov	r31, r25
    1576:	96 e9       	ldi	r25, 0x96	; 150
    1578:	bb 27       	eor	r27, r27
    157a:	93 95       	inc	r25
    157c:	f6 95       	lsr	r31
    157e:	87 95       	ror	r24
    1580:	77 95       	ror	r23
    1582:	67 95       	ror	r22
    1584:	b7 95       	ror	r27
    1586:	f1 11       	cpse	r31, r1
    1588:	f8 cf       	rjmp	.-16     	; 0x157a <__floatsisf+0x1c>
    158a:	fa f4       	brpl	.+62     	; 0x15ca <__floatsisf+0x6c>
    158c:	bb 0f       	add	r27, r27
    158e:	11 f4       	brne	.+4      	; 0x1594 <__floatsisf+0x36>
    1590:	60 ff       	sbrs	r22, 0
    1592:	1b c0       	rjmp	.+54     	; 0x15ca <__floatsisf+0x6c>
    1594:	6f 5f       	subi	r22, 0xFF	; 255
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	16 c0       	rjmp	.+44     	; 0x15ca <__floatsisf+0x6c>
    159e:	88 23       	and	r24, r24
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <__floatsisf+0x48>
    15a2:	96 e9       	ldi	r25, 0x96	; 150
    15a4:	11 c0       	rjmp	.+34     	; 0x15c8 <__floatsisf+0x6a>
    15a6:	77 23       	and	r23, r23
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <__floatsisf+0x54>
    15aa:	9e e8       	ldi	r25, 0x8E	; 142
    15ac:	87 2f       	mov	r24, r23
    15ae:	76 2f       	mov	r23, r22
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <__floatsisf+0x5e>
    15b2:	66 23       	and	r22, r22
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <__floatsisf+0x74>
    15b6:	96 e8       	ldi	r25, 0x86	; 134
    15b8:	86 2f       	mov	r24, r22
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	2a f0       	brmi	.+10     	; 0x15ca <__floatsisf+0x6c>
    15c0:	9a 95       	dec	r25
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	da f7       	brpl	.-10     	; 0x15c0 <__floatsisf+0x62>
    15ca:	88 0f       	add	r24, r24
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	97 f9       	bld	r25, 7
    15d2:	08 95       	ret

000015d4 <__fp_inf>:
    15d4:	97 f9       	bld	r25, 7
    15d6:	9f 67       	ori	r25, 0x7F	; 127
    15d8:	80 e8       	ldi	r24, 0x80	; 128
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	08 95       	ret

000015e0 <__fp_nan>:
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	80 ec       	ldi	r24, 0xC0	; 192
    15e4:	08 95       	ret

000015e6 <__fp_pscA>:
    15e6:	00 24       	eor	r0, r0
    15e8:	0a 94       	dec	r0
    15ea:	16 16       	cp	r1, r22
    15ec:	17 06       	cpc	r1, r23
    15ee:	18 06       	cpc	r1, r24
    15f0:	09 06       	cpc	r0, r25
    15f2:	08 95       	ret

000015f4 <__fp_pscB>:
    15f4:	00 24       	eor	r0, r0
    15f6:	0a 94       	dec	r0
    15f8:	12 16       	cp	r1, r18
    15fa:	13 06       	cpc	r1, r19
    15fc:	14 06       	cpc	r1, r20
    15fe:	05 06       	cpc	r0, r21
    1600:	08 95       	ret

00001602 <__fp_round>:
    1602:	09 2e       	mov	r0, r25
    1604:	03 94       	inc	r0
    1606:	00 0c       	add	r0, r0
    1608:	11 f4       	brne	.+4      	; 0x160e <__fp_round+0xc>
    160a:	88 23       	and	r24, r24
    160c:	52 f0       	brmi	.+20     	; 0x1622 <__fp_round+0x20>
    160e:	bb 0f       	add	r27, r27
    1610:	40 f4       	brcc	.+16     	; 0x1622 <__fp_round+0x20>
    1612:	bf 2b       	or	r27, r31
    1614:	11 f4       	brne	.+4      	; 0x161a <__fp_round+0x18>
    1616:	60 ff       	sbrs	r22, 0
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <__fp_round+0x20>
    161a:	6f 5f       	subi	r22, 0xFF	; 255
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	08 95       	ret

00001624 <__fp_split3>:
    1624:	57 fd       	sbrc	r21, 7
    1626:	90 58       	subi	r25, 0x80	; 128
    1628:	44 0f       	add	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	59 f0       	breq	.+22     	; 0x1644 <__fp_splitA+0x10>
    162e:	5f 3f       	cpi	r21, 0xFF	; 255
    1630:	71 f0       	breq	.+28     	; 0x164e <__fp_splitA+0x1a>
    1632:	47 95       	ror	r20

00001634 <__fp_splitA>:
    1634:	88 0f       	add	r24, r24
    1636:	97 fb       	bst	r25, 7
    1638:	99 1f       	adc	r25, r25
    163a:	61 f0       	breq	.+24     	; 0x1654 <__fp_splitA+0x20>
    163c:	9f 3f       	cpi	r25, 0xFF	; 255
    163e:	79 f0       	breq	.+30     	; 0x165e <__fp_splitA+0x2a>
    1640:	87 95       	ror	r24
    1642:	08 95       	ret
    1644:	12 16       	cp	r1, r18
    1646:	13 06       	cpc	r1, r19
    1648:	14 06       	cpc	r1, r20
    164a:	55 1f       	adc	r21, r21
    164c:	f2 cf       	rjmp	.-28     	; 0x1632 <__fp_split3+0xe>
    164e:	46 95       	lsr	r20
    1650:	f1 df       	rcall	.-30     	; 0x1634 <__fp_splitA>
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <__fp_splitA+0x30>
    1654:	16 16       	cp	r1, r22
    1656:	17 06       	cpc	r1, r23
    1658:	18 06       	cpc	r1, r24
    165a:	99 1f       	adc	r25, r25
    165c:	f1 cf       	rjmp	.-30     	; 0x1640 <__fp_splitA+0xc>
    165e:	86 95       	lsr	r24
    1660:	71 05       	cpc	r23, r1
    1662:	61 05       	cpc	r22, r1
    1664:	08 94       	sec
    1666:	08 95       	ret

00001668 <__fp_zero>:
    1668:	e8 94       	clt

0000166a <__fp_szero>:
    166a:	bb 27       	eor	r27, r27
    166c:	66 27       	eor	r22, r22
    166e:	77 27       	eor	r23, r23
    1670:	cb 01       	movw	r24, r22
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret

00001676 <__mulsf3>:
    1676:	0b d0       	rcall	.+22     	; 0x168e <__mulsf3x>
    1678:	c4 cf       	rjmp	.-120    	; 0x1602 <__fp_round>
    167a:	b5 df       	rcall	.-150    	; 0x15e6 <__fp_pscA>
    167c:	28 f0       	brcs	.+10     	; 0x1688 <__mulsf3+0x12>
    167e:	ba df       	rcall	.-140    	; 0x15f4 <__fp_pscB>
    1680:	18 f0       	brcs	.+6      	; 0x1688 <__mulsf3+0x12>
    1682:	95 23       	and	r25, r21
    1684:	09 f0       	breq	.+2      	; 0x1688 <__mulsf3+0x12>
    1686:	a6 cf       	rjmp	.-180    	; 0x15d4 <__fp_inf>
    1688:	ab cf       	rjmp	.-170    	; 0x15e0 <__fp_nan>
    168a:	11 24       	eor	r1, r1
    168c:	ee cf       	rjmp	.-36     	; 0x166a <__fp_szero>

0000168e <__mulsf3x>:
    168e:	ca df       	rcall	.-108    	; 0x1624 <__fp_split3>
    1690:	a0 f3       	brcs	.-24     	; 0x167a <__mulsf3+0x4>

00001692 <__mulsf3_pse>:
    1692:	95 9f       	mul	r25, r21
    1694:	d1 f3       	breq	.-12     	; 0x168a <__mulsf3+0x14>
    1696:	95 0f       	add	r25, r21
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	55 1f       	adc	r21, r21
    169c:	62 9f       	mul	r22, r18
    169e:	f0 01       	movw	r30, r0
    16a0:	72 9f       	mul	r23, r18
    16a2:	bb 27       	eor	r27, r27
    16a4:	f0 0d       	add	r31, r0
    16a6:	b1 1d       	adc	r27, r1
    16a8:	63 9f       	mul	r22, r19
    16aa:	aa 27       	eor	r26, r26
    16ac:	f0 0d       	add	r31, r0
    16ae:	b1 1d       	adc	r27, r1
    16b0:	aa 1f       	adc	r26, r26
    16b2:	64 9f       	mul	r22, r20
    16b4:	66 27       	eor	r22, r22
    16b6:	b0 0d       	add	r27, r0
    16b8:	a1 1d       	adc	r26, r1
    16ba:	66 1f       	adc	r22, r22
    16bc:	82 9f       	mul	r24, r18
    16be:	22 27       	eor	r18, r18
    16c0:	b0 0d       	add	r27, r0
    16c2:	a1 1d       	adc	r26, r1
    16c4:	62 1f       	adc	r22, r18
    16c6:	73 9f       	mul	r23, r19
    16c8:	b0 0d       	add	r27, r0
    16ca:	a1 1d       	adc	r26, r1
    16cc:	62 1f       	adc	r22, r18
    16ce:	83 9f       	mul	r24, r19
    16d0:	a0 0d       	add	r26, r0
    16d2:	61 1d       	adc	r22, r1
    16d4:	22 1f       	adc	r18, r18
    16d6:	74 9f       	mul	r23, r20
    16d8:	33 27       	eor	r19, r19
    16da:	a0 0d       	add	r26, r0
    16dc:	61 1d       	adc	r22, r1
    16de:	23 1f       	adc	r18, r19
    16e0:	84 9f       	mul	r24, r20
    16e2:	60 0d       	add	r22, r0
    16e4:	21 1d       	adc	r18, r1
    16e6:	82 2f       	mov	r24, r18
    16e8:	76 2f       	mov	r23, r22
    16ea:	6a 2f       	mov	r22, r26
    16ec:	11 24       	eor	r1, r1
    16ee:	9f 57       	subi	r25, 0x7F	; 127
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	8a f0       	brmi	.+34     	; 0x1716 <__mulsf3_pse+0x84>
    16f4:	e1 f0       	breq	.+56     	; 0x172e <__mulsf3_pse+0x9c>
    16f6:	88 23       	and	r24, r24
    16f8:	4a f0       	brmi	.+18     	; 0x170c <__mulsf3_pse+0x7a>
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	bb 1f       	adc	r27, r27
    1700:	66 1f       	adc	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	91 50       	subi	r25, 0x01	; 1
    1708:	50 40       	sbci	r21, 0x00	; 0
    170a:	a9 f7       	brne	.-22     	; 0x16f6 <__mulsf3_pse+0x64>
    170c:	9e 3f       	cpi	r25, 0xFE	; 254
    170e:	51 05       	cpc	r21, r1
    1710:	70 f0       	brcs	.+28     	; 0x172e <__mulsf3_pse+0x9c>
    1712:	60 cf       	rjmp	.-320    	; 0x15d4 <__fp_inf>
    1714:	aa cf       	rjmp	.-172    	; 0x166a <__fp_szero>
    1716:	5f 3f       	cpi	r21, 0xFF	; 255
    1718:	ec f3       	brlt	.-6      	; 0x1714 <__mulsf3_pse+0x82>
    171a:	98 3e       	cpi	r25, 0xE8	; 232
    171c:	dc f3       	brlt	.-10     	; 0x1714 <__mulsf3_pse+0x82>
    171e:	86 95       	lsr	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	b7 95       	ror	r27
    1726:	f7 95       	ror	r31
    1728:	e7 95       	ror	r30
    172a:	9f 5f       	subi	r25, 0xFF	; 255
    172c:	c1 f7       	brne	.-16     	; 0x171e <__mulsf3_pse+0x8c>
    172e:	fe 2b       	or	r31, r30
    1730:	88 0f       	add	r24, r24
    1732:	91 1d       	adc	r25, r1
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	97 f9       	bld	r25, 7
    173a:	08 95       	ret

0000173c <pow>:
    173c:	fa 01       	movw	r30, r20
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	30 96       	adiw	r30, 0x00	; 0
    1744:	21 05       	cpc	r18, r1
    1746:	31 05       	cpc	r19, r1
    1748:	99 f1       	breq	.+102    	; 0x17b0 <pow+0x74>
    174a:	61 15       	cp	r22, r1
    174c:	71 05       	cpc	r23, r1
    174e:	61 f4       	brne	.+24     	; 0x1768 <pow+0x2c>
    1750:	80 38       	cpi	r24, 0x80	; 128
    1752:	bf e3       	ldi	r27, 0x3F	; 63
    1754:	9b 07       	cpc	r25, r27
    1756:	49 f1       	breq	.+82     	; 0x17aa <pow+0x6e>
    1758:	68 94       	set
    175a:	90 38       	cpi	r25, 0x80	; 128
    175c:	81 05       	cpc	r24, r1
    175e:	61 f0       	breq	.+24     	; 0x1778 <pow+0x3c>
    1760:	80 38       	cpi	r24, 0x80	; 128
    1762:	bf ef       	ldi	r27, 0xFF	; 255
    1764:	9b 07       	cpc	r25, r27
    1766:	41 f0       	breq	.+16     	; 0x1778 <pow+0x3c>
    1768:	99 23       	and	r25, r25
    176a:	42 f5       	brpl	.+80     	; 0x17bc <pow+0x80>
    176c:	ff 3f       	cpi	r31, 0xFF	; 255
    176e:	e1 05       	cpc	r30, r1
    1770:	31 05       	cpc	r19, r1
    1772:	21 05       	cpc	r18, r1
    1774:	11 f1       	breq	.+68     	; 0x17ba <pow+0x7e>
    1776:	e8 94       	clt
    1778:	08 94       	sec
    177a:	e7 95       	ror	r30
    177c:	d9 01       	movw	r26, r18
    177e:	aa 23       	and	r26, r26
    1780:	29 f4       	brne	.+10     	; 0x178c <pow+0x50>
    1782:	ab 2f       	mov	r26, r27
    1784:	be 2f       	mov	r27, r30
    1786:	f8 5f       	subi	r31, 0xF8	; 248
    1788:	d0 f3       	brcs	.-12     	; 0x177e <pow+0x42>
    178a:	10 c0       	rjmp	.+32     	; 0x17ac <pow+0x70>
    178c:	ff 5f       	subi	r31, 0xFF	; 255
    178e:	70 f4       	brcc	.+28     	; 0x17ac <pow+0x70>
    1790:	a6 95       	lsr	r26
    1792:	e0 f7       	brcc	.-8      	; 0x178c <pow+0x50>
    1794:	f7 39       	cpi	r31, 0x97	; 151
    1796:	50 f0       	brcs	.+20     	; 0x17ac <pow+0x70>
    1798:	19 f0       	breq	.+6      	; 0x17a0 <pow+0x64>
    179a:	ff 3a       	cpi	r31, 0xAF	; 175
    179c:	38 f4       	brcc	.+14     	; 0x17ac <pow+0x70>
    179e:	9f 77       	andi	r25, 0x7F	; 127
    17a0:	9f 93       	push	r25
    17a2:	0c d0       	rcall	.+24     	; 0x17bc <pow+0x80>
    17a4:	0f 90       	pop	r0
    17a6:	07 fc       	sbrc	r0, 7
    17a8:	90 58       	subi	r25, 0x80	; 128
    17aa:	08 95       	ret
    17ac:	3e f0       	brts	.+14     	; 0x17bc <pow+0x80>
    17ae:	18 cf       	rjmp	.-464    	; 0x15e0 <__fp_nan>
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	80 e8       	ldi	r24, 0x80	; 128
    17b6:	9f e3       	ldi	r25, 0x3F	; 63
    17b8:	08 95       	ret
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	9f 77       	andi	r25, 0x7F	; 127
    17be:	5f 93       	push	r21
    17c0:	4f 93       	push	r20
    17c2:	3f 93       	push	r19
    17c4:	2f 93       	push	r18
    17c6:	ac d0       	rcall	.+344    	; 0x1920 <log>
    17c8:	2f 91       	pop	r18
    17ca:	3f 91       	pop	r19
    17cc:	4f 91       	pop	r20
    17ce:	5f 91       	pop	r21
    17d0:	52 df       	rcall	.-348    	; 0x1676 <__mulsf3>
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <exp>
    17d4:	19 f4       	brne	.+6      	; 0x17dc <pow+0xa0>
    17d6:	0e f0       	brts	.+2      	; 0x17da <pow+0x9e>
    17d8:	fd ce       	rjmp	.-518    	; 0x15d4 <__fp_inf>
    17da:	46 cf       	rjmp	.-372    	; 0x1668 <__fp_zero>
    17dc:	01 cf       	rjmp	.-510    	; 0x15e0 <__fp_nan>

000017de <exp>:
    17de:	2a df       	rcall	.-428    	; 0x1634 <__fp_splitA>
    17e0:	c8 f3       	brcs	.-14     	; 0x17d4 <pow+0x98>
    17e2:	96 38       	cpi	r25, 0x86	; 134
    17e4:	c0 f7       	brcc	.-16     	; 0x17d6 <pow+0x9a>
    17e6:	07 f8       	bld	r0, 7
    17e8:	0f 92       	push	r0
    17ea:	e8 94       	clt
    17ec:	2b e3       	ldi	r18, 0x3B	; 59
    17ee:	3a ea       	ldi	r19, 0xAA	; 170
    17f0:	48 eb       	ldi	r20, 0xB8	; 184
    17f2:	5f e7       	ldi	r21, 0x7F	; 127
    17f4:	4e df       	rcall	.-356    	; 0x1692 <__mulsf3_pse>
    17f6:	0f 92       	push	r0
    17f8:	0f 92       	push	r0
    17fa:	0f 92       	push	r0
    17fc:	4d b7       	in	r20, 0x3d	; 61
    17fe:	5e b7       	in	r21, 0x3e	; 62
    1800:	0f 92       	push	r0
    1802:	ce d0       	rcall	.+412    	; 0x19a0 <modf>
    1804:	e8 e1       	ldi	r30, 0x18	; 24
    1806:	f1 e0       	ldi	r31, 0x01	; 1
    1808:	24 d0       	rcall	.+72     	; 0x1852 <__fp_powser>
    180a:	4f 91       	pop	r20
    180c:	5f 91       	pop	r21
    180e:	ef 91       	pop	r30
    1810:	ff 91       	pop	r31
    1812:	e5 95       	asr	r30
    1814:	ee 1f       	adc	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	49 f0       	breq	.+18     	; 0x182c <exp+0x4e>
    181a:	fe 57       	subi	r31, 0x7E	; 126
    181c:	e0 68       	ori	r30, 0x80	; 128
    181e:	44 27       	eor	r20, r20
    1820:	ee 0f       	add	r30, r30
    1822:	44 1f       	adc	r20, r20
    1824:	fa 95       	dec	r31
    1826:	e1 f7       	brne	.-8      	; 0x1820 <exp+0x42>
    1828:	41 95       	neg	r20
    182a:	55 0b       	sbc	r21, r21
    182c:	40 d0       	rcall	.+128    	; 0x18ae <ldexp>
    182e:	0f 90       	pop	r0
    1830:	07 fe       	sbrs	r0, 7
    1832:	34 c0       	rjmp	.+104    	; 0x189c <inverse>
    1834:	08 95       	ret

00001836 <__fp_mpack>:
    1836:	9f 3f       	cpi	r25, 0xFF	; 255
    1838:	31 f0       	breq	.+12     	; 0x1846 <__fp_mpack_finite+0xc>

0000183a <__fp_mpack_finite>:
    183a:	91 50       	subi	r25, 0x01	; 1
    183c:	20 f4       	brcc	.+8      	; 0x1846 <__fp_mpack_finite+0xc>
    183e:	87 95       	ror	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	b7 95       	ror	r27
    1846:	88 0f       	add	r24, r24
    1848:	91 1d       	adc	r25, r1
    184a:	96 95       	lsr	r25
    184c:	87 95       	ror	r24
    184e:	97 f9       	bld	r25, 7
    1850:	08 95       	ret

00001852 <__fp_powser>:
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	1f 93       	push	r17
    1858:	0f 93       	push	r16
    185a:	ff 92       	push	r15
    185c:	ef 92       	push	r14
    185e:	df 92       	push	r13
    1860:	7b 01       	movw	r14, r22
    1862:	8c 01       	movw	r16, r24
    1864:	68 94       	set
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <__fp_powser+0x20>
    1868:	da 2e       	mov	r13, r26
    186a:	ef 01       	movw	r28, r30
    186c:	10 df       	rcall	.-480    	; 0x168e <__mulsf3x>
    186e:	fe 01       	movw	r30, r28
    1870:	e8 94       	clt
    1872:	a5 91       	lpm	r26, Z+
    1874:	25 91       	lpm	r18, Z+
    1876:	35 91       	lpm	r19, Z+
    1878:	45 91       	lpm	r20, Z+
    187a:	55 91       	lpm	r21, Z+
    187c:	ae f3       	brts	.-22     	; 0x1868 <__fp_powser+0x16>
    187e:	ef 01       	movw	r28, r30
    1880:	e8 dd       	rcall	.-1072   	; 0x1452 <__addsf3x>
    1882:	fe 01       	movw	r30, r28
    1884:	97 01       	movw	r18, r14
    1886:	a8 01       	movw	r20, r16
    1888:	da 94       	dec	r13
    188a:	79 f7       	brne	.-34     	; 0x186a <__fp_powser+0x18>
    188c:	df 90       	pop	r13
    188e:	ef 90       	pop	r14
    1890:	ff 90       	pop	r15
    1892:	0f 91       	pop	r16
    1894:	1f 91       	pop	r17
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <inverse>:
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	80 e8       	ldi	r24, 0x80	; 128
    18a6:	9f e3       	ldi	r25, 0x3F	; 63
    18a8:	ae c0       	rjmp	.+348    	; 0x1a06 <__divsf3>
    18aa:	94 ce       	rjmp	.-728    	; 0x15d4 <__fp_inf>
    18ac:	c4 cf       	rjmp	.-120    	; 0x1836 <__fp_mpack>

000018ae <ldexp>:
    18ae:	c2 de       	rcall	.-636    	; 0x1634 <__fp_splitA>
    18b0:	e8 f3       	brcs	.-6      	; 0x18ac <inverse+0x10>
    18b2:	99 23       	and	r25, r25
    18b4:	d9 f3       	breq	.-10     	; 0x18ac <inverse+0x10>
    18b6:	94 0f       	add	r25, r20
    18b8:	51 1d       	adc	r21, r1
    18ba:	bb f3       	brvs	.-18     	; 0x18aa <inverse+0xe>
    18bc:	91 50       	subi	r25, 0x01	; 1
    18be:	50 40       	sbci	r21, 0x00	; 0
    18c0:	94 f0       	brlt	.+36     	; 0x18e6 <ldexp+0x38>
    18c2:	59 f0       	breq	.+22     	; 0x18da <ldexp+0x2c>
    18c4:	88 23       	and	r24, r24
    18c6:	32 f0       	brmi	.+12     	; 0x18d4 <ldexp+0x26>
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	91 50       	subi	r25, 0x01	; 1
    18d0:	50 40       	sbci	r21, 0x00	; 0
    18d2:	c1 f7       	brne	.-16     	; 0x18c4 <ldexp+0x16>
    18d4:	9e 3f       	cpi	r25, 0xFE	; 254
    18d6:	51 05       	cpc	r21, r1
    18d8:	44 f7       	brge	.-48     	; 0x18aa <inverse+0xe>
    18da:	88 0f       	add	r24, r24
    18dc:	91 1d       	adc	r25, r1
    18de:	96 95       	lsr	r25
    18e0:	87 95       	ror	r24
    18e2:	97 f9       	bld	r25, 7
    18e4:	08 95       	ret
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	ac f0       	brlt	.+42     	; 0x1914 <ldexp+0x66>
    18ea:	98 3e       	cpi	r25, 0xE8	; 232
    18ec:	9c f0       	brlt	.+38     	; 0x1914 <ldexp+0x66>
    18ee:	bb 27       	eor	r27, r27
    18f0:	86 95       	lsr	r24
    18f2:	77 95       	ror	r23
    18f4:	67 95       	ror	r22
    18f6:	b7 95       	ror	r27
    18f8:	08 f4       	brcc	.+2      	; 0x18fc <ldexp+0x4e>
    18fa:	b1 60       	ori	r27, 0x01	; 1
    18fc:	93 95       	inc	r25
    18fe:	c1 f7       	brne	.-16     	; 0x18f0 <ldexp+0x42>
    1900:	bb 0f       	add	r27, r27
    1902:	58 f7       	brcc	.-42     	; 0x18da <ldexp+0x2c>
    1904:	11 f4       	brne	.+4      	; 0x190a <ldexp+0x5c>
    1906:	60 ff       	sbrs	r22, 0
    1908:	e8 cf       	rjmp	.-48     	; 0x18da <ldexp+0x2c>
    190a:	6f 5f       	subi	r22, 0xFF	; 255
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	8f 4f       	sbci	r24, 0xFF	; 255
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	e3 cf       	rjmp	.-58     	; 0x18da <ldexp+0x2c>
    1914:	aa ce       	rjmp	.-684    	; 0x166a <__fp_szero>
    1916:	0e f0       	brts	.+2      	; 0x191a <ldexp+0x6c>
    1918:	8e cf       	rjmp	.-228    	; 0x1836 <__fp_mpack>
    191a:	62 ce       	rjmp	.-828    	; 0x15e0 <__fp_nan>
    191c:	68 94       	set
    191e:	5a ce       	rjmp	.-844    	; 0x15d4 <__fp_inf>

00001920 <log>:
    1920:	89 de       	rcall	.-750    	; 0x1634 <__fp_splitA>
    1922:	c8 f3       	brcs	.-14     	; 0x1916 <ldexp+0x68>
    1924:	99 23       	and	r25, r25
    1926:	d1 f3       	breq	.-12     	; 0x191c <ldexp+0x6e>
    1928:	c6 f3       	brts	.-16     	; 0x191a <ldexp+0x6c>
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	1f 93       	push	r17
    1930:	0f 93       	push	r16
    1932:	ff 92       	push	r15
    1934:	c9 2f       	mov	r28, r25
    1936:	dd 27       	eor	r29, r29
    1938:	88 23       	and	r24, r24
    193a:	2a f0       	brmi	.+10     	; 0x1946 <log+0x26>
    193c:	21 97       	sbiw	r28, 0x01	; 1
    193e:	66 0f       	add	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	da f7       	brpl	.-10     	; 0x193c <log+0x1c>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f eb       	ldi	r21, 0xBF	; 191
    194e:	9f e3       	ldi	r25, 0x3F	; 63
    1950:	88 39       	cpi	r24, 0x98	; 152
    1952:	20 f0       	brcs	.+8      	; 0x195c <log+0x3c>
    1954:	80 3e       	cpi	r24, 0xE0	; 224
    1956:	30 f0       	brcs	.+12     	; 0x1964 <log+0x44>
    1958:	21 96       	adiw	r28, 0x01	; 1
    195a:	8f 77       	andi	r24, 0x7F	; 127
    195c:	69 dd       	rcall	.-1326   	; 0x1430 <__addsf3>
    195e:	e0 e4       	ldi	r30, 0x40	; 64
    1960:	f1 e0       	ldi	r31, 0x01	; 1
    1962:	03 c0       	rjmp	.+6      	; 0x196a <log+0x4a>
    1964:	65 dd       	rcall	.-1334   	; 0x1430 <__addsf3>
    1966:	ed e6       	ldi	r30, 0x6D	; 109
    1968:	f1 e0       	ldi	r31, 0x01	; 1
    196a:	73 df       	rcall	.-282    	; 0x1852 <__fp_powser>
    196c:	8b 01       	movw	r16, r22
    196e:	be 01       	movw	r22, r28
    1970:	ec 01       	movw	r28, r24
    1972:	fb 2e       	mov	r15, r27
    1974:	6f 57       	subi	r22, 0x7F	; 127
    1976:	71 09       	sbc	r23, r1
    1978:	75 95       	asr	r23
    197a:	77 1f       	adc	r23, r23
    197c:	88 0b       	sbc	r24, r24
    197e:	99 0b       	sbc	r25, r25
    1980:	ee dd       	rcall	.-1060   	; 0x155e <__floatsisf>
    1982:	28 e1       	ldi	r18, 0x18	; 24
    1984:	32 e7       	ldi	r19, 0x72	; 114
    1986:	41 e3       	ldi	r20, 0x31	; 49
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	81 de       	rcall	.-766    	; 0x168e <__mulsf3x>
    198c:	af 2d       	mov	r26, r15
    198e:	98 01       	movw	r18, r16
    1990:	ae 01       	movw	r20, r28
    1992:	ff 90       	pop	r15
    1994:	0f 91       	pop	r16
    1996:	1f 91       	pop	r17
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	5a dd       	rcall	.-1356   	; 0x1452 <__addsf3x>
    199e:	31 ce       	rjmp	.-926    	; 0x1602 <__fp_round>

000019a0 <modf>:
    19a0:	fa 01       	movw	r30, r20
    19a2:	dc 01       	movw	r26, r24
    19a4:	aa 0f       	add	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	9b 01       	movw	r18, r22
    19aa:	ac 01       	movw	r20, r24
    19ac:	bf 57       	subi	r27, 0x7F	; 127
    19ae:	28 f4       	brcc	.+10     	; 0x19ba <modf+0x1a>
    19b0:	22 27       	eor	r18, r18
    19b2:	33 27       	eor	r19, r19
    19b4:	44 27       	eor	r20, r20
    19b6:	50 78       	andi	r21, 0x80	; 128
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <modf+0x58>
    19ba:	b7 51       	subi	r27, 0x17	; 23
    19bc:	88 f4       	brcc	.+34     	; 0x19e0 <modf+0x40>
    19be:	ab 2f       	mov	r26, r27
    19c0:	00 24       	eor	r0, r0
    19c2:	46 95       	lsr	r20
    19c4:	37 95       	ror	r19
    19c6:	27 95       	ror	r18
    19c8:	01 1c       	adc	r0, r1
    19ca:	a3 95       	inc	r26
    19cc:	d2 f3       	brmi	.-12     	; 0x19c2 <modf+0x22>
    19ce:	00 20       	and	r0, r0
    19d0:	69 f0       	breq	.+26     	; 0x19ec <modf+0x4c>
    19d2:	22 0f       	add	r18, r18
    19d4:	33 1f       	adc	r19, r19
    19d6:	44 1f       	adc	r20, r20
    19d8:	b3 95       	inc	r27
    19da:	da f3       	brmi	.-10     	; 0x19d2 <modf+0x32>
    19dc:	0d d0       	rcall	.+26     	; 0x19f8 <modf+0x58>
    19de:	27 cd       	rjmp	.-1458   	; 0x142e <__subsf3>
    19e0:	61 30       	cpi	r22, 0x01	; 1
    19e2:	71 05       	cpc	r23, r1
    19e4:	a0 e8       	ldi	r26, 0x80	; 128
    19e6:	8a 07       	cpc	r24, r26
    19e8:	b9 46       	sbci	r27, 0x69	; 105
    19ea:	30 f4       	brcc	.+12     	; 0x19f8 <modf+0x58>
    19ec:	9b 01       	movw	r18, r22
    19ee:	ac 01       	movw	r20, r24
    19f0:	66 27       	eor	r22, r22
    19f2:	77 27       	eor	r23, r23
    19f4:	88 27       	eor	r24, r24
    19f6:	90 78       	andi	r25, 0x80	; 128
    19f8:	30 96       	adiw	r30, 0x00	; 0
    19fa:	21 f0       	breq	.+8      	; 0x1a04 <modf+0x64>
    19fc:	20 83       	st	Z, r18
    19fe:	31 83       	std	Z+1, r19	; 0x01
    1a00:	42 83       	std	Z+2, r20	; 0x02
    1a02:	53 83       	std	Z+3, r21	; 0x03
    1a04:	08 95       	ret

00001a06 <__divsf3>:
    1a06:	0c d0       	rcall	.+24     	; 0x1a20 <__divsf3x>
    1a08:	fc cd       	rjmp	.-1032   	; 0x1602 <__fp_round>
    1a0a:	f4 dd       	rcall	.-1048   	; 0x15f4 <__fp_pscB>
    1a0c:	40 f0       	brcs	.+16     	; 0x1a1e <__divsf3+0x18>
    1a0e:	eb dd       	rcall	.-1066   	; 0x15e6 <__fp_pscA>
    1a10:	30 f0       	brcs	.+12     	; 0x1a1e <__divsf3+0x18>
    1a12:	21 f4       	brne	.+8      	; 0x1a1c <__divsf3+0x16>
    1a14:	5f 3f       	cpi	r21, 0xFF	; 255
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <__divsf3+0x18>
    1a18:	dd cd       	rjmp	.-1094   	; 0x15d4 <__fp_inf>
    1a1a:	51 11       	cpse	r21, r1
    1a1c:	26 ce       	rjmp	.-948    	; 0x166a <__fp_szero>
    1a1e:	e0 cd       	rjmp	.-1088   	; 0x15e0 <__fp_nan>

00001a20 <__divsf3x>:
    1a20:	01 de       	rcall	.-1022   	; 0x1624 <__fp_split3>
    1a22:	98 f3       	brcs	.-26     	; 0x1a0a <__divsf3+0x4>

00001a24 <__divsf3_pse>:
    1a24:	99 23       	and	r25, r25
    1a26:	c9 f3       	breq	.-14     	; 0x1a1a <__divsf3+0x14>
    1a28:	55 23       	and	r21, r21
    1a2a:	b1 f3       	breq	.-20     	; 0x1a18 <__divsf3+0x12>
    1a2c:	95 1b       	sub	r25, r21
    1a2e:	55 0b       	sbc	r21, r21
    1a30:	bb 27       	eor	r27, r27
    1a32:	aa 27       	eor	r26, r26
    1a34:	62 17       	cp	r22, r18
    1a36:	73 07       	cpc	r23, r19
    1a38:	84 07       	cpc	r24, r20
    1a3a:	38 f0       	brcs	.+14     	; 0x1a4a <__divsf3_pse+0x26>
    1a3c:	9f 5f       	subi	r25, 0xFF	; 255
    1a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a40:	22 0f       	add	r18, r18
    1a42:	33 1f       	adc	r19, r19
    1a44:	44 1f       	adc	r20, r20
    1a46:	aa 1f       	adc	r26, r26
    1a48:	a9 f3       	breq	.-22     	; 0x1a34 <__divsf3_pse+0x10>
    1a4a:	33 d0       	rcall	.+102    	; 0x1ab2 <__divsf3_pse+0x8e>
    1a4c:	0e 2e       	mov	r0, r30
    1a4e:	3a f0       	brmi	.+14     	; 0x1a5e <__divsf3_pse+0x3a>
    1a50:	e0 e8       	ldi	r30, 0x80	; 128
    1a52:	30 d0       	rcall	.+96     	; 0x1ab4 <__divsf3_pse+0x90>
    1a54:	91 50       	subi	r25, 0x01	; 1
    1a56:	50 40       	sbci	r21, 0x00	; 0
    1a58:	e6 95       	lsr	r30
    1a5a:	00 1c       	adc	r0, r0
    1a5c:	ca f7       	brpl	.-14     	; 0x1a50 <__divsf3_pse+0x2c>
    1a5e:	29 d0       	rcall	.+82     	; 0x1ab2 <__divsf3_pse+0x8e>
    1a60:	fe 2f       	mov	r31, r30
    1a62:	27 d0       	rcall	.+78     	; 0x1ab2 <__divsf3_pse+0x8e>
    1a64:	66 0f       	add	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	26 17       	cp	r18, r22
    1a6e:	37 07       	cpc	r19, r23
    1a70:	48 07       	cpc	r20, r24
    1a72:	ab 07       	cpc	r26, r27
    1a74:	b0 e8       	ldi	r27, 0x80	; 128
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <__divsf3_pse+0x56>
    1a78:	bb 0b       	sbc	r27, r27
    1a7a:	80 2d       	mov	r24, r0
    1a7c:	bf 01       	movw	r22, r30
    1a7e:	ff 27       	eor	r31, r31
    1a80:	93 58       	subi	r25, 0x83	; 131
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	2a f0       	brmi	.+10     	; 0x1a90 <__divsf3_pse+0x6c>
    1a86:	9e 3f       	cpi	r25, 0xFE	; 254
    1a88:	51 05       	cpc	r21, r1
    1a8a:	68 f0       	brcs	.+26     	; 0x1aa6 <__divsf3_pse+0x82>
    1a8c:	a3 cd       	rjmp	.-1210   	; 0x15d4 <__fp_inf>
    1a8e:	ed cd       	rjmp	.-1062   	; 0x166a <__fp_szero>
    1a90:	5f 3f       	cpi	r21, 0xFF	; 255
    1a92:	ec f3       	brlt	.-6      	; 0x1a8e <__divsf3_pse+0x6a>
    1a94:	98 3e       	cpi	r25, 0xE8	; 232
    1a96:	dc f3       	brlt	.-10     	; 0x1a8e <__divsf3_pse+0x6a>
    1a98:	86 95       	lsr	r24
    1a9a:	77 95       	ror	r23
    1a9c:	67 95       	ror	r22
    1a9e:	b7 95       	ror	r27
    1aa0:	f7 95       	ror	r31
    1aa2:	9f 5f       	subi	r25, 0xFF	; 255
    1aa4:	c9 f7       	brne	.-14     	; 0x1a98 <__divsf3_pse+0x74>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	91 1d       	adc	r25, r1
    1aaa:	96 95       	lsr	r25
    1aac:	87 95       	ror	r24
    1aae:	97 f9       	bld	r25, 7
    1ab0:	08 95       	ret
    1ab2:	e1 e0       	ldi	r30, 0x01	; 1
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	bb 1f       	adc	r27, r27
    1abc:	62 17       	cp	r22, r18
    1abe:	73 07       	cpc	r23, r19
    1ac0:	84 07       	cpc	r24, r20
    1ac2:	ba 07       	cpc	r27, r26
    1ac4:	20 f0       	brcs	.+8      	; 0x1ace <__divsf3_pse+0xaa>
    1ac6:	62 1b       	sub	r22, r18
    1ac8:	73 0b       	sbc	r23, r19
    1aca:	84 0b       	sbc	r24, r20
    1acc:	ba 0b       	sbc	r27, r26
    1ace:	ee 1f       	adc	r30, r30
    1ad0:	88 f7       	brcc	.-30     	; 0x1ab4 <__divsf3_pse+0x90>
    1ad2:	e0 95       	com	r30
    1ad4:	08 95       	ret

00001ad6 <__udivmodsi4>:
    1ad6:	a1 e2       	ldi	r26, 0x21	; 33
    1ad8:	1a 2e       	mov	r1, r26
    1ada:	aa 1b       	sub	r26, r26
    1adc:	bb 1b       	sub	r27, r27
    1ade:	fd 01       	movw	r30, r26
    1ae0:	0d c0       	rjmp	.+26     	; 0x1afc <__udivmodsi4_ep>

00001ae2 <__udivmodsi4_loop>:
    1ae2:	aa 1f       	adc	r26, r26
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	ee 1f       	adc	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	a2 17       	cp	r26, r18
    1aec:	b3 07       	cpc	r27, r19
    1aee:	e4 07       	cpc	r30, r20
    1af0:	f5 07       	cpc	r31, r21
    1af2:	20 f0       	brcs	.+8      	; 0x1afc <__udivmodsi4_ep>
    1af4:	a2 1b       	sub	r26, r18
    1af6:	b3 0b       	sbc	r27, r19
    1af8:	e4 0b       	sbc	r30, r20
    1afa:	f5 0b       	sbc	r31, r21

00001afc <__udivmodsi4_ep>:
    1afc:	66 1f       	adc	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	1a 94       	dec	r1
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <__udivmodsi4_loop>
    1b08:	60 95       	com	r22
    1b0a:	70 95       	com	r23
    1b0c:	80 95       	com	r24
    1b0e:	90 95       	com	r25
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
    1b14:	bd 01       	movw	r22, r26
    1b16:	cf 01       	movw	r24, r30
    1b18:	08 95       	ret

00001b1a <__tablejump2__>:
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	88 1f       	adc	r24, r24
    1b20:	8b bf       	out	0x3b, r24	; 59
    1b22:	07 90       	elpm	r0, Z+
    1b24:	f6 91       	elpm	r31, Z
    1b26:	e0 2d       	mov	r30, r0
    1b28:	19 94       	eijmp

00001b2a <__muluhisi3>:
    1b2a:	d1 d0       	rcall	.+418    	; 0x1cce <__umulhisi3>
    1b2c:	a5 9f       	mul	r26, r21
    1b2e:	90 0d       	add	r25, r0
    1b30:	b4 9f       	mul	r27, r20
    1b32:	90 0d       	add	r25, r0
    1b34:	a4 9f       	mul	r26, r20
    1b36:	80 0d       	add	r24, r0
    1b38:	91 1d       	adc	r25, r1
    1b3a:	11 24       	eor	r1, r1
    1b3c:	08 95       	ret

00001b3e <__umoddi3>:
    1b3e:	68 94       	set
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <__udivdi3_umoddi3>

00001b42 <__udivdi3>:
    1b42:	e8 94       	clt

00001b44 <__udivdi3_umoddi3>:
    1b44:	8f 92       	push	r8
    1b46:	9f 92       	push	r9
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	05 d0       	rcall	.+10     	; 0x1b58 <__udivmod64>
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	9f 90       	pop	r9
    1b54:	8f 90       	pop	r8
    1b56:	08 95       	ret

00001b58 <__udivmod64>:
    1b58:	88 24       	eor	r8, r8
    1b5a:	99 24       	eor	r9, r9
    1b5c:	f4 01       	movw	r30, r8
    1b5e:	e4 01       	movw	r28, r8
    1b60:	b0 e4       	ldi	r27, 0x40	; 64
    1b62:	9f 93       	push	r25
    1b64:	aa 27       	eor	r26, r26
    1b66:	9a 15       	cp	r25, r10
    1b68:	8b 04       	cpc	r8, r11
    1b6a:	9c 04       	cpc	r9, r12
    1b6c:	ed 05       	cpc	r30, r13
    1b6e:	fe 05       	cpc	r31, r14
    1b70:	cf 05       	cpc	r28, r15
    1b72:	d0 07       	cpc	r29, r16
    1b74:	a1 07       	cpc	r26, r17
    1b76:	98 f4       	brcc	.+38     	; 0x1b9e <__udivmod64+0x46>
    1b78:	ad 2f       	mov	r26, r29
    1b7a:	dc 2f       	mov	r29, r28
    1b7c:	cf 2f       	mov	r28, r31
    1b7e:	fe 2f       	mov	r31, r30
    1b80:	e9 2d       	mov	r30, r9
    1b82:	98 2c       	mov	r9, r8
    1b84:	89 2e       	mov	r8, r25
    1b86:	98 2f       	mov	r25, r24
    1b88:	87 2f       	mov	r24, r23
    1b8a:	76 2f       	mov	r23, r22
    1b8c:	65 2f       	mov	r22, r21
    1b8e:	54 2f       	mov	r21, r20
    1b90:	43 2f       	mov	r20, r19
    1b92:	32 2f       	mov	r19, r18
    1b94:	22 27       	eor	r18, r18
    1b96:	b8 50       	subi	r27, 0x08	; 8
    1b98:	31 f7       	brne	.-52     	; 0x1b66 <__udivmod64+0xe>
    1b9a:	bf 91       	pop	r27
    1b9c:	27 c0       	rjmp	.+78     	; 0x1bec <__udivmod64+0x94>
    1b9e:	1b 2e       	mov	r1, r27
    1ba0:	bf 91       	pop	r27
    1ba2:	bb 27       	eor	r27, r27
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	66 1f       	adc	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	88 1f       	adc	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	88 1c       	adc	r8, r8
    1bb6:	99 1c       	adc	r9, r9
    1bb8:	ee 1f       	adc	r30, r30
    1bba:	ff 1f       	adc	r31, r31
    1bbc:	cc 1f       	adc	r28, r28
    1bbe:	dd 1f       	adc	r29, r29
    1bc0:	aa 1f       	adc	r26, r26
    1bc2:	bb 1f       	adc	r27, r27
    1bc4:	8a 14       	cp	r8, r10
    1bc6:	9b 04       	cpc	r9, r11
    1bc8:	ec 05       	cpc	r30, r12
    1bca:	fd 05       	cpc	r31, r13
    1bcc:	ce 05       	cpc	r28, r14
    1bce:	df 05       	cpc	r29, r15
    1bd0:	a0 07       	cpc	r26, r16
    1bd2:	b1 07       	cpc	r27, r17
    1bd4:	48 f0       	brcs	.+18     	; 0x1be8 <__udivmod64+0x90>
    1bd6:	8a 18       	sub	r8, r10
    1bd8:	9b 08       	sbc	r9, r11
    1bda:	ec 09       	sbc	r30, r12
    1bdc:	fd 09       	sbc	r31, r13
    1bde:	ce 09       	sbc	r28, r14
    1be0:	df 09       	sbc	r29, r15
    1be2:	a0 0b       	sbc	r26, r16
    1be4:	b1 0b       	sbc	r27, r17
    1be6:	21 60       	ori	r18, 0x01	; 1
    1be8:	1a 94       	dec	r1
    1bea:	e1 f6       	brne	.-72     	; 0x1ba4 <__udivmod64+0x4c>
    1bec:	2e f4       	brtc	.+10     	; 0x1bf8 <__udivmod64+0xa0>
    1bee:	94 01       	movw	r18, r8
    1bf0:	af 01       	movw	r20, r30
    1bf2:	be 01       	movw	r22, r28
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	00 0c       	add	r0, r0
    1bf8:	08 95       	ret

00001bfa <__ashldi3>:
    1bfa:	0f 93       	push	r16
    1bfc:	08 30       	cpi	r16, 0x08	; 8
    1bfe:	90 f0       	brcs	.+36     	; 0x1c24 <__ashldi3+0x2a>
    1c00:	98 2f       	mov	r25, r24
    1c02:	87 2f       	mov	r24, r23
    1c04:	76 2f       	mov	r23, r22
    1c06:	65 2f       	mov	r22, r21
    1c08:	54 2f       	mov	r21, r20
    1c0a:	43 2f       	mov	r20, r19
    1c0c:	32 2f       	mov	r19, r18
    1c0e:	22 27       	eor	r18, r18
    1c10:	08 50       	subi	r16, 0x08	; 8
    1c12:	f4 cf       	rjmp	.-24     	; 0x1bfc <__ashldi3+0x2>
    1c14:	22 0f       	add	r18, r18
    1c16:	33 1f       	adc	r19, r19
    1c18:	44 1f       	adc	r20, r20
    1c1a:	55 1f       	adc	r21, r21
    1c1c:	66 1f       	adc	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	88 1f       	adc	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 95       	dec	r16
    1c26:	b2 f7       	brpl	.-20     	; 0x1c14 <__ashldi3+0x1a>
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <__ashrdi3>:
    1c2c:	97 fb       	bst	r25, 7
    1c2e:	10 f8       	bld	r1, 0

00001c30 <__lshrdi3>:
    1c30:	16 94       	lsr	r1
    1c32:	00 08       	sbc	r0, r0
    1c34:	0f 93       	push	r16
    1c36:	08 30       	cpi	r16, 0x08	; 8
    1c38:	98 f0       	brcs	.+38     	; 0x1c60 <__lshrdi3+0x30>
    1c3a:	08 50       	subi	r16, 0x08	; 8
    1c3c:	23 2f       	mov	r18, r19
    1c3e:	34 2f       	mov	r19, r20
    1c40:	45 2f       	mov	r20, r21
    1c42:	56 2f       	mov	r21, r22
    1c44:	67 2f       	mov	r22, r23
    1c46:	78 2f       	mov	r23, r24
    1c48:	89 2f       	mov	r24, r25
    1c4a:	90 2d       	mov	r25, r0
    1c4c:	f4 cf       	rjmp	.-24     	; 0x1c36 <__lshrdi3+0x6>
    1c4e:	05 94       	asr	r0
    1c50:	97 95       	ror	r25
    1c52:	87 95       	ror	r24
    1c54:	77 95       	ror	r23
    1c56:	67 95       	ror	r22
    1c58:	57 95       	ror	r21
    1c5a:	47 95       	ror	r20
    1c5c:	37 95       	ror	r19
    1c5e:	27 95       	ror	r18
    1c60:	0a 95       	dec	r16
    1c62:	aa f7       	brpl	.-22     	; 0x1c4e <__lshrdi3+0x1e>
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <__adddi3>:
    1c68:	2a 0d       	add	r18, r10
    1c6a:	3b 1d       	adc	r19, r11
    1c6c:	4c 1d       	adc	r20, r12
    1c6e:	5d 1d       	adc	r21, r13
    1c70:	6e 1d       	adc	r22, r14
    1c72:	7f 1d       	adc	r23, r15
    1c74:	80 1f       	adc	r24, r16
    1c76:	91 1f       	adc	r25, r17
    1c78:	08 95       	ret

00001c7a <__adddi3_s8>:
    1c7a:	00 24       	eor	r0, r0
    1c7c:	a7 fd       	sbrc	r26, 7
    1c7e:	00 94       	com	r0
    1c80:	2a 0f       	add	r18, r26
    1c82:	30 1d       	adc	r19, r0
    1c84:	40 1d       	adc	r20, r0
    1c86:	50 1d       	adc	r21, r0
    1c88:	60 1d       	adc	r22, r0
    1c8a:	70 1d       	adc	r23, r0
    1c8c:	80 1d       	adc	r24, r0
    1c8e:	90 1d       	adc	r25, r0
    1c90:	08 95       	ret

00001c92 <__subdi3>:
    1c92:	2a 19       	sub	r18, r10
    1c94:	3b 09       	sbc	r19, r11
    1c96:	4c 09       	sbc	r20, r12
    1c98:	5d 09       	sbc	r21, r13
    1c9a:	6e 09       	sbc	r22, r14
    1c9c:	7f 09       	sbc	r23, r15
    1c9e:	80 0b       	sbc	r24, r16
    1ca0:	91 0b       	sbc	r25, r17
    1ca2:	08 95       	ret

00001ca4 <__cmpdi2>:
    1ca4:	2a 15       	cp	r18, r10
    1ca6:	3b 05       	cpc	r19, r11
    1ca8:	4c 05       	cpc	r20, r12
    1caa:	5d 05       	cpc	r21, r13
    1cac:	6e 05       	cpc	r22, r14
    1cae:	7f 05       	cpc	r23, r15
    1cb0:	80 07       	cpc	r24, r16
    1cb2:	91 07       	cpc	r25, r17
    1cb4:	08 95       	ret

00001cb6 <__cmpdi2_s8>:
    1cb6:	00 24       	eor	r0, r0
    1cb8:	a7 fd       	sbrc	r26, 7
    1cba:	00 94       	com	r0
    1cbc:	2a 17       	cp	r18, r26
    1cbe:	30 05       	cpc	r19, r0
    1cc0:	40 05       	cpc	r20, r0
    1cc2:	50 05       	cpc	r21, r0
    1cc4:	60 05       	cpc	r22, r0
    1cc6:	70 05       	cpc	r23, r0
    1cc8:	80 05       	cpc	r24, r0
    1cca:	90 05       	cpc	r25, r0
    1ccc:	08 95       	ret

00001cce <__umulhisi3>:
    1cce:	a2 9f       	mul	r26, r18
    1cd0:	b0 01       	movw	r22, r0
    1cd2:	b3 9f       	mul	r27, r19
    1cd4:	c0 01       	movw	r24, r0
    1cd6:	a3 9f       	mul	r26, r19
    1cd8:	70 0d       	add	r23, r0
    1cda:	81 1d       	adc	r24, r1
    1cdc:	11 24       	eor	r1, r1
    1cde:	91 1d       	adc	r25, r1
    1ce0:	b2 9f       	mul	r27, r18
    1ce2:	70 0d       	add	r23, r0
    1ce4:	81 1d       	adc	r24, r1
    1ce6:	11 24       	eor	r1, r1
    1ce8:	91 1d       	adc	r25, r1
    1cea:	08 95       	ret

00001cec <__itoa_ncheck>:
    1cec:	bb 27       	eor	r27, r27
    1cee:	4a 30       	cpi	r20, 0x0A	; 10
    1cf0:	31 f4       	brne	.+12     	; 0x1cfe <__itoa_ncheck+0x12>
    1cf2:	99 23       	and	r25, r25
    1cf4:	22 f4       	brpl	.+8      	; 0x1cfe <__itoa_ncheck+0x12>
    1cf6:	bd e2       	ldi	r27, 0x2D	; 45
    1cf8:	90 95       	com	r25
    1cfa:	81 95       	neg	r24
    1cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <__utoa_common>

00001d00 <__utoa_ncheck>:
    1d00:	bb 27       	eor	r27, r27

00001d02 <__utoa_common>:
    1d02:	fb 01       	movw	r30, r22
    1d04:	55 27       	eor	r21, r21
    1d06:	aa 27       	eor	r26, r26
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	aa 1f       	adc	r26, r26
    1d0e:	a4 17       	cp	r26, r20
    1d10:	10 f0       	brcs	.+4      	; 0x1d16 <__utoa_common+0x14>
    1d12:	a4 1b       	sub	r26, r20
    1d14:	83 95       	inc	r24
    1d16:	50 51       	subi	r21, 0x10	; 16
    1d18:	b9 f7       	brne	.-18     	; 0x1d08 <__utoa_common+0x6>
    1d1a:	a0 5d       	subi	r26, 0xD0	; 208
    1d1c:	aa 33       	cpi	r26, 0x3A	; 58
    1d1e:	08 f0       	brcs	.+2      	; 0x1d22 <__utoa_common+0x20>
    1d20:	a9 5d       	subi	r26, 0xD9	; 217
    1d22:	a1 93       	st	Z+, r26
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	79 f7       	brne	.-34     	; 0x1d06 <__utoa_common+0x4>
    1d28:	b1 11       	cpse	r27, r1
    1d2a:	b1 93       	st	Z+, r27
    1d2c:	11 92       	st	Z+, r1
    1d2e:	cb 01       	movw	r24, r22
    1d30:	00 c0       	rjmp	.+0      	; 0x1d32 <strrev>

00001d32 <strrev>:
    1d32:	dc 01       	movw	r26, r24
    1d34:	fc 01       	movw	r30, r24
    1d36:	67 2f       	mov	r22, r23
    1d38:	71 91       	ld	r23, Z+
    1d3a:	77 23       	and	r23, r23
    1d3c:	e1 f7       	brne	.-8      	; 0x1d36 <strrev+0x4>
    1d3e:	32 97       	sbiw	r30, 0x02	; 2
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <strrev+0x18>
    1d42:	7c 91       	ld	r23, X
    1d44:	6d 93       	st	X+, r22
    1d46:	70 83       	st	Z, r23
    1d48:	62 91       	ld	r22, -Z
    1d4a:	ae 17       	cp	r26, r30
    1d4c:	bf 07       	cpc	r27, r31
    1d4e:	c8 f3       	brcs	.-14     	; 0x1d42 <strrev+0x10>
    1d50:	08 95       	ret

00001d52 <_exit>:
    1d52:	f8 94       	cli

00001d54 <__stop_program>:
    1d54:	ff cf       	rjmp	.-2      	; 0x1d54 <__stop_program>
>>>>>>> Stashed changes
