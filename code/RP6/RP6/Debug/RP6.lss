
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000173a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000173a  000017ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00800066  00800066  000017d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY
<<<<<<< HEAD
  5 .debug_aranges 000000d8  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf7  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  0000224f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fd  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  000031b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000630  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a83  00000000  00000000  00003b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000045a3  2**0
=======
  5 .debug_aranges 000000d0  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c46  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a3  00000000  00000000  00002556  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008df  00000000  00000000  00002cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000035d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  000038c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000920  00000000  00000000  00003f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004840  2**0
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_1>
       8:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3c       	cpi	r26, 0xCF	; 207
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 08 	call	0x105a	; 0x105a <main>
      8a:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_LED>:
	sei();									//Enable global interrupts
}


void init_LED(){
	DDRB |= 0b10000011;
      92:	87 b3       	in	r24, 0x17	; 23
      94:	83 68       	ori	r24, 0x83	; 131
      96:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      98:	84 b3       	in	r24, 0x14	; 20
      9a:	80 67       	ori	r24, 0x70	; 112
      9c:	84 bb       	out	0x14, r24	; 20
      9e:	08 95       	ret

000000a0 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      a0:	83 b7       	in	r24, 0x33	; 51
      a2:	81 60       	ori	r24, 0x01	; 1
      a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      a6:	83 b7       	in	r24, 0x33	; 51
      a8:	82 60       	ori	r24, 0x02	; 2
      aa:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      ac:	89 b7       	in	r24, 0x39	; 57
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      b2:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      b4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <t0TotalOverflow>
      b8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <t0TotalOverflow+0x1>
      bc:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t0TotalOverflow+0x2>
      c0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t0TotalOverflow+0x3>
      c4:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <t0TotalOverflow+0x4>
      c8:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <t0TotalOverflow+0x5>
      cc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <t0TotalOverflow+0x6>
      d0:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t0TotalOverflow+0x7>
      d4:	08 95       	ret

000000d6 <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	2f 93       	push	r18
      e2:	3f 93       	push	r19
      e4:	4f 93       	push	r20
      e6:	5f 93       	push	r21
      e8:	6f 93       	push	r22
      ea:	7f 93       	push	r23
      ec:	8f 93       	push	r24
      ee:	9f 93       	push	r25
      f0:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
      f2:	20 91 b3 00 	lds	r18, 0x00B3	; 0x8000b3 <t0TotalOverflow>
      f6:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x1>
      fa:	40 91 b5 00 	lds	r20, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x2>
      fe:	50 91 b6 00 	lds	r21, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x3>
     102:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x4>
     106:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x5>
     10a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x6>
     10e:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <t0TotalOverflow+0x7>
     112:	a1 e0       	ldi	r26, 0x01	; 1
     114:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__adddi3_s8>
     118:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <t0TotalOverflow>
     11c:	30 93 b4 00 	sts	0x00B4, r19	; 0x8000b4 <t0TotalOverflow+0x1>
     120:	40 93 b5 00 	sts	0x00B5, r20	; 0x8000b5 <t0TotalOverflow+0x2>
     124:	50 93 b6 00 	sts	0x00B6, r21	; 0x8000b6 <t0TotalOverflow+0x3>
     128:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <t0TotalOverflow+0x4>
     12c:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <t0TotalOverflow+0x5>
     130:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <t0TotalOverflow+0x6>
     134:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <t0TotalOverflow+0x7>
}
     138:	af 91       	pop	r26
     13a:	9f 91       	pop	r25
     13c:	8f 91       	pop	r24
     13e:	7f 91       	pop	r23
     140:	6f 91       	pop	r22
     142:	5f 91       	pop	r21
     144:	4f 91       	pop	r20
     146:	3f 91       	pop	r19
     148:	2f 91       	pop	r18
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <micros>:


uint64_t micros(){
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     164:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     166:	20 91 b3 00 	lds	r18, 0x00B3	; 0x8000b3 <t0TotalOverflow>
     16a:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x1>
     16e:	40 91 b5 00 	lds	r20, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x2>
     172:	50 91 b6 00 	lds	r21, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x3>
     176:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <t0TotalOverflow+0x4>
     17a:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <t0TotalOverflow+0x5>
     17e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x6>
     182:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     186:	e0 e0       	ldi	r30, 0x00	; 0
     188:	fa 2f       	mov	r31, r26
     18a:	ff 0f       	add	r31, r31
     18c:	ff 0f       	add	r31, r31
     18e:	ff 0f       	add	r31, r31
     190:	ff 23       	and	r31, r31
     192:	14 f4       	brge	.+4      	; 0x198 <micros+0x44>
     194:	e1 50       	subi	r30, 0x01	; 1
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	ef 2f       	mov	r30, r31
     19a:	ee 0f       	add	r30, r30
     19c:	ee 0b       	sbc	r30, r30
     19e:	0b e0       	ldi	r16, 0x0B	; 11
     1a0:	0e 94 40 0b 	call	0x1680	; 0x1680 <__ashldi3>
     1a4:	a2 2e       	mov	r10, r18
     1a6:	b3 2e       	mov	r11, r19
     1a8:	c4 2e       	mov	r12, r20
     1aa:	d5 2e       	mov	r13, r21
     1ac:	e6 2e       	mov	r14, r22
     1ae:	f7 2e       	mov	r15, r23
     1b0:	08 2f       	mov	r16, r24
     1b2:	19 2f       	mov	r17, r25
     1b4:	2f 2f       	mov	r18, r31
     1b6:	3e 2f       	mov	r19, r30
     1b8:	4e 2f       	mov	r20, r30
     1ba:	5e 2f       	mov	r21, r30
     1bc:	6e 2f       	mov	r22, r30
     1be:	7e 2f       	mov	r23, r30
     1c0:	8e 2f       	mov	r24, r30
     1c2:	9e 2f       	mov	r25, r30
     1c4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__adddi3>
}
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	df 90       	pop	r13
     1d2:	cf 90       	pop	r12
     1d4:	bf 90       	pop	r11
     1d6:	af 90       	pop	r10
     1d8:	08 95       	ret

000001da <init_TWI>:
//------------------------------------------------------
//I2C functions ----------------------------------------
void init_TWI(){
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);		//Enable TWI; Enable Acknowledge; Enable Interrupt
     1da:	85 e4       	ldi	r24, 0x45	; 69
     1dc:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;											//No prescaling
     1de:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);									//Set slave address
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;					//set SCL to 100kHz
     1e4:	80 e2       	ldi	r24, 0x20	; 32
     1e6:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;
     1e8:	84 b3       	in	r24, 0x14	; 20
     1ea:	83 60       	ori	r24, 0x03	; 3
     1ec:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;
     1ee:	85 b3       	in	r24, 0x15	; 21
     1f0:	83 60       	ori	r24, 0x03	; 3
     1f2:	85 bb       	out	0x15, r24	; 21
     1f4:	08 95       	ret

000001f6 <init_rp6Data>:
}


void init_rp6Data(){
	rp6Data.driveSpeed = 0;
     1f6:	e0 ea       	ldi	r30, 0xA0	; 160
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	10 82       	st	Z, r1
     1fc:	11 82       	std	Z+1, r1	; 0x01
     1fe:	12 82       	std	Z+2, r1	; 0x02
     200:	13 82       	std	Z+3, r1	; 0x03
	rp6Data.driveDirection = 1;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	84 83       	std	Z+4, r24	; 0x04
	rp6Data.turnDirection = 0;
     206:	15 82       	std	Z+5, r1	; 0x05
	rp6Data.accelerationRate = 2000;
     208:	20 ed       	ldi	r18, 0xD0	; 208
     20a:	37 e0       	ldi	r19, 0x07	; 7
     20c:	37 83       	std	Z+7, r19	; 0x07
     20e:	26 83       	std	Z+6, r18	; 0x06
	rp6Data.turnRate = 2500;
     210:	24 ec       	ldi	r18, 0xC4	; 196
     212:	39 e0       	ldi	r19, 0x09	; 9
     214:	31 87       	std	Z+9, r19	; 0x09
     216:	20 87       	std	Z+8, r18	; 0x08
	rp6Data.driveSpeedThreshold = 7000;
     218:	28 e5       	ldi	r18, 0x58	; 88
     21a:	3b e1       	ldi	r19, 0x1B	; 27
     21c:	33 87       	std	Z+11, r19	; 0x0b
     21e:	22 87       	std	Z+10, r18	; 0x0a
	rp6Data.updateSpeed = 200;
     220:	48 ec       	ldi	r20, 0xC8	; 200
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	44 87       	std	Z+12, r20	; 0x0c
     22a:	55 87       	std	Z+13, r21	; 0x0d
     22c:	66 87       	std	Z+14, r22	; 0x0e
     22e:	77 87       	std	Z+15, r23	; 0x0f
	rp6Data.enableBeeper = 1;
     230:	80 8b       	std	Z+16, r24	; 0x10
     232:	08 95       	ret

00000234 <init_arduinoData>:
}


void init_arduinoData(){
	arduinoData.motorEncoderLVal = 0;
     234:	e2 e8       	ldi	r30, 0x82	; 130
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	11 82       	std	Z+1, r1	; 0x01
     23a:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;
     23c:	13 82       	std	Z+3, r1	; 0x03
     23e:	12 82       	std	Z+2, r1	; 0x02
     240:	08 95       	ret

00000242 <clearSendData>:
	
	TWCR |= (1 << TWINT);
}


void clearSendData(){
     242:	eb eb       	ldi	r30, 0xBB	; 187
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	8f ec       	ldi	r24, 0xCF	; 207
     248:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     24a:	11 92       	st	Z+, r1
	TWCR |= (1 << TWINT);
}


void clearSendData(){
	for(int i = 0; i < DATASIZE; i++){
     24c:	e8 17       	cp	r30, r24
     24e:	f9 07       	cpc	r31, r25
     250:	e1 f7       	brne	.-8      	; 0x24a <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     252:	08 95       	ret

00000254 <clearReceiveData>:


void clearReceiveData(){
     254:	ec e8       	ldi	r30, 0x8C	; 140
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 ea       	ldi	r24, 0xA0	; 160
     25a:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     25c:	11 92       	st	Z+, r1
	}
}


void clearReceiveData(){
	for(int i = 0; i < DATASIZE; i++){
     25e:	e8 17       	cp	r30, r24
     260:	f9 07       	cpc	r31, r25
     262:	e1 f7       	brne	.-8      	; 0x25c <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     264:	08 95       	ret

00000266 <rp6DataInterpreter>:
		case(1): rp6DataInterpreter(); break;
	}
}


void rp6DataInterpreter(){
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
	if(receiveData[2]-1 == 0){
     26a:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <receiveData+0x2>
     26e:	21 30       	cpi	r18, 0x01	; 1
     270:	49 f4       	brne	.+18     	; 0x284 <rp6DataInterpreter+0x1e>
		rp6Data.driveSpeed = 0;
     272:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <rp6Data>
     276:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <rp6Data+0x1>
     27a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <rp6Data+0x2>
     27e:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <rp6Data+0x3>
     282:	12 c0       	rjmp	.+36     	; 0x2a8 <rp6DataInterpreter+0x42>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     284:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <receiveData+0x1>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	a0 e0       	ldi	r26, 0x00	; 0
     28c:	b0 e0       	ldi	r27, 0x00	; 0
     28e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <rp6Data>
     292:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <rp6Data+0x1>
     296:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <rp6Data+0x2>
     29a:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <rp6Data+0x3>
	}
	
	if(receiveData[2] < 1){
     29e:	21 11       	cpse	r18, r1
     2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <rp6DataInterpreter+0x42>
		rp6Data.driveDirection = 0;
     2a2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <rp6Data+0x4>
     2a6:	03 c0       	rjmp	.+6      	; 0x2ae <rp6DataInterpreter+0x48>
	}else{
		rp6Data.driveDirection = 1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <rp6Data+0x4>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     2ae:	c0 ea       	ldi	r28, 0xA0	; 160
     2b0:	d0 e0       	ldi	r29, 0x00	; 0
     2b2:	ec e8       	ldi	r30, 0x8C	; 140
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	83 81       	ldd	r24, Z+3	; 0x03
     2b8:	81 50       	subi	r24, 0x01	; 1
     2ba:	8d 83       	std	Y+5, r24	; 0x05
	rp6Data.accelerationRate = (receiveData[4] << 8) + receiveData[5];
     2bc:	84 81       	ldd	r24, Z+4	; 0x04
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	98 2f       	mov	r25, r24
     2c2:	88 27       	eor	r24, r24
     2c4:	25 81       	ldd	r18, Z+5	; 0x05
     2c6:	82 0f       	add	r24, r18
     2c8:	91 1d       	adc	r25, r1
     2ca:	9f 83       	std	Y+7, r25	; 0x07
     2cc:	8e 83       	std	Y+6, r24	; 0x06
	rp6Data.turnRate = (receiveData[6] << 8) + receiveData[7];
     2ce:	86 81       	ldd	r24, Z+6	; 0x06
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	98 2f       	mov	r25, r24
     2d4:	88 27       	eor	r24, r24
     2d6:	27 81       	ldd	r18, Z+7	; 0x07
     2d8:	82 0f       	add	r24, r18
     2da:	91 1d       	adc	r25, r1
     2dc:	99 87       	std	Y+9, r25	; 0x09
     2de:	88 87       	std	Y+8, r24	; 0x08
	rp6Data.driveSpeedThreshold = (receiveData[8] << 8) + receiveData[9];
     2e0:	80 85       	ldd	r24, Z+8	; 0x08
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	98 2f       	mov	r25, r24
     2e6:	88 27       	eor	r24, r24
     2e8:	21 85       	ldd	r18, Z+9	; 0x09
     2ea:	82 0f       	add	r24, r18
     2ec:	91 1d       	adc	r25, r1
     2ee:	9b 87       	std	Y+11, r25	; 0x0b
     2f0:	8a 87       	std	Y+10, r24	; 0x0a
	rp6Data.updateSpeed = (receiveData[10] << 8) + receiveData[11];
     2f2:	82 85       	ldd	r24, Z+10	; 0x0a
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	98 2f       	mov	r25, r24
     2f8:	88 27       	eor	r24, r24
     2fa:	23 85       	ldd	r18, Z+11	; 0x0b
     2fc:	82 0f       	add	r24, r18
     2fe:	91 1d       	adc	r25, r1
     300:	09 2e       	mov	r0, r25
     302:	00 0c       	add	r0, r0
     304:	aa 0b       	sbc	r26, r26
     306:	bb 0b       	sbc	r27, r27
     308:	8c 87       	std	Y+12, r24	; 0x0c
     30a:	9d 87       	std	Y+13, r25	; 0x0d
     30c:	ae 87       	std	Y+14, r26	; 0x0e
     30e:	bf 87       	std	Y+15, r27	; 0x0f
	rp6Data.enableBeeper = receiveData[12];
     310:	84 85       	ldd	r24, Z+12	; 0x0c
     312:	88 8b       	std	Y+16, r24	; 0x10
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
     314:	85 85       	ldd	r24, Z+13	; 0x0d
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	98 2f       	mov	r25, r24
     31a:	88 27       	eor	r24, r24
     31c:	26 85       	ldd	r18, Z+14	; 0x0e
     31e:	82 0f       	add	r24, r18
     320:	91 1d       	adc	r25, r1
     322:	9a 8b       	std	Y+18, r25	; 0x12
     324:	89 8b       	std	Y+17, r24	; 0x11
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <I2C_receiveInterpreter>:
}


void I2C_receiveInterpreter(){
	int dataSet = receiveData[0];
	switch(dataSet){
     32c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <receiveData>
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	11 f4       	brne	.+4      	; 0x338 <I2C_receiveInterpreter+0xc>
		case(1): rp6DataInterpreter(); break;
     334:	0e 94 33 01 	call	0x266	; 0x266 <rp6DataInterpreter>
     338:	08 95       	ret

0000033a <arduinoDataConstructor>:
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
}


void arduinoDataConstructor(){
	clearSendData();
     33a:	0e 94 21 01 	call	0x242	; 0x242 <clearSendData>
	
	sendData[0] = 1;
     33e:	eb eb       	ldi	r30, 0xBB	; 187
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 83       	st	Z, r24
	
	sendData[1] = (arduinoData.motorEncoderLVal >> 8);
     346:	a2 e8       	ldi	r26, 0x82	; 130
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	8c 91       	ld	r24, X
     34c:	11 96       	adiw	r26, 0x01	; 1
     34e:	9c 91       	ld	r25, X
     350:	11 97       	sbiw	r26, 0x01	; 1
     352:	91 83       	std	Z+1, r25	; 0x01
	sendData[2] = arduinoData.motorEncoderLVal;
     354:	82 83       	std	Z+2, r24	; 0x02
	
	sendData[3] = (arduinoData.motorEncoderRVal >> 8);
     356:	12 96       	adiw	r26, 0x02	; 2
     358:	8c 91       	ld	r24, X
     35a:	12 97       	sbiw	r26, 0x02	; 2
     35c:	13 96       	adiw	r26, 0x03	; 3
     35e:	9c 91       	ld	r25, X
     360:	13 97       	sbiw	r26, 0x03	; 3
     362:	93 83       	std	Z+3, r25	; 0x03
	sendData[4] = arduinoData.motorEncoderRVal;
     364:	84 83       	std	Z+4, r24	; 0x04
	
	sendData[5] = (arduinoData.distanceDrivenL >> 8);
     366:	14 96       	adiw	r26, 0x04	; 4
     368:	8c 91       	ld	r24, X
     36a:	14 97       	sbiw	r26, 0x04	; 4
     36c:	15 96       	adiw	r26, 0x05	; 5
     36e:	9c 91       	ld	r25, X
     370:	15 97       	sbiw	r26, 0x05	; 5
     372:	95 83       	std	Z+5, r25	; 0x05
	sendData[6] = arduinoData.distanceDrivenL;
     374:	86 83       	std	Z+6, r24	; 0x06
	
	sendData[7] = (arduinoData.distanceDrivenR >> 8);
     376:	16 96       	adiw	r26, 0x06	; 6
     378:	8c 91       	ld	r24, X
     37a:	16 97       	sbiw	r26, 0x06	; 6
     37c:	17 96       	adiw	r26, 0x07	; 7
     37e:	9c 91       	ld	r25, X
     380:	17 97       	sbiw	r26, 0x07	; 7
     382:	97 83       	std	Z+7, r25	; 0x07
	sendData[8] = arduinoData.distanceDrivenR;
     384:	80 87       	std	Z+8, r24	; 0x08
	
	sendData[9] = (arduinoData.totalDistance >> 8);
     386:	18 96       	adiw	r26, 0x08	; 8
     388:	8c 91       	ld	r24, X
     38a:	18 97       	sbiw	r26, 0x08	; 8
     38c:	19 96       	adiw	r26, 0x09	; 9
     38e:	9c 91       	ld	r25, X
     390:	91 87       	std	Z+9, r25	; 0x09
	sendData[10] = arduinoData.totalDistance;
     392:	82 87       	std	Z+10, r24	; 0x0a
     394:	e6 ec       	ldi	r30, 0xC6	; 198
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	8f ec       	ldi	r24, 0xCF	; 207
     39a:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i = 11; i < DATASIZE; i++){
		sendData[i] = 0;
     39c:	11 92       	st	Z+, r1
	sendData[8] = arduinoData.distanceDrivenR;
	
	sendData[9] = (arduinoData.totalDistance >> 8);
	sendData[10] = arduinoData.totalDistance;
	
	for(int i = 11; i < DATASIZE; i++){
     39e:	e8 17       	cp	r30, r24
     3a0:	f9 07       	cpc	r31, r25
     3a2:	e1 f7       	brne	.-8      	; 0x39c <arduinoDataConstructor+0x62>
		sendData[i] = 0;
	}
}
     3a4:	08 95       	ret

000003a6 <__vector_19>:
	arduinoData.motorEncoderLVal = 0;
	arduinoData.motorEncoderRVal = 0;
}


ISR(TWI_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	static int byteCounter = 0;
	switch(TWSR){
     3c8:	81 b1       	in	r24, 0x01	; 1
     3ca:	80 3a       	cpi	r24, 0xA0	; 160
     3cc:	21 f1       	breq	.+72     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3ce:	28 f4       	brcc	.+10     	; 0x3da <__vector_19+0x34>
     3d0:	80 36       	cpi	r24, 0x60	; 96
     3d2:	41 f0       	breq	.+16     	; 0x3e4 <__vector_19+0x3e>
     3d4:	80 38       	cpi	r24, 0x80	; 128
     3d6:	69 f0       	breq	.+26     	; 0x3f2 <__vector_19+0x4c>
     3d8:	39 c0       	rjmp	.+114    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3da:	88 3a       	cpi	r24, 0xA8	; 168
     3dc:	f9 f0       	breq	.+62     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3de:	88 3b       	cpi	r24, 0xB8	; 184
     3e0:	39 f1       	breq	.+78     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3e2:	34 c0       	rjmp	.+104    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case 0x60:
			clearReceiveData();
     3e4:	0e 94 2a 01 	call	0x254	; 0x254 <clearReceiveData>
			byteCounter = 0;
<<<<<<< HEAD
     3d0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1969+0x1>
     3d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1969>
=======
     3e8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1966+0x1>
     3ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1966>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
		break;
     3f0:	2d c0       	rjmp	.+90     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		
		case 0x80:
			if(byteCounter < 20){
<<<<<<< HEAD
     3da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1969>
     3de:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1969+0x1>
     3e2:	84 31       	cpi	r24, 0x14	; 20
     3e4:	91 05       	cpc	r25, r1
     3e6:	34 f5       	brge	.+76     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
=======
     3f2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1966>
     3f6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1966+0x1>
     3fa:	84 31       	cpi	r24, 0x14	; 20
     3fc:	91 05       	cpc	r25, r1
     3fe:	34 f5       	brge	.+76     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
				receiveData[byteCounter] = TWDR;
     400:	23 b1       	in	r18, 0x03	; 3
     402:	fc 01       	movw	r30, r24
     404:	e4 57       	subi	r30, 0x74	; 116
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	20 83       	st	Z, r18
				byteCounter++;
<<<<<<< HEAD
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1969+0x1>
     3f8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1969>
     3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
=======
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1966+0x1>
     410:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1966>
     414:	1b c0       	rjmp	.+54     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
			}
		break;
		
		case 0xA0:
			I2C_receiveInterpreter();
     416:	0e 94 96 01 	call	0x32c	; 0x32c <I2C_receiveInterpreter>
		break;
     41a:	18 c0       	rjmp	.+48     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		
		case 0xA8:
			arduinoDataConstructor();
     41c:	0e 94 9d 01 	call	0x33a	; 0x33a <arduinoDataConstructor>
			byteCounter = 0;
<<<<<<< HEAD
     408:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1969+0x1>
     40c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1969>
=======
     420:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1966+0x1>
     424:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1966>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
			TWDR = sendData[byteCounter];
     428:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <sendData>
     42c:	83 b9       	out	0x03, r24	; 3
		break;
     42e:	0e c0       	rjmp	.+28     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		
		case 0xB8:
			byteCounter++;
<<<<<<< HEAD
     418:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1969>
     41c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1969+0x1>
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1969+0x1>
     426:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1969>
=======
     430:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1966>
     434:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1966+0x1>
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1966+0x1>
     43e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1966>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
			TWDR = sendData[byteCounter];
     442:	fc 01       	movw	r30, r24
     444:	e5 54       	subi	r30, 0x45	; 69
     446:	ff 4f       	sbci	r31, 0xFF	; 255
     448:	80 81       	ld	r24, Z
     44a:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);
     44c:	86 b7       	in	r24, 0x36	; 54
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	86 bf       	out	0x36, r24	; 54
}
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	bf 91       	pop	r27
     458:	af 91       	pop	r26
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	7f 91       	pop	r23
     460:	6f 91       	pop	r22
     462:	5f 91       	pop	r21
     464:	4f 91       	pop	r20
     466:	3f 91       	pop	r19
     468:	2f 91       	pop	r18
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     474:	81 b3       	in	r24, 0x11	; 17
     476:	80 63       	ori	r24, 0x30	; 48
     478:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     47a:	81 b3       	in	r24, 0x11	; 17
     47c:	83 7f       	andi	r24, 0xF3	; 243
     47e:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     480:	84 b3       	in	r24, 0x14	; 20
     482:	8c 60       	ori	r24, 0x0C	; 12
     484:	84 bb       	out	0x14, r24	; 20
     486:	08 95       	ret

00000488 <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     488:	8f b5       	in	r24, 0x2f	; 47
     48a:	80 68       	ori	r24, 0x80	; 128
     48c:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     48e:	8f b5       	in	r24, 0x2f	; 47
     490:	80 62       	ori	r24, 0x20	; 32
     492:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     494:	8f b5       	in	r24, 0x2f	; 47
     496:	82 60       	ori	r24, 0x02	; 2
     498:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     49a:	8e b5       	in	r24, 0x2e	; 46
     49c:	80 61       	ori	r24, 0x10	; 16
     49e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     4a0:	8e b5       	in	r24, 0x2e	; 46
     4a2:	81 60       	ori	r24, 0x01	; 1
     4a4:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
     4a8:	99 ef       	ldi	r25, 0xF9	; 249
     4aa:	97 bd       	out	0x27, r25	; 39
     4ac:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     4ae:	1b bc       	out	0x2b, r1	; 43
     4b0:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     4b2:	19 bc       	out	0x29, r1	; 41
     4b4:	18 bc       	out	0x28, r1	; 40
     4b6:	08 95       	ret

000004b8 <init_motor_encoder>:
}


void init_motor_encoder(){
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     4b8:	85 b7       	in	r24, 0x35	; 53
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     4be:	85 b7       	in	r24, 0x35	; 53
     4c0:	84 60       	ori	r24, 0x04	; 4
     4c2:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     4c4:	8b b7       	in	r24, 0x3b	; 59
     4c6:	80 64       	ori	r24, 0x40	; 64
     4c8:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     4ca:	8b b7       	in	r24, 0x3b	; 59
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	8b bf       	out	0x3b, r24	; 59
     4d0:	08 95       	ret

000004d2 <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     4d2:	0e 94 3a 02 	call	0x474	; 0x474 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     4d6:	0e 94 44 02 	call	0x488	; 0x488 <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     4da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <init_motor_encoder>
     4de:	08 95       	ret

000004e0 <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	2f 93       	push	r18
     4ec:	3f 93       	push	r19
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	arduinoData.motorEncoderLVal++;							//Increase the encoder variable
     4f6:	e2 e8       	ldi	r30, 0x82	; 130
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	91 81       	ldd	r25, Z+1	; 0x01
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	91 83       	std	Z+1, r25	; 0x01
     502:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     504:	2f ef       	ldi	r18, 0xFF	; 255
     506:	39 e5       	ldi	r19, 0x59	; 89
     508:	82 e6       	ldi	r24, 0x62	; 98
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	30 40       	sbci	r19, 0x00	; 0
     510:	80 40       	sbci	r24, 0x00	; 0
     512:	90 40       	sbci	r25, 0x00	; 0
     514:	d9 f7       	brne	.-10     	; 0x50c <__vector_1+0x2c>
     516:	00 c0       	rjmp	.+0      	; 0x518 <__vector_1+0x38>
     518:	00 00       	nop
	_delay_ms(30000);
}
     51a:	ff 91       	pop	r31
     51c:	ef 91       	pop	r30
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_2>:


ISR(INT1_vect){
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
	arduinoData.motorEncoderRVal++;							//Increase the encoder variable
     546:	e2 e8       	ldi	r30, 0x82	; 130
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	82 81       	ldd	r24, Z+2	; 0x02
     54c:	93 81       	ldd	r25, Z+3	; 0x03
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	93 83       	std	Z+3, r25	; 0x03
     552:	82 83       	std	Z+2, r24	; 0x02
     554:	2f ef       	ldi	r18, 0xFF	; 255
     556:	39 e5       	ldi	r19, 0x59	; 89
     558:	82 e6       	ldi	r24, 0x62	; 98
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	21 50       	subi	r18, 0x01	; 1
     55e:	30 40       	sbci	r19, 0x00	; 0
     560:	80 40       	sbci	r24, 0x00	; 0
     562:	90 40       	sbci	r25, 0x00	; 0
     564:	d9 f7       	brne	.-10     	; 0x55c <__vector_2+0x2c>
     566:	00 c0       	rjmp	.+0      	; 0x568 <__vector_2+0x38>
     568:	00 00       	nop
	_delay_ms(30000);
}
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     580:	89 2b       	or	r24, r25
     582:	39 f0       	breq	.+14     	; 0x592 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     584:	8b b7       	in	r24, 0x3b	; 59
     586:	80 64       	ori	r24, 0x40	; 64
     588:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     58a:	8b b7       	in	r24, 0x3b	; 59
     58c:	80 68       	ori	r24, 0x80	; 128
     58e:	8b bf       	out	0x3b, r24	; 59
     590:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     592:	8b b7       	in	r24, 0x3b	; 59
     594:	8f 7b       	andi	r24, 0xBF	; 191
     596:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     598:	8b b7       	in	r24, 0x3b	; 59
     59a:	8f 77       	andi	r24, 0x7F	; 127
     59c:	8b bf       	out	0x3b, r24	; 59
     59e:	08 95       	ret

000005a0 <motorDriver>:
	}
}


int motorDriver(struct rp6DataBP rp6Data){
     5a0:	2f 92       	push	r2
     5a2:	3f 92       	push	r3
     5a4:	4f 92       	push	r4
     5a6:	5f 92       	push	r5
     5a8:	6f 92       	push	r6
     5aa:	7f 92       	push	r7
     5ac:	8f 92       	push	r8
     5ae:	9f 92       	push	r9
     5b0:	af 92       	push	r10
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	a4 97       	sbiw	r28, 0x24	; 36
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	49 ac       	ldd	r4, Y+57	; 0x39
     5d6:	5a ac       	ldd	r5, Y+58	; 0x3a
     5d8:	6b ac       	ldd	r6, Y+59	; 0x3b
     5da:	7c ac       	ldd	r7, Y+60	; 0x3c
     5dc:	9d ac       	ldd	r9, Y+61	; 0x3d
     5de:	ae ac       	ldd	r10, Y+62	; 0x3e
     5e0:	a9 86       	std	Y+9, r10	; 0x09
     5e2:	21 96       	adiw	r28, 0x01	; 1
     5e4:	ce ac       	ldd	r12, Y+62	; 0x3e
     5e6:	df ac       	ldd	r13, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	db 86       	std	Y+11, r13	; 0x0b
     5ec:	ca 86       	std	Y+10, r12	; 0x0a
     5ee:	23 96       	adiw	r28, 0x03	; 3
     5f0:	ee ac       	ldd	r14, Y+62	; 0x3e
     5f2:	ff ac       	ldd	r15, Y+63	; 0x3f
     5f4:	23 97       	sbiw	r28, 0x03	; 3
     5f6:	fc a2       	std	Y+36, r15	; 0x24
     5f8:	eb a2       	std	Y+35, r14	; 0x23
     5fa:	25 96       	adiw	r28, 0x05	; 5
     5fc:	2e ac       	ldd	r2, Y+62	; 0x3e
     5fe:	3f ac       	ldd	r3, Y+63	; 0x3f
     600:	25 97       	sbiw	r28, 0x05	; 5
	static uint32_t leftMotorSpeed = 0;
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
<<<<<<< HEAD
     5c2:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     5c6:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.2026>
     5ca:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.2026+0x1>
     5ce:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.2026+0x2>
     5d2:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.2026+0x3>
     5d6:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.2026+0x4>
     5da:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.2026+0x5>
     5de:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.2026+0x6>
     5e2:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.2026+0x7>
     5e6:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpdi2>
     5ea:	08 f4       	brcc	.+2      	; 0x5ee <motorDriver+0xa2>
     5ec:	b2 c3       	rjmp	.+1892   	; 0xd52 <__stack+0x4f3>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     5ee:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     5f2:	a2 2e       	mov	r10, r18
     5f4:	b3 2e       	mov	r11, r19
     5f6:	c4 2e       	mov	r12, r20
     5f8:	d5 2e       	mov	r13, r21
     5fa:	e6 2f       	mov	r30, r22
     5fc:	f7 2f       	mov	r31, r23
     5fe:	8b 8f       	std	Y+27, r24	; 0x1b
     600:	9e a3       	std	Y+38, r25	; 0x26
     602:	a8 ee       	ldi	r26, 0xE8	; 232
     604:	b3 e0       	ldi	r27, 0x03	; 3
     606:	a4 01       	movw	r20, r8
     608:	93 01       	movw	r18, r6
     60a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__muluhisi3>
     60e:	7b 01       	movw	r14, r22
     610:	8c 01       	movw	r16, r24
     612:	26 2f       	mov	r18, r22
     614:	3f 2d       	mov	r19, r15
     616:	40 2f       	mov	r20, r16
     618:	51 2f       	mov	r21, r17
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	ee 2e       	mov	r14, r30
     624:	ff 2e       	mov	r15, r31
     626:	0b 8d       	ldd	r16, Y+27	; 0x1b
     628:	1e a1       	ldd	r17, Y+38	; 0x26
     62a:	0e 94 07 0a 	call	0x140e	; 0x140e <__adddi3>
     62e:	72 2e       	mov	r7, r18
     630:	83 2e       	mov	r8, r19
     632:	94 2e       	mov	r9, r20
     634:	65 2e       	mov	r6, r21
     636:	6e a3       	std	Y+38, r22	; 0x26
     638:	7f a3       	std	Y+39, r23	; 0x27
     63a:	88 a7       	std	Y+40, r24	; 0x28
     63c:	99 a7       	std	Y+41, r25	; 0x29
     63e:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2026>
     642:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2026+0x1>
     646:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2026+0x2>
     64a:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2026+0x3>
     64e:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2026+0x4>
     652:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2026+0x5>
     656:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2026+0x6>
     65a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2026+0x7>
=======
     602:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     606:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.2023>
     60a:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.2023+0x1>
     60e:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.2023+0x2>
     612:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.2023+0x3>
     616:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.2023+0x4>
     61a:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.2023+0x5>
     61e:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.2023+0x6>
     622:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.2023+0x7>
     626:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__cmpdi2>
     62a:	08 f4       	brcc	.+2      	; 0x62e <motorDriver+0x8e>
     62c:	fb c4       	rjmp	.+2550   	; 0x1024 <__stack+0x7c5>
		return 0;
	}else{
		updateTimer = micros() + 200000;//rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     62e:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     632:	2c 8b       	std	Y+20, r18	; 0x14
     634:	3d 8b       	std	Y+21, r19	; 0x15
     636:	4e 8b       	std	Y+22, r20	; 0x16
     638:	5f 8b       	std	Y+23, r21	; 0x17
     63a:	68 8f       	std	Y+24, r22	; 0x18
     63c:	79 8f       	std	Y+25, r23	; 0x19
     63e:	8a 8f       	std	Y+26, r24	; 0x1a
     640:	9b 8f       	std	Y+27, r25	; 0x1b
     642:	20 5c       	subi	r18, 0xC0	; 192
     644:	32 4f       	sbci	r19, 0xF2	; 242
     646:	4c 4f       	sbci	r20, 0xFC	; 252
     648:	5f 4f       	sbci	r21, 0xFF	; 255
     64a:	6f 4f       	sbci	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	8f 4f       	sbci	r24, 0xFF	; 255
     650:	9f 4f       	sbci	r25, 0xFF	; 255
     652:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2023>
     656:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2023+0x1>
     65a:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2023+0x2>
     65e:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2023+0x3>
     662:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2023+0x4>
     666:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2023+0x5>
     66a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2023+0x6>
     66e:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2023+0x7>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	}
	
	//rp6Data.driveSpeed = 100;
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     672:	a0 e0       	ldi	r26, 0x00	; 0
     674:	b4 e6       	ldi	r27, 0x64	; 100
     676:	a3 01       	movw	r20, r6
     678:	92 01       	movw	r18, r4
     67a:	0e 94 35 0b 	call	0x166a	; 0x166a <__muluhisi3>
     67e:	24 e6       	ldi	r18, 0x64	; 100
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	0e 94 13 0b 	call	0x1626	; 0x1626 <__udivmodsi4>
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     68a:	c1 01       	movw	r24, r2
     68c:	a0 e0       	ldi	r26, 0x00	; 0
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	28 17       	cp	r18, r24
     692:	39 07       	cpc	r19, r25
     694:	4a 07       	cpc	r20, r26
     696:	5b 07       	cpc	r21, r27
     698:	18 f4       	brcc	.+6      	; 0x6a0 <motorDriver+0x100>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	a9 01       	movw	r20, r18
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
<<<<<<< HEAD
     68e:	fa 8c       	ldd	r15, Y+26	; 0x1a
     690:	ef 2d       	mov	r30, r15
     692:	ff 0c       	add	r15, r15
     694:	ff 0b       	sbc	r31, r31
     696:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <currentDriveDirection.2027>
     69a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <currentDriveDirection.2027+0x1>
     69e:	e2 17       	cp	r30, r18
     6a0:	f3 07       	cpc	r31, r19
     6a2:	59 f1       	breq	.+86     	; 0x6fa <motorDriver+0x1ae>
     6a4:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <currentDriveSpeed.2030>
     6a8:	0a 8b       	std	Y+18, r16	; 0x12
     6aa:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <currentDriveSpeed.2030+0x1>
     6ae:	1b 8b       	std	Y+19, r17	; 0x13
     6b0:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <currentDriveSpeed.2030+0x2>
     6b4:	2c 8b       	std	Y+20, r18	; 0x14
     6b6:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <currentDriveSpeed.2030+0x3>
     6ba:	3d 8b       	std	Y+21, r19	; 0x15
     6bc:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <currentDriveSpeed.2030+0x4>
     6c0:	4e 8b       	std	Y+22, r20	; 0x16
     6c2:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <currentDriveSpeed.2030+0x5>
     6c6:	5f 8b       	std	Y+23, r21	; 0x17
     6c8:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <currentDriveSpeed.2030+0x6>
     6cc:	68 8f       	std	Y+24, r22	; 0x18
     6ce:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <currentDriveSpeed.2030+0x7>
     6d2:	79 8f       	std	Y+25, r23	; 0x19
     6d4:	20 2f       	mov	r18, r16
     6d6:	31 2f       	mov	r19, r17
     6d8:	4c 89       	ldd	r20, Y+20	; 0x14
     6da:	5d 89       	ldd	r21, Y+21	; 0x15
     6dc:	6e 89       	ldd	r22, Y+22	; 0x16
     6de:	7f 89       	ldd	r23, Y+23	; 0x17
     6e0:	88 8d       	ldd	r24, Y+24	; 0x18
     6e2:	99 8d       	ldd	r25, Y+25	; 0x19
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	0e 94 2e 0a 	call	0x145c	; 0x145c <__cmpdi2_s8>
     6ea:	29 f4       	brne	.+10     	; 0x6f6 <motorDriver+0x1aa>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     6ec:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2027+0x1>
     6f0:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2027>
     6f4:	53 c0       	rjmp	.+166    	; 0x79c <motorDriver+0x250>
=======
     6a0:	e9 2d       	mov	r30, r9
     6a2:	99 0c       	add	r9, r9
     6a4:	ff 0b       	sbc	r31, r31
     6a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2024>
     6aa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2024+0x1>
     6ae:	e8 17       	cp	r30, r24
     6b0:	f9 07       	cpc	r31, r25
     6b2:	61 f1       	breq	.+88     	; 0x70c <motorDriver+0x16c>
     6b4:	f0 90 70 00 	lds	r15, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     6b8:	f9 82       	std	Y+1, r15	; 0x01
     6ba:	00 91 71 00 	lds	r16, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     6be:	0a 83       	std	Y+2, r16	; 0x02
     6c0:	10 91 72 00 	lds	r17, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     6c4:	1b 83       	std	Y+3, r17	; 0x03
     6c6:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     6ca:	2c 83       	std	Y+4, r18	; 0x04
     6cc:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     6d0:	3d 83       	std	Y+5, r19	; 0x05
     6d2:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     6d6:	4e 83       	std	Y+6, r20	; 0x06
     6d8:	50 91 76 00 	lds	r21, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     6dc:	5f 83       	std	Y+7, r21	; 0x07
     6de:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     6e2:	68 87       	std	Y+8, r22	; 0x08
     6e4:	2f 2d       	mov	r18, r15
     6e6:	30 2f       	mov	r19, r16
     6e8:	41 2f       	mov	r20, r17
     6ea:	5c 81       	ldd	r21, Y+4	; 0x04
     6ec:	6d 81       	ldd	r22, Y+5	; 0x05
     6ee:	7e 81       	ldd	r23, Y+6	; 0x06
     6f0:	8f 81       	ldd	r24, Y+7	; 0x07
     6f2:	98 85       	ldd	r25, Y+8	; 0x08
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	0e 94 80 0b 	call	0x1700	; 0x1700 <__cmpdi2_s8>
     6fa:	29 f4       	brne	.+10     	; 0x706 <motorDriver+0x166>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     6fc:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2024+0x1>
     700:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2024>
     704:	54 c0       	rjmp	.+168    	; 0x7ae <motorDriver+0x20e>
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	a9 01       	movw	r20, r18
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
<<<<<<< HEAD
     6fa:	7c 01       	movw	r14, r24
     6fc:	00 e0       	ldi	r16, 0x00	; 0
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	a9 01       	movw	r20, r18
     706:	8a 8b       	std	Y+18, r24	; 0x12
     708:	fb 8a       	std	Y+19, r15	; 0x13
     70a:	0c 8b       	std	Y+20, r16	; 0x14
     70c:	1d 8b       	std	Y+21, r17	; 0x15
     70e:	2e 8b       	std	Y+22, r18	; 0x16
     710:	3f 8b       	std	Y+23, r19	; 0x17
     712:	48 8f       	std	Y+24, r20	; 0x18
     714:	59 8f       	std	Y+25, r21	; 0x19
     716:	f0 90 70 00 	lds	r15, 0x0070	; 0x800070 <currentDriveSpeed.2030>
     71a:	fa 8e       	std	Y+26, r15	; 0x1a
     71c:	00 91 71 00 	lds	r16, 0x0071	; 0x800071 <currentDriveSpeed.2030+0x1>
     720:	0c a7       	std	Y+44, r16	; 0x2c
     722:	10 91 72 00 	lds	r17, 0x0072	; 0x800072 <currentDriveSpeed.2030+0x2>
     726:	1d a7       	std	Y+45, r17	; 0x2d
     728:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <currentDriveSpeed.2030+0x3>
     72c:	2e a7       	std	Y+46, r18	; 0x2e
     72e:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <currentDriveSpeed.2030+0x4>
     732:	3f a7       	std	Y+47, r19	; 0x2f
     734:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <currentDriveSpeed.2030+0x5>
     738:	48 ab       	std	Y+48, r20	; 0x30
     73a:	40 90 76 00 	lds	r4, 0x0076	; 0x800076 <currentDriveSpeed.2030+0x6>
     73e:	50 90 77 00 	lds	r5, 0x0077	; 0x800077 <currentDriveSpeed.2030+0x7>
     742:	2e 2d       	mov	r18, r14
     744:	3b 89       	ldd	r19, Y+19	; 0x13
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	af 2c       	mov	r10, r15
     754:	b0 2e       	mov	r11, r16
     756:	c1 2e       	mov	r12, r17
     758:	de a4       	ldd	r13, Y+46	; 0x2e
     75a:	ef a4       	ldd	r14, Y+47	; 0x2f
     75c:	f8 a8       	ldd	r15, Y+48	; 0x30
     75e:	04 2d       	mov	r16, r4
     760:	15 2d       	mov	r17, r5
     762:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subdi3>
     766:	2b 8f       	std	Y+27, r18	; 0x1b
     768:	39 ab       	std	Y+49, r19	; 0x31
     76a:	a4 2e       	mov	r10, r20
     76c:	b5 2e       	mov	r11, r21
     76e:	06 2f       	mov	r16, r22
     770:	17 2f       	mov	r17, r23
     772:	8a ab       	std	Y+50, r24	; 0x32
     774:	9b ab       	std	Y+51, r25	; 0x33
     776:	0e 94 08 08 	call	0x1010	; 0x1010 <__floatdisf>
     77a:	6b 01       	movw	r12, r22
     77c:	7c 01       	movw	r14, r24
     77e:	a7 01       	movw	r20, r14
     780:	96 01       	movw	r18, r12
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     78a:	0e 94 5d 09 	call	0x12ba	; 0x12ba <sqrt>
=======
     70c:	59 01       	movw	r10, r18
     70e:	6a 01       	movw	r12, r20
     710:	e1 2c       	mov	r14, r1
     712:	f1 2c       	mov	r15, r1
     714:	87 01       	movw	r16, r14
     716:	29 83       	std	Y+1, r18	; 0x01
     718:	ba 82       	std	Y+2, r11	; 0x02
     71a:	cb 82       	std	Y+3, r12	; 0x03
     71c:	dc 82       	std	Y+4, r13	; 0x04
     71e:	ed 82       	std	Y+5, r14	; 0x05
     720:	fe 82       	std	Y+6, r15	; 0x06
     722:	0f 83       	std	Y+7, r16	; 0x07
     724:	18 87       	std	Y+8, r17	; 0x08
     726:	b0 90 70 00 	lds	r11, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     72a:	bc 8e       	std	Y+28, r11	; 0x1c
     72c:	c0 90 71 00 	lds	r12, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     730:	cd 8e       	std	Y+29, r12	; 0x1d
     732:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     736:	de 8e       	std	Y+30, r13	; 0x1e
     738:	e0 90 73 00 	lds	r14, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     73c:	ef 8e       	std	Y+31, r14	; 0x1f
     73e:	f0 90 74 00 	lds	r15, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     742:	f8 a2       	std	Y+32, r15	; 0x20
     744:	00 91 75 00 	lds	r16, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     748:	09 a3       	std	Y+33, r16	; 0x21
     74a:	10 91 76 00 	lds	r17, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     74e:	1a a3       	std	Y+34, r17	; 0x22
     750:	40 90 77 00 	lds	r4, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     754:	2a 2d       	mov	r18, r10
     756:	3a 81       	ldd	r19, Y+2	; 0x02
     758:	4b 81       	ldd	r20, Y+3	; 0x03
     75a:	5c 81       	ldd	r21, Y+4	; 0x04
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	ab 2c       	mov	r10, r11
     766:	bc 2c       	mov	r11, r12
     768:	cd 2c       	mov	r12, r13
     76a:	de 2c       	mov	r13, r14
     76c:	ef 2c       	mov	r14, r15
     76e:	f0 2e       	mov	r15, r16
     770:	01 2f       	mov	r16, r17
     772:	14 2d       	mov	r17, r4
     774:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__subdi3>
     778:	62 2e       	mov	r6, r18
     77a:	73 2e       	mov	r7, r19
     77c:	c4 2e       	mov	r12, r20
     77e:	d5 2e       	mov	r13, r21
     780:	e6 2e       	mov	r14, r22
     782:	f7 2e       	mov	r15, r23
     784:	08 2f       	mov	r16, r24
     786:	19 2f       	mov	r17, r25
     788:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__floatdisf>
     78c:	4b 01       	movw	r8, r22
     78e:	5c 01       	movw	r10, r24
     790:	a5 01       	movw	r20, r10
     792:	94 01       	movw	r18, r8
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     79c:	0e 94 be 0a 	call	0x157c	; 0x157c <sqrt>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     7a0:	0e 94 3a 09 	call	0x1274	; 0x1274 <__fixunssfsi>
     7a4:	60 3d       	cpi	r22, 0xD0	; 208
     7a6:	77 40       	sbci	r23, 0x07	; 7
     7a8:	81 05       	cpc	r24, r1
     7aa:	91 05       	cpc	r25, r1
     7ac:	c8 f4       	brcc	.+50     	; 0x7e0 <motorDriver+0x240>
		currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
<<<<<<< HEAD
     79c:	6a 89       	ldd	r22, Y+18	; 0x12
     79e:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <currentDriveSpeed.2030>
     7a2:	7b 89       	ldd	r23, Y+19	; 0x13
     7a4:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <currentDriveSpeed.2030+0x1>
     7a8:	8c 89       	ldd	r24, Y+20	; 0x14
     7aa:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <currentDriveSpeed.2030+0x2>
     7ae:	9d 89       	ldd	r25, Y+21	; 0x15
     7b0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <currentDriveSpeed.2030+0x3>
     7b4:	ae 89       	ldd	r26, Y+22	; 0x16
     7b6:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <currentDriveSpeed.2030+0x4>
     7ba:	ef 88       	ldd	r14, Y+23	; 0x17
     7bc:	e0 92 75 00 	sts	0x0075, r14	; 0x800075 <currentDriveSpeed.2030+0x5>
     7c0:	f8 8c       	ldd	r15, Y+24	; 0x18
     7c2:	f0 92 76 00 	sts	0x0076, r15	; 0x800076 <currentDriveSpeed.2030+0x6>
     7c6:	09 8d       	ldd	r16, Y+25	; 0x19
     7c8:	00 93 77 00 	sts	0x0077, r16	; 0x800077 <currentDriveSpeed.2030+0x7>
     7cc:	10 c1       	rjmp	.+544    	; 0x9ee <__stack+0x18f>
=======
     7ae:	39 81       	ldd	r19, Y+1	; 0x01
     7b0:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.2027>
     7b4:	4a 81       	ldd	r20, Y+2	; 0x02
     7b6:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <currentDriveSpeed.2027+0x1>
     7ba:	5b 81       	ldd	r21, Y+3	; 0x03
     7bc:	50 93 72 00 	sts	0x0072, r21	; 0x800072 <currentDriveSpeed.2027+0x2>
     7c0:	6c 81       	ldd	r22, Y+4	; 0x04
     7c2:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <currentDriveSpeed.2027+0x3>
     7c6:	7d 81       	ldd	r23, Y+5	; 0x05
     7c8:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <currentDriveSpeed.2027+0x4>
     7cc:	8e 81       	ldd	r24, Y+6	; 0x06
     7ce:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <currentDriveSpeed.2027+0x5>
     7d2:	9f 81       	ldd	r25, Y+7	; 0x07
     7d4:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <currentDriveSpeed.2027+0x6>
     7d8:	a8 85       	ldd	r26, Y+8	; 0x08
     7da:	a0 93 77 00 	sts	0x0077, r26	; 0x800077 <currentDriveSpeed.2027+0x7>
     7de:	91 c1       	rjmp	.+802    	; 0xb02 <__stack+0x2a3>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	}else{																			//If the difference is more than 2000
		if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     7e0:	26 2d       	mov	r18, r6
     7e2:	37 2d       	mov	r19, r7
     7e4:	4c 2d       	mov	r20, r12
     7e6:	5d 2d       	mov	r21, r13
     7e8:	6e 2d       	mov	r22, r14
     7ea:	7f 2d       	mov	r23, r15
     7ec:	80 2f       	mov	r24, r16
     7ee:	91 2f       	mov	r25, r17
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	0e 94 80 0b 	call	0x1700	; 0x1700 <__cmpdi2_s8>
     7f6:	0c f0       	brlt	.+2      	; 0x7fa <motorDriver+0x25a>
     7f8:	bb c0       	rjmp	.+374    	; 0x970 <__stack+0x111>
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     7fa:	41 01       	movw	r8, r2
     7fc:	a1 2c       	mov	r10, r1
     7fe:	b1 2c       	mov	r11, r1
     800:	c1 2c       	mov	r12, r1
     802:	d1 2c       	mov	r13, r1
     804:	76 01       	movw	r14, r12
     806:	2c 8d       	ldd	r18, Y+28	; 0x1c
     808:	3d 8d       	ldd	r19, Y+29	; 0x1d
     80a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     80c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     80e:	68 a1       	ldd	r22, Y+32	; 0x20
     810:	79 a1       	ldd	r23, Y+33	; 0x21
     812:	8a a1       	ldd	r24, Y+34	; 0x22
     814:	94 2d       	mov	r25, r4
     816:	2c 86       	std	Y+12, r2	; 0x0c
     818:	9d 86       	std	Y+13, r9	; 0x0d
     81a:	ae 86       	std	Y+14, r10	; 0x0e
     81c:	bf 86       	std	Y+15, r11	; 0x0f
     81e:	c8 8a       	std	Y+16, r12	; 0x10
     820:	d9 8a       	std	Y+17, r13	; 0x11
     822:	ea 8a       	std	Y+18, r14	; 0x12
     824:	fb 8a       	std	Y+19, r15	; 0x13
     826:	a2 2c       	mov	r10, r2
     828:	b9 2c       	mov	r11, r9
     82a:	c1 2c       	mov	r12, r1
     82c:	d1 2c       	mov	r13, r1
     82e:	e1 2c       	mov	r14, r1
     830:	f1 2c       	mov	r15, r1
     832:	00 e0       	ldi	r16, 0x00	; 0
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__cmpdi2>
     83a:	cc f4       	brge	.+50     	; 0x86e <__stack+0xf>
				currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
<<<<<<< HEAD
     826:	1a 89       	ldd	r17, Y+18	; 0x12
     828:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <currentDriveSpeed.2030>
     82c:	2b 89       	ldd	r18, Y+19	; 0x13
     82e:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <currentDriveSpeed.2030+0x1>
     832:	3c 89       	ldd	r19, Y+20	; 0x14
     834:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <currentDriveSpeed.2030+0x2>
     838:	4d 89       	ldd	r20, Y+21	; 0x15
     83a:	40 93 73 00 	sts	0x0073, r20	; 0x800073 <currentDriveSpeed.2030+0x3>
     83e:	5e 89       	ldd	r21, Y+22	; 0x16
     840:	50 93 74 00 	sts	0x0074, r21	; 0x800074 <currentDriveSpeed.2030+0x4>
     844:	6f 89       	ldd	r22, Y+23	; 0x17
     846:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <currentDriveSpeed.2030+0x5>
     84a:	78 8d       	ldd	r23, Y+24	; 0x18
     84c:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <currentDriveSpeed.2030+0x6>
     850:	89 8d       	ldd	r24, Y+25	; 0x19
     852:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <currentDriveSpeed.2030+0x7>
     856:	cb c0       	rjmp	.+406    	; 0x9ee <__stack+0x18f>
			}else{																			//If the current speed is higher than 5000
				if(rp6Data.accelerationRate > 1500){rp6Data.accelerationRate = 1500;}
				currentDriveSpeed -= rp6Data.accelerationRate;				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     858:	8c a1       	ldd	r24, Y+36	; 0x24
     85a:	9d a1       	ldd	r25, Y+37	; 0x25
     85c:	8d 3d       	cpi	r24, 0xDD	; 221
     85e:	a5 e0       	ldi	r26, 0x05	; 5
     860:	9a 07       	cpc	r25, r26
     862:	10 f0       	brcs	.+4      	; 0x868 <__stack+0x9>
     864:	8c ed       	ldi	r24, 0xDC	; 220
     866:	95 e0       	ldi	r25, 0x05	; 5
     868:	7c 01       	movw	r14, r24
     86a:	00 e0       	ldi	r16, 0x00	; 0
     86c:	10 e0       	ldi	r17, 0x00	; 0
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	a9 01       	movw	r20, r18
     874:	8a 8b       	std	Y+18, r24	; 0x12
     876:	fb 8a       	std	Y+19, r15	; 0x13
     878:	0c 8b       	std	Y+20, r16	; 0x14
     87a:	1d 8b       	std	Y+21, r17	; 0x15
     87c:	2e 8b       	std	Y+22, r18	; 0x16
     87e:	3f 8b       	std	Y+23, r19	; 0x17
     880:	48 8f       	std	Y+24, r20	; 0x18
     882:	59 8f       	std	Y+25, r21	; 0x19
     884:	2a 8d       	ldd	r18, Y+26	; 0x1a
     886:	3c a5       	ldd	r19, Y+44	; 0x2c
     888:	4d a5       	ldd	r20, Y+45	; 0x2d
     88a:	5e a5       	ldd	r21, Y+46	; 0x2e
     88c:	6f a5       	ldd	r22, Y+47	; 0x2f
     88e:	78 a9       	ldd	r23, Y+48	; 0x30
     890:	84 2d       	mov	r24, r4
     892:	95 2d       	mov	r25, r5
     894:	ae 2c       	mov	r10, r14
     896:	bf 2c       	mov	r11, r15
     898:	c1 2c       	mov	r12, r1
     89a:	d1 2c       	mov	r13, r1
     89c:	e1 2c       	mov	r14, r1
     89e:	f1 2c       	mov	r15, r1
     8a0:	00 e0       	ldi	r16, 0x00	; 0
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subdi3>
     8a8:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2030>
     8ac:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2030+0x1>
     8b0:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2030+0x2>
     8b4:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2030+0x3>
     8b8:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2030+0x4>
     8bc:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2030+0x5>
     8c0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2030+0x6>
     8c4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2030+0x7>
     8c8:	92 c0       	rjmp	.+292    	; 0x9ee <__stack+0x18f>
=======
     83c:	e9 81       	ldd	r30, Y+1	; 0x01
     83e:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <currentDriveSpeed.2027>
     842:	aa 80       	ldd	r10, Y+2	; 0x02
     844:	a0 92 71 00 	sts	0x0071, r10	; 0x800071 <currentDriveSpeed.2027+0x1>
     848:	bb 80       	ldd	r11, Y+3	; 0x03
     84a:	b0 92 72 00 	sts	0x0072, r11	; 0x800072 <currentDriveSpeed.2027+0x2>
     84e:	cc 80       	ldd	r12, Y+4	; 0x04
     850:	c0 92 73 00 	sts	0x0073, r12	; 0x800073 <currentDriveSpeed.2027+0x3>
     854:	dd 80       	ldd	r13, Y+5	; 0x05
     856:	d0 92 74 00 	sts	0x0074, r13	; 0x800074 <currentDriveSpeed.2027+0x4>
     85a:	ee 80       	ldd	r14, Y+6	; 0x06
     85c:	e0 92 75 00 	sts	0x0075, r14	; 0x800075 <currentDriveSpeed.2027+0x5>
     860:	ff 80       	ldd	r15, Y+7	; 0x07
     862:	f0 92 76 00 	sts	0x0076, r15	; 0x800076 <currentDriveSpeed.2027+0x6>
     866:	08 85       	ldd	r16, Y+8	; 0x08
     868:	00 93 77 00 	sts	0x0077, r16	; 0x800077 <currentDriveSpeed.2027+0x7>
     86c:	4a c1       	rjmp	.+660    	; 0xb02 <__stack+0x2a3>
			}else{																			//If the current speed is higher than 5000
				if(rp6Data.accelerationRate > rp6Data.driveSpeedThreshold){rp6Data.accelerationRate = rp6Data.driveSpeedThreshold - 300;}
     86e:	2a 85       	ldd	r18, Y+10	; 0x0a
     870:	3b 85       	ldd	r19, Y+11	; 0x0b
     872:	22 16       	cp	r2, r18
     874:	33 06       	cpc	r3, r19
     876:	28 f4       	brcc	.+10     	; 0x882 <__stack+0x23>
     878:	a1 01       	movw	r20, r2
     87a:	4c 52       	subi	r20, 0x2C	; 44
     87c:	51 40       	sbci	r21, 0x01	; 1
     87e:	5b 87       	std	Y+11, r21	; 0x0b
     880:	4a 87       	std	Y+10, r20	; 0x0a
				if(currentDriveSpeed < 7000){currentDriveSpeed -= rp6Data.accelerationRate/2;}
     882:	2c 8d       	ldd	r18, Y+28	; 0x1c
     884:	3d 8d       	ldd	r19, Y+29	; 0x1d
     886:	4e 8d       	ldd	r20, Y+30	; 0x1e
     888:	5f 8d       	ldd	r21, Y+31	; 0x1f
     88a:	68 a1       	ldd	r22, Y+32	; 0x20
     88c:	79 a1       	ldd	r23, Y+33	; 0x21
     88e:	8a a1       	ldd	r24, Y+34	; 0x22
     890:	94 2d       	mov	r25, r4
     892:	27 35       	cpi	r18, 0x57	; 87
     894:	ab e1       	ldi	r26, 0x1B	; 27
     896:	3a 07       	cpc	r19, r26
     898:	41 05       	cpc	r20, r1
     89a:	51 05       	cpc	r21, r1
     89c:	61 05       	cpc	r22, r1
     89e:	71 05       	cpc	r23, r1
     8a0:	81 05       	cpc	r24, r1
     8a2:	91 05       	cpc	r25, r1
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	8c f5       	brge	.+98     	; 0x90a <__stack+0xab>
     8a8:	8a 85       	ldd	r24, Y+10	; 0x0a
     8aa:	9b 85       	ldd	r25, Y+11	; 0x0b
     8ac:	96 95       	lsr	r25
     8ae:	87 95       	ror	r24
     8b0:	6c 01       	movw	r12, r24
     8b2:	e1 2c       	mov	r14, r1
     8b4:	f1 2c       	mov	r15, r1
     8b6:	00 e0       	ldi	r16, 0x00	; 0
     8b8:	10 e0       	ldi	r17, 0x00	; 0
     8ba:	98 01       	movw	r18, r16
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 82       	std	Y+2, r13	; 0x02
     8c0:	eb 82       	std	Y+3, r14	; 0x03
     8c2:	fc 82       	std	Y+4, r15	; 0x04
     8c4:	0d 83       	std	Y+5, r16	; 0x05
     8c6:	1e 83       	std	Y+6, r17	; 0x06
     8c8:	2f 83       	std	Y+7, r18	; 0x07
     8ca:	38 87       	std	Y+8, r19	; 0x08
     8cc:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8ce:	3d 8d       	ldd	r19, Y+29	; 0x1d
     8d0:	8a a1       	ldd	r24, Y+34	; 0x22
     8d2:	94 2d       	mov	r25, r4
     8d4:	ac 2c       	mov	r10, r12
     8d6:	bd 2c       	mov	r11, r13
     8d8:	c1 2c       	mov	r12, r1
     8da:	d1 2c       	mov	r13, r1
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__subdi3>
     8e8:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     8ec:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     8f0:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     8f4:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     8f8:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     8fc:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     900:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     904:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     908:	fc c0       	rjmp	.+504    	; 0xb02 <__stack+0x2a3>
				else{currentDriveSpeed -= rp6Data.accelerationRate;}							//Decelerate with a given percentage of the current speed, determined by accelerationRate
     90a:	0a 85       	ldd	r16, Y+10	; 0x0a
     90c:	1b 85       	ldd	r17, Y+11	; 0x0b
     90e:	78 01       	movw	r14, r16
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	a9 01       	movw	r20, r18
     91a:	e9 82       	std	Y+1, r14	; 0x01
     91c:	fa 82       	std	Y+2, r15	; 0x02
     91e:	0b 83       	std	Y+3, r16	; 0x03
     920:	1c 83       	std	Y+4, r17	; 0x04
     922:	2d 83       	std	Y+5, r18	; 0x05
     924:	3e 83       	std	Y+6, r19	; 0x06
     926:	4f 83       	std	Y+7, r20	; 0x07
     928:	58 87       	std	Y+8, r21	; 0x08
     92a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     92c:	3d 8d       	ldd	r19, Y+29	; 0x1d
     92e:	4e 8d       	ldd	r20, Y+30	; 0x1e
     930:	5f 8d       	ldd	r21, Y+31	; 0x1f
     932:	68 a1       	ldd	r22, Y+32	; 0x20
     934:	79 a1       	ldd	r23, Y+33	; 0x21
     936:	8a a1       	ldd	r24, Y+34	; 0x22
     938:	94 2d       	mov	r25, r4
     93a:	ae 2c       	mov	r10, r14
     93c:	bf 2c       	mov	r11, r15
     93e:	c1 2c       	mov	r12, r1
     940:	d1 2c       	mov	r13, r1
     942:	e1 2c       	mov	r14, r1
     944:	f1 2c       	mov	r15, r1
     946:	00 e0       	ldi	r16, 0x00	; 0
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__subdi3>
     94e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     952:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     956:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     95a:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     95e:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     962:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     966:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     96a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     96e:	c9 c0       	rjmp	.+402    	; 0xb02 <__stack+0x2a3>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     970:	91 01       	movw	r18, r2
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	cb 01       	movw	r24, r22
     97c:	2c 86       	std	Y+12, r2	; 0x0c
     97e:	3d 87       	std	Y+13, r19	; 0x0d
     980:	4e 87       	std	Y+14, r20	; 0x0e
     982:	5f 87       	std	Y+15, r21	; 0x0f
     984:	68 8b       	std	Y+16, r22	; 0x10
     986:	79 8b       	std	Y+17, r23	; 0x11
     988:	8a 8b       	std	Y+18, r24	; 0x12
     98a:	9b 8b       	std	Y+19, r25	; 0x13
     98c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     98e:	3d 8d       	ldd	r19, Y+29	; 0x1d
     990:	4e 8d       	ldd	r20, Y+30	; 0x1e
     992:	5f 8d       	ldd	r21, Y+31	; 0x1f
     994:	68 a1       	ldd	r22, Y+32	; 0x20
     996:	79 a1       	ldd	r23, Y+33	; 0x21
     998:	8a a1       	ldd	r24, Y+34	; 0x22
     99a:	94 2d       	mov	r25, r4
     99c:	ac 84       	ldd	r10, Y+12	; 0x0c
     99e:	bd 84       	ldd	r11, Y+13	; 0x0d
     9a0:	c1 2c       	mov	r12, r1
     9a2:	d1 2c       	mov	r13, r1
     9a4:	e1 2c       	mov	r14, r1
     9a6:	f1 2c       	mov	r15, r1
     9a8:	00 e0       	ldi	r16, 0x00	; 0
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__cmpdi2>
     9b0:	9c f4       	brge	.+38     	; 0x9d8 <__stack+0x179>
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
<<<<<<< HEAD
     90c:	0e 94 07 0a 	call	0x140e	; 0x140e <__adddi3>
     910:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2030>
     914:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2030+0x1>
     918:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2030+0x2>
     91c:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2030+0x3>
     920:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2030+0x4>
     924:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2030+0x5>
     928:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2030+0x6>
     92c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2030+0x7>
     930:	5e c0       	rjmp	.+188    	; 0x9ee <__stack+0x18f>
=======
     9b2:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__adddi3>
     9b6:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     9ba:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     9be:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     9c2:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     9c6:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     9ca:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     9ce:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     9d2:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     9d6:	95 c0       	rjmp	.+298    	; 0xb02 <__stack+0x2a3>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
			}else{																			//If we are at a speed higher than the threshold
			if(rp6Data.accelerationRate > rp6Data.driveSpeedThreshold){rp6Data.accelerationRate = rp6Data.driveSpeedThreshold - 300;}
     9d8:	4a 85       	ldd	r20, Y+10	; 0x0a
     9da:	5b 85       	ldd	r21, Y+11	; 0x0b
     9dc:	24 16       	cp	r2, r20
     9de:	35 06       	cpc	r3, r21
     9e0:	28 f4       	brcc	.+10     	; 0x9ec <__stack+0x18d>
     9e2:	b1 01       	movw	r22, r2
     9e4:	6c 52       	subi	r22, 0x2C	; 44
     9e6:	71 40       	sbci	r23, 0x01	; 1
     9e8:	7b 87       	std	Y+11, r23	; 0x0b
     9ea:	6a 87       	std	Y+10, r22	; 0x0a
				if(currentDriveSpeed < 7000){currentDriveSpeed += rp6Data.accelerationRate/4;}
     9ec:	2c 8d       	ldd	r18, Y+28	; 0x1c
     9ee:	3d 8d       	ldd	r19, Y+29	; 0x1d
     9f0:	4e 8d       	ldd	r20, Y+30	; 0x1e
     9f2:	5f 8d       	ldd	r21, Y+31	; 0x1f
     9f4:	68 a1       	ldd	r22, Y+32	; 0x20
     9f6:	79 a1       	ldd	r23, Y+33	; 0x21
     9f8:	8a a1       	ldd	r24, Y+34	; 0x22
     9fa:	94 2d       	mov	r25, r4
     9fc:	27 35       	cpi	r18, 0x57	; 87
     9fe:	3b 41       	sbci	r19, 0x1B	; 27
     a00:	41 05       	cpc	r20, r1
     a02:	51 05       	cpc	r21, r1
     a04:	61 05       	cpc	r22, r1
     a06:	71 05       	cpc	r23, r1
     a08:	81 05       	cpc	r24, r1
     a0a:	91 05       	cpc	r25, r1
     a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x1b1>
     a0e:	4c f5       	brge	.+82     	; 0xa62 <__stack+0x203>
     a10:	8a 84       	ldd	r8, Y+10	; 0x0a
     a12:	9b 84       	ldd	r9, Y+11	; 0x0b
     a14:	96 94       	lsr	r9
     a16:	87 94       	ror	r8
     a18:	96 94       	lsr	r9
     a1a:	87 94       	ror	r8
     a1c:	28 2d       	mov	r18, r8
     a1e:	39 2d       	mov	r19, r9
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	ac 8c       	ldd	r10, Y+28	; 0x1c
     a2e:	bd 8c       	ldd	r11, Y+29	; 0x1d
     a30:	ce 8c       	ldd	r12, Y+30	; 0x1e
     a32:	df 8c       	ldd	r13, Y+31	; 0x1f
     a34:	e8 a0       	ldd	r14, Y+32	; 0x20
     a36:	f9 a0       	ldd	r15, Y+33	; 0x21
     a38:	0a a1       	ldd	r16, Y+34	; 0x22
     a3a:	14 2d       	mov	r17, r4
     a3c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__adddi3>
     a40:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     a44:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     a48:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     a4c:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     a50:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     a54:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     a58:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     a5c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
     a60:	25 c0       	rjmp	.+74     	; 0xaac <__stack+0x24d>
				else{currentDriveSpeed += rp6Data.accelerationRate;}							//Accelerate with a percentage of the current speed, determined by accelerationRate
     a62:	0a 85       	ldd	r16, Y+10	; 0x0a
     a64:	1b 85       	ldd	r17, Y+11	; 0x0b
     a66:	48 01       	movw	r8, r16
     a68:	20 2f       	mov	r18, r16
     a6a:	39 2d       	mov	r19, r9
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	ac 8c       	ldd	r10, Y+28	; 0x1c
     a7a:	bd 8c       	ldd	r11, Y+29	; 0x1d
     a7c:	ce 8c       	ldd	r12, Y+30	; 0x1e
     a7e:	df 8c       	ldd	r13, Y+31	; 0x1f
     a80:	e8 a0       	ldd	r14, Y+32	; 0x20
     a82:	f9 a0       	ldd	r15, Y+33	; 0x21
     a84:	0a a1       	ldd	r16, Y+34	; 0x22
     a86:	14 2d       	mov	r17, r4
     a88:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__adddi3>
     a8c:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     a90:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     a94:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     a98:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     a9c:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     aa0:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     aa4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     aa8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
<<<<<<< HEAD
     976:	2a 89       	ldd	r18, Y+18	; 0x12
     978:	3b 89       	ldd	r19, Y+19	; 0x13
     97a:	4c 89       	ldd	r20, Y+20	; 0x14
     97c:	5d 89       	ldd	r21, Y+21	; 0x15
     97e:	6e 89       	ldd	r22, Y+22	; 0x16
     980:	7f 89       	ldd	r23, Y+23	; 0x17
     982:	88 8d       	ldd	r24, Y+24	; 0x18
     984:	99 8d       	ldd	r25, Y+25	; 0x19
     986:	aa 8c       	ldd	r10, Y+26	; 0x1a
     988:	bc a0       	ldd	r11, Y+36	; 0x24
     98a:	c4 2c       	mov	r12, r4
     98c:	d5 2c       	mov	r13, r5
     98e:	eb 2e       	mov	r14, r27
     990:	fa 2e       	mov	r15, r26
     992:	0f 2f       	mov	r16, r31
     994:	1e 2f       	mov	r17, r30
     996:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpdi2>
     99a:	8c f0       	brlt	.+34     	; 0x9be <__stack+0x15f>
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				if(rp6Data.accelerationRate > 1500){rp6Data.accelerationRate = 1500;}
				currentDriveSpeed += rp6Data.accelerationRate;				//Accelerate with a percentage of the current speed, determined by accelerationRate
     99c:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.2030>
     9a0:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.2030+0x1>
     9a4:	40 92 72 00 	sts	0x0072, r4	; 0x800072 <currentDriveSpeed.2030+0x2>
     9a8:	50 92 73 00 	sts	0x0073, r5	; 0x800073 <currentDriveSpeed.2030+0x3>
     9ac:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2030+0x4>
     9b0:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.2030+0x5>
     9b4:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.2030+0x6>
     9b8:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.2030+0x7>
     9bc:	18 c0       	rjmp	.+48     	; 0x9ee <__stack+0x18f>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     9be:	3a 89       	ldd	r19, Y+18	; 0x12
     9c0:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <currentDriveSpeed.2030>
     9c4:	4b 89       	ldd	r20, Y+19	; 0x13
     9c6:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <currentDriveSpeed.2030+0x1>
     9ca:	5c 89       	ldd	r21, Y+20	; 0x14
     9cc:	50 93 72 00 	sts	0x0072, r21	; 0x800072 <currentDriveSpeed.2030+0x2>
     9d0:	6d 89       	ldd	r22, Y+21	; 0x15
     9d2:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <currentDriveSpeed.2030+0x3>
     9d6:	7e 89       	ldd	r23, Y+22	; 0x16
     9d8:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <currentDriveSpeed.2030+0x4>
     9dc:	8f 89       	ldd	r24, Y+23	; 0x17
     9de:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <currentDriveSpeed.2030+0x5>
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <currentDriveSpeed.2030+0x6>
     9e8:	a9 8d       	ldd	r26, Y+25	; 0x19
     9ea:	a0 93 77 00 	sts	0x0077, r26	; 0x800077 <currentDriveSpeed.2030+0x7>
=======
     aac:	a0 90 70 00 	lds	r10, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     ab0:	b0 90 71 00 	lds	r11, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     ab4:	c0 90 72 00 	lds	r12, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     ab8:	d0 90 73 00 	lds	r13, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     abc:	e0 90 74 00 	lds	r14, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     ac0:	f0 90 75 00 	lds	r15, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     ac4:	00 91 76 00 	lds	r16, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     ac8:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     acc:	29 81       	ldd	r18, Y+1	; 0x01
     ace:	3a 81       	ldd	r19, Y+2	; 0x02
     ad0:	4b 81       	ldd	r20, Y+3	; 0x03
     ad2:	5c 81       	ldd	r21, Y+4	; 0x04
     ad4:	6d 81       	ldd	r22, Y+5	; 0x05
     ad6:	7e 81       	ldd	r23, Y+6	; 0x06
     ad8:	8f 81       	ldd	r24, Y+7	; 0x07
     ada:	98 85       	ldd	r25, Y+8	; 0x08
     adc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__cmpdi2>
     ae0:	84 f4       	brge	.+32     	; 0xb02 <__stack+0x2a3>
     ae2:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2027>
     ae6:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2027+0x1>
     aea:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2027+0x2>
     aee:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2027+0x3>
     af2:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2027+0x4>
     af6:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2027+0x5>
     afa:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2027+0x6>
     afe:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2027+0x7>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
<<<<<<< HEAD
     9ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2027>
     9f2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2027+0x1>
     9f6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2031+0x1>
     9fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2031>
=======
     b02:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2024>
     b06:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2024+0x1>
     b0a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2028+0x1>
     b0e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2028>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	rightMotorDirection = currentDriveDirection;
     b12:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     b16:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
<<<<<<< HEAD
     a06:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2030>
     a0a:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2030+0x1>
     a0e:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2030+0x2>
     a12:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2030+0x3>
     a16:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2030+0x4>
     a1a:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2030+0x5>
     a1e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2030+0x6>
     a22:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2030+0x7>
     a26:	c2 2e       	mov	r12, r18
     a28:	d3 2e       	mov	r13, r19
     a2a:	e4 2e       	mov	r14, r20
     a2c:	f5 2e       	mov	r15, r21
     a2e:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.2033>
     a32:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.2033+0x1>
     a36:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.2033+0x2>
     a3a:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.2033+0x3>
	rightMotorSpeed = currentDriveSpeed;
     a3e:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.2034>
     a42:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.2034+0x1>
     a46:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.2034+0x2>
     a4a:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.2034+0x3>
=======
     b1a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2027>
     b1e:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2027+0x1>
     b22:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2027+0x2>
     b26:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2027+0x3>
     b2a:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2027+0x4>
     b2e:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2027+0x5>
     b32:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2027+0x6>
     b36:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2027+0x7>
     b3a:	82 2e       	mov	r8, r18
     b3c:	93 2e       	mov	r9, r19
     b3e:	a4 2e       	mov	r10, r20
     b40:	b5 2e       	mov	r11, r21
     b42:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.2030>
     b46:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.2030+0x1>
     b4a:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.2030+0x2>
     b4e:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.2030+0x3>
	rightMotorSpeed = currentDriveSpeed;
     b52:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.2031>
     b56:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.2031+0x1>
     b5a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.2031+0x2>
     b5e:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.2031+0x3>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     b62:	a9 85       	ldd	r26, Y+9	; 0x09
     b64:	ea 2f       	mov	r30, r26
     b66:	aa 0f       	add	r26, r26
     b68:	ff 0b       	sbc	r31, r31
     b6a:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end>
     b6e:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x1>
     b72:	ea 17       	cp	r30, r26
     b74:	fb 07       	cpc	r31, r27
     b76:	81 f1       	breq	.+96     	; 0xbd8 <__stack+0x379>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     b78:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
     b7c:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     b80:	ef 2b       	or	r30, r31
     b82:	29 f4       	brne	.+10     	; 0xb8e <__stack+0x32f>
			enableMotorEncoder(0);											//Enable the encoders
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 c0 02 	call	0x580	; 0x580 <enableMotorEncoder>
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__stack+0x337>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 c0 02 	call	0x580	; 0x580 <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
<<<<<<< HEAD
     a82:	27 2d       	mov	r18, r7
     a84:	38 2d       	mov	r19, r8
     a86:	49 2d       	mov	r20, r9
     a88:	56 2d       	mov	r21, r6
     a8a:	6e a1       	ldd	r22, Y+38	; 0x26
     a8c:	7f a1       	ldd	r23, Y+39	; 0x27
     a8e:	88 a5       	ldd	r24, Y+40	; 0x28
     a90:	99 a5       	ldd	r25, Y+41	; 0x29
     a92:	20 56       	subi	r18, 0x60	; 96
     a94:	39 47       	sbci	r19, 0x79	; 121
     a96:	4e 4f       	sbci	r20, 0xFE	; 254
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	6f 4f       	sbci	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	8f 4f       	sbci	r24, 0xFF	; 255
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2026>
     aa6:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2026+0x1>
     aaa:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2026+0x2>
     aae:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2026+0x3>
     ab2:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2026+0x4>
     ab6:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2026+0x5>
     aba:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2026+0x6>
     abe:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2026+0x7>
     ac2:	c7 c0       	rjmp	.+398    	; 0xc52 <__stack+0x3f3>
=======
     b96:	2c 89       	ldd	r18, Y+20	; 0x14
     b98:	3d 89       	ldd	r19, Y+21	; 0x15
     b9a:	4e 89       	ldd	r20, Y+22	; 0x16
     b9c:	5f 89       	ldd	r21, Y+23	; 0x17
     b9e:	68 8d       	ldd	r22, Y+24	; 0x18
     ba0:	79 8d       	ldd	r23, Y+25	; 0x19
     ba2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ba4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ba6:	20 52       	subi	r18, 0x20	; 32
     ba8:	3c 46       	sbci	r19, 0x6C	; 108
     baa:	4b 4f       	sbci	r20, 0xFB	; 251
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	6f 4f       	sbci	r22, 0xFF	; 255
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	8f 4f       	sbci	r24, 0xFF	; 255
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2023>
     bba:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2023+0x1>
     bbe:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2023+0x2>
     bc2:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2023+0x3>
     bc6:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2023+0x4>
     bca:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2023+0x5>
     bce:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2023+0x6>
     bd2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2023+0x7>
     bd6:	92 c1       	rjmp	.+804    	; 0xefc <__stack+0x69d>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     bd8:	ef 3f       	cpi	r30, 0xFF	; 255
     bda:	0f ef       	ldi	r16, 0xFF	; 255
     bdc:	f0 07       	cpc	r31, r16
     bde:	09 f0       	breq	.+2      	; 0xbe2 <__stack+0x383>
     be0:	aa c0       	rjmp	.+340    	; 0xd36 <__stack+0x4d7>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	0e 94 80 0b 	call	0x1700	; 0x1700 <__cmpdi2_s8>
     be8:	31 f5       	brne	.+76     	; 0xc36 <__stack+0x3d7>
			leftMotorDirection = 0;											//Turn the left motor backwards
<<<<<<< HEAD
     ad6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2031+0x1>
     ada:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2031>
			rightMotorDirection = 1;										//Turn the right motor forwards
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     ae6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     aea:	8a a5       	ldd	r24, Y+42	; 0x2a
     aec:	9b a5       	ldd	r25, Y+43	; 0x2b
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	82 0d       	add	r24, r2
     af4:	93 1d       	adc	r25, r3
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2033>
     afe:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2033+0x1>
     b02:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2033+0x2>
     b06:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2033+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     b0a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2034>
     b0e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2034+0x1>
     b12:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2034+0x2>
     b16:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2034+0x3>
     b1a:	9b c0       	rjmp	.+310    	; 0xc52 <__stack+0x3f3>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = rp6Data.driveSpeedThreshold;							//Set the left motor to minimal
     b1c:	c1 01       	movw	r24, r2
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2033>
     b26:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2033+0x1>
     b2a:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2033+0x2>
     b2e:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2033+0x3>
			rightMotorSpeed += rp6Data.turnRate;									//Increase the right motor with the turn rate
     b32:	2a a5       	ldd	r18, Y+42	; 0x2a
     b34:	3b a5       	ldd	r19, Y+43	; 0x2b
     b36:	c2 0e       	add	r12, r18
     b38:	d3 1e       	adc	r13, r19
     b3a:	e1 1c       	adc	r14, r1
     b3c:	f1 1c       	adc	r15, r1
     b3e:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2034>
     b42:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2034+0x1>
     b46:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2034+0x2>
     b4a:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2034+0x3>
     b4e:	81 c0       	rjmp	.+258    	; 0xc52 <__stack+0x3f3>
=======
     bea:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2028+0x1>
     bee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2028>
			rightMotorDirection = 1;										//Turn the right motor forwards
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     bfa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     bfe:	2b a1       	ldd	r18, Y+35	; 0x23
     c00:	3c a1       	ldd	r19, Y+36	; 0x24
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	c1 01       	movw	r24, r2
     c08:	80 53       	subi	r24, 0x30	; 48
     c0a:	98 4f       	sbci	r25, 0xF8	; 248
     c0c:	82 0f       	add	r24, r18
     c0e:	93 1f       	adc	r25, r19
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     c18:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     c1c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     c20:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//---^
     c24:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     c28:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     c2c:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     c30:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
     c34:	63 c1       	rjmp	.+710    	; 0xefc <__stack+0x69d>
		}else{															//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed -= rp6Data.turnRate*3;							//Set the left motor to minimal
			//rightMotorSpeed += rp6Data.turnRate*3;									//Increase the right motor with the turn rate
			
			leftMotorSpeed -= ((leftMotorSpeed * 60) / 100);
     c36:	ac e3       	ldi	r26, 0x3C	; 60
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	a5 01       	movw	r20, r10
     c3c:	94 01       	movw	r18, r8
     c3e:	0e 94 35 0b 	call	0x166a	; 0x166a <__muluhisi3>
     c42:	24 e6       	ldi	r18, 0x64	; 100
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	0e 94 13 0b 	call	0x1626	; 0x1626 <__udivmodsi4>
     c4e:	75 01       	movw	r14, r10
     c50:	64 01       	movw	r12, r8
     c52:	c2 1a       	sub	r12, r18
     c54:	d3 0a       	sbc	r13, r19
     c56:	e4 0a       	sbc	r14, r20
     c58:	f5 0a       	sbc	r15, r21
     c5a:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.2030>
     c5e:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.2030+0x1>
     c62:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.2030+0x2>
     c66:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed += ((rightMotorSpeed * 60) / 100);
     c6a:	ba 01       	movw	r22, r20
     c6c:	a9 01       	movw	r20, r18
     c6e:	48 0d       	add	r20, r8
     c70:	59 1d       	adc	r21, r9
     c72:	6a 1d       	adc	r22, r10
     c74:	7b 1d       	adc	r23, r11
			
			if(leftMotorSpeed < rp6Data.driveSpeedThreshold+1000){
     c76:	c1 01       	movw	r24, r2
     c78:	88 51       	subi	r24, 0x18	; 24
     c7a:	9c 4f       	sbci	r25, 0xFC	; 252
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	c8 16       	cp	r12, r24
     c82:	d9 06       	cpc	r13, r25
     c84:	ea 06       	cpc	r14, r26
     c86:	fb 06       	cpc	r15, r27
     c88:	48 f0       	brcs	.+18     	; 0xc9c <__stack+0x43d>
		}else{															//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed -= rp6Data.turnRate*3;							//Set the left motor to minimal
			//rightMotorSpeed += rp6Data.turnRate*3;									//Increase the right motor with the turn rate
			
			leftMotorSpeed -= ((leftMotorSpeed * 60) / 100);
			rightMotorSpeed += ((rightMotorSpeed * 60) / 100);
     c8a:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <rightMotorSpeed.2031>
     c8e:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <rightMotorSpeed.2031+0x1>
     c92:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <rightMotorSpeed.2031+0x2>
     c96:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <rightMotorSpeed.2031+0x3>
     c9a:	18 c0       	rjmp	.+48     	; 0xccc <__stack+0x46d>
			
			if(leftMotorSpeed < rp6Data.driveSpeedThreshold+1000){
				rightMotorSpeed += ((rp6Data.driveSpeedThreshold+1000) - leftMotorSpeed);
     c9c:	48 0f       	add	r20, r24
     c9e:	59 1f       	adc	r21, r25
     ca0:	6a 1f       	adc	r22, r26
     ca2:	7b 1f       	adc	r23, r27
     ca4:	4c 19       	sub	r20, r12
     ca6:	5d 09       	sbc	r21, r13
     ca8:	6e 09       	sbc	r22, r14
     caa:	7f 09       	sbc	r23, r15
     cac:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <rightMotorSpeed.2031>
     cb0:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <rightMotorSpeed.2031+0x1>
     cb4:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <rightMotorSpeed.2031+0x2>
     cb8:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <rightMotorSpeed.2031+0x3>
				leftMotorSpeed = (rp6Data.driveSpeedThreshold + 1000);
     cbc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     cc0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     cc4:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     cc8:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			}							//Set right motor to minimal
			if(rightMotorSpeed > 25600){
     ccc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     cd0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     cd4:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <rightMotorSpeed.2031+0x2>
     cd8:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <rightMotorSpeed.2031+0x3>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	94 46       	sbci	r25, 0x64	; 100
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <__stack+0x489>
     ce6:	0a c1       	rjmp	.+532    	; 0xefc <__stack+0x69d>
				leftMotorSpeed -= 5000;
     ce8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     cec:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     cf0:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2030+0x2>
     cf4:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2030+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	53 e7       	ldi	r21, 0x73	; 115
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <rightMotorSpeed.2031>
     d04:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <rightMotorSpeed.2031+0x1>
     d08:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <rightMotorSpeed.2031+0x2>
     d0c:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <rightMotorSpeed.2031+0x3>
	
	leftMotorSpeed += 750;
     d10:	8a 59       	subi	r24, 0x9A	; 154
     d12:	90 41       	sbci	r25, 0x10	; 16
     d14:	a1 09       	sbc	r26, r1
     d16:	b1 09       	sbc	r27, r1
     d18:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     d1c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     d20:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     d24:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	94 46       	sbci	r25, 0x64	; 100
     d2c:	a1 05       	cpc	r26, r1
     d2e:	b1 05       	cpc	r27, r1
     d30:	08 f4       	brcc	.+2      	; 0xd34 <__stack+0x4d5>
     d32:	5a c1       	rjmp	.+692    	; 0xfe8 <__stack+0x789>
     d34:	33 c1       	rjmp	.+614    	; 0xf9c <__stack+0x73d>
			if(rightMotorSpeed > 25600){
				leftMotorSpeed -= 5000;
				rightMotorSpeed = 25600;
			}
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     d36:	30 97       	sbiw	r30, 0x00	; 0
     d38:	e1 f5       	brne	.+120    	; 0xdb2 <__stack+0x553>
		if(arduinoData.motorEncoderLVal != arduinoData.motorEncoderRVal){
     d3a:	e2 e8       	ldi	r30, 0x82	; 130
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	00 81       	ld	r16, Z
     d40:	11 81       	ldd	r17, Z+1	; 0x01
     d42:	e2 80       	ldd	r14, Z+2	; 0x02
     d44:	f3 80       	ldd	r15, Z+3	; 0x03
     d46:	0e 15       	cp	r16, r14
     d48:	1f 05       	cpc	r17, r15
     d4a:	09 f4       	brne	.+2      	; 0xd4e <__stack+0x4ef>
     d4c:	d7 c0       	rjmp	.+430    	; 0xefc <__stack+0x69d>
			if(arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
<<<<<<< HEAD
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatunsisf>
     b70:	6b 01       	movw	r12, r22
     b72:	7c 01       	movw	r14, r24
     b74:	b8 01       	movw	r22, r16
     b76:	6a 19       	sub	r22, r10
     b78:	7b 09       	sbc	r23, r11
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatunsisf>
     b82:	4b 01       	movw	r8, r22
     b84:	5c 01       	movw	r10, r24
     b86:	a5 01       	movw	r20, r10
     b88:	94 01       	movw	r18, r8
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     b92:	0e 94 5d 09 	call	0x12ba	; 0x12ba <sqrt>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	48 ec       	ldi	r20, 0xC8	; 200
     ba8:	52 e4       	ldi	r21, 0x42	; 66
     baa:	0e 94 67 07 	call	0xece	; 0xece <__divsf3>
     bae:	a7 01       	movw	r20, r14
     bb0:	96 01       	movw	r18, r12
     bb2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     bb6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fixunssfsi>
     bba:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.2034>
     bbe:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.2034+0x1>
     bc2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.2034+0x2>
     bc6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.2034+0x3>
     bca:	43 c0       	rjmp	.+134    	; 0xc52 <__stack+0x3f3>
=======
     d4e:	c5 01       	movw	r24, r10
     d50:	b4 01       	movw	r22, r8
     d52:	0e 94 6f 09 	call	0x12de	; 0x12de <__floatunsisf>
     d56:	4b 01       	movw	r8, r22
     d58:	5c 01       	movw	r10, r24
     d5a:	b8 01       	movw	r22, r16
     d5c:	6e 19       	sub	r22, r14
     d5e:	7f 09       	sbc	r23, r15
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 6f 09 	call	0x12de	; 0x12de <__floatunsisf>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
     d6c:	a7 01       	movw	r20, r14
     d6e:	96 01       	movw	r18, r12
     d70:	c7 01       	movw	r24, r14
     d72:	b6 01       	movw	r22, r12
     d74:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     d78:	0e 94 be 0a 	call	0x157c	; 0x157c <sqrt>
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	c5 01       	movw	r24, r10
     d82:	b4 01       	movw	r22, r8
     d84:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	48 ec       	ldi	r20, 0xC8	; 200
     d8e:	52 e4       	ldi	r21, 0x42	; 66
     d90:	0e 94 c8 08 	call	0x1190	; 0x1190 <__divsf3>
     d94:	a5 01       	movw	r20, r10
     d96:	94 01       	movw	r18, r8
     d98:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__addsf3>
     d9c:	0e 94 3a 09 	call	0x1274	; 0x1274 <__fixunssfsi>
     da0:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.2031>
     da4:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.2031+0x1>
     da8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.2031+0x2>
     dac:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.2031+0x3>
     db0:	a5 c0       	rjmp	.+330    	; 0xefc <__stack+0x69d>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	09 f0       	breq	.+2      	; 0xdb8 <__stack+0x559>
     db6:	a2 c0       	rjmp	.+324    	; 0xefc <__stack+0x69d>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	0e 94 80 0b 	call	0x1700	; 0x1700 <__cmpdi2_s8>
     dbe:	31 f5       	brne	.+76     	; 0xe0c <__stack+0x5ad>
			leftMotorDirection = 1;											//Left motor forward
<<<<<<< HEAD
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2031+0x1>
     be2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2031>
			rightMotorDirection = 0;										//Right motor backward
     be6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     bea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     bee:	8a a5       	ldd	r24, Y+42	; 0x2a
     bf0:	9b a5       	ldd	r25, Y+43	; 0x2b
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	82 0d       	add	r24, r2
     bf8:	93 1d       	adc	r25, r3
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2033>
     c02:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2033+0x1>
     c06:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2033+0x2>
     c0a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2033+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     c0e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2034>
     c12:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2034+0x1>
     c16:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2034+0x2>
     c1a:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2034+0x3>
     c1e:	19 c0       	rjmp	.+50     	; 0xc52 <__stack+0x3f3>
			}else{														//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed += rp6Data.turnRate;										//Increase the left motor with the set turn rate
     c20:	4a a5       	ldd	r20, Y+42	; 0x2a
     c22:	5b a5       	ldd	r21, Y+43	; 0x2b
     c24:	c4 0e       	add	r12, r20
     c26:	d5 1e       	adc	r13, r21
     c28:	e1 1c       	adc	r14, r1
     c2a:	f1 1c       	adc	r15, r1
     c2c:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.2033>
     c30:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.2033+0x1>
     c34:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.2033+0x2>
     c38:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.2033+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold;							//Set right motor to minimal
     c3c:	c1 01       	movw	r24, r2
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2034>
     c46:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2034+0x1>
     c4a:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2034+0x2>
     c4e:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2034+0x3>
=======
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2028+0x1>
     dc8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2028>
			rightMotorDirection = 0;										//Right motor backward
     dcc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     dd0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     dd4:	8b a1       	ldd	r24, Y+35	; 0x23
     dd6:	9c a1       	ldd	r25, Y+36	; 0x24
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	91 01       	movw	r18, r2
     dde:	20 53       	subi	r18, 0x30	; 48
     de0:	38 4f       	sbci	r19, 0xF8	; 248
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     dee:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     df2:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     df6:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//---^
     dfa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     dfe:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     e02:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     e06:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
     e0a:	78 c0       	rjmp	.+240    	; 0xefc <__stack+0x69d>
			}else{														//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed += rp6Data.turnRate*3;										//Increase the left motor with the set turn rate
			//rightMotorSpeed -= rp6Data.turnRate*3;
			
			leftMotorSpeed += ((leftMotorSpeed * 60) / 100);
     e0c:	ac e3       	ldi	r26, 0x3C	; 60
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	a5 01       	movw	r20, r10
     e12:	94 01       	movw	r18, r8
     e14:	0e 94 35 0b 	call	0x166a	; 0x166a <__muluhisi3>
     e18:	24 e6       	ldi	r18, 0x64	; 100
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	0e 94 13 0b 	call	0x1626	; 0x1626 <__udivmodsi4>
     e24:	d5 01       	movw	r26, r10
     e26:	c4 01       	movw	r24, r8
     e28:	82 0f       	add	r24, r18
     e2a:	93 1f       	adc	r25, r19
     e2c:	a4 1f       	adc	r26, r20
     e2e:	b5 1f       	adc	r27, r21
     e30:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     e34:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     e38:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     e3c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			rightMotorSpeed -= ((rightMotorSpeed * 60) / 100);
     e40:	82 1a       	sub	r8, r18
     e42:	93 0a       	sbc	r9, r19
     e44:	a4 0a       	sbc	r10, r20
     e46:	b5 0a       	sbc	r11, r21
			
			if(leftMotorSpeed > 25600){
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	94 46       	sbci	r25, 0x64	; 100
     e4c:	a1 05       	cpc	r26, r1
     e4e:	b1 05       	cpc	r27, r1
     e50:	48 f4       	brcc	.+18     	; 0xe64 <__stack+0x605>
			}else{														//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed += rp6Data.turnRate*3;										//Increase the left motor with the set turn rate
			//rightMotorSpeed -= rp6Data.turnRate*3;
			
			leftMotorSpeed += ((leftMotorSpeed * 60) / 100);
			rightMotorSpeed -= ((rightMotorSpeed * 60) / 100);
     e52:	80 92 68 00 	sts	0x0068, r8	; 0x800068 <rightMotorSpeed.2031>
     e56:	90 92 69 00 	sts	0x0069, r9	; 0x800069 <rightMotorSpeed.2031+0x1>
     e5a:	a0 92 6a 00 	sts	0x006A, r10	; 0x80006a <rightMotorSpeed.2031+0x2>
     e5e:	b0 92 6b 00 	sts	0x006B, r11	; 0x80006b <rightMotorSpeed.2031+0x3>
     e62:	1a c0       	rjmp	.+52     	; 0xe98 <__stack+0x639>
			
			if(leftMotorSpeed > 25600){
				rightMotorSpeed -= 5000;
     e64:	48 e8       	ldi	r20, 0x88	; 136
     e66:	84 1a       	sub	r8, r20
     e68:	43 e1       	ldi	r20, 0x13	; 19
     e6a:	94 0a       	sbc	r9, r20
     e6c:	a1 08       	sbc	r10, r1
     e6e:	b1 08       	sbc	r11, r1
     e70:	80 92 68 00 	sts	0x0068, r8	; 0x800068 <rightMotorSpeed.2031>
     e74:	90 92 69 00 	sts	0x0069, r9	; 0x800069 <rightMotorSpeed.2031+0x1>
     e78:	a0 92 6a 00 	sts	0x006A, r10	; 0x80006a <rightMotorSpeed.2031+0x2>
     e7c:	b0 92 6b 00 	sts	0x006B, r11	; 0x80006b <rightMotorSpeed.2031+0x3>
				leftMotorSpeed = 25600;
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	94 e6       	ldi	r25, 0x64	; 100
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     e8c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     e90:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     e94:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
			}
			if(rightMotorSpeed < rp6Data.driveSpeedThreshold+1000){
     e98:	c1 01       	movw	r24, r2
     e9a:	88 51       	subi	r24, 0x18	; 24
     e9c:	9c 4f       	sbci	r25, 0xFC	; 252
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	00 91 68 00 	lds	r16, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     ea6:	10 91 69 00 	lds	r17, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     eaa:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <rightMotorSpeed.2031+0x2>
     eae:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <rightMotorSpeed.2031+0x3>
     eb2:	08 17       	cp	r16, r24
     eb4:	19 07       	cpc	r17, r25
     eb6:	2a 07       	cpc	r18, r26
     eb8:	3b 07       	cpc	r19, r27
     eba:	00 f5       	brcc	.+64     	; 0xefc <__stack+0x69d>
				leftMotorSpeed += ((rp6Data.driveSpeedThreshold+1000) - rightMotorSpeed);
     ebc:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     ec0:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     ec4:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <leftMotorSpeed.2030+0x2>
     ec8:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <leftMotorSpeed.2030+0x3>
     ecc:	40 1b       	sub	r20, r16
     ece:	51 0b       	sbc	r21, r17
     ed0:	62 0b       	sbc	r22, r18
     ed2:	73 0b       	sbc	r23, r19
     ed4:	48 0f       	add	r20, r24
     ed6:	59 1f       	adc	r21, r25
     ed8:	6a 1f       	adc	r22, r26
     eda:	7b 1f       	adc	r23, r27
     edc:	40 93 6c 00 	sts	0x006C, r20	; 0x80006c <leftMotorSpeed.2030>
     ee0:	50 93 6d 00 	sts	0x006D, r21	; 0x80006d <leftMotorSpeed.2030+0x1>
     ee4:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <leftMotorSpeed.2030+0x2>
     ee8:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <leftMotorSpeed.2030+0x3>
				rightMotorSpeed = (rp6Data.driveSpeedThreshold + 1000);
     eec:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     ef0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     ef4:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     ef8:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     efc:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2031>
     f00:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
     f04:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2031+0x2>
     f08:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2031+0x3>
     f0c:	d7 01       	movw	r26, r14
     f0e:	c6 01       	movw	r24, r12
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	aa 1f       	adc	r26, r26
     f16:	bb 1f       	adc	r27, r27
     f18:	8c 0d       	add	r24, r12
     f1a:	9d 1d       	adc	r25, r13
     f1c:	ae 1d       	adc	r26, r14
     f1e:	bf 1d       	adc	r27, r15
     f20:	ac 01       	movw	r20, r24
     f22:	bd 01       	movw	r22, r26
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	66 1f       	adc	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	44 0f       	add	r20, r20
     f2e:	55 1f       	adc	r21, r21
     f30:	66 1f       	adc	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	8c 01       	movw	r16, r24
     f36:	9d 01       	movw	r18, r26
     f38:	04 0f       	add	r16, r20
     f3a:	15 1f       	adc	r17, r21
     f3c:	26 1f       	adc	r18, r22
     f3e:	37 1f       	adc	r19, r23
     f40:	c9 01       	movw	r24, r18
     f42:	b8 01       	movw	r22, r16
     f44:	24 e6       	ldi	r18, 0x64	; 100
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	0e 94 13 0b 	call	0x1626	; 0x1626 <__udivmodsi4>
     f50:	c2 0e       	add	r12, r18
     f52:	d3 1e       	adc	r13, r19
     f54:	e4 1e       	adc	r14, r20
     f56:	f5 1e       	adc	r15, r21
     f58:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2031>
     f5c:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2031+0x1>
     f60:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2031+0x2>
     f64:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2031+0x3>
	
	leftMotorSpeed += 750;
     f68:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
     f6c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
     f70:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2030+0x2>
     f74:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2030+0x3>
     f78:	82 51       	subi	r24, 0x12	; 18
     f7a:	9d 4f       	sbci	r25, 0xFD	; 253
     f7c:	af 4f       	sbci	r26, 0xFF	; 255
     f7e:	bf 4f       	sbci	r27, 0xFF	; 255
     f80:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     f84:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     f88:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     f8c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	94 46       	sbci	r25, 0x64	; 100
     f94:	a1 05       	cpc	r26, r1
     f96:	b1 05       	cpc	r27, r1
     f98:	a0 f0       	brcs	.+40     	; 0xfc2 <__stack+0x763>
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <__stack+0x74b>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
<<<<<<< HEAD
     c52:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2034>
     c56:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2034+0x1>
     c5a:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2034+0x2>
     c5e:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2034+0x3>
     c62:	d7 01       	movw	r26, r14
     c64:	c6 01       	movw	r24, r12
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	aa 1f       	adc	r26, r26
     c6c:	bb 1f       	adc	r27, r27
     c6e:	8c 0d       	add	r24, r12
     c70:	9d 1d       	adc	r25, r13
     c72:	ae 1d       	adc	r26, r14
     c74:	bf 1d       	adc	r27, r15
     c76:	ac 01       	movw	r20, r24
     c78:	bd 01       	movw	r22, r26
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	66 1f       	adc	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	44 0f       	add	r20, r20
     c84:	55 1f       	adc	r21, r21
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	8c 01       	movw	r16, r24
     c8c:	9d 01       	movw	r18, r26
     c8e:	04 0f       	add	r16, r20
     c90:	15 1f       	adc	r17, r21
     c92:	26 1f       	adc	r18, r22
     c94:	37 1f       	adc	r19, r23
     c96:	c9 01       	movw	r24, r18
     c98:	b8 01       	movw	r22, r16
     c9a:	24 e6       	ldi	r18, 0x64	; 100
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
     ca6:	c2 0e       	add	r12, r18
     ca8:	d3 1e       	adc	r13, r19
     caa:	e4 1e       	adc	r14, r20
     cac:	f5 1e       	adc	r15, r21
     cae:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2034>
     cb2:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2034+0x1>
     cb6:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2034+0x2>
     cba:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2034+0x3>
=======
     f9c:	0f 2e       	mov	r0, r31
     f9e:	c1 2c       	mov	r12, r1
     fa0:	f3 e7       	ldi	r31, 0x73	; 115
     fa2:	df 2e       	mov	r13, r31
     fa4:	e1 2c       	mov	r14, r1
     fa6:	f1 2c       	mov	r15, r1
     fa8:	f0 2d       	mov	r31, r0
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	
	leftMotorSpeed += 750;
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
<<<<<<< HEAD
     cbe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2033>
     cc2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2033+0x1>
     cc6:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2033+0x2>
     cca:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2033+0x3>
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	94 46       	sbci	r25, 0x64	; 100
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	60 f0       	brcs	.+24     	; 0xcf0 <__stack+0x491>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	94 e6       	ldi	r25, 0x64	; 100
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2033>
     ce4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2033+0x1>
     ce8:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2033+0x2>
     cec:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2033+0x3>
=======
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	94 e6       	ldi	r25, 0x64	; 100
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2030>
     fb6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2030+0x1>
     fba:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2030+0x2>
     fbe:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2030+0x3>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     fc2:	21 e3       	ldi	r18, 0x31	; 49
     fc4:	c2 16       	cp	r12, r18
     fc6:	25 e7       	ldi	r18, 0x75	; 117
     fc8:	d2 06       	cpc	r13, r18
     fca:	e1 04       	cpc	r14, r1
     fcc:	f1 04       	cpc	r15, r1
     fce:	60 f0       	brcs	.+24     	; 0xfe8 <__stack+0x789>
		rightMotorSpeed = 30000;						//Set it back to its max
<<<<<<< HEAD
     cfe:	80 e3       	ldi	r24, 0x30	; 48
     d00:	95 e7       	ldi	r25, 0x75	; 117
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2034>
     d0a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2034+0x1>
     d0e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2034+0x2>
     d12:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2034+0x3>
=======
     fd0:	80 e3       	ldi	r24, 0x30	; 48
     fd2:	95 e7       	ldi	r25, 0x75	; 117
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2031>
     fdc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2031+0x1>
     fe0:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2031+0x2>
     fe4:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2031+0x3>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
<<<<<<< HEAD
     d16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2031>
     d1a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2031+0x1>
     d1e:	89 2b       	or	r24, r25
     d20:	11 f0       	breq	.+4      	; 0xd26 <__stack+0x4c7>
=======
     fe8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2028>
     fec:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2028+0x1>
     ff0:	89 2b       	or	r24, r25
     ff2:	11 f0       	breq	.+4      	; 0xff8 <__stack+0x799>
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
		PORTC &= 0b11111011;
     ff4:	aa 98       	cbi	0x15, 2	; 21
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <__stack+0x79b>
	}else{
		PORTC |= 0b00000100;
     ff8:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     ffa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     ffe:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    1002:	89 2b       	or	r24, r25
    1004:	11 f0       	breq	.+4      	; 0x100a <__stack+0x7ab>
		PORTC &= 0b11110111;
    1006:	ab 98       	cbi	0x15, 3	; 21
    1008:	01 c0       	rjmp	.+2      	; 0x100c <__stack+0x7ad>
	}else{
		PORTC |= 0b00001000;
    100a:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
<<<<<<< HEAD
     d3a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2034>
     d3e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2034+0x1>
     d42:	9b bd       	out	0x2b, r25	; 43
     d44:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     d46:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2033>
     d4a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2033+0x1>
     d4e:	99 bd       	out	0x29, r25	; 41
     d50:	88 bd       	out	0x28, r24	; 40
=======
    100c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2031>
    1010:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2031+0x1>
    1014:	9b bd       	out	0x2b, r25	; 43
    1016:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
    1018:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2030>
    101c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2030+0x1>
    1020:	99 bd       	out	0x29, r25	; 41
    1022:	88 bd       	out	0x28, r24	; 40
>>>>>>> 940b049df24ce87b2d2b5e71760b6d4601e01f50
	
	return 0;
}
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a4 96       	adiw	r28, 0x24	; 36
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	6f 90       	pop	r6
    1050:	5f 90       	pop	r5
    1052:	4f 90       	pop	r4
    1054:	3f 90       	pop	r3
    1056:	2f 90       	pop	r2
    1058:	08 95       	ret

0000105a <main>:
	}
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
    105a:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
    105c:	0e 94 50 00 	call	0xa0	; 0xa0 <init_micros>
	
	init_motor();
    1060:	0e 94 69 02 	call	0x4d2	; 0x4d2 <init_motor>
	init_LED();
    1064:	0e 94 49 00 	call	0x92	; 0x92 <init_LED>
	
	init_rp6Data();
    1068:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_rp6Data>
	init_arduinoData();
    106c:	0e 94 1a 01 	call	0x234	; 0x234 <init_arduinoData>
	
	init_TWI();
    1070:	0e 94 ed 00 	call	0x1da	; 0x1da <init_TWI>
	
	clearSendData();
    1074:	0e 94 21 01 	call	0x242	; 0x242 <clearSendData>
	clearReceiveData();
    1078:	0e 94 2a 01 	call	0x254	; 0x254 <clearReceiveData>
	
	while(1){
		motorDriver(rp6Data);
    107c:	8d b7       	in	r24, 0x3d	; 61
    107e:	9e b7       	in	r25, 0x3e	; 62
    1080:	43 97       	sbiw	r24, 0x13	; 19
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	9e bf       	out	0x3e, r25	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	8d bf       	out	0x3d, r24	; 61
    108c:	ad b7       	in	r26, 0x3d	; 61
    108e:	be b7       	in	r27, 0x3e	; 62
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	83 e1       	ldi	r24, 0x13	; 19
    1094:	e0 ea       	ldi	r30, 0xA0	; 160
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	01 90       	ld	r0, Z+
    109a:	0d 92       	st	X+, r0
    109c:	8a 95       	dec	r24
    109e:	e1 f7       	brne	.-8      	; 0x1098 <main+0x3e>
    10a0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <motorDriver>
    10a4:	8d b7       	in	r24, 0x3d	; 61
    10a6:	9e b7       	in	r25, 0x3e	; 62
    10a8:	43 96       	adiw	r24, 0x13	; 19
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	9e bf       	out	0x3e, r25	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	8d bf       	out	0x3d, r24	; 61
    10b4:	e3 cf       	rjmp	.-58     	; 0x107c <main+0x22>

000010b6 <__subsf3>:
    10b6:	50 58       	subi	r21, 0x80	; 128

000010b8 <__addsf3>:
    10b8:	bb 27       	eor	r27, r27
    10ba:	aa 27       	eor	r26, r26
    10bc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__addsf3x>
    10c0:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_round>
    10c4:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_pscA>
    10c8:	38 f0       	brcs	.+14     	; 0x10d8 <__addsf3+0x20>
    10ca:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_pscB>
    10ce:	20 f0       	brcs	.+8      	; 0x10d8 <__addsf3+0x20>
    10d0:	39 f4       	brne	.+14     	; 0x10e0 <__addsf3+0x28>
    10d2:	9f 3f       	cpi	r25, 0xFF	; 255
    10d4:	19 f4       	brne	.+6      	; 0x10dc <__addsf3+0x24>
    10d6:	26 f4       	brtc	.+8      	; 0x10e0 <__addsf3+0x28>
    10d8:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_nan>
    10dc:	0e f4       	brtc	.+2      	; 0x10e0 <__addsf3+0x28>
    10de:	e0 95       	com	r30
    10e0:	e7 fb       	bst	r30, 7
    10e2:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_inf>

000010e6 <__addsf3x>:
    10e6:	e9 2f       	mov	r30, r25
    10e8:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_split3>
    10ec:	58 f3       	brcs	.-42     	; 0x10c4 <__addsf3+0xc>
    10ee:	ba 17       	cp	r27, r26
    10f0:	62 07       	cpc	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	95 07       	cpc	r25, r21
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__addsf3x+0x1c>
    10fa:	79 f4       	brne	.+30     	; 0x111a <__addsf3x+0x34>
    10fc:	a6 f5       	brtc	.+104    	; 0x1166 <__addsf3x+0x80>
    10fe:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_zero>
    1102:	0e f4       	brtc	.+2      	; 0x1106 <__addsf3x+0x20>
    1104:	e0 95       	com	r30
    1106:	0b 2e       	mov	r0, r27
    1108:	ba 2f       	mov	r27, r26
    110a:	a0 2d       	mov	r26, r0
    110c:	0b 01       	movw	r0, r22
    110e:	b9 01       	movw	r22, r18
    1110:	90 01       	movw	r18, r0
    1112:	0c 01       	movw	r0, r24
    1114:	ca 01       	movw	r24, r20
    1116:	a0 01       	movw	r20, r0
    1118:	11 24       	eor	r1, r1
    111a:	ff 27       	eor	r31, r31
    111c:	59 1b       	sub	r21, r25
    111e:	99 f0       	breq	.+38     	; 0x1146 <__addsf3x+0x60>
    1120:	59 3f       	cpi	r21, 0xF9	; 249
    1122:	50 f4       	brcc	.+20     	; 0x1138 <__addsf3x+0x52>
    1124:	50 3e       	cpi	r21, 0xE0	; 224
    1126:	68 f1       	brcs	.+90     	; 0x1182 <__addsf3x+0x9c>
    1128:	1a 16       	cp	r1, r26
    112a:	f0 40       	sbci	r31, 0x00	; 0
    112c:	a2 2f       	mov	r26, r18
    112e:	23 2f       	mov	r18, r19
    1130:	34 2f       	mov	r19, r20
    1132:	44 27       	eor	r20, r20
    1134:	58 5f       	subi	r21, 0xF8	; 248
    1136:	f3 cf       	rjmp	.-26     	; 0x111e <__addsf3x+0x38>
    1138:	46 95       	lsr	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	a7 95       	ror	r26
    1140:	f0 40       	sbci	r31, 0x00	; 0
    1142:	53 95       	inc	r21
    1144:	c9 f7       	brne	.-14     	; 0x1138 <__addsf3x+0x52>
    1146:	7e f4       	brtc	.+30     	; 0x1166 <__addsf3x+0x80>
    1148:	1f 16       	cp	r1, r31
    114a:	ba 0b       	sbc	r27, r26
    114c:	62 0b       	sbc	r22, r18
    114e:	73 0b       	sbc	r23, r19
    1150:	84 0b       	sbc	r24, r20
    1152:	ba f0       	brmi	.+46     	; 0x1182 <__addsf3x+0x9c>
    1154:	91 50       	subi	r25, 0x01	; 1
    1156:	a1 f0       	breq	.+40     	; 0x1180 <__addsf3x+0x9a>
    1158:	ff 0f       	add	r31, r31
    115a:	bb 1f       	adc	r27, r27
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	c2 f7       	brpl	.-16     	; 0x1154 <__addsf3x+0x6e>
    1164:	0e c0       	rjmp	.+28     	; 0x1182 <__addsf3x+0x9c>
    1166:	ba 0f       	add	r27, r26
    1168:	62 1f       	adc	r22, r18
    116a:	73 1f       	adc	r23, r19
    116c:	84 1f       	adc	r24, r20
    116e:	48 f4       	brcc	.+18     	; 0x1182 <__addsf3x+0x9c>
    1170:	87 95       	ror	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f7 95       	ror	r31
    117a:	9e 3f       	cpi	r25, 0xFE	; 254
    117c:	08 f0       	brcs	.+2      	; 0x1180 <__addsf3x+0x9a>
    117e:	b0 cf       	rjmp	.-160    	; 0x10e0 <__addsf3+0x28>
    1180:	93 95       	inc	r25
    1182:	88 0f       	add	r24, r24
    1184:	08 f0       	brcs	.+2      	; 0x1188 <__addsf3x+0xa2>
    1186:	99 27       	eor	r25, r25
    1188:	ee 0f       	add	r30, r30
    118a:	97 95       	ror	r25
    118c:	87 95       	ror	r24
    118e:	08 95       	ret

00001190 <__divsf3>:
    1190:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__divsf3x>
    1194:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_round>
    1198:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_pscB>
    119c:	58 f0       	brcs	.+22     	; 0x11b4 <__divsf3+0x24>
    119e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_pscA>
    11a2:	40 f0       	brcs	.+16     	; 0x11b4 <__divsf3+0x24>
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <__divsf3+0x20>
    11a6:	5f 3f       	cpi	r21, 0xFF	; 255
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <__divsf3+0x24>
    11aa:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_inf>
    11ae:	51 11       	cpse	r21, r1
    11b0:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>
    11b4:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_nan>

000011b8 <__divsf3x>:
    11b8:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_split3>
    11bc:	68 f3       	brcs	.-38     	; 0x1198 <__divsf3+0x8>

000011be <__divsf3_pse>:
    11be:	99 23       	and	r25, r25
    11c0:	b1 f3       	breq	.-20     	; 0x11ae <__divsf3+0x1e>
    11c2:	55 23       	and	r21, r21
    11c4:	91 f3       	breq	.-28     	; 0x11aa <__divsf3+0x1a>
    11c6:	95 1b       	sub	r25, r21
    11c8:	55 0b       	sbc	r21, r21
    11ca:	bb 27       	eor	r27, r27
    11cc:	aa 27       	eor	r26, r26
    11ce:	62 17       	cp	r22, r18
    11d0:	73 07       	cpc	r23, r19
    11d2:	84 07       	cpc	r24, r20
    11d4:	38 f0       	brcs	.+14     	; 0x11e4 <__divsf3_pse+0x26>
    11d6:	9f 5f       	subi	r25, 0xFF	; 255
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	22 0f       	add	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	44 1f       	adc	r20, r20
    11e0:	aa 1f       	adc	r26, r26
    11e2:	a9 f3       	breq	.-22     	; 0x11ce <__divsf3_pse+0x10>
    11e4:	35 d0       	rcall	.+106    	; 0x1250 <__divsf3_pse+0x92>
    11e6:	0e 2e       	mov	r0, r30
    11e8:	3a f0       	brmi	.+14     	; 0x11f8 <__divsf3_pse+0x3a>
    11ea:	e0 e8       	ldi	r30, 0x80	; 128
    11ec:	32 d0       	rcall	.+100    	; 0x1252 <__divsf3_pse+0x94>
    11ee:	91 50       	subi	r25, 0x01	; 1
    11f0:	50 40       	sbci	r21, 0x00	; 0
    11f2:	e6 95       	lsr	r30
    11f4:	00 1c       	adc	r0, r0
    11f6:	ca f7       	brpl	.-14     	; 0x11ea <__divsf3_pse+0x2c>
    11f8:	2b d0       	rcall	.+86     	; 0x1250 <__divsf3_pse+0x92>
    11fa:	fe 2f       	mov	r31, r30
    11fc:	29 d0       	rcall	.+82     	; 0x1250 <__divsf3_pse+0x92>
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	bb 1f       	adc	r27, r27
    1206:	26 17       	cp	r18, r22
    1208:	37 07       	cpc	r19, r23
    120a:	48 07       	cpc	r20, r24
    120c:	ab 07       	cpc	r26, r27
    120e:	b0 e8       	ldi	r27, 0x80	; 128
    1210:	09 f0       	breq	.+2      	; 0x1214 <__divsf3_pse+0x56>
    1212:	bb 0b       	sbc	r27, r27
    1214:	80 2d       	mov	r24, r0
    1216:	bf 01       	movw	r22, r30
    1218:	ff 27       	eor	r31, r31
    121a:	93 58       	subi	r25, 0x83	; 131
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	3a f0       	brmi	.+14     	; 0x122e <__divsf3_pse+0x70>
    1220:	9e 3f       	cpi	r25, 0xFE	; 254
    1222:	51 05       	cpc	r21, r1
    1224:	78 f0       	brcs	.+30     	; 0x1244 <__divsf3_pse+0x86>
    1226:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_inf>
    122a:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>
    122e:	5f 3f       	cpi	r21, 0xFF	; 255
    1230:	e4 f3       	brlt	.-8      	; 0x122a <__divsf3_pse+0x6c>
    1232:	98 3e       	cpi	r25, 0xE8	; 232
    1234:	d4 f3       	brlt	.-12     	; 0x122a <__divsf3_pse+0x6c>
    1236:	86 95       	lsr	r24
    1238:	77 95       	ror	r23
    123a:	67 95       	ror	r22
    123c:	b7 95       	ror	r27
    123e:	f7 95       	ror	r31
    1240:	9f 5f       	subi	r25, 0xFF	; 255
    1242:	c9 f7       	brne	.-14     	; 0x1236 <__divsf3_pse+0x78>
    1244:	88 0f       	add	r24, r24
    1246:	91 1d       	adc	r25, r1
    1248:	96 95       	lsr	r25
    124a:	87 95       	ror	r24
    124c:	97 f9       	bld	r25, 7
    124e:	08 95       	ret
    1250:	e1 e0       	ldi	r30, 0x01	; 1
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	88 1f       	adc	r24, r24
    1258:	bb 1f       	adc	r27, r27
    125a:	62 17       	cp	r22, r18
    125c:	73 07       	cpc	r23, r19
    125e:	84 07       	cpc	r24, r20
    1260:	ba 07       	cpc	r27, r26
    1262:	20 f0       	brcs	.+8      	; 0x126c <__divsf3_pse+0xae>
    1264:	62 1b       	sub	r22, r18
    1266:	73 0b       	sbc	r23, r19
    1268:	84 0b       	sbc	r24, r20
    126a:	ba 0b       	sbc	r27, r26
    126c:	ee 1f       	adc	r30, r30
    126e:	88 f7       	brcc	.-30     	; 0x1252 <__divsf3_pse+0x94>
    1270:	e0 95       	com	r30
    1272:	08 95       	ret

00001274 <__fixunssfsi>:
    1274:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fp_splitA>
    1278:	88 f0       	brcs	.+34     	; 0x129c <__fixunssfsi+0x28>
    127a:	9f 57       	subi	r25, 0x7F	; 127
    127c:	98 f0       	brcs	.+38     	; 0x12a4 <__fixunssfsi+0x30>
    127e:	b9 2f       	mov	r27, r25
    1280:	99 27       	eor	r25, r25
    1282:	b7 51       	subi	r27, 0x17	; 23
    1284:	b0 f0       	brcs	.+44     	; 0x12b2 <__fixunssfsi+0x3e>
    1286:	e1 f0       	breq	.+56     	; 0x12c0 <__fixunssfsi+0x4c>
    1288:	66 0f       	add	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	1a f0       	brmi	.+6      	; 0x1298 <__fixunssfsi+0x24>
    1292:	ba 95       	dec	r27
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__fixunssfsi+0x14>
    1296:	14 c0       	rjmp	.+40     	; 0x12c0 <__fixunssfsi+0x4c>
    1298:	b1 30       	cpi	r27, 0x01	; 1
    129a:	91 f0       	breq	.+36     	; 0x12c0 <__fixunssfsi+0x4c>
    129c:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_zero>
    12a0:	b1 e0       	ldi	r27, 0x01	; 1
    12a2:	08 95       	ret
    12a4:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_zero>
    12a8:	67 2f       	mov	r22, r23
    12aa:	78 2f       	mov	r23, r24
    12ac:	88 27       	eor	r24, r24
    12ae:	b8 5f       	subi	r27, 0xF8	; 248
    12b0:	39 f0       	breq	.+14     	; 0x12c0 <__fixunssfsi+0x4c>
    12b2:	b9 3f       	cpi	r27, 0xF9	; 249
    12b4:	cc f3       	brlt	.-14     	; 0x12a8 <__fixunssfsi+0x34>
    12b6:	86 95       	lsr	r24
    12b8:	77 95       	ror	r23
    12ba:	67 95       	ror	r22
    12bc:	b3 95       	inc	r27
    12be:	d9 f7       	brne	.-10     	; 0x12b6 <__fixunssfsi+0x42>
    12c0:	3e f4       	brtc	.+14     	; 0x12d0 <__fixunssfsi+0x5c>
    12c2:	90 95       	com	r25
    12c4:	80 95       	com	r24
    12c6:	70 95       	com	r23
    12c8:	61 95       	neg	r22
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__floatdisf>:
    12d2:	97 fb       	bst	r25, 7
    12d4:	16 f4       	brtc	.+4      	; 0x12da <__floatdisf+0x8>
    12d6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_negdi>
    12da:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__fp_di2sf>

000012de <__floatunsisf>:
    12de:	e8 94       	clt
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <__floatsisf+0x12>

000012e2 <__floatsisf>:
    12e2:	97 fb       	bst	r25, 7
    12e4:	3e f4       	brtc	.+14     	; 0x12f4 <__floatsisf+0x12>
    12e6:	90 95       	com	r25
    12e8:	80 95       	com	r24
    12ea:	70 95       	com	r23
    12ec:	61 95       	neg	r22
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	8f 4f       	sbci	r24, 0xFF	; 255
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	99 23       	and	r25, r25
    12f6:	a9 f0       	breq	.+42     	; 0x1322 <__floatsisf+0x40>
    12f8:	f9 2f       	mov	r31, r25
    12fa:	96 e9       	ldi	r25, 0x96	; 150
    12fc:	bb 27       	eor	r27, r27
    12fe:	93 95       	inc	r25
    1300:	f6 95       	lsr	r31
    1302:	87 95       	ror	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b7 95       	ror	r27
    130a:	f1 11       	cpse	r31, r1
    130c:	f8 cf       	rjmp	.-16     	; 0x12fe <__floatsisf+0x1c>
    130e:	fa f4       	brpl	.+62     	; 0x134e <__floatsisf+0x6c>
    1310:	bb 0f       	add	r27, r27
    1312:	11 f4       	brne	.+4      	; 0x1318 <__floatsisf+0x36>
    1314:	60 ff       	sbrs	r22, 0
    1316:	1b c0       	rjmp	.+54     	; 0x134e <__floatsisf+0x6c>
    1318:	6f 5f       	subi	r22, 0xFF	; 255
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	8f 4f       	sbci	r24, 0xFF	; 255
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	16 c0       	rjmp	.+44     	; 0x134e <__floatsisf+0x6c>
    1322:	88 23       	and	r24, r24
    1324:	11 f0       	breq	.+4      	; 0x132a <__floatsisf+0x48>
    1326:	96 e9       	ldi	r25, 0x96	; 150
    1328:	11 c0       	rjmp	.+34     	; 0x134c <__floatsisf+0x6a>
    132a:	77 23       	and	r23, r23
    132c:	21 f0       	breq	.+8      	; 0x1336 <__floatsisf+0x54>
    132e:	9e e8       	ldi	r25, 0x8E	; 142
    1330:	87 2f       	mov	r24, r23
    1332:	76 2f       	mov	r23, r22
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <__floatsisf+0x5e>
    1336:	66 23       	and	r22, r22
    1338:	71 f0       	breq	.+28     	; 0x1356 <__floatsisf+0x74>
    133a:	96 e8       	ldi	r25, 0x86	; 134
    133c:	86 2f       	mov	r24, r22
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	2a f0       	brmi	.+10     	; 0x134e <__floatsisf+0x6c>
    1344:	9a 95       	dec	r25
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	da f7       	brpl	.-10     	; 0x1344 <__floatsisf+0x62>
    134e:	88 0f       	add	r24, r24
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <__floatundisf>:
    1358:	e8 94       	clt

0000135a <__fp_di2sf>:
    135a:	f9 2f       	mov	r31, r25
    135c:	96 eb       	ldi	r25, 0xB6	; 182
    135e:	ff 23       	and	r31, r31
    1360:	81 f0       	breq	.+32     	; 0x1382 <__fp_di2sf+0x28>
    1362:	12 16       	cp	r1, r18
    1364:	13 06       	cpc	r1, r19
    1366:	14 06       	cpc	r1, r20
    1368:	44 0b       	sbc	r20, r20
    136a:	93 95       	inc	r25
    136c:	f6 95       	lsr	r31
    136e:	87 95       	ror	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	57 95       	ror	r21
    1376:	40 40       	sbci	r20, 0x00	; 0
    1378:	ff 23       	and	r31, r31
    137a:	b9 f7       	brne	.-18     	; 0x136a <__fp_di2sf+0x10>
    137c:	1b c0       	rjmp	.+54     	; 0x13b4 <__fp_di2sf+0x5a>
    137e:	99 27       	eor	r25, r25
    1380:	08 95       	ret
    1382:	88 23       	and	r24, r24
    1384:	51 f4       	brne	.+20     	; 0x139a <__fp_di2sf+0x40>
    1386:	98 50       	subi	r25, 0x08	; 8
    1388:	d2 f7       	brpl	.-12     	; 0x137e <__fp_di2sf+0x24>
    138a:	87 2b       	or	r24, r23
    138c:	76 2f       	mov	r23, r22
    138e:	65 2f       	mov	r22, r21
    1390:	54 2f       	mov	r21, r20
    1392:	43 2f       	mov	r20, r19
    1394:	32 2f       	mov	r19, r18
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	b1 f3       	breq	.-20     	; 0x1386 <__fp_di2sf+0x2c>
    139a:	12 16       	cp	r1, r18
    139c:	13 06       	cpc	r1, r19
    139e:	14 06       	cpc	r1, r20
    13a0:	44 0b       	sbc	r20, r20
    13a2:	88 23       	and	r24, r24
    13a4:	3a f0       	brmi	.+14     	; 0x13b4 <__fp_di2sf+0x5a>
    13a6:	9a 95       	dec	r25
    13a8:	44 0f       	add	r20, r20
    13aa:	55 1f       	adc	r21, r21
    13ac:	66 1f       	adc	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	ca f7       	brpl	.-14     	; 0x13a6 <__fp_di2sf+0x4c>
    13b4:	55 23       	and	r21, r21
    13b6:	4a f4       	brpl	.+18     	; 0x13ca <__fp_di2sf+0x70>
    13b8:	44 0f       	add	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <__fp_di2sf+0x68>
    13be:	60 ff       	sbrs	r22, 0
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <__fp_di2sf+0x70>
    13c2:	6f 5f       	subi	r22, 0xFF	; 255
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	8f 4f       	sbci	r24, 0xFF	; 255
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	88 0f       	add	r24, r24
    13cc:	96 95       	lsr	r25
    13ce:	87 95       	ror	r24
    13d0:	97 f9       	bld	r25, 7
    13d2:	08 95       	ret

000013d4 <__fp_inf>:
    13d4:	97 f9       	bld	r25, 7
    13d6:	9f 67       	ori	r25, 0x7F	; 127
    13d8:	80 e8       	ldi	r24, 0x80	; 128
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	08 95       	ret

000013e0 <__fp_nan>:
    13e0:	9f ef       	ldi	r25, 0xFF	; 255
    13e2:	80 ec       	ldi	r24, 0xC0	; 192
    13e4:	08 95       	ret

000013e6 <__fp_negdi>:
    13e6:	90 95       	com	r25
    13e8:	80 95       	com	r24
    13ea:	70 95       	com	r23
    13ec:	60 95       	com	r22
    13ee:	50 95       	com	r21
    13f0:	40 95       	com	r20
    13f2:	30 95       	com	r19
    13f4:	21 95       	neg	r18
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	4f 4f       	sbci	r20, 0xFF	; 255
    13fa:	5f 4f       	sbci	r21, 0xFF	; 255
    13fc:	6f 4f       	sbci	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	8f 4f       	sbci	r24, 0xFF	; 255
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	08 95       	ret

00001406 <__fp_pscA>:
    1406:	00 24       	eor	r0, r0
    1408:	0a 94       	dec	r0
    140a:	16 16       	cp	r1, r22
    140c:	17 06       	cpc	r1, r23
    140e:	18 06       	cpc	r1, r24
    1410:	09 06       	cpc	r0, r25
    1412:	08 95       	ret

00001414 <__fp_pscB>:
    1414:	00 24       	eor	r0, r0
    1416:	0a 94       	dec	r0
    1418:	12 16       	cp	r1, r18
    141a:	13 06       	cpc	r1, r19
    141c:	14 06       	cpc	r1, r20
    141e:	05 06       	cpc	r0, r21
    1420:	08 95       	ret

00001422 <__fp_round>:
    1422:	09 2e       	mov	r0, r25
    1424:	03 94       	inc	r0
    1426:	00 0c       	add	r0, r0
    1428:	11 f4       	brne	.+4      	; 0x142e <__fp_round+0xc>
    142a:	88 23       	and	r24, r24
    142c:	52 f0       	brmi	.+20     	; 0x1442 <__fp_round+0x20>
    142e:	bb 0f       	add	r27, r27
    1430:	40 f4       	brcc	.+16     	; 0x1442 <__fp_round+0x20>
    1432:	bf 2b       	or	r27, r31
    1434:	11 f4       	brne	.+4      	; 0x143a <__fp_round+0x18>
    1436:	60 ff       	sbrs	r22, 0
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <__fp_round+0x20>
    143a:	6f 5f       	subi	r22, 0xFF	; 255
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	8f 4f       	sbci	r24, 0xFF	; 255
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	08 95       	ret

00001444 <__fp_split3>:
    1444:	57 fd       	sbrc	r21, 7
    1446:	90 58       	subi	r25, 0x80	; 128
    1448:	44 0f       	add	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	59 f0       	breq	.+22     	; 0x1464 <__fp_splitA+0x10>
    144e:	5f 3f       	cpi	r21, 0xFF	; 255
    1450:	71 f0       	breq	.+28     	; 0x146e <__fp_splitA+0x1a>
    1452:	47 95       	ror	r20

00001454 <__fp_splitA>:
    1454:	88 0f       	add	r24, r24
    1456:	97 fb       	bst	r25, 7
    1458:	99 1f       	adc	r25, r25
    145a:	61 f0       	breq	.+24     	; 0x1474 <__fp_splitA+0x20>
    145c:	9f 3f       	cpi	r25, 0xFF	; 255
    145e:	79 f0       	breq	.+30     	; 0x147e <__fp_splitA+0x2a>
    1460:	87 95       	ror	r24
    1462:	08 95       	ret
    1464:	12 16       	cp	r1, r18
    1466:	13 06       	cpc	r1, r19
    1468:	14 06       	cpc	r1, r20
    146a:	55 1f       	adc	r21, r21
    146c:	f2 cf       	rjmp	.-28     	; 0x1452 <__fp_split3+0xe>
    146e:	46 95       	lsr	r20
    1470:	f1 df       	rcall	.-30     	; 0x1454 <__fp_splitA>
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <__fp_splitA+0x30>
    1474:	16 16       	cp	r1, r22
    1476:	17 06       	cpc	r1, r23
    1478:	18 06       	cpc	r1, r24
    147a:	99 1f       	adc	r25, r25
    147c:	f1 cf       	rjmp	.-30     	; 0x1460 <__fp_splitA+0xc>
    147e:	86 95       	lsr	r24
    1480:	71 05       	cpc	r23, r1
    1482:	61 05       	cpc	r22, r1
    1484:	08 94       	sec
    1486:	08 95       	ret

00001488 <__fp_zero>:
    1488:	e8 94       	clt

0000148a <__fp_szero>:
    148a:	bb 27       	eor	r27, r27
    148c:	66 27       	eor	r22, r22
    148e:	77 27       	eor	r23, r23
    1490:	cb 01       	movw	r24, r22
    1492:	97 f9       	bld	r25, 7
    1494:	08 95       	ret

00001496 <__mulsf3>:
    1496:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__mulsf3x>
    149a:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_round>
    149e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_pscA>
    14a2:	38 f0       	brcs	.+14     	; 0x14b2 <__mulsf3+0x1c>
    14a4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_pscB>
    14a8:	20 f0       	brcs	.+8      	; 0x14b2 <__mulsf3+0x1c>
    14aa:	95 23       	and	r25, r21
    14ac:	11 f0       	breq	.+4      	; 0x14b2 <__mulsf3+0x1c>
    14ae:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_inf>
    14b2:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_nan>
    14b6:	11 24       	eor	r1, r1
    14b8:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>

000014bc <__mulsf3x>:
    14bc:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_split3>
    14c0:	70 f3       	brcs	.-36     	; 0x149e <__mulsf3+0x8>

000014c2 <__mulsf3_pse>:
    14c2:	95 9f       	mul	r25, r21
    14c4:	c1 f3       	breq	.-16     	; 0x14b6 <__mulsf3+0x20>
    14c6:	95 0f       	add	r25, r21
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	55 1f       	adc	r21, r21
    14cc:	62 9f       	mul	r22, r18
    14ce:	f0 01       	movw	r30, r0
    14d0:	72 9f       	mul	r23, r18
    14d2:	bb 27       	eor	r27, r27
    14d4:	f0 0d       	add	r31, r0
    14d6:	b1 1d       	adc	r27, r1
    14d8:	63 9f       	mul	r22, r19
    14da:	aa 27       	eor	r26, r26
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	aa 1f       	adc	r26, r26
    14e2:	64 9f       	mul	r22, r20
    14e4:	66 27       	eor	r22, r22
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	66 1f       	adc	r22, r22
    14ec:	82 9f       	mul	r24, r18
    14ee:	22 27       	eor	r18, r18
    14f0:	b0 0d       	add	r27, r0
    14f2:	a1 1d       	adc	r26, r1
    14f4:	62 1f       	adc	r22, r18
    14f6:	73 9f       	mul	r23, r19
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	83 9f       	mul	r24, r19
    1500:	a0 0d       	add	r26, r0
    1502:	61 1d       	adc	r22, r1
    1504:	22 1f       	adc	r18, r18
    1506:	74 9f       	mul	r23, r20
    1508:	33 27       	eor	r19, r19
    150a:	a0 0d       	add	r26, r0
    150c:	61 1d       	adc	r22, r1
    150e:	23 1f       	adc	r18, r19
    1510:	84 9f       	mul	r24, r20
    1512:	60 0d       	add	r22, r0
    1514:	21 1d       	adc	r18, r1
    1516:	82 2f       	mov	r24, r18
    1518:	76 2f       	mov	r23, r22
    151a:	6a 2f       	mov	r22, r26
    151c:	11 24       	eor	r1, r1
    151e:	9f 57       	subi	r25, 0x7F	; 127
    1520:	50 40       	sbci	r21, 0x00	; 0
    1522:	9a f0       	brmi	.+38     	; 0x154a <__mulsf3_pse+0x88>
    1524:	f1 f0       	breq	.+60     	; 0x1562 <__mulsf3_pse+0xa0>
    1526:	88 23       	and	r24, r24
    1528:	4a f0       	brmi	.+18     	; 0x153c <__mulsf3_pse+0x7a>
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	bb 1f       	adc	r27, r27
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__mulsf3_pse+0x64>
    153c:	9e 3f       	cpi	r25, 0xFE	; 254
    153e:	51 05       	cpc	r21, r1
    1540:	80 f0       	brcs	.+32     	; 0x1562 <__mulsf3_pse+0xa0>
    1542:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_inf>
    1546:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>
    154a:	5f 3f       	cpi	r21, 0xFF	; 255
    154c:	e4 f3       	brlt	.-8      	; 0x1546 <__mulsf3_pse+0x84>
    154e:	98 3e       	cpi	r25, 0xE8	; 232
    1550:	d4 f3       	brlt	.-12     	; 0x1546 <__mulsf3_pse+0x84>
    1552:	86 95       	lsr	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f7 95       	ror	r31
    155c:	e7 95       	ror	r30
    155e:	9f 5f       	subi	r25, 0xFF	; 255
    1560:	c1 f7       	brne	.-16     	; 0x1552 <__mulsf3_pse+0x90>
    1562:	fe 2b       	or	r31, r30
    1564:	88 0f       	add	r24, r24
    1566:	91 1d       	adc	r25, r1
    1568:	96 95       	lsr	r25
    156a:	87 95       	ror	r24
    156c:	97 f9       	bld	r25, 7
    156e:	08 95       	ret
    1570:	19 f4       	brne	.+6      	; 0x1578 <__mulsf3_pse+0xb6>
    1572:	16 f4       	brtc	.+4      	; 0x1578 <__mulsf3_pse+0xb6>
    1574:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_nan>
    1578:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_mpack>

0000157c <sqrt>:
    157c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fp_splitA>
    1580:	b8 f3       	brcs	.-18     	; 0x1570 <__mulsf3_pse+0xae>
    1582:	99 23       	and	r25, r25
    1584:	c9 f3       	breq	.-14     	; 0x1578 <__mulsf3_pse+0xb6>
    1586:	b6 f3       	brts	.-20     	; 0x1574 <__mulsf3_pse+0xb2>
    1588:	9f 57       	subi	r25, 0x7F	; 127
    158a:	55 0b       	sbc	r21, r21
    158c:	87 ff       	sbrs	r24, 7
    158e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_norm2>
    1592:	00 24       	eor	r0, r0
    1594:	a0 e6       	ldi	r26, 0x60	; 96
    1596:	40 ea       	ldi	r20, 0xA0	; 160
    1598:	90 01       	movw	r18, r0
    159a:	80 58       	subi	r24, 0x80	; 128
    159c:	56 95       	lsr	r21
    159e:	97 95       	ror	r25
    15a0:	28 f4       	brcc	.+10     	; 0x15ac <sqrt+0x30>
    15a2:	80 5c       	subi	r24, 0xC0	; 192
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	20 f0       	brcs	.+8      	; 0x15b4 <sqrt+0x38>
    15ac:	26 17       	cp	r18, r22
    15ae:	37 07       	cpc	r19, r23
    15b0:	48 07       	cpc	r20, r24
    15b2:	30 f4       	brcc	.+12     	; 0x15c0 <sqrt+0x44>
    15b4:	62 1b       	sub	r22, r18
    15b6:	73 0b       	sbc	r23, r19
    15b8:	84 0b       	sbc	r24, r20
    15ba:	20 29       	or	r18, r0
    15bc:	31 29       	or	r19, r1
    15be:	4a 2b       	or	r20, r26
    15c0:	a6 95       	lsr	r26
    15c2:	17 94       	ror	r1
    15c4:	07 94       	ror	r0
    15c6:	20 25       	eor	r18, r0
    15c8:	31 25       	eor	r19, r1
    15ca:	4a 27       	eor	r20, r26
    15cc:	58 f7       	brcc	.-42     	; 0x15a4 <sqrt+0x28>
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	20 f0       	brcs	.+8      	; 0x15de <sqrt+0x62>
    15d6:	26 17       	cp	r18, r22
    15d8:	37 07       	cpc	r19, r23
    15da:	48 07       	cpc	r20, r24
    15dc:	30 f4       	brcc	.+12     	; 0x15ea <sqrt+0x6e>
    15de:	62 0b       	sbc	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	20 0d       	add	r18, r0
    15e6:	31 1d       	adc	r19, r1
    15e8:	41 1d       	adc	r20, r1
    15ea:	a0 95       	com	r26
    15ec:	81 f7       	brne	.-32     	; 0x15ce <sqrt+0x52>
    15ee:	b9 01       	movw	r22, r18
    15f0:	84 2f       	mov	r24, r20
    15f2:	91 58       	subi	r25, 0x81	; 129
    15f4:	88 0f       	add	r24, r24
    15f6:	96 95       	lsr	r25
    15f8:	87 95       	ror	r24
    15fa:	08 95       	ret

000015fc <__fp_mpack>:
    15fc:	9f 3f       	cpi	r25, 0xFF	; 255
    15fe:	31 f0       	breq	.+12     	; 0x160c <__fp_mpack_finite+0xc>

00001600 <__fp_mpack_finite>:
    1600:	91 50       	subi	r25, 0x01	; 1
    1602:	20 f4       	brcc	.+8      	; 0x160c <__fp_mpack_finite+0xc>
    1604:	87 95       	ror	r24
    1606:	77 95       	ror	r23
    1608:	67 95       	ror	r22
    160a:	b7 95       	ror	r27
    160c:	88 0f       	add	r24, r24
    160e:	91 1d       	adc	r25, r1
    1610:	96 95       	lsr	r25
    1612:	87 95       	ror	r24
    1614:	97 f9       	bld	r25, 7
    1616:	08 95       	ret

00001618 <__fp_norm2>:
    1618:	91 50       	subi	r25, 0x01	; 1
    161a:	50 40       	sbci	r21, 0x00	; 0
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	d2 f7       	brpl	.-12     	; 0x1618 <__fp_norm2>
    1624:	08 95       	ret

00001626 <__udivmodsi4>:
    1626:	a1 e2       	ldi	r26, 0x21	; 33
    1628:	1a 2e       	mov	r1, r26
    162a:	aa 1b       	sub	r26, r26
    162c:	bb 1b       	sub	r27, r27
    162e:	fd 01       	movw	r30, r26
    1630:	0d c0       	rjmp	.+26     	; 0x164c <__udivmodsi4_ep>

00001632 <__udivmodsi4_loop>:
    1632:	aa 1f       	adc	r26, r26
    1634:	bb 1f       	adc	r27, r27
    1636:	ee 1f       	adc	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	a2 17       	cp	r26, r18
    163c:	b3 07       	cpc	r27, r19
    163e:	e4 07       	cpc	r30, r20
    1640:	f5 07       	cpc	r31, r21
    1642:	20 f0       	brcs	.+8      	; 0x164c <__udivmodsi4_ep>
    1644:	a2 1b       	sub	r26, r18
    1646:	b3 0b       	sbc	r27, r19
    1648:	e4 0b       	sbc	r30, r20
    164a:	f5 0b       	sbc	r31, r21

0000164c <__udivmodsi4_ep>:
    164c:	66 1f       	adc	r22, r22
    164e:	77 1f       	adc	r23, r23
    1650:	88 1f       	adc	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	1a 94       	dec	r1
    1656:	69 f7       	brne	.-38     	; 0x1632 <__udivmodsi4_loop>
    1658:	60 95       	com	r22
    165a:	70 95       	com	r23
    165c:	80 95       	com	r24
    165e:	90 95       	com	r25
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	bd 01       	movw	r22, r26
    1666:	cf 01       	movw	r24, r30
    1668:	08 95       	ret

0000166a <__muluhisi3>:
    166a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__umulhisi3>
    166e:	a5 9f       	mul	r26, r21
    1670:	90 0d       	add	r25, r0
    1672:	b4 9f       	mul	r27, r20
    1674:	90 0d       	add	r25, r0
    1676:	a4 9f       	mul	r26, r20
    1678:	80 0d       	add	r24, r0
    167a:	91 1d       	adc	r25, r1
    167c:	11 24       	eor	r1, r1
    167e:	08 95       	ret

00001680 <__ashldi3>:
    1680:	0f 93       	push	r16
    1682:	08 30       	cpi	r16, 0x08	; 8
    1684:	90 f0       	brcs	.+36     	; 0x16aa <__ashldi3+0x2a>
    1686:	98 2f       	mov	r25, r24
    1688:	87 2f       	mov	r24, r23
    168a:	76 2f       	mov	r23, r22
    168c:	65 2f       	mov	r22, r21
    168e:	54 2f       	mov	r21, r20
    1690:	43 2f       	mov	r20, r19
    1692:	32 2f       	mov	r19, r18
    1694:	22 27       	eor	r18, r18
    1696:	08 50       	subi	r16, 0x08	; 8
    1698:	f4 cf       	rjmp	.-24     	; 0x1682 <__ashldi3+0x2>
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
    169e:	44 1f       	adc	r20, r20
    16a0:	55 1f       	adc	r21, r21
    16a2:	66 1f       	adc	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 95       	dec	r16
    16ac:	b2 f7       	brpl	.-20     	; 0x169a <__ashldi3+0x1a>
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <__adddi3>:
    16b2:	2a 0d       	add	r18, r10
    16b4:	3b 1d       	adc	r19, r11
    16b6:	4c 1d       	adc	r20, r12
    16b8:	5d 1d       	adc	r21, r13
    16ba:	6e 1d       	adc	r22, r14
    16bc:	7f 1d       	adc	r23, r15
    16be:	80 1f       	adc	r24, r16
    16c0:	91 1f       	adc	r25, r17
    16c2:	08 95       	ret

000016c4 <__adddi3_s8>:
    16c4:	00 24       	eor	r0, r0
    16c6:	a7 fd       	sbrc	r26, 7
    16c8:	00 94       	com	r0
    16ca:	2a 0f       	add	r18, r26
    16cc:	30 1d       	adc	r19, r0
    16ce:	40 1d       	adc	r20, r0
    16d0:	50 1d       	adc	r21, r0
    16d2:	60 1d       	adc	r22, r0
    16d4:	70 1d       	adc	r23, r0
    16d6:	80 1d       	adc	r24, r0
    16d8:	90 1d       	adc	r25, r0
    16da:	08 95       	ret

000016dc <__subdi3>:
    16dc:	2a 19       	sub	r18, r10
    16de:	3b 09       	sbc	r19, r11
    16e0:	4c 09       	sbc	r20, r12
    16e2:	5d 09       	sbc	r21, r13
    16e4:	6e 09       	sbc	r22, r14
    16e6:	7f 09       	sbc	r23, r15
    16e8:	80 0b       	sbc	r24, r16
    16ea:	91 0b       	sbc	r25, r17
    16ec:	08 95       	ret

000016ee <__cmpdi2>:
    16ee:	2a 15       	cp	r18, r10
    16f0:	3b 05       	cpc	r19, r11
    16f2:	4c 05       	cpc	r20, r12
    16f4:	5d 05       	cpc	r21, r13
    16f6:	6e 05       	cpc	r22, r14
    16f8:	7f 05       	cpc	r23, r15
    16fa:	80 07       	cpc	r24, r16
    16fc:	91 07       	cpc	r25, r17
    16fe:	08 95       	ret

00001700 <__cmpdi2_s8>:
    1700:	00 24       	eor	r0, r0
    1702:	a7 fd       	sbrc	r26, 7
    1704:	00 94       	com	r0
    1706:	2a 17       	cp	r18, r26
    1708:	30 05       	cpc	r19, r0
    170a:	40 05       	cpc	r20, r0
    170c:	50 05       	cpc	r21, r0
    170e:	60 05       	cpc	r22, r0
    1710:	70 05       	cpc	r23, r0
    1712:	80 05       	cpc	r24, r0
    1714:	90 05       	cpc	r25, r0
    1716:	08 95       	ret

00001718 <__umulhisi3>:
    1718:	a2 9f       	mul	r26, r18
    171a:	b0 01       	movw	r22, r0
    171c:	b3 9f       	mul	r27, r19
    171e:	c0 01       	movw	r24, r0
    1720:	a3 9f       	mul	r26, r19
    1722:	70 0d       	add	r23, r0
    1724:	81 1d       	adc	r24, r1
    1726:	11 24       	eor	r1, r1
    1728:	91 1d       	adc	r25, r1
    172a:	b2 9f       	mul	r27, r18
    172c:	70 0d       	add	r23, r0
    172e:	81 1d       	adc	r24, r1
    1730:	11 24       	eor	r1, r1
    1732:	91 1d       	adc	r25, r1
    1734:	08 95       	ret

00001736 <_exit>:
    1736:	f8 94       	cli

00001738 <__stop_program>:
    1738:	ff cf       	rjmp	.-2      	; 0x1738 <__stop_program>
