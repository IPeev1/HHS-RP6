
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001862  000018f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00800066  00800066  000018fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e63  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  000028d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa1  00000000  00000000  00003182  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00003c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b4  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a97  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_1>
       8:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 08 	call	0x117e	; 0x117e <main>
      8a:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getBumperLeft>:

#define DISTANCE 0

int getBumperLeft() {
	
	PORT_L &= ~(1 << IO_L);
      92:	c0 98       	cbi	0x18, 0	; 24
	DDR_L &= ~(1 << IO_L);
      94:	b8 98       	cbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      96:	00 c0       	rjmp	.+0      	; 0x98 <getBumperLeft+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_L & (1 << IO_L);
      98:	86 b3       	in	r24, 0x16	; 22
	
	DDR_L |= (1 << IO_L);
      9a:	b8 9a       	sbi	0x17, 0	; 23
	PORT_L |= (1 <<  IO_L);
      9c:	c0 9a       	sbi	0x18, 0	; 24
	
	return pushed;
}
      9e:	81 70       	andi	r24, 0x01	; 1
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	08 95       	ret

000000a4 <getBumperRight>:

int getBumperRight() {
	
	PORT_R &= ~(1 << IO_R);
      a4:	ae 98       	cbi	0x15, 6	; 21
	DDR_R &= ~(1 << IO_R);
      a6:	a6 98       	cbi	0x14, 6	; 20
      a8:	00 c0       	rjmp	.+0      	; 0xaa <getBumperRight+0x6>
	_delay_us(2);
	
	uint8_t pushed = PIN_R & (1 << IO_R);
      aa:	83 b3       	in	r24, 0x13	; 19
	
	DDR_R |= (1 << IO_R);
      ac:	a6 9a       	sbi	0x14, 6	; 20
	PORT_R |= (1 <<  IO_R);
      ae:	ae 9a       	sbi	0x15, 6	; 21
	
	return pushed;
      b0:	80 74       	andi	r24, 0x40	; 64
}
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	08 95       	ret

000000b6 <getBumpers>:

int getBumpers() {
	
	return getBumperLeft() || getBumperRight();
      b6:	0e 94 49 00 	call	0x92	; 0x92 <getBumperLeft>
      ba:	89 2b       	or	r24, r25
      bc:	51 f4       	brne	.+20     	; 0xd2 <getBumpers+0x1c>
      be:	0e 94 52 00 	call	0xa4	; 0xa4 <getBumperRight>
      c2:	31 e0       	ldi	r19, 0x01	; 1
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	89 2b       	or	r24, r25
      c8:	09 f4       	brne	.+2      	; 0xcc <getBumpers+0x16>
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	83 2f       	mov	r24, r19
      ce:	92 2f       	mov	r25, r18
      d0:	08 95       	ret
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	08 95       	ret

000000d8 <init_LED>:
	sei();									//Enable global interrupts
}


void init_LED(){
	DDRB |= 0b10000011;
      d8:	87 b3       	in	r24, 0x17	; 23
      da:	83 68       	ori	r24, 0x83	; 131
      dc:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      de:	84 b3       	in	r24, 0x14	; 20
      e0:	80 67       	ori	r24, 0x70	; 112
      e2:	84 bb       	out	0x14, r24	; 20
      e4:	08 95       	ret

000000e6 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      e6:	83 b7       	in	r24, 0x33	; 51
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      ec:	83 b7       	in	r24, 0x33	; 51
      ee:	82 60       	ori	r24, 0x02	; 2
      f0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      f2:	89 b7       	in	r24, 0x39	; 57
      f4:	81 60       	ori	r24, 0x01	; 1
      f6:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      f8:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      fa:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <t0TotalOverflow>
      fe:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <t0TotalOverflow+0x1>
     102:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t0TotalOverflow+0x2>
     106:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <t0TotalOverflow+0x3>
     10a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <t0TotalOverflow+0x4>
     10e:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <t0TotalOverflow+0x5>
     112:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <t0TotalOverflow+0x6>
     116:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <t0TotalOverflow+0x7>
     11a:	08 95       	ret

0000011c <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
     126:	2f 93       	push	r18
     128:	3f 93       	push	r19
     12a:	4f 93       	push	r20
     12c:	5f 93       	push	r21
     12e:	6f 93       	push	r22
     130:	7f 93       	push	r23
     132:	8f 93       	push	r24
     134:	9f 93       	push	r25
     136:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
     138:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <t0TotalOverflow>
     13c:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x1>
     140:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <t0TotalOverflow+0x2>
     144:	50 91 bb 00 	lds	r21, 0x00BB	; 0x8000bb <t0TotalOverflow+0x3>
     148:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <t0TotalOverflow+0x4>
     14c:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <t0TotalOverflow+0x5>
     150:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <t0TotalOverflow+0x6>
     154:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <t0TotalOverflow+0x7>
     158:	a1 e0       	ldi	r26, 0x01	; 1
     15a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__adddi3_s8>
     15e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <t0TotalOverflow>
     162:	30 93 b9 00 	sts	0x00B9, r19	; 0x8000b9 <t0TotalOverflow+0x1>
     166:	40 93 ba 00 	sts	0x00BA, r20	; 0x8000ba <t0TotalOverflow+0x2>
     16a:	50 93 bb 00 	sts	0x00BB, r21	; 0x8000bb <t0TotalOverflow+0x3>
     16e:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <t0TotalOverflow+0x4>
     172:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <t0TotalOverflow+0x5>
     176:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <t0TotalOverflow+0x6>
     17a:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <t0TotalOverflow+0x7>
}
     17e:	af 91       	pop	r26
     180:	9f 91       	pop	r25
     182:	8f 91       	pop	r24
     184:	7f 91       	pop	r23
     186:	6f 91       	pop	r22
     188:	5f 91       	pop	r21
     18a:	4f 91       	pop	r20
     18c:	3f 91       	pop	r19
     18e:	2f 91       	pop	r18
     190:	0f 90       	pop	r0
     192:	0f be       	out	0x3f, r0	; 63
     194:	0f 90       	pop	r0
     196:	1f 90       	pop	r1
     198:	18 95       	reti

0000019a <micros>:


uint64_t micros(){
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     1aa:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     1ac:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <t0TotalOverflow>
     1b0:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <t0TotalOverflow+0x1>
     1b4:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <t0TotalOverflow+0x2>
     1b8:	50 91 bb 00 	lds	r21, 0x00BB	; 0x8000bb <t0TotalOverflow+0x3>
     1bc:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <t0TotalOverflow+0x4>
     1c0:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <t0TotalOverflow+0x5>
     1c4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <t0TotalOverflow+0x6>
     1c8:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     1cc:	e0 e0       	ldi	r30, 0x00	; 0
     1ce:	fa 2f       	mov	r31, r26
     1d0:	ff 0f       	add	r31, r31
     1d2:	ff 0f       	add	r31, r31
     1d4:	ff 0f       	add	r31, r31
     1d6:	ff 23       	and	r31, r31
     1d8:	14 f4       	brge	.+4      	; 0x1de <micros+0x44>
     1da:	e1 50       	subi	r30, 0x01	; 1
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	ef 2f       	mov	r30, r31
     1e0:	ee 0f       	add	r30, r30
     1e2:	ee 0b       	sbc	r30, r30
     1e4:	0b e0       	ldi	r16, 0x0B	; 11
     1e6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__ashldi3>
     1ea:	a2 2e       	mov	r10, r18
     1ec:	b3 2e       	mov	r11, r19
     1ee:	c4 2e       	mov	r12, r20
     1f0:	d5 2e       	mov	r13, r21
     1f2:	e6 2e       	mov	r14, r22
     1f4:	f7 2e       	mov	r15, r23
     1f6:	08 2f       	mov	r16, r24
     1f8:	19 2f       	mov	r17, r25
     1fa:	2f 2f       	mov	r18, r31
     1fc:	3e 2f       	mov	r19, r30
     1fe:	4e 2f       	mov	r20, r30
     200:	5e 2f       	mov	r21, r30
     202:	6e 2f       	mov	r22, r30
     204:	7e 2f       	mov	r23, r30
     206:	8e 2f       	mov	r24, r30
     208:	9e 2f       	mov	r25, r30
     20a:	0e 94 ed 0b 	call	0x17da	; 0x17da <__adddi3>
}
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	08 95       	ret

00000220 <init_TWI>:
//------------------------------------------------------
//I2C functions ----------------------------------------
void init_TWI(){
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);		//Enable TWI; Enable Acknowledge; Enable Interrupt
     220:	85 e4       	ldi	r24, 0x45	; 69
     222:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;											//No prescaling
     224:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);									//Set slave address
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;					//set SCL to 100kHz
     22a:	80 e2       	ldi	r24, 0x20	; 32
     22c:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;
     22e:	84 b3       	in	r24, 0x14	; 20
     230:	83 60       	ori	r24, 0x03	; 3
     232:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;
     234:	85 b3       	in	r24, 0x15	; 21
     236:	83 60       	ori	r24, 0x03	; 3
     238:	85 bb       	out	0x15, r24	; 21
     23a:	08 95       	ret

0000023c <init_rp6Data>:
}


void init_rp6Data(){
	rp6Data.driveSpeed = 0;
     23c:	e5 ea       	ldi	r30, 0xA5	; 165
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	10 82       	st	Z, r1
     242:	11 82       	std	Z+1, r1	; 0x01
     244:	12 82       	std	Z+2, r1	; 0x02
     246:	13 82       	std	Z+3, r1	; 0x03
	rp6Data.driveDirection = 1;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	84 83       	std	Z+4, r24	; 0x04
	rp6Data.turnDirection = 0;
     24c:	15 82       	std	Z+5, r1	; 0x05
	rp6Data.accelerationRate = 2000;
     24e:	20 ed       	ldi	r18, 0xD0	; 208
     250:	37 e0       	ldi	r19, 0x07	; 7
     252:	37 83       	std	Z+7, r19	; 0x07
     254:	26 83       	std	Z+6, r18	; 0x06
	rp6Data.turnRate = 2500;
     256:	24 ec       	ldi	r18, 0xC4	; 196
     258:	39 e0       	ldi	r19, 0x09	; 9
     25a:	31 87       	std	Z+9, r19	; 0x09
     25c:	20 87       	std	Z+8, r18	; 0x08
	rp6Data.driveSpeedThreshold = 7000;
     25e:	28 e5       	ldi	r18, 0x58	; 88
     260:	3b e1       	ldi	r19, 0x1B	; 27
     262:	33 87       	std	Z+11, r19	; 0x0b
     264:	22 87       	std	Z+10, r18	; 0x0a
	rp6Data.updateSpeed = 200;
     266:	48 ec       	ldi	r20, 0xC8	; 200
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	44 87       	std	Z+12, r20	; 0x0c
     270:	55 87       	std	Z+13, r21	; 0x0d
     272:	66 87       	std	Z+14, r22	; 0x0e
     274:	77 87       	std	Z+15, r23	; 0x0f
	rp6Data.enableBeeper = 1;
     276:	80 8b       	std	Z+16, r24	; 0x10
     278:	08 95       	ret

0000027a <init_arduinoData>:
}


void init_arduinoData(){
	arduinoData.motorEncoderLVal = 0;
     27a:	e7 e8       	ldi	r30, 0x87	; 135
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	11 82       	std	Z+1, r1	; 0x01
     280:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;
     282:	13 82       	std	Z+3, r1	; 0x03
     284:	12 82       	std	Z+2, r1	; 0x02
     286:	08 95       	ret

00000288 <clearSendData>:
	
	TWCR |= (1 << TWINT);
}


void clearSendData(){
     288:	e0 ec       	ldi	r30, 0xC0	; 192
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	84 ed       	ldi	r24, 0xD4	; 212
     28e:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     290:	11 92       	st	Z+, r1
	TWCR |= (1 << TWINT);
}


void clearSendData(){
	for(int i = 0; i < DATASIZE; i++){
     292:	e8 17       	cp	r30, r24
     294:	f9 07       	cpc	r31, r25
     296:	e1 f7       	brne	.-8      	; 0x290 <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     298:	08 95       	ret

0000029a <clearReceiveData>:


void clearReceiveData(){
     29a:	e1 e9       	ldi	r30, 0x91	; 145
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	85 ea       	ldi	r24, 0xA5	; 165
     2a0:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     2a2:	11 92       	st	Z+, r1
	}
}


void clearReceiveData(){
	for(int i = 0; i < DATASIZE; i++){
     2a4:	e8 17       	cp	r30, r24
     2a6:	f9 07       	cpc	r31, r25
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     2aa:	08 95       	ret

000002ac <rp6DataInterpreter>:
		case(1): rp6DataInterpreter(); break;
	}
}


void rp6DataInterpreter(){
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
	if(receiveData[2]-1 == 0){
     2b0:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <receiveData+0x2>
     2b4:	21 30       	cpi	r18, 0x01	; 1
     2b6:	49 f4       	brne	.+18     	; 0x2ca <rp6DataInterpreter+0x1e>
		rp6Data.driveSpeed = 0;
     2b8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <rp6Data>
     2bc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <rp6Data+0x1>
     2c0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <rp6Data+0x2>
     2c4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <rp6Data+0x3>
     2c8:	12 c0       	rjmp	.+36     	; 0x2ee <rp6DataInterpreter+0x42>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     2ca:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <receiveData+0x1>
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <rp6Data>
     2d8:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <rp6Data+0x1>
     2dc:	a0 93 a7 00 	sts	0x00A7, r26	; 0x8000a7 <rp6Data+0x2>
     2e0:	b0 93 a8 00 	sts	0x00A8, r27	; 0x8000a8 <rp6Data+0x3>
	}
	
	if(receiveData[2] < 1){
     2e4:	21 11       	cpse	r18, r1
     2e6:	03 c0       	rjmp	.+6      	; 0x2ee <rp6DataInterpreter+0x42>
		rp6Data.driveDirection = 0;
     2e8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <rp6Data+0x4>
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <rp6DataInterpreter+0x48>
	}else{
		rp6Data.driveDirection = 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <rp6Data+0x4>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     2f4:	c5 ea       	ldi	r28, 0xA5	; 165
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	e1 e9       	ldi	r30, 0x91	; 145
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	83 81       	ldd	r24, Z+3	; 0x03
     2fe:	81 50       	subi	r24, 0x01	; 1
     300:	8d 83       	std	Y+5, r24	; 0x05
	rp6Data.accelerationRate = (receiveData[4] << 8) + receiveData[5];
     302:	84 81       	ldd	r24, Z+4	; 0x04
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	98 2f       	mov	r25, r24
     308:	88 27       	eor	r24, r24
     30a:	25 81       	ldd	r18, Z+5	; 0x05
     30c:	82 0f       	add	r24, r18
     30e:	91 1d       	adc	r25, r1
     310:	9f 83       	std	Y+7, r25	; 0x07
     312:	8e 83       	std	Y+6, r24	; 0x06
	rp6Data.turnRate = (receiveData[6] << 8) + receiveData[7];
     314:	86 81       	ldd	r24, Z+6	; 0x06
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	98 2f       	mov	r25, r24
     31a:	88 27       	eor	r24, r24
     31c:	27 81       	ldd	r18, Z+7	; 0x07
     31e:	82 0f       	add	r24, r18
     320:	91 1d       	adc	r25, r1
     322:	99 87       	std	Y+9, r25	; 0x09
     324:	88 87       	std	Y+8, r24	; 0x08
	rp6Data.driveSpeedThreshold = (receiveData[8] << 8) + receiveData[9];
     326:	80 85       	ldd	r24, Z+8	; 0x08
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	98 2f       	mov	r25, r24
     32c:	88 27       	eor	r24, r24
     32e:	21 85       	ldd	r18, Z+9	; 0x09
     330:	82 0f       	add	r24, r18
     332:	91 1d       	adc	r25, r1
     334:	9b 87       	std	Y+11, r25	; 0x0b
     336:	8a 87       	std	Y+10, r24	; 0x0a
	rp6Data.updateSpeed = (receiveData[10] << 8) + receiveData[11];
     338:	82 85       	ldd	r24, Z+10	; 0x0a
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	98 2f       	mov	r25, r24
     33e:	88 27       	eor	r24, r24
     340:	23 85       	ldd	r18, Z+11	; 0x0b
     342:	82 0f       	add	r24, r18
     344:	91 1d       	adc	r25, r1
     346:	09 2e       	mov	r0, r25
     348:	00 0c       	add	r0, r0
     34a:	aa 0b       	sbc	r26, r26
     34c:	bb 0b       	sbc	r27, r27
     34e:	8c 87       	std	Y+12, r24	; 0x0c
     350:	9d 87       	std	Y+13, r25	; 0x0d
     352:	ae 87       	std	Y+14, r26	; 0x0e
     354:	bf 87       	std	Y+15, r27	; 0x0f
	rp6Data.enableBeeper = receiveData[12];
     356:	84 85       	ldd	r24, Z+12	; 0x0c
     358:	88 8b       	std	Y+16, r24	; 0x10
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
     35a:	85 85       	ldd	r24, Z+13	; 0x0d
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	98 2f       	mov	r25, r24
     360:	88 27       	eor	r24, r24
     362:	26 85       	ldd	r18, Z+14	; 0x0e
     364:	82 0f       	add	r24, r18
     366:	91 1d       	adc	r25, r1
     368:	9a 8b       	std	Y+18, r25	; 0x12
     36a:	89 8b       	std	Y+17, r24	; 0x11
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <I2C_receiveInterpreter>:
}


void I2C_receiveInterpreter(){
	int dataSet = receiveData[0];
	switch(dataSet){
     372:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <receiveData>
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	11 f4       	brne	.+4      	; 0x37e <I2C_receiveInterpreter+0xc>
		case(1): rp6DataInterpreter(); break;
     37a:	0e 94 56 01 	call	0x2ac	; 0x2ac <rp6DataInterpreter>
     37e:	08 95       	ret

00000380 <arduinoDataConstructor>:
	rp6Data.compassAngle = (receiveData[13] << 8) + receiveData[14];
}


void arduinoDataConstructor(){
	clearSendData();
     380:	0e 94 44 01 	call	0x288	; 0x288 <clearSendData>
	
	sendData[0] = 1;
     384:	e0 ec       	ldi	r30, 0xC0	; 192
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 83       	st	Z, r24
	
	sendData[1] = (arduinoData.motorEncoderLVal >> 8);
     38c:	a7 e8       	ldi	r26, 0x87	; 135
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	8c 91       	ld	r24, X
     392:	11 96       	adiw	r26, 0x01	; 1
     394:	9c 91       	ld	r25, X
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	91 83       	std	Z+1, r25	; 0x01
	sendData[2] = arduinoData.motorEncoderLVal;
     39a:	82 83       	std	Z+2, r24	; 0x02
	
	sendData[3] = (arduinoData.motorEncoderRVal >> 8);
     39c:	12 96       	adiw	r26, 0x02	; 2
     39e:	8c 91       	ld	r24, X
     3a0:	12 97       	sbiw	r26, 0x02	; 2
     3a2:	13 96       	adiw	r26, 0x03	; 3
     3a4:	9c 91       	ld	r25, X
     3a6:	13 97       	sbiw	r26, 0x03	; 3
     3a8:	93 83       	std	Z+3, r25	; 0x03
	sendData[4] = arduinoData.motorEncoderRVal;
     3aa:	84 83       	std	Z+4, r24	; 0x04
	
	sendData[5] = (arduinoData.distanceDrivenL >> 8);
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	8c 91       	ld	r24, X
     3b0:	14 97       	sbiw	r26, 0x04	; 4
     3b2:	15 96       	adiw	r26, 0x05	; 5
     3b4:	9c 91       	ld	r25, X
     3b6:	15 97       	sbiw	r26, 0x05	; 5
     3b8:	95 83       	std	Z+5, r25	; 0x05
	sendData[6] = arduinoData.distanceDrivenL;
     3ba:	86 83       	std	Z+6, r24	; 0x06
	
	sendData[7] = (arduinoData.distanceDrivenR >> 8);
     3bc:	16 96       	adiw	r26, 0x06	; 6
     3be:	8c 91       	ld	r24, X
     3c0:	16 97       	sbiw	r26, 0x06	; 6
     3c2:	17 96       	adiw	r26, 0x07	; 7
     3c4:	9c 91       	ld	r25, X
     3c6:	17 97       	sbiw	r26, 0x07	; 7
     3c8:	97 83       	std	Z+7, r25	; 0x07
	sendData[8] = arduinoData.distanceDrivenR;
     3ca:	80 87       	std	Z+8, r24	; 0x08
	
	sendData[9] = (arduinoData.totalDistance >> 8);
     3cc:	18 96       	adiw	r26, 0x08	; 8
     3ce:	8c 91       	ld	r24, X
     3d0:	18 97       	sbiw	r26, 0x08	; 8
     3d2:	19 96       	adiw	r26, 0x09	; 9
     3d4:	9c 91       	ld	r25, X
     3d6:	91 87       	std	Z+9, r25	; 0x09
	sendData[10] = arduinoData.totalDistance;
     3d8:	82 87       	std	Z+10, r24	; 0x0a
     3da:	eb ec       	ldi	r30, 0xCB	; 203
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	84 ed       	ldi	r24, 0xD4	; 212
     3e0:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i = 11; i < DATASIZE; i++){
		sendData[i] = 0;
     3e2:	11 92       	st	Z+, r1
	sendData[8] = arduinoData.distanceDrivenR;
	
	sendData[9] = (arduinoData.totalDistance >> 8);
	sendData[10] = arduinoData.totalDistance;
	
	for(int i = 11; i < DATASIZE; i++){
     3e4:	e8 17       	cp	r30, r24
     3e6:	f9 07       	cpc	r31, r25
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <arduinoDataConstructor+0x62>
		sendData[i] = 0;
	}
}
     3ea:	08 95       	ret

000003ec <__vector_19>:
	arduinoData.motorEncoderLVal = 0;
	arduinoData.motorEncoderRVal = 0;
}


ISR(TWI_vect){
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	2f 93       	push	r18
     3f8:	3f 93       	push	r19
     3fa:	4f 93       	push	r20
     3fc:	5f 93       	push	r21
     3fe:	6f 93       	push	r22
     400:	7f 93       	push	r23
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	af 93       	push	r26
     408:	bf 93       	push	r27
     40a:	ef 93       	push	r30
     40c:	ff 93       	push	r31
	static int byteCounter = 0;
	switch(TWSR){
     40e:	81 b1       	in	r24, 0x01	; 1
     410:	80 3a       	cpi	r24, 0xA0	; 160
     412:	21 f1       	breq	.+72     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     414:	28 f4       	brcc	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     416:	80 36       	cpi	r24, 0x60	; 96
     418:	41 f0       	breq	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41a:	80 38       	cpi	r24, 0x80	; 128
     41c:	69 f0       	breq	.+26     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     41e:	39 c0       	rjmp	.+114    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     420:	88 3a       	cpi	r24, 0xA8	; 168
     422:	f9 f0       	breq	.+62     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     424:	88 3b       	cpi	r24, 0xB8	; 184
     426:	39 f1       	breq	.+78     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     428:	34 c0       	rjmp	.+104    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		case 0x60:
			clearReceiveData();
     42a:	0e 94 4d 01 	call	0x29a	; 0x29a <clearReceiveData>
			byteCounter = 0;
     42e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <byteCounter.1970+0x1>
     432:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1970>
		break;
     436:	2d c0       	rjmp	.+90     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		
		case 0x80:
			if(byteCounter < 20){
     438:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <byteCounter.1970>
     43c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <byteCounter.1970+0x1>
     440:	84 31       	cpi	r24, 0x14	; 20
     442:	91 05       	cpc	r25, r1
     444:	34 f5       	brge	.+76     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				receiveData[byteCounter] = TWDR;
     446:	23 b1       	in	r18, 0x03	; 3
     448:	fc 01       	movw	r30, r24
     44a:	ef 56       	subi	r30, 0x6F	; 111
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	20 83       	st	Z, r18
				byteCounter++;
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <byteCounter.1970+0x1>
     456:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <byteCounter.1970>
     45a:	1b c0       	rjmp	.+54     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			}
		break;
		
		case 0xA0:
			I2C_receiveInterpreter();
     45c:	0e 94 b9 01 	call	0x372	; 0x372 <I2C_receiveInterpreter>
		break;
     460:	18 c0       	rjmp	.+48     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		
		case 0xA8:
			arduinoDataConstructor();
     462:	0e 94 c0 01 	call	0x380	; 0x380 <arduinoDataConstructor>
			byteCounter = 0;
     466:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <byteCounter.1970+0x1>
     46a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <byteCounter.1970>
			TWDR = sendData[byteCounter];
     46e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <sendData>
     472:	83 b9       	out	0x03, r24	; 3
		break;
     474:	0e c0       	rjmp	.+28     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		
		case 0xB8:
			byteCounter++;
     476:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <byteCounter.1970>
     47a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <byteCounter.1970+0x1>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <byteCounter.1970+0x1>
     484:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <byteCounter.1970>
			TWDR = sendData[byteCounter];
     488:	fc 01       	movw	r30, r24
     48a:	e0 54       	subi	r30, 0x40	; 64
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	80 81       	ld	r24, Z
     490:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);
     492:	86 b7       	in	r24, 0x36	; 54
     494:	80 68       	ori	r24, 0x80	; 128
     496:	86 bf       	out	0x36, r24	; 54
}
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	bf 91       	pop	r27
     49e:	af 91       	pop	r26
     4a0:	9f 91       	pop	r25
     4a2:	8f 91       	pop	r24
     4a4:	7f 91       	pop	r23
     4a6:	6f 91       	pop	r22
     4a8:	5f 91       	pop	r21
     4aa:	4f 91       	pop	r20
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     4ba:	81 b3       	in	r24, 0x11	; 17
     4bc:	80 63       	ori	r24, 0x30	; 48
     4be:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     4c0:	81 b3       	in	r24, 0x11	; 17
     4c2:	83 7f       	andi	r24, 0xF3	; 243
     4c4:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     4c6:	84 b3       	in	r24, 0x14	; 20
     4c8:	8c 60       	ori	r24, 0x0C	; 12
     4ca:	84 bb       	out	0x14, r24	; 20
     4cc:	08 95       	ret

000004ce <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     4ce:	8f b5       	in	r24, 0x2f	; 47
     4d0:	80 68       	ori	r24, 0x80	; 128
     4d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     4d4:	8f b5       	in	r24, 0x2f	; 47
     4d6:	80 62       	ori	r24, 0x20	; 32
     4d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     4da:	8f b5       	in	r24, 0x2f	; 47
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     4e0:	8e b5       	in	r24, 0x2e	; 46
     4e2:	80 61       	ori	r24, 0x10	; 16
     4e4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     4e6:	8e b5       	in	r24, 0x2e	; 46
     4e8:	81 60       	ori	r24, 0x01	; 1
     4ea:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	99 ef       	ldi	r25, 0xF9	; 249
     4f0:	97 bd       	out	0x27, r25	; 39
     4f2:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     4f4:	1b bc       	out	0x2b, r1	; 43
     4f6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     4f8:	19 bc       	out	0x29, r1	; 41
     4fa:	18 bc       	out	0x28, r1	; 40
     4fc:	08 95       	ret

000004fe <init_motor_encoder>:
}


void init_motor_encoder(){
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     4fe:	85 b7       	in	r24, 0x35	; 53
     500:	81 60       	ori	r24, 0x01	; 1
     502:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     504:	85 b7       	in	r24, 0x35	; 53
     506:	84 60       	ori	r24, 0x04	; 4
     508:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     50a:	8b b7       	in	r24, 0x3b	; 59
     50c:	80 64       	ori	r24, 0x40	; 64
     50e:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     510:	8b b7       	in	r24, 0x3b	; 59
     512:	80 68       	ori	r24, 0x80	; 128
     514:	8b bf       	out	0x3b, r24	; 59
     516:	08 95       	ret

00000518 <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     518:	0e 94 5d 02 	call	0x4ba	; 0x4ba <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     51c:	0e 94 67 02 	call	0x4ce	; 0x4ce <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     520:	0e 94 7f 02 	call	0x4fe	; 0x4fe <init_motor_encoder>
     524:	08 95       	ret

00000526 <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	2f 93       	push	r18
     532:	3f 93       	push	r19
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
	arduinoData.motorEncoderLVal++;							//Increase the encoder variable
     53c:	e7 e8       	ldi	r30, 0x87	; 135
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	91 81       	ldd	r25, Z+1	; 0x01
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54a:	2f ef       	ldi	r18, 0xFF	; 255
     54c:	39 e5       	ldi	r19, 0x59	; 89
     54e:	82 e6       	ldi	r24, 0x62	; 98
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	21 50       	subi	r18, 0x01	; 1
     554:	30 40       	sbci	r19, 0x00	; 0
     556:	80 40       	sbci	r24, 0x00	; 0
     558:	90 40       	sbci	r25, 0x00	; 0
     55a:	d9 f7       	brne	.-10     	; 0x552 <__vector_1+0x2c>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <__vector_1+0x38>
     55e:	00 00       	nop
	_delay_ms(30000);
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <__vector_2>:


ISR(INT1_vect){
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	2f 93       	push	r18
     582:	3f 93       	push	r19
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	ef 93       	push	r30
     58a:	ff 93       	push	r31
	arduinoData.motorEncoderRVal++;							//Increase the encoder variable
     58c:	e7 e8       	ldi	r30, 0x87	; 135
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	93 83       	std	Z+3, r25	; 0x03
     598:	82 83       	std	Z+2, r24	; 0x02
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	39 e5       	ldi	r19, 0x59	; 89
     59e:	82 e6       	ldi	r24, 0x62	; 98
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	30 40       	sbci	r19, 0x00	; 0
     5a6:	80 40       	sbci	r24, 0x00	; 0
     5a8:	90 40       	sbci	r25, 0x00	; 0
     5aa:	d9 f7       	brne	.-10     	; 0x5a2 <__vector_2+0x2c>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <__vector_2+0x38>
     5ae:	00 00       	nop
	_delay_ms(30000);
}
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	3f 91       	pop	r19
     5ba:	2f 91       	pop	r18
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     5c6:	89 2b       	or	r24, r25
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     5ca:	8b b7       	in	r24, 0x3b	; 59
     5cc:	80 64       	ori	r24, 0x40	; 64
     5ce:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     5d0:	8b b7       	in	r24, 0x3b	; 59
     5d2:	80 68       	ori	r24, 0x80	; 128
     5d4:	8b bf       	out	0x3b, r24	; 59
     5d6:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     5d8:	8b b7       	in	r24, 0x3b	; 59
     5da:	8f 7b       	andi	r24, 0xBF	; 191
     5dc:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     5de:	8b b7       	in	r24, 0x3b	; 59
     5e0:	8f 77       	andi	r24, 0x7F	; 127
     5e2:	8b bf       	out	0x3b, r24	; 59
     5e4:	08 95       	ret

000005e6 <motorDriver>:
	}
}


int motorDriver(struct rp6DataBP rp6Data){
     5e6:	2f 92       	push	r2
     5e8:	3f 92       	push	r3
     5ea:	4f 92       	push	r4
     5ec:	5f 92       	push	r5
     5ee:	6f 92       	push	r6
     5f0:	7f 92       	push	r7
     5f2:	8f 92       	push	r8
     5f4:	9f 92       	push	r9
     5f6:	af 92       	push	r10
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	a4 97       	sbiw	r28, 0x24	; 36
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	49 ac       	ldd	r4, Y+57	; 0x39
     61c:	5a ac       	ldd	r5, Y+58	; 0x3a
     61e:	6b ac       	ldd	r6, Y+59	; 0x3b
     620:	7c ac       	ldd	r7, Y+60	; 0x3c
     622:	9d ac       	ldd	r9, Y+61	; 0x3d
     624:	ae ac       	ldd	r10, Y+62	; 0x3e
     626:	a9 86       	std	Y+9, r10	; 0x09
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	ce ac       	ldd	r12, Y+62	; 0x3e
     62c:	df ac       	ldd	r13, Y+63	; 0x3f
     62e:	21 97       	sbiw	r28, 0x01	; 1
     630:	db 86       	std	Y+11, r13	; 0x0b
     632:	ca 86       	std	Y+10, r12	; 0x0a
     634:	23 96       	adiw	r28, 0x03	; 3
     636:	ee ac       	ldd	r14, Y+62	; 0x3e
     638:	ff ac       	ldd	r15, Y+63	; 0x3f
     63a:	23 97       	sbiw	r28, 0x03	; 3
     63c:	fc a2       	std	Y+36, r15	; 0x24
     63e:	eb a2       	std	Y+35, r14	; 0x23
     640:	25 96       	adiw	r28, 0x05	; 5
     642:	2e ac       	ldd	r2, Y+62	; 0x3e
     644:	3f ac       	ldd	r3, Y+63	; 0x3f
     646:	25 97       	sbiw	r28, 0x05	; 5
	static uint32_t leftMotorSpeed = 0;
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     648:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
     64c:	a0 90 7d 00 	lds	r10, 0x007D	; 0x80007d <updateTimer.2027>
     650:	b0 90 7e 00 	lds	r11, 0x007E	; 0x80007e <updateTimer.2027+0x1>
     654:	c0 90 7f 00 	lds	r12, 0x007F	; 0x80007f <updateTimer.2027+0x2>
     658:	d0 90 80 00 	lds	r13, 0x0080	; 0x800080 <updateTimer.2027+0x3>
     65c:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <updateTimer.2027+0x4>
     660:	f0 90 82 00 	lds	r15, 0x0082	; 0x800082 <updateTimer.2027+0x5>
     664:	00 91 83 00 	lds	r16, 0x0083	; 0x800083 <updateTimer.2027+0x6>
     668:	10 91 84 00 	lds	r17, 0x0084	; 0x800084 <updateTimer.2027+0x7>
     66c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__cmpdi2>
     670:	08 f4       	brcc	.+2      	; 0x674 <motorDriver+0x8e>
     672:	fb c4       	rjmp	.+2550   	; 0x106a <__stack+0x80b>
		return 0;
	}else{
		updateTimer = micros() + 200000;//rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     674:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
     678:	2c 8b       	std	Y+20, r18	; 0x14
     67a:	3d 8b       	std	Y+21, r19	; 0x15
     67c:	4e 8b       	std	Y+22, r20	; 0x16
     67e:	5f 8b       	std	Y+23, r21	; 0x17
     680:	68 8f       	std	Y+24, r22	; 0x18
     682:	79 8f       	std	Y+25, r23	; 0x19
     684:	8a 8f       	std	Y+26, r24	; 0x1a
     686:	9b 8f       	std	Y+27, r25	; 0x1b
     688:	20 5c       	subi	r18, 0xC0	; 192
     68a:	32 4f       	sbci	r19, 0xF2	; 242
     68c:	4c 4f       	sbci	r20, 0xFC	; 252
     68e:	5f 4f       	sbci	r21, 0xFF	; 255
     690:	6f 4f       	sbci	r22, 0xFF	; 255
     692:	7f 4f       	sbci	r23, 0xFF	; 255
     694:	8f 4f       	sbci	r24, 0xFF	; 255
     696:	9f 4f       	sbci	r25, 0xFF	; 255
     698:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <updateTimer.2027>
     69c:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <updateTimer.2027+0x1>
     6a0:	40 93 7f 00 	sts	0x007F, r20	; 0x80007f <updateTimer.2027+0x2>
     6a4:	50 93 80 00 	sts	0x0080, r21	; 0x800080 <updateTimer.2027+0x3>
     6a8:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <updateTimer.2027+0x4>
     6ac:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <updateTimer.2027+0x5>
     6b0:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <updateTimer.2027+0x6>
     6b4:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <updateTimer.2027+0x7>
	}
	
	//rp6Data.driveSpeed = 100;
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     6b8:	a0 e0       	ldi	r26, 0x00	; 0
     6ba:	b4 e6       	ldi	r27, 0x64	; 100
     6bc:	a3 01       	movw	r20, r6
     6be:	92 01       	movw	r18, r4
     6c0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__muluhisi3>
     6c4:	24 e6       	ldi	r18, 0x64	; 100
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	0e 94 a7 0b 	call	0x174e	; 0x174e <__udivmodsi4>
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     6d0:	c1 01       	movw	r24, r2
     6d2:	a0 e0       	ldi	r26, 0x00	; 0
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	28 17       	cp	r18, r24
     6d8:	39 07       	cpc	r19, r25
     6da:	4a 07       	cpc	r20, r26
     6dc:	5b 07       	cpc	r21, r27
     6de:	18 f4       	brcc	.+6      	; 0x6e6 <motorDriver+0x100>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     6e6:	e9 2d       	mov	r30, r9
     6e8:	99 0c       	add	r9, r9
     6ea:	ff 0b       	sbc	r31, r31
     6ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2028>
     6f0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2028+0x1>
     6f4:	e8 17       	cp	r30, r24
     6f6:	f9 07       	cpc	r31, r25
     6f8:	61 f1       	breq	.+88     	; 0x752 <motorDriver+0x16c>
     6fa:	f0 90 75 00 	lds	r15, 0x0075	; 0x800075 <currentDriveSpeed.2031>
     6fe:	f9 82       	std	Y+1, r15	; 0x01
     700:	00 91 76 00 	lds	r16, 0x0076	; 0x800076 <currentDriveSpeed.2031+0x1>
     704:	0a 83       	std	Y+2, r16	; 0x02
     706:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <currentDriveSpeed.2031+0x2>
     70a:	1b 83       	std	Y+3, r17	; 0x03
     70c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <currentDriveSpeed.2031+0x3>
     710:	2c 83       	std	Y+4, r18	; 0x04
     712:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <currentDriveSpeed.2031+0x4>
     716:	3d 83       	std	Y+5, r19	; 0x05
     718:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <currentDriveSpeed.2031+0x5>
     71c:	4e 83       	std	Y+6, r20	; 0x06
     71e:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <currentDriveSpeed.2031+0x6>
     722:	5f 83       	std	Y+7, r21	; 0x07
     724:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <currentDriveSpeed.2031+0x7>
     728:	68 87       	std	Y+8, r22	; 0x08
     72a:	2f 2d       	mov	r18, r15
     72c:	30 2f       	mov	r19, r16
     72e:	41 2f       	mov	r20, r17
     730:	5c 81       	ldd	r21, Y+4	; 0x04
     732:	6d 81       	ldd	r22, Y+5	; 0x05
     734:	7e 81       	ldd	r23, Y+6	; 0x06
     736:	8f 81       	ldd	r24, Y+7	; 0x07
     738:	98 85       	ldd	r25, Y+8	; 0x08
     73a:	a0 e0       	ldi	r26, 0x00	; 0
     73c:	0e 94 14 0c 	call	0x1828	; 0x1828 <__cmpdi2_s8>
     740:	29 f4       	brne	.+10     	; 0x74c <motorDriver+0x166>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     742:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2028+0x1>
     746:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2028>
     74a:	54 c0       	rjmp	.+168    	; 0x7f4 <motorDriver+0x20e>
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	a9 01       	movw	r20, r18
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     752:	59 01       	movw	r10, r18
     754:	6a 01       	movw	r12, r20
     756:	e1 2c       	mov	r14, r1
     758:	f1 2c       	mov	r15, r1
     75a:	87 01       	movw	r16, r14
     75c:	29 83       	std	Y+1, r18	; 0x01
     75e:	ba 82       	std	Y+2, r11	; 0x02
     760:	cb 82       	std	Y+3, r12	; 0x03
     762:	dc 82       	std	Y+4, r13	; 0x04
     764:	ed 82       	std	Y+5, r14	; 0x05
     766:	fe 82       	std	Y+6, r15	; 0x06
     768:	0f 83       	std	Y+7, r16	; 0x07
     76a:	18 87       	std	Y+8, r17	; 0x08
     76c:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <currentDriveSpeed.2031>
     770:	bc 8e       	std	Y+28, r11	; 0x1c
     772:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <currentDriveSpeed.2031+0x1>
     776:	cd 8e       	std	Y+29, r12	; 0x1d
     778:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <currentDriveSpeed.2031+0x2>
     77c:	de 8e       	std	Y+30, r13	; 0x1e
     77e:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <currentDriveSpeed.2031+0x3>
     782:	ef 8e       	std	Y+31, r14	; 0x1f
     784:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <currentDriveSpeed.2031+0x4>
     788:	f8 a2       	std	Y+32, r15	; 0x20
     78a:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <currentDriveSpeed.2031+0x5>
     78e:	09 a3       	std	Y+33, r16	; 0x21
     790:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <currentDriveSpeed.2031+0x6>
     794:	1a a3       	std	Y+34, r17	; 0x22
     796:	40 90 7c 00 	lds	r4, 0x007C	; 0x80007c <currentDriveSpeed.2031+0x7>
     79a:	2a 2d       	mov	r18, r10
     79c:	3a 81       	ldd	r19, Y+2	; 0x02
     79e:	4b 81       	ldd	r20, Y+3	; 0x03
     7a0:	5c 81       	ldd	r21, Y+4	; 0x04
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	ab 2c       	mov	r10, r11
     7ac:	bc 2c       	mov	r11, r12
     7ae:	cd 2c       	mov	r12, r13
     7b0:	de 2c       	mov	r13, r14
     7b2:	ef 2c       	mov	r14, r15
     7b4:	f0 2e       	mov	r15, r16
     7b6:	01 2f       	mov	r16, r17
     7b8:	14 2d       	mov	r17, r4
     7ba:	0e 94 02 0c 	call	0x1804	; 0x1804 <__subdi3>
     7be:	62 2e       	mov	r6, r18
     7c0:	73 2e       	mov	r7, r19
     7c2:	c4 2e       	mov	r12, r20
     7c4:	d5 2e       	mov	r13, r21
     7c6:	e6 2e       	mov	r14, r22
     7c8:	f7 2e       	mov	r15, r23
     7ca:	08 2f       	mov	r16, r24
     7cc:	19 2f       	mov	r17, r25
     7ce:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatdisf>
     7d2:	4b 01       	movw	r8, r22
     7d4:	5c 01       	movw	r10, r24
     7d6:	a5 01       	movw	r20, r10
     7d8:	94 01       	movw	r18, r8
     7da:	c5 01       	movw	r24, r10
     7dc:	b4 01       	movw	r22, r8
     7de:	0e 94 df 0a 	call	0x15be	; 0x15be <__mulsf3>
     7e2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     7e6:	0e 94 ce 09 	call	0x139c	; 0x139c <__fixunssfsi>
     7ea:	60 3d       	cpi	r22, 0xD0	; 208
     7ec:	77 40       	sbci	r23, 0x07	; 7
     7ee:	81 05       	cpc	r24, r1
     7f0:	91 05       	cpc	r25, r1
     7f2:	c8 f4       	brcc	.+50     	; 0x826 <motorDriver+0x240>
		currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     7f4:	39 81       	ldd	r19, Y+1	; 0x01
     7f6:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <currentDriveSpeed.2031>
     7fa:	4a 81       	ldd	r20, Y+2	; 0x02
     7fc:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <currentDriveSpeed.2031+0x1>
     800:	5b 81       	ldd	r21, Y+3	; 0x03
     802:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2031+0x2>
     806:	6c 81       	ldd	r22, Y+4	; 0x04
     808:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <currentDriveSpeed.2031+0x3>
     80c:	7d 81       	ldd	r23, Y+5	; 0x05
     80e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <currentDriveSpeed.2031+0x4>
     812:	8e 81       	ldd	r24, Y+6	; 0x06
     814:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <currentDriveSpeed.2031+0x5>
     818:	9f 81       	ldd	r25, Y+7	; 0x07
     81a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <currentDriveSpeed.2031+0x6>
     81e:	a8 85       	ldd	r26, Y+8	; 0x08
     820:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <currentDriveSpeed.2031+0x7>
     824:	91 c1       	rjmp	.+802    	; 0xb48 <__stack+0x2e9>
	}else{																			//If the difference is more than 2000
		if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     826:	26 2d       	mov	r18, r6
     828:	37 2d       	mov	r19, r7
     82a:	4c 2d       	mov	r20, r12
     82c:	5d 2d       	mov	r21, r13
     82e:	6e 2d       	mov	r22, r14
     830:	7f 2d       	mov	r23, r15
     832:	80 2f       	mov	r24, r16
     834:	91 2f       	mov	r25, r17
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	0e 94 14 0c 	call	0x1828	; 0x1828 <__cmpdi2_s8>
     83c:	0c f0       	brlt	.+2      	; 0x840 <motorDriver+0x25a>
     83e:	bb c0       	rjmp	.+374    	; 0x9b6 <__stack+0x157>
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     840:	41 01       	movw	r8, r2
     842:	a1 2c       	mov	r10, r1
     844:	b1 2c       	mov	r11, r1
     846:	c1 2c       	mov	r12, r1
     848:	d1 2c       	mov	r13, r1
     84a:	76 01       	movw	r14, r12
     84c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     84e:	3d 8d       	ldd	r19, Y+29	; 0x1d
     850:	4e 8d       	ldd	r20, Y+30	; 0x1e
     852:	5f 8d       	ldd	r21, Y+31	; 0x1f
     854:	68 a1       	ldd	r22, Y+32	; 0x20
     856:	79 a1       	ldd	r23, Y+33	; 0x21
     858:	8a a1       	ldd	r24, Y+34	; 0x22
     85a:	94 2d       	mov	r25, r4
     85c:	2c 86       	std	Y+12, r2	; 0x0c
     85e:	9d 86       	std	Y+13, r9	; 0x0d
     860:	ae 86       	std	Y+14, r10	; 0x0e
     862:	bf 86       	std	Y+15, r11	; 0x0f
     864:	c8 8a       	std	Y+16, r12	; 0x10
     866:	d9 8a       	std	Y+17, r13	; 0x11
     868:	ea 8a       	std	Y+18, r14	; 0x12
     86a:	fb 8a       	std	Y+19, r15	; 0x13
     86c:	a2 2c       	mov	r10, r2
     86e:	b9 2c       	mov	r11, r9
     870:	c1 2c       	mov	r12, r1
     872:	d1 2c       	mov	r13, r1
     874:	e1 2c       	mov	r14, r1
     876:	f1 2c       	mov	r15, r1
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__cmpdi2>
     880:	cc f4       	brge	.+50     	; 0x8b4 <__stack+0x55>
				currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     882:	e9 81       	ldd	r30, Y+1	; 0x01
     884:	e0 93 75 00 	sts	0x0075, r30	; 0x800075 <currentDriveSpeed.2031>
     888:	aa 80       	ldd	r10, Y+2	; 0x02
     88a:	a0 92 76 00 	sts	0x0076, r10	; 0x800076 <currentDriveSpeed.2031+0x1>
     88e:	bb 80       	ldd	r11, Y+3	; 0x03
     890:	b0 92 77 00 	sts	0x0077, r11	; 0x800077 <currentDriveSpeed.2031+0x2>
     894:	cc 80       	ldd	r12, Y+4	; 0x04
     896:	c0 92 78 00 	sts	0x0078, r12	; 0x800078 <currentDriveSpeed.2031+0x3>
     89a:	dd 80       	ldd	r13, Y+5	; 0x05
     89c:	d0 92 79 00 	sts	0x0079, r13	; 0x800079 <currentDriveSpeed.2031+0x4>
     8a0:	ee 80       	ldd	r14, Y+6	; 0x06
     8a2:	e0 92 7a 00 	sts	0x007A, r14	; 0x80007a <currentDriveSpeed.2031+0x5>
     8a6:	ff 80       	ldd	r15, Y+7	; 0x07
     8a8:	f0 92 7b 00 	sts	0x007B, r15	; 0x80007b <currentDriveSpeed.2031+0x6>
     8ac:	08 85       	ldd	r16, Y+8	; 0x08
     8ae:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <currentDriveSpeed.2031+0x7>
     8b2:	4a c1       	rjmp	.+660    	; 0xb48 <__stack+0x2e9>
			}else{																			//If the current speed is higher than 5000
				if(rp6Data.accelerationRate > rp6Data.driveSpeedThreshold){rp6Data.accelerationRate = rp6Data.driveSpeedThreshold - 300;}
     8b4:	2a 85       	ldd	r18, Y+10	; 0x0a
     8b6:	3b 85       	ldd	r19, Y+11	; 0x0b
     8b8:	22 16       	cp	r2, r18
     8ba:	33 06       	cpc	r3, r19
     8bc:	28 f4       	brcc	.+10     	; 0x8c8 <__stack+0x69>
     8be:	a1 01       	movw	r20, r2
     8c0:	4c 52       	subi	r20, 0x2C	; 44
     8c2:	51 40       	sbci	r21, 0x01	; 1
     8c4:	5b 87       	std	Y+11, r21	; 0x0b
     8c6:	4a 87       	std	Y+10, r20	; 0x0a
				if(currentDriveSpeed < 7000){currentDriveSpeed -= rp6Data.accelerationRate/2;}
     8c8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8ca:	3d 8d       	ldd	r19, Y+29	; 0x1d
     8cc:	4e 8d       	ldd	r20, Y+30	; 0x1e
     8ce:	5f 8d       	ldd	r21, Y+31	; 0x1f
     8d0:	68 a1       	ldd	r22, Y+32	; 0x20
     8d2:	79 a1       	ldd	r23, Y+33	; 0x21
     8d4:	8a a1       	ldd	r24, Y+34	; 0x22
     8d6:	94 2d       	mov	r25, r4
     8d8:	27 35       	cpi	r18, 0x57	; 87
     8da:	ab e1       	ldi	r26, 0x1B	; 27
     8dc:	3a 07       	cpc	r19, r26
     8de:	41 05       	cpc	r20, r1
     8e0:	51 05       	cpc	r21, r1
     8e2:	61 05       	cpc	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	81 05       	cpc	r24, r1
     8e8:	91 05       	cpc	r25, r1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <__stack+0x8f>
     8ec:	8c f5       	brge	.+98     	; 0x950 <__stack+0xf1>
     8ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     8f0:	9b 85       	ldd	r25, Y+11	; 0x0b
     8f2:	96 95       	lsr	r25
     8f4:	87 95       	ror	r24
     8f6:	6c 01       	movw	r12, r24
     8f8:	e1 2c       	mov	r14, r1
     8fa:	f1 2c       	mov	r15, r1
     8fc:	00 e0       	ldi	r16, 0x00	; 0
     8fe:	10 e0       	ldi	r17, 0x00	; 0
     900:	98 01       	movw	r18, r16
     902:	89 83       	std	Y+1, r24	; 0x01
     904:	da 82       	std	Y+2, r13	; 0x02
     906:	eb 82       	std	Y+3, r14	; 0x03
     908:	fc 82       	std	Y+4, r15	; 0x04
     90a:	0d 83       	std	Y+5, r16	; 0x05
     90c:	1e 83       	std	Y+6, r17	; 0x06
     90e:	2f 83       	std	Y+7, r18	; 0x07
     910:	38 87       	std	Y+8, r19	; 0x08
     912:	2c 8d       	ldd	r18, Y+28	; 0x1c
     914:	3d 8d       	ldd	r19, Y+29	; 0x1d
     916:	8a a1       	ldd	r24, Y+34	; 0x22
     918:	94 2d       	mov	r25, r4
     91a:	ac 2c       	mov	r10, r12
     91c:	bd 2c       	mov	r11, r13
     91e:	c1 2c       	mov	r12, r1
     920:	d1 2c       	mov	r13, r1
     922:	e1 2c       	mov	r14, r1
     924:	f1 2c       	mov	r15, r1
     926:	00 e0       	ldi	r16, 0x00	; 0
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	0e 94 02 0c 	call	0x1804	; 0x1804 <__subdi3>
     92e:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <currentDriveSpeed.2031>
     932:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <currentDriveSpeed.2031+0x1>
     936:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2031+0x2>
     93a:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <currentDriveSpeed.2031+0x3>
     93e:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <currentDriveSpeed.2031+0x4>
     942:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <currentDriveSpeed.2031+0x5>
     946:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <currentDriveSpeed.2031+0x6>
     94a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <currentDriveSpeed.2031+0x7>
     94e:	fc c0       	rjmp	.+504    	; 0xb48 <__stack+0x2e9>
				else{currentDriveSpeed -= rp6Data.accelerationRate;}							//Decelerate with a given percentage of the current speed, determined by accelerationRate
     950:	0a 85       	ldd	r16, Y+10	; 0x0a
     952:	1b 85       	ldd	r17, Y+11	; 0x0b
     954:	78 01       	movw	r14, r16
     956:	00 e0       	ldi	r16, 0x00	; 0
     958:	10 e0       	ldi	r17, 0x00	; 0
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	e9 82       	std	Y+1, r14	; 0x01
     962:	fa 82       	std	Y+2, r15	; 0x02
     964:	0b 83       	std	Y+3, r16	; 0x03
     966:	1c 83       	std	Y+4, r17	; 0x04
     968:	2d 83       	std	Y+5, r18	; 0x05
     96a:	3e 83       	std	Y+6, r19	; 0x06
     96c:	4f 83       	std	Y+7, r20	; 0x07
     96e:	58 87       	std	Y+8, r21	; 0x08
     970:	2c 8d       	ldd	r18, Y+28	; 0x1c
     972:	3d 8d       	ldd	r19, Y+29	; 0x1d
     974:	4e 8d       	ldd	r20, Y+30	; 0x1e
     976:	5f 8d       	ldd	r21, Y+31	; 0x1f
     978:	68 a1       	ldd	r22, Y+32	; 0x20
     97a:	79 a1       	ldd	r23, Y+33	; 0x21
     97c:	8a a1       	ldd	r24, Y+34	; 0x22
     97e:	94 2d       	mov	r25, r4
     980:	ae 2c       	mov	r10, r14
     982:	bf 2c       	mov	r11, r15
     984:	c1 2c       	mov	r12, r1
     986:	d1 2c       	mov	r13, r1
     988:	e1 2c       	mov	r14, r1
     98a:	f1 2c       	mov	r15, r1
     98c:	00 e0       	ldi	r16, 0x00	; 0
     98e:	10 e0       	ldi	r17, 0x00	; 0
     990:	0e 94 02 0c 	call	0x1804	; 0x1804 <__subdi3>
     994:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <currentDriveSpeed.2031>
     998:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <currentDriveSpeed.2031+0x1>
     99c:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2031+0x2>
     9a0:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <currentDriveSpeed.2031+0x3>
     9a4:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <currentDriveSpeed.2031+0x4>
     9a8:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <currentDriveSpeed.2031+0x5>
     9ac:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <currentDriveSpeed.2031+0x6>
     9b0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <currentDriveSpeed.2031+0x7>
     9b4:	c9 c0       	rjmp	.+402    	; 0xb48 <__stack+0x2e9>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     9b6:	91 01       	movw	r18, r2
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	cb 01       	movw	r24, r22
     9c2:	2c 86       	std	Y+12, r2	; 0x0c
     9c4:	3d 87       	std	Y+13, r19	; 0x0d
     9c6:	4e 87       	std	Y+14, r20	; 0x0e
     9c8:	5f 87       	std	Y+15, r21	; 0x0f
     9ca:	68 8b       	std	Y+16, r22	; 0x10
     9cc:	79 8b       	std	Y+17, r23	; 0x11
     9ce:	8a 8b       	std	Y+18, r24	; 0x12
     9d0:	9b 8b       	std	Y+19, r25	; 0x13
     9d2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     9d4:	3d 8d       	ldd	r19, Y+29	; 0x1d
     9d6:	4e 8d       	ldd	r20, Y+30	; 0x1e
     9d8:	5f 8d       	ldd	r21, Y+31	; 0x1f
     9da:	68 a1       	ldd	r22, Y+32	; 0x20
     9dc:	79 a1       	ldd	r23, Y+33	; 0x21
     9de:	8a a1       	ldd	r24, Y+34	; 0x22
     9e0:	94 2d       	mov	r25, r4
     9e2:	ac 84       	ldd	r10, Y+12	; 0x0c
     9e4:	bd 84       	ldd	r11, Y+13	; 0x0d
     9e6:	c1 2c       	mov	r12, r1
     9e8:	d1 2c       	mov	r13, r1
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__cmpdi2>
     9f6:	9c f4       	brge	.+38     	; 0xa1e <__stack+0x1bf>
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     9f8:	0e 94 ed 0b 	call	0x17da	; 0x17da <__adddi3>
     9fc:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <currentDriveSpeed.2031>
     a00:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <currentDriveSpeed.2031+0x1>
     a04:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2031+0x2>
     a08:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <currentDriveSpeed.2031+0x3>
     a0c:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <currentDriveSpeed.2031+0x4>
     a10:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <currentDriveSpeed.2031+0x5>
     a14:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <currentDriveSpeed.2031+0x6>
     a18:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <currentDriveSpeed.2031+0x7>
     a1c:	95 c0       	rjmp	.+298    	; 0xb48 <__stack+0x2e9>
			}else{																			//If we are at a speed higher than the threshold
			if(rp6Data.accelerationRate > rp6Data.driveSpeedThreshold){rp6Data.accelerationRate = rp6Data.driveSpeedThreshold - 300;}
     a1e:	4a 85       	ldd	r20, Y+10	; 0x0a
     a20:	5b 85       	ldd	r21, Y+11	; 0x0b
     a22:	24 16       	cp	r2, r20
     a24:	35 06       	cpc	r3, r21
     a26:	28 f4       	brcc	.+10     	; 0xa32 <__stack+0x1d3>
     a28:	b1 01       	movw	r22, r2
     a2a:	6c 52       	subi	r22, 0x2C	; 44
     a2c:	71 40       	sbci	r23, 0x01	; 1
     a2e:	7b 87       	std	Y+11, r23	; 0x0b
     a30:	6a 87       	std	Y+10, r22	; 0x0a
				if(currentDriveSpeed < 7000){currentDriveSpeed += rp6Data.accelerationRate/4;}
     a32:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a34:	3d 8d       	ldd	r19, Y+29	; 0x1d
     a36:	4e 8d       	ldd	r20, Y+30	; 0x1e
     a38:	5f 8d       	ldd	r21, Y+31	; 0x1f
     a3a:	68 a1       	ldd	r22, Y+32	; 0x20
     a3c:	79 a1       	ldd	r23, Y+33	; 0x21
     a3e:	8a a1       	ldd	r24, Y+34	; 0x22
     a40:	94 2d       	mov	r25, r4
     a42:	27 35       	cpi	r18, 0x57	; 87
     a44:	3b 41       	sbci	r19, 0x1B	; 27
     a46:	41 05       	cpc	r20, r1
     a48:	51 05       	cpc	r21, r1
     a4a:	61 05       	cpc	r22, r1
     a4c:	71 05       	cpc	r23, r1
     a4e:	81 05       	cpc	r24, r1
     a50:	91 05       	cpc	r25, r1
     a52:	09 f0       	breq	.+2      	; 0xa56 <__stack+0x1f7>
     a54:	4c f5       	brge	.+82     	; 0xaa8 <__stack+0x249>
     a56:	8a 84       	ldd	r8, Y+10	; 0x0a
     a58:	9b 84       	ldd	r9, Y+11	; 0x0b
     a5a:	96 94       	lsr	r9
     a5c:	87 94       	ror	r8
     a5e:	96 94       	lsr	r9
     a60:	87 94       	ror	r8
     a62:	28 2d       	mov	r18, r8
     a64:	39 2d       	mov	r19, r9
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	ac 8c       	ldd	r10, Y+28	; 0x1c
     a74:	bd 8c       	ldd	r11, Y+29	; 0x1d
     a76:	ce 8c       	ldd	r12, Y+30	; 0x1e
     a78:	df 8c       	ldd	r13, Y+31	; 0x1f
     a7a:	e8 a0       	ldd	r14, Y+32	; 0x20
     a7c:	f9 a0       	ldd	r15, Y+33	; 0x21
     a7e:	0a a1       	ldd	r16, Y+34	; 0x22
     a80:	14 2d       	mov	r17, r4
     a82:	0e 94 ed 0b 	call	0x17da	; 0x17da <__adddi3>
     a86:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <currentDriveSpeed.2031>
     a8a:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <currentDriveSpeed.2031+0x1>
     a8e:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2031+0x2>
     a92:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <currentDriveSpeed.2031+0x3>
     a96:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <currentDriveSpeed.2031+0x4>
     a9a:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <currentDriveSpeed.2031+0x5>
     a9e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <currentDriveSpeed.2031+0x6>
     aa2:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <currentDriveSpeed.2031+0x7>
     aa6:	25 c0       	rjmp	.+74     	; 0xaf2 <__stack+0x293>
				else{currentDriveSpeed += rp6Data.accelerationRate;}							//Accelerate with a percentage of the current speed, determined by accelerationRate
     aa8:	0a 85       	ldd	r16, Y+10	; 0x0a
     aaa:	1b 85       	ldd	r17, Y+11	; 0x0b
     aac:	48 01       	movw	r8, r16
     aae:	20 2f       	mov	r18, r16
     ab0:	39 2d       	mov	r19, r9
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	ac 8c       	ldd	r10, Y+28	; 0x1c
     ac0:	bd 8c       	ldd	r11, Y+29	; 0x1d
     ac2:	ce 8c       	ldd	r12, Y+30	; 0x1e
     ac4:	df 8c       	ldd	r13, Y+31	; 0x1f
     ac6:	e8 a0       	ldd	r14, Y+32	; 0x20
     ac8:	f9 a0       	ldd	r15, Y+33	; 0x21
     aca:	0a a1       	ldd	r16, Y+34	; 0x22
     acc:	14 2d       	mov	r17, r4
     ace:	0e 94 ed 0b 	call	0x17da	; 0x17da <__adddi3>
     ad2:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <currentDriveSpeed.2031>
     ad6:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <currentDriveSpeed.2031+0x1>
     ada:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2031+0x2>
     ade:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <currentDriveSpeed.2031+0x3>
     ae2:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <currentDriveSpeed.2031+0x4>
     ae6:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <currentDriveSpeed.2031+0x5>
     aea:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <currentDriveSpeed.2031+0x6>
     aee:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <currentDriveSpeed.2031+0x7>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     af2:	a0 90 75 00 	lds	r10, 0x0075	; 0x800075 <currentDriveSpeed.2031>
     af6:	b0 90 76 00 	lds	r11, 0x0076	; 0x800076 <currentDriveSpeed.2031+0x1>
     afa:	c0 90 77 00 	lds	r12, 0x0077	; 0x800077 <currentDriveSpeed.2031+0x2>
     afe:	d0 90 78 00 	lds	r13, 0x0078	; 0x800078 <currentDriveSpeed.2031+0x3>
     b02:	e0 90 79 00 	lds	r14, 0x0079	; 0x800079 <currentDriveSpeed.2031+0x4>
     b06:	f0 90 7a 00 	lds	r15, 0x007A	; 0x80007a <currentDriveSpeed.2031+0x5>
     b0a:	00 91 7b 00 	lds	r16, 0x007B	; 0x80007b <currentDriveSpeed.2031+0x6>
     b0e:	10 91 7c 00 	lds	r17, 0x007C	; 0x80007c <currentDriveSpeed.2031+0x7>
     b12:	29 81       	ldd	r18, Y+1	; 0x01
     b14:	3a 81       	ldd	r19, Y+2	; 0x02
     b16:	4b 81       	ldd	r20, Y+3	; 0x03
     b18:	5c 81       	ldd	r21, Y+4	; 0x04
     b1a:	6d 81       	ldd	r22, Y+5	; 0x05
     b1c:	7e 81       	ldd	r23, Y+6	; 0x06
     b1e:	8f 81       	ldd	r24, Y+7	; 0x07
     b20:	98 85       	ldd	r25, Y+8	; 0x08
     b22:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__cmpdi2>
     b26:	84 f4       	brge	.+32     	; 0xb48 <__stack+0x2e9>
     b28:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <currentDriveSpeed.2031>
     b2c:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <currentDriveSpeed.2031+0x1>
     b30:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2031+0x2>
     b34:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <currentDriveSpeed.2031+0x3>
     b38:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <currentDriveSpeed.2031+0x4>
     b3c:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <currentDriveSpeed.2031+0x5>
     b40:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <currentDriveSpeed.2031+0x6>
     b44:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <currentDriveSpeed.2031+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     b48:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2028>
     b4c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2028+0x1>
     b50:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2032+0x1>
     b54:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2032>
	rightMotorDirection = currentDriveDirection;
     b58:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     b5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     b60:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <currentDriveSpeed.2031>
     b64:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <currentDriveSpeed.2031+0x1>
     b68:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <currentDriveSpeed.2031+0x2>
     b6c:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <currentDriveSpeed.2031+0x3>
     b70:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <currentDriveSpeed.2031+0x4>
     b74:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <currentDriveSpeed.2031+0x5>
     b78:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <currentDriveSpeed.2031+0x6>
     b7c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <currentDriveSpeed.2031+0x7>
     b80:	82 2e       	mov	r8, r18
     b82:	93 2e       	mov	r9, r19
     b84:	a4 2e       	mov	r10, r20
     b86:	b5 2e       	mov	r11, r21
     b88:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <leftMotorSpeed.2034>
     b8c:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <leftMotorSpeed.2034+0x1>
     b90:	40 93 73 00 	sts	0x0073, r20	; 0x800073 <leftMotorSpeed.2034+0x2>
     b94:	50 93 74 00 	sts	0x0074, r21	; 0x800074 <leftMotorSpeed.2034+0x3>
	rightMotorSpeed = currentDriveSpeed;
     b98:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <rightMotorSpeed.2035>
     b9c:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <rightMotorSpeed.2035+0x1>
     ba0:	40 93 6f 00 	sts	0x006F, r20	; 0x80006f <rightMotorSpeed.2035+0x2>
     ba4:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <rightMotorSpeed.2035+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     ba8:	a9 85       	ldd	r26, Y+9	; 0x09
     baa:	ea 2f       	mov	r30, r26
     bac:	aa 0f       	add	r26, r26
     bae:	ff 0b       	sbc	r31, r31
     bb0:	a0 91 6b 00 	lds	r26, 0x006B	; 0x80006b <currentTurnDirection.2029>
     bb4:	b0 91 6c 00 	lds	r27, 0x006C	; 0x80006c <currentTurnDirection.2029+0x1>
     bb8:	ea 17       	cp	r30, r26
     bba:	fb 07       	cpc	r31, r27
     bbc:	81 f1       	breq	.+96     	; 0xc1e <__stack+0x3bf>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     bbe:	f0 93 6c 00 	sts	0x006C, r31	; 0x80006c <currentTurnDirection.2029+0x1>
     bc2:	e0 93 6b 00 	sts	0x006B, r30	; 0x80006b <currentTurnDirection.2029>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     bc6:	ef 2b       	or	r30, r31
     bc8:	29 f4       	brne	.+10     	; 0xbd4 <__stack+0x375>
			enableMotorEncoder(0);											//Enable the encoders
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <enableMotorEncoder>
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <__stack+0x37d>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     bdc:	2c 89       	ldd	r18, Y+20	; 0x14
     bde:	3d 89       	ldd	r19, Y+21	; 0x15
     be0:	4e 89       	ldd	r20, Y+22	; 0x16
     be2:	5f 89       	ldd	r21, Y+23	; 0x17
     be4:	68 8d       	ldd	r22, Y+24	; 0x18
     be6:	79 8d       	ldd	r23, Y+25	; 0x19
     be8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bec:	20 52       	subi	r18, 0x20	; 32
     bee:	3c 46       	sbci	r19, 0x6C	; 108
     bf0:	4b 4f       	sbci	r20, 0xFB	; 251
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
     bf4:	6f 4f       	sbci	r22, 0xFF	; 255
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
     bf8:	8f 4f       	sbci	r24, 0xFF	; 255
     bfa:	9f 4f       	sbci	r25, 0xFF	; 255
     bfc:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <updateTimer.2027>
     c00:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <updateTimer.2027+0x1>
     c04:	40 93 7f 00 	sts	0x007F, r20	; 0x80007f <updateTimer.2027+0x2>
     c08:	50 93 80 00 	sts	0x0080, r21	; 0x800080 <updateTimer.2027+0x3>
     c0c:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <updateTimer.2027+0x4>
     c10:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <updateTimer.2027+0x5>
     c14:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <updateTimer.2027+0x6>
     c18:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <updateTimer.2027+0x7>
     c1c:	92 c1       	rjmp	.+804    	; 0xf42 <__stack+0x6e3>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     c1e:	ef 3f       	cpi	r30, 0xFF	; 255
     c20:	0f ef       	ldi	r16, 0xFF	; 255
     c22:	f0 07       	cpc	r31, r16
     c24:	09 f0       	breq	.+2      	; 0xc28 <__stack+0x3c9>
     c26:	aa c0       	rjmp	.+340    	; 0xd7c <__stack+0x51d>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	0e 94 14 0c 	call	0x1828	; 0x1828 <__cmpdi2_s8>
     c2e:	31 f5       	brne	.+76     	; 0xc7c <__stack+0x41d>
			leftMotorDirection = 0;											//Turn the left motor backwards
     c30:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2032+0x1>
     c34:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2032>
			rightMotorDirection = 1;										//Turn the right motor forwards
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     c40:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     c44:	2b a1       	ldd	r18, Y+35	; 0x23
     c46:	3c a1       	ldd	r19, Y+36	; 0x24
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	c1 01       	movw	r24, r2
     c4e:	80 53       	subi	r24, 0x30	; 48
     c50:	98 4f       	sbci	r25, 0xF8	; 248
     c52:	82 0f       	add	r24, r18
     c54:	93 1f       	adc	r25, r19
     c56:	a0 e0       	ldi	r26, 0x00	; 0
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     c5e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
     c62:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
     c66:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//---^
     c6a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <rightMotorSpeed.2035>
     c6e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <rightMotorSpeed.2035+0x1>
     c72:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <rightMotorSpeed.2035+0x2>
     c76:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <rightMotorSpeed.2035+0x3>
     c7a:	63 c1       	rjmp	.+710    	; 0xf42 <__stack+0x6e3>
		}else{															//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed -= rp6Data.turnRate*3;							//Set the left motor to minimal
			//rightMotorSpeed += rp6Data.turnRate*3;									//Increase the right motor with the turn rate
			
			leftMotorSpeed -= ((leftMotorSpeed * 60) / 100);
     c7c:	ac e3       	ldi	r26, 0x3C	; 60
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	a5 01       	movw	r20, r10
     c82:	94 01       	movw	r18, r8
     c84:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__muluhisi3>
     c88:	24 e6       	ldi	r18, 0x64	; 100
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	0e 94 a7 0b 	call	0x174e	; 0x174e <__udivmodsi4>
     c94:	75 01       	movw	r14, r10
     c96:	64 01       	movw	r12, r8
     c98:	c2 1a       	sub	r12, r18
     c9a:	d3 0a       	sbc	r13, r19
     c9c:	e4 0a       	sbc	r14, r20
     c9e:	f5 0a       	sbc	r15, r21
     ca0:	c0 92 71 00 	sts	0x0071, r12	; 0x800071 <leftMotorSpeed.2034>
     ca4:	d0 92 72 00 	sts	0x0072, r13	; 0x800072 <leftMotorSpeed.2034+0x1>
     ca8:	e0 92 73 00 	sts	0x0073, r14	; 0x800073 <leftMotorSpeed.2034+0x2>
     cac:	f0 92 74 00 	sts	0x0074, r15	; 0x800074 <leftMotorSpeed.2034+0x3>
			rightMotorSpeed += ((rightMotorSpeed * 60) / 100);
     cb0:	ba 01       	movw	r22, r20
     cb2:	a9 01       	movw	r20, r18
     cb4:	48 0d       	add	r20, r8
     cb6:	59 1d       	adc	r21, r9
     cb8:	6a 1d       	adc	r22, r10
     cba:	7b 1d       	adc	r23, r11
			
			if(leftMotorSpeed < rp6Data.driveSpeedThreshold+1000){
     cbc:	c1 01       	movw	r24, r2
     cbe:	88 51       	subi	r24, 0x18	; 24
     cc0:	9c 4f       	sbci	r25, 0xFC	; 252
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	c8 16       	cp	r12, r24
     cc8:	d9 06       	cpc	r13, r25
     cca:	ea 06       	cpc	r14, r26
     ccc:	fb 06       	cpc	r15, r27
     cce:	48 f0       	brcs	.+18     	; 0xce2 <__stack+0x483>
		}else{															//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed -= rp6Data.turnRate*3;							//Set the left motor to minimal
			//rightMotorSpeed += rp6Data.turnRate*3;									//Increase the right motor with the turn rate
			
			leftMotorSpeed -= ((leftMotorSpeed * 60) / 100);
			rightMotorSpeed += ((rightMotorSpeed * 60) / 100);
     cd0:	40 93 6d 00 	sts	0x006D, r20	; 0x80006d <rightMotorSpeed.2035>
     cd4:	50 93 6e 00 	sts	0x006E, r21	; 0x80006e <rightMotorSpeed.2035+0x1>
     cd8:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <rightMotorSpeed.2035+0x2>
     cdc:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <rightMotorSpeed.2035+0x3>
     ce0:	18 c0       	rjmp	.+48     	; 0xd12 <__stack+0x4b3>
			
			if(leftMotorSpeed < rp6Data.driveSpeedThreshold+1000){
				rightMotorSpeed += ((rp6Data.driveSpeedThreshold+1000) - leftMotorSpeed);
     ce2:	48 0f       	add	r20, r24
     ce4:	59 1f       	adc	r21, r25
     ce6:	6a 1f       	adc	r22, r26
     ce8:	7b 1f       	adc	r23, r27
     cea:	4c 19       	sub	r20, r12
     cec:	5d 09       	sbc	r21, r13
     cee:	6e 09       	sbc	r22, r14
     cf0:	7f 09       	sbc	r23, r15
     cf2:	40 93 6d 00 	sts	0x006D, r20	; 0x80006d <rightMotorSpeed.2035>
     cf6:	50 93 6e 00 	sts	0x006E, r21	; 0x80006e <rightMotorSpeed.2035+0x1>
     cfa:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <rightMotorSpeed.2035+0x2>
     cfe:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <rightMotorSpeed.2035+0x3>
				leftMotorSpeed = (rp6Data.driveSpeedThreshold + 1000);
     d02:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     d06:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
     d0a:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
     d0e:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
			}							//Set right motor to minimal
			if(rightMotorSpeed > 25600){
     d12:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <rightMotorSpeed.2035>
     d16:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <rightMotorSpeed.2035+0x1>
     d1a:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <rightMotorSpeed.2035+0x2>
     d1e:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <rightMotorSpeed.2035+0x3>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	94 46       	sbci	r25, 0x64	; 100
     d26:	a1 05       	cpc	r26, r1
     d28:	b1 05       	cpc	r27, r1
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <__stack+0x4cf>
     d2c:	0a c1       	rjmp	.+532    	; 0xf42 <__stack+0x6e3>
				leftMotorSpeed -= 5000;
     d2e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <leftMotorSpeed.2034>
     d32:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <leftMotorSpeed.2034+0x1>
     d36:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <leftMotorSpeed.2034+0x2>
     d3a:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <leftMotorSpeed.2034+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	53 e7       	ldi	r21, 0x73	; 115
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	40 93 6d 00 	sts	0x006D, r20	; 0x80006d <rightMotorSpeed.2035>
     d4a:	50 93 6e 00 	sts	0x006E, r21	; 0x80006e <rightMotorSpeed.2035+0x1>
     d4e:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <rightMotorSpeed.2035+0x2>
     d52:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <rightMotorSpeed.2035+0x3>
	
	leftMotorSpeed += 750;
     d56:	8a 59       	subi	r24, 0x9A	; 154
     d58:	90 41       	sbci	r25, 0x10	; 16
     d5a:	a1 09       	sbc	r26, r1
     d5c:	b1 09       	sbc	r27, r1
     d5e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     d62:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
     d66:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
     d6a:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	94 46       	sbci	r25, 0x64	; 100
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__stack+0x51b>
     d78:	5a c1       	rjmp	.+692    	; 0x102e <__stack+0x7cf>
     d7a:	33 c1       	rjmp	.+614    	; 0xfe2 <__stack+0x783>
			if(rightMotorSpeed > 25600){
				leftMotorSpeed -= 5000;
				rightMotorSpeed = 25600;
			}
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	e1 f5       	brne	.+120    	; 0xdf8 <__stack+0x599>
		if(arduinoData.motorEncoderLVal != arduinoData.motorEncoderRVal){
     d80:	e7 e8       	ldi	r30, 0x87	; 135
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	00 81       	ld	r16, Z
     d86:	11 81       	ldd	r17, Z+1	; 0x01
     d88:	e2 80       	ldd	r14, Z+2	; 0x02
     d8a:	f3 80       	ldd	r15, Z+3	; 0x03
     d8c:	0e 15       	cp	r16, r14
     d8e:	1f 05       	cpc	r17, r15
     d90:	09 f4       	brne	.+2      	; 0xd94 <__stack+0x535>
     d92:	d7 c0       	rjmp	.+430    	; 0xf42 <__stack+0x6e3>
			if(arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
     d94:	c5 01       	movw	r24, r10
     d96:	b4 01       	movw	r22, r8
     d98:	0e 94 03 0a 	call	0x1406	; 0x1406 <__floatunsisf>
     d9c:	4b 01       	movw	r8, r22
     d9e:	5c 01       	movw	r10, r24
     da0:	b8 01       	movw	r22, r16
     da2:	6e 19       	sub	r22, r14
     da4:	7f 09       	sbc	r23, r15
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 03 0a 	call	0x1406	; 0x1406 <__floatunsisf>
     dae:	6b 01       	movw	r12, r22
     db0:	7c 01       	movw	r14, r24
     db2:	a7 01       	movw	r20, r14
     db4:	96 01       	movw	r18, r12
     db6:	c7 01       	movw	r24, r14
     db8:	b6 01       	movw	r22, r12
     dba:	0e 94 df 0a 	call	0x15be	; 0x15be <__mulsf3>
     dbe:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <sqrt>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	c5 01       	movw	r24, r10
     dc8:	b4 01       	movw	r22, r8
     dca:	0e 94 df 0a 	call	0x15be	; 0x15be <__mulsf3>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	48 ec       	ldi	r20, 0xC8	; 200
     dd4:	52 e4       	ldi	r21, 0x42	; 66
     dd6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__divsf3>
     dda:	a5 01       	movw	r20, r10
     ddc:	94 01       	movw	r18, r8
     dde:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__addsf3>
     de2:	0e 94 ce 09 	call	0x139c	; 0x139c <__fixunssfsi>
     de6:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <rightMotorSpeed.2035>
     dea:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <rightMotorSpeed.2035+0x1>
     dee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <rightMotorSpeed.2035+0x2>
     df2:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <rightMotorSpeed.2035+0x3>
     df6:	a5 c0       	rjmp	.+330    	; 0xf42 <__stack+0x6e3>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	09 f0       	breq	.+2      	; 0xdfe <__stack+0x59f>
     dfc:	a2 c0       	rjmp	.+324    	; 0xf42 <__stack+0x6e3>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     dfe:	a0 e0       	ldi	r26, 0x00	; 0
     e00:	0e 94 14 0c 	call	0x1828	; 0x1828 <__cmpdi2_s8>
     e04:	31 f5       	brne	.+76     	; 0xe52 <__stack+0x5f3>
			leftMotorDirection = 1;											//Left motor forward
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2032+0x1>
     e0e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2032>
			rightMotorDirection = 0;										//Right motor backward
     e12:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     e16:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     e1a:	8b a1       	ldd	r24, Y+35	; 0x23
     e1c:	9c a1       	ldd	r25, Y+36	; 0x24
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	91 01       	movw	r18, r2
     e24:	20 53       	subi	r18, 0x30	; 48
     e26:	38 4f       	sbci	r19, 0xF8	; 248
     e28:	82 0f       	add	r24, r18
     e2a:	93 1f       	adc	r25, r19
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     e34:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
     e38:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
     e3c:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + 2000 + rp6Data.turnRate*2;				//---^
     e40:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <rightMotorSpeed.2035>
     e44:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <rightMotorSpeed.2035+0x1>
     e48:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <rightMotorSpeed.2035+0x2>
     e4c:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <rightMotorSpeed.2035+0x3>
     e50:	78 c0       	rjmp	.+240    	; 0xf42 <__stack+0x6e3>
			}else{														//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed += rp6Data.turnRate*3;										//Increase the left motor with the set turn rate
			//rightMotorSpeed -= rp6Data.turnRate*3;
			
			leftMotorSpeed += ((leftMotorSpeed * 60) / 100);
     e52:	ac e3       	ldi	r26, 0x3C	; 60
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	a5 01       	movw	r20, r10
     e58:	94 01       	movw	r18, r8
     e5a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__muluhisi3>
     e5e:	24 e6       	ldi	r18, 0x64	; 100
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	0e 94 a7 0b 	call	0x174e	; 0x174e <__udivmodsi4>
     e6a:	d5 01       	movw	r26, r10
     e6c:	c4 01       	movw	r24, r8
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	a4 1f       	adc	r26, r20
     e74:	b5 1f       	adc	r27, r21
     e76:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     e7a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
     e7e:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
     e82:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
			rightMotorSpeed -= ((rightMotorSpeed * 60) / 100);
     e86:	82 1a       	sub	r8, r18
     e88:	93 0a       	sbc	r9, r19
     e8a:	a4 0a       	sbc	r10, r20
     e8c:	b5 0a       	sbc	r11, r21
			
			if(leftMotorSpeed > 25600){
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	94 46       	sbci	r25, 0x64	; 100
     e92:	a1 05       	cpc	r26, r1
     e94:	b1 05       	cpc	r27, r1
     e96:	48 f4       	brcc	.+18     	; 0xeaa <__stack+0x64b>
			}else{														//If we are driving (Forward or backwards does not matter)
			//leftMotorSpeed += rp6Data.turnRate*3;										//Increase the left motor with the set turn rate
			//rightMotorSpeed -= rp6Data.turnRate*3;
			
			leftMotorSpeed += ((leftMotorSpeed * 60) / 100);
			rightMotorSpeed -= ((rightMotorSpeed * 60) / 100);
     e98:	80 92 6d 00 	sts	0x006D, r8	; 0x80006d <rightMotorSpeed.2035>
     e9c:	90 92 6e 00 	sts	0x006E, r9	; 0x80006e <rightMotorSpeed.2035+0x1>
     ea0:	a0 92 6f 00 	sts	0x006F, r10	; 0x80006f <rightMotorSpeed.2035+0x2>
     ea4:	b0 92 70 00 	sts	0x0070, r11	; 0x800070 <rightMotorSpeed.2035+0x3>
     ea8:	1a c0       	rjmp	.+52     	; 0xede <__stack+0x67f>
			
			if(leftMotorSpeed > 25600){
				rightMotorSpeed -= 5000;
     eaa:	48 e8       	ldi	r20, 0x88	; 136
     eac:	84 1a       	sub	r8, r20
     eae:	43 e1       	ldi	r20, 0x13	; 19
     eb0:	94 0a       	sbc	r9, r20
     eb2:	a1 08       	sbc	r10, r1
     eb4:	b1 08       	sbc	r11, r1
     eb6:	80 92 6d 00 	sts	0x006D, r8	; 0x80006d <rightMotorSpeed.2035>
     eba:	90 92 6e 00 	sts	0x006E, r9	; 0x80006e <rightMotorSpeed.2035+0x1>
     ebe:	a0 92 6f 00 	sts	0x006F, r10	; 0x80006f <rightMotorSpeed.2035+0x2>
     ec2:	b0 92 70 00 	sts	0x0070, r11	; 0x800070 <rightMotorSpeed.2035+0x3>
				leftMotorSpeed = 25600;
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	94 e6       	ldi	r25, 0x64	; 100
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     ed2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
     ed6:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
     eda:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
			}
			if(rightMotorSpeed < rp6Data.driveSpeedThreshold+1000){
     ede:	c1 01       	movw	r24, r2
     ee0:	88 51       	subi	r24, 0x18	; 24
     ee2:	9c 4f       	sbci	r25, 0xFC	; 252
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	00 91 6d 00 	lds	r16, 0x006D	; 0x80006d <rightMotorSpeed.2035>
     eec:	10 91 6e 00 	lds	r17, 0x006E	; 0x80006e <rightMotorSpeed.2035+0x1>
     ef0:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <rightMotorSpeed.2035+0x2>
     ef4:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <rightMotorSpeed.2035+0x3>
     ef8:	08 17       	cp	r16, r24
     efa:	19 07       	cpc	r17, r25
     efc:	2a 07       	cpc	r18, r26
     efe:	3b 07       	cpc	r19, r27
     f00:	00 f5       	brcc	.+64     	; 0xf42 <__stack+0x6e3>
				leftMotorSpeed += ((rp6Data.driveSpeedThreshold+1000) - rightMotorSpeed);
     f02:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <leftMotorSpeed.2034>
     f06:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <leftMotorSpeed.2034+0x1>
     f0a:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <leftMotorSpeed.2034+0x2>
     f0e:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <leftMotorSpeed.2034+0x3>
     f12:	40 1b       	sub	r20, r16
     f14:	51 0b       	sbc	r21, r17
     f16:	62 0b       	sbc	r22, r18
     f18:	73 0b       	sbc	r23, r19
     f1a:	48 0f       	add	r20, r24
     f1c:	59 1f       	adc	r21, r25
     f1e:	6a 1f       	adc	r22, r26
     f20:	7b 1f       	adc	r23, r27
     f22:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <leftMotorSpeed.2034>
     f26:	50 93 72 00 	sts	0x0072, r21	; 0x800072 <leftMotorSpeed.2034+0x1>
     f2a:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <leftMotorSpeed.2034+0x2>
     f2e:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <leftMotorSpeed.2034+0x3>
				rightMotorSpeed = (rp6Data.driveSpeedThreshold + 1000);
     f32:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <rightMotorSpeed.2035>
     f36:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <rightMotorSpeed.2035+0x1>
     f3a:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <rightMotorSpeed.2035+0x2>
     f3e:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <rightMotorSpeed.2035+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     f42:	c0 90 6d 00 	lds	r12, 0x006D	; 0x80006d <rightMotorSpeed.2035>
     f46:	d0 90 6e 00 	lds	r13, 0x006E	; 0x80006e <rightMotorSpeed.2035+0x1>
     f4a:	e0 90 6f 00 	lds	r14, 0x006F	; 0x80006f <rightMotorSpeed.2035+0x2>
     f4e:	f0 90 70 00 	lds	r15, 0x0070	; 0x800070 <rightMotorSpeed.2035+0x3>
     f52:	d7 01       	movw	r26, r14
     f54:	c6 01       	movw	r24, r12
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	aa 1f       	adc	r26, r26
     f5c:	bb 1f       	adc	r27, r27
     f5e:	8c 0d       	add	r24, r12
     f60:	9d 1d       	adc	r25, r13
     f62:	ae 1d       	adc	r26, r14
     f64:	bf 1d       	adc	r27, r15
     f66:	ac 01       	movw	r20, r24
     f68:	bd 01       	movw	r22, r26
     f6a:	44 0f       	add	r20, r20
     f6c:	55 1f       	adc	r21, r21
     f6e:	66 1f       	adc	r22, r22
     f70:	77 1f       	adc	r23, r23
     f72:	44 0f       	add	r20, r20
     f74:	55 1f       	adc	r21, r21
     f76:	66 1f       	adc	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	8c 01       	movw	r16, r24
     f7c:	9d 01       	movw	r18, r26
     f7e:	04 0f       	add	r16, r20
     f80:	15 1f       	adc	r17, r21
     f82:	26 1f       	adc	r18, r22
     f84:	37 1f       	adc	r19, r23
     f86:	c9 01       	movw	r24, r18
     f88:	b8 01       	movw	r22, r16
     f8a:	24 e6       	ldi	r18, 0x64	; 100
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	0e 94 a7 0b 	call	0x174e	; 0x174e <__udivmodsi4>
     f96:	c2 0e       	add	r12, r18
     f98:	d3 1e       	adc	r13, r19
     f9a:	e4 1e       	adc	r14, r20
     f9c:	f5 1e       	adc	r15, r21
     f9e:	c0 92 6d 00 	sts	0x006D, r12	; 0x80006d <rightMotorSpeed.2035>
     fa2:	d0 92 6e 00 	sts	0x006E, r13	; 0x80006e <rightMotorSpeed.2035+0x1>
     fa6:	e0 92 6f 00 	sts	0x006F, r14	; 0x80006f <rightMotorSpeed.2035+0x2>
     faa:	f0 92 70 00 	sts	0x0070, r15	; 0x800070 <rightMotorSpeed.2035+0x3>
	
	leftMotorSpeed += 750;
     fae:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <leftMotorSpeed.2034>
     fb2:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <leftMotorSpeed.2034+0x1>
     fb6:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <leftMotorSpeed.2034+0x2>
     fba:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <leftMotorSpeed.2034+0x3>
     fbe:	82 51       	subi	r24, 0x12	; 18
     fc0:	9d 4f       	sbci	r25, 0xFD	; 253
     fc2:	af 4f       	sbci	r26, 0xFF	; 255
     fc4:	bf 4f       	sbci	r27, 0xFF	; 255
     fc6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     fca:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
     fce:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
     fd2:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	94 46       	sbci	r25, 0x64	; 100
     fda:	a1 05       	cpc	r26, r1
     fdc:	b1 05       	cpc	r27, r1
     fde:	a0 f0       	brcs	.+40     	; 0x1008 <__stack+0x7a9>
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <__stack+0x791>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     fe2:	0f 2e       	mov	r0, r31
     fe4:	c1 2c       	mov	r12, r1
     fe6:	f3 e7       	ldi	r31, 0x73	; 115
     fe8:	df 2e       	mov	r13, r31
     fea:	e1 2c       	mov	r14, r1
     fec:	f1 2c       	mov	r15, r1
     fee:	f0 2d       	mov	r31, r0
	
	leftMotorSpeed += 750;
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	94 e6       	ldi	r25, 0x64	; 100
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <leftMotorSpeed.2034>
     ffc:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <leftMotorSpeed.2034+0x1>
    1000:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <leftMotorSpeed.2034+0x2>
    1004:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <leftMotorSpeed.2034+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
    1008:	21 e3       	ldi	r18, 0x31	; 49
    100a:	c2 16       	cp	r12, r18
    100c:	25 e7       	ldi	r18, 0x75	; 117
    100e:	d2 06       	cpc	r13, r18
    1010:	e1 04       	cpc	r14, r1
    1012:	f1 04       	cpc	r15, r1
    1014:	60 f0       	brcs	.+24     	; 0x102e <__stack+0x7cf>
		rightMotorSpeed = 30000;						//Set it back to its max
    1016:	80 e3       	ldi	r24, 0x30	; 48
    1018:	95 e7       	ldi	r25, 0x75	; 117
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <rightMotorSpeed.2035>
    1022:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <rightMotorSpeed.2035+0x1>
    1026:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <rightMotorSpeed.2035+0x2>
    102a:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <rightMotorSpeed.2035+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
    102e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2032>
    1032:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2032+0x1>
    1036:	89 2b       	or	r24, r25
    1038:	11 f0       	breq	.+4      	; 0x103e <__stack+0x7df>
		PORTC &= 0b11111011;
    103a:	aa 98       	cbi	0x15, 2	; 21
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <__stack+0x7e1>
	}else{
		PORTC |= 0b00000100;
    103e:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
    1040:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1044:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    1048:	89 2b       	or	r24, r25
    104a:	11 f0       	breq	.+4      	; 0x1050 <__stack+0x7f1>
		PORTC &= 0b11110111;
    104c:	ab 98       	cbi	0x15, 3	; 21
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <__stack+0x7f3>
	}else{
		PORTC |= 0b00001000;
    1050:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
    1052:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <rightMotorSpeed.2035>
    1056:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <rightMotorSpeed.2035+0x1>
    105a:	9b bd       	out	0x2b, r25	; 43
    105c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
    105e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <leftMotorSpeed.2034>
    1062:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <leftMotorSpeed.2034+0x1>
    1066:	99 bd       	out	0x29, r25	; 41
    1068:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a4 96       	adiw	r28, 0x24	; 36
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	df 90       	pop	r13
    1088:	cf 90       	pop	r12
    108a:	bf 90       	pop	r11
    108c:	af 90       	pop	r10
    108e:	9f 90       	pop	r9
    1090:	8f 90       	pop	r8
    1092:	7f 90       	pop	r7
    1094:	6f 90       	pop	r6
    1096:	5f 90       	pop	r5
    1098:	4f 90       	pop	r4
    109a:	3f 90       	pop	r3
    109c:	2f 90       	pop	r2
    109e:	08 95       	ret

000010a0 <bumperCheck>:
//------------------------------------------------------

void bumperCheck() {
    10a0:	2f 92       	push	r2
    10a2:	3f 92       	push	r3
    10a4:	4f 92       	push	r4
    10a6:	5f 92       	push	r5
    10a8:	6f 92       	push	r6
    10aa:	7f 92       	push	r7
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
	
	static uint32_t bumperTimer = 0; //Used to determine how long the RP6 drives backwards
	static uint8_t enable = 0; //if 1, RP6 drives backwards
	
	if (getBumpers()) { //If one or both bumpers are pushed
    10c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <getBumpers>
    10c4:	89 2b       	or	r24, r25
    10c6:	71 f0       	breq	.+28     	; 0x10e4 <bumperCheck+0x44>
		enable = 1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <enable.2039>
		bumperTimer = micros();
    10ce:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    10d2:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
    10d6:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
    10da:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end+0x2>
    10de:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x3>
    10e2:	04 c0       	rjmp	.+8      	; 0x10ec <bumperCheck+0x4c>
	}
		
	if (enable) {
    10e4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <enable.2039>
    10e8:	88 23       	and	r24, r24
    10ea:	c1 f1       	breq	.+112    	; 0x115c <bumperCheck+0xbc>
		rp6Data.driveDirection = -1;
    10ec:	e5 ea       	ldi	r30, 0xA5	; 165
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	84 83       	std	Z+4, r24	; 0x04
		rp6Data.turnDirection = 0;
    10f4:	15 82       	std	Z+5, r1	; 0x05
		rp6Data.driveSpeed = 30;
    10f6:	8e e1       	ldi	r24, 0x1E	; 30
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	80 83       	st	Z, r24
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	a2 83       	std	Z+2, r26	; 0x02
    1104:	b3 83       	std	Z+3, r27	; 0x03
		
		if (micros() > bumperTimer + BUMPED_TIME) {
    1106:	0e 94 cd 00 	call	0x19a	; 0x19a <micros>
    110a:	c0 90 66 00 	lds	r12, 0x0066	; 0x800066 <__data_end>
    110e:	d0 90 67 00 	lds	r13, 0x0067	; 0x800067 <__data_end+0x1>
    1112:	e0 90 68 00 	lds	r14, 0x0068	; 0x800068 <__data_end+0x2>
    1116:	f0 90 69 00 	lds	r15, 0x0069	; 0x800069 <__data_end+0x3>
    111a:	26 01       	movw	r4, r12
    111c:	37 01       	movw	r6, r14
    111e:	e0 ea       	ldi	r30, 0xA0	; 160
    1120:	4e 0e       	add	r4, r30
    1122:	e6 e8       	ldi	r30, 0x86	; 134
    1124:	5e 1e       	adc	r5, r30
    1126:	e1 e0       	ldi	r30, 0x01	; 1
    1128:	6e 1e       	adc	r6, r30
    112a:	71 1c       	adc	r7, r1
    112c:	12 01       	movw	r2, r4
    112e:	23 01       	movw	r4, r6
    1130:	a2 2c       	mov	r10, r2
    1132:	b3 2c       	mov	r11, r3
    1134:	c4 2c       	mov	r12, r4
    1136:	d5 2c       	mov	r13, r5
    1138:	e1 2c       	mov	r14, r1
    113a:	f1 2c       	mov	r15, r1
    113c:	00 e0       	ldi	r16, 0x00	; 0
    113e:	10 e0       	ldi	r17, 0x00	; 0
    1140:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__cmpdi2>
    1144:	59 f0       	breq	.+22     	; 0x115c <bumperCheck+0xbc>
    1146:	50 f0       	brcs	.+20     	; 0x115c <bumperCheck+0xbc>
			rp6Data.driveSpeed = 0;
    1148:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <rp6Data>
    114c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <rp6Data+0x1>
    1150:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <rp6Data+0x2>
    1154:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <rp6Data+0x3>
			enable = 0;
    1158:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <enable.2039>
		}
	}
		
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	7f 90       	pop	r7
    1172:	6f 90       	pop	r6
    1174:	5f 90       	pop	r5
    1176:	4f 90       	pop	r4
    1178:	3f 90       	pop	r3
    117a:	2f 90       	pop	r2
    117c:	08 95       	ret

0000117e <main>:
	}
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
    117e:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
    1180:	0e 94 73 00 	call	0xe6	; 0xe6 <init_micros>
	
	init_motor();
    1184:	0e 94 8c 02 	call	0x518	; 0x518 <init_motor>
	init_LED();
    1188:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_LED>
	
	init_rp6Data();
    118c:	0e 94 1e 01 	call	0x23c	; 0x23c <init_rp6Data>
	init_arduinoData();
    1190:	0e 94 3d 01 	call	0x27a	; 0x27a <init_arduinoData>
	
	init_TWI();
    1194:	0e 94 10 01 	call	0x220	; 0x220 <init_TWI>
	
	clearSendData();
    1198:	0e 94 44 01 	call	0x288	; 0x288 <clearSendData>
	clearReceiveData();
    119c:	0e 94 4d 01 	call	0x29a	; 0x29a <clearReceiveData>
	
	while(1){
		bumperCheck();
    11a0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <bumperCheck>
		motorDriver(rp6Data);
    11a4:	8d b7       	in	r24, 0x3d	; 61
    11a6:	9e b7       	in	r25, 0x3e	; 62
    11a8:	43 97       	sbiw	r24, 0x13	; 19
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	9e bf       	out	0x3e, r25	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	8d bf       	out	0x3d, r24	; 61
    11b4:	ad b7       	in	r26, 0x3d	; 61
    11b6:	be b7       	in	r27, 0x3e	; 62
    11b8:	11 96       	adiw	r26, 0x01	; 1
    11ba:	83 e1       	ldi	r24, 0x13	; 19
    11bc:	e5 ea       	ldi	r30, 0xA5	; 165
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	01 90       	ld	r0, Z+
    11c2:	0d 92       	st	X+, r0
    11c4:	8a 95       	dec	r24
    11c6:	e1 f7       	brne	.-8      	; 0x11c0 <main+0x42>
    11c8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <motorDriver>
    11cc:	8d b7       	in	r24, 0x3d	; 61
    11ce:	9e b7       	in	r25, 0x3e	; 62
    11d0:	43 96       	adiw	r24, 0x13	; 19
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	9e bf       	out	0x3e, r25	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	8d bf       	out	0x3d, r24	; 61
    11dc:	e1 cf       	rjmp	.-62     	; 0x11a0 <main+0x22>

000011de <__subsf3>:
    11de:	50 58       	subi	r21, 0x80	; 128

000011e0 <__addsf3>:
    11e0:	bb 27       	eor	r27, r27
    11e2:	aa 27       	eor	r26, r26
    11e4:	0e 94 07 09 	call	0x120e	; 0x120e <__addsf3x>
    11e8:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_round>
    11ec:	0e 94 97 0a 	call	0x152e	; 0x152e <__fp_pscA>
    11f0:	38 f0       	brcs	.+14     	; 0x1200 <__addsf3+0x20>
    11f2:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscB>
    11f6:	20 f0       	brcs	.+8      	; 0x1200 <__addsf3+0x20>
    11f8:	39 f4       	brne	.+14     	; 0x1208 <__addsf3+0x28>
    11fa:	9f 3f       	cpi	r25, 0xFF	; 255
    11fc:	19 f4       	brne	.+6      	; 0x1204 <__addsf3+0x24>
    11fe:	26 f4       	brtc	.+8      	; 0x1208 <__addsf3+0x28>
    1200:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_nan>
    1204:	0e f4       	brtc	.+2      	; 0x1208 <__addsf3+0x28>
    1206:	e0 95       	com	r30
    1208:	e7 fb       	bst	r30, 7
    120a:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>

0000120e <__addsf3x>:
    120e:	e9 2f       	mov	r30, r25
    1210:	0e 94 b6 0a 	call	0x156c	; 0x156c <__fp_split3>
    1214:	58 f3       	brcs	.-42     	; 0x11ec <__addsf3+0xc>
    1216:	ba 17       	cp	r27, r26
    1218:	62 07       	cpc	r22, r18
    121a:	73 07       	cpc	r23, r19
    121c:	84 07       	cpc	r24, r20
    121e:	95 07       	cpc	r25, r21
    1220:	20 f0       	brcs	.+8      	; 0x122a <__addsf3x+0x1c>
    1222:	79 f4       	brne	.+30     	; 0x1242 <__addsf3x+0x34>
    1224:	a6 f5       	brtc	.+104    	; 0x128e <__addsf3x+0x80>
    1226:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__fp_zero>
    122a:	0e f4       	brtc	.+2      	; 0x122e <__addsf3x+0x20>
    122c:	e0 95       	com	r30
    122e:	0b 2e       	mov	r0, r27
    1230:	ba 2f       	mov	r27, r26
    1232:	a0 2d       	mov	r26, r0
    1234:	0b 01       	movw	r0, r22
    1236:	b9 01       	movw	r22, r18
    1238:	90 01       	movw	r18, r0
    123a:	0c 01       	movw	r0, r24
    123c:	ca 01       	movw	r24, r20
    123e:	a0 01       	movw	r20, r0
    1240:	11 24       	eor	r1, r1
    1242:	ff 27       	eor	r31, r31
    1244:	59 1b       	sub	r21, r25
    1246:	99 f0       	breq	.+38     	; 0x126e <__addsf3x+0x60>
    1248:	59 3f       	cpi	r21, 0xF9	; 249
    124a:	50 f4       	brcc	.+20     	; 0x1260 <__addsf3x+0x52>
    124c:	50 3e       	cpi	r21, 0xE0	; 224
    124e:	68 f1       	brcs	.+90     	; 0x12aa <__addsf3x+0x9c>
    1250:	1a 16       	cp	r1, r26
    1252:	f0 40       	sbci	r31, 0x00	; 0
    1254:	a2 2f       	mov	r26, r18
    1256:	23 2f       	mov	r18, r19
    1258:	34 2f       	mov	r19, r20
    125a:	44 27       	eor	r20, r20
    125c:	58 5f       	subi	r21, 0xF8	; 248
    125e:	f3 cf       	rjmp	.-26     	; 0x1246 <__addsf3x+0x38>
    1260:	46 95       	lsr	r20
    1262:	37 95       	ror	r19
    1264:	27 95       	ror	r18
    1266:	a7 95       	ror	r26
    1268:	f0 40       	sbci	r31, 0x00	; 0
    126a:	53 95       	inc	r21
    126c:	c9 f7       	brne	.-14     	; 0x1260 <__addsf3x+0x52>
    126e:	7e f4       	brtc	.+30     	; 0x128e <__addsf3x+0x80>
    1270:	1f 16       	cp	r1, r31
    1272:	ba 0b       	sbc	r27, r26
    1274:	62 0b       	sbc	r22, r18
    1276:	73 0b       	sbc	r23, r19
    1278:	84 0b       	sbc	r24, r20
    127a:	ba f0       	brmi	.+46     	; 0x12aa <__addsf3x+0x9c>
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	a1 f0       	breq	.+40     	; 0x12a8 <__addsf3x+0x9a>
    1280:	ff 0f       	add	r31, r31
    1282:	bb 1f       	adc	r27, r27
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	c2 f7       	brpl	.-16     	; 0x127c <__addsf3x+0x6e>
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <__addsf3x+0x9c>
    128e:	ba 0f       	add	r27, r26
    1290:	62 1f       	adc	r22, r18
    1292:	73 1f       	adc	r23, r19
    1294:	84 1f       	adc	r24, r20
    1296:	48 f4       	brcc	.+18     	; 0x12aa <__addsf3x+0x9c>
    1298:	87 95       	ror	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f7 95       	ror	r31
    12a2:	9e 3f       	cpi	r25, 0xFE	; 254
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <__addsf3x+0x9a>
    12a6:	b0 cf       	rjmp	.-160    	; 0x1208 <__addsf3+0x28>
    12a8:	93 95       	inc	r25
    12aa:	88 0f       	add	r24, r24
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__addsf3x+0xa2>
    12ae:	99 27       	eor	r25, r25
    12b0:	ee 0f       	add	r30, r30
    12b2:	97 95       	ror	r25
    12b4:	87 95       	ror	r24
    12b6:	08 95       	ret

000012b8 <__divsf3>:
    12b8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__divsf3x>
    12bc:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_round>
    12c0:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscB>
    12c4:	58 f0       	brcs	.+22     	; 0x12dc <__divsf3+0x24>
    12c6:	0e 94 97 0a 	call	0x152e	; 0x152e <__fp_pscA>
    12ca:	40 f0       	brcs	.+16     	; 0x12dc <__divsf3+0x24>
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <__divsf3+0x20>
    12ce:	5f 3f       	cpi	r21, 0xFF	; 255
    12d0:	29 f0       	breq	.+10     	; 0x12dc <__divsf3+0x24>
    12d2:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    12d6:	51 11       	cpse	r21, r1
    12d8:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_szero>
    12dc:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_nan>

000012e0 <__divsf3x>:
    12e0:	0e 94 b6 0a 	call	0x156c	; 0x156c <__fp_split3>
    12e4:	68 f3       	brcs	.-38     	; 0x12c0 <__divsf3+0x8>

000012e6 <__divsf3_pse>:
    12e6:	99 23       	and	r25, r25
    12e8:	b1 f3       	breq	.-20     	; 0x12d6 <__divsf3+0x1e>
    12ea:	55 23       	and	r21, r21
    12ec:	91 f3       	breq	.-28     	; 0x12d2 <__divsf3+0x1a>
    12ee:	95 1b       	sub	r25, r21
    12f0:	55 0b       	sbc	r21, r21
    12f2:	bb 27       	eor	r27, r27
    12f4:	aa 27       	eor	r26, r26
    12f6:	62 17       	cp	r22, r18
    12f8:	73 07       	cpc	r23, r19
    12fa:	84 07       	cpc	r24, r20
    12fc:	38 f0       	brcs	.+14     	; 0x130c <__divsf3_pse+0x26>
    12fe:	9f 5f       	subi	r25, 0xFF	; 255
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	44 1f       	adc	r20, r20
    1308:	aa 1f       	adc	r26, r26
    130a:	a9 f3       	breq	.-22     	; 0x12f6 <__divsf3_pse+0x10>
    130c:	35 d0       	rcall	.+106    	; 0x1378 <__divsf3_pse+0x92>
    130e:	0e 2e       	mov	r0, r30
    1310:	3a f0       	brmi	.+14     	; 0x1320 <__divsf3_pse+0x3a>
    1312:	e0 e8       	ldi	r30, 0x80	; 128
    1314:	32 d0       	rcall	.+100    	; 0x137a <__divsf3_pse+0x94>
    1316:	91 50       	subi	r25, 0x01	; 1
    1318:	50 40       	sbci	r21, 0x00	; 0
    131a:	e6 95       	lsr	r30
    131c:	00 1c       	adc	r0, r0
    131e:	ca f7       	brpl	.-14     	; 0x1312 <__divsf3_pse+0x2c>
    1320:	2b d0       	rcall	.+86     	; 0x1378 <__divsf3_pse+0x92>
    1322:	fe 2f       	mov	r31, r30
    1324:	29 d0       	rcall	.+82     	; 0x1378 <__divsf3_pse+0x92>
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	bb 1f       	adc	r27, r27
    132e:	26 17       	cp	r18, r22
    1330:	37 07       	cpc	r19, r23
    1332:	48 07       	cpc	r20, r24
    1334:	ab 07       	cpc	r26, r27
    1336:	b0 e8       	ldi	r27, 0x80	; 128
    1338:	09 f0       	breq	.+2      	; 0x133c <__divsf3_pse+0x56>
    133a:	bb 0b       	sbc	r27, r27
    133c:	80 2d       	mov	r24, r0
    133e:	bf 01       	movw	r22, r30
    1340:	ff 27       	eor	r31, r31
    1342:	93 58       	subi	r25, 0x83	; 131
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	3a f0       	brmi	.+14     	; 0x1356 <__divsf3_pse+0x70>
    1348:	9e 3f       	cpi	r25, 0xFE	; 254
    134a:	51 05       	cpc	r21, r1
    134c:	78 f0       	brcs	.+30     	; 0x136c <__divsf3_pse+0x86>
    134e:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    1352:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_szero>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	e4 f3       	brlt	.-8      	; 0x1352 <__divsf3_pse+0x6c>
    135a:	98 3e       	cpi	r25, 0xE8	; 232
    135c:	d4 f3       	brlt	.-12     	; 0x1352 <__divsf3_pse+0x6c>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b7 95       	ror	r27
    1366:	f7 95       	ror	r31
    1368:	9f 5f       	subi	r25, 0xFF	; 255
    136a:	c9 f7       	brne	.-14     	; 0x135e <__divsf3_pse+0x78>
    136c:	88 0f       	add	r24, r24
    136e:	91 1d       	adc	r25, r1
    1370:	96 95       	lsr	r25
    1372:	87 95       	ror	r24
    1374:	97 f9       	bld	r25, 7
    1376:	08 95       	ret
    1378:	e1 e0       	ldi	r30, 0x01	; 1
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	88 1f       	adc	r24, r24
    1380:	bb 1f       	adc	r27, r27
    1382:	62 17       	cp	r22, r18
    1384:	73 07       	cpc	r23, r19
    1386:	84 07       	cpc	r24, r20
    1388:	ba 07       	cpc	r27, r26
    138a:	20 f0       	brcs	.+8      	; 0x1394 <__divsf3_pse+0xae>
    138c:	62 1b       	sub	r22, r18
    138e:	73 0b       	sbc	r23, r19
    1390:	84 0b       	sbc	r24, r20
    1392:	ba 0b       	sbc	r27, r26
    1394:	ee 1f       	adc	r30, r30
    1396:	88 f7       	brcc	.-30     	; 0x137a <__divsf3_pse+0x94>
    1398:	e0 95       	com	r30
    139a:	08 95       	ret

0000139c <__fixunssfsi>:
    139c:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_splitA>
    13a0:	88 f0       	brcs	.+34     	; 0x13c4 <__fixunssfsi+0x28>
    13a2:	9f 57       	subi	r25, 0x7F	; 127
    13a4:	98 f0       	brcs	.+38     	; 0x13cc <__fixunssfsi+0x30>
    13a6:	b9 2f       	mov	r27, r25
    13a8:	99 27       	eor	r25, r25
    13aa:	b7 51       	subi	r27, 0x17	; 23
    13ac:	b0 f0       	brcs	.+44     	; 0x13da <__fixunssfsi+0x3e>
    13ae:	e1 f0       	breq	.+56     	; 0x13e8 <__fixunssfsi+0x4c>
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	1a f0       	brmi	.+6      	; 0x13c0 <__fixunssfsi+0x24>
    13ba:	ba 95       	dec	r27
    13bc:	c9 f7       	brne	.-14     	; 0x13b0 <__fixunssfsi+0x14>
    13be:	14 c0       	rjmp	.+40     	; 0x13e8 <__fixunssfsi+0x4c>
    13c0:	b1 30       	cpi	r27, 0x01	; 1
    13c2:	91 f0       	breq	.+36     	; 0x13e8 <__fixunssfsi+0x4c>
    13c4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_zero>
    13c8:	b1 e0       	ldi	r27, 0x01	; 1
    13ca:	08 95       	ret
    13cc:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__fp_zero>
    13d0:	67 2f       	mov	r22, r23
    13d2:	78 2f       	mov	r23, r24
    13d4:	88 27       	eor	r24, r24
    13d6:	b8 5f       	subi	r27, 0xF8	; 248
    13d8:	39 f0       	breq	.+14     	; 0x13e8 <__fixunssfsi+0x4c>
    13da:	b9 3f       	cpi	r27, 0xF9	; 249
    13dc:	cc f3       	brlt	.-14     	; 0x13d0 <__fixunssfsi+0x34>
    13de:	86 95       	lsr	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	b3 95       	inc	r27
    13e6:	d9 f7       	brne	.-10     	; 0x13de <__fixunssfsi+0x42>
    13e8:	3e f4       	brtc	.+14     	; 0x13f8 <__fixunssfsi+0x5c>
    13ea:	90 95       	com	r25
    13ec:	80 95       	com	r24
    13ee:	70 95       	com	r23
    13f0:	61 95       	neg	r22
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	8f 4f       	sbci	r24, 0xFF	; 255
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	08 95       	ret

000013fa <__floatdisf>:
    13fa:	97 fb       	bst	r25, 7
    13fc:	16 f4       	brtc	.+4      	; 0x1402 <__floatdisf+0x8>
    13fe:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_negdi>
    1402:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__fp_di2sf>

00001406 <__floatunsisf>:
    1406:	e8 94       	clt
    1408:	09 c0       	rjmp	.+18     	; 0x141c <__floatsisf+0x12>

0000140a <__floatsisf>:
    140a:	97 fb       	bst	r25, 7
    140c:	3e f4       	brtc	.+14     	; 0x141c <__floatsisf+0x12>
    140e:	90 95       	com	r25
    1410:	80 95       	com	r24
    1412:	70 95       	com	r23
    1414:	61 95       	neg	r22
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	8f 4f       	sbci	r24, 0xFF	; 255
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	99 23       	and	r25, r25
    141e:	a9 f0       	breq	.+42     	; 0x144a <__floatsisf+0x40>
    1420:	f9 2f       	mov	r31, r25
    1422:	96 e9       	ldi	r25, 0x96	; 150
    1424:	bb 27       	eor	r27, r27
    1426:	93 95       	inc	r25
    1428:	f6 95       	lsr	r31
    142a:	87 95       	ror	r24
    142c:	77 95       	ror	r23
    142e:	67 95       	ror	r22
    1430:	b7 95       	ror	r27
    1432:	f1 11       	cpse	r31, r1
    1434:	f8 cf       	rjmp	.-16     	; 0x1426 <__floatsisf+0x1c>
    1436:	fa f4       	brpl	.+62     	; 0x1476 <__floatsisf+0x6c>
    1438:	bb 0f       	add	r27, r27
    143a:	11 f4       	brne	.+4      	; 0x1440 <__floatsisf+0x36>
    143c:	60 ff       	sbrs	r22, 0
    143e:	1b c0       	rjmp	.+54     	; 0x1476 <__floatsisf+0x6c>
    1440:	6f 5f       	subi	r22, 0xFF	; 255
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	8f 4f       	sbci	r24, 0xFF	; 255
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	16 c0       	rjmp	.+44     	; 0x1476 <__floatsisf+0x6c>
    144a:	88 23       	and	r24, r24
    144c:	11 f0       	breq	.+4      	; 0x1452 <__floatsisf+0x48>
    144e:	96 e9       	ldi	r25, 0x96	; 150
    1450:	11 c0       	rjmp	.+34     	; 0x1474 <__floatsisf+0x6a>
    1452:	77 23       	and	r23, r23
    1454:	21 f0       	breq	.+8      	; 0x145e <__floatsisf+0x54>
    1456:	9e e8       	ldi	r25, 0x8E	; 142
    1458:	87 2f       	mov	r24, r23
    145a:	76 2f       	mov	r23, r22
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <__floatsisf+0x5e>
    145e:	66 23       	and	r22, r22
    1460:	71 f0       	breq	.+28     	; 0x147e <__floatsisf+0x74>
    1462:	96 e8       	ldi	r25, 0x86	; 134
    1464:	86 2f       	mov	r24, r22
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	2a f0       	brmi	.+10     	; 0x1476 <__floatsisf+0x6c>
    146c:	9a 95       	dec	r25
    146e:	66 0f       	add	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	88 1f       	adc	r24, r24
    1474:	da f7       	brpl	.-10     	; 0x146c <__floatsisf+0x62>
    1476:	88 0f       	add	r24, r24
    1478:	96 95       	lsr	r25
    147a:	87 95       	ror	r24
    147c:	97 f9       	bld	r25, 7
    147e:	08 95       	ret

00001480 <__floatundisf>:
    1480:	e8 94       	clt

00001482 <__fp_di2sf>:
    1482:	f9 2f       	mov	r31, r25
    1484:	96 eb       	ldi	r25, 0xB6	; 182
    1486:	ff 23       	and	r31, r31
    1488:	81 f0       	breq	.+32     	; 0x14aa <__fp_di2sf+0x28>
    148a:	12 16       	cp	r1, r18
    148c:	13 06       	cpc	r1, r19
    148e:	14 06       	cpc	r1, r20
    1490:	44 0b       	sbc	r20, r20
    1492:	93 95       	inc	r25
    1494:	f6 95       	lsr	r31
    1496:	87 95       	ror	r24
    1498:	77 95       	ror	r23
    149a:	67 95       	ror	r22
    149c:	57 95       	ror	r21
    149e:	40 40       	sbci	r20, 0x00	; 0
    14a0:	ff 23       	and	r31, r31
    14a2:	b9 f7       	brne	.-18     	; 0x1492 <__fp_di2sf+0x10>
    14a4:	1b c0       	rjmp	.+54     	; 0x14dc <__fp_di2sf+0x5a>
    14a6:	99 27       	eor	r25, r25
    14a8:	08 95       	ret
    14aa:	88 23       	and	r24, r24
    14ac:	51 f4       	brne	.+20     	; 0x14c2 <__fp_di2sf+0x40>
    14ae:	98 50       	subi	r25, 0x08	; 8
    14b0:	d2 f7       	brpl	.-12     	; 0x14a6 <__fp_di2sf+0x24>
    14b2:	87 2b       	or	r24, r23
    14b4:	76 2f       	mov	r23, r22
    14b6:	65 2f       	mov	r22, r21
    14b8:	54 2f       	mov	r21, r20
    14ba:	43 2f       	mov	r20, r19
    14bc:	32 2f       	mov	r19, r18
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	b1 f3       	breq	.-20     	; 0x14ae <__fp_di2sf+0x2c>
    14c2:	12 16       	cp	r1, r18
    14c4:	13 06       	cpc	r1, r19
    14c6:	14 06       	cpc	r1, r20
    14c8:	44 0b       	sbc	r20, r20
    14ca:	88 23       	and	r24, r24
    14cc:	3a f0       	brmi	.+14     	; 0x14dc <__fp_di2sf+0x5a>
    14ce:	9a 95       	dec	r25
    14d0:	44 0f       	add	r20, r20
    14d2:	55 1f       	adc	r21, r21
    14d4:	66 1f       	adc	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	ca f7       	brpl	.-14     	; 0x14ce <__fp_di2sf+0x4c>
    14dc:	55 23       	and	r21, r21
    14de:	4a f4       	brpl	.+18     	; 0x14f2 <__fp_di2sf+0x70>
    14e0:	44 0f       	add	r20, r20
    14e2:	55 1f       	adc	r21, r21
    14e4:	11 f4       	brne	.+4      	; 0x14ea <__fp_di2sf+0x68>
    14e6:	60 ff       	sbrs	r22, 0
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <__fp_di2sf+0x70>
    14ea:	6f 5f       	subi	r22, 0xFF	; 255
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	8f 4f       	sbci	r24, 0xFF	; 255
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	88 0f       	add	r24, r24
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	97 f9       	bld	r25, 7
    14fa:	08 95       	ret

000014fc <__fp_inf>:
    14fc:	97 f9       	bld	r25, 7
    14fe:	9f 67       	ori	r25, 0x7F	; 127
    1500:	80 e8       	ldi	r24, 0x80	; 128
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	08 95       	ret

00001508 <__fp_nan>:
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	80 ec       	ldi	r24, 0xC0	; 192
    150c:	08 95       	ret

0000150e <__fp_negdi>:
    150e:	90 95       	com	r25
    1510:	80 95       	com	r24
    1512:	70 95       	com	r23
    1514:	60 95       	com	r22
    1516:	50 95       	com	r21
    1518:	40 95       	com	r20
    151a:	30 95       	com	r19
    151c:	21 95       	neg	r18
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	4f 4f       	sbci	r20, 0xFF	; 255
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	6f 4f       	sbci	r22, 0xFF	; 255
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	08 95       	ret

0000152e <__fp_pscA>:
    152e:	00 24       	eor	r0, r0
    1530:	0a 94       	dec	r0
    1532:	16 16       	cp	r1, r22
    1534:	17 06       	cpc	r1, r23
    1536:	18 06       	cpc	r1, r24
    1538:	09 06       	cpc	r0, r25
    153a:	08 95       	ret

0000153c <__fp_pscB>:
    153c:	00 24       	eor	r0, r0
    153e:	0a 94       	dec	r0
    1540:	12 16       	cp	r1, r18
    1542:	13 06       	cpc	r1, r19
    1544:	14 06       	cpc	r1, r20
    1546:	05 06       	cpc	r0, r21
    1548:	08 95       	ret

0000154a <__fp_round>:
    154a:	09 2e       	mov	r0, r25
    154c:	03 94       	inc	r0
    154e:	00 0c       	add	r0, r0
    1550:	11 f4       	brne	.+4      	; 0x1556 <__fp_round+0xc>
    1552:	88 23       	and	r24, r24
    1554:	52 f0       	brmi	.+20     	; 0x156a <__fp_round+0x20>
    1556:	bb 0f       	add	r27, r27
    1558:	40 f4       	brcc	.+16     	; 0x156a <__fp_round+0x20>
    155a:	bf 2b       	or	r27, r31
    155c:	11 f4       	brne	.+4      	; 0x1562 <__fp_round+0x18>
    155e:	60 ff       	sbrs	r22, 0
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__fp_round+0x20>
    1562:	6f 5f       	subi	r22, 0xFF	; 255
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	8f 4f       	sbci	r24, 0xFF	; 255
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	08 95       	ret

0000156c <__fp_split3>:
    156c:	57 fd       	sbrc	r21, 7
    156e:	90 58       	subi	r25, 0x80	; 128
    1570:	44 0f       	add	r20, r20
    1572:	55 1f       	adc	r21, r21
    1574:	59 f0       	breq	.+22     	; 0x158c <__fp_splitA+0x10>
    1576:	5f 3f       	cpi	r21, 0xFF	; 255
    1578:	71 f0       	breq	.+28     	; 0x1596 <__fp_splitA+0x1a>
    157a:	47 95       	ror	r20

0000157c <__fp_splitA>:
    157c:	88 0f       	add	r24, r24
    157e:	97 fb       	bst	r25, 7
    1580:	99 1f       	adc	r25, r25
    1582:	61 f0       	breq	.+24     	; 0x159c <__fp_splitA+0x20>
    1584:	9f 3f       	cpi	r25, 0xFF	; 255
    1586:	79 f0       	breq	.+30     	; 0x15a6 <__fp_splitA+0x2a>
    1588:	87 95       	ror	r24
    158a:	08 95       	ret
    158c:	12 16       	cp	r1, r18
    158e:	13 06       	cpc	r1, r19
    1590:	14 06       	cpc	r1, r20
    1592:	55 1f       	adc	r21, r21
    1594:	f2 cf       	rjmp	.-28     	; 0x157a <__fp_split3+0xe>
    1596:	46 95       	lsr	r20
    1598:	f1 df       	rcall	.-30     	; 0x157c <__fp_splitA>
    159a:	08 c0       	rjmp	.+16     	; 0x15ac <__fp_splitA+0x30>
    159c:	16 16       	cp	r1, r22
    159e:	17 06       	cpc	r1, r23
    15a0:	18 06       	cpc	r1, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	f1 cf       	rjmp	.-30     	; 0x1588 <__fp_splitA+0xc>
    15a6:	86 95       	lsr	r24
    15a8:	71 05       	cpc	r23, r1
    15aa:	61 05       	cpc	r22, r1
    15ac:	08 94       	sec
    15ae:	08 95       	ret

000015b0 <__fp_zero>:
    15b0:	e8 94       	clt

000015b2 <__fp_szero>:
    15b2:	bb 27       	eor	r27, r27
    15b4:	66 27       	eor	r22, r22
    15b6:	77 27       	eor	r23, r23
    15b8:	cb 01       	movw	r24, r22
    15ba:	97 f9       	bld	r25, 7
    15bc:	08 95       	ret

000015be <__mulsf3>:
    15be:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3x>
    15c2:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_round>
    15c6:	0e 94 97 0a 	call	0x152e	; 0x152e <__fp_pscA>
    15ca:	38 f0       	brcs	.+14     	; 0x15da <__mulsf3+0x1c>
    15cc:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscB>
    15d0:	20 f0       	brcs	.+8      	; 0x15da <__mulsf3+0x1c>
    15d2:	95 23       	and	r25, r21
    15d4:	11 f0       	breq	.+4      	; 0x15da <__mulsf3+0x1c>
    15d6:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    15da:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_nan>
    15de:	11 24       	eor	r1, r1
    15e0:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_szero>

000015e4 <__mulsf3x>:
    15e4:	0e 94 b6 0a 	call	0x156c	; 0x156c <__fp_split3>
    15e8:	70 f3       	brcs	.-36     	; 0x15c6 <__mulsf3+0x8>

000015ea <__mulsf3_pse>:
    15ea:	95 9f       	mul	r25, r21
    15ec:	c1 f3       	breq	.-16     	; 0x15de <__mulsf3+0x20>
    15ee:	95 0f       	add	r25, r21
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	55 1f       	adc	r21, r21
    15f4:	62 9f       	mul	r22, r18
    15f6:	f0 01       	movw	r30, r0
    15f8:	72 9f       	mul	r23, r18
    15fa:	bb 27       	eor	r27, r27
    15fc:	f0 0d       	add	r31, r0
    15fe:	b1 1d       	adc	r27, r1
    1600:	63 9f       	mul	r22, r19
    1602:	aa 27       	eor	r26, r26
    1604:	f0 0d       	add	r31, r0
    1606:	b1 1d       	adc	r27, r1
    1608:	aa 1f       	adc	r26, r26
    160a:	64 9f       	mul	r22, r20
    160c:	66 27       	eor	r22, r22
    160e:	b0 0d       	add	r27, r0
    1610:	a1 1d       	adc	r26, r1
    1612:	66 1f       	adc	r22, r22
    1614:	82 9f       	mul	r24, r18
    1616:	22 27       	eor	r18, r18
    1618:	b0 0d       	add	r27, r0
    161a:	a1 1d       	adc	r26, r1
    161c:	62 1f       	adc	r22, r18
    161e:	73 9f       	mul	r23, r19
    1620:	b0 0d       	add	r27, r0
    1622:	a1 1d       	adc	r26, r1
    1624:	62 1f       	adc	r22, r18
    1626:	83 9f       	mul	r24, r19
    1628:	a0 0d       	add	r26, r0
    162a:	61 1d       	adc	r22, r1
    162c:	22 1f       	adc	r18, r18
    162e:	74 9f       	mul	r23, r20
    1630:	33 27       	eor	r19, r19
    1632:	a0 0d       	add	r26, r0
    1634:	61 1d       	adc	r22, r1
    1636:	23 1f       	adc	r18, r19
    1638:	84 9f       	mul	r24, r20
    163a:	60 0d       	add	r22, r0
    163c:	21 1d       	adc	r18, r1
    163e:	82 2f       	mov	r24, r18
    1640:	76 2f       	mov	r23, r22
    1642:	6a 2f       	mov	r22, r26
    1644:	11 24       	eor	r1, r1
    1646:	9f 57       	subi	r25, 0x7F	; 127
    1648:	50 40       	sbci	r21, 0x00	; 0
    164a:	9a f0       	brmi	.+38     	; 0x1672 <__mulsf3_pse+0x88>
    164c:	f1 f0       	breq	.+60     	; 0x168a <__mulsf3_pse+0xa0>
    164e:	88 23       	and	r24, r24
    1650:	4a f0       	brmi	.+18     	; 0x1664 <__mulsf3_pse+0x7a>
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	bb 1f       	adc	r27, r27
    1658:	66 1f       	adc	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	91 50       	subi	r25, 0x01	; 1
    1660:	50 40       	sbci	r21, 0x00	; 0
    1662:	a9 f7       	brne	.-22     	; 0x164e <__mulsf3_pse+0x64>
    1664:	9e 3f       	cpi	r25, 0xFE	; 254
    1666:	51 05       	cpc	r21, r1
    1668:	80 f0       	brcs	.+32     	; 0x168a <__mulsf3_pse+0xa0>
    166a:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    166e:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_szero>
    1672:	5f 3f       	cpi	r21, 0xFF	; 255
    1674:	e4 f3       	brlt	.-8      	; 0x166e <__mulsf3_pse+0x84>
    1676:	98 3e       	cpi	r25, 0xE8	; 232
    1678:	d4 f3       	brlt	.-12     	; 0x166e <__mulsf3_pse+0x84>
    167a:	86 95       	lsr	r24
    167c:	77 95       	ror	r23
    167e:	67 95       	ror	r22
    1680:	b7 95       	ror	r27
    1682:	f7 95       	ror	r31
    1684:	e7 95       	ror	r30
    1686:	9f 5f       	subi	r25, 0xFF	; 255
    1688:	c1 f7       	brne	.-16     	; 0x167a <__mulsf3_pse+0x90>
    168a:	fe 2b       	or	r31, r30
    168c:	88 0f       	add	r24, r24
    168e:	91 1d       	adc	r25, r1
    1690:	96 95       	lsr	r25
    1692:	87 95       	ror	r24
    1694:	97 f9       	bld	r25, 7
    1696:	08 95       	ret
    1698:	19 f4       	brne	.+6      	; 0x16a0 <__mulsf3_pse+0xb6>
    169a:	16 f4       	brtc	.+4      	; 0x16a0 <__mulsf3_pse+0xb6>
    169c:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_nan>
    16a0:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_mpack>

000016a4 <sqrt>:
    16a4:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_splitA>
    16a8:	b8 f3       	brcs	.-18     	; 0x1698 <__mulsf3_pse+0xae>
    16aa:	99 23       	and	r25, r25
    16ac:	c9 f3       	breq	.-14     	; 0x16a0 <__mulsf3_pse+0xb6>
    16ae:	b6 f3       	brts	.-20     	; 0x169c <__mulsf3_pse+0xb2>
    16b0:	9f 57       	subi	r25, 0x7F	; 127
    16b2:	55 0b       	sbc	r21, r21
    16b4:	87 ff       	sbrs	r24, 7
    16b6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_norm2>
    16ba:	00 24       	eor	r0, r0
    16bc:	a0 e6       	ldi	r26, 0x60	; 96
    16be:	40 ea       	ldi	r20, 0xA0	; 160
    16c0:	90 01       	movw	r18, r0
    16c2:	80 58       	subi	r24, 0x80	; 128
    16c4:	56 95       	lsr	r21
    16c6:	97 95       	ror	r25
    16c8:	28 f4       	brcc	.+10     	; 0x16d4 <sqrt+0x30>
    16ca:	80 5c       	subi	r24, 0xC0	; 192
    16cc:	66 0f       	add	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	20 f0       	brcs	.+8      	; 0x16dc <sqrt+0x38>
    16d4:	26 17       	cp	r18, r22
    16d6:	37 07       	cpc	r19, r23
    16d8:	48 07       	cpc	r20, r24
    16da:	30 f4       	brcc	.+12     	; 0x16e8 <sqrt+0x44>
    16dc:	62 1b       	sub	r22, r18
    16de:	73 0b       	sbc	r23, r19
    16e0:	84 0b       	sbc	r24, r20
    16e2:	20 29       	or	r18, r0
    16e4:	31 29       	or	r19, r1
    16e6:	4a 2b       	or	r20, r26
    16e8:	a6 95       	lsr	r26
    16ea:	17 94       	ror	r1
    16ec:	07 94       	ror	r0
    16ee:	20 25       	eor	r18, r0
    16f0:	31 25       	eor	r19, r1
    16f2:	4a 27       	eor	r20, r26
    16f4:	58 f7       	brcc	.-42     	; 0x16cc <sqrt+0x28>
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <sqrt+0x62>
    16fe:	26 17       	cp	r18, r22
    1700:	37 07       	cpc	r19, r23
    1702:	48 07       	cpc	r20, r24
    1704:	30 f4       	brcc	.+12     	; 0x1712 <sqrt+0x6e>
    1706:	62 0b       	sbc	r22, r18
    1708:	73 0b       	sbc	r23, r19
    170a:	84 0b       	sbc	r24, r20
    170c:	20 0d       	add	r18, r0
    170e:	31 1d       	adc	r19, r1
    1710:	41 1d       	adc	r20, r1
    1712:	a0 95       	com	r26
    1714:	81 f7       	brne	.-32     	; 0x16f6 <sqrt+0x52>
    1716:	b9 01       	movw	r22, r18
    1718:	84 2f       	mov	r24, r20
    171a:	91 58       	subi	r25, 0x81	; 129
    171c:	88 0f       	add	r24, r24
    171e:	96 95       	lsr	r25
    1720:	87 95       	ror	r24
    1722:	08 95       	ret

00001724 <__fp_mpack>:
    1724:	9f 3f       	cpi	r25, 0xFF	; 255
    1726:	31 f0       	breq	.+12     	; 0x1734 <__fp_mpack_finite+0xc>

00001728 <__fp_mpack_finite>:
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	20 f4       	brcc	.+8      	; 0x1734 <__fp_mpack_finite+0xc>
    172c:	87 95       	ror	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	b7 95       	ror	r27
    1734:	88 0f       	add	r24, r24
    1736:	91 1d       	adc	r25, r1
    1738:	96 95       	lsr	r25
    173a:	87 95       	ror	r24
    173c:	97 f9       	bld	r25, 7
    173e:	08 95       	ret

00001740 <__fp_norm2>:
    1740:	91 50       	subi	r25, 0x01	; 1
    1742:	50 40       	sbci	r21, 0x00	; 0
    1744:	66 0f       	add	r22, r22
    1746:	77 1f       	adc	r23, r23
    1748:	88 1f       	adc	r24, r24
    174a:	d2 f7       	brpl	.-12     	; 0x1740 <__fp_norm2>
    174c:	08 95       	ret

0000174e <__udivmodsi4>:
    174e:	a1 e2       	ldi	r26, 0x21	; 33
    1750:	1a 2e       	mov	r1, r26
    1752:	aa 1b       	sub	r26, r26
    1754:	bb 1b       	sub	r27, r27
    1756:	fd 01       	movw	r30, r26
    1758:	0d c0       	rjmp	.+26     	; 0x1774 <__udivmodsi4_ep>

0000175a <__udivmodsi4_loop>:
    175a:	aa 1f       	adc	r26, r26
    175c:	bb 1f       	adc	r27, r27
    175e:	ee 1f       	adc	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	a2 17       	cp	r26, r18
    1764:	b3 07       	cpc	r27, r19
    1766:	e4 07       	cpc	r30, r20
    1768:	f5 07       	cpc	r31, r21
    176a:	20 f0       	brcs	.+8      	; 0x1774 <__udivmodsi4_ep>
    176c:	a2 1b       	sub	r26, r18
    176e:	b3 0b       	sbc	r27, r19
    1770:	e4 0b       	sbc	r30, r20
    1772:	f5 0b       	sbc	r31, r21

00001774 <__udivmodsi4_ep>:
    1774:	66 1f       	adc	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	88 1f       	adc	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	1a 94       	dec	r1
    177e:	69 f7       	brne	.-38     	; 0x175a <__udivmodsi4_loop>
    1780:	60 95       	com	r22
    1782:	70 95       	com	r23
    1784:	80 95       	com	r24
    1786:	90 95       	com	r25
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
    178c:	bd 01       	movw	r22, r26
    178e:	cf 01       	movw	r24, r30
    1790:	08 95       	ret

00001792 <__muluhisi3>:
    1792:	0e 94 20 0c 	call	0x1840	; 0x1840 <__umulhisi3>
    1796:	a5 9f       	mul	r26, r21
    1798:	90 0d       	add	r25, r0
    179a:	b4 9f       	mul	r27, r20
    179c:	90 0d       	add	r25, r0
    179e:	a4 9f       	mul	r26, r20
    17a0:	80 0d       	add	r24, r0
    17a2:	91 1d       	adc	r25, r1
    17a4:	11 24       	eor	r1, r1
    17a6:	08 95       	ret

000017a8 <__ashldi3>:
    17a8:	0f 93       	push	r16
    17aa:	08 30       	cpi	r16, 0x08	; 8
    17ac:	90 f0       	brcs	.+36     	; 0x17d2 <__ashldi3+0x2a>
    17ae:	98 2f       	mov	r25, r24
    17b0:	87 2f       	mov	r24, r23
    17b2:	76 2f       	mov	r23, r22
    17b4:	65 2f       	mov	r22, r21
    17b6:	54 2f       	mov	r21, r20
    17b8:	43 2f       	mov	r20, r19
    17ba:	32 2f       	mov	r19, r18
    17bc:	22 27       	eor	r18, r18
    17be:	08 50       	subi	r16, 0x08	; 8
    17c0:	f4 cf       	rjmp	.-24     	; 0x17aa <__ashldi3+0x2>
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	44 1f       	adc	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	66 1f       	adc	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 95       	dec	r16
    17d4:	b2 f7       	brpl	.-20     	; 0x17c2 <__ashldi3+0x1a>
    17d6:	0f 91       	pop	r16
    17d8:	08 95       	ret

000017da <__adddi3>:
    17da:	2a 0d       	add	r18, r10
    17dc:	3b 1d       	adc	r19, r11
    17de:	4c 1d       	adc	r20, r12
    17e0:	5d 1d       	adc	r21, r13
    17e2:	6e 1d       	adc	r22, r14
    17e4:	7f 1d       	adc	r23, r15
    17e6:	80 1f       	adc	r24, r16
    17e8:	91 1f       	adc	r25, r17
    17ea:	08 95       	ret

000017ec <__adddi3_s8>:
    17ec:	00 24       	eor	r0, r0
    17ee:	a7 fd       	sbrc	r26, 7
    17f0:	00 94       	com	r0
    17f2:	2a 0f       	add	r18, r26
    17f4:	30 1d       	adc	r19, r0
    17f6:	40 1d       	adc	r20, r0
    17f8:	50 1d       	adc	r21, r0
    17fa:	60 1d       	adc	r22, r0
    17fc:	70 1d       	adc	r23, r0
    17fe:	80 1d       	adc	r24, r0
    1800:	90 1d       	adc	r25, r0
    1802:	08 95       	ret

00001804 <__subdi3>:
    1804:	2a 19       	sub	r18, r10
    1806:	3b 09       	sbc	r19, r11
    1808:	4c 09       	sbc	r20, r12
    180a:	5d 09       	sbc	r21, r13
    180c:	6e 09       	sbc	r22, r14
    180e:	7f 09       	sbc	r23, r15
    1810:	80 0b       	sbc	r24, r16
    1812:	91 0b       	sbc	r25, r17
    1814:	08 95       	ret

00001816 <__cmpdi2>:
    1816:	2a 15       	cp	r18, r10
    1818:	3b 05       	cpc	r19, r11
    181a:	4c 05       	cpc	r20, r12
    181c:	5d 05       	cpc	r21, r13
    181e:	6e 05       	cpc	r22, r14
    1820:	7f 05       	cpc	r23, r15
    1822:	80 07       	cpc	r24, r16
    1824:	91 07       	cpc	r25, r17
    1826:	08 95       	ret

00001828 <__cmpdi2_s8>:
    1828:	00 24       	eor	r0, r0
    182a:	a7 fd       	sbrc	r26, 7
    182c:	00 94       	com	r0
    182e:	2a 17       	cp	r18, r26
    1830:	30 05       	cpc	r19, r0
    1832:	40 05       	cpc	r20, r0
    1834:	50 05       	cpc	r21, r0
    1836:	60 05       	cpc	r22, r0
    1838:	70 05       	cpc	r23, r0
    183a:	80 05       	cpc	r24, r0
    183c:	90 05       	cpc	r25, r0
    183e:	08 95       	ret

00001840 <__umulhisi3>:
    1840:	a2 9f       	mul	r26, r18
    1842:	b0 01       	movw	r22, r0
    1844:	b3 9f       	mul	r27, r19
    1846:	c0 01       	movw	r24, r0
    1848:	a3 9f       	mul	r26, r19
    184a:	70 0d       	add	r23, r0
    184c:	81 1d       	adc	r24, r1
    184e:	11 24       	eor	r1, r1
    1850:	91 1d       	adc	r25, r1
    1852:	b2 9f       	mul	r27, r18
    1854:	70 0d       	add	r23, r0
    1856:	81 1d       	adc	r24, r1
    1858:	11 24       	eor	r1, r1
    185a:	91 1d       	adc	r25, r1
    185c:	08 95       	ret

0000185e <_exit>:
    185e:	f8 94       	cli

00001860 <__stop_program>:
    1860:	ff cf       	rjmp	.-2      	; 0x1860 <__stop_program>
