
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800200  00001a3e  00001ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000167  008002f2  008002f2  00001bc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fd0  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e4  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001022  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00005f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a78  00000000  00000000  00006500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010cf  00000000  00000000  00006f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00008047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c5       	rjmp	.+2886   	; 0xb84 <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__vector_25>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0a c2       	rjmp	.+1044   	; 0x4a2 <__vector_35>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
      9c:	75 c3       	rjmp	.+1770   	; 0x788 <__vector_39>
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ef c2       	rjmp	.+1502   	; 0x688 <__vector_42>
      aa:	00 00       	nop
      ac:	96 c0       	rjmp	.+300    	; 0x1da <__bad_interrupt>
      ae:	00 00       	nop
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	92 c0       	rjmp	.+292    	; 0x1da <__bad_interrupt>
      b6:	00 00       	nop
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b6 01       	movw	r22, r12
      e6:	f0 01       	movw	r30, r0
      e8:	f0 01       	movw	r30, r0
      ea:	cc 01       	movw	r24, r24
      ec:	f0 01       	movw	r30, r0
      ee:	f0 01       	movw	r30, r0
      f0:	f0 01       	movw	r30, r0
      f2:	f0 01       	movw	r30, r0
      f4:	f0 01       	movw	r30, r0
      f6:	f0 01       	movw	r30, r0
      f8:	f0 01       	movw	r30, r0
      fa:	f0 01       	movw	r30, r0
      fc:	f0 01       	movw	r30, r0
      fe:	f0 01       	movw	r30, r0
     100:	f0 01       	movw	r30, r0
     102:	f0 01       	movw	r30, r0
     104:	e7 01       	movw	r28, r14
     106:	ec 01       	movw	r28, r24
     108:	c1 01       	movw	r24, r2
     10a:	de 01       	movw	r26, r28
     10c:	f0 01       	movw	r30, r0
     10e:	f0 01       	movw	r30, r0
     110:	ab 01       	movw	r20, r22
     112:	f0 01       	movw	r30, r0
     114:	f0 01       	movw	r30, r0
     116:	d7 01       	movw	r26, r14
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
     190:	01 c4       	rjmp	.+2050   	; 0x994 <writeToSlave+0x12>
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ee e3       	ldi	r30, 0x3E	; 62
     1b2:	fa e1       	ldi	r31, 0x1A	; 26
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a2 3f       	cpi	r26, 0xF2	; 242
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	24 e0       	ldi	r18, 0x04	; 4
     1c6:	a2 ef       	ldi	r26, 0xF2	; 242
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a9 35       	cpi	r26, 0x59	; 89
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	ac d5       	rcall	.+2904   	; 0xd2e <main>
     1d6:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <init_USART>:
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
}
     1dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e0:	e1 ec       	ldi	r30, 0xC1	; 193
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 69       	ori	r24, 0x90	; 144
     1e8:	80 83       	st	Z, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 60       	ori	r24, 0x08	; 8
     1ee:	80 83       	st	Z, r24
     1f0:	e2 ec       	ldi	r30, 0xC2	; 194
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	86 60       	ori	r24, 0x06	; 6
     1f8:	80 83       	st	Z, r24
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     206:	08 95       	ret

00000208 <__vector_25>:
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
     23e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     242:	90 ed       	ldi	r25, 0xD0	; 208
     244:	98 0f       	add	r25, r24
     246:	9a 30       	cpi	r25, 0x0A	; 10
     248:	d8 f4       	brcc	.+54     	; 0x280 <__vector_25+0x78>
     24a:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <command.1980>
     24e:	94 37       	cpi	r25, 0x74	; 116
     250:	21 f0       	breq	.+8      	; 0x25a <__vector_25+0x52>
     252:	91 57       	subi	r25, 0x71	; 113
     254:	92 30       	cpi	r25, 0x02	; 2
     256:	08 f0       	brcs	.+2      	; 0x25a <__vector_25+0x52>
     258:	ea c0       	rjmp	.+468    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     25a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     25e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     262:	2f 3f       	cpi	r18, 0xFF	; 255
     264:	31 05       	cpc	r19, r1
     266:	0c f0       	brlt	.+2      	; 0x26a <__vector_25+0x62>
     268:	e2 c0       	rjmp	.+452    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     26a:	2f 5f       	subi	r18, 0xFF	; 255
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
     26e:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
     272:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
     276:	f9 01       	movw	r30, r18
     278:	e2 50       	subi	r30, 0x02	; 2
     27a:	fd 4f       	sbci	r31, 0xFD	; 253
     27c:	80 83       	st	Z, r24
     27e:	d7 c0       	rjmp	.+430    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     280:	9f e9       	ldi	r25, 0x9F	; 159
     282:	98 0f       	add	r25, r24
     284:	9a 31       	cpi	r25, 0x1A	; 26
     286:	90 f4       	brcc	.+36     	; 0x2ac <__vector_25+0xa4>
     288:	85 37       	cpi	r24, 0x75	; 117
     28a:	40 f4       	brcc	.+16     	; 0x29c <__vector_25+0x94>
     28c:	81 37       	cpi	r24, 0x71	; 113
     28e:	58 f4       	brcc	.+22     	; 0x2a6 <__vector_25+0x9e>
     290:	81 36       	cpi	r24, 0x61	; 97
     292:	49 f0       	breq	.+18     	; 0x2a6 <__vector_25+0x9e>
     294:	84 36       	cpi	r24, 0x64	; 100
     296:	09 f0       	breq	.+2      	; 0x29a <__vector_25+0x92>
     298:	ca c0       	rjmp	.+404    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <__vector_25+0x9e>
     29c:	87 37       	cpi	r24, 0x77	; 119
     29e:	19 f0       	breq	.+6      	; 0x2a6 <__vector_25+0x9e>
     2a0:	8a 37       	cpi	r24, 0x7A	; 122
     2a2:	09 f0       	breq	.+2      	; 0x2a6 <__vector_25+0x9e>
     2a4:	c4 c0       	rjmp	.+392    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     2a6:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <command.1980>
     2aa:	c1 c0       	rjmp	.+386    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     2ac:	8d 30       	cpi	r24, 0x0D	; 13
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <__vector_25+0xaa>
     2b0:	be c0       	rjmp	.+380    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     2b2:	c0 90 fd 03 	lds	r12, 0x03FD	; 0x8003fd <command.1980>
     2b6:	84 e7       	ldi	r24, 0x74	; 116
     2b8:	c8 16       	cp	r12, r24
     2ba:	09 f4       	brne	.+2      	; 0x2be <__vector_25+0xb6>
     2bc:	a4 c0       	rjmp	.+328    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     2be:	81 e7       	ldi	r24, 0x71	; 113
     2c0:	c8 16       	cp	r12, r24
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <__vector_25+0xbe>
     2c4:	aa c0       	rjmp	.+340    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     2c6:	82 e7       	ldi	r24, 0x72	; 114
     2c8:	c8 16       	cp	r12, r24
     2ca:	09 f4       	brne	.+2      	; 0x2ce <__vector_25+0xc6>
     2cc:	92 c0       	rjmp	.+292    	; 0x3f2 <__vector_25+0x1ea>
     2ce:	e1 2c       	mov	r14, r1
     2d0:	f1 2c       	mov	r15, r1
     2d2:	2f c0       	rjmp	.+94     	; 0x332 <__vector_25+0x12a>
     2d4:	c0 e0       	ldi	r28, 0x00	; 0
     2d6:	d0 e0       	ldi	r29, 0x00	; 0
     2d8:	d1 2c       	mov	r13, r1
     2da:	e1 2c       	mov	r14, r1
     2dc:	f1 2c       	mov	r15, r1
     2de:	b8 01       	movw	r22, r16
     2e0:	6c 1b       	sub	r22, r28
     2e2:	7d 0b       	sbc	r23, r29
     2e4:	07 2e       	mov	r0, r23
     2e6:	00 0c       	add	r0, r0
     2e8:	88 0b       	sbc	r24, r24
     2ea:	99 0b       	sbc	r25, r25
     2ec:	b8 d7       	rcall	.+3952   	; 0x125e <__floatsisf>
     2ee:	9b 01       	movw	r18, r22
     2f0:	ac 01       	movw	r20, r24
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 e2       	ldi	r24, 0x20	; 32
     2f8:	91 e4       	ldi	r25, 0x41	; 65
     2fa:	0e 94 bb 09 	call	0x1376	; 0x1376 <pow>
     2fe:	c2 50       	subi	r28, 0x02	; 2
     300:	dd 4f       	sbci	r29, 0xFD	; 253
     302:	c8 81       	ld	r28, Y
     304:	c0 53       	subi	r28, 0x30	; 48
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	5f e3       	ldi	r21, 0x3F	; 63
     310:	0f d7       	rcall	.+3614   	; 0x1130 <__addsf3>
     312:	72 d7       	rcall	.+3812   	; 0x11f8 <__fixsfsi>
     314:	c6 9f       	mul	r28, r22
     316:	90 01       	movw	r18, r0
     318:	c7 9f       	mul	r28, r23
     31a:	30 0d       	add	r19, r0
     31c:	d6 9f       	mul	r29, r22
     31e:	30 0d       	add	r19, r0
     320:	11 24       	eor	r1, r1
     322:	e2 0e       	add	r14, r18
     324:	f3 1e       	adc	r15, r19
     326:	d3 94       	inc	r13
     328:	cd 2d       	mov	r28, r13
     32a:	d0 e0       	ldi	r29, 0x00	; 0
     32c:	0c 17       	cp	r16, r28
     32e:	1d 07       	cpc	r17, r29
     330:	b4 f6       	brge	.-84     	; 0x2de <__vector_25+0xd6>
     332:	cc 20       	and	r12, r12
     334:	09 f4       	brne	.+2      	; 0x338 <__vector_25+0x130>
     336:	7b c0       	rjmp	.+246    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     338:	8c 2d       	mov	r24, r12
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	e1 56       	subi	r30, 0x61	; 97
     340:	f1 09       	sbc	r31, r1
     342:	ea 31       	cpi	r30, 0x1A	; 26
     344:	f1 05       	cpc	r31, r1
     346:	08 f0       	brcs	.+2      	; 0x34a <__vector_25+0x142>
     348:	4b c0       	rjmp	.+150    	; 0x3e0 <__vector_25+0x1d8>
     34a:	88 27       	eor	r24, r24
     34c:	ee 58       	subi	r30, 0x8E	; 142
     34e:	ff 4f       	sbci	r31, 0xFF	; 255
     350:	8f 4f       	sbci	r24, 0xFF	; 255
     352:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__tablejump2__>
     356:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <rp6Data+0x2>
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	19 f4       	brne	.+6      	; 0x364 <__vector_25+0x15c>
     35e:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <rp6Data+0x2>
     362:	3e c0       	rjmp	.+124    	; 0x3e0 <__vector_25+0x1d8>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <rp6Data+0x2>
     36a:	3a c0       	rjmp	.+116    	; 0x3e0 <__vector_25+0x1d8>
     36c:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <rp6Data+0x3>
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	19 f4       	brne	.+6      	; 0x37a <__vector_25+0x172>
     374:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <rp6Data+0x3>
     378:	33 c0       	rjmp	.+102    	; 0x3e0 <__vector_25+0x1d8>
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <rp6Data+0x3>
     380:	2f c0       	rjmp	.+94     	; 0x3e0 <__vector_25+0x1d8>
     382:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <rp6Data+0x2>
     386:	8f 3f       	cpi	r24, 0xFF	; 255
     388:	19 f4       	brne	.+6      	; 0x390 <__vector_25+0x188>
     38a:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <rp6Data+0x2>
     38e:	28 c0       	rjmp	.+80     	; 0x3e0 <__vector_25+0x1d8>
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <rp6Data+0x2>
     396:	24 c0       	rjmp	.+72     	; 0x3e0 <__vector_25+0x1d8>
     398:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <rp6Data+0x3>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	19 f4       	brne	.+6      	; 0x3a6 <__vector_25+0x19e>
     3a0:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <rp6Data+0x3>
     3a4:	1d c0       	rjmp	.+58     	; 0x3e0 <__vector_25+0x1d8>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <rp6Data+0x3>
     3ac:	19 c0       	rjmp	.+50     	; 0x3e0 <__vector_25+0x1d8>
     3ae:	e2 e4       	ldi	r30, 0x42	; 66
     3b0:	f4 e0       	ldi	r31, 0x04	; 4
     3b2:	11 82       	std	Z+1, r1	; 0x01
     3b4:	10 82       	st	Z, r1
     3b6:	13 82       	std	Z+3, r1	; 0x03
     3b8:	12 82       	std	Z+2, r1	; 0x02
     3ba:	12 c0       	rjmp	.+36     	; 0x3e0 <__vector_25+0x1d8>
     3bc:	85 e6       	ldi	r24, 0x65	; 101
     3be:	e8 16       	cp	r14, r24
     3c0:	f1 04       	cpc	r15, r1
     3c2:	70 f4       	brcc	.+28     	; 0x3e0 <__vector_25+0x1d8>
     3c4:	f0 92 43 04 	sts	0x0443, r15	; 0x800443 <rp6Data+0x1>
     3c8:	e0 92 42 04 	sts	0x0442, r14	; 0x800442 <rp6Data>
     3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <__vector_25+0x1d8>
     3ce:	f0 92 47 04 	sts	0x0447, r15	; 0x800447 <rp6Data+0x5>
     3d2:	e0 92 46 04 	sts	0x0446, r14	; 0x800446 <rp6Data+0x4>
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <__vector_25+0x1d8>
     3d8:	f0 92 49 04 	sts	0x0449, r15	; 0x800449 <rp6Data+0x7>
     3dc:	e0 92 48 04 	sts	0x0448, r14	; 0x800448 <rp6Data+0x6>
     3e0:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <command.1980>
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	9f ef       	ldi	r25, 0xFF	; 255
     3e8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     3ec:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     3f0:	1e c0       	rjmp	.+60     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3f2:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <__data_start>
     3f6:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <__data_start+0x1>
     3fa:	11 23       	and	r17, r17
     3fc:	0c f0       	brlt	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	6a cf       	rjmp	.-300    	; 0x2d4 <__vector_25+0xcc>
     400:	e1 2c       	mov	r14, r1
     402:	f1 2c       	mov	r15, r1
     404:	e9 cf       	rjmp	.-46     	; 0x3d8 <__vector_25+0x1d0>
     406:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <__data_start>
     40a:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <__data_start+0x1>
     40e:	11 23       	and	r17, r17
     410:	0c f0       	brlt	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	60 cf       	rjmp	.-320    	; 0x2d4 <__vector_25+0xcc>
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
     418:	d5 cf       	rjmp	.-86     	; 0x3c4 <__vector_25+0x1bc>
     41a:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <__data_start>
     41e:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <__data_start+0x1>
     422:	11 23       	and	r17, r17
     424:	0c f0       	brlt	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	56 cf       	rjmp	.-340    	; 0x2d4 <__vector_25+0xcc>
     428:	e1 2c       	mov	r14, r1
     42a:	f1 2c       	mov	r15, r1
     42c:	d0 cf       	rjmp	.-96     	; 0x3ce <__vector_25+0x1c6>
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	7f 91       	pop	r23
     440:	6f 91       	pop	r22
     442:	5f 91       	pop	r21
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <init_micros>:
     464:	e1 e9       	ldi	r30, 0x91	; 145
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	81 60       	ori	r24, 0x01	; 1
     46c:	80 83       	st	Z, r24
     46e:	e1 e7       	ldi	r30, 0x71	; 113
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	81 60       	ori	r24, 0x01	; 1
     476:	80 83       	st	Z, r24
     478:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     47c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     480:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <t3TotalOverflow>
     484:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <t3TotalOverflow+0x1>
     488:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <t3TotalOverflow+0x2>
     48c:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <t3TotalOverflow+0x3>
     490:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <t3TotalOverflow+0x4>
     494:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <t3TotalOverflow+0x5>
     498:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <t3TotalOverflow+0x6>
     49c:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <t3TotalOverflow+0x7>
     4a0:	08 95       	ret

000004a2 <__vector_35>:
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <t3TotalOverflow>
     4c2:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <t3TotalOverflow+0x1>
     4c6:	40 91 1e 04 	lds	r20, 0x041E	; 0x80041e <t3TotalOverflow+0x2>
     4ca:	50 91 1f 04 	lds	r21, 0x041F	; 0x80041f <t3TotalOverflow+0x3>
     4ce:	60 91 20 04 	lds	r22, 0x0420	; 0x800420 <t3TotalOverflow+0x4>
     4d2:	70 91 21 04 	lds	r23, 0x0421	; 0x800421 <t3TotalOverflow+0x5>
     4d6:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <t3TotalOverflow+0x6>
     4da:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <t3TotalOverflow+0x7>
     4de:	a1 e0       	ldi	r26, 0x01	; 1
     4e0:	0e 94 bd 0c 	call	0x197a	; 0x197a <__adddi3_s8>
     4e4:	20 93 1c 04 	sts	0x041C, r18	; 0x80041c <t3TotalOverflow>
     4e8:	30 93 1d 04 	sts	0x041D, r19	; 0x80041d <t3TotalOverflow+0x1>
     4ec:	40 93 1e 04 	sts	0x041E, r20	; 0x80041e <t3TotalOverflow+0x2>
     4f0:	50 93 1f 04 	sts	0x041F, r21	; 0x80041f <t3TotalOverflow+0x3>
     4f4:	60 93 20 04 	sts	0x0420, r22	; 0x800420 <t3TotalOverflow+0x4>
     4f8:	70 93 21 04 	sts	0x0421, r23	; 0x800421 <t3TotalOverflow+0x5>
     4fc:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <t3TotalOverflow+0x6>
     500:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <t3TotalOverflow+0x7>
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <micros>:
     520:	4f 92       	push	r4
     522:	5f 92       	push	r5
     524:	6f 92       	push	r6
     526:	7f 92       	push	r7
     528:	8f 92       	push	r8
     52a:	9f 92       	push	r9
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     540:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     544:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <t3TotalOverflow>
     548:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <t3TotalOverflow+0x1>
     54c:	40 91 1e 04 	lds	r20, 0x041E	; 0x80041e <t3TotalOverflow+0x2>
     550:	50 91 1f 04 	lds	r21, 0x041F	; 0x80041f <t3TotalOverflow+0x3>
     554:	60 91 20 04 	lds	r22, 0x0420	; 0x800420 <t3TotalOverflow+0x4>
     558:	70 91 21 04 	lds	r23, 0x0421	; 0x800421 <t3TotalOverflow+0x5>
     55c:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <t3TotalOverflow+0x6>
     560:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <t3TotalOverflow+0x7>
     564:	98 2c       	mov	r9, r8
     566:	88 24       	eor	r8, r8
     568:	99 0c       	add	r9, r9
     56a:	99 0c       	add	r9, r9
     56c:	99 0c       	add	r9, r9
     56e:	99 0c       	add	r9, r9
     570:	09 2c       	mov	r0, r9
     572:	00 0c       	add	r0, r0
     574:	aa 08       	sbc	r10, r10
     576:	bb 08       	sbc	r11, r11
     578:	bb 20       	and	r11, r11
     57a:	2c f4       	brge	.+10     	; 0x586 <micros+0x66>
     57c:	ef ef       	ldi	r30, 0xFF	; 255
     57e:	8e 0e       	add	r8, r30
     580:	9e 1e       	adc	r9, r30
     582:	a1 1c       	adc	r10, r1
     584:	b1 1c       	adc	r11, r1
     586:	25 01       	movw	r4, r10
     588:	77 24       	eor	r7, r7
     58a:	57 fc       	sbrc	r5, 7
     58c:	70 94       	com	r7
     58e:	67 2c       	mov	r6, r7
     590:	bb 0c       	add	r11, r11
     592:	88 08       	sbc	r8, r8
     594:	98 2c       	mov	r9, r8
     596:	54 01       	movw	r10, r8
     598:	0c e0       	ldi	r16, 0x0C	; 12
     59a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__ashldi3>
     59e:	f2 2f       	mov	r31, r18
     5a0:	e3 2f       	mov	r30, r19
     5a2:	c4 2e       	mov	r12, r20
     5a4:	d5 2e       	mov	r13, r21
     5a6:	e6 2e       	mov	r14, r22
     5a8:	f7 2e       	mov	r15, r23
     5aa:	08 2f       	mov	r16, r24
     5ac:	19 2f       	mov	r17, r25
     5ae:	24 2d       	mov	r18, r4
     5b0:	35 2d       	mov	r19, r5
     5b2:	46 2d       	mov	r20, r6
     5b4:	57 2d       	mov	r21, r7
     5b6:	68 2d       	mov	r22, r8
     5b8:	78 2d       	mov	r23, r8
     5ba:	88 2d       	mov	r24, r8
     5bc:	98 2d       	mov	r25, r8
     5be:	af 2e       	mov	r10, r31
     5c0:	be 2e       	mov	r11, r30
     5c2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__adddi3>
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	7f 90       	pop	r7
     5dc:	6f 90       	pop	r6
     5de:	5f 90       	pop	r5
     5e0:	4f 90       	pop	r4
     5e2:	08 95       	ret

000005e4 <init_TWI>:
     5e4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     5e8:	88 e4       	ldi	r24, 0x48	; 72
     5ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     5ee:	85 e0       	ldi	r24, 0x05	; 5
     5f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     5f4:	08 95       	ret

000005f6 <init_TWI_Timer2>:
     5f6:	e1 eb       	ldi	r30, 0xB1	; 177
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	87 60       	ori	r24, 0x07	; 7
     5fe:	80 83       	st	Z, r24
     600:	e0 e7       	ldi	r30, 0x70	; 112
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	81 60       	ori	r24, 0x01	; 1
     608:	80 83       	st	Z, r24
     60a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     60e:	08 95       	ret

00000610 <init_PWM_Timer4>:
     610:	83 e8       	ldi	r24, 0x83	; 131
     612:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     616:	84 e1       	ldi	r24, 0x14	; 20
     618:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     622:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     626:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
     62a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     62e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	9f e1       	ldi	r25, 0x1F	; 31
     636:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     63a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     63e:	08 95       	ret

00000640 <init_arduinoData>:
     640:	e4 e2       	ldi	r30, 0x24	; 36
     642:	f4 e0       	ldi	r31, 0x04	; 4
     644:	11 82       	std	Z+1, r1	; 0x01
     646:	10 82       	st	Z, r1
     648:	13 82       	std	Z+3, r1	; 0x03
     64a:	12 82       	std	Z+2, r1	; 0x02
     64c:	08 95       	ret

0000064e <init_rp6Data>:
     64e:	e2 e4       	ldi	r30, 0x42	; 66
     650:	f4 e0       	ldi	r31, 0x04	; 4
     652:	11 82       	std	Z+1, r1	; 0x01
     654:	10 82       	st	Z, r1
     656:	12 82       	std	Z+2, r1	; 0x02
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	84 e2       	ldi	r24, 0x24	; 36
     65c:	93 e1       	ldi	r25, 0x13	; 19
     65e:	95 83       	std	Z+5, r25	; 0x05
     660:	84 83       	std	Z+4, r24	; 0x04
     662:	88 e2       	ldi	r24, 0x28	; 40
     664:	93 e2       	ldi	r25, 0x23	; 35
     666:	97 83       	std	Z+7, r25	; 0x07
     668:	86 83       	std	Z+6, r24	; 0x06
     66a:	88 e8       	ldi	r24, 0x88	; 136
     66c:	93 e1       	ldi	r25, 0x13	; 19
     66e:	91 87       	std	Z+9, r25	; 0x09
     670:	80 87       	std	Z+8, r24	; 0x08
     672:	88 ec       	ldi	r24, 0xC8	; 200
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	82 87       	std	Z+10, r24	; 0x0a
     67c:	93 87       	std	Z+11, r25	; 0x0b
     67e:	a4 87       	std	Z+12, r26	; 0x0c
     680:	b5 87       	std	Z+13, r27	; 0x0d
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	86 87       	std	Z+14, r24	; 0x0e
     686:	08 95       	ret

00000688 <__vector_42>:
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <rp6Data+0x2>
     69a:	8f 3f       	cpi	r24, 0xFF	; 255
     69c:	d9 f4       	brne	.+54     	; 0x6d4 <__vector_42+0x4c>
     69e:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <rp6Data>
     6a2:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <rp6Data+0x1>
     6a6:	89 2b       	or	r24, r25
     6a8:	a9 f0       	breq	.+42     	; 0x6d4 <__vector_42+0x4c>
     6aa:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     6ae:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     6b2:	89 2b       	or	r24, r25
     6b4:	59 f4       	brne	.+22     	; 0x6cc <__vector_42+0x44>
     6b6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     6ba:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     6be:	96 95       	lsr	r25
     6c0:	87 95       	ror	r24
     6c2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     6c6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <__vector_42+0x4c>
     6cc:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     6d0:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     6d4:	9f 91       	pop	r25
     6d6:	8f 91       	pop	r24
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <arduinoDataInterpreter>:
     6e2:	a4 e2       	ldi	r26, 0x24	; 36
     6e4:	b4 e0       	ldi	r27, 0x04	; 4
     6e6:	e8 e0       	ldi	r30, 0x08	; 8
     6e8:	f4 e0       	ldi	r31, 0x04	; 4
     6ea:	81 81       	ldd	r24, Z+1	; 0x01
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	98 2f       	mov	r25, r24
     6f0:	88 27       	eor	r24, r24
     6f2:	22 81       	ldd	r18, Z+2	; 0x02
     6f4:	82 0f       	add	r24, r18
     6f6:	91 1d       	adc	r25, r1
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	9c 93       	st	X, r25
     6fc:	8e 93       	st	-X, r24
     6fe:	83 81       	ldd	r24, Z+3	; 0x03
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	98 2f       	mov	r25, r24
     704:	88 27       	eor	r24, r24
     706:	24 81       	ldd	r18, Z+4	; 0x04
     708:	82 0f       	add	r24, r18
     70a:	91 1d       	adc	r25, r1
     70c:	13 96       	adiw	r26, 0x03	; 3
     70e:	9c 93       	st	X, r25
     710:	8e 93       	st	-X, r24
     712:	12 97       	sbiw	r26, 0x02	; 2
     714:	85 81       	ldd	r24, Z+5	; 0x05
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	98 2f       	mov	r25, r24
     71a:	88 27       	eor	r24, r24
     71c:	26 81       	ldd	r18, Z+6	; 0x06
     71e:	82 0f       	add	r24, r18
     720:	91 1d       	adc	r25, r1
     722:	15 96       	adiw	r26, 0x05	; 5
     724:	9c 93       	st	X, r25
     726:	8e 93       	st	-X, r24
     728:	14 97       	sbiw	r26, 0x04	; 4
     72a:	87 81       	ldd	r24, Z+7	; 0x07
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	98 2f       	mov	r25, r24
     730:	88 27       	eor	r24, r24
     732:	20 85       	ldd	r18, Z+8	; 0x08
     734:	82 0f       	add	r24, r18
     736:	91 1d       	adc	r25, r1
     738:	17 96       	adiw	r26, 0x07	; 7
     73a:	9c 93       	st	X, r25
     73c:	8e 93       	st	-X, r24
     73e:	16 97       	sbiw	r26, 0x06	; 6
     740:	81 85       	ldd	r24, Z+9	; 0x09
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	98 2f       	mov	r25, r24
     746:	88 27       	eor	r24, r24
     748:	22 85       	ldd	r18, Z+10	; 0x0a
     74a:	82 0f       	add	r24, r18
     74c:	91 1d       	adc	r25, r1
     74e:	19 96       	adiw	r26, 0x09	; 9
     750:	9c 93       	st	X, r25
     752:	8e 93       	st	-X, r24
     754:	18 97       	sbiw	r26, 0x08	; 8
     756:	08 95       	ret

00000758 <I2C_receiveInterpreter>:
     758:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <receiveDataTWI>
     75c:	81 30       	cpi	r24, 0x01	; 1
     75e:	09 f4       	brne	.+2      	; 0x762 <I2C_receiveInterpreter+0xa>
     760:	c0 cf       	rjmp	.-128    	; 0x6e2 <arduinoDataInterpreter>
     762:	08 95       	ret

00000764 <clearSendData>:
     764:	ee e2       	ldi	r30, 0x2E	; 46
     766:	f4 e0       	ldi	r31, 0x04	; 4
     768:	82 e4       	ldi	r24, 0x42	; 66
     76a:	94 e0       	ldi	r25, 0x04	; 4
     76c:	11 92       	st	Z+, r1
     76e:	e8 17       	cp	r30, r24
     770:	f9 07       	cpc	r31, r25
     772:	e1 f7       	brne	.-8      	; 0x76c <clearSendData+0x8>
     774:	08 95       	ret

00000776 <clearReceiveData>:
     776:	e8 e0       	ldi	r30, 0x08	; 8
     778:	f4 e0       	ldi	r31, 0x04	; 4
     77a:	8c e1       	ldi	r24, 0x1C	; 28
     77c:	94 e0       	ldi	r25, 0x04	; 4
     77e:	11 92       	st	Z+, r1
     780:	e8 17       	cp	r30, r24
     782:	f9 07       	cpc	r31, r25
     784:	e1 f7       	brne	.-8      	; 0x77e <clearReceiveData+0x8>
     786:	08 95       	ret

00000788 <__vector_39>:
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	0b b6       	in	r0, 0x3b	; 59
     794:	0f 92       	push	r0
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	2f 93       	push	r18
     7a8:	3f 93       	push	r19
     7aa:	4f 93       	push	r20
     7ac:	5f 93       	push	r21
     7ae:	6f 93       	push	r22
     7b0:	7f 93       	push	r23
     7b2:	8f 93       	push	r24
     7b4:	9f 93       	push	r25
     7b6:	af 93       	push	r26
     7b8:	bf 93       	push	r27
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ef 93       	push	r30
     7c0:	ff 93       	push	r31
     7c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     7c6:	80 35       	cpi	r24, 0x50	; 80
     7c8:	c1 f0       	breq	.+48     	; 0x7fa <__vector_39+0x72>
     7ca:	88 35       	cpi	r24, 0x58	; 88
     7cc:	a9 f1       	breq	.+106    	; 0x838 <__vector_39+0xb0>
     7ce:	80 34       	cpi	r24, 0x40	; 64
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_39+0x4c>
     7d2:	89 c0       	rjmp	.+274    	; 0x8e6 <__vector_39+0x15e>
     7d4:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <compassFlag>
     7d8:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <compassFlag+0x1>
     7dc:	89 2b       	or	r24, r25
     7de:	21 f0       	breq	.+8      	; 0x7e8 <__vector_39+0x60>
     7e0:	85 e8       	ldi	r24, 0x85	; 133
     7e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     7e6:	7f c0       	rjmp	.+254    	; 0x8e6 <__vector_39+0x15e>
     7e8:	c6 df       	rcall	.-116    	; 0x776 <clearReceiveData>
     7ea:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <bytecounter.2037+0x1>
     7ee:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <bytecounter.2037>
     7f2:	85 ec       	ldi	r24, 0xC5	; 197
     7f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     7f8:	76 c0       	rjmp	.+236    	; 0x8e6 <__vector_39+0x15e>
     7fa:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <bytecounter.2037>
     7fe:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <bytecounter.2037+0x1>
     802:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     806:	fc 01       	movw	r30, r24
     808:	e8 5f       	subi	r30, 0xF8	; 248
     80a:	fb 4f       	sbci	r31, 0xFB	; 251
     80c:	20 83       	st	Z, r18
     80e:	82 31       	cpi	r24, 0x12	; 18
     810:	91 05       	cpc	r25, r1
     812:	4c f4       	brge	.+18     	; 0x826 <__vector_39+0x9e>
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <bytecounter.2037+0x1>
     81a:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <bytecounter.2037>
     81e:	85 ec       	ldi	r24, 0xC5	; 197
     820:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     824:	60 c0       	rjmp	.+192    	; 0x8e6 <__vector_39+0x15e>
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <bytecounter.2037+0x1>
     82c:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <bytecounter.2037>
     830:	85 e8       	ldi	r24, 0x85	; 133
     832:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     836:	57 c0       	rjmp	.+174    	; 0x8e6 <__vector_39+0x15e>
     838:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <compassFlag>
     83c:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <compassFlag+0x1>
     840:	89 2b       	or	r24, r25
     842:	71 f4       	brne	.+28     	; 0x860 <__vector_39+0xd8>
     844:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     848:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <bytecounter.2037>
     84c:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <bytecounter.2037+0x1>
     850:	e8 5f       	subi	r30, 0xF8	; 248
     852:	fb 4f       	sbci	r31, 0xFB	; 251
     854:	80 83       	st	Z, r24
     856:	85 e9       	ldi	r24, 0x95	; 149
     858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     85c:	7d df       	rcall	.-262    	; 0x758 <I2C_receiveInterpreter>
     85e:	43 c0       	rjmp	.+134    	; 0x8e6 <__vector_39+0x15e>
     860:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     864:	c2 e4       	ldi	r28, 0x42	; 66
     866:	d4 e0       	ldi	r29, 0x04	; 4
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	03 e0       	ldi	r16, 0x03	; 3
     878:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__ashldi3>
     87c:	a2 2e       	mov	r10, r18
     87e:	b3 2e       	mov	r11, r19
     880:	c4 2e       	mov	r12, r20
     882:	d5 2e       	mov	r13, r21
     884:	e6 2e       	mov	r14, r22
     886:	f7 2e       	mov	r15, r23
     888:	e8 2f       	mov	r30, r24
     88a:	19 2f       	mov	r17, r25
     88c:	02 e0       	ldi	r16, 0x02	; 2
     88e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__ashldi3>
     892:	0e 2f       	mov	r16, r30
     894:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__subdi3>
     898:	a2 2e       	mov	r10, r18
     89a:	b3 2e       	mov	r11, r19
     89c:	c4 2e       	mov	r12, r20
     89e:	d5 2e       	mov	r13, r21
     8a0:	e6 2e       	mov	r14, r22
     8a2:	f7 2e       	mov	r15, r23
     8a4:	e8 2f       	mov	r30, r24
     8a6:	19 2f       	mov	r17, r25
     8a8:	04 e0       	ldi	r16, 0x04	; 4
     8aa:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__ashldi3>
     8ae:	0e 2f       	mov	r16, r30
     8b0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__subdi3>
     8b4:	aa 24       	eor	r10, r10
     8b6:	aa 94       	dec	r10
     8b8:	b1 2c       	mov	r11, r1
     8ba:	c1 2c       	mov	r12, r1
     8bc:	d1 2c       	mov	r13, r1
     8be:	e1 2c       	mov	r14, r1
     8c0:	f1 2c       	mov	r15, r1
     8c2:	00 e0       	ldi	r16, 0x00	; 0
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	bd d7       	rcall	.+3962   	; 0x1842 <__udivdi3>
     8c8:	2f 87       	std	Y+15, r18	; 0x0f
     8ca:	38 8b       	std	Y+16, r19	; 0x10
     8cc:	49 8b       	std	Y+17, r20	; 0x11
     8ce:	5a 8b       	std	Y+18, r21	; 0x12
     8d0:	6b 8b       	std	Y+19, r22	; 0x13
     8d2:	7c 8b       	std	Y+20, r23	; 0x14
     8d4:	8d 8b       	std	Y+21, r24	; 0x15
     8d6:	9e 8b       	std	Y+22, r25	; 0x16
     8d8:	85 e9       	ldi	r24, 0x95	; 149
     8da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     8de:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <compassFlag+0x1>
     8e2:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <compassFlag>
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <TWIwaitUntilReady>:


void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
     920:	ec eb       	ldi	r30, 0xBC	; 188
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	88 23       	and	r24, r24
     928:	ec f7       	brge	.-6      	; 0x924 <TWIwaitUntilReady+0x4>
}
     92a:	08 95       	ret

0000092c <checkCode>:


void checkCode(uint8_t code){
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	cf 5f       	subi	r28, 0xFF	; 255
     936:	d1 09       	sbc	r29, r1
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     942:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
	while (!(TWCR & (1 << TWINT)));
}


void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
     946:	98 7f       	andi	r25, 0xF8	; 248
     948:	89 17       	cp	r24, r25
     94a:	89 f0       	breq	.+34     	; 0x96e <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     94c:	8a e0       	ldi	r24, 0x0A	; 10
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	33 d3       	rcall	.+1638   	; 0xfb8 <writeString>
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
     952:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     956:	88 7f       	andi	r24, 0xF8	; 248
     958:	40 e1       	ldi	r20, 0x10	; 16
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__itoa_ncheck>

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
     966:	28 d3       	rcall	.+1616   	; 0xfb8 <writeString>
		writeString("\n\n\r");
     968:	85 e3       	ldi	r24, 0x35	; 53
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	25 d3       	rcall	.+1610   	; 0xfb8 <writeString>
	}
}
     96e:	c1 50       	subi	r28, 0x01	; 1
     970:	df 4f       	sbci	r29, 0xFF	; 255
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	c8 2f       	mov	r28, r24
     996:	8b 01       	movw	r16, r22
	
	TWISendStart();
     998:	0f 2e       	mov	r0, r31
     99a:	fc eb       	ldi	r31, 0xBC	; 188
     99c:	cf 2e       	mov	r12, r31
     99e:	d1 2c       	mov	r13, r1
     9a0:	f0 2d       	mov	r31, r0
     9a2:	85 ea       	ldi	r24, 0xA5	; 165
     9a4:	f6 01       	movw	r30, r12
     9a6:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     9a8:	bb df       	rcall	.-138    	; 0x920 <TWIwaitUntilReady>
	checkCode(0x08);
     9aa:	88 e0       	ldi	r24, 0x08	; 8
     9ac:	bf df       	rcall	.-130    	; 0x92c <checkCode>
	
	TWIWrite((address << 1));
     9ae:	cc 0f       	add	r28, r28
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     9b0:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     9b4:	85 e8       	ldi	r24, 0x85	; 133
     9b6:	f6 01       	movw	r30, r12
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
     9b8:	80 83       	st	Z, r24
	checkCode(0x18);
     9ba:	b2 df       	rcall	.-156    	; 0x920 <TWIwaitUntilReady>
     9bc:	88 e1       	ldi	r24, 0x18	; 24
     9be:	b6 df       	rcall	.-148    	; 0x92c <checkCode>
     9c0:	e8 01       	movw	r28, r16
     9c2:	0c 5e       	subi	r16, 0xEC	; 236
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fb eb       	ldi	r31, 0xBB	; 187
     9ca:	af 2e       	mov	r10, r31
     9cc:	b1 2c       	mov	r11, r1
     9ce:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f5 e8       	ldi	r31, 0x85	; 133
     9d4:	ff 2e       	mov	r15, r31
     9d6:	f0 2d       	mov	r31, r0
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
     9d8:	89 91       	ld	r24, Y+
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     9da:	f5 01       	movw	r30, r10
	TWISendTransmit();
     9dc:	80 83       	st	Z, r24
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
     9de:	f6 01       	movw	r30, r12
     9e0:	f0 82       	st	Z, r15
		checkCode(0x28);
     9e2:	9e df       	rcall	.-196    	; 0x920 <TWIwaitUntilReady>
     9e4:	88 e2       	ldi	r24, 0x28	; 40
     9e6:	a2 df       	rcall	.-188    	; 0x92c <checkCode>
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
     9e8:	c0 17       	cp	r28, r16
     9ea:	d1 07       	cpc	r29, r17
     9ec:	a9 f7       	brne	.-22     	; 0x9d8 <writeToSlave+0x56>
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
		checkCode(0x28);
	}
	
	TWISendStop();
     9ee:	85 e9       	ldi	r24, 0x95	; 149
     9f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	08 95       	ret

00000a08 <rp6DataConstructor>:
	arduinoData.distanceDrivenR = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
	arduinoData.totalDistance = (receiveDataTWI[9] << 8) + receiveDataTWI[10];
}


void rp6DataConstructor(){
     a08:	0f 93       	push	r16
     a0a:	cf 93       	push	r28
	clearSendData();
     a0c:	ab de       	rcall	.-682    	; 0x764 <clearSendData>
	
	sendDataTWI[0] = 1;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     a14:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <rp6Data>
     a18:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <rp6Data+0x1>
     a1c:	85 36       	cpi	r24, 0x65	; 101
     a1e:	91 05       	cpc	r25, r1
     a20:	30 f0       	brcs	.+12     	; 0xa2e <rp6DataConstructor+0x26>
     a22:	84 e6       	ldi	r24, 0x64	; 100
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <rp6Data+0x1>
     a2a:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     a2e:	ae e2       	ldi	r26, 0x2E	; 46
     a30:	b4 e0       	ldi	r27, 0x04	; 4
     a32:	e2 e4       	ldi	r30, 0x42	; 66
     a34:	f4 e0       	ldi	r31, 0x04	; 4
     a36:	80 81       	ld	r24, Z
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	8c 93       	st	X, r24
     a3c:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     a3e:	82 81       	ldd	r24, Z+2	; 0x02
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	12 96       	adiw	r26, 0x02	; 2
     a44:	8c 93       	st	X, r24
     a46:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     a48:	83 81       	ldd	r24, Z+3	; 0x03
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	13 96       	adiw	r26, 0x03	; 3
     a4e:	8c 93       	st	X, r24
     a50:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     a52:	84 81       	ldd	r24, Z+4	; 0x04
     a54:	95 81       	ldd	r25, Z+5	; 0x05
     a56:	14 96       	adiw	r26, 0x04	; 4
     a58:	9c 93       	st	X, r25
     a5a:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     a5c:	15 96       	adiw	r26, 0x05	; 5
     a5e:	8c 93       	st	X, r24
     a60:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	97 81       	ldd	r25, Z+7	; 0x07
     a66:	16 96       	adiw	r26, 0x06	; 6
     a68:	9c 93       	st	X, r25
     a6a:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     a6c:	17 96       	adiw	r26, 0x07	; 7
     a6e:	8c 93       	st	X, r24
     a70:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     a72:	80 85       	ldd	r24, Z+8	; 0x08
     a74:	91 85       	ldd	r25, Z+9	; 0x09
     a76:	18 96       	adiw	r26, 0x08	; 8
     a78:	9c 93       	st	X, r25
     a7a:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     a7c:	19 96       	adiw	r26, 0x09	; 9
     a7e:	8c 93       	st	X, r24
     a80:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     a82:	82 85       	ldd	r24, Z+10	; 0x0a
     a84:	93 85       	ldd	r25, Z+11	; 0x0b
     a86:	1a 96       	adiw	r26, 0x0a	; 10
     a88:	9c 93       	st	X, r25
     a8a:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     a8c:	1b 96       	adiw	r26, 0x0b	; 11
     a8e:	8c 93       	st	X, r24
     a90:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     a92:	86 85       	ldd	r24, Z+14	; 0x0e
     a94:	1c 96       	adiw	r26, 0x0c	; 12
     a96:	8c 93       	st	X, r24
     a98:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     a9a:	c7 85       	ldd	r28, Z+15	; 0x0f
     a9c:	30 89       	ldd	r19, Z+16	; 0x10
     a9e:	41 89       	ldd	r20, Z+17	; 0x11
     aa0:	52 89       	ldd	r21, Z+18	; 0x12
     aa2:	63 89       	ldd	r22, Z+19	; 0x13
     aa4:	74 89       	ldd	r23, Z+20	; 0x14
     aa6:	2c 2f       	mov	r18, r28
     aa8:	85 89       	ldd	r24, Z+21	; 0x15
     aaa:	96 89       	ldd	r25, Z+22	; 0x16
     aac:	08 e0       	ldi	r16, 0x08	; 8
     aae:	40 d7       	rcall	.+3712   	; 0x1930 <__lshrdi3>
     ab0:	1d 96       	adiw	r26, 0x0d	; 13
     ab2:	2c 93       	st	X, r18
     ab4:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     ab6:	1e 96       	adiw	r26, 0x0e	; 14
     ab8:	cc 93       	st	X, r28
     aba:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     abc:	1f 96       	adiw	r26, 0x0f	; 15
     abe:	1c 92       	st	X, r1
     ac0:	1f 97       	sbiw	r26, 0x0f	; 15
     ac2:	50 96       	adiw	r26, 0x10	; 16
     ac4:	1c 92       	st	X, r1
     ac6:	50 97       	sbiw	r26, 0x10	; 16
     ac8:	51 96       	adiw	r26, 0x11	; 17
     aca:	1c 92       	st	X, r1
     acc:	51 97       	sbiw	r26, 0x11	; 17
     ace:	52 96       	adiw	r26, 0x12	; 18
     ad0:	1c 92       	st	X, r1
     ad2:	52 97       	sbiw	r26, 0x12	; 18
     ad4:	53 96       	adiw	r26, 0x13	; 19
     ad6:	1c 92       	st	X, r1
     ad8:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     ada:	bd 01       	movw	r22, r26
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	51 df       	rcall	.-350    	; 0x982 <writeToSlave>
}
     ae0:	cf 91       	pop	r28
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <readFromCompass>:
	TWISendStop();
	
}


void readFromCompass(){
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
	compassFlag = 1;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <compassFlag+0x1>
     afa:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <compassFlag>
	TWISendStart();
     afe:	cc eb       	ldi	r28, 0xBC	; 188
     b00:	d0 e0       	ldi	r29, 0x00	; 0
     b02:	05 ea       	ldi	r16, 0xA5	; 165
     b04:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     b06:	0c df       	rcall	.-488    	; 0x920 <TWIwaitUntilReady>
	checkCode(0x08);
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	10 df       	rcall	.-480    	; 0x92c <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b0c:	0f 2e       	mov	r0, r31
     b0e:	fb eb       	ldi	r31, 0xBB	; 187
     b10:	ef 2e       	mov	r14, r31
     b12:	f1 2c       	mov	r15, r1
     b14:	f0 2d       	mov	r31, r0
     b16:	80 ec       	ldi	r24, 0xC0	; 192
     b18:	f7 01       	movw	r30, r14
     b1a:	80 83       	st	Z, r24
	TWISendTransmit();
     b1c:	15 e8       	ldi	r17, 0x85	; 133
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite(0xC0);
	TWIwaitUntilReady();
     b1e:	18 83       	st	Y, r17
	checkCode(0x18);
     b20:	ff de       	rcall	.-514    	; 0x920 <TWIwaitUntilReady>
     b22:	88 e1       	ldi	r24, 0x18	; 24
     b24:	03 df       	rcall	.-506    	; 0x92c <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	f7 01       	movw	r30, r14
	TWISendTransmit();
     b2a:	80 83       	st	Z, r24
	TWIWrite(0xC0);
	TWIwaitUntilReady();
	checkCode(0x18);
	
	TWIWrite(1);
	TWIwaitUntilReady();
     b2c:	18 83       	st	Y, r17
	checkCode(0x28);
     b2e:	f8 de       	rcall	.-528    	; 0x920 <TWIwaitUntilReady>
     b30:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     b32:	fc de       	rcall	.-520    	; 0x92c <checkCode>
	TWIwaitUntilReady();
     b34:	08 83       	st	Y, r16
	checkCode(0x10);
     b36:	f4 de       	rcall	.-536    	; 0x920 <TWIwaitUntilReady>
     b38:	80 e1       	ldi	r24, 0x10	; 16
     b3a:	f8 de       	rcall	.-528    	; 0x92c <checkCode>
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b3c:	81 ec       	ldi	r24, 0xC1	; 193
     b3e:	f7 01       	movw	r30, r14
     b40:	80 83       	st	Z, r24
	TWISendTransmit();
     b42:	18 83       	st	Y, r17
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x10);
	
	TWIWrite(0xC1);
	TWIwaitUntilReady();
     b44:	ed de       	rcall	.-550    	; 0x920 <TWIwaitUntilReady>
     b46:	df 91       	pop	r29
}
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <readFromSlave>:
     b54:	0f 93       	push	r16


void readFromSlave(uint8_t address){
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	c8 2f       	mov	r28, r24
	
	TWISendStart();
     b5c:	0c eb       	ldi	r16, 0xBC	; 188
     b5e:	10 e0       	ldi	r17, 0x00	; 0
     b60:	85 ea       	ldi	r24, 0xA5	; 165
     b62:	f8 01       	movw	r30, r16
     b64:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     b66:	dc de       	rcall	.-584    	; 0x920 <TWIwaitUntilReady>
	checkCode(0x08);
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	e0 de       	rcall	.-576    	; 0x92c <checkCode>
	
	TWIWrite( (address << 1) + 1 );
     b6c:	cc 0f       	add	r28, r28
     b6e:	cf 5f       	subi	r28, 0xFF	; 255
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
     b70:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     b74:	85 e8       	ldi	r24, 0x85	; 133
     b76:	f8 01       	movw	r30, r16
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite( (address << 1) + 1 );
	TWIwaitUntilReady();
     b78:	80 83       	st	Z, r24
     b7a:	d2 de       	rcall	.-604    	; 0x920 <TWIwaitUntilReady>
	
}
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	08 95       	ret

00000b84 <__vector_15>:
		break;
	}
}


ISR(TIMER2_OVF_vect){
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	0b b6       	in	r0, 0x3b	; 59
     b90:	0f 92       	push	r0
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 4){
     baa:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <counter.2048>
     bae:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <counter.2048+0x1>
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	91 05       	cpc	r25, r1
     bb6:	11 f4       	brne	.+4      	; 0xbbc <__vector_15+0x38>
		rp6DataConstructor();
     bb8:	27 df       	rcall	.-434    	; 0xa08 <rp6DataConstructor>
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__vector_15+0x52>
	}else if(counter == 8){
     bbc:	88 30       	cpi	r24, 0x08	; 8
     bbe:	91 05       	cpc	r25, r1
		readFromCompass();
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__vector_15+0x42>
     bc2:	91 df       	rcall	.-222    	; 0xae6 <readFromCompass>
     bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <__vector_15+0x52>
	}else if(counter >= 12){
     bc6:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromSlave(RP6_ADDRESS);
     bc8:	34 f0       	brlt	.+12     	; 0xbd6 <__vector_15+0x52>
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	c3 df       	rcall	.-122    	; 0xb54 <readFromSlave>
		counter = 0;
     bce:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <counter.2048+0x1>
     bd2:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <counter.2048>
	}
	
	counter++;
     bd6:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <counter.2048>
     bda:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <counter.2048+0x1>
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <counter.2048+0x1>
     be4:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <counter.2048>
}
     be8:	ff 91       	pop	r31
     bea:	ef 91       	pop	r30
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
     bf2:	8f 91       	pop	r24
     bf4:	7f 91       	pop	r23
     bf6:	6f 91       	pop	r22
     bf8:	5f 91       	pop	r21
     bfa:	4f 91       	pop	r20
     bfc:	3f 91       	pop	r19
     bfe:	2f 91       	pop	r18
     c00:	0f 90       	pop	r0
     c02:	0b be       	out	0x3b, r0	; 59
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <turnSignal>:
	TWIwaitUntilReady();
	
}


void turnSignal(){
     c0e:	4f 92       	push	r4
     c10:	5f 92       	push	r5
     c12:	6f 92       	push	r6
     c14:	7f 92       	push	r7
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
     c2a:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     c2c:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     c2e:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <rp6Data+0x3>
     c32:	8f 3f       	cpi	r24, 0xFF	; 255
     c34:	a9 f5       	brne	.+106    	; 0xca0 <turnSignal+0x92>
		if(turnSignalStart < micros()){
     c36:	40 90 f2 02 	lds	r4, 0x02F2	; 0x8002f2 <__data_end>
     c3a:	50 90 f3 02 	lds	r5, 0x02F3	; 0x8002f3 <__data_end+0x1>
     c3e:	60 90 f4 02 	lds	r6, 0x02F4	; 0x8002f4 <__data_end+0x2>
     c42:	70 90 f5 02 	lds	r7, 0x02F5	; 0x8002f5 <__data_end+0x3>
     c46:	6c dc       	rcall	.-1832   	; 0x520 <micros>
     c48:	f2 2f       	mov	r31, r18
     c4a:	e3 2f       	mov	r30, r19
     c4c:	c4 2e       	mov	r12, r20
     c4e:	d5 2e       	mov	r13, r21
     c50:	e6 2e       	mov	r14, r22
     c52:	f7 2e       	mov	r15, r23
     c54:	08 2f       	mov	r16, r24
     c56:	19 2f       	mov	r17, r25
     c58:	24 2d       	mov	r18, r4
     c5a:	35 2d       	mov	r19, r5
     c5c:	46 2d       	mov	r20, r6
     c5e:	57 2d       	mov	r21, r7
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	af 2e       	mov	r10, r31
     c6a:	be 2e       	mov	r11, r30
     c6c:	9b d6       	rcall	.+3382   	; 0x19a4 <__cmpdi2>
     c6e:	c0 f4       	brcc	.+48     	; 0xca0 <turnSignal+0x92>
			PORTC ^= (1 << PINC1);	
     c70:	98 b1       	in	r25, 0x08	; 8
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
     c76:	88 b9       	out	0x08, r24	; 8
     c78:	53 dc       	rcall	.-1882   	; 0x520 <micros>
     c7a:	82 2e       	mov	r8, r18
     c7c:	93 2e       	mov	r9, r19
     c7e:	a4 2e       	mov	r10, r20
     c80:	b5 2e       	mov	r11, r21
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	88 0e       	add	r8, r24
     c86:	81 ea       	ldi	r24, 0xA1	; 161
     c88:	98 1e       	adc	r9, r24
     c8a:	87 e0       	ldi	r24, 0x07	; 7
     c8c:	a8 1e       	adc	r10, r24
     c8e:	b1 1c       	adc	r11, r1
     c90:	80 92 f2 02 	sts	0x02F2, r8	; 0x8002f2 <__data_end>
     c94:	90 92 f3 02 	sts	0x02F3, r9	; 0x8002f3 <__data_end+0x1>
     c98:	a0 92 f4 02 	sts	0x02F4, r10	; 0x8002f4 <__data_end+0x2>
     c9c:	b0 92 f5 02 	sts	0x02F5, r11	; 0x8002f5 <__data_end+0x3>
		}
	}
	if(rp6Data.turnDirection == 1){
     ca0:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <rp6Data+0x3>
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	a1 f5       	brne	.+104    	; 0xd10 <turnSignal+0x102>
		if(turnSignalStart < micros()){
     ca8:	40 90 f2 02 	lds	r4, 0x02F2	; 0x8002f2 <__data_end>
     cac:	50 90 f3 02 	lds	r5, 0x02F3	; 0x8002f3 <__data_end+0x1>
     cb0:	60 90 f4 02 	lds	r6, 0x02F4	; 0x8002f4 <__data_end+0x2>
     cb4:	70 90 f5 02 	lds	r7, 0x02F5	; 0x8002f5 <__data_end+0x3>
     cb8:	33 dc       	rcall	.-1946   	; 0x520 <micros>
     cba:	f2 2f       	mov	r31, r18
     cbc:	e3 2f       	mov	r30, r19
     cbe:	c4 2e       	mov	r12, r20
     cc0:	d5 2e       	mov	r13, r21
     cc2:	e6 2e       	mov	r14, r22
     cc4:	f7 2e       	mov	r15, r23
     cc6:	08 2f       	mov	r16, r24
     cc8:	19 2f       	mov	r17, r25
     cca:	24 2d       	mov	r18, r4
     ccc:	35 2d       	mov	r19, r5
     cce:	46 2d       	mov	r20, r6
     cd0:	57 2d       	mov	r21, r7
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	af 2e       	mov	r10, r31
     cdc:	be 2e       	mov	r11, r30
     cde:	62 d6       	rcall	.+3268   	; 0x19a4 <__cmpdi2>
     ce0:	b8 f4       	brcc	.+46     	; 0xd10 <turnSignal+0x102>
			PORTD ^= (1 << PIND7);
     ce2:	8b b1       	in	r24, 0x0b	; 11
     ce4:	80 58       	subi	r24, 0x80	; 128
     ce6:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     ce8:	1b dc       	rcall	.-1994   	; 0x520 <micros>
     cea:	82 2e       	mov	r8, r18
     cec:	93 2e       	mov	r9, r19
     cee:	a4 2e       	mov	r10, r20
     cf0:	b5 2e       	mov	r11, r21
     cf2:	80 e2       	ldi	r24, 0x20	; 32
     cf4:	88 0e       	add	r8, r24
     cf6:	81 ea       	ldi	r24, 0xA1	; 161
     cf8:	98 1e       	adc	r9, r24
     cfa:	87 e0       	ldi	r24, 0x07	; 7
     cfc:	a8 1e       	adc	r10, r24
     cfe:	b1 1c       	adc	r11, r1
     d00:	80 92 f2 02 	sts	0x02F2, r8	; 0x8002f2 <__data_end>
     d04:	90 92 f3 02 	sts	0x02F3, r9	; 0x8002f3 <__data_end+0x1>
     d08:	a0 92 f4 02 	sts	0x02F4, r10	; 0x8002f4 <__data_end+0x2>
     d0c:	b0 92 f5 02 	sts	0x02F5, r11	; 0x8002f5 <__data_end+0x3>
     d10:	1f 91       	pop	r17
		}
	}
}
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	7f 90       	pop	r7
     d26:	6f 90       	pop	r6
     d28:	5f 90       	pop	r5
     d2a:	4f 90       	pop	r4
     d2c:	08 95       	ret

00000d2e <main>:
     d2e:	78 94       	sei


int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
     d30:	99 db       	rcall	.-2254   	; 0x464 <init_micros>
	init_USART();
     d32:	54 da       	rcall	.-2904   	; 0x1dc <init_USART>
	init_TWI();
     d34:	57 dc       	rcall	.-1874   	; 0x5e4 <init_TWI>
	init_TWI_Timer2();
     d36:	5f dc       	rcall	.-1858   	; 0x5f6 <init_TWI_Timer2>
	init_PWM_Timer4();
     d38:	6b dc       	rcall	.-1834   	; 0x610 <init_PWM_Timer4>
	init_rp6Data();
     d3a:	89 dc       	rcall	.-1774   	; 0x64e <init_rp6Data>
     d3c:	81 dc       	rcall	.-1790   	; 0x640 <init_arduinoData>
	init_arduinoData();
     d3e:	6c d1       	rcall	.+728    	; 0x1018 <initTimer>
     d40:	4d da       	rcall	.-2918   	; 0x1dc <init_USART>
	initTimer();
     d42:	c2 e4       	ldi	r28, 0x42	; 66
     d44:	d4 e0       	ldi	r29, 0x04	; 4
	init_USART();
     d46:	0f 2e       	mov	r0, r31
		if (ultrasonicSensorTimer < micros()) {
			writeString("\f\r");
			writeString("Distance to object: ");
			writeInt(ultrasonicSensor());
			writeString("mm\n\rCompass Angle: ");
			writeInt(rp6Data.compassAngle);
     d48:	f8 e2       	ldi	r31, 0x28	; 40
     d4a:	2f 2e       	mov	r2, r31
			}else if(distance > 300 && stopState == 2){
				stopState = 0;
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
				rp6Data.driveSpeed = 40;
     d4c:	31 2c       	mov	r3, r1
     d4e:	f0 2d       	mov	r31, r0
     d50:	5e df       	rcall	.-324    	; 0xc0e <turnSignal>
     d52:	40 90 04 04 	lds	r4, 0x0404	; 0x800404 <ultrasonicSensorTimer>
	initTimer();
	init_USART();
	//-----------------------
	
	while (1){
		turnSignal();
     d56:	50 90 05 04 	lds	r5, 0x0405	; 0x800405 <ultrasonicSensorTimer+0x1>
		if (ultrasonicSensorTimer < micros()) {
     d5a:	60 90 06 04 	lds	r6, 0x0406	; 0x800406 <ultrasonicSensorTimer+0x2>
     d5e:	70 90 07 04 	lds	r7, 0x0407	; 0x800407 <ultrasonicSensorTimer+0x3>
     d62:	de db       	rcall	.-2116   	; 0x520 <micros>
     d64:	f2 2f       	mov	r31, r18
     d66:	e3 2f       	mov	r30, r19
     d68:	c4 2e       	mov	r12, r20
     d6a:	d5 2e       	mov	r13, r21
     d6c:	e6 2e       	mov	r14, r22
     d6e:	f7 2e       	mov	r15, r23
     d70:	08 2f       	mov	r16, r24
     d72:	19 2f       	mov	r17, r25
     d74:	24 2d       	mov	r18, r4
     d76:	35 2d       	mov	r19, r5
     d78:	46 2d       	mov	r20, r6
     d7a:	57 2d       	mov	r21, r7
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	af 2e       	mov	r10, r31
     d86:	be 2e       	mov	r11, r30
     d88:	0d d6       	rcall	.+3098   	; 0x19a4 <__cmpdi2>
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <main+0x60>
     d8c:	62 c0       	rjmp	.+196    	; 0xe52 <main+0x124>
			writeString("\f\r");
     d8e:	89 e3       	ldi	r24, 0x39	; 57
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	12 d1       	rcall	.+548    	; 0xfb8 <writeString>
			writeString("Distance to object: ");
     d94:	8c e3       	ldi	r24, 0x3C	; 60
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	0f d1       	rcall	.+542    	; 0xfb8 <writeString>
			writeInt(ultrasonicSensor());
     d9a:	48 d1       	rcall	.+656    	; 0x102c <ultrasonicSensor>
     d9c:	22 d1       	rcall	.+580    	; 0xfe2 <writeInt>
     d9e:	81 e5       	ldi	r24, 0x51	; 81
			writeString("mm\n\rCompass Angle: ");
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0a d1       	rcall	.+532    	; 0xfb8 <writeString>
     da4:	8f 85       	ldd	r24, Y+15	; 0x0f
			writeInt(rp6Data.compassAngle);
     da6:	98 89       	ldd	r25, Y+16	; 0x10
     da8:	1c d1       	rcall	.+568    	; 0xfe2 <writeInt>
     daa:	88 ef       	ldi	r24, 0xF8	; 248
			writeChar(248);
     dac:	fd d0       	rcall	.+506    	; 0xfa8 <writeChar>
     dae:	85 e6       	ldi	r24, 0x65	; 101
     db0:	92 e0       	ldi	r25, 0x02	; 2
			writeString("\n\n\rSpeed: ");
     db2:	02 d1       	rcall	.+516    	; 0xfb8 <writeString>
     db4:	88 81       	ld	r24, Y
     db6:	99 81       	ldd	r25, Y+1	; 0x01
			writeInt(rp6Data.driveSpeed);
     db8:	14 d1       	rcall	.+552    	; 0xfe2 <writeInt>
     dba:	80 e7       	ldi	r24, 0x70	; 112
     dbc:	92 e0       	ldi	r25, 0x02	; 2
			writeString("%\n\n\rDirection: ");
     dbe:	fc d0       	rcall	.+504    	; 0xfb8 <writeString>
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	21 f4       	brne	.+8      	; 0xdce <main+0xa0>
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
     dc6:	80 e8       	ldi	r24, 0x80	; 128
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	f6 d0       	rcall	.+492    	; 0xfb8 <writeString>
     dcc:	0b c0       	rjmp	.+22     	; 0xde4 <main+0xb6>
     dce:	81 11       	cpse	r24, r1
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <main+0xac>
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
     dd2:	8a e8       	ldi	r24, 0x8A	; 138
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	f0 d0       	rcall	.+480    	; 0xfb8 <writeString>
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <main+0xb6>
     dda:	8f 3f       	cpi	r24, 0xFF	; 255
     ddc:	19 f4       	brne	.+6      	; 0xde4 <main+0xb6>
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
     dde:	87 e9       	ldi	r24, 0x97	; 151
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	ea d0       	rcall	.+468    	; 0xfb8 <writeString>
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
			if(rp6Data.turnDirection == -1) writeString("turning left");
     de6:	8f 3f       	cpi	r24, 0xFF	; 255
     de8:	21 f4       	brne	.+8      	; 0xdf2 <main+0xc4>
     dea:	83 ea       	ldi	r24, 0xA3	; 163
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	e4 d0       	rcall	.+456    	; 0xfb8 <writeString>
			else if(rp6Data.turnDirection == 0) writeString("going straight");
     df0:	0b c0       	rjmp	.+22     	; 0xe08 <main+0xda>
     df2:	81 11       	cpse	r24, r1
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <main+0xd0>
     df6:	80 eb       	ldi	r24, 0xB0	; 176
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	de d0       	rcall	.+444    	; 0xfb8 <writeString>
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <main+0xda>
			else if(rp6Data.turnDirection == 1) writeString("turning right");
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	19 f4       	brne	.+6      	; 0xe08 <main+0xda>
     e02:	8f eb       	ldi	r24, 0xBF	; 191
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	d8 d0       	rcall	.+432    	; 0xfb8 <writeString>
     e08:	8d ec       	ldi	r24, 0xCD	; 205
			writeString("\n\rAcceleration rate: ");
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	d5 d0       	rcall	.+426    	; 0xfb8 <writeString>
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	9d 81       	ldd	r25, Y+5	; 0x05
			writeInt(rp6Data.accelerationRate);
     e12:	e7 d0       	rcall	.+462    	; 0xfe2 <writeInt>
     e14:	83 ee       	ldi	r24, 0xE3	; 227
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	cf d0       	rcall	.+414    	; 0xfb8 <writeString>
			writeString("\n\rTurn rate: ");
     e1a:	8e 81       	ldd	r24, Y+6	; 0x06
     e1c:	9f 81       	ldd	r25, Y+7	; 0x07
     e1e:	e1 d0       	rcall	.+450    	; 0xfe2 <writeInt>
     e20:	7f db       	rcall	.-2306   	; 0x520 <micros>
			writeInt(rp6Data.turnRate);
     e22:	82 2e       	mov	r8, r18
     e24:	93 2e       	mov	r9, r19
     e26:	a4 2e       	mov	r10, r20
     e28:	b5 2e       	mov	r11, r21
			
			ultrasonicSensorTimer = micros() + ultrasonicSensorSpeed;
     e2a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ultrasonicSensorSpeed>
     e2e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <ultrasonicSensorSpeed+0x1>
     e32:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <ultrasonicSensorSpeed+0x2>
     e36:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <ultrasonicSensorSpeed+0x3>
     e3a:	88 0e       	add	r8, r24
     e3c:	99 1e       	adc	r9, r25
     e3e:	aa 1e       	adc	r10, r26
     e40:	bb 1e       	adc	r11, r27
     e42:	80 92 04 04 	sts	0x0404, r8	; 0x800404 <ultrasonicSensorTimer>
     e46:	90 92 05 04 	sts	0x0405, r9	; 0x800405 <ultrasonicSensorTimer+0x1>
     e4a:	a0 92 06 04 	sts	0x0406, r10	; 0x800406 <ultrasonicSensorTimer+0x2>
     e4e:	b0 92 07 04 	sts	0x0407, r11	; 0x800407 <ultrasonicSensorTimer+0x3>
     e52:	40 90 00 04 	lds	r4, 0x0400	; 0x800400 <stoptimer>
     e56:	50 90 01 04 	lds	r5, 0x0401	; 0x800401 <stoptimer+0x1>
		}
		
		if(stoptimer < micros()){
     e5a:	60 90 02 04 	lds	r6, 0x0402	; 0x800402 <stoptimer+0x2>
     e5e:	70 90 03 04 	lds	r7, 0x0403	; 0x800403 <stoptimer+0x3>
     e62:	5e db       	rcall	.-2372   	; 0x520 <micros>
     e64:	f2 2f       	mov	r31, r18
     e66:	e3 2f       	mov	r30, r19
     e68:	c4 2e       	mov	r12, r20
     e6a:	d5 2e       	mov	r13, r21
     e6c:	e6 2e       	mov	r14, r22
     e6e:	f7 2e       	mov	r15, r23
     e70:	08 2f       	mov	r16, r24
     e72:	19 2f       	mov	r17, r25
     e74:	24 2d       	mov	r18, r4
     e76:	35 2d       	mov	r19, r5
     e78:	46 2d       	mov	r20, r6
     e7a:	57 2d       	mov	r21, r7
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	af 2e       	mov	r10, r31
     e86:	be 2e       	mov	r11, r30
     e88:	8d d5       	rcall	.+2842   	; 0x19a4 <__cmpdi2>
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <main+0x160>
     e8c:	61 cf       	rjmp	.-318    	; 0xd50 <main+0x22>
     e8e:	ce d0       	rcall	.+412    	; 0x102c <ultrasonicSensor>
     e90:	81 39       	cpi	r24, 0x91	; 145
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	92 07       	cpc	r25, r18
     e96:	70 f0       	brcs	.+28     	; 0xeb4 <main+0x186>
			uint16_t distance = ultrasonicSensor();
     e98:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <stopState.2008>
			static int stopState = 0;
			static uint16_t tempAcceleration;
			
			if(distance > 400 && stopState == 1){
     e9c:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <stopState.2008+0x1>
     ea0:	21 30       	cpi	r18, 0x01	; 1
     ea2:	31 05       	cpc	r19, r1
     ea4:	39 f4       	brne	.+14     	; 0xeb4 <main+0x186>
     ea6:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <tempAcceleration.2009>
     eaa:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <tempAcceleration.2009+0x1>
     eae:	3d 83       	std	Y+5, r19	; 0x05
     eb0:	2c 83       	std	Y+4, r18	; 0x04
				rp6Data.accelerationRate = tempAcceleration;
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <main+0x1a4>
     eb4:	8d 32       	cpi	r24, 0x2D	; 45
     eb6:	21 e0       	ldi	r18, 0x01	; 1
     eb8:	92 07       	cpc	r25, r18
     eba:	58 f0       	brcs	.+22     	; 0xed2 <main+0x1a4>
     ebc:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <stopState.2008>
			}else if(distance > 300 && stopState == 2){
     ec0:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <stopState.2008+0x1>
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	21 f4       	brne	.+8      	; 0xed2 <main+0x1a4>
     eca:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <stopState.2008+0x1>
     ece:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <stopState.2008>
     ed2:	9c 01       	movw	r18, r24
     ed4:	2d 52       	subi	r18, 0x2D	; 45
				stopState = 0;
     ed6:	31 40       	sbci	r19, 0x01	; 1
     ed8:	23 36       	cpi	r18, 0x63	; 99
     eda:	31 05       	cpc	r19, r1
     edc:	58 f4       	brcc	.+22     	; 0xef4 <main+0x1c6>
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
     ede:	28 81       	ld	r18, Y
     ee0:	39 81       	ldd	r19, Y+1	; 0x01
     ee2:	29 32       	cpi	r18, 0x29	; 41
     ee4:	31 05       	cpc	r19, r1
     ee6:	30 f0       	brcs	.+12     	; 0xef4 <main+0x1c6>
     ee8:	2a 81       	ldd	r18, Y+2	; 0x02
     eea:	21 30       	cpi	r18, 0x01	; 1
     eec:	19 f4       	brne	.+6      	; 0xef4 <main+0x1c6>
     eee:	39 82       	std	Y+1, r3	; 0x01
     ef0:	28 82       	st	Y, r2
     ef2:	40 c0       	rjmp	.+128    	; 0xf74 <main+0x246>
     ef4:	9c 01       	movw	r18, r24
     ef6:	26 55       	subi	r18, 0x56	; 86
     ef8:	31 09       	sbc	r19, r1
				rp6Data.driveSpeed = 40;
     efa:	26 3d       	cpi	r18, 0xD6	; 214
     efc:	31 05       	cpc	r19, r1
     efe:	68 f4       	brcc	.+26     	; 0xf1a <main+0x1ec>
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
     f00:	28 81       	ld	r18, Y
     f02:	39 81       	ldd	r19, Y+1	; 0x01
     f04:	2a 31       	cpi	r18, 0x1A	; 26
     f06:	31 05       	cpc	r19, r1
     f08:	40 f0       	brcs	.+16     	; 0xf1a <main+0x1ec>
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	91 f5       	brne	.+100    	; 0xf74 <main+0x246>
     f10:	89 e1       	ldi	r24, 0x19	; 25
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	99 83       	std	Y+1, r25	; 0x01
     f16:	88 83       	st	Y, r24
     f18:	2d c0       	rjmp	.+90     	; 0xf74 <main+0x246>
     f1a:	85 35       	cpi	r24, 0x55	; 85
				rp6Data.driveSpeed = 25;
     f1c:	91 05       	cpc	r25, r1
     f1e:	50 f5       	brcc	.+84     	; 0xf74 <main+0x246>
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	39 f5       	brne	.+78     	; 0xf74 <main+0x246>
			}else if(distance < 85 && rp6Data.driveDirection == 1){
     f26:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <stopState.2008>
     f2a:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <stopState.2008+0x1>
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	99 f4       	brne	.+38     	; 0xf58 <main+0x22a>
				if(stopState == 0){
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <tempAcceleration.2009+0x1>
     f3a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <tempAcceleration.2009>
					tempAcceleration = rp6Data.accelerationRate;
     f3e:	88 e8       	ldi	r24, 0x88	; 136
     f40:	93 e1       	ldi	r25, 0x13	; 19
     f42:	9d 83       	std	Y+5, r25	; 0x05
     f44:	8c 83       	std	Y+4, r24	; 0x04
     f46:	19 82       	std	Y+1, r1	; 0x01
					rp6Data.accelerationRate = 5000;
     f48:	18 82       	st	Y, r1
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <stopState.2008+0x1>
					rp6Data.driveSpeed = 0;
     f52:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <stopState.2008>
					stopState = 1;
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <main+0x246>
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	61 f4       	brne	.+24     	; 0xf74 <main+0x246>
     f5c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <tempAcceleration.2009>
     f60:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <tempAcceleration.2009+0x1>
				}else if(stopState == 1){
     f64:	9d 83       	std	Y+5, r25	; 0x05
					rp6Data.accelerationRate = tempAcceleration;
     f66:	8c 83       	std	Y+4, r24	; 0x04
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <stopState.2008+0x1>
     f70:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <stopState.2008>
					stopState = 2;
     f74:	d5 da       	rcall	.-2646   	; 0x520 <micros>
     f76:	82 2e       	mov	r8, r18
     f78:	93 2e       	mov	r9, r19
     f7a:	a4 2e       	mov	r10, r20
     f7c:	b5 2e       	mov	r11, r21
				}
			}
			
			stoptimer = micros() + stoptimerspeed;
     f7e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <stoptimerspeed>
     f82:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <stoptimerspeed+0x1>
     f86:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <stoptimerspeed+0x2>
     f8a:	b0 91 05 02 	lds	r27, 0x0205	; 0x800205 <stoptimerspeed+0x3>
     f8e:	88 0e       	add	r8, r24
     f90:	99 1e       	adc	r9, r25
     f92:	aa 1e       	adc	r10, r26
     f94:	bb 1e       	adc	r11, r27
     f96:	80 92 00 04 	sts	0x0400, r8	; 0x800400 <stoptimer>
     f9a:	90 92 01 04 	sts	0x0401, r9	; 0x800401 <stoptimer+0x1>
     f9e:	a0 92 02 04 	sts	0x0402, r10	; 0x800402 <stoptimer+0x2>
     fa2:	b0 92 03 04 	sts	0x0403, r11	; 0x800403 <stoptimer+0x3>
     fa6:	d4 ce       	rjmp	.-600    	; 0xd50 <main+0x22>

00000fa8 <writeChar>:
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
     fa8:	e0 ec       	ldi	r30, 0xC0	; 192
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	90 81       	ld	r25, Z
     fae:	95 ff       	sbrs	r25, 5
     fb0:	fd cf       	rjmp	.-6      	; 0xfac <writeChar+0x4>
	UDR0 = x;
     fb2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     fb6:	08 95       	ret

00000fb8 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
     fc0:	80 81       	ld	r24, Z
     fc2:	88 23       	and	r24, r24
     fc4:	51 f0       	breq	.+20     	; 0xfda <writeString+0x22>
     fc6:	8f 01       	movw	r16, r30
     fc8:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
     fca:	ee df       	rcall	.-36     	; 0xfa8 <writeChar>
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
     fcc:	cf 5f       	subi	r28, 0xFF	; 255
     fce:	f8 01       	movw	r30, r16
     fd0:	ec 0f       	add	r30, r28
     fd2:	f1 1d       	adc	r31, r1
     fd4:	80 81       	ld	r24, Z
     fd6:	81 11       	cpse	r24, r1
     fd8:	f8 cf       	rjmp	.-16     	; 0xfca <writeString+0x12>
		writeChar( st[i] );
	}
}
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	28 97       	sbiw	r28, 0x08	; 8
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	4a e0       	ldi	r20, 0x0A	; 10
     ff8:	be 01       	movw	r22, r28
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	ea d4       	rcall	.+2516   	; 0x19d4 <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	d9 df       	rcall	.-78     	; 0xfb8 <writeString>
}
    1006:	28 96       	adiw	r28, 0x08	; 8
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <initTimer>:
#define PORT_REGISTER PORTL
#define PIN_REGISTER PINL

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
    1018:	e1 e8       	ldi	r30, 0x81	; 129
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	82 60       	ori	r24, 0x02	; 2
    1020:	80 83       	st	Z, r24
	TCNT1 = 0;
    1022:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1026:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    102a:	08 95       	ret

0000102c <ultrasonicSensor>:
}

int ultrasonicSensor() {
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    1030:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1034:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER); //Set TRIGGER pin as output
    1038:	aa e0       	ldi	r26, 0x0A	; 10
    103a:	b1 e0       	ldi	r27, 0x01	; 1
    103c:	8c 91       	ld	r24, X
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    1042:	eb e0       	ldi	r30, 0x0B	; 11
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	80 81       	ld	r24, Z
    1048:	8d 7f       	andi	r24, 0xFD	; 253
    104a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	2a 95       	dec	r18
    1050:	f1 f7       	brne	.-4      	; 0x104e <ultrasonicSensor+0x22>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    1054:	80 81       	ld	r24, Z
    1056:	82 60       	ori	r24, 0x02	; 2
    1058:	80 83       	st	Z, r24
    105a:	8a e1       	ldi	r24, 0x1A	; 26
    105c:	8a 95       	dec	r24
    105e:	f1 f7       	brne	.-4      	; 0x105c <ultrasonicSensor+0x30>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    1062:	80 81       	ld	r24, Z
    1064:	8d 7f       	andi	r24, 0xFD	; 253
    1066:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    1068:	8c 91       	ld	r24, X
    106a:	8d 7f       	andi	r24, 0xFD	; 253
    106c:	8c 93       	st	X, r24
	
	TCNT1 = 0; //Reset value of TCNT1
	
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	dc 01       	movw	r26, r24
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    1074:	e9 e0       	ldi	r30, 0x09	; 9
    1076:	f1 e0       	ldi	r31, 0x01	; 1
    1078:	0a c0       	rjmp	.+20     	; 0x108e <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	a1 1d       	adc	r26, r1
    107e:	b1 1d       	adc	r27, r1
    1080:	81 34       	cpi	r24, 0x41	; 65
    1082:	2c e9       	ldi	r18, 0x9C	; 156
    1084:	92 07       	cpc	r25, r18
    1086:	a1 05       	cpc	r26, r1
    1088:	b1 05       	cpc	r27, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <ultrasonicSensor+0x62>
    108c:	45 c0       	rjmp	.+138    	; 0x1118 <ultrasonicSensor+0xec>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
    108e:	20 81       	ld	r18, Z
    1090:	21 fd       	sbrc	r18, 1
    1092:	f3 cf       	rjmp	.-26     	; 0x107a <ultrasonicSensor+0x4e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    1094:	e9 e0       	ldi	r30, 0x09	; 9
    1096:	f1 e0       	ldi	r31, 0x01	; 1
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    109a:	ac 01       	movw	r20, r24
    109c:	bd 01       	movw	r22, r26
    109e:	4f 5f       	subi	r20, 0xFF	; 255
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	6f 4f       	sbci	r22, 0xFF	; 255
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	80 34       	cpi	r24, 0x40	; 64
    10a8:	9c 49       	sbci	r25, 0x9C	; 156
    10aa:	a1 05       	cpc	r26, r1
    10ac:	b1 05       	cpc	r27, r1
    10ae:	b9 f1       	breq	.+110    	; 0x111e <ultrasonicSensor+0xf2>
    10b0:	db 01       	movw	r26, r22
    10b2:	ca 01       	movw	r24, r20
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
    10b4:	20 81       	ld	r18, Z
    10b6:	21 ff       	sbrs	r18, 1
    10b8:	f0 cf       	rjmp	.-32     	; 0x109a <ultrasonicSensor+0x6e>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
    10ba:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    10be:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    10c2:	e9 e0       	ldi	r30, 0x09	; 9
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	0d c0       	rjmp	.+26     	; 0x10e2 <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    10c8:	ac 01       	movw	r20, r24
    10ca:	bd 01       	movw	r22, r26
    10cc:	4f 5f       	subi	r20, 0xFF	; 255
    10ce:	5f 4f       	sbci	r21, 0xFF	; 255
    10d0:	6f 4f       	sbci	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	80 34       	cpi	r24, 0x40	; 64
    10d6:	9c 49       	sbci	r25, 0x9C	; 156
    10d8:	a1 05       	cpc	r26, r1
    10da:	b1 05       	cpc	r27, r1
    10dc:	19 f1       	breq	.+70     	; 0x1124 <ultrasonicSensor+0xf8>
    10de:	db 01       	movw	r26, r22
    10e0:	ca 01       	movw	r24, r20
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    10e2:	20 81       	ld	r18, Z
    10e4:	21 fd       	sbrc	r18, 1
    10e6:	f0 cf       	rjmp	.-32     	; 0x10c8 <ultrasonicSensor+0x9c>
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    10e8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    10ec:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
    10f0:	c9 01       	movw	r24, r18
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	9c 01       	movw	r18, r24
    10f8:	ad 01       	movw	r20, r26
    10fa:	2c 1b       	sub	r18, r28
    10fc:	3d 0b       	sbc	r19, r29
    10fe:	41 09       	sbc	r20, r1
    1100:	51 09       	sbc	r21, r1
    1102:	a3 eb       	ldi	r26, 0xB3	; 179
    1104:	b6 e0       	ldi	r27, 0x06	; 6
    1106:	91 d3       	rcall	.+1826   	; 0x182a <__muluhisi3>
    1108:	20 e2       	ldi	r18, 0x20	; 32
    110a:	3e e4       	ldi	r19, 0x4E	; 78
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	62 d3       	rcall	.+1732   	; 0x17d6 <__udivmodsi4>
    1112:	c9 01       	movw	r24, r18
    1114:	05 97       	sbiw	r24, 0x05	; 5
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
    1116:	08 c0       	rjmp	.+16     	; 0x1128 <ultrasonicSensor+0xfc>
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <ultrasonicSensor+0xfc>
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <ultrasonicSensor+0xfc>
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <__subsf3>:
    112e:	50 58       	subi	r21, 0x80	; 128

00001130 <__addsf3>:
    1130:	bb 27       	eor	r27, r27
    1132:	aa 27       	eor	r26, r26
    1134:	0e d0       	rcall	.+28     	; 0x1152 <__addsf3x>
    1136:	e5 c0       	rjmp	.+458    	; 0x1302 <__fp_round>
    1138:	d6 d0       	rcall	.+428    	; 0x12e6 <__fp_pscA>
    113a:	30 f0       	brcs	.+12     	; 0x1148 <__addsf3+0x18>
    113c:	db d0       	rcall	.+438    	; 0x12f4 <__fp_pscB>
    113e:	20 f0       	brcs	.+8      	; 0x1148 <__addsf3+0x18>
    1140:	31 f4       	brne	.+12     	; 0x114e <__addsf3+0x1e>
    1142:	9f 3f       	cpi	r25, 0xFF	; 255
    1144:	11 f4       	brne	.+4      	; 0x114a <__addsf3+0x1a>
    1146:	1e f4       	brtc	.+6      	; 0x114e <__addsf3+0x1e>
    1148:	cb c0       	rjmp	.+406    	; 0x12e0 <__fp_nan>
    114a:	0e f4       	brtc	.+2      	; 0x114e <__addsf3+0x1e>
    114c:	e0 95       	com	r30
    114e:	e7 fb       	bst	r30, 7
    1150:	c1 c0       	rjmp	.+386    	; 0x12d4 <__fp_inf>

00001152 <__addsf3x>:
    1152:	e9 2f       	mov	r30, r25
    1154:	e7 d0       	rcall	.+462    	; 0x1324 <__fp_split3>
    1156:	80 f3       	brcs	.-32     	; 0x1138 <__addsf3+0x8>
    1158:	ba 17       	cp	r27, r26
    115a:	62 07       	cpc	r22, r18
    115c:	73 07       	cpc	r23, r19
    115e:	84 07       	cpc	r24, r20
    1160:	95 07       	cpc	r25, r21
    1162:	18 f0       	brcs	.+6      	; 0x116a <__addsf3x+0x18>
    1164:	71 f4       	brne	.+28     	; 0x1182 <__addsf3x+0x30>
    1166:	9e f5       	brtc	.+102    	; 0x11ce <__addsf3x+0x7c>
    1168:	ff c0       	rjmp	.+510    	; 0x1368 <__fp_zero>
    116a:	0e f4       	brtc	.+2      	; 0x116e <__addsf3x+0x1c>
    116c:	e0 95       	com	r30
    116e:	0b 2e       	mov	r0, r27
    1170:	ba 2f       	mov	r27, r26
    1172:	a0 2d       	mov	r26, r0
    1174:	0b 01       	movw	r0, r22
    1176:	b9 01       	movw	r22, r18
    1178:	90 01       	movw	r18, r0
    117a:	0c 01       	movw	r0, r24
    117c:	ca 01       	movw	r24, r20
    117e:	a0 01       	movw	r20, r0
    1180:	11 24       	eor	r1, r1
    1182:	ff 27       	eor	r31, r31
    1184:	59 1b       	sub	r21, r25
    1186:	99 f0       	breq	.+38     	; 0x11ae <__addsf3x+0x5c>
    1188:	59 3f       	cpi	r21, 0xF9	; 249
    118a:	50 f4       	brcc	.+20     	; 0x11a0 <__addsf3x+0x4e>
    118c:	50 3e       	cpi	r21, 0xE0	; 224
    118e:	68 f1       	brcs	.+90     	; 0x11ea <__addsf3x+0x98>
    1190:	1a 16       	cp	r1, r26
    1192:	f0 40       	sbci	r31, 0x00	; 0
    1194:	a2 2f       	mov	r26, r18
    1196:	23 2f       	mov	r18, r19
    1198:	34 2f       	mov	r19, r20
    119a:	44 27       	eor	r20, r20
    119c:	58 5f       	subi	r21, 0xF8	; 248
    119e:	f3 cf       	rjmp	.-26     	; 0x1186 <__addsf3x+0x34>
    11a0:	46 95       	lsr	r20
    11a2:	37 95       	ror	r19
    11a4:	27 95       	ror	r18
    11a6:	a7 95       	ror	r26
    11a8:	f0 40       	sbci	r31, 0x00	; 0
    11aa:	53 95       	inc	r21
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__addsf3x+0x4e>
    11ae:	7e f4       	brtc	.+30     	; 0x11ce <__addsf3x+0x7c>
    11b0:	1f 16       	cp	r1, r31
    11b2:	ba 0b       	sbc	r27, r26
    11b4:	62 0b       	sbc	r22, r18
    11b6:	73 0b       	sbc	r23, r19
    11b8:	84 0b       	sbc	r24, r20
    11ba:	ba f0       	brmi	.+46     	; 0x11ea <__addsf3x+0x98>
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	a1 f0       	breq	.+40     	; 0x11e8 <__addsf3x+0x96>
    11c0:	ff 0f       	add	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	c2 f7       	brpl	.-16     	; 0x11bc <__addsf3x+0x6a>
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <__addsf3x+0x98>
    11ce:	ba 0f       	add	r27, r26
    11d0:	62 1f       	adc	r22, r18
    11d2:	73 1f       	adc	r23, r19
    11d4:	84 1f       	adc	r24, r20
    11d6:	48 f4       	brcc	.+18     	; 0x11ea <__addsf3x+0x98>
    11d8:	87 95       	ror	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b7 95       	ror	r27
    11e0:	f7 95       	ror	r31
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__addsf3x+0x96>
    11e6:	b3 cf       	rjmp	.-154    	; 0x114e <__addsf3+0x1e>
    11e8:	93 95       	inc	r25
    11ea:	88 0f       	add	r24, r24
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <__addsf3x+0x9e>
    11ee:	99 27       	eor	r25, r25
    11f0:	ee 0f       	add	r30, r30
    11f2:	97 95       	ror	r25
    11f4:	87 95       	ror	r24
    11f6:	08 95       	ret

000011f8 <__fixsfsi>:
    11f8:	04 d0       	rcall	.+8      	; 0x1202 <__fixunssfsi>
    11fa:	68 94       	set
    11fc:	b1 11       	cpse	r27, r1
    11fe:	b5 c0       	rjmp	.+362    	; 0x136a <__fp_szero>
    1200:	08 95       	ret

00001202 <__fixunssfsi>:
    1202:	98 d0       	rcall	.+304    	; 0x1334 <__fp_splitA>
    1204:	88 f0       	brcs	.+34     	; 0x1228 <__fixunssfsi+0x26>
    1206:	9f 57       	subi	r25, 0x7F	; 127
    1208:	90 f0       	brcs	.+36     	; 0x122e <__fixunssfsi+0x2c>
    120a:	b9 2f       	mov	r27, r25
    120c:	99 27       	eor	r25, r25
    120e:	b7 51       	subi	r27, 0x17	; 23
    1210:	a0 f0       	brcs	.+40     	; 0x123a <__fixunssfsi+0x38>
    1212:	d1 f0       	breq	.+52     	; 0x1248 <__fixunssfsi+0x46>
    1214:	66 0f       	add	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	1a f0       	brmi	.+6      	; 0x1224 <__fixunssfsi+0x22>
    121e:	ba 95       	dec	r27
    1220:	c9 f7       	brne	.-14     	; 0x1214 <__fixunssfsi+0x12>
    1222:	12 c0       	rjmp	.+36     	; 0x1248 <__fixunssfsi+0x46>
    1224:	b1 30       	cpi	r27, 0x01	; 1
    1226:	81 f0       	breq	.+32     	; 0x1248 <__fixunssfsi+0x46>
    1228:	9f d0       	rcall	.+318    	; 0x1368 <__fp_zero>
    122a:	b1 e0       	ldi	r27, 0x01	; 1
    122c:	08 95       	ret
    122e:	9c c0       	rjmp	.+312    	; 0x1368 <__fp_zero>
    1230:	67 2f       	mov	r22, r23
    1232:	78 2f       	mov	r23, r24
    1234:	88 27       	eor	r24, r24
    1236:	b8 5f       	subi	r27, 0xF8	; 248
    1238:	39 f0       	breq	.+14     	; 0x1248 <__fixunssfsi+0x46>
    123a:	b9 3f       	cpi	r27, 0xF9	; 249
    123c:	cc f3       	brlt	.-14     	; 0x1230 <__fixunssfsi+0x2e>
    123e:	86 95       	lsr	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	b3 95       	inc	r27
    1246:	d9 f7       	brne	.-10     	; 0x123e <__fixunssfsi+0x3c>
    1248:	3e f4       	brtc	.+14     	; 0x1258 <__fixunssfsi+0x56>
    124a:	90 95       	com	r25
    124c:	80 95       	com	r24
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <__floatunsisf>:
    125a:	e8 94       	clt
    125c:	09 c0       	rjmp	.+18     	; 0x1270 <__floatsisf+0x12>

0000125e <__floatsisf>:
    125e:	97 fb       	bst	r25, 7
    1260:	3e f4       	brtc	.+14     	; 0x1270 <__floatsisf+0x12>
    1262:	90 95       	com	r25
    1264:	80 95       	com	r24
    1266:	70 95       	com	r23
    1268:	61 95       	neg	r22
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	99 23       	and	r25, r25
    1272:	a9 f0       	breq	.+42     	; 0x129e <__floatsisf+0x40>
    1274:	f9 2f       	mov	r31, r25
    1276:	96 e9       	ldi	r25, 0x96	; 150
    1278:	bb 27       	eor	r27, r27
    127a:	93 95       	inc	r25
    127c:	f6 95       	lsr	r31
    127e:	87 95       	ror	r24
    1280:	77 95       	ror	r23
    1282:	67 95       	ror	r22
    1284:	b7 95       	ror	r27
    1286:	f1 11       	cpse	r31, r1
    1288:	f8 cf       	rjmp	.-16     	; 0x127a <__floatsisf+0x1c>
    128a:	fa f4       	brpl	.+62     	; 0x12ca <__floatsisf+0x6c>
    128c:	bb 0f       	add	r27, r27
    128e:	11 f4       	brne	.+4      	; 0x1294 <__floatsisf+0x36>
    1290:	60 ff       	sbrs	r22, 0
    1292:	1b c0       	rjmp	.+54     	; 0x12ca <__floatsisf+0x6c>
    1294:	6f 5f       	subi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	16 c0       	rjmp	.+44     	; 0x12ca <__floatsisf+0x6c>
    129e:	88 23       	and	r24, r24
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <__floatsisf+0x48>
    12a2:	96 e9       	ldi	r25, 0x96	; 150
    12a4:	11 c0       	rjmp	.+34     	; 0x12c8 <__floatsisf+0x6a>
    12a6:	77 23       	and	r23, r23
    12a8:	21 f0       	breq	.+8      	; 0x12b2 <__floatsisf+0x54>
    12aa:	9e e8       	ldi	r25, 0x8E	; 142
    12ac:	87 2f       	mov	r24, r23
    12ae:	76 2f       	mov	r23, r22
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <__floatsisf+0x5e>
    12b2:	66 23       	and	r22, r22
    12b4:	71 f0       	breq	.+28     	; 0x12d2 <__floatsisf+0x74>
    12b6:	96 e8       	ldi	r25, 0x86	; 134
    12b8:	86 2f       	mov	r24, r22
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	2a f0       	brmi	.+10     	; 0x12ca <__floatsisf+0x6c>
    12c0:	9a 95       	dec	r25
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	da f7       	brpl	.-10     	; 0x12c0 <__floatsisf+0x62>
    12ca:	88 0f       	add	r24, r24
    12cc:	96 95       	lsr	r25
    12ce:	87 95       	ror	r24
    12d0:	97 f9       	bld	r25, 7
    12d2:	08 95       	ret

000012d4 <__fp_inf>:
    12d4:	97 f9       	bld	r25, 7
    12d6:	9f 67       	ori	r25, 0x7F	; 127
    12d8:	80 e8       	ldi	r24, 0x80	; 128
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	08 95       	ret

000012e0 <__fp_nan>:
    12e0:	9f ef       	ldi	r25, 0xFF	; 255
    12e2:	80 ec       	ldi	r24, 0xC0	; 192
    12e4:	08 95       	ret

000012e6 <__fp_pscA>:
    12e6:	00 24       	eor	r0, r0
    12e8:	0a 94       	dec	r0
    12ea:	16 16       	cp	r1, r22
    12ec:	17 06       	cpc	r1, r23
    12ee:	18 06       	cpc	r1, r24
    12f0:	09 06       	cpc	r0, r25
    12f2:	08 95       	ret

000012f4 <__fp_pscB>:
    12f4:	00 24       	eor	r0, r0
    12f6:	0a 94       	dec	r0
    12f8:	12 16       	cp	r1, r18
    12fa:	13 06       	cpc	r1, r19
    12fc:	14 06       	cpc	r1, r20
    12fe:	05 06       	cpc	r0, r21
    1300:	08 95       	ret

00001302 <__fp_round>:
    1302:	09 2e       	mov	r0, r25
    1304:	03 94       	inc	r0
    1306:	00 0c       	add	r0, r0
    1308:	11 f4       	brne	.+4      	; 0x130e <__fp_round+0xc>
    130a:	88 23       	and	r24, r24
    130c:	52 f0       	brmi	.+20     	; 0x1322 <__fp_round+0x20>
    130e:	bb 0f       	add	r27, r27
    1310:	40 f4       	brcc	.+16     	; 0x1322 <__fp_round+0x20>
    1312:	bf 2b       	or	r27, r31
    1314:	11 f4       	brne	.+4      	; 0x131a <__fp_round+0x18>
    1316:	60 ff       	sbrs	r22, 0
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <__fp_round+0x20>
    131a:	6f 5f       	subi	r22, 0xFF	; 255
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	08 95       	ret

00001324 <__fp_split3>:
    1324:	57 fd       	sbrc	r21, 7
    1326:	90 58       	subi	r25, 0x80	; 128
    1328:	44 0f       	add	r20, r20
    132a:	55 1f       	adc	r21, r21
    132c:	59 f0       	breq	.+22     	; 0x1344 <__fp_splitA+0x10>
    132e:	5f 3f       	cpi	r21, 0xFF	; 255
    1330:	71 f0       	breq	.+28     	; 0x134e <__fp_splitA+0x1a>
    1332:	47 95       	ror	r20

00001334 <__fp_splitA>:
    1334:	88 0f       	add	r24, r24
    1336:	97 fb       	bst	r25, 7
    1338:	99 1f       	adc	r25, r25
    133a:	61 f0       	breq	.+24     	; 0x1354 <__fp_splitA+0x20>
    133c:	9f 3f       	cpi	r25, 0xFF	; 255
    133e:	79 f0       	breq	.+30     	; 0x135e <__fp_splitA+0x2a>
    1340:	87 95       	ror	r24
    1342:	08 95       	ret
    1344:	12 16       	cp	r1, r18
    1346:	13 06       	cpc	r1, r19
    1348:	14 06       	cpc	r1, r20
    134a:	55 1f       	adc	r21, r21
    134c:	f2 cf       	rjmp	.-28     	; 0x1332 <__fp_split3+0xe>
    134e:	46 95       	lsr	r20
    1350:	f1 df       	rcall	.-30     	; 0x1334 <__fp_splitA>
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <__fp_splitA+0x30>
    1354:	16 16       	cp	r1, r22
    1356:	17 06       	cpc	r1, r23
    1358:	18 06       	cpc	r1, r24
    135a:	99 1f       	adc	r25, r25
    135c:	f1 cf       	rjmp	.-30     	; 0x1340 <__fp_splitA+0xc>
    135e:	86 95       	lsr	r24
    1360:	71 05       	cpc	r23, r1
    1362:	61 05       	cpc	r22, r1
    1364:	08 94       	sec
    1366:	08 95       	ret

00001368 <__fp_zero>:
    1368:	e8 94       	clt

0000136a <__fp_szero>:
    136a:	bb 27       	eor	r27, r27
    136c:	66 27       	eor	r22, r22
    136e:	77 27       	eor	r23, r23
    1370:	cb 01       	movw	r24, r22
    1372:	97 f9       	bld	r25, 7
    1374:	08 95       	ret

00001376 <pow>:
    1376:	fa 01       	movw	r30, r20
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	30 96       	adiw	r30, 0x00	; 0
    137e:	21 05       	cpc	r18, r1
    1380:	31 05       	cpc	r19, r1
    1382:	99 f1       	breq	.+102    	; 0x13ea <pow+0x74>
    1384:	61 15       	cp	r22, r1
    1386:	71 05       	cpc	r23, r1
    1388:	61 f4       	brne	.+24     	; 0x13a2 <pow+0x2c>
    138a:	80 38       	cpi	r24, 0x80	; 128
    138c:	bf e3       	ldi	r27, 0x3F	; 63
    138e:	9b 07       	cpc	r25, r27
    1390:	49 f1       	breq	.+82     	; 0x13e4 <pow+0x6e>
    1392:	68 94       	set
    1394:	90 38       	cpi	r25, 0x80	; 128
    1396:	81 05       	cpc	r24, r1
    1398:	61 f0       	breq	.+24     	; 0x13b2 <pow+0x3c>
    139a:	80 38       	cpi	r24, 0x80	; 128
    139c:	bf ef       	ldi	r27, 0xFF	; 255
    139e:	9b 07       	cpc	r25, r27
    13a0:	41 f0       	breq	.+16     	; 0x13b2 <pow+0x3c>
    13a2:	99 23       	and	r25, r25
    13a4:	42 f5       	brpl	.+80     	; 0x13f6 <pow+0x80>
    13a6:	ff 3f       	cpi	r31, 0xFF	; 255
    13a8:	e1 05       	cpc	r30, r1
    13aa:	31 05       	cpc	r19, r1
    13ac:	21 05       	cpc	r18, r1
    13ae:	11 f1       	breq	.+68     	; 0x13f4 <pow+0x7e>
    13b0:	e8 94       	clt
    13b2:	08 94       	sec
    13b4:	e7 95       	ror	r30
    13b6:	d9 01       	movw	r26, r18
    13b8:	aa 23       	and	r26, r26
    13ba:	29 f4       	brne	.+10     	; 0x13c6 <pow+0x50>
    13bc:	ab 2f       	mov	r26, r27
    13be:	be 2f       	mov	r27, r30
    13c0:	f8 5f       	subi	r31, 0xF8	; 248
    13c2:	d0 f3       	brcs	.-12     	; 0x13b8 <pow+0x42>
    13c4:	10 c0       	rjmp	.+32     	; 0x13e6 <pow+0x70>
    13c6:	ff 5f       	subi	r31, 0xFF	; 255
    13c8:	70 f4       	brcc	.+28     	; 0x13e6 <pow+0x70>
    13ca:	a6 95       	lsr	r26
    13cc:	e0 f7       	brcc	.-8      	; 0x13c6 <pow+0x50>
    13ce:	f7 39       	cpi	r31, 0x97	; 151
    13d0:	50 f0       	brcs	.+20     	; 0x13e6 <pow+0x70>
    13d2:	19 f0       	breq	.+6      	; 0x13da <pow+0x64>
    13d4:	ff 3a       	cpi	r31, 0xAF	; 175
    13d6:	38 f4       	brcc	.+14     	; 0x13e6 <pow+0x70>
    13d8:	9f 77       	andi	r25, 0x7F	; 127
    13da:	9f 93       	push	r25
    13dc:	0c d0       	rcall	.+24     	; 0x13f6 <pow+0x80>
    13de:	0f 90       	pop	r0
    13e0:	07 fc       	sbrc	r0, 7
    13e2:	90 58       	subi	r25, 0x80	; 128
    13e4:	08 95       	ret
    13e6:	3e f0       	brts	.+14     	; 0x13f6 <pow+0x80>
    13e8:	7b cf       	rjmp	.-266    	; 0x12e0 <__fp_nan>
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	80 e8       	ldi	r24, 0x80	; 128
    13f0:	9f e3       	ldi	r25, 0x3F	; 63
    13f2:	08 95       	ret
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	9f 77       	andi	r25, 0x7F	; 127
    13f8:	5f 93       	push	r21
    13fa:	4f 93       	push	r20
    13fc:	3f 93       	push	r19
    13fe:	2f 93       	push	r18
    1400:	9e d0       	rcall	.+316    	; 0x153e <log>
    1402:	2f 91       	pop	r18
    1404:	3f 91       	pop	r19
    1406:	4f 91       	pop	r20
    1408:	5f 91       	pop	r21
    140a:	0c d1       	rcall	.+536    	; 0x1624 <__mulsf3>
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <exp>
    140e:	19 f4       	brne	.+6      	; 0x1416 <pow+0xa0>
    1410:	0e f0       	brts	.+2      	; 0x1414 <pow+0x9e>
    1412:	60 cf       	rjmp	.-320    	; 0x12d4 <__fp_inf>
    1414:	a9 cf       	rjmp	.-174    	; 0x1368 <__fp_zero>
    1416:	64 cf       	rjmp	.-312    	; 0x12e0 <__fp_nan>

00001418 <exp>:
    1418:	8d df       	rcall	.-230    	; 0x1334 <__fp_splitA>
    141a:	c8 f3       	brcs	.-14     	; 0x140e <pow+0x98>
    141c:	96 38       	cpi	r25, 0x86	; 134
    141e:	c0 f7       	brcc	.-16     	; 0x1410 <pow+0x9a>
    1420:	07 f8       	bld	r0, 7
    1422:	0f 92       	push	r0
    1424:	e8 94       	clt
    1426:	2b e3       	ldi	r18, 0x3B	; 59
    1428:	3a ea       	ldi	r19, 0xAA	; 170
    142a:	48 eb       	ldi	r20, 0xB8	; 184
    142c:	5f e7       	ldi	r21, 0x7F	; 127
    142e:	08 d1       	rcall	.+528    	; 0x1640 <__mulsf3_pse>
    1430:	0f 92       	push	r0
    1432:	0f 92       	push	r0
    1434:	0f 92       	push	r0
    1436:	4d b7       	in	r20, 0x3d	; 61
    1438:	5e b7       	in	r21, 0x3e	; 62
    143a:	0f 92       	push	r0
    143c:	c0 d0       	rcall	.+384    	; 0x15be <modf>
    143e:	e8 e1       	ldi	r30, 0x18	; 24
    1440:	f1 e0       	ldi	r31, 0x01	; 1
    1442:	16 d0       	rcall	.+44     	; 0x1470 <__fp_powser>
    1444:	4f 91       	pop	r20
    1446:	5f 91       	pop	r21
    1448:	ef 91       	pop	r30
    144a:	ff 91       	pop	r31
    144c:	e5 95       	asr	r30
    144e:	ee 1f       	adc	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	49 f0       	breq	.+18     	; 0x1466 <exp+0x4e>
    1454:	fe 57       	subi	r31, 0x7E	; 126
    1456:	e0 68       	ori	r30, 0x80	; 128
    1458:	44 27       	eor	r20, r20
    145a:	ee 0f       	add	r30, r30
    145c:	44 1f       	adc	r20, r20
    145e:	fa 95       	dec	r31
    1460:	e1 f7       	brne	.-8      	; 0x145a <exp+0x42>
    1462:	41 95       	neg	r20
    1464:	55 0b       	sbc	r21, r21
    1466:	32 d0       	rcall	.+100    	; 0x14cc <ldexp>
    1468:	0f 90       	pop	r0
    146a:	07 fe       	sbrs	r0, 7
    146c:	26 c0       	rjmp	.+76     	; 0x14ba <inverse>
    146e:	08 95       	ret

00001470 <__fp_powser>:
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	1f 93       	push	r17
    1476:	0f 93       	push	r16
    1478:	ff 92       	push	r15
    147a:	ef 92       	push	r14
    147c:	df 92       	push	r13
    147e:	7b 01       	movw	r14, r22
    1480:	8c 01       	movw	r16, r24
    1482:	68 94       	set
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <__fp_powser+0x20>
    1486:	da 2e       	mov	r13, r26
    1488:	ef 01       	movw	r28, r30
    148a:	d8 d0       	rcall	.+432    	; 0x163c <__mulsf3x>
    148c:	fe 01       	movw	r30, r28
    148e:	e8 94       	clt
    1490:	a5 91       	lpm	r26, Z+
    1492:	25 91       	lpm	r18, Z+
    1494:	35 91       	lpm	r19, Z+
    1496:	45 91       	lpm	r20, Z+
    1498:	55 91       	lpm	r21, Z+
    149a:	ae f3       	brts	.-22     	; 0x1486 <__fp_powser+0x16>
    149c:	ef 01       	movw	r28, r30
    149e:	59 de       	rcall	.-846    	; 0x1152 <__addsf3x>
    14a0:	fe 01       	movw	r30, r28
    14a2:	97 01       	movw	r18, r14
    14a4:	a8 01       	movw	r20, r16
    14a6:	da 94       	dec	r13
    14a8:	79 f7       	brne	.-34     	; 0x1488 <__fp_powser+0x18>
    14aa:	df 90       	pop	r13
    14ac:	ef 90       	pop	r14
    14ae:	ff 90       	pop	r15
    14b0:	0f 91       	pop	r16
    14b2:	1f 91       	pop	r17
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <inverse>:
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	80 e8       	ldi	r24, 0x80	; 128
    14c4:	9f e3       	ldi	r25, 0x3F	; 63
    14c6:	11 c1       	rjmp	.+546    	; 0x16ea <__divsf3>
    14c8:	05 cf       	rjmp	.-502    	; 0x12d4 <__fp_inf>
    14ca:	77 c1       	rjmp	.+750    	; 0x17ba <__fp_mpack>

000014cc <ldexp>:
    14cc:	33 df       	rcall	.-410    	; 0x1334 <__fp_splitA>
    14ce:	e8 f3       	brcs	.-6      	; 0x14ca <inverse+0x10>
    14d0:	99 23       	and	r25, r25
    14d2:	d9 f3       	breq	.-10     	; 0x14ca <inverse+0x10>
    14d4:	94 0f       	add	r25, r20
    14d6:	51 1d       	adc	r21, r1
    14d8:	bb f3       	brvs	.-18     	; 0x14c8 <inverse+0xe>
    14da:	91 50       	subi	r25, 0x01	; 1
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	94 f0       	brlt	.+36     	; 0x1504 <ldexp+0x38>
    14e0:	59 f0       	breq	.+22     	; 0x14f8 <ldexp+0x2c>
    14e2:	88 23       	and	r24, r24
    14e4:	32 f0       	brmi	.+12     	; 0x14f2 <ldexp+0x26>
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	91 50       	subi	r25, 0x01	; 1
    14ee:	50 40       	sbci	r21, 0x00	; 0
    14f0:	c1 f7       	brne	.-16     	; 0x14e2 <ldexp+0x16>
    14f2:	9e 3f       	cpi	r25, 0xFE	; 254
    14f4:	51 05       	cpc	r21, r1
    14f6:	44 f7       	brge	.-48     	; 0x14c8 <inverse+0xe>
    14f8:	88 0f       	add	r24, r24
    14fa:	91 1d       	adc	r25, r1
    14fc:	96 95       	lsr	r25
    14fe:	87 95       	ror	r24
    1500:	97 f9       	bld	r25, 7
    1502:	08 95       	ret
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	ac f0       	brlt	.+42     	; 0x1532 <ldexp+0x66>
    1508:	98 3e       	cpi	r25, 0xE8	; 232
    150a:	9c f0       	brlt	.+38     	; 0x1532 <ldexp+0x66>
    150c:	bb 27       	eor	r27, r27
    150e:	86 95       	lsr	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	b7 95       	ror	r27
    1516:	08 f4       	brcc	.+2      	; 0x151a <ldexp+0x4e>
    1518:	b1 60       	ori	r27, 0x01	; 1
    151a:	93 95       	inc	r25
    151c:	c1 f7       	brne	.-16     	; 0x150e <ldexp+0x42>
    151e:	bb 0f       	add	r27, r27
    1520:	58 f7       	brcc	.-42     	; 0x14f8 <ldexp+0x2c>
    1522:	11 f4       	brne	.+4      	; 0x1528 <ldexp+0x5c>
    1524:	60 ff       	sbrs	r22, 0
    1526:	e8 cf       	rjmp	.-48     	; 0x14f8 <ldexp+0x2c>
    1528:	6f 5f       	subi	r22, 0xFF	; 255
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	8f 4f       	sbci	r24, 0xFF	; 255
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	e3 cf       	rjmp	.-58     	; 0x14f8 <ldexp+0x2c>
    1532:	1b cf       	rjmp	.-458    	; 0x136a <__fp_szero>
    1534:	0e f0       	brts	.+2      	; 0x1538 <ldexp+0x6c>
    1536:	41 c1       	rjmp	.+642    	; 0x17ba <__fp_mpack>
    1538:	d3 ce       	rjmp	.-602    	; 0x12e0 <__fp_nan>
    153a:	68 94       	set
    153c:	cb ce       	rjmp	.-618    	; 0x12d4 <__fp_inf>

0000153e <log>:
    153e:	fa de       	rcall	.-524    	; 0x1334 <__fp_splitA>
    1540:	c8 f3       	brcs	.-14     	; 0x1534 <ldexp+0x68>
    1542:	99 23       	and	r25, r25
    1544:	d1 f3       	breq	.-12     	; 0x153a <ldexp+0x6e>
    1546:	c6 f3       	brts	.-16     	; 0x1538 <ldexp+0x6c>
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	1f 93       	push	r17
    154e:	0f 93       	push	r16
    1550:	ff 92       	push	r15
    1552:	c9 2f       	mov	r28, r25
    1554:	dd 27       	eor	r29, r29
    1556:	88 23       	and	r24, r24
    1558:	2a f0       	brmi	.+10     	; 0x1564 <log+0x26>
    155a:	21 97       	sbiw	r28, 0x01	; 1
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	da f7       	brpl	.-10     	; 0x155a <log+0x1c>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f eb       	ldi	r21, 0xBF	; 191
    156c:	9f e3       	ldi	r25, 0x3F	; 63
    156e:	88 39       	cpi	r24, 0x98	; 152
    1570:	20 f0       	brcs	.+8      	; 0x157a <log+0x3c>
    1572:	80 3e       	cpi	r24, 0xE0	; 224
    1574:	30 f0       	brcs	.+12     	; 0x1582 <log+0x44>
    1576:	21 96       	adiw	r28, 0x01	; 1
    1578:	8f 77       	andi	r24, 0x7F	; 127
    157a:	da dd       	rcall	.-1100   	; 0x1130 <__addsf3>
    157c:	e0 e4       	ldi	r30, 0x40	; 64
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <log+0x4a>
    1582:	d6 dd       	rcall	.-1108   	; 0x1130 <__addsf3>
    1584:	ed e6       	ldi	r30, 0x6D	; 109
    1586:	f1 e0       	ldi	r31, 0x01	; 1
    1588:	73 df       	rcall	.-282    	; 0x1470 <__fp_powser>
    158a:	8b 01       	movw	r16, r22
    158c:	be 01       	movw	r22, r28
    158e:	ec 01       	movw	r28, r24
    1590:	fb 2e       	mov	r15, r27
    1592:	6f 57       	subi	r22, 0x7F	; 127
    1594:	71 09       	sbc	r23, r1
    1596:	75 95       	asr	r23
    1598:	77 1f       	adc	r23, r23
    159a:	88 0b       	sbc	r24, r24
    159c:	99 0b       	sbc	r25, r25
    159e:	5f de       	rcall	.-834    	; 0x125e <__floatsisf>
    15a0:	28 e1       	ldi	r18, 0x18	; 24
    15a2:	32 e7       	ldi	r19, 0x72	; 114
    15a4:	41 e3       	ldi	r20, 0x31	; 49
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	49 d0       	rcall	.+146    	; 0x163c <__mulsf3x>
    15aa:	af 2d       	mov	r26, r15
    15ac:	98 01       	movw	r18, r16
    15ae:	ae 01       	movw	r20, r28
    15b0:	ff 90       	pop	r15
    15b2:	0f 91       	pop	r16
    15b4:	1f 91       	pop	r17
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	cb dd       	rcall	.-1130   	; 0x1152 <__addsf3x>
    15bc:	a2 ce       	rjmp	.-700    	; 0x1302 <__fp_round>

000015be <modf>:
    15be:	fa 01       	movw	r30, r20
    15c0:	dc 01       	movw	r26, r24
    15c2:	aa 0f       	add	r26, r26
    15c4:	bb 1f       	adc	r27, r27
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	bf 57       	subi	r27, 0x7F	; 127
    15cc:	28 f4       	brcc	.+10     	; 0x15d8 <modf+0x1a>
    15ce:	22 27       	eor	r18, r18
    15d0:	33 27       	eor	r19, r19
    15d2:	44 27       	eor	r20, r20
    15d4:	50 78       	andi	r21, 0x80	; 128
    15d6:	1f c0       	rjmp	.+62     	; 0x1616 <modf+0x58>
    15d8:	b7 51       	subi	r27, 0x17	; 23
    15da:	88 f4       	brcc	.+34     	; 0x15fe <modf+0x40>
    15dc:	ab 2f       	mov	r26, r27
    15de:	00 24       	eor	r0, r0
    15e0:	46 95       	lsr	r20
    15e2:	37 95       	ror	r19
    15e4:	27 95       	ror	r18
    15e6:	01 1c       	adc	r0, r1
    15e8:	a3 95       	inc	r26
    15ea:	d2 f3       	brmi	.-12     	; 0x15e0 <modf+0x22>
    15ec:	00 20       	and	r0, r0
    15ee:	69 f0       	breq	.+26     	; 0x160a <modf+0x4c>
    15f0:	22 0f       	add	r18, r18
    15f2:	33 1f       	adc	r19, r19
    15f4:	44 1f       	adc	r20, r20
    15f6:	b3 95       	inc	r27
    15f8:	da f3       	brmi	.-10     	; 0x15f0 <modf+0x32>
    15fa:	0d d0       	rcall	.+26     	; 0x1616 <modf+0x58>
    15fc:	98 cd       	rjmp	.-1232   	; 0x112e <__subsf3>
    15fe:	61 30       	cpi	r22, 0x01	; 1
    1600:	71 05       	cpc	r23, r1
    1602:	a0 e8       	ldi	r26, 0x80	; 128
    1604:	8a 07       	cpc	r24, r26
    1606:	b9 46       	sbci	r27, 0x69	; 105
    1608:	30 f4       	brcc	.+12     	; 0x1616 <modf+0x58>
    160a:	9b 01       	movw	r18, r22
    160c:	ac 01       	movw	r20, r24
    160e:	66 27       	eor	r22, r22
    1610:	77 27       	eor	r23, r23
    1612:	88 27       	eor	r24, r24
    1614:	90 78       	andi	r25, 0x80	; 128
    1616:	30 96       	adiw	r30, 0x00	; 0
    1618:	21 f0       	breq	.+8      	; 0x1622 <modf+0x64>
    161a:	20 83       	st	Z, r18
    161c:	31 83       	std	Z+1, r19	; 0x01
    161e:	42 83       	std	Z+2, r20	; 0x02
    1620:	53 83       	std	Z+3, r21	; 0x03
    1622:	08 95       	ret

00001624 <__mulsf3>:
    1624:	0b d0       	rcall	.+22     	; 0x163c <__mulsf3x>
    1626:	6d ce       	rjmp	.-806    	; 0x1302 <__fp_round>
    1628:	5e de       	rcall	.-836    	; 0x12e6 <__fp_pscA>
    162a:	28 f0       	brcs	.+10     	; 0x1636 <__mulsf3+0x12>
    162c:	63 de       	rcall	.-826    	; 0x12f4 <__fp_pscB>
    162e:	18 f0       	brcs	.+6      	; 0x1636 <__mulsf3+0x12>
    1630:	95 23       	and	r25, r21
    1632:	09 f0       	breq	.+2      	; 0x1636 <__mulsf3+0x12>
    1634:	4f ce       	rjmp	.-866    	; 0x12d4 <__fp_inf>
    1636:	54 ce       	rjmp	.-856    	; 0x12e0 <__fp_nan>
    1638:	11 24       	eor	r1, r1
    163a:	97 ce       	rjmp	.-722    	; 0x136a <__fp_szero>

0000163c <__mulsf3x>:
    163c:	73 de       	rcall	.-794    	; 0x1324 <__fp_split3>
    163e:	a0 f3       	brcs	.-24     	; 0x1628 <__mulsf3+0x4>

00001640 <__mulsf3_pse>:
    1640:	95 9f       	mul	r25, r21
    1642:	d1 f3       	breq	.-12     	; 0x1638 <__mulsf3+0x14>
    1644:	95 0f       	add	r25, r21
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	55 1f       	adc	r21, r21
    164a:	62 9f       	mul	r22, r18
    164c:	f0 01       	movw	r30, r0
    164e:	72 9f       	mul	r23, r18
    1650:	bb 27       	eor	r27, r27
    1652:	f0 0d       	add	r31, r0
    1654:	b1 1d       	adc	r27, r1
    1656:	63 9f       	mul	r22, r19
    1658:	aa 27       	eor	r26, r26
    165a:	f0 0d       	add	r31, r0
    165c:	b1 1d       	adc	r27, r1
    165e:	aa 1f       	adc	r26, r26
    1660:	64 9f       	mul	r22, r20
    1662:	66 27       	eor	r22, r22
    1664:	b0 0d       	add	r27, r0
    1666:	a1 1d       	adc	r26, r1
    1668:	66 1f       	adc	r22, r22
    166a:	82 9f       	mul	r24, r18
    166c:	22 27       	eor	r18, r18
    166e:	b0 0d       	add	r27, r0
    1670:	a1 1d       	adc	r26, r1
    1672:	62 1f       	adc	r22, r18
    1674:	73 9f       	mul	r23, r19
    1676:	b0 0d       	add	r27, r0
    1678:	a1 1d       	adc	r26, r1
    167a:	62 1f       	adc	r22, r18
    167c:	83 9f       	mul	r24, r19
    167e:	a0 0d       	add	r26, r0
    1680:	61 1d       	adc	r22, r1
    1682:	22 1f       	adc	r18, r18
    1684:	74 9f       	mul	r23, r20
    1686:	33 27       	eor	r19, r19
    1688:	a0 0d       	add	r26, r0
    168a:	61 1d       	adc	r22, r1
    168c:	23 1f       	adc	r18, r19
    168e:	84 9f       	mul	r24, r20
    1690:	60 0d       	add	r22, r0
    1692:	21 1d       	adc	r18, r1
    1694:	82 2f       	mov	r24, r18
    1696:	76 2f       	mov	r23, r22
    1698:	6a 2f       	mov	r22, r26
    169a:	11 24       	eor	r1, r1
    169c:	9f 57       	subi	r25, 0x7F	; 127
    169e:	50 40       	sbci	r21, 0x00	; 0
    16a0:	8a f0       	brmi	.+34     	; 0x16c4 <__mulsf3_pse+0x84>
    16a2:	e1 f0       	breq	.+56     	; 0x16dc <__mulsf3_pse+0x9c>
    16a4:	88 23       	and	r24, r24
    16a6:	4a f0       	brmi	.+18     	; 0x16ba <__mulsf3_pse+0x7a>
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	bb 1f       	adc	r27, r27
    16ae:	66 1f       	adc	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	91 50       	subi	r25, 0x01	; 1
    16b6:	50 40       	sbci	r21, 0x00	; 0
    16b8:	a9 f7       	brne	.-22     	; 0x16a4 <__mulsf3_pse+0x64>
    16ba:	9e 3f       	cpi	r25, 0xFE	; 254
    16bc:	51 05       	cpc	r21, r1
    16be:	70 f0       	brcs	.+28     	; 0x16dc <__mulsf3_pse+0x9c>
    16c0:	09 ce       	rjmp	.-1006   	; 0x12d4 <__fp_inf>
    16c2:	53 ce       	rjmp	.-858    	; 0x136a <__fp_szero>
    16c4:	5f 3f       	cpi	r21, 0xFF	; 255
    16c6:	ec f3       	brlt	.-6      	; 0x16c2 <__mulsf3_pse+0x82>
    16c8:	98 3e       	cpi	r25, 0xE8	; 232
    16ca:	dc f3       	brlt	.-10     	; 0x16c2 <__mulsf3_pse+0x82>
    16cc:	86 95       	lsr	r24
    16ce:	77 95       	ror	r23
    16d0:	67 95       	ror	r22
    16d2:	b7 95       	ror	r27
    16d4:	f7 95       	ror	r31
    16d6:	e7 95       	ror	r30
    16d8:	9f 5f       	subi	r25, 0xFF	; 255
    16da:	c1 f7       	brne	.-16     	; 0x16cc <__mulsf3_pse+0x8c>
    16dc:	fe 2b       	or	r31, r30
    16de:	88 0f       	add	r24, r24
    16e0:	91 1d       	adc	r25, r1
    16e2:	96 95       	lsr	r25
    16e4:	87 95       	ror	r24
    16e6:	97 f9       	bld	r25, 7
    16e8:	08 95       	ret

000016ea <__divsf3>:
    16ea:	0c d0       	rcall	.+24     	; 0x1704 <__divsf3x>
    16ec:	0a ce       	rjmp	.-1004   	; 0x1302 <__fp_round>
    16ee:	02 de       	rcall	.-1020   	; 0x12f4 <__fp_pscB>
    16f0:	40 f0       	brcs	.+16     	; 0x1702 <__divsf3+0x18>
    16f2:	f9 dd       	rcall	.-1038   	; 0x12e6 <__fp_pscA>
    16f4:	30 f0       	brcs	.+12     	; 0x1702 <__divsf3+0x18>
    16f6:	21 f4       	brne	.+8      	; 0x1700 <__divsf3+0x16>
    16f8:	5f 3f       	cpi	r21, 0xFF	; 255
    16fa:	19 f0       	breq	.+6      	; 0x1702 <__divsf3+0x18>
    16fc:	eb cd       	rjmp	.-1066   	; 0x12d4 <__fp_inf>
    16fe:	51 11       	cpse	r21, r1
    1700:	34 ce       	rjmp	.-920    	; 0x136a <__fp_szero>
    1702:	ee cd       	rjmp	.-1060   	; 0x12e0 <__fp_nan>

00001704 <__divsf3x>:
    1704:	0f de       	rcall	.-994    	; 0x1324 <__fp_split3>
    1706:	98 f3       	brcs	.-26     	; 0x16ee <__divsf3+0x4>

00001708 <__divsf3_pse>:
    1708:	99 23       	and	r25, r25
    170a:	c9 f3       	breq	.-14     	; 0x16fe <__divsf3+0x14>
    170c:	55 23       	and	r21, r21
    170e:	b1 f3       	breq	.-20     	; 0x16fc <__divsf3+0x12>
    1710:	95 1b       	sub	r25, r21
    1712:	55 0b       	sbc	r21, r21
    1714:	bb 27       	eor	r27, r27
    1716:	aa 27       	eor	r26, r26
    1718:	62 17       	cp	r22, r18
    171a:	73 07       	cpc	r23, r19
    171c:	84 07       	cpc	r24, r20
    171e:	38 f0       	brcs	.+14     	; 0x172e <__divsf3_pse+0x26>
    1720:	9f 5f       	subi	r25, 0xFF	; 255
    1722:	5f 4f       	sbci	r21, 0xFF	; 255
    1724:	22 0f       	add	r18, r18
    1726:	33 1f       	adc	r19, r19
    1728:	44 1f       	adc	r20, r20
    172a:	aa 1f       	adc	r26, r26
    172c:	a9 f3       	breq	.-22     	; 0x1718 <__divsf3_pse+0x10>
    172e:	33 d0       	rcall	.+102    	; 0x1796 <__divsf3_pse+0x8e>
    1730:	0e 2e       	mov	r0, r30
    1732:	3a f0       	brmi	.+14     	; 0x1742 <__divsf3_pse+0x3a>
    1734:	e0 e8       	ldi	r30, 0x80	; 128
    1736:	30 d0       	rcall	.+96     	; 0x1798 <__divsf3_pse+0x90>
    1738:	91 50       	subi	r25, 0x01	; 1
    173a:	50 40       	sbci	r21, 0x00	; 0
    173c:	e6 95       	lsr	r30
    173e:	00 1c       	adc	r0, r0
    1740:	ca f7       	brpl	.-14     	; 0x1734 <__divsf3_pse+0x2c>
    1742:	29 d0       	rcall	.+82     	; 0x1796 <__divsf3_pse+0x8e>
    1744:	fe 2f       	mov	r31, r30
    1746:	27 d0       	rcall	.+78     	; 0x1796 <__divsf3_pse+0x8e>
    1748:	66 0f       	add	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	bb 1f       	adc	r27, r27
    1750:	26 17       	cp	r18, r22
    1752:	37 07       	cpc	r19, r23
    1754:	48 07       	cpc	r20, r24
    1756:	ab 07       	cpc	r26, r27
    1758:	b0 e8       	ldi	r27, 0x80	; 128
    175a:	09 f0       	breq	.+2      	; 0x175e <__divsf3_pse+0x56>
    175c:	bb 0b       	sbc	r27, r27
    175e:	80 2d       	mov	r24, r0
    1760:	bf 01       	movw	r22, r30
    1762:	ff 27       	eor	r31, r31
    1764:	93 58       	subi	r25, 0x83	; 131
    1766:	5f 4f       	sbci	r21, 0xFF	; 255
    1768:	2a f0       	brmi	.+10     	; 0x1774 <__divsf3_pse+0x6c>
    176a:	9e 3f       	cpi	r25, 0xFE	; 254
    176c:	51 05       	cpc	r21, r1
    176e:	68 f0       	brcs	.+26     	; 0x178a <__divsf3_pse+0x82>
    1770:	b1 cd       	rjmp	.-1182   	; 0x12d4 <__fp_inf>
    1772:	fb cd       	rjmp	.-1034   	; 0x136a <__fp_szero>
    1774:	5f 3f       	cpi	r21, 0xFF	; 255
    1776:	ec f3       	brlt	.-6      	; 0x1772 <__divsf3_pse+0x6a>
    1778:	98 3e       	cpi	r25, 0xE8	; 232
    177a:	dc f3       	brlt	.-10     	; 0x1772 <__divsf3_pse+0x6a>
    177c:	86 95       	lsr	r24
    177e:	77 95       	ror	r23
    1780:	67 95       	ror	r22
    1782:	b7 95       	ror	r27
    1784:	f7 95       	ror	r31
    1786:	9f 5f       	subi	r25, 0xFF	; 255
    1788:	c9 f7       	brne	.-14     	; 0x177c <__divsf3_pse+0x74>
    178a:	88 0f       	add	r24, r24
    178c:	91 1d       	adc	r25, r1
    178e:	96 95       	lsr	r25
    1790:	87 95       	ror	r24
    1792:	97 f9       	bld	r25, 7
    1794:	08 95       	ret
    1796:	e1 e0       	ldi	r30, 0x01	; 1
    1798:	66 0f       	add	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	88 1f       	adc	r24, r24
    179e:	bb 1f       	adc	r27, r27
    17a0:	62 17       	cp	r22, r18
    17a2:	73 07       	cpc	r23, r19
    17a4:	84 07       	cpc	r24, r20
    17a6:	ba 07       	cpc	r27, r26
    17a8:	20 f0       	brcs	.+8      	; 0x17b2 <__divsf3_pse+0xaa>
    17aa:	62 1b       	sub	r22, r18
    17ac:	73 0b       	sbc	r23, r19
    17ae:	84 0b       	sbc	r24, r20
    17b0:	ba 0b       	sbc	r27, r26
    17b2:	ee 1f       	adc	r30, r30
    17b4:	88 f7       	brcc	.-30     	; 0x1798 <__divsf3_pse+0x90>
    17b6:	e0 95       	com	r30
    17b8:	08 95       	ret

000017ba <__fp_mpack>:
    17ba:	9f 3f       	cpi	r25, 0xFF	; 255
    17bc:	31 f0       	breq	.+12     	; 0x17ca <__fp_mpack_finite+0xc>

000017be <__fp_mpack_finite>:
    17be:	91 50       	subi	r25, 0x01	; 1
    17c0:	20 f4       	brcc	.+8      	; 0x17ca <__fp_mpack_finite+0xc>
    17c2:	87 95       	ror	r24
    17c4:	77 95       	ror	r23
    17c6:	67 95       	ror	r22
    17c8:	b7 95       	ror	r27
    17ca:	88 0f       	add	r24, r24
    17cc:	91 1d       	adc	r25, r1
    17ce:	96 95       	lsr	r25
    17d0:	87 95       	ror	r24
    17d2:	97 f9       	bld	r25, 7
    17d4:	08 95       	ret

000017d6 <__udivmodsi4>:
    17d6:	a1 e2       	ldi	r26, 0x21	; 33
    17d8:	1a 2e       	mov	r1, r26
    17da:	aa 1b       	sub	r26, r26
    17dc:	bb 1b       	sub	r27, r27
    17de:	fd 01       	movw	r30, r26
    17e0:	0d c0       	rjmp	.+26     	; 0x17fc <__udivmodsi4_ep>

000017e2 <__udivmodsi4_loop>:
    17e2:	aa 1f       	adc	r26, r26
    17e4:	bb 1f       	adc	r27, r27
    17e6:	ee 1f       	adc	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	a2 17       	cp	r26, r18
    17ec:	b3 07       	cpc	r27, r19
    17ee:	e4 07       	cpc	r30, r20
    17f0:	f5 07       	cpc	r31, r21
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <__udivmodsi4_ep>
    17f4:	a2 1b       	sub	r26, r18
    17f6:	b3 0b       	sbc	r27, r19
    17f8:	e4 0b       	sbc	r30, r20
    17fa:	f5 0b       	sbc	r31, r21

000017fc <__udivmodsi4_ep>:
    17fc:	66 1f       	adc	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	88 1f       	adc	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	1a 94       	dec	r1
    1806:	69 f7       	brne	.-38     	; 0x17e2 <__udivmodsi4_loop>
    1808:	60 95       	com	r22
    180a:	70 95       	com	r23
    180c:	80 95       	com	r24
    180e:	90 95       	com	r25
    1810:	9b 01       	movw	r18, r22
    1812:	ac 01       	movw	r20, r24
    1814:	bd 01       	movw	r22, r26
    1816:	cf 01       	movw	r24, r30
    1818:	08 95       	ret

0000181a <__tablejump2__>:
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	88 1f       	adc	r24, r24
    1820:	8b bf       	out	0x3b, r24	; 59
    1822:	07 90       	elpm	r0, Z+
    1824:	f6 91       	elpm	r31, Z
    1826:	e0 2d       	mov	r30, r0
    1828:	19 94       	eijmp

0000182a <__muluhisi3>:
    182a:	c5 d0       	rcall	.+394    	; 0x19b6 <__umulhisi3>
    182c:	a5 9f       	mul	r26, r21
    182e:	90 0d       	add	r25, r0
    1830:	b4 9f       	mul	r27, r20
    1832:	90 0d       	add	r25, r0
    1834:	a4 9f       	mul	r26, r20
    1836:	80 0d       	add	r24, r0
    1838:	91 1d       	adc	r25, r1
    183a:	11 24       	eor	r1, r1
    183c:	08 95       	ret

0000183e <__umoddi3>:
    183e:	68 94       	set
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <__udivdi3_umoddi3>

00001842 <__udivdi3>:
    1842:	e8 94       	clt

00001844 <__udivdi3_umoddi3>:
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	05 d0       	rcall	.+10     	; 0x1858 <__udivmod64>
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	9f 90       	pop	r9
    1854:	8f 90       	pop	r8
    1856:	08 95       	ret

00001858 <__udivmod64>:
    1858:	88 24       	eor	r8, r8
    185a:	99 24       	eor	r9, r9
    185c:	f4 01       	movw	r30, r8
    185e:	e4 01       	movw	r28, r8
    1860:	b0 e4       	ldi	r27, 0x40	; 64
    1862:	9f 93       	push	r25
    1864:	aa 27       	eor	r26, r26
    1866:	9a 15       	cp	r25, r10
    1868:	8b 04       	cpc	r8, r11
    186a:	9c 04       	cpc	r9, r12
    186c:	ed 05       	cpc	r30, r13
    186e:	fe 05       	cpc	r31, r14
    1870:	cf 05       	cpc	r28, r15
    1872:	d0 07       	cpc	r29, r16
    1874:	a1 07       	cpc	r26, r17
    1876:	98 f4       	brcc	.+38     	; 0x189e <__udivmod64+0x46>
    1878:	ad 2f       	mov	r26, r29
    187a:	dc 2f       	mov	r29, r28
    187c:	cf 2f       	mov	r28, r31
    187e:	fe 2f       	mov	r31, r30
    1880:	e9 2d       	mov	r30, r9
    1882:	98 2c       	mov	r9, r8
    1884:	89 2e       	mov	r8, r25
    1886:	98 2f       	mov	r25, r24
    1888:	87 2f       	mov	r24, r23
    188a:	76 2f       	mov	r23, r22
    188c:	65 2f       	mov	r22, r21
    188e:	54 2f       	mov	r21, r20
    1890:	43 2f       	mov	r20, r19
    1892:	32 2f       	mov	r19, r18
    1894:	22 27       	eor	r18, r18
    1896:	b8 50       	subi	r27, 0x08	; 8
    1898:	31 f7       	brne	.-52     	; 0x1866 <__udivmod64+0xe>
    189a:	bf 91       	pop	r27
    189c:	27 c0       	rjmp	.+78     	; 0x18ec <__udivmod64+0x94>
    189e:	1b 2e       	mov	r1, r27
    18a0:	bf 91       	pop	r27
    18a2:	bb 27       	eor	r27, r27
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	44 1f       	adc	r20, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	66 1f       	adc	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	88 1f       	adc	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	88 1c       	adc	r8, r8
    18b6:	99 1c       	adc	r9, r9
    18b8:	ee 1f       	adc	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	cc 1f       	adc	r28, r28
    18be:	dd 1f       	adc	r29, r29
    18c0:	aa 1f       	adc	r26, r26
    18c2:	bb 1f       	adc	r27, r27
    18c4:	8a 14       	cp	r8, r10
    18c6:	9b 04       	cpc	r9, r11
    18c8:	ec 05       	cpc	r30, r12
    18ca:	fd 05       	cpc	r31, r13
    18cc:	ce 05       	cpc	r28, r14
    18ce:	df 05       	cpc	r29, r15
    18d0:	a0 07       	cpc	r26, r16
    18d2:	b1 07       	cpc	r27, r17
    18d4:	48 f0       	brcs	.+18     	; 0x18e8 <__udivmod64+0x90>
    18d6:	8a 18       	sub	r8, r10
    18d8:	9b 08       	sbc	r9, r11
    18da:	ec 09       	sbc	r30, r12
    18dc:	fd 09       	sbc	r31, r13
    18de:	ce 09       	sbc	r28, r14
    18e0:	df 09       	sbc	r29, r15
    18e2:	a0 0b       	sbc	r26, r16
    18e4:	b1 0b       	sbc	r27, r17
    18e6:	21 60       	ori	r18, 0x01	; 1
    18e8:	1a 94       	dec	r1
    18ea:	e1 f6       	brne	.-72     	; 0x18a4 <__udivmod64+0x4c>
    18ec:	2e f4       	brtc	.+10     	; 0x18f8 <__udivmod64+0xa0>
    18ee:	94 01       	movw	r18, r8
    18f0:	af 01       	movw	r20, r30
    18f2:	be 01       	movw	r22, r28
    18f4:	cd 01       	movw	r24, r26
    18f6:	00 0c       	add	r0, r0
    18f8:	08 95       	ret

000018fa <__ashldi3>:
    18fa:	0f 93       	push	r16
    18fc:	08 30       	cpi	r16, 0x08	; 8
    18fe:	90 f0       	brcs	.+36     	; 0x1924 <__ashldi3+0x2a>
    1900:	98 2f       	mov	r25, r24
    1902:	87 2f       	mov	r24, r23
    1904:	76 2f       	mov	r23, r22
    1906:	65 2f       	mov	r22, r21
    1908:	54 2f       	mov	r21, r20
    190a:	43 2f       	mov	r20, r19
    190c:	32 2f       	mov	r19, r18
    190e:	22 27       	eor	r18, r18
    1910:	08 50       	subi	r16, 0x08	; 8
    1912:	f4 cf       	rjmp	.-24     	; 0x18fc <__ashldi3+0x2>
    1914:	22 0f       	add	r18, r18
    1916:	33 1f       	adc	r19, r19
    1918:	44 1f       	adc	r20, r20
    191a:	55 1f       	adc	r21, r21
    191c:	66 1f       	adc	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 95       	dec	r16
    1926:	b2 f7       	brpl	.-20     	; 0x1914 <__ashldi3+0x1a>
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <__ashrdi3>:
    192c:	97 fb       	bst	r25, 7
    192e:	10 f8       	bld	r1, 0

00001930 <__lshrdi3>:
    1930:	16 94       	lsr	r1
    1932:	00 08       	sbc	r0, r0
    1934:	0f 93       	push	r16
    1936:	08 30       	cpi	r16, 0x08	; 8
    1938:	98 f0       	brcs	.+38     	; 0x1960 <__lshrdi3+0x30>
    193a:	08 50       	subi	r16, 0x08	; 8
    193c:	23 2f       	mov	r18, r19
    193e:	34 2f       	mov	r19, r20
    1940:	45 2f       	mov	r20, r21
    1942:	56 2f       	mov	r21, r22
    1944:	67 2f       	mov	r22, r23
    1946:	78 2f       	mov	r23, r24
    1948:	89 2f       	mov	r24, r25
    194a:	90 2d       	mov	r25, r0
    194c:	f4 cf       	rjmp	.-24     	; 0x1936 <__lshrdi3+0x6>
    194e:	05 94       	asr	r0
    1950:	97 95       	ror	r25
    1952:	87 95       	ror	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	57 95       	ror	r21
    195a:	47 95       	ror	r20
    195c:	37 95       	ror	r19
    195e:	27 95       	ror	r18
    1960:	0a 95       	dec	r16
    1962:	aa f7       	brpl	.-22     	; 0x194e <__lshrdi3+0x1e>
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <__adddi3>:
    1968:	2a 0d       	add	r18, r10
    196a:	3b 1d       	adc	r19, r11
    196c:	4c 1d       	adc	r20, r12
    196e:	5d 1d       	adc	r21, r13
    1970:	6e 1d       	adc	r22, r14
    1972:	7f 1d       	adc	r23, r15
    1974:	80 1f       	adc	r24, r16
    1976:	91 1f       	adc	r25, r17
    1978:	08 95       	ret

0000197a <__adddi3_s8>:
    197a:	00 24       	eor	r0, r0
    197c:	a7 fd       	sbrc	r26, 7
    197e:	00 94       	com	r0
    1980:	2a 0f       	add	r18, r26
    1982:	30 1d       	adc	r19, r0
    1984:	40 1d       	adc	r20, r0
    1986:	50 1d       	adc	r21, r0
    1988:	60 1d       	adc	r22, r0
    198a:	70 1d       	adc	r23, r0
    198c:	80 1d       	adc	r24, r0
    198e:	90 1d       	adc	r25, r0
    1990:	08 95       	ret

00001992 <__subdi3>:
    1992:	2a 19       	sub	r18, r10
    1994:	3b 09       	sbc	r19, r11
    1996:	4c 09       	sbc	r20, r12
    1998:	5d 09       	sbc	r21, r13
    199a:	6e 09       	sbc	r22, r14
    199c:	7f 09       	sbc	r23, r15
    199e:	80 0b       	sbc	r24, r16
    19a0:	91 0b       	sbc	r25, r17
    19a2:	08 95       	ret

000019a4 <__cmpdi2>:
    19a4:	2a 15       	cp	r18, r10
    19a6:	3b 05       	cpc	r19, r11
    19a8:	4c 05       	cpc	r20, r12
    19aa:	5d 05       	cpc	r21, r13
    19ac:	6e 05       	cpc	r22, r14
    19ae:	7f 05       	cpc	r23, r15
    19b0:	80 07       	cpc	r24, r16
    19b2:	91 07       	cpc	r25, r17
    19b4:	08 95       	ret

000019b6 <__umulhisi3>:
    19b6:	a2 9f       	mul	r26, r18
    19b8:	b0 01       	movw	r22, r0
    19ba:	b3 9f       	mul	r27, r19
    19bc:	c0 01       	movw	r24, r0
    19be:	a3 9f       	mul	r26, r19
    19c0:	70 0d       	add	r23, r0
    19c2:	81 1d       	adc	r24, r1
    19c4:	11 24       	eor	r1, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	b2 9f       	mul	r27, r18
    19ca:	70 0d       	add	r23, r0
    19cc:	81 1d       	adc	r24, r1
    19ce:	11 24       	eor	r1, r1
    19d0:	91 1d       	adc	r25, r1
    19d2:	08 95       	ret

000019d4 <__itoa_ncheck>:
    19d4:	bb 27       	eor	r27, r27
    19d6:	4a 30       	cpi	r20, 0x0A	; 10
    19d8:	31 f4       	brne	.+12     	; 0x19e6 <__itoa_ncheck+0x12>
    19da:	99 23       	and	r25, r25
    19dc:	22 f4       	brpl	.+8      	; 0x19e6 <__itoa_ncheck+0x12>
    19de:	bd e2       	ldi	r27, 0x2D	; 45
    19e0:	90 95       	com	r25
    19e2:	81 95       	neg	r24
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <__utoa_common>

000019e8 <__utoa_ncheck>:
    19e8:	bb 27       	eor	r27, r27

000019ea <__utoa_common>:
    19ea:	fb 01       	movw	r30, r22
    19ec:	55 27       	eor	r21, r21
    19ee:	aa 27       	eor	r26, r26
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	aa 1f       	adc	r26, r26
    19f6:	a4 17       	cp	r26, r20
    19f8:	10 f0       	brcs	.+4      	; 0x19fe <__utoa_common+0x14>
    19fa:	a4 1b       	sub	r26, r20
    19fc:	83 95       	inc	r24
    19fe:	50 51       	subi	r21, 0x10	; 16
    1a00:	b9 f7       	brne	.-18     	; 0x19f0 <__utoa_common+0x6>
    1a02:	a0 5d       	subi	r26, 0xD0	; 208
    1a04:	aa 33       	cpi	r26, 0x3A	; 58
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <__utoa_common+0x20>
    1a08:	a9 5d       	subi	r26, 0xD9	; 217
    1a0a:	a1 93       	st	Z+, r26
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	79 f7       	brne	.-34     	; 0x19ee <__utoa_common+0x4>
    1a10:	b1 11       	cpse	r27, r1
    1a12:	b1 93       	st	Z+, r27
    1a14:	11 92       	st	Z+, r1
    1a16:	cb 01       	movw	r24, r22
    1a18:	00 c0       	rjmp	.+0      	; 0x1a1a <strrev>

00001a1a <strrev>:
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	67 2f       	mov	r22, r23
    1a20:	71 91       	ld	r23, Z+
    1a22:	77 23       	and	r23, r23
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <strrev+0x4>
    1a26:	32 97       	sbiw	r30, 0x02	; 2
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <strrev+0x18>
    1a2a:	7c 91       	ld	r23, X
    1a2c:	6d 93       	st	X+, r22
    1a2e:	70 83       	st	Z, r23
    1a30:	62 91       	ld	r22, -Z
    1a32:	ae 17       	cp	r26, r30
    1a34:	bf 07       	cpc	r27, r31
    1a36:	c8 f3       	brcs	.-14     	; 0x1a2a <strrev+0x10>
    1a38:	08 95       	ret

00001a3a <_exit>:
    1a3a:	f8 94       	cli

00001a3c <__stop_program>:
    1a3c:	ff cf       	rjmp	.-2      	; 0x1a3c <__stop_program>
