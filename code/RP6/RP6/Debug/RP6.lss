
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001712  000017a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800066  00800066  000017ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b56  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000742  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000791  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00003314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b96  00000000  00000000  00003be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_1>
       8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 06 	call	0xd98	; 0xd98 <main>
      8a:	0c 94 87 0b 	jmp	0x170e	; 0x170e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_LED>:
	sei();									//Enable global interrupts
}


void init_LED(){
	DDRB |= 0b10000011;
      92:	87 b3       	in	r24, 0x17	; 23
      94:	83 68       	ori	r24, 0x83	; 131
      96:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      98:	84 b3       	in	r24, 0x14	; 20
      9a:	80 67       	ori	r24, 0x70	; 112
      9c:	84 bb       	out	0x14, r24	; 20
      9e:	08 95       	ret

000000a0 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      a0:	83 b7       	in	r24, 0x33	; 51
      a2:	81 60       	ori	r24, 0x01	; 1
      a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      a6:	83 b7       	in	r24, 0x33	; 51
      a8:	82 60       	ori	r24, 0x02	; 2
      aa:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      ac:	89 b7       	in	r24, 0x39	; 57
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      b2:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      b4:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t0TotalOverflow>
      b8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <t0TotalOverflow+0x1>
      bc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <t0TotalOverflow+0x2>
      c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <t0TotalOverflow+0x3>
      c4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <t0TotalOverflow+0x4>
      c8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <t0TotalOverflow+0x5>
      cc:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t0TotalOverflow+0x6>
      d0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t0TotalOverflow+0x7>
      d4:	08 95       	ret

000000d6 <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	2f 93       	push	r18
      e2:	3f 93       	push	r19
      e4:	4f 93       	push	r20
      e6:	5f 93       	push	r21
      e8:	6f 93       	push	r22
      ea:	7f 93       	push	r23
      ec:	8f 93       	push	r24
      ee:	9f 93       	push	r25
      f0:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
      f2:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <t0TotalOverflow>
      f6:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <t0TotalOverflow+0x1>
      fa:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <t0TotalOverflow+0x2>
      fe:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <t0TotalOverflow+0x3>
     102:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <t0TotalOverflow+0x4>
     106:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x5>
     10a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x6>
     10e:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x7>
     112:	a1 e0       	ldi	r26, 0x01	; 1
     114:	0e 94 49 0b 	call	0x1692	; 0x1692 <__adddi3_s8>
     118:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <t0TotalOverflow>
     11c:	30 93 b0 00 	sts	0x00B0, r19	; 0x8000b0 <t0TotalOverflow+0x1>
     120:	40 93 b1 00 	sts	0x00B1, r20	; 0x8000b1 <t0TotalOverflow+0x2>
     124:	50 93 b2 00 	sts	0x00B2, r21	; 0x8000b2 <t0TotalOverflow+0x3>
     128:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <t0TotalOverflow+0x4>
     12c:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <t0TotalOverflow+0x5>
     130:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <t0TotalOverflow+0x6>
     134:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <t0TotalOverflow+0x7>
}
     138:	af 91       	pop	r26
     13a:	9f 91       	pop	r25
     13c:	8f 91       	pop	r24
     13e:	7f 91       	pop	r23
     140:	6f 91       	pop	r22
     142:	5f 91       	pop	r21
     144:	4f 91       	pop	r20
     146:	3f 91       	pop	r19
     148:	2f 91       	pop	r18
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <micros>:


uint64_t micros(){
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     164:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     166:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <t0TotalOverflow>
     16a:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <t0TotalOverflow+0x1>
     16e:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <t0TotalOverflow+0x2>
     172:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <t0TotalOverflow+0x3>
     176:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <t0TotalOverflow+0x4>
     17a:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <t0TotalOverflow+0x5>
     17e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <t0TotalOverflow+0x6>
     182:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     186:	e0 e0       	ldi	r30, 0x00	; 0
     188:	fa 2f       	mov	r31, r26
     18a:	ff 0f       	add	r31, r31
     18c:	ff 0f       	add	r31, r31
     18e:	ff 0f       	add	r31, r31
     190:	ff 23       	and	r31, r31
     192:	14 f4       	brge	.+4      	; 0x198 <micros+0x44>
     194:	e1 50       	subi	r30, 0x01	; 1
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	ef 2f       	mov	r30, r31
     19a:	ee 0f       	add	r30, r30
     19c:	ee 0b       	sbc	r30, r30
     19e:	0b e0       	ldi	r16, 0x0B	; 11
     1a0:	0e 94 27 0b 	call	0x164e	; 0x164e <__ashldi3>
     1a4:	a2 2e       	mov	r10, r18
     1a6:	b3 2e       	mov	r11, r19
     1a8:	c4 2e       	mov	r12, r20
     1aa:	d5 2e       	mov	r13, r21
     1ac:	e6 2e       	mov	r14, r22
     1ae:	f7 2e       	mov	r15, r23
     1b0:	08 2f       	mov	r16, r24
     1b2:	19 2f       	mov	r17, r25
     1b4:	2f 2f       	mov	r18, r31
     1b6:	3e 2f       	mov	r19, r30
     1b8:	4e 2f       	mov	r20, r30
     1ba:	5e 2f       	mov	r21, r30
     1bc:	6e 2f       	mov	r22, r30
     1be:	7e 2f       	mov	r23, r30
     1c0:	8e 2f       	mov	r24, r30
     1c2:	9e 2f       	mov	r25, r30
     1c4:	0e 94 40 0b 	call	0x1680	; 0x1680 <__adddi3>
}
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	df 90       	pop	r13
     1d2:	cf 90       	pop	r12
     1d4:	bf 90       	pop	r11
     1d6:	af 90       	pop	r10
     1d8:	08 95       	ret

000001da <init_TWI>:
//------------------------------------------------------
//I2C functions ----------------------------------------
void init_TWI(){
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);		//Enable TWI; Enable Acknowledge; Enable Interrupt
     1da:	85 e4       	ldi	r24, 0x45	; 69
     1dc:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;											//No prescaling
     1de:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);									//Set slave address
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;					//set SCL to 100kHz
     1e4:	80 e2       	ldi	r24, 0x20	; 32
     1e6:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;
     1e8:	84 b3       	in	r24, 0x14	; 20
     1ea:	83 60       	ori	r24, 0x03	; 3
     1ec:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;
     1ee:	85 b3       	in	r24, 0x15	; 21
     1f0:	83 60       	ori	r24, 0x03	; 3
     1f2:	85 bb       	out	0x15, r24	; 21
     1f4:	08 95       	ret

000001f6 <init_rp6Data>:
}


void init_rp6Data(){
	rp6Data.driveSpeed = 0;
     1f6:	ea e9       	ldi	r30, 0x9A	; 154
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	10 82       	st	Z, r1
     1fc:	11 82       	std	Z+1, r1	; 0x01
     1fe:	12 82       	std	Z+2, r1	; 0x02
     200:	13 82       	std	Z+3, r1	; 0x03
     202:	14 82       	std	Z+4, r1	; 0x04
     204:	15 82       	std	Z+5, r1	; 0x05
     206:	16 82       	std	Z+6, r1	; 0x06
     208:	17 82       	std	Z+7, r1	; 0x07
	rp6Data.driveDirection = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 87       	std	Z+8, r24	; 0x08
	rp6Data.turnDirection = 0;
     20e:	11 86       	std	Z+9, r1	; 0x09
	rp6Data.accelerationRate = 2;
     210:	22 e0       	ldi	r18, 0x02	; 2
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	33 87       	std	Z+11, r19	; 0x0b
     216:	22 87       	std	Z+10, r18	; 0x0a
	rp6Data.turnRate = 2500;
     218:	24 ec       	ldi	r18, 0xC4	; 196
     21a:	39 e0       	ldi	r19, 0x09	; 9
     21c:	35 87       	std	Z+13, r19	; 0x0d
     21e:	24 87       	std	Z+12, r18	; 0x0c
	rp6Data.driveSpeedThreshold = 7000;
     220:	28 e5       	ldi	r18, 0x58	; 88
     222:	3b e1       	ldi	r19, 0x1B	; 27
     224:	37 87       	std	Z+15, r19	; 0x0f
     226:	26 87       	std	Z+14, r18	; 0x0e
	rp6Data.updateSpeed = 200000;
     228:	40 e4       	ldi	r20, 0x40	; 64
     22a:	5d e0       	ldi	r21, 0x0D	; 13
     22c:	63 e0       	ldi	r22, 0x03	; 3
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	40 8b       	std	Z+16, r20	; 0x10
     232:	51 8b       	std	Z+17, r21	; 0x11
     234:	62 8b       	std	Z+18, r22	; 0x12
     236:	73 8b       	std	Z+19, r23	; 0x13
	rp6Data.enableBeeper = 1;
     238:	84 8b       	std	Z+20, r24	; 0x14
     23a:	08 95       	ret

0000023c <init_arduinoData>:
}


void init_arduinoData(){
	arduinoData.motorEncoderLVal = 0;
     23c:	e2 e8       	ldi	r30, 0x82	; 130
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	11 82       	std	Z+1, r1	; 0x01
     242:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;
     244:	13 82       	std	Z+3, r1	; 0x03
     246:	12 82       	std	Z+2, r1	; 0x02
     248:	08 95       	ret

0000024a <clearSendData>:
	
	TWCR |= (1 << TWINT);
}


void clearSendData(){
     24a:	e7 eb       	ldi	r30, 0xB7	; 183
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8b ec       	ldi	r24, 0xCB	; 203
     250:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     252:	11 92       	st	Z+, r1
	TWCR |= (1 << TWINT);
}


void clearSendData(){
	for(int i = 0; i < DATASIZE; i++){
     254:	e8 17       	cp	r30, r24
     256:	f9 07       	cpc	r31, r25
     258:	e1 f7       	brne	.-8      	; 0x252 <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     25a:	08 95       	ret

0000025c <clearReceiveData>:


void clearReceiveData(){
     25c:	e6 e8       	ldi	r30, 0x86	; 134
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	8a e9       	ldi	r24, 0x9A	; 154
     262:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     264:	11 92       	st	Z+, r1
	}
}


void clearReceiveData(){
	for(int i = 0; i < DATASIZE; i++){
     266:	e8 17       	cp	r30, r24
     268:	f9 07       	cpc	r31, r25
     26a:	e1 f7       	brne	.-8      	; 0x264 <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     26c:	08 95       	ret

0000026e <rp6DataInterpreter>:
		case(1): rp6DataInterpreter(); break;
	}
}


void rp6DataInterpreter(){
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
	if(receiveData[2]-1 == 0){
     276:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <receiveData+0x2>
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	59 f4       	brne	.+22     	; 0x294 <rp6DataInterpreter+0x26>
		rp6Data.driveSpeed = 0;
     27e:	ea e9       	ldi	r30, 0x9A	; 154
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	10 82       	st	Z, r1
     284:	11 82       	std	Z+1, r1	; 0x01
     286:	12 82       	std	Z+2, r1	; 0x02
     288:	13 82       	std	Z+3, r1	; 0x03
     28a:	14 82       	std	Z+4, r1	; 0x04
     28c:	15 82       	std	Z+5, r1	; 0x05
     28e:	16 82       	std	Z+6, r1	; 0x06
     290:	17 82       	std	Z+7, r1	; 0x07
     292:	11 c0       	rjmp	.+34     	; 0x2b6 <rp6DataInterpreter+0x48>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     294:	ea e9       	ldi	r30, 0x9A	; 154
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <receiveData+0x1>
     29c:	90 83       	st	Z, r25
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	12 82       	std	Z+2, r1	; 0x02
     2a2:	13 82       	std	Z+3, r1	; 0x03
     2a4:	14 82       	std	Z+4, r1	; 0x04
     2a6:	15 82       	std	Z+5, r1	; 0x05
     2a8:	16 82       	std	Z+6, r1	; 0x06
     2aa:	17 82       	std	Z+7, r1	; 0x07
	}
	
	if(receiveData[2] < 1){
     2ac:	81 11       	cpse	r24, r1
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <rp6DataInterpreter+0x48>
		rp6Data.driveDirection = 0;
     2b0:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <rp6Data+0x8>
     2b4:	03 c0       	rjmp	.+6      	; 0x2bc <rp6DataInterpreter+0x4e>
	}else{
		rp6Data.driveDirection = 1;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <rp6Data+0x8>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     2bc:	ea e9       	ldi	r30, 0x9A	; 154
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	c6 e8       	ldi	r28, 0x86	; 134
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	81 87       	std	Z+9, r24	; 0x09
	rp6Data.accelerationRate = receiveData[4] * 2000 / 255;
     2ca:	2c 81       	ldd	r18, Y+4	; 0x04
     2cc:	00 ed       	ldi	r16, 0xD0	; 208
     2ce:	17 e0       	ldi	r17, 0x07	; 7
     2d0:	20 9f       	mul	r18, r16
     2d2:	c0 01       	movw	r24, r0
     2d4:	21 9f       	mul	r18, r17
     2d6:	90 0d       	add	r25, r0
     2d8:	11 24       	eor	r1, r1
     2da:	2f ef       	ldi	r18, 0xFF	; 255
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	b9 01       	movw	r22, r18
     2e0:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
     2e4:	73 87       	std	Z+11, r23	; 0x0b
     2e6:	62 87       	std	Z+10, r22	; 0x0a
	rp6Data.turnRate = receiveData[5] * 8000 / 255;
     2e8:	6d 81       	ldd	r22, Y+5	; 0x05
     2ea:	40 e4       	ldi	r20, 0x40	; 64
     2ec:	5f e1       	ldi	r21, 0x1F	; 31
     2ee:	64 9f       	mul	r22, r20
     2f0:	c0 01       	movw	r24, r0
     2f2:	65 9f       	mul	r22, r21
     2f4:	90 0d       	add	r25, r0
     2f6:	11 24       	eor	r1, r1
     2f8:	b9 01       	movw	r22, r18
     2fa:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
     2fe:	75 87       	std	Z+13, r23	; 0x0d
     300:	64 87       	std	Z+12, r22	; 0x0c
	rp6Data.driveSpeedThreshold = receiveData[6] * 6000 / 255;
     302:	6e 81       	ldd	r22, Y+6	; 0x06
     304:	40 e7       	ldi	r20, 0x70	; 112
     306:	57 e1       	ldi	r21, 0x17	; 23
     308:	64 9f       	mul	r22, r20
     30a:	c0 01       	movw	r24, r0
     30c:	65 9f       	mul	r22, r21
     30e:	90 0d       	add	r25, r0
     310:	11 24       	eor	r1, r1
     312:	b9 01       	movw	r22, r18
     314:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
     318:	77 87       	std	Z+15, r23	; 0x0f
     31a:	66 87       	std	Z+14, r22	; 0x0e
	rp6Data.updateSpeed = receiveData[7] * 2000;
     31c:	2f 81       	ldd	r18, Y+7	; 0x07
     31e:	20 9f       	mul	r18, r16
     320:	c0 01       	movw	r24, r0
     322:	21 9f       	mul	r18, r17
     324:	90 0d       	add	r25, r0
     326:	11 24       	eor	r1, r1
     328:	09 2e       	mov	r0, r25
     32a:	00 0c       	add	r0, r0
     32c:	aa 0b       	sbc	r26, r26
     32e:	bb 0b       	sbc	r27, r27
     330:	80 8b       	std	Z+16, r24	; 0x10
     332:	91 8b       	std	Z+17, r25	; 0x11
     334:	a2 8b       	std	Z+18, r26	; 0x12
     336:	b3 8b       	std	Z+19, r27	; 0x13
	rp6Data.enableBeeper = receiveData[8];
     338:	88 85       	ldd	r24, Y+8	; 0x08
     33a:	84 8b       	std	Z+20, r24	; 0x14
}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	08 95       	ret

00000346 <I2C_receiveInterpreter>:
}


void I2C_receiveInterpreter(){
	int dataSet = receiveData[0];
	switch(dataSet){
     346:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <receiveData>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	11 f4       	brne	.+4      	; 0x352 <I2C_receiveInterpreter+0xc>
		case(1): rp6DataInterpreter(); break;
     34e:	0e 94 37 01 	call	0x26e	; 0x26e <rp6DataInterpreter>
     352:	08 95       	ret

00000354 <arduinoDataConstructor>:
	rp6Data.updateSpeed = receiveData[7] * 2000;
	rp6Data.enableBeeper = receiveData[8];
}


void arduinoDataConstructor(){
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
	clearSendData();
     358:	0e 94 25 01 	call	0x24a	; 0x24a <clearSendData>
	
	sendData[0] = 1;
     35c:	e7 eb       	ldi	r30, 0xB7	; 183
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 83       	st	Z, r24
	sendData[1] = arduinoData.motorEncoderLVal * 255 / 30000;
     364:	c2 e8       	ldi	r28, 0x82	; 130
     366:	d0 e0       	ldi	r29, 0x00	; 0
     368:	88 81       	ld	r24, Y
     36a:	99 81       	ldd	r25, Y+1	; 0x01
     36c:	4f ef       	ldi	r20, 0xFF	; 255
     36e:	48 9f       	mul	r20, r24
     370:	90 01       	movw	r18, r0
     372:	49 9f       	mul	r20, r25
     374:	30 0d       	add	r19, r0
     376:	11 24       	eor	r1, r1
     378:	32 95       	swap	r19
     37a:	22 95       	swap	r18
     37c:	2f 70       	andi	r18, 0x0F	; 15
     37e:	23 27       	eor	r18, r19
     380:	3f 70       	andi	r19, 0x0F	; 15
     382:	23 27       	eor	r18, r19
     384:	ad eb       	ldi	r26, 0xBD	; 189
     386:	b8 e0       	ldi	r27, 0x08	; 8
     388:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
     38c:	00 24       	eor	r0, r0
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	00 1c       	adc	r0, r0
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	00 1c       	adc	r0, r0
     39a:	89 2f       	mov	r24, r25
     39c:	90 2d       	mov	r25, r0
     39e:	81 83       	std	Z+1, r24	; 0x01
	sendData[2] = arduinoData.motorEncoderRVal * 255 / 30000;
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	9b 81       	ldd	r25, Y+3	; 0x03
     3a4:	48 9f       	mul	r20, r24
     3a6:	90 01       	movw	r18, r0
     3a8:	49 9f       	mul	r20, r25
     3aa:	30 0d       	add	r19, r0
     3ac:	11 24       	eor	r1, r1
     3ae:	32 95       	swap	r19
     3b0:	22 95       	swap	r18
     3b2:	2f 70       	andi	r18, 0x0F	; 15
     3b4:	23 27       	eor	r18, r19
     3b6:	3f 70       	andi	r19, 0x0F	; 15
     3b8:	23 27       	eor	r18, r19
     3ba:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
     3be:	00 24       	eor	r0, r0
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	00 1c       	adc	r0, r0
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	00 1c       	adc	r0, r0
     3cc:	89 2f       	mov	r24, r25
     3ce:	90 2d       	mov	r25, r0
     3d0:	82 83       	std	Z+2, r24	; 0x02
     3d2:	ea eb       	ldi	r30, 0xBA	; 186
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	8b ec       	ldi	r24, 0xCB	; 203
     3d8:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i = 3; i < DATASIZE; i++){
		sendData[i] = 0;
     3da:	11 92       	st	Z+, r1
	
	sendData[0] = 1;
	sendData[1] = arduinoData.motorEncoderLVal * 255 / 30000;
	sendData[2] = arduinoData.motorEncoderRVal * 255 / 30000;
	
	for(int i = 3; i < DATASIZE; i++){
     3dc:	e8 17       	cp	r30, r24
     3de:	f9 07       	cpc	r31, r25
     3e0:	e1 f7       	brne	.-8      	; 0x3da <arduinoDataConstructor+0x86>
		sendData[i] = 0;
	}
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <__vector_19>:
	arduinoData.motorEncoderLVal = 0;
	arduinoData.motorEncoderRVal = 0;
}


ISR(TWI_vect){
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	2f 93       	push	r18
     3f4:	3f 93       	push	r19
     3f6:	4f 93       	push	r20
     3f8:	5f 93       	push	r21
     3fa:	6f 93       	push	r22
     3fc:	7f 93       	push	r23
     3fe:	8f 93       	push	r24
     400:	9f 93       	push	r25
     402:	af 93       	push	r26
     404:	bf 93       	push	r27
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
	static int byteCounter = 0;
	switch(TWSR){
     40a:	81 b1       	in	r24, 0x01	; 1
     40c:	80 3a       	cpi	r24, 0xA0	; 160
     40e:	21 f1       	breq	.+72     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     410:	28 f4       	brcc	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     412:	80 36       	cpi	r24, 0x60	; 96
     414:	41 f0       	breq	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     416:	80 38       	cpi	r24, 0x80	; 128
     418:	69 f0       	breq	.+26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     41a:	39 c0       	rjmp	.+114    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     41c:	88 3a       	cpi	r24, 0xA8	; 168
     41e:	f9 f0       	breq	.+62     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     420:	88 3b       	cpi	r24, 0xB8	; 184
     422:	39 f1       	breq	.+78     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     424:	34 c0       	rjmp	.+104    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		case 0x60:
			clearReceiveData();
     426:	0e 94 2e 01 	call	0x25c	; 0x25c <clearReceiveData>
			byteCounter = 0;
     42a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1962+0x1>
     42e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1962>
		break;
     432:	2d c0       	rjmp	.+90     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		
		case 0x80:
			if(byteCounter < 20){
     434:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1962>
     438:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1962+0x1>
     43c:	84 31       	cpi	r24, 0x14	; 20
     43e:	91 05       	cpc	r25, r1
     440:	34 f5       	brge	.+76     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
				receiveData[byteCounter] = TWDR;
     442:	23 b1       	in	r18, 0x03	; 3
     444:	fc 01       	movw	r30, r24
     446:	ea 57       	subi	r30, 0x7A	; 122
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	20 83       	st	Z, r18
				byteCounter++;
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1962+0x1>
     452:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1962>
     456:	1b c0       	rjmp	.+54     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			}
		break;
		
		case 0xA0:
			I2C_receiveInterpreter();
     458:	0e 94 a3 01 	call	0x346	; 0x346 <I2C_receiveInterpreter>
		break;
     45c:	18 c0       	rjmp	.+48     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		
		case 0xA8:
			arduinoDataConstructor();
     45e:	0e 94 aa 01 	call	0x354	; 0x354 <arduinoDataConstructor>
			byteCounter = 0;
     462:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1962+0x1>
     466:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1962>
			TWDR = sendData[byteCounter];
     46a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <sendData>
     46e:	83 b9       	out	0x03, r24	; 3
		break;
     470:	0e c0       	rjmp	.+28     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		
		case 0xB8:
			byteCounter++;
     472:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1962>
     476:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1962+0x1>
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1962+0x1>
     480:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1962>
			TWDR = sendData[byteCounter];
     484:	fc 01       	movw	r30, r24
     486:	e9 54       	subi	r30, 0x49	; 73
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	80 81       	ld	r24, Z
     48c:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);
     48e:	86 b7       	in	r24, 0x36	; 54
     490:	80 68       	ori	r24, 0x80	; 128
     492:	86 bf       	out	0x36, r24	; 54
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     4b6:	81 b3       	in	r24, 0x11	; 17
     4b8:	80 63       	ori	r24, 0x30	; 48
     4ba:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     4bc:	81 b3       	in	r24, 0x11	; 17
     4be:	83 7f       	andi	r24, 0xF3	; 243
     4c0:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     4c2:	84 b3       	in	r24, 0x14	; 20
     4c4:	8c 60       	ori	r24, 0x0C	; 12
     4c6:	84 bb       	out	0x14, r24	; 20
     4c8:	08 95       	ret

000004ca <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     4ca:	8f b5       	in	r24, 0x2f	; 47
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     4d0:	8f b5       	in	r24, 0x2f	; 47
     4d2:	80 62       	ori	r24, 0x20	; 32
     4d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     4d6:	8f b5       	in	r24, 0x2f	; 47
     4d8:	82 60       	ori	r24, 0x02	; 2
     4da:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     4dc:	8e b5       	in	r24, 0x2e	; 46
     4de:	80 61       	ori	r24, 0x10	; 16
     4e0:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     4e2:	8e b5       	in	r24, 0x2e	; 46
     4e4:	81 60       	ori	r24, 0x01	; 1
     4e6:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	99 ef       	ldi	r25, 0xF9	; 249
     4ec:	97 bd       	out	0x27, r25	; 39
     4ee:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     4f0:	1b bc       	out	0x2b, r1	; 43
     4f2:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     4f4:	19 bc       	out	0x29, r1	; 41
     4f6:	18 bc       	out	0x28, r1	; 40
     4f8:	08 95       	ret

000004fa <init_motor_encoder>:
}


void init_motor_encoder(){
	arduinoData.motorEncoderLVal = 0;				//Reset the motor encoder variable
     4fa:	e2 e8       	ldi	r30, 0x82	; 130
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	11 82       	std	Z+1, r1	; 0x01
     500:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;				//---^
     502:	13 82       	std	Z+3, r1	; 0x03
     504:	12 82       	std	Z+2, r1	; 0x02
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     506:	85 b7       	in	r24, 0x35	; 53
     508:	81 60       	ori	r24, 0x01	; 1
     50a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     50c:	85 b7       	in	r24, 0x35	; 53
     50e:	84 60       	ori	r24, 0x04	; 4
     510:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     512:	8b b7       	in	r24, 0x3b	; 59
     514:	80 64       	ori	r24, 0x40	; 64
     516:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     518:	8b b7       	in	r24, 0x3b	; 59
     51a:	80 68       	ori	r24, 0x80	; 128
     51c:	8b bf       	out	0x3b, r24	; 59
     51e:	08 95       	ret

00000520 <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     520:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     524:	0e 94 65 02 	call	0x4ca	; 0x4ca <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     528:	0e 94 7d 02 	call	0x4fa	; 0x4fa <init_motor_encoder>
     52c:	08 95       	ret

0000052e <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	arduinoData.motorEncoderLVal++;							//Increase the encoder variable
     540:	e2 e8       	ldi	r30, 0x82	; 130
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	91 81       	ldd	r25, Z+1	; 0x01
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	91 83       	std	Z+1, r25	; 0x01
     54c:	80 83       	st	Z, r24
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_2>:


ISR(INT1_vect){
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
	arduinoData.motorEncoderRVal++;							//Increase the encoder variable
     572:	e2 e8       	ldi	r30, 0x82	; 130
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	93 81       	ldd	r25, Z+3	; 0x03
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	93 83       	std	Z+3, r25	; 0x03
     57e:	82 83       	std	Z+2, r24	; 0x02
}
     580:	ff 91       	pop	r31
     582:	ef 91       	pop	r30
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     592:	89 2b       	or	r24, r25
     594:	39 f0       	breq	.+14     	; 0x5a4 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     596:	8b b7       	in	r24, 0x3b	; 59
     598:	80 64       	ori	r24, 0x40	; 64
     59a:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     59c:	8b b7       	in	r24, 0x3b	; 59
     59e:	80 68       	ori	r24, 0x80	; 128
     5a0:	8b bf       	out	0x3b, r24	; 59
     5a2:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     5a4:	8b b7       	in	r24, 0x3b	; 59
     5a6:	8f 7b       	andi	r24, 0xBF	; 191
     5a8:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     5aa:	8b b7       	in	r24, 0x3b	; 59
     5ac:	8f 77       	andi	r24, 0x7F	; 127
     5ae:	8b bf       	out	0x3b, r24	; 59
     5b0:	08 95       	ret

000005b2 <motorDriver>:
	}
}


int motorDriver(struct rp6DataBP rp6Data){
     5b2:	2f 92       	push	r2
     5b4:	3f 92       	push	r3
     5b6:	4f 92       	push	r4
     5b8:	5f 92       	push	r5
     5ba:	6f 92       	push	r6
     5bc:	7f 92       	push	r7
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	a1 97       	sbiw	r28, 0x21	; 33
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	3e a8       	ldd	r3, Y+54	; 0x36
     5e8:	4f a8       	ldd	r4, Y+55	; 0x37
     5ea:	58 ac       	ldd	r5, Y+56	; 0x38
     5ec:	69 ac       	ldd	r6, Y+57	; 0x39
     5ee:	7a ac       	ldd	r7, Y+58	; 0x3a
     5f0:	8b ac       	ldd	r8, Y+59	; 0x3b
     5f2:	9c ac       	ldd	r9, Y+60	; 0x3c
     5f4:	2d ac       	ldd	r2, Y+61	; 0x3d
     5f6:	ae ac       	ldd	r10, Y+62	; 0x3e
     5f8:	a9 86       	std	Y+9, r10	; 0x09
     5fa:	bf ac       	ldd	r11, Y+63	; 0x3f
     5fc:	bc 86       	std	Y+12, r11	; 0x0c
     5fe:	24 96       	adiw	r28, 0x04	; 4
     600:	ce ac       	ldd	r12, Y+62	; 0x3e
     602:	df ac       	ldd	r13, Y+63	; 0x3f
     604:	24 97       	sbiw	r28, 0x04	; 4
     606:	d8 8e       	std	Y+24, r13	; 0x18
     608:	cf 8a       	std	Y+23, r12	; 0x17
     60a:	26 96       	adiw	r28, 0x06	; 6
     60c:	ee ac       	ldd	r14, Y+62	; 0x3e
     60e:	ff ac       	ldd	r15, Y+63	; 0x3f
     610:	26 97       	sbiw	r28, 0x06	; 6
     612:	fb 86       	std	Y+11, r15	; 0x0b
     614:	ea 86       	std	Y+10, r14	; 0x0a
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     616:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     61a:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.2019>
     61e:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.2019+0x1>
     622:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.2019+0x2>
     626:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.2019+0x3>
     62a:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.2019+0x4>
     62e:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.2019+0x5>
     632:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.2019+0x6>
     636:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.2019+0x7>
     63a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__cmpdi2>
     63e:	08 f4       	brcc	.+2      	; 0x642 <motorDriver+0x90>
     640:	90 c3       	rjmp	.+1824   	; 0xd62 <__stack+0x503>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     642:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     646:	a2 2e       	mov	r10, r18
     648:	b3 2e       	mov	r11, r19
     64a:	c4 2e       	mov	r12, r20
     64c:	d5 2e       	mov	r13, r21
     64e:	e6 2e       	mov	r14, r22
     650:	f7 2e       	mov	r15, r23
     652:	e8 2f       	mov	r30, r24
     654:	f9 2f       	mov	r31, r25
     656:	2a 96       	adiw	r28, 0x0a	; 10
     658:	8c ad       	ldd	r24, Y+60	; 0x3c
     65a:	9d ad       	ldd	r25, Y+61	; 0x3d
     65c:	ae ad       	ldd	r26, Y+62	; 0x3e
     65e:	bf ad       	ldd	r27, Y+63	; 0x3f
     660:	2a 97       	sbiw	r28, 0x0a	; 10
     662:	8c 01       	movw	r16, r24
     664:	9d 01       	movw	r18, r26
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	ba 01       	movw	r22, r20
     66c:	89 83       	std	Y+1, r24	; 0x01
     66e:	1a 83       	std	Y+2, r17	; 0x02
     670:	2b 83       	std	Y+3, r18	; 0x03
     672:	3c 83       	std	Y+4, r19	; 0x04
     674:	4d 83       	std	Y+5, r20	; 0x05
     676:	5e 83       	std	Y+6, r21	; 0x06
     678:	6f 83       	std	Y+7, r22	; 0x07
     67a:	78 87       	std	Y+8, r23	; 0x08
     67c:	28 2f       	mov	r18, r24
     67e:	31 2f       	mov	r19, r17
     680:	4b 81       	ldd	r20, Y+3	; 0x03
     682:	5c 81       	ldd	r21, Y+4	; 0x04
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 2f       	mov	r16, r30
     68e:	1f 2f       	mov	r17, r31
     690:	0e 94 40 0b 	call	0x1680	; 0x1680 <__adddi3>
     694:	2f 87       	std	Y+15, r18	; 0x0f
     696:	38 8b       	std	Y+16, r19	; 0x10
     698:	49 8b       	std	Y+17, r20	; 0x11
     69a:	5a 8b       	std	Y+18, r21	; 0x12
     69c:	6b 8b       	std	Y+19, r22	; 0x13
     69e:	7c 8b       	std	Y+20, r23	; 0x14
     6a0:	8d 8b       	std	Y+21, r24	; 0x15
     6a2:	9e 8b       	std	Y+22, r25	; 0x16
     6a4:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2019>
     6a8:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2019+0x1>
     6ac:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2019+0x2>
     6b0:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2019+0x3>
     6b4:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2019+0x4>
     6b8:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2019+0x5>
     6bc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2019+0x6>
     6c0:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2019+0x7>
	}
	
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     6c4:	a1 2c       	mov	r10, r1
     6c6:	0f 2e       	mov	r0, r31
     6c8:	f4 e6       	ldi	r31, 0x64	; 100
     6ca:	bf 2e       	mov	r11, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	c1 2c       	mov	r12, r1
     6d0:	d1 2c       	mov	r13, r1
     6d2:	e1 2c       	mov	r14, r1
     6d4:	f1 2c       	mov	r15, r1
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	23 2d       	mov	r18, r3
     6dc:	34 2d       	mov	r19, r4
     6de:	45 2d       	mov	r20, r5
     6e0:	56 2d       	mov	r21, r6
     6e2:	67 2d       	mov	r22, r7
     6e4:	78 2d       	mov	r23, r8
     6e6:	89 2d       	mov	r24, r9
     6e8:	92 2d       	mov	r25, r2
     6ea:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__muldi3>
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f4 e6       	ldi	r31, 0x64	; 100
     6f2:	af 2e       	mov	r10, r31
     6f4:	f0 2d       	mov	r31, r0
     6f6:	b1 2c       	mov	r11, r1
     6f8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divdi3>
     6fc:	22 2e       	mov	r2, r18
     6fe:	33 2e       	mov	r3, r19
     700:	44 2e       	mov	r4, r20
     702:	55 2e       	mov	r5, r21
     704:	66 2e       	mov	r6, r22
     706:	77 2e       	mov	r7, r23
     708:	88 2e       	mov	r8, r24
     70a:	99 2e       	mov	r9, r25
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     70c:	ca 84       	ldd	r12, Y+10	; 0x0a
     70e:	db 84       	ldd	r13, Y+11	; 0x0b
     710:	56 01       	movw	r10, r12
     712:	c1 2c       	mov	r12, r1
     714:	d1 2c       	mov	r13, r1
     716:	e1 2c       	mov	r14, r1
     718:	f1 2c       	mov	r15, r1
     71a:	87 01       	movw	r16, r14
     71c:	a9 82       	std	Y+1, r10	; 0x01
     71e:	ba 82       	std	Y+2, r11	; 0x02
     720:	cb 82       	std	Y+3, r12	; 0x03
     722:	dc 82       	std	Y+4, r13	; 0x04
     724:	ed 82       	std	Y+5, r14	; 0x05
     726:	fe 82       	std	Y+6, r15	; 0x06
     728:	0f 83       	std	Y+7, r16	; 0x07
     72a:	18 87       	std	Y+8, r17	; 0x08
     72c:	c1 2c       	mov	r12, r1
     72e:	d1 2c       	mov	r13, r1
     730:	e1 2c       	mov	r14, r1
     732:	f1 2c       	mov	r15, r1
     734:	00 e0       	ldi	r16, 0x00	; 0
     736:	10 e0       	ldi	r17, 0x00	; 0
     738:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__cmpdi2>
     73c:	44 f4       	brge	.+16     	; 0x74e <motorDriver+0x19c>
     73e:	21 2c       	mov	r2, r1
     740:	31 2c       	mov	r3, r1
     742:	41 2c       	mov	r4, r1
     744:	51 2c       	mov	r5, r1
     746:	61 2c       	mov	r6, r1
     748:	71 2c       	mov	r7, r1
     74a:	81 2c       	mov	r8, r1
     74c:	91 2c       	mov	r9, r1
	
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     74e:	d9 84       	ldd	r13, Y+9	; 0x09
     750:	ed 2d       	mov	r30, r13
     752:	dd 0c       	add	r13, r13
     754:	ff 0b       	sbc	r31, r31
     756:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2020>
     75a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2020+0x1>
     75e:	e8 17       	cp	r30, r24
     760:	f9 07       	cpc	r31, r25
     762:	49 f1       	breq	.+82     	; 0x7b6 <motorDriver+0x204>
     764:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2023>
     768:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2023+0x1>
     76c:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2023+0x2>
     770:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2023+0x3>
     774:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2023+0x4>
     778:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2023+0x5>
     77c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2023+0x6>
     780:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2023+0x7>
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__cmpdi2_s8>
     78a:	69 f4       	brne	.+26     	; 0x7a6 <motorDriver+0x1f4>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     78c:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2020+0x1>
     790:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2020>
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
     794:	21 2c       	mov	r2, r1
     796:	31 2c       	mov	r3, r1
     798:	41 2c       	mov	r4, r1
     79a:	51 2c       	mov	r5, r1
     79c:	61 2c       	mov	r6, r1
     79e:	71 2c       	mov	r7, r1
     7a0:	81 2c       	mov	r8, r1
     7a2:	91 2c       	mov	r9, r1
     7a4:	4d c0       	rjmp	.+154    	; 0x840 <motorDriver+0x28e>
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
	
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     7a6:	21 2c       	mov	r2, r1
     7a8:	31 2c       	mov	r3, r1
     7aa:	41 2c       	mov	r4, r1
     7ac:	51 2c       	mov	r5, r1
     7ae:	61 2c       	mov	r6, r1
     7b0:	71 2c       	mov	r7, r1
     7b2:	81 2c       	mov	r8, r1
     7b4:	91 2c       	mov	r9, r1
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     7b6:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <currentDriveSpeed.2023>
     7ba:	e9 86       	std	Y+9, r14	; 0x09
     7bc:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <currentDriveSpeed.2023+0x1>
     7c0:	fd 86       	std	Y+13, r15	; 0x0d
     7c2:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <currentDriveSpeed.2023+0x2>
     7c6:	0e 87       	std	Y+14, r16	; 0x0e
     7c8:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <currentDriveSpeed.2023+0x3>
     7cc:	19 8f       	std	Y+25, r17	; 0x19
     7ce:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <currentDriveSpeed.2023+0x4>
     7d2:	2a 8f       	std	Y+26, r18	; 0x1a
     7d4:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <currentDriveSpeed.2023+0x5>
     7d8:	3b 8f       	std	Y+27, r19	; 0x1b
     7da:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <currentDriveSpeed.2023+0x6>
     7de:	4c 8f       	std	Y+28, r20	; 0x1c
     7e0:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <currentDriveSpeed.2023+0x7>
     7e4:	5d 8f       	std	Y+29, r21	; 0x1d
     7e6:	22 2d       	mov	r18, r2
     7e8:	33 2d       	mov	r19, r3
     7ea:	44 2d       	mov	r20, r4
     7ec:	55 2d       	mov	r21, r5
     7ee:	66 2d       	mov	r22, r6
     7f0:	77 2d       	mov	r23, r7
     7f2:	88 2d       	mov	r24, r8
     7f4:	99 2d       	mov	r25, r9
     7f6:	ae 2c       	mov	r10, r14
     7f8:	bf 2c       	mov	r11, r15
     7fa:	c0 2e       	mov	r12, r16
     7fc:	d1 2e       	mov	r13, r17
     7fe:	ea 8c       	ldd	r14, Y+26	; 0x1a
     800:	fb 8c       	ldd	r15, Y+27	; 0x1b
     802:	0c 8d       	ldd	r16, Y+28	; 0x1c
     804:	1d 8d       	ldd	r17, Y+29	; 0x1d
     806:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__subdi3>
     80a:	2e 8f       	std	Y+30, r18	; 0x1e
     80c:	3f 8f       	std	Y+31, r19	; 0x1f
     80e:	48 a3       	std	Y+32, r20	; 0x20
     810:	59 a3       	std	Y+33, r21	; 0x21
     812:	a6 2e       	mov	r10, r22
     814:	b7 2e       	mov	r11, r23
     816:	08 2f       	mov	r16, r24
     818:	19 2f       	mov	r17, r25
     81a:	0e 94 08 08 	call	0x1010	; 0x1010 <__floatdisf>
     81e:	6b 01       	movw	r12, r22
     820:	7c 01       	movw	r14, r24
     822:	a7 01       	movw	r20, r14
     824:	96 01       	movw	r18, r12
     826:	c7 01       	movw	r24, r14
     828:	b6 01       	movw	r22, r12
     82a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     82e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     832:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fixunssfsi>
     836:	60 3d       	cpi	r22, 0xD0	; 208
     838:	77 40       	sbci	r23, 0x07	; 7
     83a:	81 05       	cpc	r24, r1
     83c:	91 05       	cpc	r25, r1
     83e:	88 f4       	brcc	.+34     	; 0x862 <__stack+0x3>
		currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     840:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2023>
     844:	30 92 71 00 	sts	0x0071, r3	; 0x800071 <currentDriveSpeed.2023+0x1>
     848:	40 92 72 00 	sts	0x0072, r4	; 0x800072 <currentDriveSpeed.2023+0x2>
     84c:	50 92 73 00 	sts	0x0073, r5	; 0x800073 <currentDriveSpeed.2023+0x3>
     850:	60 92 74 00 	sts	0x0074, r6	; 0x800074 <currentDriveSpeed.2023+0x4>
     854:	70 92 75 00 	sts	0x0075, r7	; 0x800075 <currentDriveSpeed.2023+0x5>
     858:	80 92 76 00 	sts	0x0076, r8	; 0x800076 <currentDriveSpeed.2023+0x6>
     85c:	90 92 77 00 	sts	0x0077, r9	; 0x800077 <currentDriveSpeed.2023+0x7>
     860:	c6 c0       	rjmp	.+396    	; 0x9ee <__stack+0x18f>
	}else{																			//If the difference is more than 2000
		if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     862:	2e 8d       	ldd	r18, Y+30	; 0x1e
     864:	3f 8d       	ldd	r19, Y+31	; 0x1f
     866:	48 a1       	ldd	r20, Y+32	; 0x20
     868:	59 a1       	ldd	r21, Y+33	; 0x21
     86a:	6a 2d       	mov	r22, r10
     86c:	7b 2d       	mov	r23, r11
     86e:	80 2f       	mov	r24, r16
     870:	91 2f       	mov	r25, r17
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__cmpdi2_s8>
     878:	0c f0       	brlt	.+2      	; 0x87c <__stack+0x1d>
     87a:	46 c0       	rjmp	.+140    	; 0x908 <__stack+0xa9>
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     87c:	29 81       	ldd	r18, Y+1	; 0x01
     87e:	3a 81       	ldd	r19, Y+2	; 0x02
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a9 84       	ldd	r10, Y+9	; 0x09
     88e:	bd 84       	ldd	r11, Y+13	; 0x0d
     890:	ce 84       	ldd	r12, Y+14	; 0x0e
     892:	d9 8c       	ldd	r13, Y+25	; 0x19
     894:	ea 8c       	ldd	r14, Y+26	; 0x1a
     896:	fb 8c       	ldd	r15, Y+27	; 0x1b
     898:	0c 8d       	ldd	r16, Y+28	; 0x1c
     89a:	1d 8d       	ldd	r17, Y+29	; 0x1d
     89c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__cmpdi2>
     8a0:	91 f0       	breq	.+36     	; 0x8c6 <__stack+0x67>
     8a2:	8c f0       	brlt	.+34     	; 0x8c6 <__stack+0x67>
				currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     8a4:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2023>
     8a8:	30 92 71 00 	sts	0x0071, r3	; 0x800071 <currentDriveSpeed.2023+0x1>
     8ac:	40 92 72 00 	sts	0x0072, r4	; 0x800072 <currentDriveSpeed.2023+0x2>
     8b0:	50 92 73 00 	sts	0x0073, r5	; 0x800073 <currentDriveSpeed.2023+0x3>
     8b4:	60 92 74 00 	sts	0x0074, r6	; 0x800074 <currentDriveSpeed.2023+0x4>
     8b8:	70 92 75 00 	sts	0x0075, r7	; 0x800075 <currentDriveSpeed.2023+0x5>
     8bc:	80 92 76 00 	sts	0x0076, r8	; 0x800076 <currentDriveSpeed.2023+0x6>
     8c0:	90 92 77 00 	sts	0x0077, r9	; 0x800077 <currentDriveSpeed.2023+0x7>
     8c4:	94 c0       	rjmp	.+296    	; 0x9ee <__stack+0x18f>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= 150;//rp6Data.accelerationRate;//((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     8c6:	29 85       	ldd	r18, Y+9	; 0x09
     8c8:	3d 85       	ldd	r19, Y+13	; 0x0d
     8ca:	4e 85       	ldd	r20, Y+14	; 0x0e
     8cc:	59 8d       	ldd	r21, Y+25	; 0x19
     8ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
     8d0:	7b 8d       	ldd	r23, Y+27	; 0x1b
     8d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8d6:	26 59       	subi	r18, 0x96	; 150
     8d8:	31 09       	sbc	r19, r1
     8da:	41 09       	sbc	r20, r1
     8dc:	51 09       	sbc	r21, r1
     8de:	61 09       	sbc	r22, r1
     8e0:	71 09       	sbc	r23, r1
     8e2:	81 09       	sbc	r24, r1
     8e4:	91 09       	sbc	r25, r1
     8e6:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2023>
     8ea:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2023+0x1>
     8ee:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2023+0x2>
     8f2:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2023+0x3>
     8f6:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2023+0x4>
     8fa:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2023+0x5>
     8fe:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2023+0x6>
     902:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2023+0x7>
     906:	73 c0       	rjmp	.+230    	; 0x9ee <__stack+0x18f>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     908:	29 81       	ldd	r18, Y+1	; 0x01
     90a:	3a 81       	ldd	r19, Y+2	; 0x02
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a9 84       	ldd	r10, Y+9	; 0x09
     91a:	bd 84       	ldd	r11, Y+13	; 0x0d
     91c:	ce 84       	ldd	r12, Y+14	; 0x0e
     91e:	d9 8c       	ldd	r13, Y+25	; 0x19
     920:	ea 8c       	ldd	r14, Y+26	; 0x1a
     922:	fb 8c       	ldd	r15, Y+27	; 0x1b
     924:	0c 8d       	ldd	r16, Y+28	; 0x1c
     926:	1d 8d       	ldd	r17, Y+29	; 0x1d
     928:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__cmpdi2>
     92c:	a1 f0       	breq	.+40     	; 0x956 <__stack+0xf7>
     92e:	9c f0       	brlt	.+38     	; 0x956 <__stack+0xf7>
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     930:	0e 94 40 0b 	call	0x1680	; 0x1680 <__adddi3>
     934:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2023>
     938:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2023+0x1>
     93c:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2023+0x2>
     940:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2023+0x3>
     944:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2023+0x4>
     948:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2023+0x5>
     94c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2023+0x6>
     950:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2023+0x7>
     954:	4c c0       	rjmp	.+152    	; 0x9ee <__stack+0x18f>
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += 150;//rp6Data.accelerationRate;//((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     956:	29 85       	ldd	r18, Y+9	; 0x09
     958:	3d 85       	ldd	r19, Y+13	; 0x0d
     95a:	4e 85       	ldd	r20, Y+14	; 0x0e
     95c:	59 8d       	ldd	r21, Y+25	; 0x19
     95e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     960:	7b 8d       	ldd	r23, Y+27	; 0x1b
     962:	8c 8d       	ldd	r24, Y+28	; 0x1c
     964:	9d 8d       	ldd	r25, Y+29	; 0x1d
     966:	2a 56       	subi	r18, 0x6A	; 106
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	4f 4f       	sbci	r20, 0xFF	; 255
     96c:	5f 4f       	sbci	r21, 0xFF	; 255
     96e:	6f 4f       	sbci	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	8f 4f       	sbci	r24, 0xFF	; 255
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	29 83       	std	Y+1, r18	; 0x01
     978:	39 87       	std	Y+9, r19	; 0x09
     97a:	4d 87       	std	Y+13, r20	; 0x0d
     97c:	5e 87       	std	Y+14, r21	; 0x0e
     97e:	b6 2f       	mov	r27, r22
     980:	a7 2f       	mov	r26, r23
     982:	f8 2f       	mov	r31, r24
     984:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     986:	22 2d       	mov	r18, r2
     988:	33 2d       	mov	r19, r3
     98a:	44 2d       	mov	r20, r4
     98c:	55 2d       	mov	r21, r5
     98e:	66 2d       	mov	r22, r6
     990:	77 2d       	mov	r23, r7
     992:	88 2d       	mov	r24, r8
     994:	99 2d       	mov	r25, r9
     996:	a9 80       	ldd	r10, Y+1	; 0x01
     998:	b9 84       	ldd	r11, Y+9	; 0x09
     99a:	cd 84       	ldd	r12, Y+13	; 0x0d
     99c:	de 84       	ldd	r13, Y+14	; 0x0e
     99e:	eb 2e       	mov	r14, r27
     9a0:	fa 2e       	mov	r15, r26
     9a2:	0f 2f       	mov	r16, r31
     9a4:	1e 2f       	mov	r17, r30
     9a6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__cmpdi2>
     9aa:	8c f0       	brlt	.+34     	; 0x9ce <__stack+0x16f>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += 150;//rp6Data.accelerationRate;//((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     9ac:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.2023>
     9b0:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.2023+0x1>
     9b4:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.2023+0x2>
     9b8:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.2023+0x3>
     9bc:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2023+0x4>
     9c0:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.2023+0x5>
     9c4:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.2023+0x6>
     9c8:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.2023+0x7>
     9cc:	10 c0       	rjmp	.+32     	; 0x9ee <__stack+0x18f>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     9ce:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2023>
     9d2:	30 92 71 00 	sts	0x0071, r3	; 0x800071 <currentDriveSpeed.2023+0x1>
     9d6:	40 92 72 00 	sts	0x0072, r4	; 0x800072 <currentDriveSpeed.2023+0x2>
     9da:	50 92 73 00 	sts	0x0073, r5	; 0x800073 <currentDriveSpeed.2023+0x3>
     9de:	60 92 74 00 	sts	0x0074, r6	; 0x800074 <currentDriveSpeed.2023+0x4>
     9e2:	70 92 75 00 	sts	0x0075, r7	; 0x800075 <currentDriveSpeed.2023+0x5>
     9e6:	80 92 76 00 	sts	0x0076, r8	; 0x800076 <currentDriveSpeed.2023+0x6>
     9ea:	90 92 77 00 	sts	0x0077, r9	; 0x800077 <currentDriveSpeed.2023+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     9ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2020>
     9f2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2020+0x1>
     9f6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2024+0x1>
     9fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2024>
	rightMotorDirection = currentDriveDirection;
     9fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     a02:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     a06:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2023>
     a0a:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2023+0x1>
     a0e:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2023+0x2>
     a12:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2023+0x3>
     a16:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2023+0x4>
     a1a:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2023+0x5>
     a1e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2023+0x6>
     a22:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2023+0x7>
     a26:	c2 2e       	mov	r12, r18
     a28:	d3 2e       	mov	r13, r19
     a2a:	e4 2e       	mov	r14, r20
     a2c:	f5 2e       	mov	r15, r21
     a2e:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.2026>
     a32:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.2026+0x1>
     a36:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.2026+0x2>
     a3a:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.2026+0x3>
	rightMotorSpeed = currentDriveSpeed;
     a3e:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.2027>
     a42:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.2027+0x1>
     a46:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.2027+0x2>
     a4a:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.2027+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     a4e:	0c 85       	ldd	r16, Y+12	; 0x0c
     a50:	e0 2f       	mov	r30, r16
     a52:	00 0f       	add	r16, r16
     a54:	ff 0b       	sbc	r31, r31
     a56:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end>
     a5a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x1>
     a5e:	ea 17       	cp	r30, r26
     a60:	fb 07       	cpc	r31, r27
     a62:	81 f1       	breq	.+96     	; 0xac4 <__stack+0x265>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     a64:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
     a68:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     a6c:	ef 2b       	or	r30, r31
     a6e:	29 f4       	brne	.+10     	; 0xa7a <__stack+0x21b>
			enableMotorEncoder(1);											//Enable the encoders
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 c9 02 	call	0x592	; 0x592 <enableMotorEncoder>
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <__stack+0x223>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 c9 02 	call	0x592	; 0x592 <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     a82:	2f 85       	ldd	r18, Y+15	; 0x0f
     a84:	38 89       	ldd	r19, Y+16	; 0x10
     a86:	49 89       	ldd	r20, Y+17	; 0x11
     a88:	5a 89       	ldd	r21, Y+18	; 0x12
     a8a:	6b 89       	ldd	r22, Y+19	; 0x13
     a8c:	7c 89       	ldd	r23, Y+20	; 0x14
     a8e:	8d 89       	ldd	r24, Y+21	; 0x15
     a90:	9e 89       	ldd	r25, Y+22	; 0x16
     a92:	20 56       	subi	r18, 0x60	; 96
     a94:	39 47       	sbci	r19, 0x79	; 121
     a96:	4e 4f       	sbci	r20, 0xFE	; 254
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	6f 4f       	sbci	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	8f 4f       	sbci	r24, 0xFF	; 255
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2019>
     aa6:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2019+0x1>
     aaa:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2019+0x2>
     aae:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2019+0x3>
     ab2:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2019+0x4>
     ab6:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2019+0x5>
     aba:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2019+0x6>
     abe:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2019+0x7>
     ac2:	cf c0       	rjmp	.+414    	; 0xc62 <__stack+0x403>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     ac4:	ef 3f       	cpi	r30, 0xFF	; 255
     ac6:	1f ef       	ldi	r17, 0xFF	; 255
     ac8:	f1 07       	cpc	r31, r17
     aca:	09 f0       	breq	.+2      	; 0xace <__stack+0x26f>
     acc:	45 c0       	rjmp	.+138    	; 0xb58 <__stack+0x2f9>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__cmpdi2_s8>
     ad4:	29 f5       	brne	.+74     	; 0xb20 <__stack+0x2c1>
			leftMotorDirection = 0;											//Turn the left motor backwards
     ad6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2024+0x1>
     ada:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2024>
			rightMotorDirection = 1;										//Turn the right motor forwards
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     ae6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     aea:	8f 89       	ldd	r24, Y+23	; 0x17
     aec:	98 8d       	ldd	r25, Y+24	; 0x18
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	2a 85       	ldd	r18, Y+10	; 0x0a
     af4:	3b 85       	ldd	r19, Y+11	; 0x0b
     af6:	82 0f       	add	r24, r18
     af8:	93 1f       	adc	r25, r19
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2026>
     b02:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2026+0x1>
     b06:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2026+0x2>
     b0a:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2026+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     b0e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2027>
     b12:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2027+0x1>
     b16:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2027+0x2>
     b1a:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2027+0x3>
     b1e:	a1 c0       	rjmp	.+322    	; 0xc62 <__stack+0x403>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = rp6Data.driveSpeedThreshold;							//Set the left motor to minimal
     b20:	4a 85       	ldd	r20, Y+10	; 0x0a
     b22:	5b 85       	ldd	r21, Y+11	; 0x0b
     b24:	ca 01       	movw	r24, r20
     b26:	a0 e0       	ldi	r26, 0x00	; 0
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2026>
     b2e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2026+0x1>
     b32:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2026+0x2>
     b36:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2026+0x3>
			rightMotorSpeed += rp6Data.turnRate;									//Increase the right motor with the turn rate
     b3a:	6f 89       	ldd	r22, Y+23	; 0x17
     b3c:	78 8d       	ldd	r23, Y+24	; 0x18
     b3e:	c6 0e       	add	r12, r22
     b40:	d7 1e       	adc	r13, r23
     b42:	e1 1c       	adc	r14, r1
     b44:	f1 1c       	adc	r15, r1
     b46:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2027>
     b4a:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2027+0x1>
     b4e:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2027+0x2>
     b52:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2027+0x3>
     b56:	85 c0       	rjmp	.+266    	; 0xc62 <__stack+0x403>
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     b58:	30 97       	sbiw	r30, 0x00	; 0
     b5a:	e1 f5       	brne	.+120    	; 0xbd4 <__stack+0x375>
		if(arduinoData.motorEncoderLVal != arduinoData.motorEncoderRVal){
     b5c:	e2 e8       	ldi	r30, 0x82	; 130
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	00 81       	ld	r16, Z
     b62:	11 81       	ldd	r17, Z+1	; 0x01
     b64:	a2 80       	ldd	r10, Z+2	; 0x02
     b66:	b3 80       	ldd	r11, Z+3	; 0x03
     b68:	0a 15       	cp	r16, r10
     b6a:	1b 05       	cpc	r17, r11
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__stack+0x311>
     b6e:	79 c0       	rjmp	.+242    	; 0xc62 <__stack+0x403>
			if(arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
     b70:	c7 01       	movw	r24, r14
     b72:	b6 01       	movw	r22, r12
     b74:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatunsisf>
     b78:	6b 01       	movw	r12, r22
     b7a:	7c 01       	movw	r14, r24
     b7c:	b8 01       	movw	r22, r16
     b7e:	6a 19       	sub	r22, r10
     b80:	7b 09       	sbc	r23, r11
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatunsisf>
     b8a:	4b 01       	movw	r8, r22
     b8c:	5c 01       	movw	r10, r24
     b8e:	a5 01       	movw	r20, r10
     b90:	94 01       	movw	r18, r8
     b92:	c5 01       	movw	r24, r10
     b94:	b4 01       	movw	r22, r8
     b96:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     b9a:	0e 94 5d 09 	call	0x12ba	; 0x12ba <sqrt>
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsf3>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	48 ec       	ldi	r20, 0xC8	; 200
     bb0:	52 e4       	ldi	r21, 0x42	; 66
     bb2:	0e 94 67 07 	call	0xece	; 0xece <__divsf3>
     bb6:	a7 01       	movw	r20, r14
     bb8:	96 01       	movw	r18, r12
     bba:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     bbe:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fixunssfsi>
     bc2:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.2027>
     bc6:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.2027+0x1>
     bca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.2027+0x2>
     bce:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.2027+0x3>
     bd2:	47 c0       	rjmp	.+142    	; 0xc62 <__stack+0x403>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	09 f0       	breq	.+2      	; 0xbda <__stack+0x37b>
     bd8:	44 c0       	rjmp	.+136    	; 0xc62 <__stack+0x403>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__cmpdi2_s8>
     be0:	29 f5       	brne	.+74     	; 0xc2c <__stack+0x3cd>
			leftMotorDirection = 1;											//Left motor forward
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2024+0x1>
     bea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2024>
			rightMotorDirection = 0;										//Right motor backward
     bee:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     bf2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     bf6:	8f 89       	ldd	r24, Y+23	; 0x17
     bf8:	98 8d       	ldd	r25, Y+24	; 0x18
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	ea 85       	ldd	r30, Y+10	; 0x0a
     c00:	fb 85       	ldd	r31, Y+11	; 0x0b
     c02:	8e 0f       	add	r24, r30
     c04:	9f 1f       	adc	r25, r31
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2026>
     c0e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2026+0x1>
     c12:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2026+0x2>
     c16:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2026+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     c1a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2027>
     c1e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2027+0x1>
     c22:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2027+0x2>
     c26:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2027+0x3>
     c2a:	1b c0       	rjmp	.+54     	; 0xc62 <__stack+0x403>
			}else{														//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed += rp6Data.turnRate;										//Increase the left motor with the set turn rate
     c2c:	af 88       	ldd	r10, Y+23	; 0x17
     c2e:	b8 8c       	ldd	r11, Y+24	; 0x18
     c30:	ca 0c       	add	r12, r10
     c32:	db 1c       	adc	r13, r11
     c34:	e1 1c       	adc	r14, r1
     c36:	f1 1c       	adc	r15, r1
     c38:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.2026>
     c3c:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.2026+0x1>
     c40:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.2026+0x2>
     c44:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.2026+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold;							//Set right motor to minimal
     c48:	ca 84       	ldd	r12, Y+10	; 0x0a
     c4a:	db 84       	ldd	r13, Y+11	; 0x0b
     c4c:	c6 01       	movw	r24, r12
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2027>
     c56:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2027+0x1>
     c5a:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2027+0x2>
     c5e:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2027+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     c62:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2027>
     c66:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2027+0x1>
     c6a:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2027+0x2>
     c6e:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2027+0x3>
     c72:	d7 01       	movw	r26, r14
     c74:	c6 01       	movw	r24, r12
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	aa 1f       	adc	r26, r26
     c7c:	bb 1f       	adc	r27, r27
     c7e:	8c 0d       	add	r24, r12
     c80:	9d 1d       	adc	r25, r13
     c82:	ae 1d       	adc	r26, r14
     c84:	bf 1d       	adc	r27, r15
     c86:	ac 01       	movw	r20, r24
     c88:	bd 01       	movw	r22, r26
     c8a:	44 0f       	add	r20, r20
     c8c:	55 1f       	adc	r21, r21
     c8e:	66 1f       	adc	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	44 0f       	add	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	66 1f       	adc	r22, r22
     c98:	77 1f       	adc	r23, r23
     c9a:	8c 01       	movw	r16, r24
     c9c:	9d 01       	movw	r18, r26
     c9e:	04 0f       	add	r16, r20
     ca0:	15 1f       	adc	r17, r21
     ca2:	26 1f       	adc	r18, r22
     ca4:	37 1f       	adc	r19, r23
     ca6:	c9 01       	movw	r24, r18
     ca8:	b8 01       	movw	r22, r16
     caa:	24 e6       	ldi	r18, 0x64	; 100
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	0e 94 c6 09 	call	0x138c	; 0x138c <__udivmodsi4>
     cb6:	c2 0e       	add	r12, r18
     cb8:	d3 1e       	adc	r13, r19
     cba:	e4 1e       	adc	r14, r20
     cbc:	f5 1e       	adc	r15, r21
     cbe:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2027>
     cc2:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2027+0x1>
     cc6:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2027+0x2>
     cca:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2027+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     cce:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2026>
     cd2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2026+0x1>
     cd6:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2026+0x2>
     cda:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2026+0x3>
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	94 46       	sbci	r25, 0x64	; 100
     ce2:	a1 05       	cpc	r26, r1
     ce4:	b1 05       	cpc	r27, r1
     ce6:	60 f0       	brcs	.+24     	; 0xd00 <__stack+0x4a1>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	94 e6       	ldi	r25, 0x64	; 100
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2026>
     cf4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2026+0x1>
     cf8:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2026+0x2>
     cfc:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2026+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     d00:	21 e3       	ldi	r18, 0x31	; 49
     d02:	c2 16       	cp	r12, r18
     d04:	25 e7       	ldi	r18, 0x75	; 117
     d06:	d2 06       	cpc	r13, r18
     d08:	e1 04       	cpc	r14, r1
     d0a:	f1 04       	cpc	r15, r1
     d0c:	60 f0       	brcs	.+24     	; 0xd26 <__stack+0x4c7>
		rightMotorSpeed = 30000;						//Set it back to its max
     d0e:	80 e3       	ldi	r24, 0x30	; 48
     d10:	95 e7       	ldi	r25, 0x75	; 117
     d12:	a0 e0       	ldi	r26, 0x00	; 0
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2027>
     d1a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2027+0x1>
     d1e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2027+0x2>
     d22:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2027+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     d26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2024>
     d2a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2024+0x1>
     d2e:	89 2b       	or	r24, r25
     d30:	11 f0       	breq	.+4      	; 0xd36 <__stack+0x4d7>
		PORTC &= 0b11111011;
     d32:	aa 98       	cbi	0x15, 2	; 21
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <__stack+0x4d9>
	}else{
		PORTC |= 0b00000100;
     d36:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     d38:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     d3c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     d40:	89 2b       	or	r24, r25
     d42:	11 f0       	breq	.+4      	; 0xd48 <__stack+0x4e9>
		PORTC &= 0b11110111;
     d44:	ab 98       	cbi	0x15, 3	; 21
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <__stack+0x4eb>
	}else{
		PORTC |= 0b00001000;
     d48:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     d4a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2027>
     d4e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2027+0x1>
     d52:	9b bd       	out	0x2b, r25	; 43
     d54:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     d56:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2026>
     d5a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2026+0x1>
     d5e:	99 bd       	out	0x29, r25	; 41
     d60:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	a1 96       	adiw	r28, 0x21	; 33
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	3f 90       	pop	r3
     d94:	2f 90       	pop	r2
     d96:	08 95       	ret

00000d98 <main>:
	}
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     d98:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     d9a:	0e 94 50 00 	call	0xa0	; 0xa0 <init_micros>
	
	init_motor();
     d9e:	0e 94 90 02 	call	0x520	; 0x520 <init_motor>
	init_LED();
     da2:	0e 94 49 00 	call	0x92	; 0x92 <init_LED>
	
	init_rp6Data();
     da6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_rp6Data>
	init_arduinoData();
     daa:	0e 94 1e 01 	call	0x23c	; 0x23c <init_arduinoData>
	
	init_TWI();
     dae:	0e 94 ed 00 	call	0x1da	; 0x1da <init_TWI>
	
	clearSendData();
     db2:	0e 94 25 01 	call	0x24a	; 0x24a <clearSendData>
	clearReceiveData();
     db6:	0e 94 2e 01 	call	0x25c	; 0x25c <clearReceiveData>
	
	while(1){
		motorDriver(rp6Data);
     dba:	8d b7       	in	r24, 0x3d	; 61
     dbc:	9e b7       	in	r25, 0x3e	; 62
     dbe:	45 97       	sbiw	r24, 0x15	; 21
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	9e bf       	out	0x3e, r25	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	8d bf       	out	0x3d, r24	; 61
     dca:	ad b7       	in	r26, 0x3d	; 61
     dcc:	be b7       	in	r27, 0x3e	; 62
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	85 e1       	ldi	r24, 0x15	; 21
     dd2:	ea e9       	ldi	r30, 0x9A	; 154
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	01 90       	ld	r0, Z+
     dd8:	0d 92       	st	X+, r0
     dda:	8a 95       	dec	r24
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <main+0x3e>
     dde:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <motorDriver>
     de2:	8d b7       	in	r24, 0x3d	; 61
     de4:	9e b7       	in	r25, 0x3e	; 62
     de6:	45 96       	adiw	r24, 0x15	; 21
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	9e bf       	out	0x3e, r25	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	8d bf       	out	0x3d, r24	; 61
     df2:	e3 cf       	rjmp	.-58     	; 0xdba <main+0x22>

00000df4 <__subsf3>:
     df4:	50 58       	subi	r21, 0x80	; 128

00000df6 <__addsf3>:
     df6:	bb 27       	eor	r27, r27
     df8:	aa 27       	eor	r26, r26
     dfa:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3x>
     dfe:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_round>
     e02:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fp_pscA>
     e06:	38 f0       	brcs	.+14     	; 0xe16 <__addsf3+0x20>
     e08:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_pscB>
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <__addsf3+0x20>
     e0e:	39 f4       	brne	.+14     	; 0xe1e <__addsf3+0x28>
     e10:	9f 3f       	cpi	r25, 0xFF	; 255
     e12:	19 f4       	brne	.+6      	; 0xe1a <__addsf3+0x24>
     e14:	26 f4       	brtc	.+8      	; 0xe1e <__addsf3+0x28>
     e16:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>
     e1a:	0e f4       	brtc	.+2      	; 0xe1e <__addsf3+0x28>
     e1c:	e0 95       	com	r30
     e1e:	e7 fb       	bst	r30, 7
     e20:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>

00000e24 <__addsf3x>:
     e24:	e9 2f       	mov	r30, r25
     e26:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_split3>
     e2a:	58 f3       	brcs	.-42     	; 0xe02 <__addsf3+0xc>
     e2c:	ba 17       	cp	r27, r26
     e2e:	62 07       	cpc	r22, r18
     e30:	73 07       	cpc	r23, r19
     e32:	84 07       	cpc	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	20 f0       	brcs	.+8      	; 0xe40 <__addsf3x+0x1c>
     e38:	79 f4       	brne	.+30     	; 0xe58 <__addsf3x+0x34>
     e3a:	a6 f5       	brtc	.+104    	; 0xea4 <__addsf3x+0x80>
     e3c:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_zero>
     e40:	0e f4       	brtc	.+2      	; 0xe44 <__addsf3x+0x20>
     e42:	e0 95       	com	r30
     e44:	0b 2e       	mov	r0, r27
     e46:	ba 2f       	mov	r27, r26
     e48:	a0 2d       	mov	r26, r0
     e4a:	0b 01       	movw	r0, r22
     e4c:	b9 01       	movw	r22, r18
     e4e:	90 01       	movw	r18, r0
     e50:	0c 01       	movw	r0, r24
     e52:	ca 01       	movw	r24, r20
     e54:	a0 01       	movw	r20, r0
     e56:	11 24       	eor	r1, r1
     e58:	ff 27       	eor	r31, r31
     e5a:	59 1b       	sub	r21, r25
     e5c:	99 f0       	breq	.+38     	; 0xe84 <__addsf3x+0x60>
     e5e:	59 3f       	cpi	r21, 0xF9	; 249
     e60:	50 f4       	brcc	.+20     	; 0xe76 <__addsf3x+0x52>
     e62:	50 3e       	cpi	r21, 0xE0	; 224
     e64:	68 f1       	brcs	.+90     	; 0xec0 <__addsf3x+0x9c>
     e66:	1a 16       	cp	r1, r26
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	a2 2f       	mov	r26, r18
     e6c:	23 2f       	mov	r18, r19
     e6e:	34 2f       	mov	r19, r20
     e70:	44 27       	eor	r20, r20
     e72:	58 5f       	subi	r21, 0xF8	; 248
     e74:	f3 cf       	rjmp	.-26     	; 0xe5c <__addsf3x+0x38>
     e76:	46 95       	lsr	r20
     e78:	37 95       	ror	r19
     e7a:	27 95       	ror	r18
     e7c:	a7 95       	ror	r26
     e7e:	f0 40       	sbci	r31, 0x00	; 0
     e80:	53 95       	inc	r21
     e82:	c9 f7       	brne	.-14     	; 0xe76 <__addsf3x+0x52>
     e84:	7e f4       	brtc	.+30     	; 0xea4 <__addsf3x+0x80>
     e86:	1f 16       	cp	r1, r31
     e88:	ba 0b       	sbc	r27, r26
     e8a:	62 0b       	sbc	r22, r18
     e8c:	73 0b       	sbc	r23, r19
     e8e:	84 0b       	sbc	r24, r20
     e90:	ba f0       	brmi	.+46     	; 0xec0 <__addsf3x+0x9c>
     e92:	91 50       	subi	r25, 0x01	; 1
     e94:	a1 f0       	breq	.+40     	; 0xebe <__addsf3x+0x9a>
     e96:	ff 0f       	add	r31, r31
     e98:	bb 1f       	adc	r27, r27
     e9a:	66 1f       	adc	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	c2 f7       	brpl	.-16     	; 0xe92 <__addsf3x+0x6e>
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <__addsf3x+0x9c>
     ea4:	ba 0f       	add	r27, r26
     ea6:	62 1f       	adc	r22, r18
     ea8:	73 1f       	adc	r23, r19
     eaa:	84 1f       	adc	r24, r20
     eac:	48 f4       	brcc	.+18     	; 0xec0 <__addsf3x+0x9c>
     eae:	87 95       	ror	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f7 95       	ror	r31
     eb8:	9e 3f       	cpi	r25, 0xFE	; 254
     eba:	08 f0       	brcs	.+2      	; 0xebe <__addsf3x+0x9a>
     ebc:	b0 cf       	rjmp	.-160    	; 0xe1e <__addsf3+0x28>
     ebe:	93 95       	inc	r25
     ec0:	88 0f       	add	r24, r24
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0xa2>
     ec4:	99 27       	eor	r25, r25
     ec6:	ee 0f       	add	r30, r30
     ec8:	97 95       	ror	r25
     eca:	87 95       	ror	r24
     ecc:	08 95       	ret

00000ece <__divsf3>:
     ece:	0e 94 7b 07 	call	0xef6	; 0xef6 <__divsf3x>
     ed2:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_round>
     ed6:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_pscB>
     eda:	58 f0       	brcs	.+22     	; 0xef2 <__divsf3+0x24>
     edc:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fp_pscA>
     ee0:	40 f0       	brcs	.+16     	; 0xef2 <__divsf3+0x24>
     ee2:	29 f4       	brne	.+10     	; 0xeee <__divsf3+0x20>
     ee4:	5f 3f       	cpi	r21, 0xFF	; 255
     ee6:	29 f0       	breq	.+10     	; 0xef2 <__divsf3+0x24>
     ee8:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
     eec:	51 11       	cpse	r21, r1
     eee:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>
     ef2:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>

00000ef6 <__divsf3x>:
     ef6:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_split3>
     efa:	68 f3       	brcs	.-38     	; 0xed6 <__divsf3+0x8>

00000efc <__divsf3_pse>:
     efc:	99 23       	and	r25, r25
     efe:	b1 f3       	breq	.-20     	; 0xeec <__divsf3+0x1e>
     f00:	55 23       	and	r21, r21
     f02:	91 f3       	breq	.-28     	; 0xee8 <__divsf3+0x1a>
     f04:	95 1b       	sub	r25, r21
     f06:	55 0b       	sbc	r21, r21
     f08:	bb 27       	eor	r27, r27
     f0a:	aa 27       	eor	r26, r26
     f0c:	62 17       	cp	r22, r18
     f0e:	73 07       	cpc	r23, r19
     f10:	84 07       	cpc	r24, r20
     f12:	38 f0       	brcs	.+14     	; 0xf22 <__divsf3_pse+0x26>
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	44 1f       	adc	r20, r20
     f1e:	aa 1f       	adc	r26, r26
     f20:	a9 f3       	breq	.-22     	; 0xf0c <__divsf3_pse+0x10>
     f22:	35 d0       	rcall	.+106    	; 0xf8e <__divsf3_pse+0x92>
     f24:	0e 2e       	mov	r0, r30
     f26:	3a f0       	brmi	.+14     	; 0xf36 <__divsf3_pse+0x3a>
     f28:	e0 e8       	ldi	r30, 0x80	; 128
     f2a:	32 d0       	rcall	.+100    	; 0xf90 <__divsf3_pse+0x94>
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	50 40       	sbci	r21, 0x00	; 0
     f30:	e6 95       	lsr	r30
     f32:	00 1c       	adc	r0, r0
     f34:	ca f7       	brpl	.-14     	; 0xf28 <__divsf3_pse+0x2c>
     f36:	2b d0       	rcall	.+86     	; 0xf8e <__divsf3_pse+0x92>
     f38:	fe 2f       	mov	r31, r30
     f3a:	29 d0       	rcall	.+82     	; 0xf8e <__divsf3_pse+0x92>
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	bb 1f       	adc	r27, r27
     f44:	26 17       	cp	r18, r22
     f46:	37 07       	cpc	r19, r23
     f48:	48 07       	cpc	r20, r24
     f4a:	ab 07       	cpc	r26, r27
     f4c:	b0 e8       	ldi	r27, 0x80	; 128
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__divsf3_pse+0x56>
     f50:	bb 0b       	sbc	r27, r27
     f52:	80 2d       	mov	r24, r0
     f54:	bf 01       	movw	r22, r30
     f56:	ff 27       	eor	r31, r31
     f58:	93 58       	subi	r25, 0x83	; 131
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	3a f0       	brmi	.+14     	; 0xf6c <__divsf3_pse+0x70>
     f5e:	9e 3f       	cpi	r25, 0xFE	; 254
     f60:	51 05       	cpc	r21, r1
     f62:	78 f0       	brcs	.+30     	; 0xf82 <__divsf3_pse+0x86>
     f64:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
     f68:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>
     f6c:	5f 3f       	cpi	r21, 0xFF	; 255
     f6e:	e4 f3       	brlt	.-8      	; 0xf68 <__divsf3_pse+0x6c>
     f70:	98 3e       	cpi	r25, 0xE8	; 232
     f72:	d4 f3       	brlt	.-12     	; 0xf68 <__divsf3_pse+0x6c>
     f74:	86 95       	lsr	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b7 95       	ror	r27
     f7c:	f7 95       	ror	r31
     f7e:	9f 5f       	subi	r25, 0xFF	; 255
     f80:	c9 f7       	brne	.-14     	; 0xf74 <__divsf3_pse+0x78>
     f82:	88 0f       	add	r24, r24
     f84:	91 1d       	adc	r25, r1
     f86:	96 95       	lsr	r25
     f88:	87 95       	ror	r24
     f8a:	97 f9       	bld	r25, 7
     f8c:	08 95       	ret
     f8e:	e1 e0       	ldi	r30, 0x01	; 1
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	bb 1f       	adc	r27, r27
     f98:	62 17       	cp	r22, r18
     f9a:	73 07       	cpc	r23, r19
     f9c:	84 07       	cpc	r24, r20
     f9e:	ba 07       	cpc	r27, r26
     fa0:	20 f0       	brcs	.+8      	; 0xfaa <__divsf3_pse+0xae>
     fa2:	62 1b       	sub	r22, r18
     fa4:	73 0b       	sbc	r23, r19
     fa6:	84 0b       	sbc	r24, r20
     fa8:	ba 0b       	sbc	r27, r26
     faa:	ee 1f       	adc	r30, r30
     fac:	88 f7       	brcc	.-30     	; 0xf90 <__divsf3_pse+0x94>
     fae:	e0 95       	com	r30
     fb0:	08 95       	ret

00000fb2 <__fixunssfsi>:
     fb2:	0e 94 c9 08 	call	0x1192	; 0x1192 <__fp_splitA>
     fb6:	88 f0       	brcs	.+34     	; 0xfda <__fixunssfsi+0x28>
     fb8:	9f 57       	subi	r25, 0x7F	; 127
     fba:	98 f0       	brcs	.+38     	; 0xfe2 <__fixunssfsi+0x30>
     fbc:	b9 2f       	mov	r27, r25
     fbe:	99 27       	eor	r25, r25
     fc0:	b7 51       	subi	r27, 0x17	; 23
     fc2:	b0 f0       	brcs	.+44     	; 0xff0 <__fixunssfsi+0x3e>
     fc4:	e1 f0       	breq	.+56     	; 0xffe <__fixunssfsi+0x4c>
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	1a f0       	brmi	.+6      	; 0xfd6 <__fixunssfsi+0x24>
     fd0:	ba 95       	dec	r27
     fd2:	c9 f7       	brne	.-14     	; 0xfc6 <__fixunssfsi+0x14>
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <__fixunssfsi+0x4c>
     fd6:	b1 30       	cpi	r27, 0x01	; 1
     fd8:	91 f0       	breq	.+36     	; 0xffe <__fixunssfsi+0x4c>
     fda:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_zero>
     fde:	b1 e0       	ldi	r27, 0x01	; 1
     fe0:	08 95       	ret
     fe2:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_zero>
     fe6:	67 2f       	mov	r22, r23
     fe8:	78 2f       	mov	r23, r24
     fea:	88 27       	eor	r24, r24
     fec:	b8 5f       	subi	r27, 0xF8	; 248
     fee:	39 f0       	breq	.+14     	; 0xffe <__fixunssfsi+0x4c>
     ff0:	b9 3f       	cpi	r27, 0xF9	; 249
     ff2:	cc f3       	brlt	.-14     	; 0xfe6 <__fixunssfsi+0x34>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b3 95       	inc	r27
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <__fixunssfsi+0x42>
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__fixunssfsi+0x5c>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__floatdisf>:
    1010:	97 fb       	bst	r25, 7
    1012:	16 f4       	brtc	.+4      	; 0x1018 <__floatdisf+0x8>
    1014:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_negdi>
    1018:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_di2sf>

0000101c <__floatunsisf>:
    101c:	e8 94       	clt
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <__floatsisf+0x12>

00001020 <__floatsisf>:
    1020:	97 fb       	bst	r25, 7
    1022:	3e f4       	brtc	.+14     	; 0x1032 <__floatsisf+0x12>
    1024:	90 95       	com	r25
    1026:	80 95       	com	r24
    1028:	70 95       	com	r23
    102a:	61 95       	neg	r22
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	99 23       	and	r25, r25
    1034:	a9 f0       	breq	.+42     	; 0x1060 <__floatsisf+0x40>
    1036:	f9 2f       	mov	r31, r25
    1038:	96 e9       	ldi	r25, 0x96	; 150
    103a:	bb 27       	eor	r27, r27
    103c:	93 95       	inc	r25
    103e:	f6 95       	lsr	r31
    1040:	87 95       	ror	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	b7 95       	ror	r27
    1048:	f1 11       	cpse	r31, r1
    104a:	f8 cf       	rjmp	.-16     	; 0x103c <__floatsisf+0x1c>
    104c:	fa f4       	brpl	.+62     	; 0x108c <__floatsisf+0x6c>
    104e:	bb 0f       	add	r27, r27
    1050:	11 f4       	brne	.+4      	; 0x1056 <__floatsisf+0x36>
    1052:	60 ff       	sbrs	r22, 0
    1054:	1b c0       	rjmp	.+54     	; 0x108c <__floatsisf+0x6c>
    1056:	6f 5f       	subi	r22, 0xFF	; 255
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	8f 4f       	sbci	r24, 0xFF	; 255
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	16 c0       	rjmp	.+44     	; 0x108c <__floatsisf+0x6c>
    1060:	88 23       	and	r24, r24
    1062:	11 f0       	breq	.+4      	; 0x1068 <__floatsisf+0x48>
    1064:	96 e9       	ldi	r25, 0x96	; 150
    1066:	11 c0       	rjmp	.+34     	; 0x108a <__floatsisf+0x6a>
    1068:	77 23       	and	r23, r23
    106a:	21 f0       	breq	.+8      	; 0x1074 <__floatsisf+0x54>
    106c:	9e e8       	ldi	r25, 0x8E	; 142
    106e:	87 2f       	mov	r24, r23
    1070:	76 2f       	mov	r23, r22
    1072:	05 c0       	rjmp	.+10     	; 0x107e <__floatsisf+0x5e>
    1074:	66 23       	and	r22, r22
    1076:	71 f0       	breq	.+28     	; 0x1094 <__floatsisf+0x74>
    1078:	96 e8       	ldi	r25, 0x86	; 134
    107a:	86 2f       	mov	r24, r22
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	2a f0       	brmi	.+10     	; 0x108c <__floatsisf+0x6c>
    1082:	9a 95       	dec	r25
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	da f7       	brpl	.-10     	; 0x1082 <__floatsisf+0x62>
    108c:	88 0f       	add	r24, r24
    108e:	96 95       	lsr	r25
    1090:	87 95       	ror	r24
    1092:	97 f9       	bld	r25, 7
    1094:	08 95       	ret

00001096 <__floatundisf>:
    1096:	e8 94       	clt

00001098 <__fp_di2sf>:
    1098:	f9 2f       	mov	r31, r25
    109a:	96 eb       	ldi	r25, 0xB6	; 182
    109c:	ff 23       	and	r31, r31
    109e:	81 f0       	breq	.+32     	; 0x10c0 <__fp_di2sf+0x28>
    10a0:	12 16       	cp	r1, r18
    10a2:	13 06       	cpc	r1, r19
    10a4:	14 06       	cpc	r1, r20
    10a6:	44 0b       	sbc	r20, r20
    10a8:	93 95       	inc	r25
    10aa:	f6 95       	lsr	r31
    10ac:	87 95       	ror	r24
    10ae:	77 95       	ror	r23
    10b0:	67 95       	ror	r22
    10b2:	57 95       	ror	r21
    10b4:	40 40       	sbci	r20, 0x00	; 0
    10b6:	ff 23       	and	r31, r31
    10b8:	b9 f7       	brne	.-18     	; 0x10a8 <__fp_di2sf+0x10>
    10ba:	1b c0       	rjmp	.+54     	; 0x10f2 <__fp_di2sf+0x5a>
    10bc:	99 27       	eor	r25, r25
    10be:	08 95       	ret
    10c0:	88 23       	and	r24, r24
    10c2:	51 f4       	brne	.+20     	; 0x10d8 <__fp_di2sf+0x40>
    10c4:	98 50       	subi	r25, 0x08	; 8
    10c6:	d2 f7       	brpl	.-12     	; 0x10bc <__fp_di2sf+0x24>
    10c8:	87 2b       	or	r24, r23
    10ca:	76 2f       	mov	r23, r22
    10cc:	65 2f       	mov	r22, r21
    10ce:	54 2f       	mov	r21, r20
    10d0:	43 2f       	mov	r20, r19
    10d2:	32 2f       	mov	r19, r18
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	b1 f3       	breq	.-20     	; 0x10c4 <__fp_di2sf+0x2c>
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	14 06       	cpc	r1, r20
    10de:	44 0b       	sbc	r20, r20
    10e0:	88 23       	and	r24, r24
    10e2:	3a f0       	brmi	.+14     	; 0x10f2 <__fp_di2sf+0x5a>
    10e4:	9a 95       	dec	r25
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	66 1f       	adc	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	ca f7       	brpl	.-14     	; 0x10e4 <__fp_di2sf+0x4c>
    10f2:	55 23       	and	r21, r21
    10f4:	4a f4       	brpl	.+18     	; 0x1108 <__fp_di2sf+0x70>
    10f6:	44 0f       	add	r20, r20
    10f8:	55 1f       	adc	r21, r21
    10fa:	11 f4       	brne	.+4      	; 0x1100 <__fp_di2sf+0x68>
    10fc:	60 ff       	sbrs	r22, 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <__fp_di2sf+0x70>
    1100:	6f 5f       	subi	r22, 0xFF	; 255
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	8f 4f       	sbci	r24, 0xFF	; 255
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	88 0f       	add	r24, r24
    110a:	96 95       	lsr	r25
    110c:	87 95       	ror	r24
    110e:	97 f9       	bld	r25, 7
    1110:	08 95       	ret

00001112 <__fp_inf>:
    1112:	97 f9       	bld	r25, 7
    1114:	9f 67       	ori	r25, 0x7F	; 127
    1116:	80 e8       	ldi	r24, 0x80	; 128
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	08 95       	ret

0000111e <__fp_nan>:
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	80 ec       	ldi	r24, 0xC0	; 192
    1122:	08 95       	ret

00001124 <__fp_negdi>:
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	60 95       	com	r22
    112c:	50 95       	com	r21
    112e:	40 95       	com	r20
    1130:	30 95       	com	r19
    1132:	21 95       	neg	r18
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	4f 4f       	sbci	r20, 0xFF	; 255
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	6f 4f       	sbci	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	08 95       	ret

00001144 <__fp_pscA>:
    1144:	00 24       	eor	r0, r0
    1146:	0a 94       	dec	r0
    1148:	16 16       	cp	r1, r22
    114a:	17 06       	cpc	r1, r23
    114c:	18 06       	cpc	r1, r24
    114e:	09 06       	cpc	r0, r25
    1150:	08 95       	ret

00001152 <__fp_pscB>:
    1152:	00 24       	eor	r0, r0
    1154:	0a 94       	dec	r0
    1156:	12 16       	cp	r1, r18
    1158:	13 06       	cpc	r1, r19
    115a:	14 06       	cpc	r1, r20
    115c:	05 06       	cpc	r0, r21
    115e:	08 95       	ret

00001160 <__fp_round>:
    1160:	09 2e       	mov	r0, r25
    1162:	03 94       	inc	r0
    1164:	00 0c       	add	r0, r0
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_round+0xc>
    1168:	88 23       	and	r24, r24
    116a:	52 f0       	brmi	.+20     	; 0x1180 <__fp_round+0x20>
    116c:	bb 0f       	add	r27, r27
    116e:	40 f4       	brcc	.+16     	; 0x1180 <__fp_round+0x20>
    1170:	bf 2b       	or	r27, r31
    1172:	11 f4       	brne	.+4      	; 0x1178 <__fp_round+0x18>
    1174:	60 ff       	sbrs	r22, 0
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <__fp_round+0x20>
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	08 95       	ret

00001182 <__fp_split3>:
    1182:	57 fd       	sbrc	r21, 7
    1184:	90 58       	subi	r25, 0x80	; 128
    1186:	44 0f       	add	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	59 f0       	breq	.+22     	; 0x11a2 <__fp_splitA+0x10>
    118c:	5f 3f       	cpi	r21, 0xFF	; 255
    118e:	71 f0       	breq	.+28     	; 0x11ac <__fp_splitA+0x1a>
    1190:	47 95       	ror	r20

00001192 <__fp_splitA>:
    1192:	88 0f       	add	r24, r24
    1194:	97 fb       	bst	r25, 7
    1196:	99 1f       	adc	r25, r25
    1198:	61 f0       	breq	.+24     	; 0x11b2 <__fp_splitA+0x20>
    119a:	9f 3f       	cpi	r25, 0xFF	; 255
    119c:	79 f0       	breq	.+30     	; 0x11bc <__fp_splitA+0x2a>
    119e:	87 95       	ror	r24
    11a0:	08 95       	ret
    11a2:	12 16       	cp	r1, r18
    11a4:	13 06       	cpc	r1, r19
    11a6:	14 06       	cpc	r1, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	f2 cf       	rjmp	.-28     	; 0x1190 <__fp_split3+0xe>
    11ac:	46 95       	lsr	r20
    11ae:	f1 df       	rcall	.-30     	; 0x1192 <__fp_splitA>
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <__fp_splitA+0x30>
    11b2:	16 16       	cp	r1, r22
    11b4:	17 06       	cpc	r1, r23
    11b6:	18 06       	cpc	r1, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	f1 cf       	rjmp	.-30     	; 0x119e <__fp_splitA+0xc>
    11bc:	86 95       	lsr	r24
    11be:	71 05       	cpc	r23, r1
    11c0:	61 05       	cpc	r22, r1
    11c2:	08 94       	sec
    11c4:	08 95       	ret

000011c6 <__fp_zero>:
    11c6:	e8 94       	clt

000011c8 <__fp_szero>:
    11c8:	bb 27       	eor	r27, r27
    11ca:	66 27       	eor	r22, r22
    11cc:	77 27       	eor	r23, r23
    11ce:	cb 01       	movw	r24, r22
    11d0:	97 f9       	bld	r25, 7
    11d2:	08 95       	ret

000011d4 <__mulsf3>:
    11d4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__mulsf3x>
    11d8:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_round>
    11dc:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fp_pscA>
    11e0:	38 f0       	brcs	.+14     	; 0x11f0 <__mulsf3+0x1c>
    11e2:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_pscB>
    11e6:	20 f0       	brcs	.+8      	; 0x11f0 <__mulsf3+0x1c>
    11e8:	95 23       	and	r25, r21
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <__mulsf3+0x1c>
    11ec:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
    11f0:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>
    11f4:	11 24       	eor	r1, r1
    11f6:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>

000011fa <__mulsf3x>:
    11fa:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_split3>
    11fe:	70 f3       	brcs	.-36     	; 0x11dc <__mulsf3+0x8>

00001200 <__mulsf3_pse>:
    1200:	95 9f       	mul	r25, r21
    1202:	c1 f3       	breq	.-16     	; 0x11f4 <__mulsf3+0x20>
    1204:	95 0f       	add	r25, r21
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	55 1f       	adc	r21, r21
    120a:	62 9f       	mul	r22, r18
    120c:	f0 01       	movw	r30, r0
    120e:	72 9f       	mul	r23, r18
    1210:	bb 27       	eor	r27, r27
    1212:	f0 0d       	add	r31, r0
    1214:	b1 1d       	adc	r27, r1
    1216:	63 9f       	mul	r22, r19
    1218:	aa 27       	eor	r26, r26
    121a:	f0 0d       	add	r31, r0
    121c:	b1 1d       	adc	r27, r1
    121e:	aa 1f       	adc	r26, r26
    1220:	64 9f       	mul	r22, r20
    1222:	66 27       	eor	r22, r22
    1224:	b0 0d       	add	r27, r0
    1226:	a1 1d       	adc	r26, r1
    1228:	66 1f       	adc	r22, r22
    122a:	82 9f       	mul	r24, r18
    122c:	22 27       	eor	r18, r18
    122e:	b0 0d       	add	r27, r0
    1230:	a1 1d       	adc	r26, r1
    1232:	62 1f       	adc	r22, r18
    1234:	73 9f       	mul	r23, r19
    1236:	b0 0d       	add	r27, r0
    1238:	a1 1d       	adc	r26, r1
    123a:	62 1f       	adc	r22, r18
    123c:	83 9f       	mul	r24, r19
    123e:	a0 0d       	add	r26, r0
    1240:	61 1d       	adc	r22, r1
    1242:	22 1f       	adc	r18, r18
    1244:	74 9f       	mul	r23, r20
    1246:	33 27       	eor	r19, r19
    1248:	a0 0d       	add	r26, r0
    124a:	61 1d       	adc	r22, r1
    124c:	23 1f       	adc	r18, r19
    124e:	84 9f       	mul	r24, r20
    1250:	60 0d       	add	r22, r0
    1252:	21 1d       	adc	r18, r1
    1254:	82 2f       	mov	r24, r18
    1256:	76 2f       	mov	r23, r22
    1258:	6a 2f       	mov	r22, r26
    125a:	11 24       	eor	r1, r1
    125c:	9f 57       	subi	r25, 0x7F	; 127
    125e:	50 40       	sbci	r21, 0x00	; 0
    1260:	9a f0       	brmi	.+38     	; 0x1288 <__mulsf3_pse+0x88>
    1262:	f1 f0       	breq	.+60     	; 0x12a0 <__mulsf3_pse+0xa0>
    1264:	88 23       	and	r24, r24
    1266:	4a f0       	brmi	.+18     	; 0x127a <__mulsf3_pse+0x7a>
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	bb 1f       	adc	r27, r27
    126e:	66 1f       	adc	r22, r22
    1270:	77 1f       	adc	r23, r23
    1272:	88 1f       	adc	r24, r24
    1274:	91 50       	subi	r25, 0x01	; 1
    1276:	50 40       	sbci	r21, 0x00	; 0
    1278:	a9 f7       	brne	.-22     	; 0x1264 <__mulsf3_pse+0x64>
    127a:	9e 3f       	cpi	r25, 0xFE	; 254
    127c:	51 05       	cpc	r21, r1
    127e:	80 f0       	brcs	.+32     	; 0x12a0 <__mulsf3_pse+0xa0>
    1280:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
    1284:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_szero>
    1288:	5f 3f       	cpi	r21, 0xFF	; 255
    128a:	e4 f3       	brlt	.-8      	; 0x1284 <__mulsf3_pse+0x84>
    128c:	98 3e       	cpi	r25, 0xE8	; 232
    128e:	d4 f3       	brlt	.-12     	; 0x1284 <__mulsf3_pse+0x84>
    1290:	86 95       	lsr	r24
    1292:	77 95       	ror	r23
    1294:	67 95       	ror	r22
    1296:	b7 95       	ror	r27
    1298:	f7 95       	ror	r31
    129a:	e7 95       	ror	r30
    129c:	9f 5f       	subi	r25, 0xFF	; 255
    129e:	c1 f7       	brne	.-16     	; 0x1290 <__mulsf3_pse+0x90>
    12a0:	fe 2b       	or	r31, r30
    12a2:	88 0f       	add	r24, r24
    12a4:	91 1d       	adc	r25, r1
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	97 f9       	bld	r25, 7
    12ac:	08 95       	ret
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <__mulsf3_pse+0xb6>
    12b0:	16 f4       	brtc	.+4      	; 0x12b6 <__mulsf3_pse+0xb6>
    12b2:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>
    12b6:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_mpack>

000012ba <sqrt>:
    12ba:	0e 94 c9 08 	call	0x1192	; 0x1192 <__fp_splitA>
    12be:	b8 f3       	brcs	.-18     	; 0x12ae <__mulsf3_pse+0xae>
    12c0:	99 23       	and	r25, r25
    12c2:	c9 f3       	breq	.-14     	; 0x12b6 <__mulsf3_pse+0xb6>
    12c4:	b6 f3       	brts	.-20     	; 0x12b2 <__mulsf3_pse+0xb2>
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	55 0b       	sbc	r21, r21
    12ca:	87 ff       	sbrs	r24, 7
    12cc:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_norm2>
    12d0:	00 24       	eor	r0, r0
    12d2:	a0 e6       	ldi	r26, 0x60	; 96
    12d4:	40 ea       	ldi	r20, 0xA0	; 160
    12d6:	90 01       	movw	r18, r0
    12d8:	80 58       	subi	r24, 0x80	; 128
    12da:	56 95       	lsr	r21
    12dc:	97 95       	ror	r25
    12de:	28 f4       	brcc	.+10     	; 0x12ea <sqrt+0x30>
    12e0:	80 5c       	subi	r24, 0xC0	; 192
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	20 f0       	brcs	.+8      	; 0x12f2 <sqrt+0x38>
    12ea:	26 17       	cp	r18, r22
    12ec:	37 07       	cpc	r19, r23
    12ee:	48 07       	cpc	r20, r24
    12f0:	30 f4       	brcc	.+12     	; 0x12fe <sqrt+0x44>
    12f2:	62 1b       	sub	r22, r18
    12f4:	73 0b       	sbc	r23, r19
    12f6:	84 0b       	sbc	r24, r20
    12f8:	20 29       	or	r18, r0
    12fa:	31 29       	or	r19, r1
    12fc:	4a 2b       	or	r20, r26
    12fe:	a6 95       	lsr	r26
    1300:	17 94       	ror	r1
    1302:	07 94       	ror	r0
    1304:	20 25       	eor	r18, r0
    1306:	31 25       	eor	r19, r1
    1308:	4a 27       	eor	r20, r26
    130a:	58 f7       	brcc	.-42     	; 0x12e2 <sqrt+0x28>
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	20 f0       	brcs	.+8      	; 0x131c <sqrt+0x62>
    1314:	26 17       	cp	r18, r22
    1316:	37 07       	cpc	r19, r23
    1318:	48 07       	cpc	r20, r24
    131a:	30 f4       	brcc	.+12     	; 0x1328 <sqrt+0x6e>
    131c:	62 0b       	sbc	r22, r18
    131e:	73 0b       	sbc	r23, r19
    1320:	84 0b       	sbc	r24, r20
    1322:	20 0d       	add	r18, r0
    1324:	31 1d       	adc	r19, r1
    1326:	41 1d       	adc	r20, r1
    1328:	a0 95       	com	r26
    132a:	81 f7       	brne	.-32     	; 0x130c <sqrt+0x52>
    132c:	b9 01       	movw	r22, r18
    132e:	84 2f       	mov	r24, r20
    1330:	91 58       	subi	r25, 0x81	; 129
    1332:	88 0f       	add	r24, r24
    1334:	96 95       	lsr	r25
    1336:	87 95       	ror	r24
    1338:	08 95       	ret

0000133a <__fp_mpack>:
    133a:	9f 3f       	cpi	r25, 0xFF	; 255
    133c:	31 f0       	breq	.+12     	; 0x134a <__fp_mpack_finite+0xc>

0000133e <__fp_mpack_finite>:
    133e:	91 50       	subi	r25, 0x01	; 1
    1340:	20 f4       	brcc	.+8      	; 0x134a <__fp_mpack_finite+0xc>
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	88 0f       	add	r24, r24
    134c:	91 1d       	adc	r25, r1
    134e:	96 95       	lsr	r25
    1350:	87 95       	ror	r24
    1352:	97 f9       	bld	r25, 7
    1354:	08 95       	ret

00001356 <__fp_norm2>:
    1356:	91 50       	subi	r25, 0x01	; 1
    1358:	50 40       	sbci	r21, 0x00	; 0
    135a:	66 0f       	add	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	d2 f7       	brpl	.-12     	; 0x1356 <__fp_norm2>
    1362:	08 95       	ret

00001364 <__divmodhi4>:
    1364:	97 fb       	bst	r25, 7
    1366:	07 2e       	mov	r0, r23
    1368:	16 f4       	brtc	.+4      	; 0x136e <__divmodhi4+0xa>
    136a:	00 94       	com	r0
    136c:	07 d0       	rcall	.+14     	; 0x137c <__divmodhi4_neg1>
    136e:	77 fd       	sbrc	r23, 7
    1370:	09 d0       	rcall	.+18     	; 0x1384 <__divmodhi4_neg2>
    1372:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__udivmodhi4>
    1376:	07 fc       	sbrc	r0, 7
    1378:	05 d0       	rcall	.+10     	; 0x1384 <__divmodhi4_neg2>
    137a:	3e f4       	brtc	.+14     	; 0x138a <__divmodhi4_exit>

0000137c <__divmodhi4_neg1>:
    137c:	90 95       	com	r25
    137e:	81 95       	neg	r24
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__divmodhi4_neg2>:
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255

0000138a <__divmodhi4_exit>:
    138a:	08 95       	ret

0000138c <__udivmodsi4>:
    138c:	a1 e2       	ldi	r26, 0x21	; 33
    138e:	1a 2e       	mov	r1, r26
    1390:	aa 1b       	sub	r26, r26
    1392:	bb 1b       	sub	r27, r27
    1394:	fd 01       	movw	r30, r26
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <__udivmodsi4_ep>

00001398 <__udivmodsi4_loop>:
    1398:	aa 1f       	adc	r26, r26
    139a:	bb 1f       	adc	r27, r27
    139c:	ee 1f       	adc	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	a2 17       	cp	r26, r18
    13a2:	b3 07       	cpc	r27, r19
    13a4:	e4 07       	cpc	r30, r20
    13a6:	f5 07       	cpc	r31, r21
    13a8:	20 f0       	brcs	.+8      	; 0x13b2 <__udivmodsi4_ep>
    13aa:	a2 1b       	sub	r26, r18
    13ac:	b3 0b       	sbc	r27, r19
    13ae:	e4 0b       	sbc	r30, r20
    13b0:	f5 0b       	sbc	r31, r21

000013b2 <__udivmodsi4_ep>:
    13b2:	66 1f       	adc	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	1a 94       	dec	r1
    13bc:	69 f7       	brne	.-38     	; 0x1398 <__udivmodsi4_loop>
    13be:	60 95       	com	r22
    13c0:	70 95       	com	r23
    13c2:	80 95       	com	r24
    13c4:	90 95       	com	r25
    13c6:	9b 01       	movw	r18, r22
    13c8:	ac 01       	movw	r20, r24
    13ca:	bd 01       	movw	r22, r26
    13cc:	cf 01       	movw	r24, r30
    13ce:	08 95       	ret

000013d0 <__umulhisi3>:
    13d0:	a2 9f       	mul	r26, r18
    13d2:	b0 01       	movw	r22, r0
    13d4:	b3 9f       	mul	r27, r19
    13d6:	c0 01       	movw	r24, r0
    13d8:	a3 9f       	mul	r26, r19
    13da:	70 0d       	add	r23, r0
    13dc:	81 1d       	adc	r24, r1
    13de:	11 24       	eor	r1, r1
    13e0:	91 1d       	adc	r25, r1
    13e2:	b2 9f       	mul	r27, r18
    13e4:	70 0d       	add	r23, r0
    13e6:	81 1d       	adc	r24, r1
    13e8:	11 24       	eor	r1, r1
    13ea:	91 1d       	adc	r25, r1
    13ec:	08 95       	ret

000013ee <__muldi3>:
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	1f 93       	push	r17
    13f4:	0f 93       	push	r16
    13f6:	9a 9d       	mul	r25, r10
    13f8:	f0 2d       	mov	r31, r0
    13fa:	21 9f       	mul	r18, r17
    13fc:	f0 0d       	add	r31, r0
    13fe:	8b 9d       	mul	r24, r11
    1400:	f0 0d       	add	r31, r0
    1402:	8a 9d       	mul	r24, r10
    1404:	e0 2d       	mov	r30, r0
    1406:	f1 0d       	add	r31, r1
    1408:	03 9f       	mul	r16, r19
    140a:	f0 0d       	add	r31, r0
    140c:	02 9f       	mul	r16, r18
    140e:	e0 0d       	add	r30, r0
    1410:	f1 1d       	adc	r31, r1
    1412:	4e 9d       	mul	r20, r14
    1414:	e0 0d       	add	r30, r0
    1416:	f1 1d       	adc	r31, r1
    1418:	5e 9d       	mul	r21, r14
    141a:	f0 0d       	add	r31, r0
    141c:	4f 9d       	mul	r20, r15
    141e:	f0 0d       	add	r31, r0
    1420:	7f 93       	push	r23
    1422:	6f 93       	push	r22
    1424:	bf 92       	push	r11
    1426:	af 92       	push	r10
    1428:	5f 93       	push	r21
    142a:	4f 93       	push	r20
    142c:	d5 01       	movw	r26, r10
    142e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
    1432:	8b 01       	movw	r16, r22
    1434:	ac 01       	movw	r20, r24
    1436:	d7 01       	movw	r26, r14
    1438:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
    143c:	eb 01       	movw	r28, r22
    143e:	e8 0f       	add	r30, r24
    1440:	f9 1f       	adc	r31, r25
    1442:	d6 01       	movw	r26, r12
    1444:	0e 94 47 0a 	call	0x148e	; 0x148e <__muldi3_6>
    1448:	2f 91       	pop	r18
    144a:	3f 91       	pop	r19
    144c:	d6 01       	movw	r26, r12
    144e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
    1452:	c6 0f       	add	r28, r22
    1454:	d7 1f       	adc	r29, r23
    1456:	e8 1f       	adc	r30, r24
    1458:	f9 1f       	adc	r31, r25
    145a:	af 91       	pop	r26
    145c:	bf 91       	pop	r27
    145e:	0e 94 47 0a 	call	0x148e	; 0x148e <__muldi3_6>
    1462:	2f 91       	pop	r18
    1464:	3f 91       	pop	r19
    1466:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
    146a:	c6 0f       	add	r28, r22
    146c:	d7 1f       	adc	r29, r23
    146e:	e8 1f       	adc	r30, r24
    1470:	f9 1f       	adc	r31, r25
    1472:	d6 01       	movw	r26, r12
    1474:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
    1478:	e6 0f       	add	r30, r22
    147a:	f7 1f       	adc	r31, r23
    147c:	98 01       	movw	r18, r16
    147e:	be 01       	movw	r22, r28
    1480:	cf 01       	movw	r24, r30
    1482:	11 24       	eor	r1, r1
    1484:	0f 91       	pop	r16
    1486:	1f 91       	pop	r17
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <__muldi3_6>:
    148e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__umulhisi3>
    1492:	46 0f       	add	r20, r22
    1494:	57 1f       	adc	r21, r23
    1496:	c8 1f       	adc	r28, r24
    1498:	d9 1f       	adc	r29, r25
    149a:	08 f4       	brcc	.+2      	; 0x149e <__muldi3_6+0x10>
    149c:	31 96       	adiw	r30, 0x01	; 1
    149e:	08 95       	ret

000014a0 <__moddi3>:
    14a0:	68 94       	set
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <__divdi3_moddi3>

000014a4 <__divdi3>:
    14a4:	e8 94       	clt

000014a6 <__divdi3_moddi3>:
    14a6:	f9 2f       	mov	r31, r25
    14a8:	f1 2b       	or	r31, r17
    14aa:	12 f0       	brmi	.+4      	; 0x14b0 <__divdi3_moddi3+0xa>
    14ac:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__udivdi3_umoddi3>
    14b0:	a0 e0       	ldi	r26, 0x00	; 0
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ee e5       	ldi	r30, 0x5E	; 94
    14b6:	fa e0       	ldi	r31, 0x0A	; 10
    14b8:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__prologue_saves__+0xc>
    14bc:	09 2e       	mov	r0, r25
    14be:	05 94       	asr	r0
    14c0:	22 f4       	brpl	.+8      	; 0x14ca <__divdi3_moddi3+0x24>
    14c2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__negdi2>
    14c6:	11 23       	and	r17, r17
    14c8:	92 f4       	brpl	.+36     	; 0x14ee <__divdi3_moddi3+0x48>
    14ca:	f0 e8       	ldi	r31, 0x80	; 128
    14cc:	0f 26       	eor	r0, r31
    14ce:	ff ef       	ldi	r31, 0xFF	; 255
    14d0:	e0 94       	com	r14
    14d2:	f0 94       	com	r15
    14d4:	00 95       	com	r16
    14d6:	10 95       	com	r17
    14d8:	b0 94       	com	r11
    14da:	c0 94       	com	r12
    14dc:	d0 94       	com	r13
    14de:	a1 94       	neg	r10
    14e0:	bf 0a       	sbc	r11, r31
    14e2:	cf 0a       	sbc	r12, r31
    14e4:	df 0a       	sbc	r13, r31
    14e6:	ef 0a       	sbc	r14, r31
    14e8:	ff 0a       	sbc	r15, r31
    14ea:	0f 0b       	sbc	r16, r31
    14ec:	1f 0b       	sbc	r17, r31
    14ee:	0e 94 8f 0a 	call	0x151e	; 0x151e <__udivmod64>
    14f2:	07 fc       	sbrc	r0, 7
    14f4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__negdi2>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	ec e0       	ldi	r30, 0x0C	; 12
    14fe:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__epilogue_restores__+0xc>

00001502 <__umoddi3>:
    1502:	68 94       	set
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <__udivdi3_umoddi3>

00001506 <__udivdi3>:
    1506:	e8 94       	clt

00001508 <__udivdi3_umoddi3>:
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	0e 94 8f 0a 	call	0x151e	; 0x151e <__udivmod64>
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	08 95       	ret

0000151e <__udivmod64>:
    151e:	88 24       	eor	r8, r8
    1520:	99 24       	eor	r9, r9
    1522:	f4 01       	movw	r30, r8
    1524:	e4 01       	movw	r28, r8
    1526:	b0 e4       	ldi	r27, 0x40	; 64
    1528:	9f 93       	push	r25
    152a:	aa 27       	eor	r26, r26
    152c:	9a 15       	cp	r25, r10
    152e:	8b 04       	cpc	r8, r11
    1530:	9c 04       	cpc	r9, r12
    1532:	ed 05       	cpc	r30, r13
    1534:	fe 05       	cpc	r31, r14
    1536:	cf 05       	cpc	r28, r15
    1538:	d0 07       	cpc	r29, r16
    153a:	a1 07       	cpc	r26, r17
    153c:	98 f4       	brcc	.+38     	; 0x1564 <__udivmod64+0x46>
    153e:	ad 2f       	mov	r26, r29
    1540:	dc 2f       	mov	r29, r28
    1542:	cf 2f       	mov	r28, r31
    1544:	fe 2f       	mov	r31, r30
    1546:	e9 2d       	mov	r30, r9
    1548:	98 2c       	mov	r9, r8
    154a:	89 2e       	mov	r8, r25
    154c:	98 2f       	mov	r25, r24
    154e:	87 2f       	mov	r24, r23
    1550:	76 2f       	mov	r23, r22
    1552:	65 2f       	mov	r22, r21
    1554:	54 2f       	mov	r21, r20
    1556:	43 2f       	mov	r20, r19
    1558:	32 2f       	mov	r19, r18
    155a:	22 27       	eor	r18, r18
    155c:	b8 50       	subi	r27, 0x08	; 8
    155e:	31 f7       	brne	.-52     	; 0x152c <__udivmod64+0xe>
    1560:	bf 91       	pop	r27
    1562:	27 c0       	rjmp	.+78     	; 0x15b2 <__udivmod64+0x94>
    1564:	1b 2e       	mov	r1, r27
    1566:	bf 91       	pop	r27
    1568:	bb 27       	eor	r27, r27
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	44 1f       	adc	r20, r20
    1570:	55 1f       	adc	r21, r21
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	88 1c       	adc	r8, r8
    157c:	99 1c       	adc	r9, r9
    157e:	ee 1f       	adc	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	cc 1f       	adc	r28, r28
    1584:	dd 1f       	adc	r29, r29
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	8a 14       	cp	r8, r10
    158c:	9b 04       	cpc	r9, r11
    158e:	ec 05       	cpc	r30, r12
    1590:	fd 05       	cpc	r31, r13
    1592:	ce 05       	cpc	r28, r14
    1594:	df 05       	cpc	r29, r15
    1596:	a0 07       	cpc	r26, r16
    1598:	b1 07       	cpc	r27, r17
    159a:	48 f0       	brcs	.+18     	; 0x15ae <__udivmod64+0x90>
    159c:	8a 18       	sub	r8, r10
    159e:	9b 08       	sbc	r9, r11
    15a0:	ec 09       	sbc	r30, r12
    15a2:	fd 09       	sbc	r31, r13
    15a4:	ce 09       	sbc	r28, r14
    15a6:	df 09       	sbc	r29, r15
    15a8:	a0 0b       	sbc	r26, r16
    15aa:	b1 0b       	sbc	r27, r17
    15ac:	21 60       	ori	r18, 0x01	; 1
    15ae:	1a 94       	dec	r1
    15b0:	e1 f6       	brne	.-72     	; 0x156a <__udivmod64+0x4c>
    15b2:	2e f4       	brtc	.+10     	; 0x15be <__udivmod64+0xa0>
    15b4:	94 01       	movw	r18, r8
    15b6:	af 01       	movw	r20, r30
    15b8:	be 01       	movw	r22, r28
    15ba:	cd 01       	movw	r24, r26
    15bc:	00 0c       	add	r0, r0
    15be:	08 95       	ret

000015c0 <__negdi2>:
    15c0:	60 95       	com	r22
    15c2:	70 95       	com	r23
    15c4:	80 95       	com	r24
    15c6:	90 95       	com	r25
    15c8:	30 95       	com	r19
    15ca:	40 95       	com	r20
    15cc:	50 95       	com	r21
    15ce:	21 95       	neg	r18
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	4f 4f       	sbci	r20, 0xFF	; 255
    15d4:	5f 4f       	sbci	r21, 0xFF	; 255
    15d6:	6f 4f       	sbci	r22, 0xFF	; 255
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	08 95       	ret

000015e0 <__prologue_saves__>:
    15e0:	2f 92       	push	r2
    15e2:	3f 92       	push	r3
    15e4:	4f 92       	push	r4
    15e6:	5f 92       	push	r5
    15e8:	6f 92       	push	r6
    15ea:	7f 92       	push	r7
    15ec:	8f 92       	push	r8
    15ee:	9f 92       	push	r9
    15f0:	af 92       	push	r10
    15f2:	bf 92       	push	r11
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	ca 1b       	sub	r28, r26
    160a:	db 0b       	sbc	r29, r27
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	09 94       	ijmp

00001618 <__epilogue_restores__>:
    1618:	2a 88       	ldd	r2, Y+18	; 0x12
    161a:	39 88       	ldd	r3, Y+17	; 0x11
    161c:	48 88       	ldd	r4, Y+16	; 0x10
    161e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1620:	6e 84       	ldd	r6, Y+14	; 0x0e
    1622:	7d 84       	ldd	r7, Y+13	; 0x0d
    1624:	8c 84       	ldd	r8, Y+12	; 0x0c
    1626:	9b 84       	ldd	r9, Y+11	; 0x0b
    1628:	aa 84       	ldd	r10, Y+10	; 0x0a
    162a:	b9 84       	ldd	r11, Y+9	; 0x09
    162c:	c8 84       	ldd	r12, Y+8	; 0x08
    162e:	df 80       	ldd	r13, Y+7	; 0x07
    1630:	ee 80       	ldd	r14, Y+6	; 0x06
    1632:	fd 80       	ldd	r15, Y+5	; 0x05
    1634:	0c 81       	ldd	r16, Y+4	; 0x04
    1636:	1b 81       	ldd	r17, Y+3	; 0x03
    1638:	aa 81       	ldd	r26, Y+2	; 0x02
    163a:	b9 81       	ldd	r27, Y+1	; 0x01
    163c:	ce 0f       	add	r28, r30
    163e:	d1 1d       	adc	r29, r1
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	ed 01       	movw	r28, r26
    164c:	08 95       	ret

0000164e <__ashldi3>:
    164e:	0f 93       	push	r16
    1650:	08 30       	cpi	r16, 0x08	; 8
    1652:	90 f0       	brcs	.+36     	; 0x1678 <__ashldi3+0x2a>
    1654:	98 2f       	mov	r25, r24
    1656:	87 2f       	mov	r24, r23
    1658:	76 2f       	mov	r23, r22
    165a:	65 2f       	mov	r22, r21
    165c:	54 2f       	mov	r21, r20
    165e:	43 2f       	mov	r20, r19
    1660:	32 2f       	mov	r19, r18
    1662:	22 27       	eor	r18, r18
    1664:	08 50       	subi	r16, 0x08	; 8
    1666:	f4 cf       	rjmp	.-24     	; 0x1650 <__ashldi3+0x2>
    1668:	22 0f       	add	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	44 1f       	adc	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	66 1f       	adc	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 95       	dec	r16
    167a:	b2 f7       	brpl	.-20     	; 0x1668 <__ashldi3+0x1a>
    167c:	0f 91       	pop	r16
    167e:	08 95       	ret

00001680 <__adddi3>:
    1680:	2a 0d       	add	r18, r10
    1682:	3b 1d       	adc	r19, r11
    1684:	4c 1d       	adc	r20, r12
    1686:	5d 1d       	adc	r21, r13
    1688:	6e 1d       	adc	r22, r14
    168a:	7f 1d       	adc	r23, r15
    168c:	80 1f       	adc	r24, r16
    168e:	91 1f       	adc	r25, r17
    1690:	08 95       	ret

00001692 <__adddi3_s8>:
    1692:	00 24       	eor	r0, r0
    1694:	a7 fd       	sbrc	r26, 7
    1696:	00 94       	com	r0
    1698:	2a 0f       	add	r18, r26
    169a:	30 1d       	adc	r19, r0
    169c:	40 1d       	adc	r20, r0
    169e:	50 1d       	adc	r21, r0
    16a0:	60 1d       	adc	r22, r0
    16a2:	70 1d       	adc	r23, r0
    16a4:	80 1d       	adc	r24, r0
    16a6:	90 1d       	adc	r25, r0
    16a8:	08 95       	ret

000016aa <__subdi3>:
    16aa:	2a 19       	sub	r18, r10
    16ac:	3b 09       	sbc	r19, r11
    16ae:	4c 09       	sbc	r20, r12
    16b0:	5d 09       	sbc	r21, r13
    16b2:	6e 09       	sbc	r22, r14
    16b4:	7f 09       	sbc	r23, r15
    16b6:	80 0b       	sbc	r24, r16
    16b8:	91 0b       	sbc	r25, r17
    16ba:	08 95       	ret

000016bc <__cmpdi2>:
    16bc:	2a 15       	cp	r18, r10
    16be:	3b 05       	cpc	r19, r11
    16c0:	4c 05       	cpc	r20, r12
    16c2:	5d 05       	cpc	r21, r13
    16c4:	6e 05       	cpc	r22, r14
    16c6:	7f 05       	cpc	r23, r15
    16c8:	80 07       	cpc	r24, r16
    16ca:	91 07       	cpc	r25, r17
    16cc:	08 95       	ret

000016ce <__cmpdi2_s8>:
    16ce:	00 24       	eor	r0, r0
    16d0:	a7 fd       	sbrc	r26, 7
    16d2:	00 94       	com	r0
    16d4:	2a 17       	cp	r18, r26
    16d6:	30 05       	cpc	r19, r0
    16d8:	40 05       	cpc	r20, r0
    16da:	50 05       	cpc	r21, r0
    16dc:	60 05       	cpc	r22, r0
    16de:	70 05       	cpc	r23, r0
    16e0:	80 05       	cpc	r24, r0
    16e2:	90 05       	cpc	r25, r0
    16e4:	08 95       	ret

000016e6 <__udivmodhi4>:
    16e6:	aa 1b       	sub	r26, r26
    16e8:	bb 1b       	sub	r27, r27
    16ea:	51 e1       	ldi	r21, 0x11	; 17
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <__udivmodhi4_ep>

000016ee <__udivmodhi4_loop>:
    16ee:	aa 1f       	adc	r26, r26
    16f0:	bb 1f       	adc	r27, r27
    16f2:	a6 17       	cp	r26, r22
    16f4:	b7 07       	cpc	r27, r23
    16f6:	10 f0       	brcs	.+4      	; 0x16fc <__udivmodhi4_ep>
    16f8:	a6 1b       	sub	r26, r22
    16fa:	b7 0b       	sbc	r27, r23

000016fc <__udivmodhi4_ep>:
    16fc:	88 1f       	adc	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	5a 95       	dec	r21
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__udivmodhi4_loop>
    1704:	80 95       	com	r24
    1706:	90 95       	com	r25
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	08 95       	ret

0000170e <_exit>:
    170e:	f8 94       	cli

00001710 <__stop_program>:
    1710:	ff cf       	rjmp	.-2      	; 0x1710 <__stop_program>
