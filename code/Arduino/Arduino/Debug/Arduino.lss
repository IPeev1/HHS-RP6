
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000ada  00000b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800206  00800206  00000b74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001029  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc4  00000000  00000000  00001c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ba  00000000  00000000  00002a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000039d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
   2:	00 00       	nop
   4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
   6:	00 00       	nop
   8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
   a:	00 00       	nop
   c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
   e:	00 00       	nop
  10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
  12:	00 00       	nop
  14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
  16:	00 00       	nop
  18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	bf c0       	rjmp	.+382    	; 0x1a0 <__bad_interrupt>
  22:	00 00       	nop
  24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>
  26:	00 00       	nop
  28:	bb c0       	rjmp	.+374    	; 0x1a0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b9 c0       	rjmp	.+370    	; 0x1a0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__bad_interrupt>
  32:	00 00       	nop
  34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__bad_interrupt>
  36:	00 00       	nop
  38:	b3 c0       	rjmp	.+358    	; 0x1a0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b1 c0       	rjmp	.+354    	; 0x1a0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	af c0       	rjmp	.+350    	; 0x1a0 <__bad_interrupt>
  42:	00 00       	nop
  44:	ad c0       	rjmp	.+346    	; 0x1a0 <__bad_interrupt>
  46:	00 00       	nop
  48:	ab c0       	rjmp	.+342    	; 0x1a0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a9 c0       	rjmp	.+338    	; 0x1a0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a7 c0       	rjmp	.+334    	; 0x1a0 <__bad_interrupt>
  52:	00 00       	nop
  54:	a5 c0       	rjmp	.+330    	; 0x1a0 <__bad_interrupt>
  56:	00 00       	nop
  58:	a3 c0       	rjmp	.+326    	; 0x1a0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a1 c0       	rjmp	.+322    	; 0x1a0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9f c0       	rjmp	.+318    	; 0x1a0 <__bad_interrupt>
  62:	00 00       	nop
  64:	9e c0       	rjmp	.+316    	; 0x1a2 <__vector_25>
  66:	00 00       	nop
  68:	9b c0       	rjmp	.+310    	; 0x1a0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	99 c0       	rjmp	.+306    	; 0x1a0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	97 c0       	rjmp	.+302    	; 0x1a0 <__bad_interrupt>
  72:	00 00       	nop
  74:	95 c0       	rjmp	.+298    	; 0x1a0 <__bad_interrupt>
  76:	00 00       	nop
  78:	93 c0       	rjmp	.+294    	; 0x1a0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	91 c0       	rjmp	.+290    	; 0x1a0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8f c0       	rjmp	.+286    	; 0x1a0 <__bad_interrupt>
  82:	00 00       	nop
  84:	8d c0       	rjmp	.+282    	; 0x1a0 <__bad_interrupt>
  86:	00 00       	nop
  88:	8b c0       	rjmp	.+278    	; 0x1a0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	89 c0       	rjmp	.+274    	; 0x1a0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	87 c0       	rjmp	.+270    	; 0x1a0 <__bad_interrupt>
  92:	00 00       	nop
  94:	85 c0       	rjmp	.+266    	; 0x1a0 <__bad_interrupt>
  96:	00 00       	nop
  98:	83 c0       	rjmp	.+262    	; 0x1a0 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	81 c0       	rjmp	.+258    	; 0x1a0 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7f c0       	rjmp	.+254    	; 0x1a0 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7d c0       	rjmp	.+250    	; 0x1a0 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7b c0       	rjmp	.+246    	; 0x1a0 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	79 c0       	rjmp	.+242    	; 0x1a0 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	77 c0       	rjmp	.+238    	; 0x1a0 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	75 c0       	rjmp	.+234    	; 0x1a0 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	73 c0       	rjmp	.+230    	; 0x1a0 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	71 c0       	rjmp	.+226    	; 0x1a0 <__bad_interrupt>
  be:	00 00       	nop
  c0:	6f c0       	rjmp	.+222    	; 0x1a0 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	6d c0       	rjmp	.+218    	; 0x1a0 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	6b c0       	rjmp	.+214    	; 0x1a0 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	69 c0       	rjmp	.+210    	; 0x1a0 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	67 c0       	rjmp	.+206    	; 0x1a0 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	65 c0       	rjmp	.+202    	; 0x1a0 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	63 c0       	rjmp	.+198    	; 0x1a0 <__bad_interrupt>
  da:	00 00       	nop
  dc:	61 c0       	rjmp	.+194    	; 0x1a0 <__bad_interrupt>
  de:	00 00       	nop
  e0:	5f c0       	rjmp	.+190    	; 0x1a0 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	07 63       	ori	r16, 0x37	; 55
  e6:	42 36       	cpi	r20, 0x62	; 98
  e8:	b7 9b       	sbis	0x16, 7	; 22
  ea:	d8 a7       	std	Y+40, r29	; 0x28
  ec:	1a 39       	cpi	r17, 0x9A	; 154
  ee:	68 56       	subi	r22, 0x68	; 104
  f0:	18 ae       	std	Y+56, r1	; 0x38
  f2:	ba ab       	std	Y+50, r27	; 0x32
  f4:	55 8c       	ldd	r5, Z+29	; 0x1d
  f6:	1d 3c       	cpi	r17, 0xCD	; 205
  f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
  fa:	57 63       	ori	r21, 0x37	; 55
  fc:	bd 6d       	ori	r27, 0xDD	; 221
  fe:	ed fd       	.word	0xfded	; ????
 100:	75 3e       	cpi	r23, 0xE5	; 229
 102:	f6 17       	cp	r31, r22
 104:	72 31       	cpi	r23, 0x12	; 18
 106:	bf 00       	.word	0x00bf	; ????
 108:	00 00       	nop
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 00       	nop
 110:	be 92       	st	-X, r11
 112:	24 49       	sbci	r18, 0x94	; 148
 114:	12 3e       	cpi	r17, 0xE2	; 226
 116:	ab aa       	std	Y+51, r10	; 0x33
 118:	aa 2a       	or	r10, r26
 11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
 11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 11e:	4c 3e       	cpi	r20, 0xEC	; 236
 120:	00 00       	nop
 122:	00 80       	ld	r0, Z
 124:	be ab       	std	Y+54, r27	; 0x36
 126:	aa aa       	std	Y+50, r10	; 0x32
 128:	aa 3e       	cpi	r26, 0xEA	; 234
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	bf 00       	.word	0x00bf	; ????
 130:	00 00       	nop
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	00 00       	nop
 136:	00 00       	nop
 138:	00 08       	sbc	r0, r0
 13a:	41 78       	andi	r20, 0x81	; 129
 13c:	d3 bb       	out	0x13, r29	; 19
 13e:	43 87       	std	Z+11, r20	; 0x0b
 140:	d1 13       	cpse	r29, r17
 142:	3d 19       	sub	r19, r13
 144:	0e 3c       	cpi	r16, 0xCE	; 206
 146:	c3 bd       	out	0x23, r28	; 35
 148:	42 82       	std	Z+2, r4	; 0x02
 14a:	ad 2b       	or	r26, r29
 14c:	3e 68       	ori	r19, 0x8E	; 142
 14e:	ec 82       	std	Y+4, r14	; 0x04
 150:	76 be       	out	0x36, r7	; 54
 152:	d9 8f       	std	Y+25, r29	; 0x19
 154:	e1 a9       	ldd	r30, Z+49	; 0x31
 156:	3e 4c       	sbci	r19, 0xCE	; 206
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	ff be       	out	0x3f, r15	; 63
 15c:	01 c4       	rjmp	.+2050   	; 0x960 <__mulsf3_pse+0x86>
 15e:	ff 7f       	andi	r31, 0xFF	; 255
 160:	3f 00       	.word	0x003f	; ????
 162:	00 00       	nop
	...

00000166 <__ctors_end>:
 166:	11 24       	eor	r1, r1
 168:	1f be       	out	0x3f, r1	; 63
 16a:	cf ef       	ldi	r28, 0xFF	; 255
 16c:	d1 e2       	ldi	r29, 0x21	; 33
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
 172:	12 e0       	ldi	r17, 0x02	; 2
 174:	a0 e0       	ldi	r26, 0x00	; 0
 176:	b2 e0       	ldi	r27, 0x02	; 2
 178:	ea ed       	ldi	r30, 0xDA	; 218
 17a:	fa e0       	ldi	r31, 0x0A	; 10
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	0b bf       	out	0x3b, r16	; 59
 180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
 182:	07 90       	elpm	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	a6 30       	cpi	r26, 0x06	; 6
 188:	b1 07       	cpc	r27, r17
 18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
 18c:	23 e0       	ldi	r18, 0x03	; 3
 18e:	a6 e0       	ldi	r26, 0x06	; 6
 190:	b2 e0       	ldi	r27, 0x02	; 2
 192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
 194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
 196:	a6 30       	cpi	r26, 0x06	; 6
 198:	b2 07       	cpc	r27, r18
 19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
 19c:	b9 d0       	rcall	.+370    	; 0x310 <main>
 19e:	9b c4       	rjmp	.+2358   	; 0xad6 <_exit>

000001a0 <__bad_interrupt>:
 1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <__vector_25>:
#ifndef USART_INTERRUPT_VECTOR
#define USART_INTERRUPT_VECTOR USART0_RX_vect
#endif


ISR(USART_INTERRUPT_VECTOR) {
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0b b6       	in	r0, 0x3b	; 59
 1ae:	0f 92       	push	r0
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	static char buffer[BUFFER_SIZE];											//Character buffer to store numerals
	static int bufferPos = -1;													//Represents which buffer positions are currently in use to store numerals
	static char received = 0;													//Stores the last character received through USART
	static char command = 0;													//Stores a character that represents a command. Default value is null
	
	received = UDR0;
 1d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	if ('0' <= received && received <= '9') {									//If received contains a a numeral
 1dc:	90 ed       	ldi	r25, 0xD0	; 208
 1de:	98 0f       	add	r25, r24
 1e0:	9a 30       	cpi	r25, 0x0A	; 10
 1e2:	c0 f4       	brcc	.+48     	; 0x214 <__vector_25+0x72>
		
		if (command == 't') {													//If command 't' is currently set
 1e4:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <command.1715>
 1e8:	94 37       	cpi	r25, 0x74	; 116
 1ea:	09 f0       	breq	.+2      	; 0x1ee <__vector_25+0x4c>
 1ec:	76 c0       	rjmp	.+236    	; 0x2da <__vector_25+0x138>
			if (bufferPos < BUFFER_SIZE)										//Check to prevent overflow of the buffer
 1ee:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 1f2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 1f6:	2f 3f       	cpi	r18, 0xFF	; 255
 1f8:	31 05       	cpc	r19, r1
 1fa:	0c f0       	brlt	.+2      	; 0x1fe <__vector_25+0x5c>
 1fc:	6e c0       	rjmp	.+220    	; 0x2da <__vector_25+0x138>
				buffer[++bufferPos] = received;									//Add numeral to buffer
 1fe:	2f 5f       	subi	r18, 0xFF	; 255
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 206:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
 20a:	f9 01       	movw	r30, r18
 20c:	ea 5f       	subi	r30, 0xFA	; 250
 20e:	fd 4f       	sbci	r31, 0xFD	; 253
 210:	80 83       	st	Z, r24
 212:	63 c0       	rjmp	.+198    	; 0x2da <__vector_25+0x138>
		}
			
	} else if ('a' <= received && received <= 'z') {							//If received contains a (lower case) letter
 214:	9f e9       	ldi	r25, 0x9F	; 159
 216:	98 0f       	add	r25, r24
 218:	9a 31       	cpi	r25, 0x1A	; 26
 21a:	80 f4       	brcc	.+32     	; 0x23c <__vector_25+0x9a>
		
		switch(received) {														//Each valid command is represented by a case
 21c:	85 37       	cpi	r24, 0x75	; 117
 21e:	40 f4       	brcc	.+16     	; 0x230 <__vector_25+0x8e>
 220:	83 37       	cpi	r24, 0x73	; 115
 222:	48 f4       	brcc	.+18     	; 0x236 <__vector_25+0x94>
 224:	81 36       	cpi	r24, 0x61	; 97
 226:	39 f0       	breq	.+14     	; 0x236 <__vector_25+0x94>
 228:	84 36       	cpi	r24, 0x64	; 100
 22a:	09 f0       	breq	.+2      	; 0x22e <__vector_25+0x8c>
 22c:	56 c0       	rjmp	.+172    	; 0x2da <__vector_25+0x138>
 22e:	03 c0       	rjmp	.+6      	; 0x236 <__vector_25+0x94>
 230:	87 37       	cpi	r24, 0x77	; 119
 232:	09 f0       	breq	.+2      	; 0x236 <__vector_25+0x94>
 234:	52 c0       	rjmp	.+164    	; 0x2da <__vector_25+0x138>
			case 'w':
			case 'a':
			case 's':
			case 'd':
			case 't':
			command = received;
 236:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <command.1715>
 23a:	4f c0       	rjmp	.+158    	; 0x2da <__vector_25+0x138>
		}
	} else if (received == '\r') {												//If received contains a carriage return
 23c:	8d 30       	cpi	r24, 0x0D	; 13
 23e:	09 f0       	breq	.+2      	; 0x242 <__vector_25+0xa0>
 240:	4c c0       	rjmp	.+152    	; 0x2da <__vector_25+0x138>
		
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
 242:	c0 90 05 03 	lds	r12, 0x0305	; 0x800305 <command.1715>
 246:	84 e7       	ldi	r24, 0x74	; 116
 248:	c8 12       	cpse	r12, r24
 24a:	3e c0       	rjmp	.+124    	; 0x2c8 <__vector_25+0x126>
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
 24c:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <__data_start>
 250:	f0 90 01 02 	lds	r15, 0x0201	; 0x800201 <__data_start+0x1>
 254:	ff 20       	and	r15, r15
 256:	7c f1       	brlt	.+94     	; 0x2b6 <__vector_25+0x114>
 258:	c0 e0       	ldi	r28, 0x00	; 0
 25a:	d0 e0       	ldi	r29, 0x00	; 0
 25c:	d1 2c       	mov	r13, r1
 25e:	00 e0       	ldi	r16, 0x00	; 0
 260:	10 e0       	ldi	r17, 0x00	; 0
				charToInt = (int) (buffer[i] - '0');
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
 262:	b7 01       	movw	r22, r14
 264:	6c 1b       	sub	r22, r28
 266:	7d 0b       	sbc	r23, r29
 268:	07 2e       	mov	r0, r23
 26a:	00 0c       	add	r0, r0
 26c:	88 0b       	sbc	r24, r24
 26e:	99 0b       	sbc	r25, r25
 270:	43 d1       	rcall	.+646    	; 0x4f8 <__floatsisf>
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	91 e4       	ldi	r25, 0x41	; 65
 27e:	c8 d1       	rcall	.+912    	; 0x610 <pow>
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
				charToInt = (int) (buffer[i] - '0');
 280:	ca 5f       	subi	r28, 0xFA	; 250
 282:	dd 4f       	sbci	r29, 0xFD	; 253
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
 284:	c8 81       	ld	r28, Y
 286:	c0 53       	subi	r28, 0x30	; 48
 288:	d0 e0       	ldi	r29, 0x00	; 0
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	5f e3       	ldi	r21, 0x3F	; 63
 292:	9b d0       	rcall	.+310    	; 0x3ca <__addsf3>
 294:	fe d0       	rcall	.+508    	; 0x492 <__fixsfsi>
 296:	c6 9f       	mul	r28, r22
 298:	90 01       	movw	r18, r0
 29a:	c7 9f       	mul	r28, r23
 29c:	30 0d       	add	r19, r0
 29e:	d6 9f       	mul	r29, r22
 2a0:	30 0d       	add	r19, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	02 0f       	add	r16, r18
 2a6:	13 1f       	adc	r17, r19
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
 2a8:	d3 94       	inc	r13
 2aa:	cd 2d       	mov	r28, r13
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	ec 16       	cp	r14, r28
 2b0:	fd 06       	cpc	r15, r29
 2b2:	bc f6       	brge	.-82     	; 0x262 <__vector_25+0xc0>
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <__vector_25+0x118>
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	10 e0       	ldi	r17, 0x00	; 0
				charToInt = (int) (buffer[i] - '0');
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
			}
			bufferPos = -1;														//Reset buffer position
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 2c2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <__vector_25+0x12e>
		}
		if (command) {															//Only if a command is set is data transmitted
 2c8:	cc 20       	and	r12, r12
 2ca:	39 f0       	breq	.+14     	; 0x2da <__vector_25+0x138>
			case 't':
			command = received;
		}
	} else if (received == '\r') {												//If received contains a carriage return
		
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
 2cc:	00 e0       	ldi	r16, 0x00	; 0
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
			}
			bufferPos = -1;														//Reset buffer position
		}
		if (command) {															//Only if a command is set is data transmitted
			testTransmitUSART(command, intValue); /*test*/
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	b8 01       	movw	r22, r16
 2d2:	8c 2d       	mov	r24, r12
 2d4:	6b d0       	rcall	.+214    	; 0x3ac <testTransmitUSART>
		
			command = 0;														//Reset command
 2d6:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <command.1715>
		}
	}
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	0f 90       	pop	r0
 304:	0b be       	out	0x3b, r0	; 59
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <main>:

int main(void)
{	
	//USART initialization
	UCSR0A = 0x00;								
 310:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B |= (1 << RXCIE0 | 1 << RXEN0);		//Enable USART receiver, receiver interrupt
 314:	e1 ec       	ldi	r30, 0xC1	; 193
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 69       	ori	r24, 0x90	; 144
 31c:	80 83       	st	Z, r24
	UCSR0B |= 1 << TXEN0;	/*Transmitter enabled for testing*/
 31e:	80 81       	ld	r24, Z
 320:	88 60       	ori	r24, 0x08	; 8
 322:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01 | 1 << UCSZ00);		//Asynchronous USART, Parity none, 1 Stop bit, 8-bit character size
 324:	e2 ec       	ldi	r30, 0xC2	; 194
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	86 60       	ori	r24, 0x06	; 6
 32c:	80 83       	st	Z, r24
	UBRR0H = 00;
 32e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103;								//Baudrate 9600
 332:	87 e6       	ldi	r24, 0x67	; 103
 334:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	sei();										//Enable interrupt routines
 338:	78 94       	sei
 33a:	ff cf       	rjmp	.-2      	; 0x33a <main+0x2a>

0000033c <writeChar>:
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
 33c:	e0 ec       	ldi	r30, 0xC0	; 192
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	90 81       	ld	r25, Z
 342:	95 ff       	sbrs	r25, 5
 344:	fd cf       	rjmp	.-6      	; 0x340 <writeChar+0x4>
	UDR0 = x;
 346:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 34a:	08 95       	ret

0000034c <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
 354:	80 81       	ld	r24, Z
 356:	88 23       	and	r24, r24
 358:	51 f0       	breq	.+20     	; 0x36e <writeString+0x22>
 35a:	8f 01       	movw	r16, r30
 35c:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
 35e:	ee df       	rcall	.-36     	; 0x33c <writeChar>
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
 360:	cf 5f       	subi	r28, 0xFF	; 255
 362:	f8 01       	movw	r30, r16
 364:	ec 0f       	add	r30, r28
 366:	f1 1d       	adc	r31, r1
 368:	80 81       	ld	r24, Z
 36a:	81 11       	cpse	r24, r1
 36c:	f8 cf       	rjmp	.-16     	; 0x35e <writeString+0x12>
		writeChar( st[i] );
	}
}
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	28 97       	sbiw	r28, 0x08	; 8
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 38a:	4a e0       	ldi	r20, 0x0A	; 10
 38c:	be 01       	movw	r22, r28
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	6e d3       	rcall	.+1756   	; 0xa70 <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	d9 df       	rcall	.-78     	; 0x34c <writeString>
}
 39a:	28 96       	adiw	r28, 0x08	; 8
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <testTransmitUSART>:

void testTransmitUSART(char charToSend, int intToSend) {	//Transmits charToSend and intToSend over USART, separated by a space and followed by CR LF
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	eb 01       	movw	r28, r22
	
	writeChar(charToSend);
 3b2:	c4 df       	rcall	.-120    	; 0x33c <writeChar>
	writeChar(' ');
 3b4:	80 e2       	ldi	r24, 0x20	; 32
 3b6:	c2 df       	rcall	.-124    	; 0x33c <writeChar>
	writeInt(intToSend);
 3b8:	ce 01       	movw	r24, r28
 3ba:	dd df       	rcall	.-70     	; 0x376 <writeInt>
	writeString("\r\n");
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	c5 df       	rcall	.-118    	; 0x34c <writeString>
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <__subsf3>:
 3c8:	50 58       	subi	r21, 0x80	; 128

000003ca <__addsf3>:
 3ca:	bb 27       	eor	r27, r27
 3cc:	aa 27       	eor	r26, r26
 3ce:	0e d0       	rcall	.+28     	; 0x3ec <__addsf3x>
 3d0:	e5 c0       	rjmp	.+458    	; 0x59c <__fp_round>
 3d2:	d6 d0       	rcall	.+428    	; 0x580 <__fp_pscA>
 3d4:	30 f0       	brcs	.+12     	; 0x3e2 <__addsf3+0x18>
 3d6:	db d0       	rcall	.+438    	; 0x58e <__fp_pscB>
 3d8:	20 f0       	brcs	.+8      	; 0x3e2 <__addsf3+0x18>
 3da:	31 f4       	brne	.+12     	; 0x3e8 <__addsf3+0x1e>
 3dc:	9f 3f       	cpi	r25, 0xFF	; 255
 3de:	11 f4       	brne	.+4      	; 0x3e4 <__addsf3+0x1a>
 3e0:	1e f4       	brtc	.+6      	; 0x3e8 <__addsf3+0x1e>
 3e2:	cb c0       	rjmp	.+406    	; 0x57a <__fp_nan>
 3e4:	0e f4       	brtc	.+2      	; 0x3e8 <__addsf3+0x1e>
 3e6:	e0 95       	com	r30
 3e8:	e7 fb       	bst	r30, 7
 3ea:	c1 c0       	rjmp	.+386    	; 0x56e <__fp_inf>

000003ec <__addsf3x>:
 3ec:	e9 2f       	mov	r30, r25
 3ee:	e7 d0       	rcall	.+462    	; 0x5be <__fp_split3>
 3f0:	80 f3       	brcs	.-32     	; 0x3d2 <__addsf3+0x8>
 3f2:	ba 17       	cp	r27, r26
 3f4:	62 07       	cpc	r22, r18
 3f6:	73 07       	cpc	r23, r19
 3f8:	84 07       	cpc	r24, r20
 3fa:	95 07       	cpc	r25, r21
 3fc:	18 f0       	brcs	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	71 f4       	brne	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 400:	9e f5       	brtc	.+102    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 402:	ff c0       	rjmp	.+510    	; 0x602 <__fp_zero>
 404:	0e f4       	brtc	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	e0 95       	com	r30
 408:	0b 2e       	mov	r0, r27
 40a:	ba 2f       	mov	r27, r26
 40c:	a0 2d       	mov	r26, r0
 40e:	0b 01       	movw	r0, r22
 410:	b9 01       	movw	r22, r18
 412:	90 01       	movw	r18, r0
 414:	0c 01       	movw	r0, r24
 416:	ca 01       	movw	r24, r20
 418:	a0 01       	movw	r20, r0
 41a:	11 24       	eor	r1, r1
 41c:	ff 27       	eor	r31, r31
 41e:	59 1b       	sub	r21, r25
 420:	99 f0       	breq	.+38     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 422:	59 3f       	cpi	r21, 0xF9	; 249
 424:	50 f4       	brcc	.+20     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 426:	50 3e       	cpi	r21, 0xE0	; 224
 428:	68 f1       	brcs	.+90     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 42a:	1a 16       	cp	r1, r26
 42c:	f0 40       	sbci	r31, 0x00	; 0
 42e:	a2 2f       	mov	r26, r18
 430:	23 2f       	mov	r18, r19
 432:	34 2f       	mov	r19, r20
 434:	44 27       	eor	r20, r20
 436:	58 5f       	subi	r21, 0xF8	; 248
 438:	f3 cf       	rjmp	.-26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 43a:	46 95       	lsr	r20
 43c:	37 95       	ror	r19
 43e:	27 95       	ror	r18
 440:	a7 95       	ror	r26
 442:	f0 40       	sbci	r31, 0x00	; 0
 444:	53 95       	inc	r21
 446:	c9 f7       	brne	.-14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 448:	7e f4       	brtc	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44a:	1f 16       	cp	r1, r31
 44c:	ba 0b       	sbc	r27, r26
 44e:	62 0b       	sbc	r22, r18
 450:	73 0b       	sbc	r23, r19
 452:	84 0b       	sbc	r24, r20
 454:	ba f0       	brmi	.+46     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 456:	91 50       	subi	r25, 0x01	; 1
 458:	a1 f0       	breq	.+40     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 45a:	ff 0f       	add	r31, r31
 45c:	bb 1f       	adc	r27, r27
 45e:	66 1f       	adc	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	88 1f       	adc	r24, r24
 464:	c2 f7       	brpl	.-16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 466:	0e c0       	rjmp	.+28     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 468:	ba 0f       	add	r27, r26
 46a:	62 1f       	adc	r22, r18
 46c:	73 1f       	adc	r23, r19
 46e:	84 1f       	adc	r24, r20
 470:	48 f4       	brcc	.+18     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 472:	87 95       	ror	r24
 474:	77 95       	ror	r23
 476:	67 95       	ror	r22
 478:	b7 95       	ror	r27
 47a:	f7 95       	ror	r31
 47c:	9e 3f       	cpi	r25, 0xFE	; 254
 47e:	08 f0       	brcs	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	b3 cf       	rjmp	.-154    	; 0x3e8 <__addsf3+0x1e>
 482:	93 95       	inc	r25
 484:	88 0f       	add	r24, r24
 486:	08 f0       	brcs	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 488:	99 27       	eor	r25, r25
 48a:	ee 0f       	add	r30, r30
 48c:	97 95       	ror	r25
 48e:	87 95       	ror	r24
 490:	08 95       	ret

00000492 <__fixsfsi>:
 492:	04 d0       	rcall	.+8      	; 0x49c <__fixunssfsi>
 494:	68 94       	set
 496:	b1 11       	cpse	r27, r1
 498:	b5 c0       	rjmp	.+362    	; 0x604 <__fp_szero>
 49a:	08 95       	ret

0000049c <__fixunssfsi>:
 49c:	98 d0       	rcall	.+304    	; 0x5ce <__fp_splitA>
 49e:	88 f0       	brcs	.+34     	; 0x4c2 <__fixunssfsi+0x26>
 4a0:	9f 57       	subi	r25, 0x7F	; 127
 4a2:	90 f0       	brcs	.+36     	; 0x4c8 <__fixunssfsi+0x2c>
 4a4:	b9 2f       	mov	r27, r25
 4a6:	99 27       	eor	r25, r25
 4a8:	b7 51       	subi	r27, 0x17	; 23
 4aa:	a0 f0       	brcs	.+40     	; 0x4d4 <__fixunssfsi+0x38>
 4ac:	d1 f0       	breq	.+52     	; 0x4e2 <__fixunssfsi+0x46>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	1a f0       	brmi	.+6      	; 0x4be <__fixunssfsi+0x22>
 4b8:	ba 95       	dec	r27
 4ba:	c9 f7       	brne	.-14     	; 0x4ae <__fixunssfsi+0x12>
 4bc:	12 c0       	rjmp	.+36     	; 0x4e2 <__fixunssfsi+0x46>
 4be:	b1 30       	cpi	r27, 0x01	; 1
 4c0:	81 f0       	breq	.+32     	; 0x4e2 <__fixunssfsi+0x46>
 4c2:	9f d0       	rcall	.+318    	; 0x602 <__fp_zero>
 4c4:	b1 e0       	ldi	r27, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	9c c0       	rjmp	.+312    	; 0x602 <__fp_zero>
 4ca:	67 2f       	mov	r22, r23
 4cc:	78 2f       	mov	r23, r24
 4ce:	88 27       	eor	r24, r24
 4d0:	b8 5f       	subi	r27, 0xF8	; 248
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <__fixunssfsi+0x46>
 4d4:	b9 3f       	cpi	r27, 0xF9	; 249
 4d6:	cc f3       	brlt	.-14     	; 0x4ca <__fixunssfsi+0x2e>
 4d8:	86 95       	lsr	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b3 95       	inc	r27
 4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__fixunssfsi+0x3c>
 4e2:	3e f4       	brtc	.+14     	; 0x4f2 <__fixunssfsi+0x56>
 4e4:	90 95       	com	r25
 4e6:	80 95       	com	r24
 4e8:	70 95       	com	r23
 4ea:	61 95       	neg	r22
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8f 4f       	sbci	r24, 0xFF	; 255
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	08 95       	ret

000004f4 <__floatunsisf>:
 4f4:	e8 94       	clt
 4f6:	09 c0       	rjmp	.+18     	; 0x50a <__floatsisf+0x12>

000004f8 <__floatsisf>:
 4f8:	97 fb       	bst	r25, 7
 4fa:	3e f4       	brtc	.+14     	; 0x50a <__floatsisf+0x12>
 4fc:	90 95       	com	r25
 4fe:	80 95       	com	r24
 500:	70 95       	com	r23
 502:	61 95       	neg	r22
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	99 23       	and	r25, r25
 50c:	a9 f0       	breq	.+42     	; 0x538 <__floatsisf+0x40>
 50e:	f9 2f       	mov	r31, r25
 510:	96 e9       	ldi	r25, 0x96	; 150
 512:	bb 27       	eor	r27, r27
 514:	93 95       	inc	r25
 516:	f6 95       	lsr	r31
 518:	87 95       	ror	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b7 95       	ror	r27
 520:	f1 11       	cpse	r31, r1
 522:	f8 cf       	rjmp	.-16     	; 0x514 <__floatsisf+0x1c>
 524:	fa f4       	brpl	.+62     	; 0x564 <__floatsisf+0x6c>
 526:	bb 0f       	add	r27, r27
 528:	11 f4       	brne	.+4      	; 0x52e <__floatsisf+0x36>
 52a:	60 ff       	sbrs	r22, 0
 52c:	1b c0       	rjmp	.+54     	; 0x564 <__floatsisf+0x6c>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	16 c0       	rjmp	.+44     	; 0x564 <__floatsisf+0x6c>
 538:	88 23       	and	r24, r24
 53a:	11 f0       	breq	.+4      	; 0x540 <__floatsisf+0x48>
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	11 c0       	rjmp	.+34     	; 0x562 <__floatsisf+0x6a>
 540:	77 23       	and	r23, r23
 542:	21 f0       	breq	.+8      	; 0x54c <__floatsisf+0x54>
 544:	9e e8       	ldi	r25, 0x8E	; 142
 546:	87 2f       	mov	r24, r23
 548:	76 2f       	mov	r23, r22
 54a:	05 c0       	rjmp	.+10     	; 0x556 <__floatsisf+0x5e>
 54c:	66 23       	and	r22, r22
 54e:	71 f0       	breq	.+28     	; 0x56c <__floatsisf+0x74>
 550:	96 e8       	ldi	r25, 0x86	; 134
 552:	86 2f       	mov	r24, r22
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	2a f0       	brmi	.+10     	; 0x564 <__floatsisf+0x6c>
 55a:	9a 95       	dec	r25
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	da f7       	brpl	.-10     	; 0x55a <__floatsisf+0x62>
 564:	88 0f       	add	r24, r24
 566:	96 95       	lsr	r25
 568:	87 95       	ror	r24
 56a:	97 f9       	bld	r25, 7
 56c:	08 95       	ret

0000056e <__fp_inf>:
 56e:	97 f9       	bld	r25, 7
 570:	9f 67       	ori	r25, 0x7F	; 127
 572:	80 e8       	ldi	r24, 0x80	; 128
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	08 95       	ret

0000057a <__fp_nan>:
 57a:	9f ef       	ldi	r25, 0xFF	; 255
 57c:	80 ec       	ldi	r24, 0xC0	; 192
 57e:	08 95       	ret

00000580 <__fp_pscA>:
 580:	00 24       	eor	r0, r0
 582:	0a 94       	dec	r0
 584:	16 16       	cp	r1, r22
 586:	17 06       	cpc	r1, r23
 588:	18 06       	cpc	r1, r24
 58a:	09 06       	cpc	r0, r25
 58c:	08 95       	ret

0000058e <__fp_pscB>:
 58e:	00 24       	eor	r0, r0
 590:	0a 94       	dec	r0
 592:	12 16       	cp	r1, r18
 594:	13 06       	cpc	r1, r19
 596:	14 06       	cpc	r1, r20
 598:	05 06       	cpc	r0, r21
 59a:	08 95       	ret

0000059c <__fp_round>:
 59c:	09 2e       	mov	r0, r25
 59e:	03 94       	inc	r0
 5a0:	00 0c       	add	r0, r0
 5a2:	11 f4       	brne	.+4      	; 0x5a8 <__fp_round+0xc>
 5a4:	88 23       	and	r24, r24
 5a6:	52 f0       	brmi	.+20     	; 0x5bc <__fp_round+0x20>
 5a8:	bb 0f       	add	r27, r27
 5aa:	40 f4       	brcc	.+16     	; 0x5bc <__fp_round+0x20>
 5ac:	bf 2b       	or	r27, r31
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0x18>
 5b0:	60 ff       	sbrs	r22, 0
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <__fp_round+0x20>
 5b4:	6f 5f       	subi	r22, 0xFF	; 255
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 95       	ret

000005be <__fp_split3>:
 5be:	57 fd       	sbrc	r21, 7
 5c0:	90 58       	subi	r25, 0x80	; 128
 5c2:	44 0f       	add	r20, r20
 5c4:	55 1f       	adc	r21, r21
 5c6:	59 f0       	breq	.+22     	; 0x5de <__fp_splitA+0x10>
 5c8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ca:	71 f0       	breq	.+28     	; 0x5e8 <__fp_splitA+0x1a>
 5cc:	47 95       	ror	r20

000005ce <__fp_splitA>:
 5ce:	88 0f       	add	r24, r24
 5d0:	97 fb       	bst	r25, 7
 5d2:	99 1f       	adc	r25, r25
 5d4:	61 f0       	breq	.+24     	; 0x5ee <__fp_splitA+0x20>
 5d6:	9f 3f       	cpi	r25, 0xFF	; 255
 5d8:	79 f0       	breq	.+30     	; 0x5f8 <__fp_splitA+0x2a>
 5da:	87 95       	ror	r24
 5dc:	08 95       	ret
 5de:	12 16       	cp	r1, r18
 5e0:	13 06       	cpc	r1, r19
 5e2:	14 06       	cpc	r1, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	f2 cf       	rjmp	.-28     	; 0x5cc <__fp_split3+0xe>
 5e8:	46 95       	lsr	r20
 5ea:	f1 df       	rcall	.-30     	; 0x5ce <__fp_splitA>
 5ec:	08 c0       	rjmp	.+16     	; 0x5fe <__fp_splitA+0x30>
 5ee:	16 16       	cp	r1, r22
 5f0:	17 06       	cpc	r1, r23
 5f2:	18 06       	cpc	r1, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	f1 cf       	rjmp	.-30     	; 0x5da <__fp_splitA+0xc>
 5f8:	86 95       	lsr	r24
 5fa:	71 05       	cpc	r23, r1
 5fc:	61 05       	cpc	r22, r1
 5fe:	08 94       	sec
 600:	08 95       	ret

00000602 <__fp_zero>:
 602:	e8 94       	clt

00000604 <__fp_szero>:
 604:	bb 27       	eor	r27, r27
 606:	66 27       	eor	r22, r22
 608:	77 27       	eor	r23, r23
 60a:	cb 01       	movw	r24, r22
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <pow>:
 610:	fa 01       	movw	r30, r20
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	30 96       	adiw	r30, 0x00	; 0
 618:	21 05       	cpc	r18, r1
 61a:	31 05       	cpc	r19, r1
 61c:	99 f1       	breq	.+102    	; 0x684 <pow+0x74>
 61e:	61 15       	cp	r22, r1
 620:	71 05       	cpc	r23, r1
 622:	61 f4       	brne	.+24     	; 0x63c <pow+0x2c>
 624:	80 38       	cpi	r24, 0x80	; 128
 626:	bf e3       	ldi	r27, 0x3F	; 63
 628:	9b 07       	cpc	r25, r27
 62a:	49 f1       	breq	.+82     	; 0x67e <pow+0x6e>
 62c:	68 94       	set
 62e:	90 38       	cpi	r25, 0x80	; 128
 630:	81 05       	cpc	r24, r1
 632:	61 f0       	breq	.+24     	; 0x64c <pow+0x3c>
 634:	80 38       	cpi	r24, 0x80	; 128
 636:	bf ef       	ldi	r27, 0xFF	; 255
 638:	9b 07       	cpc	r25, r27
 63a:	41 f0       	breq	.+16     	; 0x64c <pow+0x3c>
 63c:	99 23       	and	r25, r25
 63e:	42 f5       	brpl	.+80     	; 0x690 <pow+0x80>
 640:	ff 3f       	cpi	r31, 0xFF	; 255
 642:	e1 05       	cpc	r30, r1
 644:	31 05       	cpc	r19, r1
 646:	21 05       	cpc	r18, r1
 648:	11 f1       	breq	.+68     	; 0x68e <pow+0x7e>
 64a:	e8 94       	clt
 64c:	08 94       	sec
 64e:	e7 95       	ror	r30
 650:	d9 01       	movw	r26, r18
 652:	aa 23       	and	r26, r26
 654:	29 f4       	brne	.+10     	; 0x660 <pow+0x50>
 656:	ab 2f       	mov	r26, r27
 658:	be 2f       	mov	r27, r30
 65a:	f8 5f       	subi	r31, 0xF8	; 248
 65c:	d0 f3       	brcs	.-12     	; 0x652 <pow+0x42>
 65e:	10 c0       	rjmp	.+32     	; 0x680 <pow+0x70>
 660:	ff 5f       	subi	r31, 0xFF	; 255
 662:	70 f4       	brcc	.+28     	; 0x680 <pow+0x70>
 664:	a6 95       	lsr	r26
 666:	e0 f7       	brcc	.-8      	; 0x660 <pow+0x50>
 668:	f7 39       	cpi	r31, 0x97	; 151
 66a:	50 f0       	brcs	.+20     	; 0x680 <pow+0x70>
 66c:	19 f0       	breq	.+6      	; 0x674 <pow+0x64>
 66e:	ff 3a       	cpi	r31, 0xAF	; 175
 670:	38 f4       	brcc	.+14     	; 0x680 <pow+0x70>
 672:	9f 77       	andi	r25, 0x7F	; 127
 674:	9f 93       	push	r25
 676:	0c d0       	rcall	.+24     	; 0x690 <pow+0x80>
 678:	0f 90       	pop	r0
 67a:	07 fc       	sbrc	r0, 7
 67c:	90 58       	subi	r25, 0x80	; 128
 67e:	08 95       	ret
 680:	3e f0       	brts	.+14     	; 0x690 <pow+0x80>
 682:	7b cf       	rjmp	.-266    	; 0x57a <__fp_nan>
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	80 e8       	ldi	r24, 0x80	; 128
 68a:	9f e3       	ldi	r25, 0x3F	; 63
 68c:	08 95       	ret
 68e:	4f e7       	ldi	r20, 0x7F	; 127
 690:	9f 77       	andi	r25, 0x7F	; 127
 692:	5f 93       	push	r21
 694:	4f 93       	push	r20
 696:	3f 93       	push	r19
 698:	2f 93       	push	r18
 69a:	9e d0       	rcall	.+316    	; 0x7d8 <log>
 69c:	2f 91       	pop	r18
 69e:	3f 91       	pop	r19
 6a0:	4f 91       	pop	r20
 6a2:	5f 91       	pop	r21
 6a4:	0c d1       	rcall	.+536    	; 0x8be <__mulsf3>
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <exp>
 6a8:	19 f4       	brne	.+6      	; 0x6b0 <pow+0xa0>
 6aa:	0e f0       	brts	.+2      	; 0x6ae <pow+0x9e>
 6ac:	60 cf       	rjmp	.-320    	; 0x56e <__fp_inf>
 6ae:	a9 cf       	rjmp	.-174    	; 0x602 <__fp_zero>
 6b0:	64 cf       	rjmp	.-312    	; 0x57a <__fp_nan>

000006b2 <exp>:
 6b2:	8d df       	rcall	.-230    	; 0x5ce <__fp_splitA>
 6b4:	c8 f3       	brcs	.-14     	; 0x6a8 <pow+0x98>
 6b6:	96 38       	cpi	r25, 0x86	; 134
 6b8:	c0 f7       	brcc	.-16     	; 0x6aa <pow+0x9a>
 6ba:	07 f8       	bld	r0, 7
 6bc:	0f 92       	push	r0
 6be:	e8 94       	clt
 6c0:	2b e3       	ldi	r18, 0x3B	; 59
 6c2:	3a ea       	ldi	r19, 0xAA	; 170
 6c4:	48 eb       	ldi	r20, 0xB8	; 184
 6c6:	5f e7       	ldi	r21, 0x7F	; 127
 6c8:	08 d1       	rcall	.+528    	; 0x8da <__mulsf3_pse>
 6ca:	0f 92       	push	r0
 6cc:	0f 92       	push	r0
 6ce:	0f 92       	push	r0
 6d0:	4d b7       	in	r20, 0x3d	; 61
 6d2:	5e b7       	in	r21, 0x3e	; 62
 6d4:	0f 92       	push	r0
 6d6:	c0 d0       	rcall	.+384    	; 0x858 <modf>
 6d8:	e4 ee       	ldi	r30, 0xE4	; 228
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	16 d0       	rcall	.+44     	; 0x70a <__fp_powser>
 6de:	4f 91       	pop	r20
 6e0:	5f 91       	pop	r21
 6e2:	ef 91       	pop	r30
 6e4:	ff 91       	pop	r31
 6e6:	e5 95       	asr	r30
 6e8:	ee 1f       	adc	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	49 f0       	breq	.+18     	; 0x700 <exp+0x4e>
 6ee:	fe 57       	subi	r31, 0x7E	; 126
 6f0:	e0 68       	ori	r30, 0x80	; 128
 6f2:	44 27       	eor	r20, r20
 6f4:	ee 0f       	add	r30, r30
 6f6:	44 1f       	adc	r20, r20
 6f8:	fa 95       	dec	r31
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <exp+0x42>
 6fc:	41 95       	neg	r20
 6fe:	55 0b       	sbc	r21, r21
 700:	32 d0       	rcall	.+100    	; 0x766 <ldexp>
 702:	0f 90       	pop	r0
 704:	07 fe       	sbrs	r0, 7
 706:	26 c0       	rjmp	.+76     	; 0x754 <inverse>
 708:	08 95       	ret

0000070a <__fp_powser>:
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	1f 93       	push	r17
 710:	0f 93       	push	r16
 712:	ff 92       	push	r15
 714:	ef 92       	push	r14
 716:	df 92       	push	r13
 718:	7b 01       	movw	r14, r22
 71a:	8c 01       	movw	r16, r24
 71c:	68 94       	set
 71e:	05 c0       	rjmp	.+10     	; 0x72a <__fp_powser+0x20>
 720:	da 2e       	mov	r13, r26
 722:	ef 01       	movw	r28, r30
 724:	d8 d0       	rcall	.+432    	; 0x8d6 <__mulsf3x>
 726:	fe 01       	movw	r30, r28
 728:	e8 94       	clt
 72a:	a5 91       	lpm	r26, Z+
 72c:	25 91       	lpm	r18, Z+
 72e:	35 91       	lpm	r19, Z+
 730:	45 91       	lpm	r20, Z+
 732:	55 91       	lpm	r21, Z+
 734:	ae f3       	brts	.-22     	; 0x720 <__fp_powser+0x16>
 736:	ef 01       	movw	r28, r30
 738:	59 de       	rcall	.-846    	; 0x3ec <__addsf3x>
 73a:	fe 01       	movw	r30, r28
 73c:	97 01       	movw	r18, r14
 73e:	a8 01       	movw	r20, r16
 740:	da 94       	dec	r13
 742:	79 f7       	brne	.-34     	; 0x722 <__fp_powser+0x18>
 744:	df 90       	pop	r13
 746:	ef 90       	pop	r14
 748:	ff 90       	pop	r15
 74a:	0f 91       	pop	r16
 74c:	1f 91       	pop	r17
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	08 95       	ret

00000754 <inverse>:
 754:	9b 01       	movw	r18, r22
 756:	ac 01       	movw	r20, r24
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	80 e8       	ldi	r24, 0x80	; 128
 75e:	9f e3       	ldi	r25, 0x3F	; 63
 760:	11 c1       	rjmp	.+546    	; 0x984 <__divsf3>
 762:	05 cf       	rjmp	.-502    	; 0x56e <__fp_inf>
 764:	77 c1       	rjmp	.+750    	; 0xa54 <__fp_mpack>

00000766 <ldexp>:
 766:	33 df       	rcall	.-410    	; 0x5ce <__fp_splitA>
 768:	e8 f3       	brcs	.-6      	; 0x764 <inverse+0x10>
 76a:	99 23       	and	r25, r25
 76c:	d9 f3       	breq	.-10     	; 0x764 <inverse+0x10>
 76e:	94 0f       	add	r25, r20
 770:	51 1d       	adc	r21, r1
 772:	bb f3       	brvs	.-18     	; 0x762 <inverse+0xe>
 774:	91 50       	subi	r25, 0x01	; 1
 776:	50 40       	sbci	r21, 0x00	; 0
 778:	94 f0       	brlt	.+36     	; 0x79e <ldexp+0x38>
 77a:	59 f0       	breq	.+22     	; 0x792 <ldexp+0x2c>
 77c:	88 23       	and	r24, r24
 77e:	32 f0       	brmi	.+12     	; 0x78c <ldexp+0x26>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	91 50       	subi	r25, 0x01	; 1
 788:	50 40       	sbci	r21, 0x00	; 0
 78a:	c1 f7       	brne	.-16     	; 0x77c <ldexp+0x16>
 78c:	9e 3f       	cpi	r25, 0xFE	; 254
 78e:	51 05       	cpc	r21, r1
 790:	44 f7       	brge	.-48     	; 0x762 <inverse+0xe>
 792:	88 0f       	add	r24, r24
 794:	91 1d       	adc	r25, r1
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	97 f9       	bld	r25, 7
 79c:	08 95       	ret
 79e:	5f 3f       	cpi	r21, 0xFF	; 255
 7a0:	ac f0       	brlt	.+42     	; 0x7cc <ldexp+0x66>
 7a2:	98 3e       	cpi	r25, 0xE8	; 232
 7a4:	9c f0       	brlt	.+38     	; 0x7cc <ldexp+0x66>
 7a6:	bb 27       	eor	r27, r27
 7a8:	86 95       	lsr	r24
 7aa:	77 95       	ror	r23
 7ac:	67 95       	ror	r22
 7ae:	b7 95       	ror	r27
 7b0:	08 f4       	brcc	.+2      	; 0x7b4 <ldexp+0x4e>
 7b2:	b1 60       	ori	r27, 0x01	; 1
 7b4:	93 95       	inc	r25
 7b6:	c1 f7       	brne	.-16     	; 0x7a8 <ldexp+0x42>
 7b8:	bb 0f       	add	r27, r27
 7ba:	58 f7       	brcc	.-42     	; 0x792 <ldexp+0x2c>
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <ldexp+0x5c>
 7be:	60 ff       	sbrs	r22, 0
 7c0:	e8 cf       	rjmp	.-48     	; 0x792 <ldexp+0x2c>
 7c2:	6f 5f       	subi	r22, 0xFF	; 255
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	8f 4f       	sbci	r24, 0xFF	; 255
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	e3 cf       	rjmp	.-58     	; 0x792 <ldexp+0x2c>
 7cc:	1b cf       	rjmp	.-458    	; 0x604 <__fp_szero>
 7ce:	0e f0       	brts	.+2      	; 0x7d2 <ldexp+0x6c>
 7d0:	41 c1       	rjmp	.+642    	; 0xa54 <__fp_mpack>
 7d2:	d3 ce       	rjmp	.-602    	; 0x57a <__fp_nan>
 7d4:	68 94       	set
 7d6:	cb ce       	rjmp	.-618    	; 0x56e <__fp_inf>

000007d8 <log>:
 7d8:	fa de       	rcall	.-524    	; 0x5ce <__fp_splitA>
 7da:	c8 f3       	brcs	.-14     	; 0x7ce <ldexp+0x68>
 7dc:	99 23       	and	r25, r25
 7de:	d1 f3       	breq	.-12     	; 0x7d4 <ldexp+0x6e>
 7e0:	c6 f3       	brts	.-16     	; 0x7d2 <ldexp+0x6c>
 7e2:	df 93       	push	r29
 7e4:	cf 93       	push	r28
 7e6:	1f 93       	push	r17
 7e8:	0f 93       	push	r16
 7ea:	ff 92       	push	r15
 7ec:	c9 2f       	mov	r28, r25
 7ee:	dd 27       	eor	r29, r29
 7f0:	88 23       	and	r24, r24
 7f2:	2a f0       	brmi	.+10     	; 0x7fe <log+0x26>
 7f4:	21 97       	sbiw	r28, 0x01	; 1
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	da f7       	brpl	.-10     	; 0x7f4 <log+0x1c>
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	40 e8       	ldi	r20, 0x80	; 128
 804:	5f eb       	ldi	r21, 0xBF	; 191
 806:	9f e3       	ldi	r25, 0x3F	; 63
 808:	88 39       	cpi	r24, 0x98	; 152
 80a:	20 f0       	brcs	.+8      	; 0x814 <log+0x3c>
 80c:	80 3e       	cpi	r24, 0xE0	; 224
 80e:	30 f0       	brcs	.+12     	; 0x81c <log+0x44>
 810:	21 96       	adiw	r28, 0x01	; 1
 812:	8f 77       	andi	r24, 0x7F	; 127
 814:	da dd       	rcall	.-1100   	; 0x3ca <__addsf3>
 816:	ec e0       	ldi	r30, 0x0C	; 12
 818:	f1 e0       	ldi	r31, 0x01	; 1
 81a:	03 c0       	rjmp	.+6      	; 0x822 <log+0x4a>
 81c:	d6 dd       	rcall	.-1108   	; 0x3ca <__addsf3>
 81e:	e9 e3       	ldi	r30, 0x39	; 57
 820:	f1 e0       	ldi	r31, 0x01	; 1
 822:	73 df       	rcall	.-282    	; 0x70a <__fp_powser>
 824:	8b 01       	movw	r16, r22
 826:	be 01       	movw	r22, r28
 828:	ec 01       	movw	r28, r24
 82a:	fb 2e       	mov	r15, r27
 82c:	6f 57       	subi	r22, 0x7F	; 127
 82e:	71 09       	sbc	r23, r1
 830:	75 95       	asr	r23
 832:	77 1f       	adc	r23, r23
 834:	88 0b       	sbc	r24, r24
 836:	99 0b       	sbc	r25, r25
 838:	5f de       	rcall	.-834    	; 0x4f8 <__floatsisf>
 83a:	28 e1       	ldi	r18, 0x18	; 24
 83c:	32 e7       	ldi	r19, 0x72	; 114
 83e:	41 e3       	ldi	r20, 0x31	; 49
 840:	5f e3       	ldi	r21, 0x3F	; 63
 842:	49 d0       	rcall	.+146    	; 0x8d6 <__mulsf3x>
 844:	af 2d       	mov	r26, r15
 846:	98 01       	movw	r18, r16
 848:	ae 01       	movw	r20, r28
 84a:	ff 90       	pop	r15
 84c:	0f 91       	pop	r16
 84e:	1f 91       	pop	r17
 850:	cf 91       	pop	r28
 852:	df 91       	pop	r29
 854:	cb dd       	rcall	.-1130   	; 0x3ec <__addsf3x>
 856:	a2 ce       	rjmp	.-700    	; 0x59c <__fp_round>

00000858 <modf>:
 858:	fa 01       	movw	r30, r20
 85a:	dc 01       	movw	r26, r24
 85c:	aa 0f       	add	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	9b 01       	movw	r18, r22
 862:	ac 01       	movw	r20, r24
 864:	bf 57       	subi	r27, 0x7F	; 127
 866:	28 f4       	brcc	.+10     	; 0x872 <modf+0x1a>
 868:	22 27       	eor	r18, r18
 86a:	33 27       	eor	r19, r19
 86c:	44 27       	eor	r20, r20
 86e:	50 78       	andi	r21, 0x80	; 128
 870:	1f c0       	rjmp	.+62     	; 0x8b0 <modf+0x58>
 872:	b7 51       	subi	r27, 0x17	; 23
 874:	88 f4       	brcc	.+34     	; 0x898 <modf+0x40>
 876:	ab 2f       	mov	r26, r27
 878:	00 24       	eor	r0, r0
 87a:	46 95       	lsr	r20
 87c:	37 95       	ror	r19
 87e:	27 95       	ror	r18
 880:	01 1c       	adc	r0, r1
 882:	a3 95       	inc	r26
 884:	d2 f3       	brmi	.-12     	; 0x87a <modf+0x22>
 886:	00 20       	and	r0, r0
 888:	69 f0       	breq	.+26     	; 0x8a4 <modf+0x4c>
 88a:	22 0f       	add	r18, r18
 88c:	33 1f       	adc	r19, r19
 88e:	44 1f       	adc	r20, r20
 890:	b3 95       	inc	r27
 892:	da f3       	brmi	.-10     	; 0x88a <modf+0x32>
 894:	0d d0       	rcall	.+26     	; 0x8b0 <modf+0x58>
 896:	98 cd       	rjmp	.-1232   	; 0x3c8 <__subsf3>
 898:	61 30       	cpi	r22, 0x01	; 1
 89a:	71 05       	cpc	r23, r1
 89c:	a0 e8       	ldi	r26, 0x80	; 128
 89e:	8a 07       	cpc	r24, r26
 8a0:	b9 46       	sbci	r27, 0x69	; 105
 8a2:	30 f4       	brcc	.+12     	; 0x8b0 <modf+0x58>
 8a4:	9b 01       	movw	r18, r22
 8a6:	ac 01       	movw	r20, r24
 8a8:	66 27       	eor	r22, r22
 8aa:	77 27       	eor	r23, r23
 8ac:	88 27       	eor	r24, r24
 8ae:	90 78       	andi	r25, 0x80	; 128
 8b0:	30 96       	adiw	r30, 0x00	; 0
 8b2:	21 f0       	breq	.+8      	; 0x8bc <modf+0x64>
 8b4:	20 83       	st	Z, r18
 8b6:	31 83       	std	Z+1, r19	; 0x01
 8b8:	42 83       	std	Z+2, r20	; 0x02
 8ba:	53 83       	std	Z+3, r21	; 0x03
 8bc:	08 95       	ret

000008be <__mulsf3>:
 8be:	0b d0       	rcall	.+22     	; 0x8d6 <__mulsf3x>
 8c0:	6d ce       	rjmp	.-806    	; 0x59c <__fp_round>
 8c2:	5e de       	rcall	.-836    	; 0x580 <__fp_pscA>
 8c4:	28 f0       	brcs	.+10     	; 0x8d0 <__mulsf3+0x12>
 8c6:	63 de       	rcall	.-826    	; 0x58e <__fp_pscB>
 8c8:	18 f0       	brcs	.+6      	; 0x8d0 <__mulsf3+0x12>
 8ca:	95 23       	and	r25, r21
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <__mulsf3+0x12>
 8ce:	4f ce       	rjmp	.-866    	; 0x56e <__fp_inf>
 8d0:	54 ce       	rjmp	.-856    	; 0x57a <__fp_nan>
 8d2:	11 24       	eor	r1, r1
 8d4:	97 ce       	rjmp	.-722    	; 0x604 <__fp_szero>

000008d6 <__mulsf3x>:
 8d6:	73 de       	rcall	.-794    	; 0x5be <__fp_split3>
 8d8:	a0 f3       	brcs	.-24     	; 0x8c2 <__mulsf3+0x4>

000008da <__mulsf3_pse>:
 8da:	95 9f       	mul	r25, r21
 8dc:	d1 f3       	breq	.-12     	; 0x8d2 <__mulsf3+0x14>
 8de:	95 0f       	add	r25, r21
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	55 1f       	adc	r21, r21
 8e4:	62 9f       	mul	r22, r18
 8e6:	f0 01       	movw	r30, r0
 8e8:	72 9f       	mul	r23, r18
 8ea:	bb 27       	eor	r27, r27
 8ec:	f0 0d       	add	r31, r0
 8ee:	b1 1d       	adc	r27, r1
 8f0:	63 9f       	mul	r22, r19
 8f2:	aa 27       	eor	r26, r26
 8f4:	f0 0d       	add	r31, r0
 8f6:	b1 1d       	adc	r27, r1
 8f8:	aa 1f       	adc	r26, r26
 8fa:	64 9f       	mul	r22, r20
 8fc:	66 27       	eor	r22, r22
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	66 1f       	adc	r22, r22
 904:	82 9f       	mul	r24, r18
 906:	22 27       	eor	r18, r18
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	62 1f       	adc	r22, r18
 90e:	73 9f       	mul	r23, r19
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	62 1f       	adc	r22, r18
 916:	83 9f       	mul	r24, r19
 918:	a0 0d       	add	r26, r0
 91a:	61 1d       	adc	r22, r1
 91c:	22 1f       	adc	r18, r18
 91e:	74 9f       	mul	r23, r20
 920:	33 27       	eor	r19, r19
 922:	a0 0d       	add	r26, r0
 924:	61 1d       	adc	r22, r1
 926:	23 1f       	adc	r18, r19
 928:	84 9f       	mul	r24, r20
 92a:	60 0d       	add	r22, r0
 92c:	21 1d       	adc	r18, r1
 92e:	82 2f       	mov	r24, r18
 930:	76 2f       	mov	r23, r22
 932:	6a 2f       	mov	r22, r26
 934:	11 24       	eor	r1, r1
 936:	9f 57       	subi	r25, 0x7F	; 127
 938:	50 40       	sbci	r21, 0x00	; 0
 93a:	8a f0       	brmi	.+34     	; 0x95e <__mulsf3_pse+0x84>
 93c:	e1 f0       	breq	.+56     	; 0x976 <__mulsf3_pse+0x9c>
 93e:	88 23       	and	r24, r24
 940:	4a f0       	brmi	.+18     	; 0x954 <__mulsf3_pse+0x7a>
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	bb 1f       	adc	r27, r27
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	91 50       	subi	r25, 0x01	; 1
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	a9 f7       	brne	.-22     	; 0x93e <__mulsf3_pse+0x64>
 954:	9e 3f       	cpi	r25, 0xFE	; 254
 956:	51 05       	cpc	r21, r1
 958:	70 f0       	brcs	.+28     	; 0x976 <__mulsf3_pse+0x9c>
 95a:	09 ce       	rjmp	.-1006   	; 0x56e <__fp_inf>
 95c:	53 ce       	rjmp	.-858    	; 0x604 <__fp_szero>
 95e:	5f 3f       	cpi	r21, 0xFF	; 255
 960:	ec f3       	brlt	.-6      	; 0x95c <__mulsf3_pse+0x82>
 962:	98 3e       	cpi	r25, 0xE8	; 232
 964:	dc f3       	brlt	.-10     	; 0x95c <__mulsf3_pse+0x82>
 966:	86 95       	lsr	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b7 95       	ror	r27
 96e:	f7 95       	ror	r31
 970:	e7 95       	ror	r30
 972:	9f 5f       	subi	r25, 0xFF	; 255
 974:	c1 f7       	brne	.-16     	; 0x966 <__mulsf3_pse+0x8c>
 976:	fe 2b       	or	r31, r30
 978:	88 0f       	add	r24, r24
 97a:	91 1d       	adc	r25, r1
 97c:	96 95       	lsr	r25
 97e:	87 95       	ror	r24
 980:	97 f9       	bld	r25, 7
 982:	08 95       	ret

00000984 <__divsf3>:
 984:	0c d0       	rcall	.+24     	; 0x99e <__divsf3x>
 986:	0a ce       	rjmp	.-1004   	; 0x59c <__fp_round>
 988:	02 de       	rcall	.-1020   	; 0x58e <__fp_pscB>
 98a:	40 f0       	brcs	.+16     	; 0x99c <__divsf3+0x18>
 98c:	f9 dd       	rcall	.-1038   	; 0x580 <__fp_pscA>
 98e:	30 f0       	brcs	.+12     	; 0x99c <__divsf3+0x18>
 990:	21 f4       	brne	.+8      	; 0x99a <__divsf3+0x16>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	19 f0       	breq	.+6      	; 0x99c <__divsf3+0x18>
 996:	eb cd       	rjmp	.-1066   	; 0x56e <__fp_inf>
 998:	51 11       	cpse	r21, r1
 99a:	34 ce       	rjmp	.-920    	; 0x604 <__fp_szero>
 99c:	ee cd       	rjmp	.-1060   	; 0x57a <__fp_nan>

0000099e <__divsf3x>:
 99e:	0f de       	rcall	.-994    	; 0x5be <__fp_split3>
 9a0:	98 f3       	brcs	.-26     	; 0x988 <__divsf3+0x4>

000009a2 <__divsf3_pse>:
 9a2:	99 23       	and	r25, r25
 9a4:	c9 f3       	breq	.-14     	; 0x998 <__divsf3+0x14>
 9a6:	55 23       	and	r21, r21
 9a8:	b1 f3       	breq	.-20     	; 0x996 <__divsf3+0x12>
 9aa:	95 1b       	sub	r25, r21
 9ac:	55 0b       	sbc	r21, r21
 9ae:	bb 27       	eor	r27, r27
 9b0:	aa 27       	eor	r26, r26
 9b2:	62 17       	cp	r22, r18
 9b4:	73 07       	cpc	r23, r19
 9b6:	84 07       	cpc	r24, r20
 9b8:	38 f0       	brcs	.+14     	; 0x9c8 <__divsf3_pse+0x26>
 9ba:	9f 5f       	subi	r25, 0xFF	; 255
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	22 0f       	add	r18, r18
 9c0:	33 1f       	adc	r19, r19
 9c2:	44 1f       	adc	r20, r20
 9c4:	aa 1f       	adc	r26, r26
 9c6:	a9 f3       	breq	.-22     	; 0x9b2 <__divsf3_pse+0x10>
 9c8:	33 d0       	rcall	.+102    	; 0xa30 <__divsf3_pse+0x8e>
 9ca:	0e 2e       	mov	r0, r30
 9cc:	3a f0       	brmi	.+14     	; 0x9dc <__divsf3_pse+0x3a>
 9ce:	e0 e8       	ldi	r30, 0x80	; 128
 9d0:	30 d0       	rcall	.+96     	; 0xa32 <__divsf3_pse+0x90>
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	e6 95       	lsr	r30
 9d8:	00 1c       	adc	r0, r0
 9da:	ca f7       	brpl	.-14     	; 0x9ce <__divsf3_pse+0x2c>
 9dc:	29 d0       	rcall	.+82     	; 0xa30 <__divsf3_pse+0x8e>
 9de:	fe 2f       	mov	r31, r30
 9e0:	27 d0       	rcall	.+78     	; 0xa30 <__divsf3_pse+0x8e>
 9e2:	66 0f       	add	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	bb 1f       	adc	r27, r27
 9ea:	26 17       	cp	r18, r22
 9ec:	37 07       	cpc	r19, r23
 9ee:	48 07       	cpc	r20, r24
 9f0:	ab 07       	cpc	r26, r27
 9f2:	b0 e8       	ldi	r27, 0x80	; 128
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__divsf3_pse+0x56>
 9f6:	bb 0b       	sbc	r27, r27
 9f8:	80 2d       	mov	r24, r0
 9fa:	bf 01       	movw	r22, r30
 9fc:	ff 27       	eor	r31, r31
 9fe:	93 58       	subi	r25, 0x83	; 131
 a00:	5f 4f       	sbci	r21, 0xFF	; 255
 a02:	2a f0       	brmi	.+10     	; 0xa0e <__divsf3_pse+0x6c>
 a04:	9e 3f       	cpi	r25, 0xFE	; 254
 a06:	51 05       	cpc	r21, r1
 a08:	68 f0       	brcs	.+26     	; 0xa24 <__divsf3_pse+0x82>
 a0a:	b1 cd       	rjmp	.-1182   	; 0x56e <__fp_inf>
 a0c:	fb cd       	rjmp	.-1034   	; 0x604 <__fp_szero>
 a0e:	5f 3f       	cpi	r21, 0xFF	; 255
 a10:	ec f3       	brlt	.-6      	; 0xa0c <__divsf3_pse+0x6a>
 a12:	98 3e       	cpi	r25, 0xE8	; 232
 a14:	dc f3       	brlt	.-10     	; 0xa0c <__divsf3_pse+0x6a>
 a16:	86 95       	lsr	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	b7 95       	ror	r27
 a1e:	f7 95       	ror	r31
 a20:	9f 5f       	subi	r25, 0xFF	; 255
 a22:	c9 f7       	brne	.-14     	; 0xa16 <__divsf3_pse+0x74>
 a24:	88 0f       	add	r24, r24
 a26:	91 1d       	adc	r25, r1
 a28:	96 95       	lsr	r25
 a2a:	87 95       	ror	r24
 a2c:	97 f9       	bld	r25, 7
 a2e:	08 95       	ret
 a30:	e1 e0       	ldi	r30, 0x01	; 1
 a32:	66 0f       	add	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	bb 1f       	adc	r27, r27
 a3a:	62 17       	cp	r22, r18
 a3c:	73 07       	cpc	r23, r19
 a3e:	84 07       	cpc	r24, r20
 a40:	ba 07       	cpc	r27, r26
 a42:	20 f0       	brcs	.+8      	; 0xa4c <__divsf3_pse+0xaa>
 a44:	62 1b       	sub	r22, r18
 a46:	73 0b       	sbc	r23, r19
 a48:	84 0b       	sbc	r24, r20
 a4a:	ba 0b       	sbc	r27, r26
 a4c:	ee 1f       	adc	r30, r30
 a4e:	88 f7       	brcc	.-30     	; 0xa32 <__divsf3_pse+0x90>
 a50:	e0 95       	com	r30
 a52:	08 95       	ret

00000a54 <__fp_mpack>:
 a54:	9f 3f       	cpi	r25, 0xFF	; 255
 a56:	31 f0       	breq	.+12     	; 0xa64 <__fp_mpack_finite+0xc>

00000a58 <__fp_mpack_finite>:
 a58:	91 50       	subi	r25, 0x01	; 1
 a5a:	20 f4       	brcc	.+8      	; 0xa64 <__fp_mpack_finite+0xc>
 a5c:	87 95       	ror	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	b7 95       	ror	r27
 a64:	88 0f       	add	r24, r24
 a66:	91 1d       	adc	r25, r1
 a68:	96 95       	lsr	r25
 a6a:	87 95       	ror	r24
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret

00000a70 <__itoa_ncheck>:
 a70:	bb 27       	eor	r27, r27
 a72:	4a 30       	cpi	r20, 0x0A	; 10
 a74:	31 f4       	brne	.+12     	; 0xa82 <__itoa_ncheck+0x12>
 a76:	99 23       	and	r25, r25
 a78:	22 f4       	brpl	.+8      	; 0xa82 <__itoa_ncheck+0x12>
 a7a:	bd e2       	ldi	r27, 0x2D	; 45
 a7c:	90 95       	com	r25
 a7e:	81 95       	neg	r24
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	01 c0       	rjmp	.+2      	; 0xa86 <__utoa_common>

00000a84 <__utoa_ncheck>:
 a84:	bb 27       	eor	r27, r27

00000a86 <__utoa_common>:
 a86:	fb 01       	movw	r30, r22
 a88:	55 27       	eor	r21, r21
 a8a:	aa 27       	eor	r26, r26
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	aa 1f       	adc	r26, r26
 a92:	a4 17       	cp	r26, r20
 a94:	10 f0       	brcs	.+4      	; 0xa9a <__utoa_common+0x14>
 a96:	a4 1b       	sub	r26, r20
 a98:	83 95       	inc	r24
 a9a:	50 51       	subi	r21, 0x10	; 16
 a9c:	b9 f7       	brne	.-18     	; 0xa8c <__utoa_common+0x6>
 a9e:	a0 5d       	subi	r26, 0xD0	; 208
 aa0:	aa 33       	cpi	r26, 0x3A	; 58
 aa2:	08 f0       	brcs	.+2      	; 0xaa6 <__utoa_common+0x20>
 aa4:	a9 5d       	subi	r26, 0xD9	; 217
 aa6:	a1 93       	st	Z+, r26
 aa8:	00 97       	sbiw	r24, 0x00	; 0
 aaa:	79 f7       	brne	.-34     	; 0xa8a <__utoa_common+0x4>
 aac:	b1 11       	cpse	r27, r1
 aae:	b1 93       	st	Z+, r27
 ab0:	11 92       	st	Z+, r1
 ab2:	cb 01       	movw	r24, r22
 ab4:	00 c0       	rjmp	.+0      	; 0xab6 <strrev>

00000ab6 <strrev>:
 ab6:	dc 01       	movw	r26, r24
 ab8:	fc 01       	movw	r30, r24
 aba:	67 2f       	mov	r22, r23
 abc:	71 91       	ld	r23, Z+
 abe:	77 23       	and	r23, r23
 ac0:	e1 f7       	brne	.-8      	; 0xaba <strrev+0x4>
 ac2:	32 97       	sbiw	r30, 0x02	; 2
 ac4:	04 c0       	rjmp	.+8      	; 0xace <strrev+0x18>
 ac6:	7c 91       	ld	r23, X
 ac8:	6d 93       	st	X+, r22
 aca:	70 83       	st	Z, r23
 acc:	62 91       	ld	r22, -Z
 ace:	ae 17       	cp	r26, r30
 ad0:	bf 07       	cpc	r27, r31
 ad2:	c8 f3       	brcs	.-14     	; 0xac6 <strrev+0x10>
 ad4:	08 95       	ret

00000ad6 <_exit>:
 ad6:	f8 94       	cli

00000ad8 <__stop_program>:
 ad8:	ff cf       	rjmp	.-2      	; 0xad8 <__stop_program>
