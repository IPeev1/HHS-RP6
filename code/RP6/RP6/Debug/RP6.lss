
RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000016ce  00001762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  00800066  00800066  00001768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b45  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000740  00000000  00000000  000023e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000789  00000000  00000000  00002b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  000032b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  00003598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fd  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_1>
       8:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 06 	call	0xd88	; 0xd88 <main>
      8a:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_LED>:
	sei();									//Enable global interrupts
}


void init_LED(){
	DDRB |= 0b10000011;
      92:	87 b3       	in	r24, 0x17	; 23
      94:	83 68       	ori	r24, 0x83	; 131
      96:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b01110000;
      98:	84 b3       	in	r24, 0x14	; 20
      9a:	80 67       	ori	r24, 0x70	; 112
      9c:	84 bb       	out	0x14, r24	; 20
      9e:	08 95       	ret

000000a0 <init_micros>:
}

//Micros function --------------------------------------
void init_micros(){
	TCCR0 |= (1 << CS00);			//Set a timer prescaler of '64'
      a0:	83 b7       	in	r24, 0x33	; 51
      a2:	81 60       	ori	r24, 0x01	; 1
      a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);			//---^
      a6:	83 b7       	in	r24, 0x33	; 51
      a8:	82 60       	ori	r24, 0x02	; 2
      aa:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);			//Enable overflow interrupts
      ac:	89 b7       	in	r24, 0x39	; 57
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;						//Initialize the timer by setting it to 0
      b2:	12 be       	out	0x32, r1	; 50
	t0TotalOverflow = 0;			//Initialize the overflow counter by setting it to 0
      b4:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <t0TotalOverflow>
      b8:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <t0TotalOverflow+0x1>
      bc:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <t0TotalOverflow+0x2>
      c0:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <t0TotalOverflow+0x3>
      c4:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <t0TotalOverflow+0x4>
      c8:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <t0TotalOverflow+0x5>
      cc:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <t0TotalOverflow+0x6>
      d0:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t0TotalOverflow+0x7>
      d4:	08 95       	ret

000000d6 <__vector_11>:
}


ISR(TIMER0_OVF_vect){						//When the internal timer 1 overflows and loops back to 0, this interrupt triggers
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	2f 93       	push	r18
      e2:	3f 93       	push	r19
      e4:	4f 93       	push	r20
      e6:	5f 93       	push	r21
      e8:	6f 93       	push	r22
      ea:	7f 93       	push	r23
      ec:	8f 93       	push	r24
      ee:	9f 93       	push	r25
      f0:	af 93       	push	r26
	t0TotalOverflow++;							//Increase the total overflow counter
      f2:	20 91 a7 00 	lds	r18, 0x00A7	; 0x8000a7 <t0TotalOverflow>
      f6:	30 91 a8 00 	lds	r19, 0x00A8	; 0x8000a8 <t0TotalOverflow+0x1>
      fa:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <t0TotalOverflow+0x2>
      fe:	50 91 aa 00 	lds	r21, 0x00AA	; 0x8000aa <t0TotalOverflow+0x3>
     102:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <t0TotalOverflow+0x4>
     106:	70 91 ac 00 	lds	r23, 0x00AC	; 0x8000ac <t0TotalOverflow+0x5>
     10a:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <t0TotalOverflow+0x6>
     10e:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <t0TotalOverflow+0x7>
     112:	a1 e0       	ldi	r26, 0x01	; 1
     114:	0e 94 27 0b 	call	0x164e	; 0x164e <__adddi3_s8>
     118:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <t0TotalOverflow>
     11c:	30 93 a8 00 	sts	0x00A8, r19	; 0x8000a8 <t0TotalOverflow+0x1>
     120:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <t0TotalOverflow+0x2>
     124:	50 93 aa 00 	sts	0x00AA, r21	; 0x8000aa <t0TotalOverflow+0x3>
     128:	60 93 ab 00 	sts	0x00AB, r22	; 0x8000ab <t0TotalOverflow+0x4>
     12c:	70 93 ac 00 	sts	0x00AC, r23	; 0x8000ac <t0TotalOverflow+0x5>
     130:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <t0TotalOverflow+0x6>
     134:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <t0TotalOverflow+0x7>
}
     138:	af 91       	pop	r26
     13a:	9f 91       	pop	r25
     13c:	8f 91       	pop	r24
     13e:	7f 91       	pop	r23
     140:	6f 91       	pop	r22
     142:	5f 91       	pop	r21
     144:	4f 91       	pop	r20
     146:	3f 91       	pop	r19
     148:	2f 91       	pop	r18
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <micros>:


uint64_t micros(){
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	uint8_t currentTimer0Value = TCNT0;																				//Get the current value of the Timer 0 register
     164:	a2 b7       	in	r26, 0x32	; 50
	uint64_t microsReturnValue = ((2048 * t0TotalOverflow) + (currentTimer0Value * 2048 / 256));					//Calculate the passed microseconds based on the total amount of overflows and the current timer value.
     166:	20 91 a7 00 	lds	r18, 0x00A7	; 0x8000a7 <t0TotalOverflow>
     16a:	30 91 a8 00 	lds	r19, 0x00A8	; 0x8000a8 <t0TotalOverflow+0x1>
     16e:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <t0TotalOverflow+0x2>
     172:	50 91 aa 00 	lds	r21, 0x00AA	; 0x8000aa <t0TotalOverflow+0x3>
     176:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <t0TotalOverflow+0x4>
     17a:	70 91 ac 00 	lds	r23, 0x00AC	; 0x8000ac <t0TotalOverflow+0x5>
     17e:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <t0TotalOverflow+0x6>
     182:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <t0TotalOverflow+0x7>
	return microsReturnValue;																						//Return the calculated value
     186:	e0 e0       	ldi	r30, 0x00	; 0
     188:	fa 2f       	mov	r31, r26
     18a:	ff 0f       	add	r31, r31
     18c:	ff 0f       	add	r31, r31
     18e:	ff 0f       	add	r31, r31
     190:	ff 23       	and	r31, r31
     192:	14 f4       	brge	.+4      	; 0x198 <micros+0x44>
     194:	e1 50       	subi	r30, 0x01	; 1
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	ef 2f       	mov	r30, r31
     19a:	ee 0f       	add	r30, r30
     19c:	ee 0b       	sbc	r30, r30
     19e:	0b e0       	ldi	r16, 0x0B	; 11
     1a0:	0e 94 05 0b 	call	0x160a	; 0x160a <__ashldi3>
     1a4:	a2 2e       	mov	r10, r18
     1a6:	b3 2e       	mov	r11, r19
     1a8:	c4 2e       	mov	r12, r20
     1aa:	d5 2e       	mov	r13, r21
     1ac:	e6 2e       	mov	r14, r22
     1ae:	f7 2e       	mov	r15, r23
     1b0:	08 2f       	mov	r16, r24
     1b2:	19 2f       	mov	r17, r25
     1b4:	2f 2f       	mov	r18, r31
     1b6:	3e 2f       	mov	r19, r30
     1b8:	4e 2f       	mov	r20, r30
     1ba:	5e 2f       	mov	r21, r30
     1bc:	6e 2f       	mov	r22, r30
     1be:	7e 2f       	mov	r23, r30
     1c0:	8e 2f       	mov	r24, r30
     1c2:	9e 2f       	mov	r25, r30
     1c4:	0e 94 1e 0b 	call	0x163c	; 0x163c <__adddi3>
}
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	df 90       	pop	r13
     1d2:	cf 90       	pop	r12
     1d4:	bf 90       	pop	r11
     1d6:	af 90       	pop	r10
     1d8:	08 95       	ret

000001da <init_TWI>:
//------------------------------------------------------
//I2C functions ----------------------------------------
void init_TWI(){
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE);		//Enable TWI; Enable Acknowledge; Enable Interrupt
     1da:	85 e4       	ldi	r24, 0x45	; 69
     1dc:	86 bf       	out	0x36, r24	; 54
	TWSR = 0;											//No prescaling
     1de:	11 b8       	out	0x01, r1	; 1
	TWAR = (RP6_ADDRESS << 1);									//Set slave address
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	82 b9       	out	0x02, r24	; 2
	TWBR = ((F_CPU / SCL) - 16) / 2;					//set SCL to 100kHz
     1e4:	80 e2       	ldi	r24, 0x20	; 32
     1e6:	80 b9       	out	0x00, r24	; 0
	DDRC |= 0b00000011;
     1e8:	84 b3       	in	r24, 0x14	; 20
     1ea:	83 60       	ori	r24, 0x03	; 3
     1ec:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000011;
     1ee:	85 b3       	in	r24, 0x15	; 21
     1f0:	83 60       	ori	r24, 0x03	; 3
     1f2:	85 bb       	out	0x15, r24	; 21
     1f4:	08 95       	ret

000001f6 <init_rp6Data>:
}


void init_rp6Data(){
	rp6Data.driveSpeed = 0;
     1f6:	ea e9       	ldi	r30, 0x9A	; 154
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	10 82       	st	Z, r1
	rp6Data.driveDirection = 1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	81 83       	std	Z+1, r24	; 0x01
	rp6Data.turnDirection = 0;
     200:	12 82       	std	Z+2, r1	; 0x02
	rp6Data.accelerationRate = 30;
     202:	9e e1       	ldi	r25, 0x1E	; 30
     204:	93 83       	std	Z+3, r25	; 0x03
	rp6Data.turnRate = 3000;
     206:	28 eb       	ldi	r18, 0xB8	; 184
     208:	3b e0       	ldi	r19, 0x0B	; 11
     20a:	35 83       	std	Z+5, r19	; 0x05
     20c:	24 83       	std	Z+4, r18	; 0x04
	rp6Data.driveSpeedThreshold = 5000;
     20e:	28 e8       	ldi	r18, 0x88	; 136
     210:	33 e1       	ldi	r19, 0x13	; 19
     212:	37 83       	std	Z+7, r19	; 0x07
     214:	26 83       	std	Z+6, r18	; 0x06
	rp6Data.updateSpeed = 200000;
     216:	40 e4       	ldi	r20, 0x40	; 64
     218:	5d e0       	ldi	r21, 0x0D	; 13
     21a:	63 e0       	ldi	r22, 0x03	; 3
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	40 87       	std	Z+8, r20	; 0x08
     220:	51 87       	std	Z+9, r21	; 0x09
     222:	62 87       	std	Z+10, r22	; 0x0a
     224:	73 87       	std	Z+11, r23	; 0x0b
	rp6Data.enableBeeper = 1;
     226:	84 87       	std	Z+12, r24	; 0x0c
     228:	08 95       	ret

0000022a <init_arduinoData>:
}


void init_arduinoData(){
	arduinoData.motorEncoderLVal = 0;
     22a:	e2 e8       	ldi	r30, 0x82	; 130
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	11 82       	std	Z+1, r1	; 0x01
     230:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;
     232:	13 82       	std	Z+3, r1	; 0x03
     234:	12 82       	std	Z+2, r1	; 0x02
     236:	08 95       	ret

00000238 <clearSendData>:
	
	TWCR |= (1 << TWINT);
}


void clearSendData(){
     238:	ef ea       	ldi	r30, 0xAF	; 175
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	83 ec       	ldi	r24, 0xC3	; 195
     23e:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		sendData[i] = 0;
     240:	11 92       	st	Z+, r1
	TWCR |= (1 << TWINT);
}


void clearSendData(){
	for(int i = 0; i < DATASIZE; i++){
     242:	e8 17       	cp	r30, r24
     244:	f9 07       	cpc	r31, r25
     246:	e1 f7       	brne	.-8      	; 0x240 <clearSendData+0x8>
		sendData[i] = 0;
	}
}
     248:	08 95       	ret

0000024a <clearReceiveData>:


void clearReceiveData(){
     24a:	e6 e8       	ldi	r30, 0x86	; 134
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8a e9       	ldi	r24, 0x9A	; 154
     250:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < DATASIZE; i++){
		receiveData[i] = 0;
     252:	11 92       	st	Z+, r1
	}
}


void clearReceiveData(){
	for(int i = 0; i < DATASIZE; i++){
     254:	e8 17       	cp	r30, r24
     256:	f9 07       	cpc	r31, r25
     258:	e1 f7       	brne	.-8      	; 0x252 <clearReceiveData+0x8>
		receiveData[i] = 0;
	}
}
     25a:	08 95       	ret

0000025c <rp6DataInterpreter>:
		case(1): rp6DataInterpreter(); break;
	}
}


void rp6DataInterpreter(){
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
	if(receiveData[2]-1 == 0){
     260:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <receiveData+0x2>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	19 f4       	brne	.+6      	; 0x26e <rp6DataInterpreter+0x12>
		rp6Data.driveSpeed = 0;
     268:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <rp6Data>
     26c:	09 c0       	rjmp	.+18     	; 0x280 <rp6DataInterpreter+0x24>
	}else{
		rp6Data.driveSpeed = receiveData[1];
     26e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <receiveData+0x1>
     272:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <rp6Data>
	}
	
	if(receiveData[2] < 1){
     276:	81 11       	cpse	r24, r1
     278:	03 c0       	rjmp	.+6      	; 0x280 <rp6DataInterpreter+0x24>
		rp6Data.driveDirection = 0;
     27a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <rp6Data+0x1>
     27e:	03 c0       	rjmp	.+6      	; 0x286 <rp6DataInterpreter+0x2a>
	}else{
		rp6Data.driveDirection = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <rp6Data+0x1>
	}
	
	rp6Data.turnDirection = receiveData[3]-1;
     286:	ea e9       	ldi	r30, 0x9A	; 154
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	c6 e8       	ldi	r28, 0x86	; 134
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	81 50       	subi	r24, 0x01	; 1
     292:	82 83       	std	Z+2, r24	; 0x02
	rp6Data.accelerationRate = receiveData[4];
     294:	8c 81       	ldd	r24, Y+4	; 0x04
     296:	83 83       	std	Z+3, r24	; 0x03
	rp6Data.turnRate = receiveData[5] * 8000 / 255;
     298:	4d 81       	ldd	r20, Y+5	; 0x05
     29a:	20 e4       	ldi	r18, 0x40	; 64
     29c:	3f e1       	ldi	r19, 0x1F	; 31
     29e:	42 9f       	mul	r20, r18
     2a0:	c0 01       	movw	r24, r0
     2a2:	43 9f       	mul	r20, r19
     2a4:	90 0d       	add	r25, r0
     2a6:	11 24       	eor	r1, r1
     2a8:	2f ef       	ldi	r18, 0xFF	; 255
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	b9 01       	movw	r22, r18
     2ae:	0e 94 90 09 	call	0x1320	; 0x1320 <__divmodhi4>
     2b2:	75 83       	std	Z+5, r23	; 0x05
     2b4:	64 83       	std	Z+4, r22	; 0x04
	rp6Data.driveSpeedThreshold = receiveData[6] * 6000 / 255;
     2b6:	6e 81       	ldd	r22, Y+6	; 0x06
     2b8:	40 e7       	ldi	r20, 0x70	; 112
     2ba:	57 e1       	ldi	r21, 0x17	; 23
     2bc:	64 9f       	mul	r22, r20
     2be:	c0 01       	movw	r24, r0
     2c0:	65 9f       	mul	r22, r21
     2c2:	90 0d       	add	r25, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	b9 01       	movw	r22, r18
     2c8:	0e 94 90 09 	call	0x1320	; 0x1320 <__divmodhi4>
     2cc:	77 83       	std	Z+7, r23	; 0x07
     2ce:	66 83       	std	Z+6, r22	; 0x06
	rp6Data.updateSpeed = receiveData[7] * 2000;
     2d0:	4f 81       	ldd	r20, Y+7	; 0x07
     2d2:	20 ed       	ldi	r18, 0xD0	; 208
     2d4:	37 e0       	ldi	r19, 0x07	; 7
     2d6:	42 9f       	mul	r20, r18
     2d8:	c0 01       	movw	r24, r0
     2da:	43 9f       	mul	r20, r19
     2dc:	90 0d       	add	r25, r0
     2de:	11 24       	eor	r1, r1
     2e0:	09 2e       	mov	r0, r25
     2e2:	00 0c       	add	r0, r0
     2e4:	aa 0b       	sbc	r26, r26
     2e6:	bb 0b       	sbc	r27, r27
     2e8:	80 87       	std	Z+8, r24	; 0x08
     2ea:	91 87       	std	Z+9, r25	; 0x09
     2ec:	a2 87       	std	Z+10, r26	; 0x0a
     2ee:	b3 87       	std	Z+11, r27	; 0x0b
	rp6Data.enableBeeper = receiveData[8];
     2f0:	88 85       	ldd	r24, Y+8	; 0x08
     2f2:	84 87       	std	Z+12, r24	; 0x0c
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <I2C_receiveInterpreter>:
}


void I2C_receiveInterpreter(){
	int dataSet = receiveData[0];
	switch(dataSet){
     2fa:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <receiveData>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	11 f4       	brne	.+4      	; 0x306 <I2C_receiveInterpreter+0xc>
		case(1): rp6DataInterpreter(); break;
     302:	0e 94 2e 01 	call	0x25c	; 0x25c <rp6DataInterpreter>
     306:	08 95       	ret

00000308 <arduinoDataConstructor>:
	rp6Data.updateSpeed = receiveData[7] * 2000;
	rp6Data.enableBeeper = receiveData[8];
}


void arduinoDataConstructor(){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
	clearSendData();
     30c:	0e 94 1c 01 	call	0x238	; 0x238 <clearSendData>
	
	sendData[0] = 1;
     310:	ef ea       	ldi	r30, 0xAF	; 175
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 83       	st	Z, r24
	sendData[1] = arduinoData.motorEncoderLVal * 255 / 30000;
     318:	c2 e8       	ldi	r28, 0x82	; 130
     31a:	d0 e0       	ldi	r29, 0x00	; 0
     31c:	88 81       	ld	r24, Y
     31e:	99 81       	ldd	r25, Y+1	; 0x01
     320:	4f ef       	ldi	r20, 0xFF	; 255
     322:	48 9f       	mul	r20, r24
     324:	90 01       	movw	r18, r0
     326:	49 9f       	mul	r20, r25
     328:	30 0d       	add	r19, r0
     32a:	11 24       	eor	r1, r1
     32c:	32 95       	swap	r19
     32e:	22 95       	swap	r18
     330:	2f 70       	andi	r18, 0x0F	; 15
     332:	23 27       	eor	r18, r19
     334:	3f 70       	andi	r19, 0x0F	; 15
     336:	23 27       	eor	r18, r19
     338:	ad eb       	ldi	r26, 0xBD	; 189
     33a:	b8 e0       	ldi	r27, 0x08	; 8
     33c:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
     340:	00 24       	eor	r0, r0
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	00 1c       	adc	r0, r0
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	00 1c       	adc	r0, r0
     34e:	89 2f       	mov	r24, r25
     350:	90 2d       	mov	r25, r0
     352:	81 83       	std	Z+1, r24	; 0x01
	sendData[2] = arduinoData.motorEncoderRVal * 255 / 30000;
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	48 9f       	mul	r20, r24
     35a:	90 01       	movw	r18, r0
     35c:	49 9f       	mul	r20, r25
     35e:	30 0d       	add	r19, r0
     360:	11 24       	eor	r1, r1
     362:	32 95       	swap	r19
     364:	22 95       	swap	r18
     366:	2f 70       	andi	r18, 0x0F	; 15
     368:	23 27       	eor	r18, r19
     36a:	3f 70       	andi	r19, 0x0F	; 15
     36c:	23 27       	eor	r18, r19
     36e:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
     372:	00 24       	eor	r0, r0
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	00 1c       	adc	r0, r0
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	00 1c       	adc	r0, r0
     380:	89 2f       	mov	r24, r25
     382:	90 2d       	mov	r25, r0
     384:	82 83       	std	Z+2, r24	; 0x02
     386:	e2 eb       	ldi	r30, 0xB2	; 178
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	83 ec       	ldi	r24, 0xC3	; 195
     38c:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i = 3; i < DATASIZE; i++){
		sendData[i] = 0;
     38e:	11 92       	st	Z+, r1
	
	sendData[0] = 1;
	sendData[1] = arduinoData.motorEncoderLVal * 255 / 30000;
	sendData[2] = arduinoData.motorEncoderRVal * 255 / 30000;
	
	for(int i = 3; i < DATASIZE; i++){
     390:	e8 17       	cp	r30, r24
     392:	f9 07       	cpc	r31, r25
     394:	e1 f7       	brne	.-8      	; 0x38e <arduinoDataConstructor+0x86>
		sendData[i] = 0;
	}
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <__vector_19>:
	arduinoData.motorEncoderLVal = 0;
	arduinoData.motorEncoderRVal = 0;
}


ISR(TWI_vect){
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
	static int byteCounter = 0;
	switch(TWSR){
     3be:	81 b1       	in	r24, 0x01	; 1
     3c0:	80 3a       	cpi	r24, 0xA0	; 160
     3c2:	21 f1       	breq	.+72     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3c4:	28 f4       	brcc	.+10     	; 0x3d0 <__vector_19+0x34>
     3c6:	80 36       	cpi	r24, 0x60	; 96
     3c8:	41 f0       	breq	.+16     	; 0x3da <__vector_19+0x3e>
     3ca:	80 38       	cpi	r24, 0x80	; 128
     3cc:	69 f0       	breq	.+26     	; 0x3e8 <__vector_19+0x4c>
     3ce:	39 c0       	rjmp	.+114    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3d0:	88 3a       	cpi	r24, 0xA8	; 168
     3d2:	f9 f0       	breq	.+62     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3d4:	88 3b       	cpi	r24, 0xB8	; 184
     3d6:	39 f1       	breq	.+78     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3d8:	34 c0       	rjmp	.+104    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		case 0x60:
			clearReceiveData();
     3da:	0e 94 25 01 	call	0x24a	; 0x24a <clearReceiveData>
			byteCounter = 0;
     3de:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1961+0x1>
     3e2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1961>
		break;
     3e6:	2d c0       	rjmp	.+90     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		case 0x80:
			if(byteCounter < 20){
     3e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1961>
     3ec:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1961+0x1>
     3f0:	84 31       	cpi	r24, 0x14	; 20
     3f2:	91 05       	cpc	r25, r1
     3f4:	34 f5       	brge	.+76     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				receiveData[byteCounter] = TWDR;
     3f6:	23 b1       	in	r18, 0x03	; 3
     3f8:	fc 01       	movw	r30, r24
     3fa:	ea 57       	subi	r30, 0x7A	; 122
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	20 83       	st	Z, r18
				byteCounter++;
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1961+0x1>
     406:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1961>
     40a:	1b c0       	rjmp	.+54     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
		break;
		
		case 0xA0:
			I2C_receiveInterpreter();
     40c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <I2C_receiveInterpreter>
		break;
     410:	18 c0       	rjmp	.+48     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		case 0xA8:
			arduinoDataConstructor();
     412:	0e 94 84 01 	call	0x308	; 0x308 <arduinoDataConstructor>
			byteCounter = 0;
     416:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <byteCounter.1961+0x1>
     41a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <byteCounter.1961>
			TWDR = sendData[byteCounter];
     41e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <sendData>
     422:	83 b9       	out	0x03, r24	; 3
		break;
     424:	0e c0       	rjmp	.+28     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		case 0xB8:
			byteCounter++;
     426:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <byteCounter.1961>
     42a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <byteCounter.1961+0x1>
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <byteCounter.1961+0x1>
     434:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <byteCounter.1961>
			TWDR = sendData[byteCounter];
     438:	fc 01       	movw	r30, r24
     43a:	e1 55       	subi	r30, 0x51	; 81
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	80 81       	ld	r24, Z
     440:	83 b9       	out	0x03, r24	; 3
		break;
	}
	
	TWCR |= (1 << TWINT);
     442:	86 b7       	in	r24, 0x36	; 54
     444:	80 68       	ori	r24, 0x80	; 128
     446:	86 bf       	out	0x36, r24	; 54
}
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <init_motor_io>:
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
}


void init_motor_io(){
	DDRD |= 0b00110000;		//Set D5 and D4 on output, these are the motors
     46a:	81 b3       	in	r24, 0x11	; 17
     46c:	80 63       	ori	r24, 0x30	; 48
     46e:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110011;		//Set D3 and D2 on input, these are the encoders
     470:	81 b3       	in	r24, 0x11	; 17
     472:	83 7f       	andi	r24, 0xF3	; 243
     474:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b00001100;		//Set C2 and C3 on output, these are the motor directions
     476:	84 b3       	in	r24, 0x14	; 20
     478:	8c 60       	ori	r24, 0x0C	; 12
     47a:	84 bb       	out	0x14, r24	; 20
     47c:	08 95       	ret

0000047e <init_motor_timer>:
}


void init_motor_timer(){
	TCCR1A |= (1 << COM1A1);		//Clear PWM on compare match while counting up, and set when counting down
     47e:	8f b5       	in	r24, 0x2f	; 47
     480:	80 68       	ori	r24, 0x80	; 128
     482:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1);		//Same for B
     484:	8f b5       	in	r24, 0x2f	; 47
     486:	80 62       	ori	r24, 0x20	; 32
     488:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11);			//Set a Phase correct ICR1 topped PWM signal
     48a:	8f b5       	in	r24, 0x2f	; 47
     48c:	82 60       	ori	r24, 0x02	; 2
     48e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13);			//---^
     490:	8e b5       	in	r24, 0x2e	; 46
     492:	80 61       	ori	r24, 0x10	; 16
     494:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);			//Enable without prescaler
     496:	8e b5       	in	r24, 0x2e	; 46
     498:	81 60       	ori	r24, 0x01	; 1
     49a:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 63999;					//Set the top at 63999, this is 64000 steps aka 125Hz (250x full counter)
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	99 ef       	ldi	r25, 0xF9	; 249
     4a0:	97 bd       	out	0x27, r25	; 39
     4a2:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;						//Start the compare registers at 0, no signal
     4a4:	1b bc       	out	0x2b, r1	; 43
     4a6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;						//---^
     4a8:	19 bc       	out	0x29, r1	; 41
     4aa:	18 bc       	out	0x28, r1	; 40
     4ac:	08 95       	ret

000004ae <init_motor_encoder>:
}


void init_motor_encoder(){
	arduinoData.motorEncoderLVal = 0;				//Reset the motor encoder variable
     4ae:	e2 e8       	ldi	r30, 0x82	; 130
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	11 82       	std	Z+1, r1	; 0x01
     4b4:	10 82       	st	Z, r1
	arduinoData.motorEncoderRVal = 0;				//---^
     4b6:	13 82       	std	Z+3, r1	; 0x03
     4b8:	12 82       	std	Z+2, r1	; 0x02
	MCUCR |= (1 << ISC00);						//Set interrupt to trigger on any logical change
     4ba:	85 b7       	in	r24, 0x35	; 53
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10);						//---^
     4c0:	85 b7       	in	r24, 0x35	; 53
     4c2:	84 60       	ori	r24, 0x04	; 4
     4c4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						//Enable interrupt 0
     4c6:	8b b7       	in	r24, 0x3b	; 59
     4c8:	80 64       	ori	r24, 0x40	; 64
     4ca:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);						//Enable interrupt 1
     4cc:	8b b7       	in	r24, 0x3b	; 59
     4ce:	80 68       	ori	r24, 0x80	; 128
     4d0:	8b bf       	out	0x3b, r24	; 59
     4d2:	08 95       	ret

000004d4 <init_motor>:
	}
}
//------------------------------------------------------
//Motor functions --------------------------------------
void init_motor(){
	init_motor_io();		//Initialize the necessary ports
     4d4:	0e 94 35 02 	call	0x46a	; 0x46a <init_motor_io>
	init_motor_timer();		//Initialize the Phase correct PWM timer for the engines
     4d8:	0e 94 3f 02 	call	0x47e	; 0x47e <init_motor_timer>
	init_motor_encoder();	//Initialize the external interrupts for the motor encoders
     4dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <init_motor_encoder>
     4e0:	08 95       	ret

000004e2 <__vector_1>:
	GICR |= (1 << INT0);						//Enable interrupt 0
	GICR |= (1 << INT1);						//Enable interrupt 1
}


ISR(INT0_vect){
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
	arduinoData.motorEncoderLVal++;							//Increase the encoder variable
     4f4:	e2 e8       	ldi	r30, 0x82	; 130
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	80 83       	st	Z, r24
}
     502:	ff 91       	pop	r31
     504:	ef 91       	pop	r30
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	0f 90       	pop	r0
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	0f 90       	pop	r0
     510:	1f 90       	pop	r1
     512:	18 95       	reti

00000514 <__vector_2>:


ISR(INT1_vect){
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	0f 92       	push	r0
     51c:	11 24       	eor	r1, r1
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	ef 93       	push	r30
     524:	ff 93       	push	r31
	arduinoData.motorEncoderRVal++;							//Increase the encoder variable
     526:	e2 e8       	ldi	r30, 0x82	; 130
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	82 81       	ldd	r24, Z+2	; 0x02
     52c:	93 81       	ldd	r25, Z+3	; 0x03
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	93 83       	std	Z+3, r25	; 0x03
     532:	82 83       	std	Z+2, r24	; 0x02
}
     534:	ff 91       	pop	r31
     536:	ef 91       	pop	r30
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <enableMotorEncoder>:


void enableMotorEncoder(int enable){
	if(enable){									//If enable is set
     546:	89 2b       	or	r24, r25
     548:	39 f0       	breq	.+14     	; 0x558 <enableMotorEncoder+0x12>
		GICR |= (1 << INT0);						//Enable the external interrupt
     54a:	8b b7       	in	r24, 0x3b	; 59
     54c:	80 64       	ori	r24, 0x40	; 64
     54e:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1 << INT1);						//---^
     550:	8b b7       	in	r24, 0x3b	; 59
     552:	80 68       	ori	r24, 0x80	; 128
     554:	8b bf       	out	0x3b, r24	; 59
     556:	08 95       	ret
	}else{										//If not set
		GICR &= ~(1 << INT0);						//Disable the interrupt
     558:	8b b7       	in	r24, 0x3b	; 59
     55a:	8f 7b       	andi	r24, 0xBF	; 191
     55c:	8b bf       	out	0x3b, r24	; 59
		GICR &= ~(1 << INT1);						//---^
     55e:	8b b7       	in	r24, 0x3b	; 59
     560:	8f 77       	andi	r24, 0x7F	; 127
     562:	8b bf       	out	0x3b, r24	; 59
     564:	08 95       	ret

00000566 <motorDriver>:
	}
}


int motorDriver(){
     566:	2f 92       	push	r2
     568:	3f 92       	push	r3
     56a:	4f 92       	push	r4
     56c:	5f 92       	push	r5
     56e:	6f 92       	push	r6
     570:	7f 92       	push	r7
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	6d 97       	sbiw	r28, 0x1d	; 29
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
	static uint32_t rightMotorSpeed = 0;
	//-------------------------
	
	
	//Update timer
	if(updateTimer > micros()){														//Only execute motor update code if the timer has passed
     59a:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     59e:	a0 90 78 00 	lds	r10, 0x0078	; 0x800078 <updateTimer.2017>
     5a2:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <updateTimer.2017+0x1>
     5a6:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <updateTimer.2017+0x2>
     5aa:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <updateTimer.2017+0x3>
     5ae:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <updateTimer.2017+0x4>
     5b2:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <updateTimer.2017+0x5>
     5b6:	00 91 7e 00 	lds	r16, 0x007E	; 0x80007e <updateTimer.2017+0x6>
     5ba:	10 91 7f 00 	lds	r17, 0x007F	; 0x80007f <updateTimer.2017+0x7>
     5be:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__cmpdi2>
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <motorDriver+0x60>
     5c4:	c6 c3       	rjmp	.+1932   	; 0xd52 <__stack+0x4f3>
		return 0;
	}else{
		updateTimer = micros() + rp6Data.updateSpeed;											//If the timer has passed, set new timer and execute the code
     5c6:	0e 94 aa 00 	call	0x154	; 0x154 <micros>
     5ca:	62 2e       	mov	r6, r18
     5cc:	73 2e       	mov	r7, r19
     5ce:	49 87       	std	Y+9, r20	; 0x09
     5d0:	59 83       	std	Y+1, r21	; 0x01
     5d2:	b6 2f       	mov	r27, r22
     5d4:	a7 2f       	mov	r26, r23
     5d6:	08 2f       	mov	r16, r24
     5d8:	19 2f       	mov	r17, r25
     5da:	ea e9       	ldi	r30, 0x9A	; 154
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 84       	ldd	r8, Z+8	; 0x08
     5e0:	91 84       	ldd	r9, Z+9	; 0x09
     5e2:	a2 84       	ldd	r10, Z+10	; 0x0a
     5e4:	b3 84       	ldd	r11, Z+11	; 0x0b
     5e6:	28 2d       	mov	r18, r8
     5e8:	39 2d       	mov	r19, r9
     5ea:	4a 2d       	mov	r20, r10
     5ec:	5b 2d       	mov	r21, r11
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	a6 2c       	mov	r10, r6
     5f8:	b7 2c       	mov	r11, r7
     5fa:	c9 84       	ldd	r12, Y+9	; 0x09
     5fc:	d9 80       	ldd	r13, Y+1	; 0x01
     5fe:	eb 2e       	mov	r14, r27
     600:	fa 2e       	mov	r15, r26
     602:	0e 94 1e 0b 	call	0x163c	; 0x163c <__adddi3>
     606:	29 8b       	std	Y+17, r18	; 0x11
     608:	3a 8b       	std	Y+18, r19	; 0x12
     60a:	4b 8b       	std	Y+19, r20	; 0x13
     60c:	5c 8b       	std	Y+20, r21	; 0x14
     60e:	6d 8b       	std	Y+21, r22	; 0x15
     610:	7e 8b       	std	Y+22, r23	; 0x16
     612:	8f 8b       	std	Y+23, r24	; 0x17
     614:	98 8f       	std	Y+24, r25	; 0x18
     616:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2017>
     61a:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2017+0x1>
     61e:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2017+0x2>
     622:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2017+0x3>
     626:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2017+0x4>
     62a:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2017+0x5>
     62e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2017+0x6>
     632:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2017+0x7>
	}
	
	
	//Remap drive speed percentage
	rp6Data.driveSpeed = (rp6Data.driveSpeed * 25600) / 100;										//The given drive speed is a percentage, remap it to a PWM compare value (Max 25600)
     636:	40 81       	ld	r20, Z
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	34 e6       	ldi	r19, 0x64	; 100
     63c:	42 03       	mulsu	r20, r18
     63e:	c0 01       	movw	r24, r0
     640:	43 9f       	mul	r20, r19
     642:	90 0d       	add	r25, r0
     644:	11 24       	eor	r1, r1
     646:	64 e6       	ldi	r22, 0x64	; 100
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	0e 94 90 09 	call	0x1320	; 0x1320 <__divmodhi4>
     64e:	60 83       	st	Z, r22
	if(rp6Data.driveSpeed < rp6Data.driveSpeedThreshold){rp6Data.driveSpeed = 0;}								//If the speed is less than the threshold, the speed is set to 0 because the power is to low to drive --------- EDIT SUGGESTION: Rescale so that 1% gives the minimal amount of actual movement and 100% the max. Threshold and less doesn't participate ~Sander
     650:	46 80       	ldd	r4, Z+6	; 0x06
     652:	57 80       	ldd	r5, Z+7	; 0x07
     654:	06 2e       	mov	r0, r22
     656:	00 0c       	add	r0, r0
     658:	77 0b       	sbc	r23, r23
     65a:	64 15       	cp	r22, r4
     65c:	75 05       	cpc	r23, r5
     65e:	10 f4       	brcc	.+4      	; 0x664 <motorDriver+0xfe>
     660:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <rp6Data>
	
	
	//Check and change drive direction
	if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed != 0){			//If the drive direction differs from what we are currently driving and we are not standing still
     664:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <rp6Data+0x1>
     668:	0e 2e       	mov	r0, r30
     66a:	00 0c       	add	r0, r0
     66c:	ff 0b       	sbc	r31, r31
     66e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2018>
     672:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2018+0x1>
     676:	e8 17       	cp	r30, r24
     678:	f9 07       	cpc	r31, r25
     67a:	41 f1       	breq	.+80     	; 0x6cc <motorDriver+0x166>
     67c:	20 90 70 00 	lds	r2, 0x0070	; 0x800070 <currentDriveSpeed.2021>
     680:	00 91 71 00 	lds	r16, 0x0071	; 0x800071 <currentDriveSpeed.2021+0x1>
     684:	0c 8f       	std	Y+28, r16	; 0x1c
     686:	30 90 72 00 	lds	r3, 0x0072	; 0x800072 <currentDriveSpeed.2021+0x2>
     68a:	60 90 73 00 	lds	r6, 0x0073	; 0x800073 <currentDriveSpeed.2021+0x3>
     68e:	70 90 74 00 	lds	r7, 0x0074	; 0x800074 <currentDriveSpeed.2021+0x4>
     692:	80 90 75 00 	lds	r8, 0x0075	; 0x800075 <currentDriveSpeed.2021+0x5>
     696:	90 90 76 00 	lds	r9, 0x0076	; 0x800076 <currentDriveSpeed.2021+0x6>
     69a:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <currentDriveSpeed.2021+0x7>
     69e:	1d 8f       	std	Y+29, r17	; 0x1d
     6a0:	22 2d       	mov	r18, r2
     6a2:	30 2f       	mov	r19, r16
     6a4:	43 2d       	mov	r20, r3
     6a6:	56 2d       	mov	r21, r6
     6a8:	67 2d       	mov	r22, r7
     6aa:	78 2d       	mov	r23, r8
     6ac:	89 2d       	mov	r24, r9
     6ae:	91 2f       	mov	r25, r17
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	0e 94 45 0b 	call	0x168a	; 0x168a <__cmpdi2_s8>
     6b6:	19 f0       	breq	.+6      	; 0x6be <motorDriver+0x158>
		rp6Data.driveSpeed = 0;																	//Set the requested speed to 0
     6b8:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <rp6Data>
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <motorDriver+0x166>
	}else if(rp6Data.driveDirection != currentDriveDirection && currentDriveSpeed == 0){	//If the direction is wrong but we are standing still
		currentDriveDirection = rp6Data.driveDirection;											//Reverse the driving direction
     6be:	f0 93 65 00 	sts	0x0065, r31	; 0x800065 <currentDriveDirection.2018+0x1>
     6c2:	e0 93 64 00 	sts	0x0064, r30	; 0x800064 <currentDriveDirection.2018>
		rp6Data.driveSpeed = 0;																	//And remain stationary for this update cycle
     6c6:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <rp6Data>
     6ca:	51 c0       	rjmp	.+162    	; 0x76e <motorDriver+0x208>
	}
	
	
	//Smoothly adjust current drive speed to requested drive speed
	speedDifference = sqrt(pow((rp6Data.driveSpeed - currentDriveSpeed), 2));				//Calculate the speed difference (always positive)
     6cc:	20 90 9a 00 	lds	r2, 0x009A	; 0x80009a <rp6Data>
     6d0:	22 2d       	mov	r18, r2
     6d2:	22 0f       	add	r18, r18
     6d4:	22 0b       	sbc	r18, r18
     6d6:	2c 8f       	std	Y+28, r18	; 0x1c
     6d8:	32 2e       	mov	r3, r18
     6da:	62 2e       	mov	r6, r18
     6dc:	73 2c       	mov	r7, r3
     6de:	83 2c       	mov	r8, r3
     6e0:	93 2c       	mov	r9, r3
     6e2:	2d 8f       	std	Y+29, r18	; 0x1d
     6e4:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentDriveSpeed.2021>
     6e8:	39 87       	std	Y+9, r19	; 0x09
     6ea:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentDriveSpeed.2021+0x1>
     6ee:	4a 87       	std	Y+10, r20	; 0x0a
     6f0:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentDriveSpeed.2021+0x2>
     6f4:	5b 87       	std	Y+11, r21	; 0x0b
     6f6:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <currentDriveSpeed.2021+0x3>
     6fa:	6c 87       	std	Y+12, r22	; 0x0c
     6fc:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <currentDriveSpeed.2021+0x4>
     700:	7d 87       	std	Y+13, r23	; 0x0d
     702:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <currentDriveSpeed.2021+0x5>
     706:	8e 87       	std	Y+14, r24	; 0x0e
     708:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <currentDriveSpeed.2021+0x6>
     70c:	9f 87       	std	Y+15, r25	; 0x0f
     70e:	a0 91 77 00 	lds	r26, 0x0077	; 0x800077 <currentDriveSpeed.2021+0x7>
     712:	a8 8b       	std	Y+16, r26	; 0x10
     714:	22 2d       	mov	r18, r2
     716:	33 2d       	mov	r19, r3
     718:	43 2d       	mov	r20, r3
     71a:	53 2f       	mov	r21, r19
     71c:	63 2f       	mov	r22, r19
     71e:	73 2f       	mov	r23, r19
     720:	83 2f       	mov	r24, r19
     722:	93 2d       	mov	r25, r3
     724:	a9 84       	ldd	r10, Y+9	; 0x09
     726:	ba 84       	ldd	r11, Y+10	; 0x0a
     728:	cb 84       	ldd	r12, Y+11	; 0x0b
     72a:	dc 84       	ldd	r13, Y+12	; 0x0c
     72c:	ed 84       	ldd	r14, Y+13	; 0x0d
     72e:	fe 84       	ldd	r15, Y+14	; 0x0e
     730:	0f 85       	ldd	r16, Y+15	; 0x0f
     732:	1a 2f       	mov	r17, r26
     734:	0e 94 33 0b 	call	0x1666	; 0x1666 <__subdi3>
     738:	29 83       	std	Y+1, r18	; 0x01
     73a:	39 8f       	std	Y+25, r19	; 0x19
     73c:	4a 8f       	std	Y+26, r20	; 0x1a
     73e:	5b 8f       	std	Y+27, r21	; 0x1b
     740:	a6 2e       	mov	r10, r22
     742:	b7 2e       	mov	r11, r23
     744:	08 2f       	mov	r16, r24
     746:	19 2f       	mov	r17, r25
     748:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__floatdisf>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
     750:	a7 01       	movw	r20, r14
     752:	96 01       	movw	r18, r12
     754:	c7 01       	movw	r24, r14
     756:	b6 01       	movw	r22, r12
     758:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsf3>
     75c:	0e 94 3b 09 	call	0x1276	; 0x1276 <sqrt>
	
	if(speedDifference < 2000){														//If the difference is less than 2000
     760:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fixunssfsi>
     764:	60 3d       	cpi	r22, 0xD0	; 208
     766:	77 40       	sbci	r23, 0x07	; 7
     768:	81 05       	cpc	r24, r1
     76a:	91 05       	cpc	r25, r1
     76c:	98 f4       	brcc	.+38     	; 0x794 <motorDriver+0x22e>
		currentDriveSpeed = rp6Data.driveSpeed;													//Set the current speed to the requested value
     76e:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2021>
     772:	3c 8d       	ldd	r19, Y+28	; 0x1c
     774:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2021+0x1>
     778:	30 92 72 00 	sts	0x0072, r3	; 0x800072 <currentDriveSpeed.2021+0x2>
     77c:	60 92 73 00 	sts	0x0073, r6	; 0x800073 <currentDriveSpeed.2021+0x3>
     780:	70 92 74 00 	sts	0x0074, r7	; 0x800074 <currentDriveSpeed.2021+0x4>
     784:	80 92 75 00 	sts	0x0075, r8	; 0x800075 <currentDriveSpeed.2021+0x5>
     788:	90 92 76 00 	sts	0x0076, r9	; 0x800076 <currentDriveSpeed.2021+0x6>
     78c:	4d 8d       	ldd	r20, Y+29	; 0x1d
     78e:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <currentDriveSpeed.2021+0x7>
     792:	1e c1       	rjmp	.+572    	; 0x9d0 <__stack+0x171>
	}else{																			//If the difference is more than 2000
		if(rp6Data.driveSpeed - currentDriveSpeed < 0){											//Check if we need to accelerate or decelerate, if we need to decelerate
     794:	29 81       	ldd	r18, Y+1	; 0x01
     796:	39 8d       	ldd	r19, Y+25	; 0x19
     798:	4a 8d       	ldd	r20, Y+26	; 0x1a
     79a:	5b 8d       	ldd	r21, Y+27	; 0x1b
     79c:	6a 2d       	mov	r22, r10
     79e:	7b 2d       	mov	r23, r11
     7a0:	80 2f       	mov	r24, r16
     7a2:	91 2f       	mov	r25, r17
     7a4:	a0 e0       	ldi	r26, 0x00	; 0
     7a6:	0e 94 45 0b 	call	0x168a	; 0x168a <__cmpdi2_s8>
     7aa:	0c f0       	brlt	.+2      	; 0x7ae <motorDriver+0x248>
     7ac:	75 c0       	rjmp	.+234    	; 0x898 <__stack+0x39>
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//If the speed is less than the threshold
     7ae:	52 01       	movw	r10, r4
     7b0:	c1 2c       	mov	r12, r1
     7b2:	d1 2c       	mov	r13, r1
     7b4:	e1 2c       	mov	r14, r1
     7b6:	f1 2c       	mov	r15, r1
     7b8:	87 01       	movw	r16, r14
     7ba:	29 85       	ldd	r18, Y+9	; 0x09
     7bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7be:	4b 85       	ldd	r20, Y+11	; 0x0b
     7c0:	5c 85       	ldd	r21, Y+12	; 0x0c
     7c2:	6d 85       	ldd	r22, Y+13	; 0x0d
     7c4:	7e 85       	ldd	r23, Y+14	; 0x0e
     7c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c8:	98 89       	ldd	r25, Y+16	; 0x10
     7ca:	49 82       	std	Y+1, r4	; 0x01
     7cc:	ba 82       	std	Y+2, r11	; 0x02
     7ce:	cb 82       	std	Y+3, r12	; 0x03
     7d0:	dc 82       	std	Y+4, r13	; 0x04
     7d2:	ed 82       	std	Y+5, r14	; 0x05
     7d4:	fe 82       	std	Y+6, r15	; 0x06
     7d6:	0f 83       	std	Y+7, r16	; 0x07
     7d8:	18 87       	std	Y+8, r17	; 0x08
     7da:	c1 2c       	mov	r12, r1
     7dc:	d1 2c       	mov	r13, r1
     7de:	e1 2c       	mov	r14, r1
     7e0:	f1 2c       	mov	r15, r1
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__cmpdi2>
     7ea:	9c f4       	brge	.+38     	; 0x812 <motorDriver+0x2ac>
				currentDriveSpeed = rp6Data.driveSpeed;													//Set the speed to the requested value (Probably 0)
     7ec:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2021>
     7f0:	5c 8d       	ldd	r21, Y+28	; 0x1c
     7f2:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <currentDriveSpeed.2021+0x1>
     7f6:	30 92 72 00 	sts	0x0072, r3	; 0x800072 <currentDriveSpeed.2021+0x2>
     7fa:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.2021+0x3>
     7fe:	30 92 74 00 	sts	0x0074, r3	; 0x800074 <currentDriveSpeed.2021+0x4>
     802:	30 92 75 00 	sts	0x0075, r3	; 0x800075 <currentDriveSpeed.2021+0x5>
     806:	30 92 76 00 	sts	0x0076, r3	; 0x800076 <currentDriveSpeed.2021+0x6>
     80a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     80c:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <currentDriveSpeed.2021+0x7>
     810:	df c0       	rjmp	.+446    	; 0x9d0 <__stack+0x171>
			}else{																			//If the current speed is higher than 5000
				currentDriveSpeed -= ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Decelerate with a given percentage of the current speed, determined by accelerationRate
     812:	20 91 9d 00 	lds	r18, 0x009D	; 0x80009d <rp6Data+0x3>
     816:	a9 84       	ldd	r10, Y+9	; 0x09
     818:	ba 84       	ldd	r11, Y+10	; 0x0a
     81a:	cb 84       	ldd	r12, Y+11	; 0x0b
     81c:	dc 84       	ldd	r13, Y+12	; 0x0c
     81e:	ed 84       	ldd	r14, Y+13	; 0x0d
     820:	fe 84       	ldd	r15, Y+14	; 0x0e
     822:	0f 85       	ldd	r16, Y+15	; 0x0f
     824:	18 89       	ldd	r17, Y+16	; 0x10
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__muldi3>
     838:	0f 2e       	mov	r0, r31
     83a:	f4 e6       	ldi	r31, 0x64	; 100
     83c:	af 2e       	mov	r10, r31
     83e:	f0 2d       	mov	r31, r0
     840:	b1 2c       	mov	r11, r1
     842:	c1 2c       	mov	r12, r1
     844:	d1 2c       	mov	r13, r1
     846:	e1 2c       	mov	r14, r1
     848:	f1 2c       	mov	r15, r1
     84a:	00 e0       	ldi	r16, 0x00	; 0
     84c:	10 e0       	ldi	r17, 0x00	; 0
     84e:	0e 94 30 0a 	call	0x1460	; 0x1460 <__divdi3>
     852:	a2 2e       	mov	r10, r18
     854:	b3 2e       	mov	r11, r19
     856:	c4 2e       	mov	r12, r20
     858:	d5 2e       	mov	r13, r21
     85a:	e6 2e       	mov	r14, r22
     85c:	f7 2e       	mov	r15, r23
     85e:	08 2f       	mov	r16, r24
     860:	19 2f       	mov	r17, r25
     862:	29 85       	ldd	r18, Y+9	; 0x09
     864:	3a 85       	ldd	r19, Y+10	; 0x0a
     866:	4b 85       	ldd	r20, Y+11	; 0x0b
     868:	5c 85       	ldd	r21, Y+12	; 0x0c
     86a:	6d 85       	ldd	r22, Y+13	; 0x0d
     86c:	7e 85       	ldd	r23, Y+14	; 0x0e
     86e:	8f 85       	ldd	r24, Y+15	; 0x0f
     870:	98 89       	ldd	r25, Y+16	; 0x10
     872:	0e 94 33 0b 	call	0x1666	; 0x1666 <__subdi3>
     876:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2021>
     87a:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2021+0x1>
     87e:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2021+0x2>
     882:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2021+0x3>
     886:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2021+0x4>
     88a:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2021+0x5>
     88e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2021+0x6>
     892:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2021+0x7>
     896:	9c c0       	rjmp	.+312    	; 0x9d0 <__stack+0x171>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
     898:	82 01       	movw	r16, r4
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	ba 01       	movw	r22, r20
     8a4:	49 82       	std	Y+1, r4	; 0x01
     8a6:	1a 83       	std	Y+2, r17	; 0x02
     8a8:	2b 83       	std	Y+3, r18	; 0x03
     8aa:	3c 83       	std	Y+4, r19	; 0x04
     8ac:	4d 83       	std	Y+5, r20	; 0x05
     8ae:	5e 83       	std	Y+6, r21	; 0x06
     8b0:	6f 83       	std	Y+7, r22	; 0x07
     8b2:	78 87       	std	Y+8, r23	; 0x08
     8b4:	29 85       	ldd	r18, Y+9	; 0x09
     8b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ba:	5c 85       	ldd	r21, Y+12	; 0x0c
     8bc:	6d 85       	ldd	r22, Y+13	; 0x0d
     8be:	7e 85       	ldd	r23, Y+14	; 0x0e
     8c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c2:	98 89       	ldd	r25, Y+16	; 0x10
     8c4:	a4 2c       	mov	r10, r4
     8c6:	b1 2e       	mov	r11, r17
     8c8:	c1 2c       	mov	r12, r1
     8ca:	d1 2c       	mov	r13, r1
     8cc:	e1 2c       	mov	r14, r1
     8ce:	f1 2c       	mov	r15, r1
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	10 e0       	ldi	r17, 0x00	; 0
     8d4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__cmpdi2>
     8d8:	9c f4       	brge	.+38     	; 0x900 <__stack+0xa1>
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
     8da:	0e 94 1e 0b 	call	0x163c	; 0x163c <__adddi3>
     8de:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <currentDriveSpeed.2021>
     8e2:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <currentDriveSpeed.2021+0x1>
     8e6:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <currentDriveSpeed.2021+0x2>
     8ea:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <currentDriveSpeed.2021+0x3>
     8ee:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <currentDriveSpeed.2021+0x4>
     8f2:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <currentDriveSpeed.2021+0x5>
     8f6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <currentDriveSpeed.2021+0x6>
     8fa:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <currentDriveSpeed.2021+0x7>
     8fe:	68 c0       	rjmp	.+208    	; 0x9d0 <__stack+0x171>
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     900:	20 91 9d 00 	lds	r18, 0x009D	; 0x80009d <rp6Data+0x3>
     904:	a9 84       	ldd	r10, Y+9	; 0x09
     906:	ba 84       	ldd	r11, Y+10	; 0x0a
     908:	cb 84       	ldd	r12, Y+11	; 0x0b
     90a:	dc 84       	ldd	r13, Y+12	; 0x0c
     90c:	ed 84       	ldd	r14, Y+13	; 0x0d
     90e:	fe 84       	ldd	r15, Y+14	; 0x0e
     910:	0f 85       	ldd	r16, Y+15	; 0x0f
     912:	18 89       	ldd	r17, Y+16	; 0x10
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__muldi3>
     926:	0f 2e       	mov	r0, r31
     928:	f4 e6       	ldi	r31, 0x64	; 100
     92a:	af 2e       	mov	r10, r31
     92c:	f0 2d       	mov	r31, r0
     92e:	b1 2c       	mov	r11, r1
     930:	c1 2c       	mov	r12, r1
     932:	d1 2c       	mov	r13, r1
     934:	e1 2c       	mov	r14, r1
     936:	f1 2c       	mov	r15, r1
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	0e 94 30 0a 	call	0x1460	; 0x1460 <__divdi3>
     940:	a9 84       	ldd	r10, Y+9	; 0x09
     942:	ba 84       	ldd	r11, Y+10	; 0x0a
     944:	cb 84       	ldd	r12, Y+11	; 0x0b
     946:	dc 84       	ldd	r13, Y+12	; 0x0c
     948:	ed 84       	ldd	r14, Y+13	; 0x0d
     94a:	fe 84       	ldd	r15, Y+14	; 0x0e
     94c:	0f 85       	ldd	r16, Y+15	; 0x0f
     94e:	18 89       	ldd	r17, Y+16	; 0x10
     950:	0e 94 1e 0b 	call	0x163c	; 0x163c <__adddi3>
     954:	29 87       	std	Y+9, r18	; 0x09
     956:	3a 87       	std	Y+10, r19	; 0x0a
     958:	4b 87       	std	Y+11, r20	; 0x0b
     95a:	5c 87       	std	Y+12, r21	; 0x0c
     95c:	b6 2f       	mov	r27, r22
     95e:	a7 2f       	mov	r26, r23
     960:	f8 2f       	mov	r31, r24
     962:	e9 2f       	mov	r30, r25
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     964:	22 2d       	mov	r18, r2
     966:	3c 8d       	ldd	r19, Y+28	; 0x1c
     968:	43 2d       	mov	r20, r3
     96a:	53 2d       	mov	r21, r3
     96c:	63 2d       	mov	r22, r3
     96e:	73 2d       	mov	r23, r3
     970:	83 2d       	mov	r24, r3
     972:	9d 8d       	ldd	r25, Y+29	; 0x1d
     974:	a9 84       	ldd	r10, Y+9	; 0x09
     976:	ba 84       	ldd	r11, Y+10	; 0x0a
     978:	cb 84       	ldd	r12, Y+11	; 0x0b
     97a:	dc 84       	ldd	r13, Y+12	; 0x0c
     97c:	eb 2e       	mov	r14, r27
     97e:	fa 2e       	mov	r15, r26
     980:	0f 2f       	mov	r16, r31
     982:	1e 2f       	mov	r17, r30
     984:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__cmpdi2>
     988:	8c f0       	brlt	.+34     	; 0x9ac <__stack+0x14d>
			}
		}else{																			//If we need to accelerate
			if(currentDriveSpeed < rp6Data.driveSpeedThreshold){									//And we are still at a speed lower than the threshold
				currentDriveSpeed += rp6Data.driveSpeedThreshold;										//Speed up with the minimum threshold
			}else{																			//If we are at a speed higher than the threshold
				currentDriveSpeed += ((currentDriveSpeed * rp6Data.accelerationRate)/100);				//Accelerate with a percentage of the current speed, determined by accelerationRate
     98a:	a0 92 70 00 	sts	0x0070, r10	; 0x800070 <currentDriveSpeed.2021>
     98e:	b0 92 71 00 	sts	0x0071, r11	; 0x800071 <currentDriveSpeed.2021+0x1>
     992:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <currentDriveSpeed.2021+0x2>
     996:	d0 92 73 00 	sts	0x0073, r13	; 0x800073 <currentDriveSpeed.2021+0x3>
     99a:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <currentDriveSpeed.2021+0x4>
     99e:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <currentDriveSpeed.2021+0x5>
     9a2:	f0 93 76 00 	sts	0x0076, r31	; 0x800076 <currentDriveSpeed.2021+0x6>
     9a6:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <currentDriveSpeed.2021+0x7>
     9aa:	12 c0       	rjmp	.+36     	; 0x9d0 <__stack+0x171>
				if(currentDriveSpeed > rp6Data.driveSpeed){currentDriveSpeed = rp6Data.driveSpeed;}				//If we overshot the requested speed, set the current speed to the requested value (Can't be much of a difference)
     9ac:	20 92 70 00 	sts	0x0070, r2	; 0x800070 <currentDriveSpeed.2021>
     9b0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     9b2:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <currentDriveSpeed.2021+0x1>
     9b6:	30 92 72 00 	sts	0x0072, r3	; 0x800072 <currentDriveSpeed.2021+0x2>
     9ba:	30 92 73 00 	sts	0x0073, r3	; 0x800073 <currentDriveSpeed.2021+0x3>
     9be:	30 92 74 00 	sts	0x0074, r3	; 0x800074 <currentDriveSpeed.2021+0x4>
     9c2:	30 92 75 00 	sts	0x0075, r3	; 0x800075 <currentDriveSpeed.2021+0x5>
     9c6:	30 92 76 00 	sts	0x0076, r3	; 0x800076 <currentDriveSpeed.2021+0x6>
     9ca:	5d 8d       	ldd	r21, Y+29	; 0x1d
     9cc:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <currentDriveSpeed.2021+0x7>
		}
	}
	
	
	//Split motor drive direction and speed
	leftMotorDirection = currentDriveDirection;
     9d0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentDriveDirection.2018>
     9d4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentDriveDirection.2018+0x1>
     9d8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2022+0x1>
     9dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2022>
	rightMotorDirection = currentDriveDirection;
     9e0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     9e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	leftMotorSpeed = currentDriveSpeed;
     9e8:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <currentDriveSpeed.2021>
     9ec:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <currentDriveSpeed.2021+0x1>
     9f0:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <currentDriveSpeed.2021+0x2>
     9f4:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <currentDriveSpeed.2021+0x3>
     9f8:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <currentDriveSpeed.2021+0x4>
     9fc:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <currentDriveSpeed.2021+0x5>
     a00:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <currentDriveSpeed.2021+0x6>
     a04:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <currentDriveSpeed.2021+0x7>
     a08:	c2 2e       	mov	r12, r18
     a0a:	d3 2e       	mov	r13, r19
     a0c:	e4 2e       	mov	r14, r20
     a0e:	f5 2e       	mov	r15, r21
     a10:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <leftMotorSpeed.2024>
     a14:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <leftMotorSpeed.2024+0x1>
     a18:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <leftMotorSpeed.2024+0x2>
     a1c:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <leftMotorSpeed.2024+0x3>
	rightMotorSpeed = currentDriveSpeed;
     a20:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <rightMotorSpeed.2025>
     a24:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <rightMotorSpeed.2025+0x1>
     a28:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <rightMotorSpeed.2025+0x2>
     a2c:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <rightMotorSpeed.2025+0x3>
	
	
	//Check turn direction
	if(rp6Data.turnDirection != currentTurnDirection){						//If the turn direction is changed
     a30:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <rp6Data+0x2>
     a34:	0e 2e       	mov	r0, r30
     a36:	00 0c       	add	r0, r0
     a38:	ff 0b       	sbc	r31, r31
     a3a:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end>
     a3e:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x1>
     a42:	ea 17       	cp	r30, r26
     a44:	fb 07       	cpc	r31, r27
     a46:	81 f1       	breq	.+96     	; 0xaa8 <__stack+0x249>
		leftMotorSpeed = currentDriveSpeed;								//Start by driving straight
		rightMotorSpeed = currentDriveSpeed;							//---^
		currentTurnDirection = rp6Data.turnDirection;							//Set the new turn direction
     a48:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
     a4c:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
		if(currentTurnDirection == 0){									//If the new direction is 0(straight)
     a50:	ef 2b       	or	r30, r31
     a52:	29 f4       	brne	.+10     	; 0xa5e <__stack+0x1ff>
			enableMotorEncoder(1);											//Enable the encoders
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 a3 02 	call	0x546	; 0x546 <enableMotorEncoder>
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <__stack+0x207>
		}else{															//If the new direction is not straight
			enableMotorEncoder(0);											//Disable the encoders
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 a3 02 	call	0x546	; 0x546 <enableMotorEncoder>
		}
		updateTimer += 100000;											//Add an extra delay to decrease wear and tear on the gears
     a66:	29 89       	ldd	r18, Y+17	; 0x11
     a68:	3a 89       	ldd	r19, Y+18	; 0x12
     a6a:	4b 89       	ldd	r20, Y+19	; 0x13
     a6c:	5c 89       	ldd	r21, Y+20	; 0x14
     a6e:	6d 89       	ldd	r22, Y+21	; 0x15
     a70:	7e 89       	ldd	r23, Y+22	; 0x16
     a72:	8f 89       	ldd	r24, Y+23	; 0x17
     a74:	98 8d       	ldd	r25, Y+24	; 0x18
     a76:	20 56       	subi	r18, 0x60	; 96
     a78:	39 47       	sbci	r19, 0x79	; 121
     a7a:	4e 4f       	sbci	r20, 0xFE	; 254
     a7c:	5f 4f       	sbci	r21, 0xFF	; 255
     a7e:	6f 4f       	sbci	r22, 0xFF	; 255
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	8f 4f       	sbci	r24, 0xFF	; 255
     a84:	9f 4f       	sbci	r25, 0xFF	; 255
     a86:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <updateTimer.2017>
     a8a:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <updateTimer.2017+0x1>
     a8e:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <updateTimer.2017+0x2>
     a92:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <updateTimer.2017+0x3>
     a96:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <updateTimer.2017+0x4>
     a9a:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <updateTimer.2017+0x5>
     a9e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <updateTimer.2017+0x6>
     aa2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <updateTimer.2017+0x7>
     aa6:	d5 c0       	rjmp	.+426    	; 0xc52 <__stack+0x3f3>
	}else if(currentTurnDirection == -1){							//If the turn direction is -1, we go left
     aa8:	ef 3f       	cpi	r30, 0xFF	; 255
     aaa:	af ef       	ldi	r26, 0xFF	; 255
     aac:	fa 07       	cpc	r31, r26
     aae:	09 f0       	breq	.+2      	; 0xab2 <__stack+0x253>
     ab0:	45 c0       	rjmp	.+138    	; 0xb3c <__stack+0x2dd>
		if(currentDriveSpeed == 0){										//If the speed is 0, we need to turn around our axle
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	0e 94 45 0b 	call	0x168a	; 0x168a <__cmpdi2_s8>
     ab8:	29 f5       	brne	.+74     	; 0xb04 <__stack+0x2a5>
			leftMotorDirection = 0;											//Turn the left motor backwards
     aba:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <leftMotorDirection.2022+0x1>
     abe:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <leftMotorDirection.2022>
			rightMotorDirection = 1;										//Turn the right motor forwards
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     aca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//Set the speed to minimal + twice the turn rate
     ace:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <rp6Data+0x4>
     ad2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <rp6Data+0x5>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	84 0d       	add	r24, r4
     adc:	95 1d       	adc	r25, r5
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2024>
     ae6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2024+0x1>
     aea:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2024+0x2>
     aee:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2024+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     af2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2025>
     af6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2025+0x1>
     afa:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2025+0x2>
     afe:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2025+0x3>
     b02:	a7 c0       	rjmp	.+334    	; 0xc52 <__stack+0x3f3>
		}else{															//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed = rp6Data.driveSpeedThreshold;							//Set the left motor to minimal
     b04:	c2 01       	movw	r24, r4
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2024>
     b0e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2024+0x1>
     b12:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2024+0x2>
     b16:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2024+0x3>
			rightMotorSpeed += rp6Data.turnRate;									//Increase the right motor with the turn rate
     b1a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <rp6Data+0x4>
     b1e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <rp6Data+0x5>
     b22:	c8 0e       	add	r12, r24
     b24:	d9 1e       	adc	r13, r25
     b26:	e1 1c       	adc	r14, r1
     b28:	f1 1c       	adc	r15, r1
     b2a:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2025>
     b2e:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2025+0x1>
     b32:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2025+0x2>
     b36:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2025+0x3>
     b3a:	8b c0       	rjmp	.+278    	; 0xc52 <__stack+0x3f3>
		}
	}else if(currentTurnDirection == 0){							//Encoder crap
     b3c:	30 97       	sbiw	r30, 0x00	; 0
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__stack+0x2e3>
     b40:	41 c0       	rjmp	.+130    	; 0xbc4 <__stack+0x365>
		if(arduinoData.motorEncoderLVal != arduinoData.motorEncoderRVal){
     b42:	e2 e8       	ldi	r30, 0x82	; 130
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	00 81       	ld	r16, Z
     b48:	11 81       	ldd	r17, Z+1	; 0x01
     b4a:	1a 83       	std	Y+2, r17	; 0x02
     b4c:	09 83       	std	Y+1, r16	; 0x01
     b4e:	02 81       	ldd	r16, Z+2	; 0x02
     b50:	13 81       	ldd	r17, Z+3	; 0x03
     b52:	29 81       	ldd	r18, Y+1	; 0x01
     b54:	3a 81       	ldd	r19, Y+2	; 0x02
     b56:	20 17       	cp	r18, r16
     b58:	31 07       	cpc	r19, r17
     b5a:	09 f4       	brne	.+2      	; 0xb5e <__stack+0x2ff>
     b5c:	7a c0       	rjmp	.+244    	; 0xc52 <__stack+0x3f3>
			if(arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal > 0){
				rightMotorSpeed += ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
     b5e:	c7 01       	movw	r24, r14
     b60:	b6 01       	movw	r22, r12
     b62:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__floatunsisf>
     b66:	6b 01       	movw	r12, r22
     b68:	7c 01       	movw	r14, r24
     b6a:	69 81       	ldd	r22, Y+1	; 0x01
     b6c:	7a 81       	ldd	r23, Y+2	; 0x02
     b6e:	60 1b       	sub	r22, r16
     b70:	71 0b       	sbc	r23, r17
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__floatunsisf>
     b7a:	4b 01       	movw	r8, r22
     b7c:	5c 01       	movw	r10, r24
     b7e:	a5 01       	movw	r20, r10
     b80:	94 01       	movw	r18, r8
     b82:	c5 01       	movw	r24, r10
     b84:	b4 01       	movw	r22, r8
     b86:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsf3>
     b8a:	0e 94 3b 09 	call	0x1276	; 0x1276 <sqrt>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	c7 01       	movw	r24, r14
     b94:	b6 01       	movw	r22, r12
     b96:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsf3>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	48 ec       	ldi	r20, 0xC8	; 200
     ba0:	52 e4       	ldi	r21, 0x42	; 66
     ba2:	0e 94 45 07 	call	0xe8a	; 0xe8a <__divsf3>
     ba6:	a7 01       	movw	r20, r14
     ba8:	96 01       	movw	r18, r12
     baa:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__addsf3>
     bae:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fixunssfsi>
     bb2:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <rightMotorSpeed.2025>
     bb6:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <rightMotorSpeed.2025+0x1>
     bba:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rightMotorSpeed.2025+0x2>
     bbe:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <rightMotorSpeed.2025+0x3>
     bc2:	47 c0       	rjmp	.+142    	; 0xc52 <__stack+0x3f3>
			}else{
				rightMotorSpeed -= ( rightMotorSpeed * sqrt(pow((arduinoData.motorEncoderLVal - arduinoData.motorEncoderRVal), 2)) ) / 100;
			}
		}															//-------------
	}else if(currentTurnDirection == 1){							//If the turn direction is 1, we go to the right
     bc4:	31 97       	sbiw	r30, 0x01	; 1
     bc6:	09 f0       	breq	.+2      	; 0xbca <__stack+0x36b>
     bc8:	44 c0       	rjmp	.+136    	; 0xc52 <__stack+0x3f3>
		if(currentDriveSpeed == 0){										//If we stand still, we turn around our axle
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	0e 94 45 0b 	call	0x168a	; 0x168a <__cmpdi2_s8>
     bd0:	29 f5       	brne	.+74     	; 0xc1c <__stack+0x3bd>
			leftMotorDirection = 1;											//Left motor forward
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <leftMotorDirection.2022+0x1>
     bda:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <leftMotorDirection.2022>
			rightMotorDirection = 0;										//Right motor backward
     bde:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     be2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			leftMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//set motor speed to minimal + twice the turn rate
     be6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <rp6Data+0x4>
     bea:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <rp6Data+0x5>
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	84 0d       	add	r24, r4
     bf4:	95 1d       	adc	r25, r5
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2024>
     bfe:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2024+0x1>
     c02:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2024+0x2>
     c06:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2024+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold + rp6Data.turnRate*2;				//---^
     c0a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2025>
     c0e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2025+0x1>
     c12:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2025+0x2>
     c16:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2025+0x3>
     c1a:	1b c0       	rjmp	.+54     	; 0xc52 <__stack+0x3f3>
			}else{														//If we are driving (Forward or backwards does not matter)
			leftMotorSpeed += rp6Data.turnRate;										//Increase the left motor with the set turn rate
     c1c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <rp6Data+0x4>
     c20:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <rp6Data+0x5>
     c24:	c8 0e       	add	r12, r24
     c26:	d9 1e       	adc	r13, r25
     c28:	e1 1c       	adc	r14, r1
     c2a:	f1 1c       	adc	r15, r1
     c2c:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <leftMotorSpeed.2024>
     c30:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <leftMotorSpeed.2024+0x1>
     c34:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <leftMotorSpeed.2024+0x2>
     c38:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <leftMotorSpeed.2024+0x3>
			rightMotorSpeed = rp6Data.driveSpeedThreshold;							//Set right motor to minimal
     c3c:	c2 01       	movw	r24, r4
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2025>
     c46:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2025+0x1>
     c4a:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2025+0x2>
     c4e:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2025+0x3>
		}
	}
	
	
	//Deviation correction
	rightMotorSpeed += (rightMotorSpeed * deviationCorrection) / 100;		//Set a deviation correction on the right motor
     c52:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <rightMotorSpeed.2025>
     c56:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <rightMotorSpeed.2025+0x1>
     c5a:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <rightMotorSpeed.2025+0x2>
     c5e:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <rightMotorSpeed.2025+0x3>
     c62:	d7 01       	movw	r26, r14
     c64:	c6 01       	movw	r24, r12
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	aa 1f       	adc	r26, r26
     c6c:	bb 1f       	adc	r27, r27
     c6e:	8c 0d       	add	r24, r12
     c70:	9d 1d       	adc	r25, r13
     c72:	ae 1d       	adc	r26, r14
     c74:	bf 1d       	adc	r27, r15
     c76:	ac 01       	movw	r20, r24
     c78:	bd 01       	movw	r22, r26
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	66 1f       	adc	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	44 0f       	add	r20, r20
     c84:	55 1f       	adc	r21, r21
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	8c 01       	movw	r16, r24
     c8c:	9d 01       	movw	r18, r26
     c8e:	04 0f       	add	r16, r20
     c90:	15 1f       	adc	r17, r21
     c92:	26 1f       	adc	r18, r22
     c94:	37 1f       	adc	r19, r23
     c96:	c9 01       	movw	r24, r18
     c98:	b8 01       	movw	r22, r16
     c9a:	24 e6       	ldi	r18, 0x64	; 100
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodsi4>
     ca6:	c2 0e       	add	r12, r18
     ca8:	d3 1e       	adc	r13, r19
     caa:	e4 1e       	adc	r14, r20
     cac:	f5 1e       	adc	r15, r21
     cae:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <rightMotorSpeed.2025>
     cb2:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <rightMotorSpeed.2025+0x1>
     cb6:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <rightMotorSpeed.2025+0x2>
     cba:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <rightMotorSpeed.2025+0x3>
	
	
	//Final safety check
	if(leftMotorSpeed > 25600){						//Check if we did not accidentally set a speed higher than allowed on the left motor
     cbe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2024>
     cc2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2024+0x1>
     cc6:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <leftMotorSpeed.2024+0x2>
     cca:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <leftMotorSpeed.2024+0x3>
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	94 46       	sbci	r25, 0x64	; 100
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	60 f0       	brcs	.+24     	; 0xcf0 <__stack+0x491>
		leftMotorSpeed = 25600;							//If we did, set it back to its max
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	94 e6       	ldi	r25, 0x64	; 100
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <leftMotorSpeed.2024>
     ce4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <leftMotorSpeed.2024+0x1>
     ce8:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <leftMotorSpeed.2024+0x2>
     cec:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <leftMotorSpeed.2024+0x3>
	}
	if(rightMotorSpeed > 30000){					//Since the right motor is used to stabilize the left, it is allowed to go a little faster. But if it is even more than that
     cf0:	21 e3       	ldi	r18, 0x31	; 49
     cf2:	c2 16       	cp	r12, r18
     cf4:	25 e7       	ldi	r18, 0x75	; 117
     cf6:	d2 06       	cpc	r13, r18
     cf8:	e1 04       	cpc	r14, r1
     cfa:	f1 04       	cpc	r15, r1
     cfc:	60 f0       	brcs	.+24     	; 0xd16 <__stack+0x4b7>
		rightMotorSpeed = 30000;						//Set it back to its max
     cfe:	80 e3       	ldi	r24, 0x30	; 48
     d00:	95 e7       	ldi	r25, 0x75	; 117
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightMotorSpeed.2025>
     d0a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightMotorSpeed.2025+0x1>
     d0e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <rightMotorSpeed.2025+0x2>
     d12:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <rightMotorSpeed.2025+0x3>
	}
	
	
	//Set motor direction
	if(leftMotorDirection){
     d16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <leftMotorDirection.2022>
     d1a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <leftMotorDirection.2022+0x1>
     d1e:	89 2b       	or	r24, r25
     d20:	11 f0       	breq	.+4      	; 0xd26 <__stack+0x4c7>
		PORTC &= 0b11111011;
     d22:	aa 98       	cbi	0x15, 2	; 21
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <__stack+0x4c9>
	}else{
		PORTC |= 0b00000100;
     d26:	aa 9a       	sbi	0x15, 2	; 21
	}
	if(rightMotorDirection){
     d28:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     d2c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     d30:	89 2b       	or	r24, r25
     d32:	11 f0       	breq	.+4      	; 0xd38 <__stack+0x4d9>
		PORTC &= 0b11110111;
     d34:	ab 98       	cbi	0x15, 3	; 21
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <__stack+0x4db>
	}else{
		PORTC |= 0b00001000;
     d38:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	
	//Engage the motors
	OCR1A = rightMotorSpeed;						//Set the calculated value to the PWM compare to engage the right motor
     d3a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightMotorSpeed.2025>
     d3e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightMotorSpeed.2025+0x1>
     d42:	9b bd       	out	0x2b, r25	; 43
     d44:	8a bd       	out	0x2a, r24	; 42
	OCR1B = leftMotorSpeed;							//And do the same for the left one
     d46:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <leftMotorSpeed.2024>
     d4a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <leftMotorSpeed.2024+0x1>
     d4e:	99 bd       	out	0x29, r25	; 41
     d50:	88 bd       	out	0x28, r24	; 40
	
	return 0;
}
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	6d 96       	adiw	r28, 0x1d	; 29
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	df 90       	pop	r13
     d70:	cf 90       	pop	r12
     d72:	bf 90       	pop	r11
     d74:	af 90       	pop	r10
     d76:	9f 90       	pop	r9
     d78:	8f 90       	pop	r8
     d7a:	7f 90       	pop	r7
     d7c:	6f 90       	pop	r6
     d7e:	5f 90       	pop	r5
     d80:	4f 90       	pop	r4
     d82:	3f 90       	pop	r3
     d84:	2f 90       	pop	r2
     d86:	08 95       	ret

00000d88 <main>:
	}
}

//Other functions
void init_interrupt(){
	sei();									//Enable global interrupts
     d88:	78 94       	sei

//Main function
int main(void) {
	//Initialize all functions
	init_interrupt();
	init_micros();
     d8a:	0e 94 50 00 	call	0xa0	; 0xa0 <init_micros>
	
	init_motor();
     d8e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <init_motor>
	init_LED();
     d92:	0e 94 49 00 	call	0x92	; 0x92 <init_LED>
	
	init_rp6Data();
     d96:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_rp6Data>
	init_arduinoData();
     d9a:	0e 94 15 01 	call	0x22a	; 0x22a <init_arduinoData>
	
	init_TWI();
     d9e:	0e 94 ed 00 	call	0x1da	; 0x1da <init_TWI>
	
	clearSendData();
     da2:	0e 94 1c 01 	call	0x238	; 0x238 <clearSendData>
	clearReceiveData();
     da6:	0e 94 25 01 	call	0x24a	; 0x24a <clearReceiveData>
	
	while(1){
		motorDriver();
     daa:	0e 94 b3 02 	call	0x566	; 0x566 <motorDriver>
     dae:	fd cf       	rjmp	.-6      	; 0xdaa <main+0x22>

00000db0 <__subsf3>:
     db0:	50 58       	subi	r21, 0x80	; 128

00000db2 <__addsf3>:
     db2:	bb 27       	eor	r27, r27
     db4:	aa 27       	eor	r26, r26
     db6:	0e 94 f0 06 	call	0xde0	; 0xde0 <__addsf3x>
     dba:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_round>
     dbe:	0e 94 80 08 	call	0x1100	; 0x1100 <__fp_pscA>
     dc2:	38 f0       	brcs	.+14     	; 0xdd2 <__addsf3+0x20>
     dc4:	0e 94 87 08 	call	0x110e	; 0x110e <__fp_pscB>
     dc8:	20 f0       	brcs	.+8      	; 0xdd2 <__addsf3+0x20>
     dca:	39 f4       	brne	.+14     	; 0xdda <__addsf3+0x28>
     dcc:	9f 3f       	cpi	r25, 0xFF	; 255
     dce:	19 f4       	brne	.+6      	; 0xdd6 <__addsf3+0x24>
     dd0:	26 f4       	brtc	.+8      	; 0xdda <__addsf3+0x28>
     dd2:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_nan>
     dd6:	0e f4       	brtc	.+2      	; 0xdda <__addsf3+0x28>
     dd8:	e0 95       	com	r30
     dda:	e7 fb       	bst	r30, 7
     ddc:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>

00000de0 <__addsf3x>:
     de0:	e9 2f       	mov	r30, r25
     de2:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_split3>
     de6:	58 f3       	brcs	.-42     	; 0xdbe <__addsf3+0xc>
     de8:	ba 17       	cp	r27, r26
     dea:	62 07       	cpc	r22, r18
     dec:	73 07       	cpc	r23, r19
     dee:	84 07       	cpc	r24, r20
     df0:	95 07       	cpc	r25, r21
     df2:	20 f0       	brcs	.+8      	; 0xdfc <__addsf3x+0x1c>
     df4:	79 f4       	brne	.+30     	; 0xe14 <__addsf3x+0x34>
     df6:	a6 f5       	brtc	.+104    	; 0xe60 <__addsf3x+0x80>
     df8:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_zero>
     dfc:	0e f4       	brtc	.+2      	; 0xe00 <__addsf3x+0x20>
     dfe:	e0 95       	com	r30
     e00:	0b 2e       	mov	r0, r27
     e02:	ba 2f       	mov	r27, r26
     e04:	a0 2d       	mov	r26, r0
     e06:	0b 01       	movw	r0, r22
     e08:	b9 01       	movw	r22, r18
     e0a:	90 01       	movw	r18, r0
     e0c:	0c 01       	movw	r0, r24
     e0e:	ca 01       	movw	r24, r20
     e10:	a0 01       	movw	r20, r0
     e12:	11 24       	eor	r1, r1
     e14:	ff 27       	eor	r31, r31
     e16:	59 1b       	sub	r21, r25
     e18:	99 f0       	breq	.+38     	; 0xe40 <__addsf3x+0x60>
     e1a:	59 3f       	cpi	r21, 0xF9	; 249
     e1c:	50 f4       	brcc	.+20     	; 0xe32 <__addsf3x+0x52>
     e1e:	50 3e       	cpi	r21, 0xE0	; 224
     e20:	68 f1       	brcs	.+90     	; 0xe7c <__addsf3x+0x9c>
     e22:	1a 16       	cp	r1, r26
     e24:	f0 40       	sbci	r31, 0x00	; 0
     e26:	a2 2f       	mov	r26, r18
     e28:	23 2f       	mov	r18, r19
     e2a:	34 2f       	mov	r19, r20
     e2c:	44 27       	eor	r20, r20
     e2e:	58 5f       	subi	r21, 0xF8	; 248
     e30:	f3 cf       	rjmp	.-26     	; 0xe18 <__addsf3x+0x38>
     e32:	46 95       	lsr	r20
     e34:	37 95       	ror	r19
     e36:	27 95       	ror	r18
     e38:	a7 95       	ror	r26
     e3a:	f0 40       	sbci	r31, 0x00	; 0
     e3c:	53 95       	inc	r21
     e3e:	c9 f7       	brne	.-14     	; 0xe32 <__addsf3x+0x52>
     e40:	7e f4       	brtc	.+30     	; 0xe60 <__addsf3x+0x80>
     e42:	1f 16       	cp	r1, r31
     e44:	ba 0b       	sbc	r27, r26
     e46:	62 0b       	sbc	r22, r18
     e48:	73 0b       	sbc	r23, r19
     e4a:	84 0b       	sbc	r24, r20
     e4c:	ba f0       	brmi	.+46     	; 0xe7c <__addsf3x+0x9c>
     e4e:	91 50       	subi	r25, 0x01	; 1
     e50:	a1 f0       	breq	.+40     	; 0xe7a <__addsf3x+0x9a>
     e52:	ff 0f       	add	r31, r31
     e54:	bb 1f       	adc	r27, r27
     e56:	66 1f       	adc	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	88 1f       	adc	r24, r24
     e5c:	c2 f7       	brpl	.-16     	; 0xe4e <__addsf3x+0x6e>
     e5e:	0e c0       	rjmp	.+28     	; 0xe7c <__addsf3x+0x9c>
     e60:	ba 0f       	add	r27, r26
     e62:	62 1f       	adc	r22, r18
     e64:	73 1f       	adc	r23, r19
     e66:	84 1f       	adc	r24, r20
     e68:	48 f4       	brcc	.+18     	; 0xe7c <__addsf3x+0x9c>
     e6a:	87 95       	ror	r24
     e6c:	77 95       	ror	r23
     e6e:	67 95       	ror	r22
     e70:	b7 95       	ror	r27
     e72:	f7 95       	ror	r31
     e74:	9e 3f       	cpi	r25, 0xFE	; 254
     e76:	08 f0       	brcs	.+2      	; 0xe7a <__addsf3x+0x9a>
     e78:	b0 cf       	rjmp	.-160    	; 0xdda <__addsf3+0x28>
     e7a:	93 95       	inc	r25
     e7c:	88 0f       	add	r24, r24
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <__addsf3x+0xa2>
     e80:	99 27       	eor	r25, r25
     e82:	ee 0f       	add	r30, r30
     e84:	97 95       	ror	r25
     e86:	87 95       	ror	r24
     e88:	08 95       	ret

00000e8a <__divsf3>:
     e8a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__divsf3x>
     e8e:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_round>
     e92:	0e 94 87 08 	call	0x110e	; 0x110e <__fp_pscB>
     e96:	58 f0       	brcs	.+22     	; 0xeae <__divsf3+0x24>
     e98:	0e 94 80 08 	call	0x1100	; 0x1100 <__fp_pscA>
     e9c:	40 f0       	brcs	.+16     	; 0xeae <__divsf3+0x24>
     e9e:	29 f4       	brne	.+10     	; 0xeaa <__divsf3+0x20>
     ea0:	5f 3f       	cpi	r21, 0xFF	; 255
     ea2:	29 f0       	breq	.+10     	; 0xeae <__divsf3+0x24>
     ea4:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
     ea8:	51 11       	cpse	r21, r1
     eaa:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_szero>
     eae:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_nan>

00000eb2 <__divsf3x>:
     eb2:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_split3>
     eb6:	68 f3       	brcs	.-38     	; 0xe92 <__divsf3+0x8>

00000eb8 <__divsf3_pse>:
     eb8:	99 23       	and	r25, r25
     eba:	b1 f3       	breq	.-20     	; 0xea8 <__divsf3+0x1e>
     ebc:	55 23       	and	r21, r21
     ebe:	91 f3       	breq	.-28     	; 0xea4 <__divsf3+0x1a>
     ec0:	95 1b       	sub	r25, r21
     ec2:	55 0b       	sbc	r21, r21
     ec4:	bb 27       	eor	r27, r27
     ec6:	aa 27       	eor	r26, r26
     ec8:	62 17       	cp	r22, r18
     eca:	73 07       	cpc	r23, r19
     ecc:	84 07       	cpc	r24, r20
     ece:	38 f0       	brcs	.+14     	; 0xede <__divsf3_pse+0x26>
     ed0:	9f 5f       	subi	r25, 0xFF	; 255
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
     ed4:	22 0f       	add	r18, r18
     ed6:	33 1f       	adc	r19, r19
     ed8:	44 1f       	adc	r20, r20
     eda:	aa 1f       	adc	r26, r26
     edc:	a9 f3       	breq	.-22     	; 0xec8 <__divsf3_pse+0x10>
     ede:	35 d0       	rcall	.+106    	; 0xf4a <__divsf3_pse+0x92>
     ee0:	0e 2e       	mov	r0, r30
     ee2:	3a f0       	brmi	.+14     	; 0xef2 <__divsf3_pse+0x3a>
     ee4:	e0 e8       	ldi	r30, 0x80	; 128
     ee6:	32 d0       	rcall	.+100    	; 0xf4c <__divsf3_pse+0x94>
     ee8:	91 50       	subi	r25, 0x01	; 1
     eea:	50 40       	sbci	r21, 0x00	; 0
     eec:	e6 95       	lsr	r30
     eee:	00 1c       	adc	r0, r0
     ef0:	ca f7       	brpl	.-14     	; 0xee4 <__divsf3_pse+0x2c>
     ef2:	2b d0       	rcall	.+86     	; 0xf4a <__divsf3_pse+0x92>
     ef4:	fe 2f       	mov	r31, r30
     ef6:	29 d0       	rcall	.+82     	; 0xf4a <__divsf3_pse+0x92>
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	bb 1f       	adc	r27, r27
     f00:	26 17       	cp	r18, r22
     f02:	37 07       	cpc	r19, r23
     f04:	48 07       	cpc	r20, r24
     f06:	ab 07       	cpc	r26, r27
     f08:	b0 e8       	ldi	r27, 0x80	; 128
     f0a:	09 f0       	breq	.+2      	; 0xf0e <__divsf3_pse+0x56>
     f0c:	bb 0b       	sbc	r27, r27
     f0e:	80 2d       	mov	r24, r0
     f10:	bf 01       	movw	r22, r30
     f12:	ff 27       	eor	r31, r31
     f14:	93 58       	subi	r25, 0x83	; 131
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	3a f0       	brmi	.+14     	; 0xf28 <__divsf3_pse+0x70>
     f1a:	9e 3f       	cpi	r25, 0xFE	; 254
     f1c:	51 05       	cpc	r21, r1
     f1e:	78 f0       	brcs	.+30     	; 0xf3e <__divsf3_pse+0x86>
     f20:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
     f24:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_szero>
     f28:	5f 3f       	cpi	r21, 0xFF	; 255
     f2a:	e4 f3       	brlt	.-8      	; 0xf24 <__divsf3_pse+0x6c>
     f2c:	98 3e       	cpi	r25, 0xE8	; 232
     f2e:	d4 f3       	brlt	.-12     	; 0xf24 <__divsf3_pse+0x6c>
     f30:	86 95       	lsr	r24
     f32:	77 95       	ror	r23
     f34:	67 95       	ror	r22
     f36:	b7 95       	ror	r27
     f38:	f7 95       	ror	r31
     f3a:	9f 5f       	subi	r25, 0xFF	; 255
     f3c:	c9 f7       	brne	.-14     	; 0xf30 <__divsf3_pse+0x78>
     f3e:	88 0f       	add	r24, r24
     f40:	91 1d       	adc	r25, r1
     f42:	96 95       	lsr	r25
     f44:	87 95       	ror	r24
     f46:	97 f9       	bld	r25, 7
     f48:	08 95       	ret
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	bb 1f       	adc	r27, r27
     f54:	62 17       	cp	r22, r18
     f56:	73 07       	cpc	r23, r19
     f58:	84 07       	cpc	r24, r20
     f5a:	ba 07       	cpc	r27, r26
     f5c:	20 f0       	brcs	.+8      	; 0xf66 <__divsf3_pse+0xae>
     f5e:	62 1b       	sub	r22, r18
     f60:	73 0b       	sbc	r23, r19
     f62:	84 0b       	sbc	r24, r20
     f64:	ba 0b       	sbc	r27, r26
     f66:	ee 1f       	adc	r30, r30
     f68:	88 f7       	brcc	.-30     	; 0xf4c <__divsf3_pse+0x94>
     f6a:	e0 95       	com	r30
     f6c:	08 95       	ret

00000f6e <__fixunssfsi>:
     f6e:	0e 94 a7 08 	call	0x114e	; 0x114e <__fp_splitA>
     f72:	88 f0       	brcs	.+34     	; 0xf96 <__fixunssfsi+0x28>
     f74:	9f 57       	subi	r25, 0x7F	; 127
     f76:	98 f0       	brcs	.+38     	; 0xf9e <__fixunssfsi+0x30>
     f78:	b9 2f       	mov	r27, r25
     f7a:	99 27       	eor	r25, r25
     f7c:	b7 51       	subi	r27, 0x17	; 23
     f7e:	b0 f0       	brcs	.+44     	; 0xfac <__fixunssfsi+0x3e>
     f80:	e1 f0       	breq	.+56     	; 0xfba <__fixunssfsi+0x4c>
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	1a f0       	brmi	.+6      	; 0xf92 <__fixunssfsi+0x24>
     f8c:	ba 95       	dec	r27
     f8e:	c9 f7       	brne	.-14     	; 0xf82 <__fixunssfsi+0x14>
     f90:	14 c0       	rjmp	.+40     	; 0xfba <__fixunssfsi+0x4c>
     f92:	b1 30       	cpi	r27, 0x01	; 1
     f94:	91 f0       	breq	.+36     	; 0xfba <__fixunssfsi+0x4c>
     f96:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_zero>
     f9a:	b1 e0       	ldi	r27, 0x01	; 1
     f9c:	08 95       	ret
     f9e:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_zero>
     fa2:	67 2f       	mov	r22, r23
     fa4:	78 2f       	mov	r23, r24
     fa6:	88 27       	eor	r24, r24
     fa8:	b8 5f       	subi	r27, 0xF8	; 248
     faa:	39 f0       	breq	.+14     	; 0xfba <__fixunssfsi+0x4c>
     fac:	b9 3f       	cpi	r27, 0xF9	; 249
     fae:	cc f3       	brlt	.-14     	; 0xfa2 <__fixunssfsi+0x34>
     fb0:	86 95       	lsr	r24
     fb2:	77 95       	ror	r23
     fb4:	67 95       	ror	r22
     fb6:	b3 95       	inc	r27
     fb8:	d9 f7       	brne	.-10     	; 0xfb0 <__fixunssfsi+0x42>
     fba:	3e f4       	brtc	.+14     	; 0xfca <__fixunssfsi+0x5c>
     fbc:	90 95       	com	r25
     fbe:	80 95       	com	r24
     fc0:	70 95       	com	r23
     fc2:	61 95       	neg	r22
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	08 95       	ret

00000fcc <__floatdisf>:
     fcc:	97 fb       	bst	r25, 7
     fce:	16 f4       	brtc	.+4      	; 0xfd4 <__floatdisf+0x8>
     fd0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_negdi>
     fd4:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_di2sf>

00000fd8 <__floatunsisf>:
     fd8:	e8 94       	clt
     fda:	09 c0       	rjmp	.+18     	; 0xfee <__floatsisf+0x12>

00000fdc <__floatsisf>:
     fdc:	97 fb       	bst	r25, 7
     fde:	3e f4       	brtc	.+14     	; 0xfee <__floatsisf+0x12>
     fe0:	90 95       	com	r25
     fe2:	80 95       	com	r24
     fe4:	70 95       	com	r23
     fe6:	61 95       	neg	r22
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	99 23       	and	r25, r25
     ff0:	a9 f0       	breq	.+42     	; 0x101c <__floatsisf+0x40>
     ff2:	f9 2f       	mov	r31, r25
     ff4:	96 e9       	ldi	r25, 0x96	; 150
     ff6:	bb 27       	eor	r27, r27
     ff8:	93 95       	inc	r25
     ffa:	f6 95       	lsr	r31
     ffc:	87 95       	ror	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	b7 95       	ror	r27
    1004:	f1 11       	cpse	r31, r1
    1006:	f8 cf       	rjmp	.-16     	; 0xff8 <__floatsisf+0x1c>
    1008:	fa f4       	brpl	.+62     	; 0x1048 <__floatsisf+0x6c>
    100a:	bb 0f       	add	r27, r27
    100c:	11 f4       	brne	.+4      	; 0x1012 <__floatsisf+0x36>
    100e:	60 ff       	sbrs	r22, 0
    1010:	1b c0       	rjmp	.+54     	; 0x1048 <__floatsisf+0x6c>
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	16 c0       	rjmp	.+44     	; 0x1048 <__floatsisf+0x6c>
    101c:	88 23       	and	r24, r24
    101e:	11 f0       	breq	.+4      	; 0x1024 <__floatsisf+0x48>
    1020:	96 e9       	ldi	r25, 0x96	; 150
    1022:	11 c0       	rjmp	.+34     	; 0x1046 <__floatsisf+0x6a>
    1024:	77 23       	and	r23, r23
    1026:	21 f0       	breq	.+8      	; 0x1030 <__floatsisf+0x54>
    1028:	9e e8       	ldi	r25, 0x8E	; 142
    102a:	87 2f       	mov	r24, r23
    102c:	76 2f       	mov	r23, r22
    102e:	05 c0       	rjmp	.+10     	; 0x103a <__floatsisf+0x5e>
    1030:	66 23       	and	r22, r22
    1032:	71 f0       	breq	.+28     	; 0x1050 <__floatsisf+0x74>
    1034:	96 e8       	ldi	r25, 0x86	; 134
    1036:	86 2f       	mov	r24, r22
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	2a f0       	brmi	.+10     	; 0x1048 <__floatsisf+0x6c>
    103e:	9a 95       	dec	r25
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	da f7       	brpl	.-10     	; 0x103e <__floatsisf+0x62>
    1048:	88 0f       	add	r24, r24
    104a:	96 95       	lsr	r25
    104c:	87 95       	ror	r24
    104e:	97 f9       	bld	r25, 7
    1050:	08 95       	ret

00001052 <__floatundisf>:
    1052:	e8 94       	clt

00001054 <__fp_di2sf>:
    1054:	f9 2f       	mov	r31, r25
    1056:	96 eb       	ldi	r25, 0xB6	; 182
    1058:	ff 23       	and	r31, r31
    105a:	81 f0       	breq	.+32     	; 0x107c <__fp_di2sf+0x28>
    105c:	12 16       	cp	r1, r18
    105e:	13 06       	cpc	r1, r19
    1060:	14 06       	cpc	r1, r20
    1062:	44 0b       	sbc	r20, r20
    1064:	93 95       	inc	r25
    1066:	f6 95       	lsr	r31
    1068:	87 95       	ror	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	57 95       	ror	r21
    1070:	40 40       	sbci	r20, 0x00	; 0
    1072:	ff 23       	and	r31, r31
    1074:	b9 f7       	brne	.-18     	; 0x1064 <__fp_di2sf+0x10>
    1076:	1b c0       	rjmp	.+54     	; 0x10ae <__fp_di2sf+0x5a>
    1078:	99 27       	eor	r25, r25
    107a:	08 95       	ret
    107c:	88 23       	and	r24, r24
    107e:	51 f4       	brne	.+20     	; 0x1094 <__fp_di2sf+0x40>
    1080:	98 50       	subi	r25, 0x08	; 8
    1082:	d2 f7       	brpl	.-12     	; 0x1078 <__fp_di2sf+0x24>
    1084:	87 2b       	or	r24, r23
    1086:	76 2f       	mov	r23, r22
    1088:	65 2f       	mov	r22, r21
    108a:	54 2f       	mov	r21, r20
    108c:	43 2f       	mov	r20, r19
    108e:	32 2f       	mov	r19, r18
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	b1 f3       	breq	.-20     	; 0x1080 <__fp_di2sf+0x2c>
    1094:	12 16       	cp	r1, r18
    1096:	13 06       	cpc	r1, r19
    1098:	14 06       	cpc	r1, r20
    109a:	44 0b       	sbc	r20, r20
    109c:	88 23       	and	r24, r24
    109e:	3a f0       	brmi	.+14     	; 0x10ae <__fp_di2sf+0x5a>
    10a0:	9a 95       	dec	r25
    10a2:	44 0f       	add	r20, r20
    10a4:	55 1f       	adc	r21, r21
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	ca f7       	brpl	.-14     	; 0x10a0 <__fp_di2sf+0x4c>
    10ae:	55 23       	and	r21, r21
    10b0:	4a f4       	brpl	.+18     	; 0x10c4 <__fp_di2sf+0x70>
    10b2:	44 0f       	add	r20, r20
    10b4:	55 1f       	adc	r21, r21
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__fp_di2sf+0x68>
    10b8:	60 ff       	sbrs	r22, 0
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__fp_di2sf+0x70>
    10bc:	6f 5f       	subi	r22, 0xFF	; 255
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	88 0f       	add	r24, r24
    10c6:	96 95       	lsr	r25
    10c8:	87 95       	ror	r24
    10ca:	97 f9       	bld	r25, 7
    10cc:	08 95       	ret

000010ce <__fp_inf>:
    10ce:	97 f9       	bld	r25, 7
    10d0:	9f 67       	ori	r25, 0x7F	; 127
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	08 95       	ret

000010da <__fp_nan>:
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	80 ec       	ldi	r24, 0xC0	; 192
    10de:	08 95       	ret

000010e0 <__fp_negdi>:
    10e0:	90 95       	com	r25
    10e2:	80 95       	com	r24
    10e4:	70 95       	com	r23
    10e6:	60 95       	com	r22
    10e8:	50 95       	com	r21
    10ea:	40 95       	com	r20
    10ec:	30 95       	com	r19
    10ee:	21 95       	neg	r18
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	4f 4f       	sbci	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	6f 4f       	sbci	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	08 95       	ret

00001100 <__fp_pscA>:
    1100:	00 24       	eor	r0, r0
    1102:	0a 94       	dec	r0
    1104:	16 16       	cp	r1, r22
    1106:	17 06       	cpc	r1, r23
    1108:	18 06       	cpc	r1, r24
    110a:	09 06       	cpc	r0, r25
    110c:	08 95       	ret

0000110e <__fp_pscB>:
    110e:	00 24       	eor	r0, r0
    1110:	0a 94       	dec	r0
    1112:	12 16       	cp	r1, r18
    1114:	13 06       	cpc	r1, r19
    1116:	14 06       	cpc	r1, r20
    1118:	05 06       	cpc	r0, r21
    111a:	08 95       	ret

0000111c <__fp_round>:
    111c:	09 2e       	mov	r0, r25
    111e:	03 94       	inc	r0
    1120:	00 0c       	add	r0, r0
    1122:	11 f4       	brne	.+4      	; 0x1128 <__fp_round+0xc>
    1124:	88 23       	and	r24, r24
    1126:	52 f0       	brmi	.+20     	; 0x113c <__fp_round+0x20>
    1128:	bb 0f       	add	r27, r27
    112a:	40 f4       	brcc	.+16     	; 0x113c <__fp_round+0x20>
    112c:	bf 2b       	or	r27, r31
    112e:	11 f4       	brne	.+4      	; 0x1134 <__fp_round+0x18>
    1130:	60 ff       	sbrs	r22, 0
    1132:	04 c0       	rjmp	.+8      	; 0x113c <__fp_round+0x20>
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	8f 4f       	sbci	r24, 0xFF	; 255
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	08 95       	ret

0000113e <__fp_split3>:
    113e:	57 fd       	sbrc	r21, 7
    1140:	90 58       	subi	r25, 0x80	; 128
    1142:	44 0f       	add	r20, r20
    1144:	55 1f       	adc	r21, r21
    1146:	59 f0       	breq	.+22     	; 0x115e <__fp_splitA+0x10>
    1148:	5f 3f       	cpi	r21, 0xFF	; 255
    114a:	71 f0       	breq	.+28     	; 0x1168 <__fp_splitA+0x1a>
    114c:	47 95       	ror	r20

0000114e <__fp_splitA>:
    114e:	88 0f       	add	r24, r24
    1150:	97 fb       	bst	r25, 7
    1152:	99 1f       	adc	r25, r25
    1154:	61 f0       	breq	.+24     	; 0x116e <__fp_splitA+0x20>
    1156:	9f 3f       	cpi	r25, 0xFF	; 255
    1158:	79 f0       	breq	.+30     	; 0x1178 <__fp_splitA+0x2a>
    115a:	87 95       	ror	r24
    115c:	08 95       	ret
    115e:	12 16       	cp	r1, r18
    1160:	13 06       	cpc	r1, r19
    1162:	14 06       	cpc	r1, r20
    1164:	55 1f       	adc	r21, r21
    1166:	f2 cf       	rjmp	.-28     	; 0x114c <__fp_split3+0xe>
    1168:	46 95       	lsr	r20
    116a:	f1 df       	rcall	.-30     	; 0x114e <__fp_splitA>
    116c:	08 c0       	rjmp	.+16     	; 0x117e <__fp_splitA+0x30>
    116e:	16 16       	cp	r1, r22
    1170:	17 06       	cpc	r1, r23
    1172:	18 06       	cpc	r1, r24
    1174:	99 1f       	adc	r25, r25
    1176:	f1 cf       	rjmp	.-30     	; 0x115a <__fp_splitA+0xc>
    1178:	86 95       	lsr	r24
    117a:	71 05       	cpc	r23, r1
    117c:	61 05       	cpc	r22, r1
    117e:	08 94       	sec
    1180:	08 95       	ret

00001182 <__fp_zero>:
    1182:	e8 94       	clt

00001184 <__fp_szero>:
    1184:	bb 27       	eor	r27, r27
    1186:	66 27       	eor	r22, r22
    1188:	77 27       	eor	r23, r23
    118a:	cb 01       	movw	r24, r22
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__mulsf3>:
    1190:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__mulsf3x>
    1194:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_round>
    1198:	0e 94 80 08 	call	0x1100	; 0x1100 <__fp_pscA>
    119c:	38 f0       	brcs	.+14     	; 0x11ac <__mulsf3+0x1c>
    119e:	0e 94 87 08 	call	0x110e	; 0x110e <__fp_pscB>
    11a2:	20 f0       	brcs	.+8      	; 0x11ac <__mulsf3+0x1c>
    11a4:	95 23       	and	r25, r21
    11a6:	11 f0       	breq	.+4      	; 0x11ac <__mulsf3+0x1c>
    11a8:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
    11ac:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_nan>
    11b0:	11 24       	eor	r1, r1
    11b2:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_szero>

000011b6 <__mulsf3x>:
    11b6:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_split3>
    11ba:	70 f3       	brcs	.-36     	; 0x1198 <__mulsf3+0x8>

000011bc <__mulsf3_pse>:
    11bc:	95 9f       	mul	r25, r21
    11be:	c1 f3       	breq	.-16     	; 0x11b0 <__mulsf3+0x20>
    11c0:	95 0f       	add	r25, r21
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	55 1f       	adc	r21, r21
    11c6:	62 9f       	mul	r22, r18
    11c8:	f0 01       	movw	r30, r0
    11ca:	72 9f       	mul	r23, r18
    11cc:	bb 27       	eor	r27, r27
    11ce:	f0 0d       	add	r31, r0
    11d0:	b1 1d       	adc	r27, r1
    11d2:	63 9f       	mul	r22, r19
    11d4:	aa 27       	eor	r26, r26
    11d6:	f0 0d       	add	r31, r0
    11d8:	b1 1d       	adc	r27, r1
    11da:	aa 1f       	adc	r26, r26
    11dc:	64 9f       	mul	r22, r20
    11de:	66 27       	eor	r22, r22
    11e0:	b0 0d       	add	r27, r0
    11e2:	a1 1d       	adc	r26, r1
    11e4:	66 1f       	adc	r22, r22
    11e6:	82 9f       	mul	r24, r18
    11e8:	22 27       	eor	r18, r18
    11ea:	b0 0d       	add	r27, r0
    11ec:	a1 1d       	adc	r26, r1
    11ee:	62 1f       	adc	r22, r18
    11f0:	73 9f       	mul	r23, r19
    11f2:	b0 0d       	add	r27, r0
    11f4:	a1 1d       	adc	r26, r1
    11f6:	62 1f       	adc	r22, r18
    11f8:	83 9f       	mul	r24, r19
    11fa:	a0 0d       	add	r26, r0
    11fc:	61 1d       	adc	r22, r1
    11fe:	22 1f       	adc	r18, r18
    1200:	74 9f       	mul	r23, r20
    1202:	33 27       	eor	r19, r19
    1204:	a0 0d       	add	r26, r0
    1206:	61 1d       	adc	r22, r1
    1208:	23 1f       	adc	r18, r19
    120a:	84 9f       	mul	r24, r20
    120c:	60 0d       	add	r22, r0
    120e:	21 1d       	adc	r18, r1
    1210:	82 2f       	mov	r24, r18
    1212:	76 2f       	mov	r23, r22
    1214:	6a 2f       	mov	r22, r26
    1216:	11 24       	eor	r1, r1
    1218:	9f 57       	subi	r25, 0x7F	; 127
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	9a f0       	brmi	.+38     	; 0x1244 <__mulsf3_pse+0x88>
    121e:	f1 f0       	breq	.+60     	; 0x125c <__mulsf3_pse+0xa0>
    1220:	88 23       	and	r24, r24
    1222:	4a f0       	brmi	.+18     	; 0x1236 <__mulsf3_pse+0x7a>
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	bb 1f       	adc	r27, r27
    122a:	66 1f       	adc	r22, r22
    122c:	77 1f       	adc	r23, r23
    122e:	88 1f       	adc	r24, r24
    1230:	91 50       	subi	r25, 0x01	; 1
    1232:	50 40       	sbci	r21, 0x00	; 0
    1234:	a9 f7       	brne	.-22     	; 0x1220 <__mulsf3_pse+0x64>
    1236:	9e 3f       	cpi	r25, 0xFE	; 254
    1238:	51 05       	cpc	r21, r1
    123a:	80 f0       	brcs	.+32     	; 0x125c <__mulsf3_pse+0xa0>
    123c:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
    1240:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_szero>
    1244:	5f 3f       	cpi	r21, 0xFF	; 255
    1246:	e4 f3       	brlt	.-8      	; 0x1240 <__mulsf3_pse+0x84>
    1248:	98 3e       	cpi	r25, 0xE8	; 232
    124a:	d4 f3       	brlt	.-12     	; 0x1240 <__mulsf3_pse+0x84>
    124c:	86 95       	lsr	r24
    124e:	77 95       	ror	r23
    1250:	67 95       	ror	r22
    1252:	b7 95       	ror	r27
    1254:	f7 95       	ror	r31
    1256:	e7 95       	ror	r30
    1258:	9f 5f       	subi	r25, 0xFF	; 255
    125a:	c1 f7       	brne	.-16     	; 0x124c <__mulsf3_pse+0x90>
    125c:	fe 2b       	or	r31, r30
    125e:	88 0f       	add	r24, r24
    1260:	91 1d       	adc	r25, r1
    1262:	96 95       	lsr	r25
    1264:	87 95       	ror	r24
    1266:	97 f9       	bld	r25, 7
    1268:	08 95       	ret
    126a:	19 f4       	brne	.+6      	; 0x1272 <__mulsf3_pse+0xb6>
    126c:	16 f4       	brtc	.+4      	; 0x1272 <__mulsf3_pse+0xb6>
    126e:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_nan>
    1272:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__fp_mpack>

00001276 <sqrt>:
    1276:	0e 94 a7 08 	call	0x114e	; 0x114e <__fp_splitA>
    127a:	b8 f3       	brcs	.-18     	; 0x126a <__mulsf3_pse+0xae>
    127c:	99 23       	and	r25, r25
    127e:	c9 f3       	breq	.-14     	; 0x1272 <__mulsf3_pse+0xb6>
    1280:	b6 f3       	brts	.-20     	; 0x126e <__mulsf3_pse+0xb2>
    1282:	9f 57       	subi	r25, 0x7F	; 127
    1284:	55 0b       	sbc	r21, r21
    1286:	87 ff       	sbrs	r24, 7
    1288:	0e 94 89 09 	call	0x1312	; 0x1312 <__fp_norm2>
    128c:	00 24       	eor	r0, r0
    128e:	a0 e6       	ldi	r26, 0x60	; 96
    1290:	40 ea       	ldi	r20, 0xA0	; 160
    1292:	90 01       	movw	r18, r0
    1294:	80 58       	subi	r24, 0x80	; 128
    1296:	56 95       	lsr	r21
    1298:	97 95       	ror	r25
    129a:	28 f4       	brcc	.+10     	; 0x12a6 <sqrt+0x30>
    129c:	80 5c       	subi	r24, 0xC0	; 192
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	20 f0       	brcs	.+8      	; 0x12ae <sqrt+0x38>
    12a6:	26 17       	cp	r18, r22
    12a8:	37 07       	cpc	r19, r23
    12aa:	48 07       	cpc	r20, r24
    12ac:	30 f4       	brcc	.+12     	; 0x12ba <sqrt+0x44>
    12ae:	62 1b       	sub	r22, r18
    12b0:	73 0b       	sbc	r23, r19
    12b2:	84 0b       	sbc	r24, r20
    12b4:	20 29       	or	r18, r0
    12b6:	31 29       	or	r19, r1
    12b8:	4a 2b       	or	r20, r26
    12ba:	a6 95       	lsr	r26
    12bc:	17 94       	ror	r1
    12be:	07 94       	ror	r0
    12c0:	20 25       	eor	r18, r0
    12c2:	31 25       	eor	r19, r1
    12c4:	4a 27       	eor	r20, r26
    12c6:	58 f7       	brcc	.-42     	; 0x129e <sqrt+0x28>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	20 f0       	brcs	.+8      	; 0x12d8 <sqrt+0x62>
    12d0:	26 17       	cp	r18, r22
    12d2:	37 07       	cpc	r19, r23
    12d4:	48 07       	cpc	r20, r24
    12d6:	30 f4       	brcc	.+12     	; 0x12e4 <sqrt+0x6e>
    12d8:	62 0b       	sbc	r22, r18
    12da:	73 0b       	sbc	r23, r19
    12dc:	84 0b       	sbc	r24, r20
    12de:	20 0d       	add	r18, r0
    12e0:	31 1d       	adc	r19, r1
    12e2:	41 1d       	adc	r20, r1
    12e4:	a0 95       	com	r26
    12e6:	81 f7       	brne	.-32     	; 0x12c8 <sqrt+0x52>
    12e8:	b9 01       	movw	r22, r18
    12ea:	84 2f       	mov	r24, r20
    12ec:	91 58       	subi	r25, 0x81	; 129
    12ee:	88 0f       	add	r24, r24
    12f0:	96 95       	lsr	r25
    12f2:	87 95       	ror	r24
    12f4:	08 95       	ret

000012f6 <__fp_mpack>:
    12f6:	9f 3f       	cpi	r25, 0xFF	; 255
    12f8:	31 f0       	breq	.+12     	; 0x1306 <__fp_mpack_finite+0xc>

000012fa <__fp_mpack_finite>:
    12fa:	91 50       	subi	r25, 0x01	; 1
    12fc:	20 f4       	brcc	.+8      	; 0x1306 <__fp_mpack_finite+0xc>
    12fe:	87 95       	ror	r24
    1300:	77 95       	ror	r23
    1302:	67 95       	ror	r22
    1304:	b7 95       	ror	r27
    1306:	88 0f       	add	r24, r24
    1308:	91 1d       	adc	r25, r1
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	97 f9       	bld	r25, 7
    1310:	08 95       	ret

00001312 <__fp_norm2>:
    1312:	91 50       	subi	r25, 0x01	; 1
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	d2 f7       	brpl	.-12     	; 0x1312 <__fp_norm2>
    131e:	08 95       	ret

00001320 <__divmodhi4>:
    1320:	97 fb       	bst	r25, 7
    1322:	07 2e       	mov	r0, r23
    1324:	16 f4       	brtc	.+4      	; 0x132a <__divmodhi4+0xa>
    1326:	00 94       	com	r0
    1328:	07 d0       	rcall	.+14     	; 0x1338 <__divmodhi4_neg1>
    132a:	77 fd       	sbrc	r23, 7
    132c:	09 d0       	rcall	.+18     	; 0x1340 <__divmodhi4_neg2>
    132e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__udivmodhi4>
    1332:	07 fc       	sbrc	r0, 7
    1334:	05 d0       	rcall	.+10     	; 0x1340 <__divmodhi4_neg2>
    1336:	3e f4       	brtc	.+14     	; 0x1346 <__divmodhi4_exit>

00001338 <__divmodhi4_neg1>:
    1338:	90 95       	com	r25
    133a:	81 95       	neg	r24
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	08 95       	ret

00001340 <__divmodhi4_neg2>:
    1340:	70 95       	com	r23
    1342:	61 95       	neg	r22
    1344:	7f 4f       	sbci	r23, 0xFF	; 255

00001346 <__divmodhi4_exit>:
    1346:	08 95       	ret

00001348 <__udivmodsi4>:
    1348:	a1 e2       	ldi	r26, 0x21	; 33
    134a:	1a 2e       	mov	r1, r26
    134c:	aa 1b       	sub	r26, r26
    134e:	bb 1b       	sub	r27, r27
    1350:	fd 01       	movw	r30, r26
    1352:	0d c0       	rjmp	.+26     	; 0x136e <__udivmodsi4_ep>

00001354 <__udivmodsi4_loop>:
    1354:	aa 1f       	adc	r26, r26
    1356:	bb 1f       	adc	r27, r27
    1358:	ee 1f       	adc	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	a2 17       	cp	r26, r18
    135e:	b3 07       	cpc	r27, r19
    1360:	e4 07       	cpc	r30, r20
    1362:	f5 07       	cpc	r31, r21
    1364:	20 f0       	brcs	.+8      	; 0x136e <__udivmodsi4_ep>
    1366:	a2 1b       	sub	r26, r18
    1368:	b3 0b       	sbc	r27, r19
    136a:	e4 0b       	sbc	r30, r20
    136c:	f5 0b       	sbc	r31, r21

0000136e <__udivmodsi4_ep>:
    136e:	66 1f       	adc	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	88 1f       	adc	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	1a 94       	dec	r1
    1378:	69 f7       	brne	.-38     	; 0x1354 <__udivmodsi4_loop>
    137a:	60 95       	com	r22
    137c:	70 95       	com	r23
    137e:	80 95       	com	r24
    1380:	90 95       	com	r25
    1382:	9b 01       	movw	r18, r22
    1384:	ac 01       	movw	r20, r24
    1386:	bd 01       	movw	r22, r26
    1388:	cf 01       	movw	r24, r30
    138a:	08 95       	ret

0000138c <__umulhisi3>:
    138c:	a2 9f       	mul	r26, r18
    138e:	b0 01       	movw	r22, r0
    1390:	b3 9f       	mul	r27, r19
    1392:	c0 01       	movw	r24, r0
    1394:	a3 9f       	mul	r26, r19
    1396:	70 0d       	add	r23, r0
    1398:	81 1d       	adc	r24, r1
    139a:	11 24       	eor	r1, r1
    139c:	91 1d       	adc	r25, r1
    139e:	b2 9f       	mul	r27, r18
    13a0:	70 0d       	add	r23, r0
    13a2:	81 1d       	adc	r24, r1
    13a4:	11 24       	eor	r1, r1
    13a6:	91 1d       	adc	r25, r1
    13a8:	08 95       	ret

000013aa <__muldi3>:
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	1f 93       	push	r17
    13b0:	0f 93       	push	r16
    13b2:	9a 9d       	mul	r25, r10
    13b4:	f0 2d       	mov	r31, r0
    13b6:	21 9f       	mul	r18, r17
    13b8:	f0 0d       	add	r31, r0
    13ba:	8b 9d       	mul	r24, r11
    13bc:	f0 0d       	add	r31, r0
    13be:	8a 9d       	mul	r24, r10
    13c0:	e0 2d       	mov	r30, r0
    13c2:	f1 0d       	add	r31, r1
    13c4:	03 9f       	mul	r16, r19
    13c6:	f0 0d       	add	r31, r0
    13c8:	02 9f       	mul	r16, r18
    13ca:	e0 0d       	add	r30, r0
    13cc:	f1 1d       	adc	r31, r1
    13ce:	4e 9d       	mul	r20, r14
    13d0:	e0 0d       	add	r30, r0
    13d2:	f1 1d       	adc	r31, r1
    13d4:	5e 9d       	mul	r21, r14
    13d6:	f0 0d       	add	r31, r0
    13d8:	4f 9d       	mul	r20, r15
    13da:	f0 0d       	add	r31, r0
    13dc:	7f 93       	push	r23
    13de:	6f 93       	push	r22
    13e0:	bf 92       	push	r11
    13e2:	af 92       	push	r10
    13e4:	5f 93       	push	r21
    13e6:	4f 93       	push	r20
    13e8:	d5 01       	movw	r26, r10
    13ea:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
    13ee:	8b 01       	movw	r16, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	d7 01       	movw	r26, r14
    13f4:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
    13f8:	eb 01       	movw	r28, r22
    13fa:	e8 0f       	add	r30, r24
    13fc:	f9 1f       	adc	r31, r25
    13fe:	d6 01       	movw	r26, r12
    1400:	0e 94 25 0a 	call	0x144a	; 0x144a <__muldi3_6>
    1404:	2f 91       	pop	r18
    1406:	3f 91       	pop	r19
    1408:	d6 01       	movw	r26, r12
    140a:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
    140e:	c6 0f       	add	r28, r22
    1410:	d7 1f       	adc	r29, r23
    1412:	e8 1f       	adc	r30, r24
    1414:	f9 1f       	adc	r31, r25
    1416:	af 91       	pop	r26
    1418:	bf 91       	pop	r27
    141a:	0e 94 25 0a 	call	0x144a	; 0x144a <__muldi3_6>
    141e:	2f 91       	pop	r18
    1420:	3f 91       	pop	r19
    1422:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
    1426:	c6 0f       	add	r28, r22
    1428:	d7 1f       	adc	r29, r23
    142a:	e8 1f       	adc	r30, r24
    142c:	f9 1f       	adc	r31, r25
    142e:	d6 01       	movw	r26, r12
    1430:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
    1434:	e6 0f       	add	r30, r22
    1436:	f7 1f       	adc	r31, r23
    1438:	98 01       	movw	r18, r16
    143a:	be 01       	movw	r22, r28
    143c:	cf 01       	movw	r24, r30
    143e:	11 24       	eor	r1, r1
    1440:	0f 91       	pop	r16
    1442:	1f 91       	pop	r17
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <__muldi3_6>:
    144a:	0e 94 c6 09 	call	0x138c	; 0x138c <__umulhisi3>
    144e:	46 0f       	add	r20, r22
    1450:	57 1f       	adc	r21, r23
    1452:	c8 1f       	adc	r28, r24
    1454:	d9 1f       	adc	r29, r25
    1456:	08 f4       	brcc	.+2      	; 0x145a <__muldi3_6+0x10>
    1458:	31 96       	adiw	r30, 0x01	; 1
    145a:	08 95       	ret

0000145c <__moddi3>:
    145c:	68 94       	set
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <__divdi3_moddi3>

00001460 <__divdi3>:
    1460:	e8 94       	clt

00001462 <__divdi3_moddi3>:
    1462:	f9 2f       	mov	r31, r25
    1464:	f1 2b       	or	r31, r17
    1466:	12 f0       	brmi	.+4      	; 0x146c <__divdi3_moddi3+0xa>
    1468:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__udivdi3_umoddi3>
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ec e3       	ldi	r30, 0x3C	; 60
    1472:	fa e0       	ldi	r31, 0x0A	; 10
    1474:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__prologue_saves__+0xc>
    1478:	09 2e       	mov	r0, r25
    147a:	05 94       	asr	r0
    147c:	22 f4       	brpl	.+8      	; 0x1486 <__divdi3_moddi3+0x24>
    147e:	0e 94 be 0a 	call	0x157c	; 0x157c <__negdi2>
    1482:	11 23       	and	r17, r17
    1484:	92 f4       	brpl	.+36     	; 0x14aa <__divdi3_moddi3+0x48>
    1486:	f0 e8       	ldi	r31, 0x80	; 128
    1488:	0f 26       	eor	r0, r31
    148a:	ff ef       	ldi	r31, 0xFF	; 255
    148c:	e0 94       	com	r14
    148e:	f0 94       	com	r15
    1490:	00 95       	com	r16
    1492:	10 95       	com	r17
    1494:	b0 94       	com	r11
    1496:	c0 94       	com	r12
    1498:	d0 94       	com	r13
    149a:	a1 94       	neg	r10
    149c:	bf 0a       	sbc	r11, r31
    149e:	cf 0a       	sbc	r12, r31
    14a0:	df 0a       	sbc	r13, r31
    14a2:	ef 0a       	sbc	r14, r31
    14a4:	ff 0a       	sbc	r15, r31
    14a6:	0f 0b       	sbc	r16, r31
    14a8:	1f 0b       	sbc	r17, r31
    14aa:	0e 94 6d 0a 	call	0x14da	; 0x14da <__udivmod64>
    14ae:	07 fc       	sbrc	r0, 7
    14b0:	0e 94 be 0a 	call	0x157c	; 0x157c <__negdi2>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	ec e0       	ldi	r30, 0x0C	; 12
    14ba:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__epilogue_restores__+0xc>

000014be <__umoddi3>:
    14be:	68 94       	set
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <__udivdi3_umoddi3>

000014c2 <__udivdi3>:
    14c2:	e8 94       	clt

000014c4 <__udivdi3_umoddi3>:
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	0e 94 6d 0a 	call	0x14da	; 0x14da <__udivmod64>
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	9f 90       	pop	r9
    14d6:	8f 90       	pop	r8
    14d8:	08 95       	ret

000014da <__udivmod64>:
    14da:	88 24       	eor	r8, r8
    14dc:	99 24       	eor	r9, r9
    14de:	f4 01       	movw	r30, r8
    14e0:	e4 01       	movw	r28, r8
    14e2:	b0 e4       	ldi	r27, 0x40	; 64
    14e4:	9f 93       	push	r25
    14e6:	aa 27       	eor	r26, r26
    14e8:	9a 15       	cp	r25, r10
    14ea:	8b 04       	cpc	r8, r11
    14ec:	9c 04       	cpc	r9, r12
    14ee:	ed 05       	cpc	r30, r13
    14f0:	fe 05       	cpc	r31, r14
    14f2:	cf 05       	cpc	r28, r15
    14f4:	d0 07       	cpc	r29, r16
    14f6:	a1 07       	cpc	r26, r17
    14f8:	98 f4       	brcc	.+38     	; 0x1520 <__udivmod64+0x46>
    14fa:	ad 2f       	mov	r26, r29
    14fc:	dc 2f       	mov	r29, r28
    14fe:	cf 2f       	mov	r28, r31
    1500:	fe 2f       	mov	r31, r30
    1502:	e9 2d       	mov	r30, r9
    1504:	98 2c       	mov	r9, r8
    1506:	89 2e       	mov	r8, r25
    1508:	98 2f       	mov	r25, r24
    150a:	87 2f       	mov	r24, r23
    150c:	76 2f       	mov	r23, r22
    150e:	65 2f       	mov	r22, r21
    1510:	54 2f       	mov	r21, r20
    1512:	43 2f       	mov	r20, r19
    1514:	32 2f       	mov	r19, r18
    1516:	22 27       	eor	r18, r18
    1518:	b8 50       	subi	r27, 0x08	; 8
    151a:	31 f7       	brne	.-52     	; 0x14e8 <__udivmod64+0xe>
    151c:	bf 91       	pop	r27
    151e:	27 c0       	rjmp	.+78     	; 0x156e <__udivmod64+0x94>
    1520:	1b 2e       	mov	r1, r27
    1522:	bf 91       	pop	r27
    1524:	bb 27       	eor	r27, r27
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	44 1f       	adc	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	66 1f       	adc	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 1c       	adc	r8, r8
    1538:	99 1c       	adc	r9, r9
    153a:	ee 1f       	adc	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	cc 1f       	adc	r28, r28
    1540:	dd 1f       	adc	r29, r29
    1542:	aa 1f       	adc	r26, r26
    1544:	bb 1f       	adc	r27, r27
    1546:	8a 14       	cp	r8, r10
    1548:	9b 04       	cpc	r9, r11
    154a:	ec 05       	cpc	r30, r12
    154c:	fd 05       	cpc	r31, r13
    154e:	ce 05       	cpc	r28, r14
    1550:	df 05       	cpc	r29, r15
    1552:	a0 07       	cpc	r26, r16
    1554:	b1 07       	cpc	r27, r17
    1556:	48 f0       	brcs	.+18     	; 0x156a <__udivmod64+0x90>
    1558:	8a 18       	sub	r8, r10
    155a:	9b 08       	sbc	r9, r11
    155c:	ec 09       	sbc	r30, r12
    155e:	fd 09       	sbc	r31, r13
    1560:	ce 09       	sbc	r28, r14
    1562:	df 09       	sbc	r29, r15
    1564:	a0 0b       	sbc	r26, r16
    1566:	b1 0b       	sbc	r27, r17
    1568:	21 60       	ori	r18, 0x01	; 1
    156a:	1a 94       	dec	r1
    156c:	e1 f6       	brne	.-72     	; 0x1526 <__udivmod64+0x4c>
    156e:	2e f4       	brtc	.+10     	; 0x157a <__udivmod64+0xa0>
    1570:	94 01       	movw	r18, r8
    1572:	af 01       	movw	r20, r30
    1574:	be 01       	movw	r22, r28
    1576:	cd 01       	movw	r24, r26
    1578:	00 0c       	add	r0, r0
    157a:	08 95       	ret

0000157c <__negdi2>:
    157c:	60 95       	com	r22
    157e:	70 95       	com	r23
    1580:	80 95       	com	r24
    1582:	90 95       	com	r25
    1584:	30 95       	com	r19
    1586:	40 95       	com	r20
    1588:	50 95       	com	r21
    158a:	21 95       	neg	r18
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	4f 4f       	sbci	r20, 0xFF	; 255
    1590:	5f 4f       	sbci	r21, 0xFF	; 255
    1592:	6f 4f       	sbci	r22, 0xFF	; 255
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	8f 4f       	sbci	r24, 0xFF	; 255
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	08 95       	ret

0000159c <__prologue_saves__>:
    159c:	2f 92       	push	r2
    159e:	3f 92       	push	r3
    15a0:	4f 92       	push	r4
    15a2:	5f 92       	push	r5
    15a4:	6f 92       	push	r6
    15a6:	7f 92       	push	r7
    15a8:	8f 92       	push	r8
    15aa:	9f 92       	push	r9
    15ac:	af 92       	push	r10
    15ae:	bf 92       	push	r11
    15b0:	cf 92       	push	r12
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	ca 1b       	sub	r28, r26
    15c6:	db 0b       	sbc	r29, r27
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	09 94       	ijmp

000015d4 <__epilogue_restores__>:
    15d4:	2a 88       	ldd	r2, Y+18	; 0x12
    15d6:	39 88       	ldd	r3, Y+17	; 0x11
    15d8:	48 88       	ldd	r4, Y+16	; 0x10
    15da:	5f 84       	ldd	r5, Y+15	; 0x0f
    15dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    15de:	7d 84       	ldd	r7, Y+13	; 0x0d
    15e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    15e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    15e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    15e6:	b9 84       	ldd	r11, Y+9	; 0x09
    15e8:	c8 84       	ldd	r12, Y+8	; 0x08
    15ea:	df 80       	ldd	r13, Y+7	; 0x07
    15ec:	ee 80       	ldd	r14, Y+6	; 0x06
    15ee:	fd 80       	ldd	r15, Y+5	; 0x05
    15f0:	0c 81       	ldd	r16, Y+4	; 0x04
    15f2:	1b 81       	ldd	r17, Y+3	; 0x03
    15f4:	aa 81       	ldd	r26, Y+2	; 0x02
    15f6:	b9 81       	ldd	r27, Y+1	; 0x01
    15f8:	ce 0f       	add	r28, r30
    15fa:	d1 1d       	adc	r29, r1
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	ed 01       	movw	r28, r26
    1608:	08 95       	ret

0000160a <__ashldi3>:
    160a:	0f 93       	push	r16
    160c:	08 30       	cpi	r16, 0x08	; 8
    160e:	90 f0       	brcs	.+36     	; 0x1634 <__ashldi3+0x2a>
    1610:	98 2f       	mov	r25, r24
    1612:	87 2f       	mov	r24, r23
    1614:	76 2f       	mov	r23, r22
    1616:	65 2f       	mov	r22, r21
    1618:	54 2f       	mov	r21, r20
    161a:	43 2f       	mov	r20, r19
    161c:	32 2f       	mov	r19, r18
    161e:	22 27       	eor	r18, r18
    1620:	08 50       	subi	r16, 0x08	; 8
    1622:	f4 cf       	rjmp	.-24     	; 0x160c <__ashldi3+0x2>
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	44 1f       	adc	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	66 1f       	adc	r22, r22
    162e:	77 1f       	adc	r23, r23
    1630:	88 1f       	adc	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 95       	dec	r16
    1636:	b2 f7       	brpl	.-20     	; 0x1624 <__ashldi3+0x1a>
    1638:	0f 91       	pop	r16
    163a:	08 95       	ret

0000163c <__adddi3>:
    163c:	2a 0d       	add	r18, r10
    163e:	3b 1d       	adc	r19, r11
    1640:	4c 1d       	adc	r20, r12
    1642:	5d 1d       	adc	r21, r13
    1644:	6e 1d       	adc	r22, r14
    1646:	7f 1d       	adc	r23, r15
    1648:	80 1f       	adc	r24, r16
    164a:	91 1f       	adc	r25, r17
    164c:	08 95       	ret

0000164e <__adddi3_s8>:
    164e:	00 24       	eor	r0, r0
    1650:	a7 fd       	sbrc	r26, 7
    1652:	00 94       	com	r0
    1654:	2a 0f       	add	r18, r26
    1656:	30 1d       	adc	r19, r0
    1658:	40 1d       	adc	r20, r0
    165a:	50 1d       	adc	r21, r0
    165c:	60 1d       	adc	r22, r0
    165e:	70 1d       	adc	r23, r0
    1660:	80 1d       	adc	r24, r0
    1662:	90 1d       	adc	r25, r0
    1664:	08 95       	ret

00001666 <__subdi3>:
    1666:	2a 19       	sub	r18, r10
    1668:	3b 09       	sbc	r19, r11
    166a:	4c 09       	sbc	r20, r12
    166c:	5d 09       	sbc	r21, r13
    166e:	6e 09       	sbc	r22, r14
    1670:	7f 09       	sbc	r23, r15
    1672:	80 0b       	sbc	r24, r16
    1674:	91 0b       	sbc	r25, r17
    1676:	08 95       	ret

00001678 <__cmpdi2>:
    1678:	2a 15       	cp	r18, r10
    167a:	3b 05       	cpc	r19, r11
    167c:	4c 05       	cpc	r20, r12
    167e:	5d 05       	cpc	r21, r13
    1680:	6e 05       	cpc	r22, r14
    1682:	7f 05       	cpc	r23, r15
    1684:	80 07       	cpc	r24, r16
    1686:	91 07       	cpc	r25, r17
    1688:	08 95       	ret

0000168a <__cmpdi2_s8>:
    168a:	00 24       	eor	r0, r0
    168c:	a7 fd       	sbrc	r26, 7
    168e:	00 94       	com	r0
    1690:	2a 17       	cp	r18, r26
    1692:	30 05       	cpc	r19, r0
    1694:	40 05       	cpc	r20, r0
    1696:	50 05       	cpc	r21, r0
    1698:	60 05       	cpc	r22, r0
    169a:	70 05       	cpc	r23, r0
    169c:	80 05       	cpc	r24, r0
    169e:	90 05       	cpc	r25, r0
    16a0:	08 95       	ret

000016a2 <__udivmodhi4>:
    16a2:	aa 1b       	sub	r26, r26
    16a4:	bb 1b       	sub	r27, r27
    16a6:	51 e1       	ldi	r21, 0x11	; 17
    16a8:	07 c0       	rjmp	.+14     	; 0x16b8 <__udivmodhi4_ep>

000016aa <__udivmodhi4_loop>:
    16aa:	aa 1f       	adc	r26, r26
    16ac:	bb 1f       	adc	r27, r27
    16ae:	a6 17       	cp	r26, r22
    16b0:	b7 07       	cpc	r27, r23
    16b2:	10 f0       	brcs	.+4      	; 0x16b8 <__udivmodhi4_ep>
    16b4:	a6 1b       	sub	r26, r22
    16b6:	b7 0b       	sbc	r27, r23

000016b8 <__udivmodhi4_ep>:
    16b8:	88 1f       	adc	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	5a 95       	dec	r21
    16be:	a9 f7       	brne	.-22     	; 0x16aa <__udivmodhi4_loop>
    16c0:	80 95       	com	r24
    16c2:	90 95       	com	r25
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	08 95       	ret

000016ca <_exit>:
    16ca:	f8 94       	cli

000016cc <__stop_program>:
    16cc:	ff cf       	rjmp	.-2      	; 0x16cc <__stop_program>
