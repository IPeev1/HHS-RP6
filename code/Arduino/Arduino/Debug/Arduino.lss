
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a56  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800106  00800106  00000af0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5d  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093a  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000406  00000000  00000000  00002057  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  000029ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002dc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	76 c0       	rjmp	.+236    	; 0xee <__ctors_end>
   2:	00 00       	nop
   4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
   6:	00 00       	nop
   8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
   a:	00 00       	nop
   c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
   e:	00 00       	nop
  10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
  12:	00 00       	nop
  14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
  16:	00 00       	nop
  18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
  1e:	00 00       	nop
  20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
  22:	00 00       	nop
  24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
  26:	00 00       	nop
  28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
  2e:	00 00       	nop
  30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
  32:	00 00       	nop
  34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
  36:	00 00       	nop
  38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
  3e:	00 00       	nop
  40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
  42:	00 00       	nop
  44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
  46:	00 00       	nop
  48:	6e c0       	rjmp	.+220    	; 0x126 <__vector_18>
  4a:	00 00       	nop
  4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
  4e:	00 00       	nop
  50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
  52:	00 00       	nop
  54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
  56:	00 00       	nop
  58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
  5e:	00 00       	nop
  60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
  66:	00 00       	nop
  68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	07 63       	ori	r16, 0x37	; 55
  6e:	42 36       	cpi	r20, 0x62	; 98
  70:	b7 9b       	sbis	0x16, 7	; 22
  72:	d8 a7       	std	Y+40, r29	; 0x28
  74:	1a 39       	cpi	r17, 0x9A	; 154
  76:	68 56       	subi	r22, 0x68	; 104
  78:	18 ae       	std	Y+56, r1	; 0x38
  7a:	ba ab       	std	Y+50, r27	; 0x32
  7c:	55 8c       	ldd	r5, Z+29	; 0x1d
  7e:	1d 3c       	cpi	r17, 0xCD	; 205
  80:	b7 cc       	rjmp	.-1682   	; 0xfffff9f0 <__eeprom_end+0xff7ef9f0>
  82:	57 63       	ori	r21, 0x37	; 55
  84:	bd 6d       	ori	r27, 0xDD	; 221
  86:	ed fd       	.word	0xfded	; ????
  88:	75 3e       	cpi	r23, 0xE5	; 229
  8a:	f6 17       	cp	r31, r22
  8c:	72 31       	cpi	r23, 0x12	; 18
  8e:	bf 00       	.word	0x00bf	; ????
  90:	00 00       	nop
  92:	80 3f       	cpi	r24, 0xF0	; 240
  94:	08 00       	.word	0x0008	; ????
  96:	00 00       	nop
  98:	be 92       	st	-X, r11
  9a:	24 49       	sbci	r18, 0x94	; 148
  9c:	12 3e       	cpi	r17, 0xE2	; 226
  9e:	ab aa       	std	Y+51, r10	; 0x33
  a0:	aa 2a       	or	r10, r26
  a2:	be cd       	rjmp	.-1156   	; 0xfffffc20 <__eeprom_end+0xff7efc20>
  a4:	cc cc       	rjmp	.-1640   	; 0xfffffa3e <__eeprom_end+0xff7efa3e>
  a6:	4c 3e       	cpi	r20, 0xEC	; 236
  a8:	00 00       	nop
  aa:	00 80       	ld	r0, Z
  ac:	be ab       	std	Y+54, r27	; 0x36
  ae:	aa aa       	std	Y+50, r10	; 0x32
  b0:	aa 3e       	cpi	r26, 0xEA	; 234
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	bf 00       	.word	0x00bf	; ????
  b8:	00 00       	nop
  ba:	80 3f       	cpi	r24, 0xF0	; 240
  bc:	00 00       	nop
  be:	00 00       	nop
  c0:	00 08       	sbc	r0, r0
  c2:	41 78       	andi	r20, 0x81	; 129
  c4:	d3 bb       	out	0x13, r29	; 19
  c6:	43 87       	std	Z+11, r20	; 0x0b
  c8:	d1 13       	cpse	r29, r17
  ca:	3d 19       	sub	r19, r13
  cc:	0e 3c       	cpi	r16, 0xCE	; 206
  ce:	c3 bd       	out	0x23, r28	; 35
  d0:	42 82       	std	Z+2, r4	; 0x02
  d2:	ad 2b       	or	r26, r29
  d4:	3e 68       	ori	r19, 0x8E	; 142
  d6:	ec 82       	std	Y+4, r14	; 0x04
  d8:	76 be       	out	0x36, r7	; 54
  da:	d9 8f       	std	Y+25, r29	; 0x19
  dc:	e1 a9       	ldd	r30, Z+49	; 0x31
  de:	3e 4c       	sbci	r19, 0xCE	; 206
  e0:	80 ef       	ldi	r24, 0xF0	; 240
  e2:	ff be       	out	0x3f, r15	; 63
  e4:	01 c4       	rjmp	.+2050   	; 0x8e8 <__mulsf3_pse+0x92>
  e6:	ff 7f       	andi	r31, 0xFF	; 255
  e8:	3f 00       	.word	0x003f	; ????
  ea:	00 00       	nop
	...

000000ee <__ctors_end>:
  ee:	11 24       	eor	r1, r1
  f0:	1f be       	out	0x3f, r1	; 63
  f2:	cf ef       	ldi	r28, 0xFF	; 255
  f4:	d4 e0       	ldi	r29, 0x04	; 4
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_copy_data>:
  fa:	11 e0       	ldi	r17, 0x01	; 1
  fc:	a0 e0       	ldi	r26, 0x00	; 0
  fe:	b1 e0       	ldi	r27, 0x01	; 1
 100:	e6 e5       	ldi	r30, 0x56	; 86
 102:	fa e0       	ldi	r31, 0x0A	; 10
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x10>
 106:	05 90       	lpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	a6 30       	cpi	r26, 0x06	; 6
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0xc>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	a6 e0       	ldi	r26, 0x06	; 6
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a6 30       	cpi	r26, 0x06	; 6
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	b5 d0       	rcall	.+362    	; 0x28c <main>
 122:	97 c4       	rjmp	.+2350   	; 0xa52 <_exit>

00000124 <__bad_interrupt>:
 124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <__vector_18>:

//Definitions
#define BUFFER_SIZE 255


ISR(USART_RX_vect) {															//For Atmega1280 use USART0_RX_VECT, for Atmega168PB use USART_RX_VECT
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	static char buffer[BUFFER_SIZE];											//Character buffer to store numerals
	static int bufferPos = -1;													//Represents which buffer positions are currently in use to store numerals
	static char received = 0;													//Stores the last character received through USART
	static char command = 0;													//Stores a character that represents a command. Default value is null
	
	received = UDR0;
 158:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	if ('0' <= received && received <= '9') {									//If received contains a a numeral
 15c:	90 ed       	ldi	r25, 0xD0	; 208
 15e:	98 0f       	add	r25, r24
 160:	9a 30       	cpi	r25, 0x0A	; 10
 162:	c0 f4       	brcc	.+48     	; 0x194 <__vector_18+0x6e>
		
		if (command == 't') {													//If command 't' is currently set
 164:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <command.1715>
 168:	94 37       	cpi	r25, 0x74	; 116
 16a:	09 f0       	breq	.+2      	; 0x16e <__vector_18+0x48>
 16c:	76 c0       	rjmp	.+236    	; 0x25a <__vector_18+0x134>
			if (bufferPos < BUFFER_SIZE)										//Check to prevent overflow of the buffer
 16e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 172:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 176:	2f 3f       	cpi	r18, 0xFF	; 255
 178:	31 05       	cpc	r19, r1
 17a:	0c f0       	brlt	.+2      	; 0x17e <__vector_18+0x58>
 17c:	6e c0       	rjmp	.+220    	; 0x25a <__vector_18+0x134>
				buffer[++bufferPos] = received;									//Add numeral to buffer
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 186:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 18a:	f9 01       	movw	r30, r18
 18c:	ea 5f       	subi	r30, 0xFA	; 250
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	80 83       	st	Z, r24
 192:	63 c0       	rjmp	.+198    	; 0x25a <__vector_18+0x134>
		}
			
	} else if ('a' <= received && received <= 'z') {							//If received contains a (lower case) letter
 194:	9f e9       	ldi	r25, 0x9F	; 159
 196:	98 0f       	add	r25, r24
 198:	9a 31       	cpi	r25, 0x1A	; 26
 19a:	80 f4       	brcc	.+32     	; 0x1bc <__vector_18+0x96>
		
		switch(received) {														//Each valid command is represented by a case
 19c:	85 37       	cpi	r24, 0x75	; 117
 19e:	40 f4       	brcc	.+16     	; 0x1b0 <__vector_18+0x8a>
 1a0:	83 37       	cpi	r24, 0x73	; 115
 1a2:	48 f4       	brcc	.+18     	; 0x1b6 <__vector_18+0x90>
 1a4:	81 36       	cpi	r24, 0x61	; 97
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <__vector_18+0x90>
 1a8:	84 36       	cpi	r24, 0x64	; 100
 1aa:	09 f0       	breq	.+2      	; 0x1ae <__vector_18+0x88>
 1ac:	56 c0       	rjmp	.+172    	; 0x25a <__vector_18+0x134>
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <__vector_18+0x90>
 1b0:	87 37       	cpi	r24, 0x77	; 119
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <__vector_18+0x90>
 1b4:	52 c0       	rjmp	.+164    	; 0x25a <__vector_18+0x134>
			case 'w':
			case 'a':
			case 's':
			case 'd':
			case 't':
			command = received;
 1b6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <command.1715>
 1ba:	4f c0       	rjmp	.+158    	; 0x25a <__vector_18+0x134>
		}
	} else if (received == '\r') {												//If received contains a carriage return
 1bc:	8d 30       	cpi	r24, 0x0D	; 13
 1be:	09 f0       	breq	.+2      	; 0x1c2 <__vector_18+0x9c>
 1c0:	4c c0       	rjmp	.+152    	; 0x25a <__vector_18+0x134>
		
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
 1c2:	c0 90 05 02 	lds	r12, 0x0205	; 0x800205 <command.1715>
 1c6:	84 e7       	ldi	r24, 0x74	; 116
 1c8:	c8 12       	cpse	r12, r24
 1ca:	3e c0       	rjmp	.+124    	; 0x248 <__vector_18+0x122>
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
 1cc:	e0 90 00 01 	lds	r14, 0x0100	; 0x800100 <__data_start>
 1d0:	f0 90 01 01 	lds	r15, 0x0101	; 0x800101 <__data_start+0x1>
 1d4:	ff 20       	and	r15, r15
 1d6:	7c f1       	brlt	.+94     	; 0x236 <__vector_18+0x110>
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	d1 2c       	mov	r13, r1
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0
				charToInt = (int) (buffer[i] - '0');
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
 1e2:	b7 01       	movw	r22, r14
 1e4:	6c 1b       	sub	r22, r28
 1e6:	7d 0b       	sbc	r23, r29
 1e8:	07 2e       	mov	r0, r23
 1ea:	00 0c       	add	r0, r0
 1ec:	88 0b       	sbc	r24, r24
 1ee:	99 0b       	sbc	r25, r25
 1f0:	41 d1       	rcall	.+642    	; 0x474 <__floatsisf>
 1f2:	9b 01       	movw	r18, r22
 1f4:	ac 01       	movw	r20, r24
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	91 e4       	ldi	r25, 0x41	; 65
 1fe:	c6 d1       	rcall	.+908    	; 0x58c <pow>
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
				charToInt = (int) (buffer[i] - '0');
 200:	ca 5f       	subi	r28, 0xFA	; 250
 202:	de 4f       	sbci	r29, 0xFE	; 254
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
 204:	c8 81       	ld	r28, Y
 206:	c0 53       	subi	r28, 0x30	; 48
 208:	d0 e0       	ldi	r29, 0x00	; 0
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	5f e3       	ldi	r21, 0x3F	; 63
 212:	99 d0       	rcall	.+306    	; 0x346 <__addsf3>
 214:	fc d0       	rcall	.+504    	; 0x40e <__fixsfsi>
 216:	c6 9f       	mul	r28, r22
 218:	90 01       	movw	r18, r0
 21a:	c7 9f       	mul	r28, r23
 21c:	30 0d       	add	r19, r0
 21e:	d6 9f       	mul	r29, r22
 220:	30 0d       	add	r19, r0
 222:	11 24       	eor	r1, r1
 224:	02 0f       	add	r16, r18
 226:	13 1f       	adc	r17, r19
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
		
		if (command == 't') {													//If the command is 't', the buffer is converted to an integer and stored in intValue
			uint8_t charToInt;
		
			for (uint8_t i = 0; i <= bufferPos; i++) {
 228:	d3 94       	inc	r13
 22a:	cd 2d       	mov	r28, r13
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	ec 16       	cp	r14, r28
 230:	fd 06       	cpc	r15, r29
 232:	bc f6       	brge	.-82     	; 0x1e2 <__vector_18+0xbc>
 234:	02 c0       	rjmp	.+4      	; 0x23a <__vector_18+0x114>
 236:	00 e0       	ldi	r16, 0x00	; 0
 238:	10 e0       	ldi	r17, 0x00	; 0
				charToInt = (int) (buffer[i] - '0');
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
			}
			bufferPos = -1;														//Reset buffer position
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	9f ef       	ldi	r25, 0xFF	; 255
 23e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 246:	04 c0       	rjmp	.+8      	; 0x250 <__vector_18+0x12a>
		}
		if (command) {															//Only if a command is set is data transmitted
 248:	cc 20       	and	r12, r12
 24a:	39 f0       	breq	.+14     	; 0x25a <__vector_18+0x134>
			case 't':
			command = received;
		}
	} else if (received == '\r') {												//If received contains a carriage return
		
		uint16_t intValue = 0;													//Value to be passed over I2C with the command. Default value is 0.
 24c:	00 e0       	ldi	r16, 0x00	; 0
				intValue += charToInt * ((int)(pow(10, bufferPos - i) + 0.5));	//The 0.5 is necessary to properly convert the return value of pow() into an integer
			}
			bufferPos = -1;														//Reset buffer position
		}
		if (command) {															//Only if a command is set is data transmitted
			testTransmitUSART(command, intValue); /*test*/
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	b8 01       	movw	r22, r16
 252:	8c 2d       	mov	r24, r12
 254:	69 d0       	rcall	.+210    	; 0x328 <testTransmitUSART>
		
			command = 0;														//Reset command
 256:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <command.1715>
		}
	}
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <main>:

int main(void)
{	
	//USART initialization
	UCSR0A = 0x00;								
 28c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B |= (1 << RXCIE0 | 1 << RXEN0);		//Enable USART receiver, receiver interrupt
 290:	e1 ec       	ldi	r30, 0xC1	; 193
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	80 69       	ori	r24, 0x90	; 144
 298:	80 83       	st	Z, r24
	UCSR0B |= 1 << TXEN0;	/*Transmitter enabled for testing*/
 29a:	80 81       	ld	r24, Z
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01 | 1 << UCSZ00);		//Asynchronous USART, Parity none, 1 Stop bit, 8-bit character size
 2a0:	e2 ec       	ldi	r30, 0xC2	; 194
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	86 60       	ori	r24, 0x06	; 6
 2a8:	80 83       	st	Z, r24
	UBRR0H = 00;
 2aa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103;								//Baudrate 9600
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	sei();										//Enable interrupt routines
 2b4:	78 94       	sei
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <main+0x2a>

000002b8 <writeChar>:
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	90 81       	ld	r25, Z
 2be:	95 ff       	sbrs	r25, 5
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <writeChar+0x4>
	UDR0 = x;
 2c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2c6:	08 95       	ret

000002c8 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	51 f0       	breq	.+20     	; 0x2ea <writeString+0x22>
 2d6:	8f 01       	movw	r16, r30
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
 2da:	ee df       	rcall	.-36     	; 0x2b8 <writeChar>
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
 2dc:	cf 5f       	subi	r28, 0xFF	; 255
 2de:	f8 01       	movw	r30, r16
 2e0:	ec 0f       	add	r30, r28
 2e2:	f1 1d       	adc	r31, r1
 2e4:	80 81       	ld	r24, Z
 2e6:	81 11       	cpse	r24, r1
 2e8:	f8 cf       	rjmp	.-16     	; 0x2da <writeString+0x12>
		writeChar( st[i] );
	}
}
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	28 97       	sbiw	r28, 0x08	; 8
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 306:	4a e0       	ldi	r20, 0x0A	; 10
 308:	be 01       	movw	r22, r28
 30a:	6f 5f       	subi	r22, 0xFF	; 255
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	6e d3       	rcall	.+1756   	; 0x9ec <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	d9 df       	rcall	.-78     	; 0x2c8 <writeString>
}
 316:	28 96       	adiw	r28, 0x08	; 8
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <testTransmitUSART>:

void testTransmitUSART(char charToSend, int intToSend) {	//Transmits charToSend and intToSend over USART, separated by a space and followed by CR LF
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	eb 01       	movw	r28, r22
	
	writeChar(charToSend);
 32e:	c4 df       	rcall	.-120    	; 0x2b8 <writeChar>
	writeChar(' ');
 330:	80 e2       	ldi	r24, 0x20	; 32
 332:	c2 df       	rcall	.-124    	; 0x2b8 <writeChar>
	writeInt(intToSend);
 334:	ce 01       	movw	r24, r28
 336:	dd df       	rcall	.-70     	; 0x2f2 <writeInt>
	writeString("\r\n");
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	c5 df       	rcall	.-118    	; 0x2c8 <writeString>
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <__subsf3>:
 344:	50 58       	subi	r21, 0x80	; 128

00000346 <__addsf3>:
 346:	bb 27       	eor	r27, r27
 348:	aa 27       	eor	r26, r26
 34a:	0e d0       	rcall	.+28     	; 0x368 <__addsf3x>
 34c:	e5 c0       	rjmp	.+458    	; 0x518 <__fp_round>
 34e:	d6 d0       	rcall	.+428    	; 0x4fc <__fp_pscA>
 350:	30 f0       	brcs	.+12     	; 0x35e <__addsf3+0x18>
 352:	db d0       	rcall	.+438    	; 0x50a <__fp_pscB>
 354:	20 f0       	brcs	.+8      	; 0x35e <__addsf3+0x18>
 356:	31 f4       	brne	.+12     	; 0x364 <__addsf3+0x1e>
 358:	9f 3f       	cpi	r25, 0xFF	; 255
 35a:	11 f4       	brne	.+4      	; 0x360 <__addsf3+0x1a>
 35c:	1e f4       	brtc	.+6      	; 0x364 <__addsf3+0x1e>
 35e:	cb c0       	rjmp	.+406    	; 0x4f6 <__fp_nan>
 360:	0e f4       	brtc	.+2      	; 0x364 <__addsf3+0x1e>
 362:	e0 95       	com	r30
 364:	e7 fb       	bst	r30, 7
 366:	c1 c0       	rjmp	.+386    	; 0x4ea <__fp_inf>

00000368 <__addsf3x>:
 368:	e9 2f       	mov	r30, r25
 36a:	e7 d0       	rcall	.+462    	; 0x53a <__fp_split3>
 36c:	80 f3       	brcs	.-32     	; 0x34e <__addsf3+0x8>
 36e:	ba 17       	cp	r27, r26
 370:	62 07       	cpc	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	95 07       	cpc	r25, r21
 378:	18 f0       	brcs	.+6      	; 0x380 <__addsf3x+0x18>
 37a:	71 f4       	brne	.+28     	; 0x398 <__addsf3x+0x30>
 37c:	9e f5       	brtc	.+102    	; 0x3e4 <__addsf3x+0x7c>
 37e:	ff c0       	rjmp	.+510    	; 0x57e <__fp_zero>
 380:	0e f4       	brtc	.+2      	; 0x384 <__addsf3x+0x1c>
 382:	e0 95       	com	r30
 384:	0b 2e       	mov	r0, r27
 386:	ba 2f       	mov	r27, r26
 388:	a0 2d       	mov	r26, r0
 38a:	0b 01       	movw	r0, r22
 38c:	b9 01       	movw	r22, r18
 38e:	90 01       	movw	r18, r0
 390:	0c 01       	movw	r0, r24
 392:	ca 01       	movw	r24, r20
 394:	a0 01       	movw	r20, r0
 396:	11 24       	eor	r1, r1
 398:	ff 27       	eor	r31, r31
 39a:	59 1b       	sub	r21, r25
 39c:	99 f0       	breq	.+38     	; 0x3c4 <__addsf3x+0x5c>
 39e:	59 3f       	cpi	r21, 0xF9	; 249
 3a0:	50 f4       	brcc	.+20     	; 0x3b6 <__addsf3x+0x4e>
 3a2:	50 3e       	cpi	r21, 0xE0	; 224
 3a4:	68 f1       	brcs	.+90     	; 0x400 <__LOCK_REGION_LENGTH__>
 3a6:	1a 16       	cp	r1, r26
 3a8:	f0 40       	sbci	r31, 0x00	; 0
 3aa:	a2 2f       	mov	r26, r18
 3ac:	23 2f       	mov	r18, r19
 3ae:	34 2f       	mov	r19, r20
 3b0:	44 27       	eor	r20, r20
 3b2:	58 5f       	subi	r21, 0xF8	; 248
 3b4:	f3 cf       	rjmp	.-26     	; 0x39c <__addsf3x+0x34>
 3b6:	46 95       	lsr	r20
 3b8:	37 95       	ror	r19
 3ba:	27 95       	ror	r18
 3bc:	a7 95       	ror	r26
 3be:	f0 40       	sbci	r31, 0x00	; 0
 3c0:	53 95       	inc	r21
 3c2:	c9 f7       	brne	.-14     	; 0x3b6 <__addsf3x+0x4e>
 3c4:	7e f4       	brtc	.+30     	; 0x3e4 <__addsf3x+0x7c>
 3c6:	1f 16       	cp	r1, r31
 3c8:	ba 0b       	sbc	r27, r26
 3ca:	62 0b       	sbc	r22, r18
 3cc:	73 0b       	sbc	r23, r19
 3ce:	84 0b       	sbc	r24, r20
 3d0:	ba f0       	brmi	.+46     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	a1 f0       	breq	.+40     	; 0x3fe <__addsf3x+0x96>
 3d6:	ff 0f       	add	r31, r31
 3d8:	bb 1f       	adc	r27, r27
 3da:	66 1f       	adc	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	c2 f7       	brpl	.-16     	; 0x3d2 <__addsf3x+0x6a>
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e4:	ba 0f       	add	r27, r26
 3e6:	62 1f       	adc	r22, r18
 3e8:	73 1f       	adc	r23, r19
 3ea:	84 1f       	adc	r24, r20
 3ec:	48 f4       	brcc	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ee:	87 95       	ror	r24
 3f0:	77 95       	ror	r23
 3f2:	67 95       	ror	r22
 3f4:	b7 95       	ror	r27
 3f6:	f7 95       	ror	r31
 3f8:	9e 3f       	cpi	r25, 0xFE	; 254
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__addsf3x+0x96>
 3fc:	b3 cf       	rjmp	.-154    	; 0x364 <__addsf3+0x1e>
 3fe:	93 95       	inc	r25
 400:	88 0f       	add	r24, r24
 402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	99 27       	eor	r25, r25
 406:	ee 0f       	add	r30, r30
 408:	97 95       	ror	r25
 40a:	87 95       	ror	r24
 40c:	08 95       	ret

0000040e <__fixsfsi>:
 40e:	04 d0       	rcall	.+8      	; 0x418 <__fixunssfsi>
 410:	68 94       	set
 412:	b1 11       	cpse	r27, r1
 414:	b5 c0       	rjmp	.+362    	; 0x580 <__fp_szero>
 416:	08 95       	ret

00000418 <__fixunssfsi>:
 418:	98 d0       	rcall	.+304    	; 0x54a <__fp_splitA>
 41a:	88 f0       	brcs	.+34     	; 0x43e <__fixunssfsi+0x26>
 41c:	9f 57       	subi	r25, 0x7F	; 127
 41e:	90 f0       	brcs	.+36     	; 0x444 <__fixunssfsi+0x2c>
 420:	b9 2f       	mov	r27, r25
 422:	99 27       	eor	r25, r25
 424:	b7 51       	subi	r27, 0x17	; 23
 426:	a0 f0       	brcs	.+40     	; 0x450 <__fixunssfsi+0x38>
 428:	d1 f0       	breq	.+52     	; 0x45e <__fixunssfsi+0x46>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	1a f0       	brmi	.+6      	; 0x43a <__fixunssfsi+0x22>
 434:	ba 95       	dec	r27
 436:	c9 f7       	brne	.-14     	; 0x42a <__fixunssfsi+0x12>
 438:	12 c0       	rjmp	.+36     	; 0x45e <__fixunssfsi+0x46>
 43a:	b1 30       	cpi	r27, 0x01	; 1
 43c:	81 f0       	breq	.+32     	; 0x45e <__fixunssfsi+0x46>
 43e:	9f d0       	rcall	.+318    	; 0x57e <__fp_zero>
 440:	b1 e0       	ldi	r27, 0x01	; 1
 442:	08 95       	ret
 444:	9c c0       	rjmp	.+312    	; 0x57e <__fp_zero>
 446:	67 2f       	mov	r22, r23
 448:	78 2f       	mov	r23, r24
 44a:	88 27       	eor	r24, r24
 44c:	b8 5f       	subi	r27, 0xF8	; 248
 44e:	39 f0       	breq	.+14     	; 0x45e <__fixunssfsi+0x46>
 450:	b9 3f       	cpi	r27, 0xF9	; 249
 452:	cc f3       	brlt	.-14     	; 0x446 <__fixunssfsi+0x2e>
 454:	86 95       	lsr	r24
 456:	77 95       	ror	r23
 458:	67 95       	ror	r22
 45a:	b3 95       	inc	r27
 45c:	d9 f7       	brne	.-10     	; 0x454 <__fixunssfsi+0x3c>
 45e:	3e f4       	brtc	.+14     	; 0x46e <__fixunssfsi+0x56>
 460:	90 95       	com	r25
 462:	80 95       	com	r24
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	08 95       	ret

00000470 <__floatunsisf>:
 470:	e8 94       	clt
 472:	09 c0       	rjmp	.+18     	; 0x486 <__floatsisf+0x12>

00000474 <__floatsisf>:
 474:	97 fb       	bst	r25, 7
 476:	3e f4       	brtc	.+14     	; 0x486 <__floatsisf+0x12>
 478:	90 95       	com	r25
 47a:	80 95       	com	r24
 47c:	70 95       	com	r23
 47e:	61 95       	neg	r22
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	99 23       	and	r25, r25
 488:	a9 f0       	breq	.+42     	; 0x4b4 <__floatsisf+0x40>
 48a:	f9 2f       	mov	r31, r25
 48c:	96 e9       	ldi	r25, 0x96	; 150
 48e:	bb 27       	eor	r27, r27
 490:	93 95       	inc	r25
 492:	f6 95       	lsr	r31
 494:	87 95       	ror	r24
 496:	77 95       	ror	r23
 498:	67 95       	ror	r22
 49a:	b7 95       	ror	r27
 49c:	f1 11       	cpse	r31, r1
 49e:	f8 cf       	rjmp	.-16     	; 0x490 <__floatsisf+0x1c>
 4a0:	fa f4       	brpl	.+62     	; 0x4e0 <__floatsisf+0x6c>
 4a2:	bb 0f       	add	r27, r27
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__floatsisf+0x36>
 4a6:	60 ff       	sbrs	r22, 0
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <__floatsisf+0x6c>
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	16 c0       	rjmp	.+44     	; 0x4e0 <__floatsisf+0x6c>
 4b4:	88 23       	and	r24, r24
 4b6:	11 f0       	breq	.+4      	; 0x4bc <__floatsisf+0x48>
 4b8:	96 e9       	ldi	r25, 0x96	; 150
 4ba:	11 c0       	rjmp	.+34     	; 0x4de <__floatsisf+0x6a>
 4bc:	77 23       	and	r23, r23
 4be:	21 f0       	breq	.+8      	; 0x4c8 <__floatsisf+0x54>
 4c0:	9e e8       	ldi	r25, 0x8E	; 142
 4c2:	87 2f       	mov	r24, r23
 4c4:	76 2f       	mov	r23, r22
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <__floatsisf+0x5e>
 4c8:	66 23       	and	r22, r22
 4ca:	71 f0       	breq	.+28     	; 0x4e8 <__floatsisf+0x74>
 4cc:	96 e8       	ldi	r25, 0x86	; 134
 4ce:	86 2f       	mov	r24, r22
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	2a f0       	brmi	.+10     	; 0x4e0 <__floatsisf+0x6c>
 4d6:	9a 95       	dec	r25
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	da f7       	brpl	.-10     	; 0x4d6 <__floatsisf+0x62>
 4e0:	88 0f       	add	r24, r24
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	97 f9       	bld	r25, 7
 4e8:	08 95       	ret

000004ea <__fp_inf>:
 4ea:	97 f9       	bld	r25, 7
 4ec:	9f 67       	ori	r25, 0x7F	; 127
 4ee:	80 e8       	ldi	r24, 0x80	; 128
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	08 95       	ret

000004f6 <__fp_nan>:
 4f6:	9f ef       	ldi	r25, 0xFF	; 255
 4f8:	80 ec       	ldi	r24, 0xC0	; 192
 4fa:	08 95       	ret

000004fc <__fp_pscA>:
 4fc:	00 24       	eor	r0, r0
 4fe:	0a 94       	dec	r0
 500:	16 16       	cp	r1, r22
 502:	17 06       	cpc	r1, r23
 504:	18 06       	cpc	r1, r24
 506:	09 06       	cpc	r0, r25
 508:	08 95       	ret

0000050a <__fp_pscB>:
 50a:	00 24       	eor	r0, r0
 50c:	0a 94       	dec	r0
 50e:	12 16       	cp	r1, r18
 510:	13 06       	cpc	r1, r19
 512:	14 06       	cpc	r1, r20
 514:	05 06       	cpc	r0, r21
 516:	08 95       	ret

00000518 <__fp_round>:
 518:	09 2e       	mov	r0, r25
 51a:	03 94       	inc	r0
 51c:	00 0c       	add	r0, r0
 51e:	11 f4       	brne	.+4      	; 0x524 <__fp_round+0xc>
 520:	88 23       	and	r24, r24
 522:	52 f0       	brmi	.+20     	; 0x538 <__fp_round+0x20>
 524:	bb 0f       	add	r27, r27
 526:	40 f4       	brcc	.+16     	; 0x538 <__fp_round+0x20>
 528:	bf 2b       	or	r27, r31
 52a:	11 f4       	brne	.+4      	; 0x530 <__fp_round+0x18>
 52c:	60 ff       	sbrs	r22, 0
 52e:	04 c0       	rjmp	.+8      	; 0x538 <__fp_round+0x20>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	08 95       	ret

0000053a <__fp_split3>:
 53a:	57 fd       	sbrc	r21, 7
 53c:	90 58       	subi	r25, 0x80	; 128
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	59 f0       	breq	.+22     	; 0x55a <__fp_splitA+0x10>
 544:	5f 3f       	cpi	r21, 0xFF	; 255
 546:	71 f0       	breq	.+28     	; 0x564 <__fp_splitA+0x1a>
 548:	47 95       	ror	r20

0000054a <__fp_splitA>:
 54a:	88 0f       	add	r24, r24
 54c:	97 fb       	bst	r25, 7
 54e:	99 1f       	adc	r25, r25
 550:	61 f0       	breq	.+24     	; 0x56a <__fp_splitA+0x20>
 552:	9f 3f       	cpi	r25, 0xFF	; 255
 554:	79 f0       	breq	.+30     	; 0x574 <__fp_splitA+0x2a>
 556:	87 95       	ror	r24
 558:	08 95       	ret
 55a:	12 16       	cp	r1, r18
 55c:	13 06       	cpc	r1, r19
 55e:	14 06       	cpc	r1, r20
 560:	55 1f       	adc	r21, r21
 562:	f2 cf       	rjmp	.-28     	; 0x548 <__fp_split3+0xe>
 564:	46 95       	lsr	r20
 566:	f1 df       	rcall	.-30     	; 0x54a <__fp_splitA>
 568:	08 c0       	rjmp	.+16     	; 0x57a <__fp_splitA+0x30>
 56a:	16 16       	cp	r1, r22
 56c:	17 06       	cpc	r1, r23
 56e:	18 06       	cpc	r1, r24
 570:	99 1f       	adc	r25, r25
 572:	f1 cf       	rjmp	.-30     	; 0x556 <__fp_splitA+0xc>
 574:	86 95       	lsr	r24
 576:	71 05       	cpc	r23, r1
 578:	61 05       	cpc	r22, r1
 57a:	08 94       	sec
 57c:	08 95       	ret

0000057e <__fp_zero>:
 57e:	e8 94       	clt

00000580 <__fp_szero>:
 580:	bb 27       	eor	r27, r27
 582:	66 27       	eor	r22, r22
 584:	77 27       	eor	r23, r23
 586:	cb 01       	movw	r24, r22
 588:	97 f9       	bld	r25, 7
 58a:	08 95       	ret

0000058c <pow>:
 58c:	fa 01       	movw	r30, r20
 58e:	ee 0f       	add	r30, r30
 590:	ff 1f       	adc	r31, r31
 592:	30 96       	adiw	r30, 0x00	; 0
 594:	21 05       	cpc	r18, r1
 596:	31 05       	cpc	r19, r1
 598:	99 f1       	breq	.+102    	; 0x600 <pow+0x74>
 59a:	61 15       	cp	r22, r1
 59c:	71 05       	cpc	r23, r1
 59e:	61 f4       	brne	.+24     	; 0x5b8 <pow+0x2c>
 5a0:	80 38       	cpi	r24, 0x80	; 128
 5a2:	bf e3       	ldi	r27, 0x3F	; 63
 5a4:	9b 07       	cpc	r25, r27
 5a6:	49 f1       	breq	.+82     	; 0x5fa <pow+0x6e>
 5a8:	68 94       	set
 5aa:	90 38       	cpi	r25, 0x80	; 128
 5ac:	81 05       	cpc	r24, r1
 5ae:	61 f0       	breq	.+24     	; 0x5c8 <pow+0x3c>
 5b0:	80 38       	cpi	r24, 0x80	; 128
 5b2:	bf ef       	ldi	r27, 0xFF	; 255
 5b4:	9b 07       	cpc	r25, r27
 5b6:	41 f0       	breq	.+16     	; 0x5c8 <pow+0x3c>
 5b8:	99 23       	and	r25, r25
 5ba:	42 f5       	brpl	.+80     	; 0x60c <pow+0x80>
 5bc:	ff 3f       	cpi	r31, 0xFF	; 255
 5be:	e1 05       	cpc	r30, r1
 5c0:	31 05       	cpc	r19, r1
 5c2:	21 05       	cpc	r18, r1
 5c4:	11 f1       	breq	.+68     	; 0x60a <pow+0x7e>
 5c6:	e8 94       	clt
 5c8:	08 94       	sec
 5ca:	e7 95       	ror	r30
 5cc:	d9 01       	movw	r26, r18
 5ce:	aa 23       	and	r26, r26
 5d0:	29 f4       	brne	.+10     	; 0x5dc <pow+0x50>
 5d2:	ab 2f       	mov	r26, r27
 5d4:	be 2f       	mov	r27, r30
 5d6:	f8 5f       	subi	r31, 0xF8	; 248
 5d8:	d0 f3       	brcs	.-12     	; 0x5ce <pow+0x42>
 5da:	10 c0       	rjmp	.+32     	; 0x5fc <pow+0x70>
 5dc:	ff 5f       	subi	r31, 0xFF	; 255
 5de:	70 f4       	brcc	.+28     	; 0x5fc <pow+0x70>
 5e0:	a6 95       	lsr	r26
 5e2:	e0 f7       	brcc	.-8      	; 0x5dc <pow+0x50>
 5e4:	f7 39       	cpi	r31, 0x97	; 151
 5e6:	50 f0       	brcs	.+20     	; 0x5fc <pow+0x70>
 5e8:	19 f0       	breq	.+6      	; 0x5f0 <pow+0x64>
 5ea:	ff 3a       	cpi	r31, 0xAF	; 175
 5ec:	38 f4       	brcc	.+14     	; 0x5fc <pow+0x70>
 5ee:	9f 77       	andi	r25, 0x7F	; 127
 5f0:	9f 93       	push	r25
 5f2:	0c d0       	rcall	.+24     	; 0x60c <pow+0x80>
 5f4:	0f 90       	pop	r0
 5f6:	07 fc       	sbrc	r0, 7
 5f8:	90 58       	subi	r25, 0x80	; 128
 5fa:	08 95       	ret
 5fc:	3e f0       	brts	.+14     	; 0x60c <pow+0x80>
 5fe:	7b cf       	rjmp	.-266    	; 0x4f6 <__fp_nan>
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	80 e8       	ldi	r24, 0x80	; 128
 606:	9f e3       	ldi	r25, 0x3F	; 63
 608:	08 95       	ret
 60a:	4f e7       	ldi	r20, 0x7F	; 127
 60c:	9f 77       	andi	r25, 0x7F	; 127
 60e:	5f 93       	push	r21
 610:	4f 93       	push	r20
 612:	3f 93       	push	r19
 614:	2f 93       	push	r18
 616:	9e d0       	rcall	.+316    	; 0x754 <log>
 618:	2f 91       	pop	r18
 61a:	3f 91       	pop	r19
 61c:	4f 91       	pop	r20
 61e:	5f 91       	pop	r21
 620:	0c d1       	rcall	.+536    	; 0x83a <__mulsf3>
 622:	05 c0       	rjmp	.+10     	; 0x62e <exp>
 624:	19 f4       	brne	.+6      	; 0x62c <pow+0xa0>
 626:	0e f0       	brts	.+2      	; 0x62a <pow+0x9e>
 628:	60 cf       	rjmp	.-320    	; 0x4ea <__fp_inf>
 62a:	a9 cf       	rjmp	.-174    	; 0x57e <__fp_zero>
 62c:	64 cf       	rjmp	.-312    	; 0x4f6 <__fp_nan>

0000062e <exp>:
 62e:	8d df       	rcall	.-230    	; 0x54a <__fp_splitA>
 630:	c8 f3       	brcs	.-14     	; 0x624 <pow+0x98>
 632:	96 38       	cpi	r25, 0x86	; 134
 634:	c0 f7       	brcc	.-16     	; 0x626 <pow+0x9a>
 636:	07 f8       	bld	r0, 7
 638:	0f 92       	push	r0
 63a:	e8 94       	clt
 63c:	2b e3       	ldi	r18, 0x3B	; 59
 63e:	3a ea       	ldi	r19, 0xAA	; 170
 640:	48 eb       	ldi	r20, 0xB8	; 184
 642:	5f e7       	ldi	r21, 0x7F	; 127
 644:	08 d1       	rcall	.+528    	; 0x856 <__mulsf3_pse>
 646:	0f 92       	push	r0
 648:	0f 92       	push	r0
 64a:	0f 92       	push	r0
 64c:	4d b7       	in	r20, 0x3d	; 61
 64e:	5e b7       	in	r21, 0x3e	; 62
 650:	0f 92       	push	r0
 652:	c0 d0       	rcall	.+384    	; 0x7d4 <modf>
 654:	ec e6       	ldi	r30, 0x6C	; 108
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	16 d0       	rcall	.+44     	; 0x686 <__fp_powser>
 65a:	4f 91       	pop	r20
 65c:	5f 91       	pop	r21
 65e:	ef 91       	pop	r30
 660:	ff 91       	pop	r31
 662:	e5 95       	asr	r30
 664:	ee 1f       	adc	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	49 f0       	breq	.+18     	; 0x67c <exp+0x4e>
 66a:	fe 57       	subi	r31, 0x7E	; 126
 66c:	e0 68       	ori	r30, 0x80	; 128
 66e:	44 27       	eor	r20, r20
 670:	ee 0f       	add	r30, r30
 672:	44 1f       	adc	r20, r20
 674:	fa 95       	dec	r31
 676:	e1 f7       	brne	.-8      	; 0x670 <exp+0x42>
 678:	41 95       	neg	r20
 67a:	55 0b       	sbc	r21, r21
 67c:	32 d0       	rcall	.+100    	; 0x6e2 <ldexp>
 67e:	0f 90       	pop	r0
 680:	07 fe       	sbrs	r0, 7
 682:	26 c0       	rjmp	.+76     	; 0x6d0 <inverse>
 684:	08 95       	ret

00000686 <__fp_powser>:
 686:	df 93       	push	r29
 688:	cf 93       	push	r28
 68a:	1f 93       	push	r17
 68c:	0f 93       	push	r16
 68e:	ff 92       	push	r15
 690:	ef 92       	push	r14
 692:	df 92       	push	r13
 694:	7b 01       	movw	r14, r22
 696:	8c 01       	movw	r16, r24
 698:	68 94       	set
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <__fp_powser+0x20>
 69c:	da 2e       	mov	r13, r26
 69e:	ef 01       	movw	r28, r30
 6a0:	d8 d0       	rcall	.+432    	; 0x852 <__mulsf3x>
 6a2:	fe 01       	movw	r30, r28
 6a4:	e8 94       	clt
 6a6:	a5 91       	lpm	r26, Z+
 6a8:	25 91       	lpm	r18, Z+
 6aa:	35 91       	lpm	r19, Z+
 6ac:	45 91       	lpm	r20, Z+
 6ae:	55 91       	lpm	r21, Z+
 6b0:	ae f3       	brts	.-22     	; 0x69c <__fp_powser+0x16>
 6b2:	ef 01       	movw	r28, r30
 6b4:	59 de       	rcall	.-846    	; 0x368 <__addsf3x>
 6b6:	fe 01       	movw	r30, r28
 6b8:	97 01       	movw	r18, r14
 6ba:	a8 01       	movw	r20, r16
 6bc:	da 94       	dec	r13
 6be:	79 f7       	brne	.-34     	; 0x69e <__fp_powser+0x18>
 6c0:	df 90       	pop	r13
 6c2:	ef 90       	pop	r14
 6c4:	ff 90       	pop	r15
 6c6:	0f 91       	pop	r16
 6c8:	1f 91       	pop	r17
 6ca:	cf 91       	pop	r28
 6cc:	df 91       	pop	r29
 6ce:	08 95       	ret

000006d0 <inverse>:
 6d0:	9b 01       	movw	r18, r22
 6d2:	ac 01       	movw	r20, r24
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	80 e8       	ldi	r24, 0x80	; 128
 6da:	9f e3       	ldi	r25, 0x3F	; 63
 6dc:	11 c1       	rjmp	.+546    	; 0x900 <__divsf3>
 6de:	05 cf       	rjmp	.-502    	; 0x4ea <__fp_inf>
 6e0:	77 c1       	rjmp	.+750    	; 0x9d0 <__fp_mpack>

000006e2 <ldexp>:
 6e2:	33 df       	rcall	.-410    	; 0x54a <__fp_splitA>
 6e4:	e8 f3       	brcs	.-6      	; 0x6e0 <inverse+0x10>
 6e6:	99 23       	and	r25, r25
 6e8:	d9 f3       	breq	.-10     	; 0x6e0 <inverse+0x10>
 6ea:	94 0f       	add	r25, r20
 6ec:	51 1d       	adc	r21, r1
 6ee:	bb f3       	brvs	.-18     	; 0x6de <inverse+0xe>
 6f0:	91 50       	subi	r25, 0x01	; 1
 6f2:	50 40       	sbci	r21, 0x00	; 0
 6f4:	94 f0       	brlt	.+36     	; 0x71a <ldexp+0x38>
 6f6:	59 f0       	breq	.+22     	; 0x70e <ldexp+0x2c>
 6f8:	88 23       	and	r24, r24
 6fa:	32 f0       	brmi	.+12     	; 0x708 <ldexp+0x26>
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	91 50       	subi	r25, 0x01	; 1
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	c1 f7       	brne	.-16     	; 0x6f8 <ldexp+0x16>
 708:	9e 3f       	cpi	r25, 0xFE	; 254
 70a:	51 05       	cpc	r21, r1
 70c:	44 f7       	brge	.-48     	; 0x6de <inverse+0xe>
 70e:	88 0f       	add	r24, r24
 710:	91 1d       	adc	r25, r1
 712:	96 95       	lsr	r25
 714:	87 95       	ror	r24
 716:	97 f9       	bld	r25, 7
 718:	08 95       	ret
 71a:	5f 3f       	cpi	r21, 0xFF	; 255
 71c:	ac f0       	brlt	.+42     	; 0x748 <ldexp+0x66>
 71e:	98 3e       	cpi	r25, 0xE8	; 232
 720:	9c f0       	brlt	.+38     	; 0x748 <ldexp+0x66>
 722:	bb 27       	eor	r27, r27
 724:	86 95       	lsr	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b7 95       	ror	r27
 72c:	08 f4       	brcc	.+2      	; 0x730 <ldexp+0x4e>
 72e:	b1 60       	ori	r27, 0x01	; 1
 730:	93 95       	inc	r25
 732:	c1 f7       	brne	.-16     	; 0x724 <ldexp+0x42>
 734:	bb 0f       	add	r27, r27
 736:	58 f7       	brcc	.-42     	; 0x70e <ldexp+0x2c>
 738:	11 f4       	brne	.+4      	; 0x73e <ldexp+0x5c>
 73a:	60 ff       	sbrs	r22, 0
 73c:	e8 cf       	rjmp	.-48     	; 0x70e <ldexp+0x2c>
 73e:	6f 5f       	subi	r22, 0xFF	; 255
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	e3 cf       	rjmp	.-58     	; 0x70e <ldexp+0x2c>
 748:	1b cf       	rjmp	.-458    	; 0x580 <__fp_szero>
 74a:	0e f0       	brts	.+2      	; 0x74e <ldexp+0x6c>
 74c:	41 c1       	rjmp	.+642    	; 0x9d0 <__fp_mpack>
 74e:	d3 ce       	rjmp	.-602    	; 0x4f6 <__fp_nan>
 750:	68 94       	set
 752:	cb ce       	rjmp	.-618    	; 0x4ea <__fp_inf>

00000754 <log>:
 754:	fa de       	rcall	.-524    	; 0x54a <__fp_splitA>
 756:	c8 f3       	brcs	.-14     	; 0x74a <ldexp+0x68>
 758:	99 23       	and	r25, r25
 75a:	d1 f3       	breq	.-12     	; 0x750 <ldexp+0x6e>
 75c:	c6 f3       	brts	.-16     	; 0x74e <ldexp+0x6c>
 75e:	df 93       	push	r29
 760:	cf 93       	push	r28
 762:	1f 93       	push	r17
 764:	0f 93       	push	r16
 766:	ff 92       	push	r15
 768:	c9 2f       	mov	r28, r25
 76a:	dd 27       	eor	r29, r29
 76c:	88 23       	and	r24, r24
 76e:	2a f0       	brmi	.+10     	; 0x77a <log+0x26>
 770:	21 97       	sbiw	r28, 0x01	; 1
 772:	66 0f       	add	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	da f7       	brpl	.-10     	; 0x770 <log+0x1c>
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	40 e8       	ldi	r20, 0x80	; 128
 780:	5f eb       	ldi	r21, 0xBF	; 191
 782:	9f e3       	ldi	r25, 0x3F	; 63
 784:	88 39       	cpi	r24, 0x98	; 152
 786:	20 f0       	brcs	.+8      	; 0x790 <log+0x3c>
 788:	80 3e       	cpi	r24, 0xE0	; 224
 78a:	30 f0       	brcs	.+12     	; 0x798 <log+0x44>
 78c:	21 96       	adiw	r28, 0x01	; 1
 78e:	8f 77       	andi	r24, 0x7F	; 127
 790:	da dd       	rcall	.-1100   	; 0x346 <__addsf3>
 792:	e4 e9       	ldi	r30, 0x94	; 148
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	03 c0       	rjmp	.+6      	; 0x79e <log+0x4a>
 798:	d6 dd       	rcall	.-1108   	; 0x346 <__addsf3>
 79a:	e1 ec       	ldi	r30, 0xC1	; 193
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	73 df       	rcall	.-282    	; 0x686 <__fp_powser>
 7a0:	8b 01       	movw	r16, r22
 7a2:	be 01       	movw	r22, r28
 7a4:	ec 01       	movw	r28, r24
 7a6:	fb 2e       	mov	r15, r27
 7a8:	6f 57       	subi	r22, 0x7F	; 127
 7aa:	71 09       	sbc	r23, r1
 7ac:	75 95       	asr	r23
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 0b       	sbc	r24, r24
 7b2:	99 0b       	sbc	r25, r25
 7b4:	5f de       	rcall	.-834    	; 0x474 <__floatsisf>
 7b6:	28 e1       	ldi	r18, 0x18	; 24
 7b8:	32 e7       	ldi	r19, 0x72	; 114
 7ba:	41 e3       	ldi	r20, 0x31	; 49
 7bc:	5f e3       	ldi	r21, 0x3F	; 63
 7be:	49 d0       	rcall	.+146    	; 0x852 <__mulsf3x>
 7c0:	af 2d       	mov	r26, r15
 7c2:	98 01       	movw	r18, r16
 7c4:	ae 01       	movw	r20, r28
 7c6:	ff 90       	pop	r15
 7c8:	0f 91       	pop	r16
 7ca:	1f 91       	pop	r17
 7cc:	cf 91       	pop	r28
 7ce:	df 91       	pop	r29
 7d0:	cb dd       	rcall	.-1130   	; 0x368 <__addsf3x>
 7d2:	a2 ce       	rjmp	.-700    	; 0x518 <__fp_round>

000007d4 <modf>:
 7d4:	fa 01       	movw	r30, r20
 7d6:	dc 01       	movw	r26, r24
 7d8:	aa 0f       	add	r26, r26
 7da:	bb 1f       	adc	r27, r27
 7dc:	9b 01       	movw	r18, r22
 7de:	ac 01       	movw	r20, r24
 7e0:	bf 57       	subi	r27, 0x7F	; 127
 7e2:	28 f4       	brcc	.+10     	; 0x7ee <modf+0x1a>
 7e4:	22 27       	eor	r18, r18
 7e6:	33 27       	eor	r19, r19
 7e8:	44 27       	eor	r20, r20
 7ea:	50 78       	andi	r21, 0x80	; 128
 7ec:	1f c0       	rjmp	.+62     	; 0x82c <modf+0x58>
 7ee:	b7 51       	subi	r27, 0x17	; 23
 7f0:	88 f4       	brcc	.+34     	; 0x814 <modf+0x40>
 7f2:	ab 2f       	mov	r26, r27
 7f4:	00 24       	eor	r0, r0
 7f6:	46 95       	lsr	r20
 7f8:	37 95       	ror	r19
 7fa:	27 95       	ror	r18
 7fc:	01 1c       	adc	r0, r1
 7fe:	a3 95       	inc	r26
 800:	d2 f3       	brmi	.-12     	; 0x7f6 <modf+0x22>
 802:	00 20       	and	r0, r0
 804:	69 f0       	breq	.+26     	; 0x820 <modf+0x4c>
 806:	22 0f       	add	r18, r18
 808:	33 1f       	adc	r19, r19
 80a:	44 1f       	adc	r20, r20
 80c:	b3 95       	inc	r27
 80e:	da f3       	brmi	.-10     	; 0x806 <modf+0x32>
 810:	0d d0       	rcall	.+26     	; 0x82c <modf+0x58>
 812:	98 cd       	rjmp	.-1232   	; 0x344 <__subsf3>
 814:	61 30       	cpi	r22, 0x01	; 1
 816:	71 05       	cpc	r23, r1
 818:	a0 e8       	ldi	r26, 0x80	; 128
 81a:	8a 07       	cpc	r24, r26
 81c:	b9 46       	sbci	r27, 0x69	; 105
 81e:	30 f4       	brcc	.+12     	; 0x82c <modf+0x58>
 820:	9b 01       	movw	r18, r22
 822:	ac 01       	movw	r20, r24
 824:	66 27       	eor	r22, r22
 826:	77 27       	eor	r23, r23
 828:	88 27       	eor	r24, r24
 82a:	90 78       	andi	r25, 0x80	; 128
 82c:	30 96       	adiw	r30, 0x00	; 0
 82e:	21 f0       	breq	.+8      	; 0x838 <modf+0x64>
 830:	20 83       	st	Z, r18
 832:	31 83       	std	Z+1, r19	; 0x01
 834:	42 83       	std	Z+2, r20	; 0x02
 836:	53 83       	std	Z+3, r21	; 0x03
 838:	08 95       	ret

0000083a <__mulsf3>:
 83a:	0b d0       	rcall	.+22     	; 0x852 <__mulsf3x>
 83c:	6d ce       	rjmp	.-806    	; 0x518 <__fp_round>
 83e:	5e de       	rcall	.-836    	; 0x4fc <__fp_pscA>
 840:	28 f0       	brcs	.+10     	; 0x84c <__mulsf3+0x12>
 842:	63 de       	rcall	.-826    	; 0x50a <__fp_pscB>
 844:	18 f0       	brcs	.+6      	; 0x84c <__mulsf3+0x12>
 846:	95 23       	and	r25, r21
 848:	09 f0       	breq	.+2      	; 0x84c <__mulsf3+0x12>
 84a:	4f ce       	rjmp	.-866    	; 0x4ea <__fp_inf>
 84c:	54 ce       	rjmp	.-856    	; 0x4f6 <__fp_nan>
 84e:	11 24       	eor	r1, r1
 850:	97 ce       	rjmp	.-722    	; 0x580 <__fp_szero>

00000852 <__mulsf3x>:
 852:	73 de       	rcall	.-794    	; 0x53a <__fp_split3>
 854:	a0 f3       	brcs	.-24     	; 0x83e <__mulsf3+0x4>

00000856 <__mulsf3_pse>:
 856:	95 9f       	mul	r25, r21
 858:	d1 f3       	breq	.-12     	; 0x84e <__mulsf3+0x14>
 85a:	95 0f       	add	r25, r21
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	55 1f       	adc	r21, r21
 860:	62 9f       	mul	r22, r18
 862:	f0 01       	movw	r30, r0
 864:	72 9f       	mul	r23, r18
 866:	bb 27       	eor	r27, r27
 868:	f0 0d       	add	r31, r0
 86a:	b1 1d       	adc	r27, r1
 86c:	63 9f       	mul	r22, r19
 86e:	aa 27       	eor	r26, r26
 870:	f0 0d       	add	r31, r0
 872:	b1 1d       	adc	r27, r1
 874:	aa 1f       	adc	r26, r26
 876:	64 9f       	mul	r22, r20
 878:	66 27       	eor	r22, r22
 87a:	b0 0d       	add	r27, r0
 87c:	a1 1d       	adc	r26, r1
 87e:	66 1f       	adc	r22, r22
 880:	82 9f       	mul	r24, r18
 882:	22 27       	eor	r18, r18
 884:	b0 0d       	add	r27, r0
 886:	a1 1d       	adc	r26, r1
 888:	62 1f       	adc	r22, r18
 88a:	73 9f       	mul	r23, r19
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	62 1f       	adc	r22, r18
 892:	83 9f       	mul	r24, r19
 894:	a0 0d       	add	r26, r0
 896:	61 1d       	adc	r22, r1
 898:	22 1f       	adc	r18, r18
 89a:	74 9f       	mul	r23, r20
 89c:	33 27       	eor	r19, r19
 89e:	a0 0d       	add	r26, r0
 8a0:	61 1d       	adc	r22, r1
 8a2:	23 1f       	adc	r18, r19
 8a4:	84 9f       	mul	r24, r20
 8a6:	60 0d       	add	r22, r0
 8a8:	21 1d       	adc	r18, r1
 8aa:	82 2f       	mov	r24, r18
 8ac:	76 2f       	mov	r23, r22
 8ae:	6a 2f       	mov	r22, r26
 8b0:	11 24       	eor	r1, r1
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	8a f0       	brmi	.+34     	; 0x8da <__mulsf3_pse+0x84>
 8b8:	e1 f0       	breq	.+56     	; 0x8f2 <__mulsf3_pse+0x9c>
 8ba:	88 23       	and	r24, r24
 8bc:	4a f0       	brmi	.+18     	; 0x8d0 <__mulsf3_pse+0x7a>
 8be:	ee 0f       	add	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	bb 1f       	adc	r27, r27
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	50 40       	sbci	r21, 0x00	; 0
 8ce:	a9 f7       	brne	.-22     	; 0x8ba <__mulsf3_pse+0x64>
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	51 05       	cpc	r21, r1
 8d4:	70 f0       	brcs	.+28     	; 0x8f2 <__mulsf3_pse+0x9c>
 8d6:	09 ce       	rjmp	.-1006   	; 0x4ea <__fp_inf>
 8d8:	53 ce       	rjmp	.-858    	; 0x580 <__fp_szero>
 8da:	5f 3f       	cpi	r21, 0xFF	; 255
 8dc:	ec f3       	brlt	.-6      	; 0x8d8 <__mulsf3_pse+0x82>
 8de:	98 3e       	cpi	r25, 0xE8	; 232
 8e0:	dc f3       	brlt	.-10     	; 0x8d8 <__mulsf3_pse+0x82>
 8e2:	86 95       	lsr	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b7 95       	ror	r27
 8ea:	f7 95       	ror	r31
 8ec:	e7 95       	ror	r30
 8ee:	9f 5f       	subi	r25, 0xFF	; 255
 8f0:	c1 f7       	brne	.-16     	; 0x8e2 <__mulsf3_pse+0x8c>
 8f2:	fe 2b       	or	r31, r30
 8f4:	88 0f       	add	r24, r24
 8f6:	91 1d       	adc	r25, r1
 8f8:	96 95       	lsr	r25
 8fa:	87 95       	ror	r24
 8fc:	97 f9       	bld	r25, 7
 8fe:	08 95       	ret

00000900 <__divsf3>:
 900:	0c d0       	rcall	.+24     	; 0x91a <__divsf3x>
 902:	0a ce       	rjmp	.-1004   	; 0x518 <__fp_round>
 904:	02 de       	rcall	.-1020   	; 0x50a <__fp_pscB>
 906:	40 f0       	brcs	.+16     	; 0x918 <__divsf3+0x18>
 908:	f9 dd       	rcall	.-1038   	; 0x4fc <__fp_pscA>
 90a:	30 f0       	brcs	.+12     	; 0x918 <__divsf3+0x18>
 90c:	21 f4       	brne	.+8      	; 0x916 <__divsf3+0x16>
 90e:	5f 3f       	cpi	r21, 0xFF	; 255
 910:	19 f0       	breq	.+6      	; 0x918 <__divsf3+0x18>
 912:	eb cd       	rjmp	.-1066   	; 0x4ea <__fp_inf>
 914:	51 11       	cpse	r21, r1
 916:	34 ce       	rjmp	.-920    	; 0x580 <__fp_szero>
 918:	ee cd       	rjmp	.-1060   	; 0x4f6 <__fp_nan>

0000091a <__divsf3x>:
 91a:	0f de       	rcall	.-994    	; 0x53a <__fp_split3>
 91c:	98 f3       	brcs	.-26     	; 0x904 <__divsf3+0x4>

0000091e <__divsf3_pse>:
 91e:	99 23       	and	r25, r25
 920:	c9 f3       	breq	.-14     	; 0x914 <__divsf3+0x14>
 922:	55 23       	and	r21, r21
 924:	b1 f3       	breq	.-20     	; 0x912 <__divsf3+0x12>
 926:	95 1b       	sub	r25, r21
 928:	55 0b       	sbc	r21, r21
 92a:	bb 27       	eor	r27, r27
 92c:	aa 27       	eor	r26, r26
 92e:	62 17       	cp	r22, r18
 930:	73 07       	cpc	r23, r19
 932:	84 07       	cpc	r24, r20
 934:	38 f0       	brcs	.+14     	; 0x944 <__divsf3_pse+0x26>
 936:	9f 5f       	subi	r25, 0xFF	; 255
 938:	5f 4f       	sbci	r21, 0xFF	; 255
 93a:	22 0f       	add	r18, r18
 93c:	33 1f       	adc	r19, r19
 93e:	44 1f       	adc	r20, r20
 940:	aa 1f       	adc	r26, r26
 942:	a9 f3       	breq	.-22     	; 0x92e <__divsf3_pse+0x10>
 944:	33 d0       	rcall	.+102    	; 0x9ac <__divsf3_pse+0x8e>
 946:	0e 2e       	mov	r0, r30
 948:	3a f0       	brmi	.+14     	; 0x958 <__divsf3_pse+0x3a>
 94a:	e0 e8       	ldi	r30, 0x80	; 128
 94c:	30 d0       	rcall	.+96     	; 0x9ae <__divsf3_pse+0x90>
 94e:	91 50       	subi	r25, 0x01	; 1
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	e6 95       	lsr	r30
 954:	00 1c       	adc	r0, r0
 956:	ca f7       	brpl	.-14     	; 0x94a <__divsf3_pse+0x2c>
 958:	29 d0       	rcall	.+82     	; 0x9ac <__divsf3_pse+0x8e>
 95a:	fe 2f       	mov	r31, r30
 95c:	27 d0       	rcall	.+78     	; 0x9ac <__divsf3_pse+0x8e>
 95e:	66 0f       	add	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	bb 1f       	adc	r27, r27
 966:	26 17       	cp	r18, r22
 968:	37 07       	cpc	r19, r23
 96a:	48 07       	cpc	r20, r24
 96c:	ab 07       	cpc	r26, r27
 96e:	b0 e8       	ldi	r27, 0x80	; 128
 970:	09 f0       	breq	.+2      	; 0x974 <__divsf3_pse+0x56>
 972:	bb 0b       	sbc	r27, r27
 974:	80 2d       	mov	r24, r0
 976:	bf 01       	movw	r22, r30
 978:	ff 27       	eor	r31, r31
 97a:	93 58       	subi	r25, 0x83	; 131
 97c:	5f 4f       	sbci	r21, 0xFF	; 255
 97e:	2a f0       	brmi	.+10     	; 0x98a <__divsf3_pse+0x6c>
 980:	9e 3f       	cpi	r25, 0xFE	; 254
 982:	51 05       	cpc	r21, r1
 984:	68 f0       	brcs	.+26     	; 0x9a0 <__divsf3_pse+0x82>
 986:	b1 cd       	rjmp	.-1182   	; 0x4ea <__fp_inf>
 988:	fb cd       	rjmp	.-1034   	; 0x580 <__fp_szero>
 98a:	5f 3f       	cpi	r21, 0xFF	; 255
 98c:	ec f3       	brlt	.-6      	; 0x988 <__divsf3_pse+0x6a>
 98e:	98 3e       	cpi	r25, 0xE8	; 232
 990:	dc f3       	brlt	.-10     	; 0x988 <__divsf3_pse+0x6a>
 992:	86 95       	lsr	r24
 994:	77 95       	ror	r23
 996:	67 95       	ror	r22
 998:	b7 95       	ror	r27
 99a:	f7 95       	ror	r31
 99c:	9f 5f       	subi	r25, 0xFF	; 255
 99e:	c9 f7       	brne	.-14     	; 0x992 <__divsf3_pse+0x74>
 9a0:	88 0f       	add	r24, r24
 9a2:	91 1d       	adc	r25, r1
 9a4:	96 95       	lsr	r25
 9a6:	87 95       	ror	r24
 9a8:	97 f9       	bld	r25, 7
 9aa:	08 95       	ret
 9ac:	e1 e0       	ldi	r30, 0x01	; 1
 9ae:	66 0f       	add	r22, r22
 9b0:	77 1f       	adc	r23, r23
 9b2:	88 1f       	adc	r24, r24
 9b4:	bb 1f       	adc	r27, r27
 9b6:	62 17       	cp	r22, r18
 9b8:	73 07       	cpc	r23, r19
 9ba:	84 07       	cpc	r24, r20
 9bc:	ba 07       	cpc	r27, r26
 9be:	20 f0       	brcs	.+8      	; 0x9c8 <__divsf3_pse+0xaa>
 9c0:	62 1b       	sub	r22, r18
 9c2:	73 0b       	sbc	r23, r19
 9c4:	84 0b       	sbc	r24, r20
 9c6:	ba 0b       	sbc	r27, r26
 9c8:	ee 1f       	adc	r30, r30
 9ca:	88 f7       	brcc	.-30     	; 0x9ae <__divsf3_pse+0x90>
 9cc:	e0 95       	com	r30
 9ce:	08 95       	ret

000009d0 <__fp_mpack>:
 9d0:	9f 3f       	cpi	r25, 0xFF	; 255
 9d2:	31 f0       	breq	.+12     	; 0x9e0 <__fp_mpack_finite+0xc>

000009d4 <__fp_mpack_finite>:
 9d4:	91 50       	subi	r25, 0x01	; 1
 9d6:	20 f4       	brcc	.+8      	; 0x9e0 <__fp_mpack_finite+0xc>
 9d8:	87 95       	ror	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	88 0f       	add	r24, r24
 9e2:	91 1d       	adc	r25, r1
 9e4:	96 95       	lsr	r25
 9e6:	87 95       	ror	r24
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__itoa_ncheck>:
 9ec:	bb 27       	eor	r27, r27
 9ee:	4a 30       	cpi	r20, 0x0A	; 10
 9f0:	31 f4       	brne	.+12     	; 0x9fe <__itoa_ncheck+0x12>
 9f2:	99 23       	and	r25, r25
 9f4:	22 f4       	brpl	.+8      	; 0x9fe <__itoa_ncheck+0x12>
 9f6:	bd e2       	ldi	r27, 0x2D	; 45
 9f8:	90 95       	com	r25
 9fa:	81 95       	neg	r24
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__utoa_common>

00000a00 <__utoa_ncheck>:
 a00:	bb 27       	eor	r27, r27

00000a02 <__utoa_common>:
 a02:	fb 01       	movw	r30, r22
 a04:	55 27       	eor	r21, r21
 a06:	aa 27       	eor	r26, r26
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	aa 1f       	adc	r26, r26
 a0e:	a4 17       	cp	r26, r20
 a10:	10 f0       	brcs	.+4      	; 0xa16 <__utoa_common+0x14>
 a12:	a4 1b       	sub	r26, r20
 a14:	83 95       	inc	r24
 a16:	50 51       	subi	r21, 0x10	; 16
 a18:	b9 f7       	brne	.-18     	; 0xa08 <__utoa_common+0x6>
 a1a:	a0 5d       	subi	r26, 0xD0	; 208
 a1c:	aa 33       	cpi	r26, 0x3A	; 58
 a1e:	08 f0       	brcs	.+2      	; 0xa22 <__utoa_common+0x20>
 a20:	a9 5d       	subi	r26, 0xD9	; 217
 a22:	a1 93       	st	Z+, r26
 a24:	00 97       	sbiw	r24, 0x00	; 0
 a26:	79 f7       	brne	.-34     	; 0xa06 <__utoa_common+0x4>
 a28:	b1 11       	cpse	r27, r1
 a2a:	b1 93       	st	Z+, r27
 a2c:	11 92       	st	Z+, r1
 a2e:	cb 01       	movw	r24, r22
 a30:	00 c0       	rjmp	.+0      	; 0xa32 <strrev>

00000a32 <strrev>:
 a32:	dc 01       	movw	r26, r24
 a34:	fc 01       	movw	r30, r24
 a36:	67 2f       	mov	r22, r23
 a38:	71 91       	ld	r23, Z+
 a3a:	77 23       	and	r23, r23
 a3c:	e1 f7       	brne	.-8      	; 0xa36 <strrev+0x4>
 a3e:	32 97       	sbiw	r30, 0x02	; 2
 a40:	04 c0       	rjmp	.+8      	; 0xa4a <strrev+0x18>
 a42:	7c 91       	ld	r23, X
 a44:	6d 93       	st	X+, r22
 a46:	70 83       	st	Z, r23
 a48:	62 91       	ld	r22, -Z
 a4a:	ae 17       	cp	r26, r30
 a4c:	bf 07       	cpc	r27, r31
 a4e:	c8 f3       	brcs	.-14     	; 0xa42 <strrev+0x10>
 a50:	08 95       	ret

00000a52 <_exit>:
 a52:	f8 94       	cli

00000a54 <__stop_program>:
 a54:	ff cf       	rjmp	.-2      	; 0xa54 <__stop_program>
