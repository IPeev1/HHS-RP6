
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .data         00000114  00800200  00001d4c  00001de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000638  00800314  00800314  00001ef4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021a3  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ed  00000000  00000000  0000427f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ee  00000000  00000000  0000546c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000604  00000000  00000000  0000655c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b34  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001260  00000000  00000000  00007694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000088f4  2**0
=======
  0 .data         0000017c  00800200  000023a4  00002438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000644  0080037c  0080037c  000025b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002334  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e0  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e4  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00006f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b72  00000000  00000000  000075f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013c3  00000000  00000000  0000816a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000952d  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
       2:	00 00       	nop
       4:	eb c0       	rjmp	.+470    	; 0x1dc <__bad_interrupt>
       6:	00 00       	nop
       8:	e9 c0       	rjmp	.+466    	; 0x1dc <__bad_interrupt>
       a:	00 00       	nop
       c:	e7 c0       	rjmp	.+462    	; 0x1dc <__bad_interrupt>
       e:	00 00       	nop
      10:	e5 c0       	rjmp	.+458    	; 0x1dc <__bad_interrupt>
      12:	00 00       	nop
      14:	e3 c0       	rjmp	.+454    	; 0x1dc <__bad_interrupt>
      16:	00 00       	nop
      18:	e1 c0       	rjmp	.+450    	; 0x1dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	df c0       	rjmp	.+446    	; 0x1dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	dd c0       	rjmp	.+442    	; 0x1dc <__bad_interrupt>
      22:	00 00       	nop
      24:	db c0       	rjmp	.+438    	; 0x1dc <__bad_interrupt>
      26:	00 00       	nop
      28:	d9 c0       	rjmp	.+434    	; 0x1dc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d7 c0       	rjmp	.+430    	; 0x1dc <__bad_interrupt>
      2e:	00 00       	nop
      30:	d5 c0       	rjmp	.+426    	; 0x1dc <__bad_interrupt>
      32:	00 00       	nop
      34:	d3 c0       	rjmp	.+422    	; 0x1dc <__bad_interrupt>
      36:	00 00       	nop
      38:	d1 c0       	rjmp	.+418    	; 0x1dc <__bad_interrupt>
      3a:	00 00       	nop
<<<<<<< Updated upstream
      3c:	f5 c6       	rjmp	.+3562   	; 0xe28 <__vector_15>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
=======
      3c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_15>
      40:	cd c0       	rjmp	.+410    	; 0x1dc <__bad_interrupt>
>>>>>>> Stashed changes
      42:	00 00       	nop
      44:	cb c0       	rjmp	.+406    	; 0x1dc <__bad_interrupt>
      46:	00 00       	nop
      48:	c9 c0       	rjmp	.+402    	; 0x1dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c7 c0       	rjmp	.+398    	; 0x1dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	c5 c0       	rjmp	.+394    	; 0x1dc <__bad_interrupt>
      52:	00 00       	nop
      54:	c3 c0       	rjmp	.+390    	; 0x1dc <__bad_interrupt>
      56:	00 00       	nop
      58:	c1 c0       	rjmp	.+386    	; 0x1dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bf c0       	rjmp	.+382    	; 0x1dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	bd c0       	rjmp	.+378    	; 0x1dc <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c0       	rjmp	.+420    	; 0x20a <__vector_25>
      66:	00 00       	nop
      68:	b9 c0       	rjmp	.+370    	; 0x1dc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b7 c0       	rjmp	.+366    	; 0x1dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	b5 c0       	rjmp	.+362    	; 0x1dc <__bad_interrupt>
      72:	00 00       	nop
      74:	b3 c0       	rjmp	.+358    	; 0x1dc <__bad_interrupt>
      76:	00 00       	nop
      78:	b1 c0       	rjmp	.+354    	; 0x1dc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	af c0       	rjmp	.+350    	; 0x1dc <__bad_interrupt>
      7e:	00 00       	nop
      80:	ad c0       	rjmp	.+346    	; 0x1dc <__bad_interrupt>
      82:	00 00       	nop
      84:	ab c0       	rjmp	.+342    	; 0x1dc <__bad_interrupt>
      86:	00 00       	nop
      88:	a9 c0       	rjmp	.+338    	; 0x1dc <__bad_interrupt>
      8a:	00 00       	nop
<<<<<<< Updated upstream
      8c:	c6 c2       	rjmp	.+1420   	; 0x61a <__vector_35>
=======
      8c:	d3 c2       	rjmp	.+1446   	; 0x634 <__vector_35>
>>>>>>> Stashed changes
      8e:	00 00       	nop
      90:	a5 c0       	rjmp	.+330    	; 0x1dc <__bad_interrupt>
      92:	00 00       	nop
      94:	a3 c0       	rjmp	.+326    	; 0x1dc <__bad_interrupt>
      96:	00 00       	nop
      98:	a1 c0       	rjmp	.+322    	; 0x1dc <__bad_interrupt>
      9a:	00 00       	nop
<<<<<<< Updated upstream
      9c:	c7 c4       	rjmp	.+2446   	; 0xa2c <__vector_39>
=======
      9c:	a1 c6       	rjmp	.+3394   	; 0xde0 <__vector_39>
>>>>>>> Stashed changes
      9e:	00 00       	nop
      a0:	9d c0       	rjmp	.+314    	; 0x1dc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9b c0       	rjmp	.+310    	; 0x1dc <__bad_interrupt>
      a6:	00 00       	nop
<<<<<<< Updated upstream
      a8:	a7 c3       	rjmp	.+1870   	; 0x7f8 <__vector_42>
=======
      a8:	81 c5       	rjmp	.+2818   	; 0xbac <__vector_42>
>>>>>>> Stashed changes
      aa:	00 00       	nop
      ac:	97 c0       	rjmp	.+302    	; 0x1dc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	95 c0       	rjmp	.+298    	; 0x1dc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	93 c0       	rjmp	.+294    	; 0x1dc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	91 c0       	rjmp	.+290    	; 0x1dc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8f c0       	rjmp	.+286    	; 0x1dc <__bad_interrupt>
      be:	00 00       	nop
      c0:	8d c0       	rjmp	.+282    	; 0x1dc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8b c0       	rjmp	.+278    	; 0x1dc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	89 c0       	rjmp	.+274    	; 0x1dc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	87 c0       	rjmp	.+270    	; 0x1dc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	85 c0       	rjmp	.+266    	; 0x1dc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	83 c0       	rjmp	.+262    	; 0x1dc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	81 c0       	rjmp	.+258    	; 0x1dc <__bad_interrupt>
      da:	00 00       	nop
      dc:	7f c0       	rjmp	.+254    	; 0x1dc <__bad_interrupt>
      de:	00 00       	nop
      e0:	7d c0       	rjmp	.+250    	; 0x1dc <__bad_interrupt>
      e2:	00 00       	nop
<<<<<<< Updated upstream
      e4:	1b 02       	muls	r17, r27
      e6:	c4 02       	muls	r28, r20
      e8:	c4 02       	muls	r28, r20
      ea:	28 02       	muls	r18, r24
      ec:	c4 02       	muls	r28, r20
      ee:	c4 02       	muls	r28, r20
      f0:	c4 02       	muls	r28, r20
      f2:	c4 02       	muls	r28, r20
      f4:	c4 02       	muls	r28, r20
      f6:	c4 02       	muls	r28, r20
      f8:	c4 02       	muls	r28, r20
      fa:	c4 02       	muls	r28, r20
      fc:	5a 02       	muls	r21, r26
      fe:	b7 02       	muls	r27, r23
     100:	c4 02       	muls	r28, r20
     102:	9a 02       	muls	r25, r26
     104:	4f 02       	muls	r20, r31
     106:	44 02       	muls	r20, r20
     108:	0e 02       	muls	r16, r30
     10a:	35 02       	muls	r19, r21
     10c:	8d 02       	muls	r24, r29
     10e:	c4 02       	muls	r28, r20
     110:	01 02       	muls	r16, r17
     112:	c4 02       	muls	r28, r20
     114:	c4 02       	muls	r28, r20
     116:	bc 02       	muls	r27, r28
=======
      e4:	1c 02       	muls	r17, r28
      e6:	d1 02       	muls	r29, r17
      e8:	d1 02       	muls	r29, r17
      ea:	29 02       	muls	r18, r25
      ec:	d1 02       	muls	r29, r17
      ee:	d1 02       	muls	r29, r17
      f0:	d1 02       	muls	r29, r17
      f2:	d1 02       	muls	r29, r17
      f4:	d1 02       	muls	r29, r17
      f6:	d1 02       	muls	r29, r17
      f8:	d1 02       	muls	r29, r17
      fa:	d1 02       	muls	r29, r17
      fc:	5b 02       	muls	r21, r27
      fe:	c4 02       	muls	r28, r20
     100:	d1 02       	muls	r29, r17
     102:	b1 02       	muls	r27, r17
     104:	50 02       	muls	r21, r16
     106:	45 02       	muls	r20, r21
     108:	0f 02       	muls	r16, r31
     10a:	36 02       	muls	r19, r22
     10c:	a4 02       	muls	r26, r20
     10e:	d1 02       	muls	r29, r17
     110:	02 02       	muls	r16, r18
     112:	d1 02       	muls	r29, r17
     114:	d1 02       	muls	r29, r17
     116:	c9 02       	muls	r28, r25
>>>>>>> Stashed changes
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
<<<<<<< Updated upstream
     190:	01 c4       	rjmp	.+2050   	; 0x994 <arduinoDataInterpreter+0xe>
=======
     190:	01 c4       	rjmp	.+2050   	; 0x994 <hardcoreParcour+0x21e>
>>>>>>> Stashed changes
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
<<<<<<< Updated upstream
     1b0:	ec e4       	ldi	r30, 0x4C	; 76
     1b2:	fd e1       	ldi	r31, 0x1D	; 29
=======
     1b0:	e4 ea       	ldi	r30, 0xA4	; 164
     1b2:	f3 e2       	ldi	r31, 0x23	; 35
>>>>>>> Stashed changes
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	ac 37       	cpi	r26, 0x7C	; 124
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	29 e0       	ldi	r18, 0x09	; 9
     1c6:	ac e7       	ldi	r26, 0x7C	; 124
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
<<<<<<< Updated upstream
     1ce:	ac 34       	cpi	r26, 0x4C	; 76
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	fe d6       	rcall	.+3580   	; 0xfd2 <main>
     1d6:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <_exit>
=======
     1ce:	a0 3c       	cpi	r26, 0xC0	; 192
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 c6 09 	call	0x138c	; 0x138c <main>
     1d8:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <_exit>
>>>>>>> Stashed changes

000001dc <__bad_interrupt>:
     1dc:	11 cf       	rjmp	.-478    	; 0x0 <__vectors>

000001de <init_USART>:
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
}
<<<<<<< Updated upstream
     1dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e0:	e1 ec       	ldi	r30, 0xC1	; 193
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 69       	ori	r24, 0x90	; 144
     1e8:	80 83       	st	Z, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 60       	ori	r24, 0x08	; 8
     1ee:	80 83       	st	Z, r24
     1f0:	e2 ec       	ldi	r30, 0xC2	; 194
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	86 60       	ori	r24, 0x06	; 6
     1f8:	80 83       	st	Z, r24
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     206:	08 95       	ret

00000208 <__vector_25>:
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
     23e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     242:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTreceived>
     246:	90 ed       	ldi	r25, 0xD0	; 208
     248:	98 0f       	add	r25, r24
     24a:	9a 30       	cpi	r25, 0x0A	; 10
     24c:	10 f0       	brcs	.+4      	; 0x252 <__vector_25+0x4a>
     24e:	80 32       	cpi	r24, 0x20	; 32
     250:	99 f4       	brne	.+38     	; 0x278 <__vector_25+0x70>
     252:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <USARTinputPos>
     256:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <USARTinputPos+0x1>
     25a:	2f 3f       	cpi	r18, 0xFF	; 255
     25c:	31 05       	cpc	r19, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <__vector_25+0x5a>
     260:	a2 c1       	rjmp	.+836    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <USARTinputPos+0x1>
     26a:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <USARTinputPos>
     26e:	f9 01       	movw	r30, r18
     270:	e5 56       	subi	r30, 0x65	; 101
     272:	fc 4f       	sbci	r31, 0xFC	; 252
     274:	80 83       	st	Z, r24
     276:	97 c1       	rjmp	.+814    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     278:	9f e9       	ldi	r25, 0x9F	; 159
     27a:	98 0f       	add	r25, r24
     27c:	9a 31       	cpi	r25, 0x1A	; 26
     27e:	28 f4       	brcc	.+10     	; 0x28a <__vector_25+0x82>
     280:	82 36       	cpi	r24, 0x62	; 98
     282:	29 f0       	breq	.+10     	; 0x28e <__vector_25+0x86>
     284:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     288:	8e c1       	rjmp	.+796    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     28a:	82 36       	cpi	r24, 0x62	; 98
     28c:	51 f4       	brne	.+20     	; 0x2a2 <__vector_25+0x9a>
     28e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     292:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     29c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     2a0:	82 c1       	rjmp	.+772    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     2a2:	8d 30       	cpi	r24, 0x0D	; 13
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_25+0xa0>
     2a6:	7f c1       	rjmp	.+766    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     2a8:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <USARTinputPos>
     2ac:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USARTinputPos+0x1>
     2b0:	11 23       	and	r17, r17
     2b2:	0c f4       	brge	.+2      	; 0x2b6 <__vector_25+0xae>
     2b4:	92 c0       	rjmp	.+292    	; 0x3da <__vector_25+0x1d2>
     2b6:	e4 e3       	ldi	r30, 0x34	; 52
     2b8:	f3 e0       	ldi	r31, 0x03	; 3
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	10 82       	st	Z, r1
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	15 82       	std	Z+5, r1	; 0x05
     2c4:	14 82       	std	Z+4, r1	; 0x04
     2c6:	ee e2       	ldi	r30, 0x2E	; 46
     2c8:	f3 e0       	ldi	r31, 0x03	; 3
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	9f ef       	ldi	r25, 0xFF	; 255
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	80 83       	st	Z, r24
     2d2:	93 83       	std	Z+3, r25	; 0x03
     2d4:	82 83       	std	Z+2, r24	; 0x02
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <numberStart.1995+0x1>
     2de:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <numberStart.1995>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	e5 56       	subi	r30, 0x65	; 101
     2f0:	fc 4f       	sbci	r31, 0xFC	; 252
     2f2:	30 81       	ld	r19, Z
     2f4:	30 32       	cpi	r19, 0x20	; 32
     2f6:	79 f4       	brne	.+30     	; 0x316 <__vector_25+0x10e>
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	fa 01       	movw	r30, r20
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	e8 5d       	subi	r30, 0xD8	; 216
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	43 30       	cpi	r20, 0x03	; 3
     30e:	51 05       	cpc	r21, r1
     310:	0c f0       	brlt	.+2      	; 0x314 <__vector_25+0x10c>
     312:	43 c1       	rjmp	.+646    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     314:	0a c0       	rjmp	.+20     	; 0x32a <__vector_25+0x122>
     316:	fa 01       	movw	r30, r20
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	e2 5d       	subi	r30, 0xD2	; 210
     31e:	fc 4f       	sbci	r31, 0xFC	; 252
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	80 83       	st	Z, r24
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	82 2f       	mov	r24, r18
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 17       	cp	r16, r24
     332:	19 07       	cpc	r17, r25
     334:	dc f6       	brge	.-74     	; 0x2ec <__vector_25+0xe4>
     336:	31 c1       	rjmp	.+610    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     338:	f9 01       	movw	r30, r18
     33a:	e5 56       	subi	r30, 0x65	; 101
     33c:	fc 4f       	sbci	r31, 0xFC	; 252
     33e:	c0 80       	ld	r12, Z
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	c8 12       	cpse	r12, r24
     344:	09 c0       	rjmp	.+18     	; 0x358 <__vector_25+0x150>
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	e8 1a       	sub	r14, r24
     34a:	f8 0a       	sbc	r15, r24
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	e8 16       	cp	r14, r24
     350:	f1 04       	cpc	r15, r1
     352:	0c f0       	brlt	.+2      	; 0x356 <__vector_25+0x14e>
     354:	42 c0       	rjmp	.+132    	; 0x3da <__vector_25+0x1d2>
     356:	3a c0       	rjmp	.+116    	; 0x3cc <__vector_25+0x1c4>
     358:	e7 01       	movw	r28, r14
     35a:	cc 0f       	add	r28, r28
     35c:	dd 1f       	adc	r29, r29
     35e:	de 01       	movw	r26, r28
     360:	a2 5d       	subi	r26, 0xD2	; 210
     362:	bc 4f       	sbci	r27, 0xFC	; 252
     364:	fe 01       	movw	r30, r28
     366:	e8 5d       	subi	r30, 0xD8	; 216
     368:	fc 4f       	sbci	r31, 0xFC	; 252
     36a:	6d 91       	ld	r22, X+
     36c:	7c 91       	ld	r23, X
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	68 0f       	add	r22, r24
     374:	79 1f       	adc	r23, r25
     376:	62 1b       	sub	r22, r18
     378:	73 0b       	sbc	r23, r19
     37a:	07 2e       	mov	r0, r23
     37c:	00 0c       	add	r0, r0
     37e:	88 0b       	sbc	r24, r24
     380:	99 0b       	sbc	r25, r25
     382:	0e 94 b6 0a 	call	0x156c	; 0x156c <__floatsisf>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 e4       	ldi	r25, 0x41	; 65
     392:	0e 94 42 0b 	call	0x1684	; 0x1684 <pow>
     396:	cc 5c       	subi	r28, 0xCC	; 204
     398:	dc 4f       	sbci	r29, 0xFC	; 252
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	0e 94 1f 0a 	call	0x143e	; 0x143e <__addsf3>
     3a6:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fixsfsi>
     3aa:	20 ed       	ldi	r18, 0xD0	; 208
     3ac:	2c 0d       	add	r18, r12
     3ae:	42 2f       	mov	r20, r18
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	46 9f       	mul	r20, r22
     3b4:	90 01       	movw	r18, r0
     3b6:	47 9f       	mul	r20, r23
     3b8:	30 0d       	add	r19, r0
     3ba:	56 9f       	mul	r21, r22
     3bc:	30 0d       	add	r19, r0
     3be:	11 24       	eor	r1, r1
     3c0:	88 81       	ld	r24, Y
     3c2:	99 81       	ldd	r25, Y+1	; 0x01
     3c4:	82 0f       	add	r24, r18
     3c6:	93 1f       	adc	r25, r19
     3c8:	99 83       	std	Y+1, r25	; 0x01
     3ca:	88 83       	st	Y, r24
     3cc:	d3 94       	inc	r13
     3ce:	2d 2d       	mov	r18, r13
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	02 17       	cp	r16, r18
     3d4:	13 07       	cpc	r17, r19
     3d6:	0c f0       	brlt	.+2      	; 0x3da <__vector_25+0x1d2>
     3d8:	af cf       	rjmp	.-162    	; 0x338 <__vector_25+0x130>
     3da:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     3de:	ee 23       	and	r30, r30
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <__vector_25+0x1dc>
     3e2:	d2 c0       	rjmp	.+420    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     3e4:	8e 2f       	mov	r24, r30
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	fc 01       	movw	r30, r24
     3ea:	e1 56       	subi	r30, 0x61	; 97
     3ec:	f1 09       	sbc	r31, r1
     3ee:	ea 31       	cpi	r30, 0x1A	; 26
     3f0:	f1 05       	cpc	r31, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__vector_25+0x1ee>
     3f4:	c9 c0       	rjmp	.+402    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     3f6:	88 27       	eor	r24, r24
     3f8:	ee 58       	subi	r30, 0x8E	; 142
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	8f 4f       	sbci	r24, 0xFF	; 255
     3fe:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__tablejump2__>
     402:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     406:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <rp6Data+0x2>
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	19 f4       	brne	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40e:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <rp6Data+0x2>
     412:	ba c0       	rjmp	.+372    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <rp6Data+0x2>
     41a:	b6 c0       	rjmp	.+364    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     41c:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     420:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <rp6Data+0x2>
     424:	8f 3f       	cpi	r24, 0xFF	; 255
     426:	19 f4       	brne	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     428:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <rp6Data+0x2>
     42c:	ad c0       	rjmp	.+346    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <rp6Data+0x2>
     434:	a9 c0       	rjmp	.+338    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     436:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     43a:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     43e:	8f 3f       	cpi	r24, 0xFF	; 255
     440:	19 f4       	brne	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     442:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <rp6Data+0x3>
     446:	a0 c0       	rjmp	.+320    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <rp6Data+0x3>
     44e:	9c c0       	rjmp	.+312    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     450:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     454:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	19 f4       	brne	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45c:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <rp6Data+0x3>
     460:	93 c0       	rjmp	.+294    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <rp6Data+0x3>
     468:	8f c0       	rjmp	.+286    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     46a:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     46e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1993>
     472:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1993+0x1>
     476:	85 36       	cpi	r24, 0x65	; 101
     478:	91 05       	cpc	r25, r1
     47a:	08 f0       	brcs	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47c:	85 c0       	rjmp	.+266    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     47e:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <rp6Data+0x1>
     482:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <rp6Data>
     486:	80 c0       	rjmp	.+256    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     488:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     48c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1993>
     490:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1993+0x1>
     494:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <rp6Data+0x7>
     498:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <rp6Data+0x6>
     49c:	75 c0       	rjmp	.+234    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     49e:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     4a2:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1993>
     4a6:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1993+0x1>
     4aa:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <rp6Data+0x5>
     4ae:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <rp6Data+0x4>
     4b2:	6a c0       	rjmp	.+212    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     4b4:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <programmedAmount>
     4b8:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <programmedAmount+0x1>
     4bc:	9c 01       	movw	r18, r24
     4be:	2f 5f       	subi	r18, 0xFF	; 255
     4c0:	3f 4f       	sbci	r19, 0xFF	; 255
     4c2:	30 93 3f 03 	sts	0x033F, r19	; 0x80033f <programmedAmount+0x1>
     4c6:	20 93 3e 03 	sts	0x033E, r18	; 0x80033e <programmedAmount>
     4ca:	9c 01       	movw	r18, r24
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	fc 01       	movw	r30, r24
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	e4 56       	subi	r30, 0x64	; 100
     4dc:	fb 4f       	sbci	r31, 0xFB	; 251
     4de:	a4 e3       	ldi	r26, 0x34	; 52
     4e0:	b3 e0       	ldi	r27, 0x03	; 3
     4e2:	2d 91       	ld	r18, X+
     4e4:	3c 91       	ld	r19, X
     4e6:	11 97       	sbiw	r26, 0x01	; 1
     4e8:	31 83       	std	Z+1, r19	; 0x01
     4ea:	20 83       	st	Z, r18
     4ec:	fc 01       	movw	r30, r24
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	e2 56       	subi	r30, 0x62	; 98
     4f4:	fb 4f       	sbci	r31, 0xFB	; 251
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	2d 91       	ld	r18, X+
     4fa:	3c 91       	ld	r19, X
     4fc:	13 97       	sbiw	r26, 0x03	; 3
     4fe:	31 83       	std	Z+1, r19	; 0x01
     500:	20 83       	st	Z, r18
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	fc 01       	movw	r30, r24
     508:	e0 56       	subi	r30, 0x60	; 96
     50a:	fb 4f       	sbci	r31, 0xFB	; 251
     50c:	14 96       	adiw	r26, 0x04	; 4
     50e:	8d 91       	ld	r24, X+
     510:	9c 91       	ld	r25, X
     512:	15 97       	sbiw	r26, 0x05	; 5
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	37 c0       	rjmp	.+110    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     51a:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <programmedAmount>
     51e:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <programmedAmount+0x1>
     522:	18 16       	cp	r1, r24
     524:	19 06       	cpc	r1, r25
     526:	84 f5       	brge	.+96     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <programmedAmount+0x1>
     52e:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <programmedAmount>
     532:	2a c0       	rjmp	.+84     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     534:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <number.1993>
     538:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <number.1993+0x1>
     53c:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <programmedAmount>
     540:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <programmedAmount+0x1>
     544:	82 17       	cp	r24, r18
     546:	93 07       	cpc	r25, r19
     548:	f8 f4       	brcc	.+62     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     54a:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <currentParcourLine+0x1>
     54e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <currentParcourLine>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <runParcour>
     558:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <rp6Data+0xf>
     55c:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <rp6Data+0x10>
     560:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <startDegrees+0x1>
     564:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <startDegrees>
     568:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <parcourLineState>
     56c:	0d c0       	rjmp	.+26     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     56e:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <programmedAmount+0x1>
     572:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <programmedAmount>
     576:	08 c0       	rjmp	.+16     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     578:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <runParcour>
     57c:	e4 e8       	ldi	r30, 0x84	; 132
     57e:	f3 e0       	ldi	r31, 0x03	; 3
     580:	11 82       	std	Z+1, r1	; 0x01
     582:	10 82       	st	Z, r1
     584:	13 82       	std	Z+3, r1	; 0x03
     586:	12 82       	std	Z+2, r1	; 0x02
     588:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     58c:	8f ef       	ldi	r24, 0xFF	; 255
     58e:	9f ef       	ldi	r25, 0xFF	; 255
     590:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     594:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	d1 2c       	mov	r13, r1
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
     5a4:	c9 ce       	rjmp	.-622    	; 0x338 <__vector_25+0x130>
     5a6:	ff 91       	pop	r31
     5a8:	ef 91       	pop	r30
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	0f 90       	pop	r0
     5d0:	0b be       	out	0x3b, r0	; 59
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	1f 90       	pop	r1
     5da:	18 95       	reti

000005dc <init_micros>:
     5dc:	e1 e9       	ldi	r30, 0x91	; 145
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	80 83       	st	Z, r24
     5e6:	e1 e7       	ldi	r30, 0x71	; 113
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	81 60       	ori	r24, 0x01	; 1
     5ee:	80 83       	st	Z, r24
     5f0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     5f4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     5f8:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <t3TotalOverflow>
     5fc:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <t3TotalOverflow+0x1>
     600:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <t3TotalOverflow+0x2>
     604:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <t3TotalOverflow+0x3>
     608:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <t3TotalOverflow+0x4>
     60c:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <t3TotalOverflow+0x5>
     610:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <t3TotalOverflow+0x6>
     614:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <t3TotalOverflow+0x7>
     618:	08 95       	ret

0000061a <__vector_35>:
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	2f 93       	push	r18
     626:	3f 93       	push	r19
     628:	4f 93       	push	r20
     62a:	5f 93       	push	r21
     62c:	6f 93       	push	r22
     62e:	7f 93       	push	r23
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	af 93       	push	r26
     636:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <t3TotalOverflow>
     63a:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <t3TotalOverflow+0x1>
     63e:	40 91 60 03 	lds	r20, 0x0360	; 0x800360 <t3TotalOverflow+0x2>
     642:	50 91 61 03 	lds	r21, 0x0361	; 0x800361 <t3TotalOverflow+0x3>
     646:	60 91 62 03 	lds	r22, 0x0362	; 0x800362 <t3TotalOverflow+0x4>
     64a:	70 91 63 03 	lds	r23, 0x0363	; 0x800363 <t3TotalOverflow+0x5>
     64e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <t3TotalOverflow+0x6>
     652:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <t3TotalOverflow+0x7>
     656:	a1 e0       	ldi	r26, 0x01	; 1
     658:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__adddi3_s8>
     65c:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <t3TotalOverflow>
     660:	30 93 5f 03 	sts	0x035F, r19	; 0x80035f <t3TotalOverflow+0x1>
     664:	40 93 60 03 	sts	0x0360, r20	; 0x800360 <t3TotalOverflow+0x2>
     668:	50 93 61 03 	sts	0x0361, r21	; 0x800361 <t3TotalOverflow+0x3>
     66c:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <t3TotalOverflow+0x4>
     670:	70 93 63 03 	sts	0x0363, r23	; 0x800363 <t3TotalOverflow+0x5>
     674:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <t3TotalOverflow+0x6>
     678:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <t3TotalOverflow+0x7>
     67c:	af 91       	pop	r26
     67e:	9f 91       	pop	r25
     680:	8f 91       	pop	r24
     682:	7f 91       	pop	r23
     684:	6f 91       	pop	r22
     686:	5f 91       	pop	r21
     688:	4f 91       	pop	r20
     68a:	3f 91       	pop	r19
     68c:	2f 91       	pop	r18
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <micros>:
     698:	4f 92       	push	r4
     69a:	5f 92       	push	r5
     69c:	6f 92       	push	r6
     69e:	7f 92       	push	r7
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     6b8:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     6bc:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <t3TotalOverflow>
     6c0:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <t3TotalOverflow+0x1>
     6c4:	40 91 60 03 	lds	r20, 0x0360	; 0x800360 <t3TotalOverflow+0x2>
     6c8:	50 91 61 03 	lds	r21, 0x0361	; 0x800361 <t3TotalOverflow+0x3>
     6cc:	60 91 62 03 	lds	r22, 0x0362	; 0x800362 <t3TotalOverflow+0x4>
     6d0:	70 91 63 03 	lds	r23, 0x0363	; 0x800363 <t3TotalOverflow+0x5>
     6d4:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <t3TotalOverflow+0x6>
     6d8:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <t3TotalOverflow+0x7>
     6dc:	98 2c       	mov	r9, r8
     6de:	88 24       	eor	r8, r8
     6e0:	99 0c       	add	r9, r9
     6e2:	99 0c       	add	r9, r9
     6e4:	99 0c       	add	r9, r9
     6e6:	99 0c       	add	r9, r9
     6e8:	09 2c       	mov	r0, r9
     6ea:	00 0c       	add	r0, r0
     6ec:	aa 08       	sbc	r10, r10
     6ee:	bb 08       	sbc	r11, r11
     6f0:	bb 20       	and	r11, r11
     6f2:	2c f4       	brge	.+10     	; 0x6fe <micros+0x66>
     6f4:	ef ef       	ldi	r30, 0xFF	; 255
     6f6:	8e 0e       	add	r8, r30
     6f8:	9e 1e       	adc	r9, r30
     6fa:	a1 1c       	adc	r10, r1
     6fc:	b1 1c       	adc	r11, r1
     6fe:	25 01       	movw	r4, r10
     700:	77 24       	eor	r7, r7
     702:	57 fc       	sbrc	r5, 7
     704:	70 94       	com	r7
     706:	67 2c       	mov	r6, r7
     708:	bb 0c       	add	r11, r11
     70a:	88 08       	sbc	r8, r8
     70c:	98 2c       	mov	r9, r8
     70e:	54 01       	movw	r10, r8
     710:	0c e0       	ldi	r16, 0x0C	; 12
     712:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ashldi3>
     716:	f2 2f       	mov	r31, r18
     718:	e3 2f       	mov	r30, r19
     71a:	c4 2e       	mov	r12, r20
     71c:	d5 2e       	mov	r13, r21
     71e:	e6 2e       	mov	r14, r22
     720:	f7 2e       	mov	r15, r23
     722:	08 2f       	mov	r16, r24
     724:	19 2f       	mov	r17, r25
     726:	24 2d       	mov	r18, r4
     728:	35 2d       	mov	r19, r5
     72a:	46 2d       	mov	r20, r6
     72c:	57 2d       	mov	r21, r7
     72e:	68 2d       	mov	r22, r8
     730:	78 2d       	mov	r23, r8
     732:	88 2d       	mov	r24, r8
     734:	98 2d       	mov	r25, r8
     736:	af 2e       	mov	r10, r31
     738:	be 2e       	mov	r11, r30
     73a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__adddi3>
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	bf 90       	pop	r11
     74c:	af 90       	pop	r10
     74e:	9f 90       	pop	r9
     750:	8f 90       	pop	r8
     752:	7f 90       	pop	r7
     754:	6f 90       	pop	r6
     756:	5f 90       	pop	r5
     758:	4f 90       	pop	r4
     75a:	08 95       	ret

0000075c <init_TWI>:
     75c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     760:	88 e4       	ldi	r24, 0x48	; 72
     762:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     766:	85 e0       	ldi	r24, 0x05	; 5
     768:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     76c:	08 95       	ret

0000076e <init_TWI_Timer2>:
     76e:	e1 eb       	ldi	r30, 0xB1	; 177
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	87 60       	ori	r24, 0x07	; 7
     776:	80 83       	st	Z, r24
     778:	e0 e7       	ldi	r30, 0x70	; 112
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	81 60       	ori	r24, 0x01	; 1
     780:	80 83       	st	Z, r24
     782:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     786:	08 95       	ret

00000788 <init_PWM_Timer4>:
     788:	88 e0       	ldi	r24, 0x08	; 8
     78a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     78e:	a0 ea       	ldi	r26, 0xA0	; 160
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	1c 92       	st	X, r1
     794:	e1 ea       	ldi	r30, 0xA1	; 161
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	10 82       	st	Z, r1
     79a:	82 e8       	ldi	r24, 0x82	; 130
     79c:	8c 93       	st	X, r24
     79e:	81 e1       	ldi	r24, 0x11	; 17
     7a0:	80 83       	st	Z, r24
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	9f e1       	ldi	r25, 0x1F	; 31
     7a6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     7aa:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     7ae:	08 95       	ret

000007b0 <init_arduinoData>:
     7b0:	e6 e6       	ldi	r30, 0x66	; 102
     7b2:	f3 e0       	ldi	r31, 0x03	; 3
     7b4:	11 82       	std	Z+1, r1	; 0x01
     7b6:	10 82       	st	Z, r1
     7b8:	13 82       	std	Z+3, r1	; 0x03
     7ba:	12 82       	std	Z+2, r1	; 0x02
     7bc:	08 95       	ret

000007be <init_rp6Data>:
     7be:	e4 e8       	ldi	r30, 0x84	; 132
     7c0:	f3 e0       	ldi	r31, 0x03	; 3
     7c2:	11 82       	std	Z+1, r1	; 0x01
     7c4:	10 82       	st	Z, r1
     7c6:	12 82       	std	Z+2, r1	; 0x02
     7c8:	13 82       	std	Z+3, r1	; 0x03
     7ca:	84 e2       	ldi	r24, 0x24	; 36
     7cc:	93 e1       	ldi	r25, 0x13	; 19
     7ce:	95 83       	std	Z+5, r25	; 0x05
     7d0:	84 83       	std	Z+4, r24	; 0x04
     7d2:	88 e2       	ldi	r24, 0x28	; 40
     7d4:	93 e2       	ldi	r25, 0x23	; 35
     7d6:	97 83       	std	Z+7, r25	; 0x07
     7d8:	86 83       	std	Z+6, r24	; 0x06
     7da:	88 e8       	ldi	r24, 0x88	; 136
     7dc:	93 e1       	ldi	r25, 0x13	; 19
     7de:	91 87       	std	Z+9, r25	; 0x09
     7e0:	80 87       	std	Z+8, r24	; 0x08
     7e2:	88 ec       	ldi	r24, 0xC8	; 200
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	82 87       	std	Z+10, r24	; 0x0a
     7ec:	93 87       	std	Z+11, r25	; 0x0b
     7ee:	a4 87       	std	Z+12, r26	; 0x0c
     7f0:	b5 87       	std	Z+13, r27	; 0x0d
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	86 87       	std	Z+14, r24	; 0x0e
     7f6:	08 95       	ret

000007f8 <__vector_42>:
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	0b b6       	in	r0, 0x3b	; 59
     804:	0f 92       	push	r0
     806:	8f 92       	push	r8
     808:	9f 92       	push	r9
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
     836:	30 df       	rcall	.-416    	; 0x698 <micros>
     838:	a2 2e       	mov	r10, r18
     83a:	b3 2e       	mov	r11, r19
     83c:	c4 2e       	mov	r12, r20
     83e:	d5 2e       	mov	r13, r21
     840:	e6 2e       	mov	r14, r22
     842:	f7 2e       	mov	r15, r23
     844:	08 2f       	mov	r16, r24
     846:	19 2f       	mov	r17, r25
     848:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <rp6Data+0x2>
     84c:	8f 3f       	cpi	r24, 0xFF	; 255
     84e:	09 f0       	breq	.+2      	; 0x852 <__vector_42+0x5a>
     850:	46 c0       	rjmp	.+140    	; 0x8de <__vector_42+0xe6>
     852:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data>
     856:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <rp6Data+0x1>
     85a:	89 2b       	or	r24, r25
     85c:	09 f4       	brne	.+2      	; 0x860 <__vector_42+0x68>
     85e:	3f c0       	rjmp	.+126    	; 0x8de <__vector_42+0xe6>
     860:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <microsPassed.2075>
     864:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <microsPassed.2075+0x1>
     868:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <microsPassed.2075+0x2>
     86c:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <microsPassed.2075+0x3>
     870:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <microsPassed.2075+0x4>
     874:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <microsPassed.2075+0x5>
     878:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <microsPassed.2075+0x6>
     87c:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <microsPassed.2075+0x7>
     880:	23 3f       	cpi	r18, 0xF3	; 243
     882:	31 40       	sbci	r19, 0x01	; 1
     884:	41 05       	cpc	r20, r1
     886:	51 05       	cpc	r21, r1
     888:	61 05       	cpc	r22, r1
     88a:	71 05       	cpc	r23, r1
     88c:	81 05       	cpc	r24, r1
     88e:	91 05       	cpc	r25, r1
     890:	31 f1       	breq	.+76     	; 0x8de <__vector_42+0xe6>
     892:	28 f1       	brcs	.+74     	; 0x8de <__vector_42+0xe6>
     894:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <microsPassed.2075>
     898:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <microsPassed.2075+0x1>
     89c:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <microsPassed.2075+0x2>
     8a0:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <microsPassed.2075+0x3>
     8a4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <microsPassed.2075+0x4>
     8a8:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <microsPassed.2075+0x5>
     8ac:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <microsPassed.2075+0x6>
     8b0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <microsPassed.2075+0x7>
     8b4:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     8b8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     8bc:	89 2b       	or	r24, r25
     8be:	59 f4       	brne	.+22     	; 0x8d6 <__vector_42+0xde>
     8c0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     8c4:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     8c8:	96 95       	lsr	r25
     8ca:	87 95       	ror	r24
     8cc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     8d0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <__vector_42+0xe6>
     8d6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     8da:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     8de:	dc de       	rcall	.-584    	; 0x698 <micros>
     8e0:	82 2e       	mov	r8, r18
     8e2:	93 2e       	mov	r9, r19
     8e4:	d4 2f       	mov	r29, r20
     8e6:	c5 2f       	mov	r28, r21
     8e8:	b6 2f       	mov	r27, r22
     8ea:	a7 2f       	mov	r26, r23
     8ec:	f8 2f       	mov	r31, r24
     8ee:	e9 2f       	mov	r30, r25
     8f0:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <microsPassed.2075>
     8f4:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <microsPassed.2075+0x1>
     8f8:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <microsPassed.2075+0x2>
     8fc:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <microsPassed.2075+0x3>
     900:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <microsPassed.2075+0x4>
     904:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <microsPassed.2075+0x5>
     908:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <microsPassed.2075+0x6>
     90c:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <microsPassed.2075+0x7>
     910:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__subdi3>
     914:	a8 2c       	mov	r10, r8
     916:	b9 2c       	mov	r11, r9
     918:	cd 2e       	mov	r12, r29
     91a:	dc 2e       	mov	r13, r28
     91c:	eb 2e       	mov	r14, r27
     91e:	fa 2e       	mov	r15, r26
     920:	0f 2f       	mov	r16, r31
     922:	1e 2f       	mov	r17, r30
     924:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__adddi3>
     928:	20 93 18 03 	sts	0x0318, r18	; 0x800318 <microsPassed.2075>
     92c:	30 93 19 03 	sts	0x0319, r19	; 0x800319 <microsPassed.2075+0x1>
     930:	40 93 1a 03 	sts	0x031A, r20	; 0x80031a <microsPassed.2075+0x2>
     934:	50 93 1b 03 	sts	0x031B, r21	; 0x80031b <microsPassed.2075+0x3>
     938:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <microsPassed.2075+0x4>
     93c:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <microsPassed.2075+0x5>
     940:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <microsPassed.2075+0x6>
     944:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <microsPassed.2075+0x7>
     948:	ff 91       	pop	r31
     94a:	ef 91       	pop	r30
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	9f 90       	pop	r9
     976:	8f 90       	pop	r8
     978:	0f 90       	pop	r0
     97a:	0b be       	out	0x3b, r0	; 59
     97c:	0f 90       	pop	r0
     97e:	0f be       	out	0x3f, r0	; 63
     980:	0f 90       	pop	r0
     982:	1f 90       	pop	r1
     984:	18 95       	reti

00000986 <arduinoDataInterpreter>:
     986:	a6 e6       	ldi	r26, 0x66	; 102
     988:	b3 e0       	ldi	r27, 0x03	; 3
     98a:	ea e4       	ldi	r30, 0x4A	; 74
     98c:	f3 e0       	ldi	r31, 0x03	; 3
     98e:	81 81       	ldd	r24, Z+1	; 0x01
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	98 2f       	mov	r25, r24
     994:	88 27       	eor	r24, r24
     996:	22 81       	ldd	r18, Z+2	; 0x02
     998:	82 0f       	add	r24, r18
     99a:	91 1d       	adc	r25, r1
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	9c 93       	st	X, r25
     9a0:	8e 93       	st	-X, r24
     9a2:	83 81       	ldd	r24, Z+3	; 0x03
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	98 2f       	mov	r25, r24
     9a8:	88 27       	eor	r24, r24
     9aa:	24 81       	ldd	r18, Z+4	; 0x04
     9ac:	82 0f       	add	r24, r18
     9ae:	91 1d       	adc	r25, r1
     9b0:	13 96       	adiw	r26, 0x03	; 3
     9b2:	9c 93       	st	X, r25
     9b4:	8e 93       	st	-X, r24
     9b6:	12 97       	sbiw	r26, 0x02	; 2
     9b8:	85 81       	ldd	r24, Z+5	; 0x05
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	98 2f       	mov	r25, r24
     9be:	88 27       	eor	r24, r24
     9c0:	26 81       	ldd	r18, Z+6	; 0x06
     9c2:	82 0f       	add	r24, r18
     9c4:	91 1d       	adc	r25, r1
     9c6:	15 96       	adiw	r26, 0x05	; 5
     9c8:	9c 93       	st	X, r25
     9ca:	8e 93       	st	-X, r24
     9cc:	14 97       	sbiw	r26, 0x04	; 4
     9ce:	87 81       	ldd	r24, Z+7	; 0x07
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	98 2f       	mov	r25, r24
     9d4:	88 27       	eor	r24, r24
     9d6:	20 85       	ldd	r18, Z+8	; 0x08
     9d8:	82 0f       	add	r24, r18
     9da:	91 1d       	adc	r25, r1
     9dc:	17 96       	adiw	r26, 0x07	; 7
     9de:	9c 93       	st	X, r25
     9e0:	8e 93       	st	-X, r24
     9e2:	16 97       	sbiw	r26, 0x06	; 6
     9e4:	81 85       	ldd	r24, Z+9	; 0x09
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	98 2f       	mov	r25, r24
     9ea:	88 27       	eor	r24, r24
     9ec:	22 85       	ldd	r18, Z+10	; 0x0a
     9ee:	82 0f       	add	r24, r18
     9f0:	91 1d       	adc	r25, r1
     9f2:	19 96       	adiw	r26, 0x09	; 9
     9f4:	9c 93       	st	X, r25
     9f6:	8e 93       	st	-X, r24
     9f8:	18 97       	sbiw	r26, 0x08	; 8
     9fa:	08 95       	ret

000009fc <I2C_receiveInterpreter>:
     9fc:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <receiveDataTWI>
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	09 f4       	brne	.+2      	; 0xa06 <I2C_receiveInterpreter+0xa>
     a04:	c0 cf       	rjmp	.-128    	; 0x986 <arduinoDataInterpreter>
     a06:	08 95       	ret

00000a08 <clearSendData>:
     a08:	e0 e7       	ldi	r30, 0x70	; 112
     a0a:	f3 e0       	ldi	r31, 0x03	; 3
     a0c:	84 e8       	ldi	r24, 0x84	; 132
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	11 92       	st	Z+, r1
     a12:	e8 17       	cp	r30, r24
     a14:	f9 07       	cpc	r31, r25
     a16:	e1 f7       	brne	.-8      	; 0xa10 <clearSendData+0x8>
     a18:	08 95       	ret

00000a1a <clearReceiveData>:
     a1a:	ea e4       	ldi	r30, 0x4A	; 74
     a1c:	f3 e0       	ldi	r31, 0x03	; 3
     a1e:	8e e5       	ldi	r24, 0x5E	; 94
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	11 92       	st	Z+, r1
     a24:	e8 17       	cp	r30, r24
     a26:	f9 07       	cpc	r31, r25
     a28:	e1 f7       	brne	.-8      	; 0xa22 <clearReceiveData+0x8>
     a2a:	08 95       	ret

00000a2c <__vector_39>:
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	0b b6       	in	r0, 0x3b	; 59
     a38:	0f 92       	push	r0
     a3a:	af 92       	push	r10
     a3c:	bf 92       	push	r11
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	2f 93       	push	r18
     a4c:	3f 93       	push	r19
     a4e:	4f 93       	push	r20
     a50:	5f 93       	push	r21
     a52:	6f 93       	push	r22
     a54:	7f 93       	push	r23
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
     a5a:	af 93       	push	r26
     a5c:	bf 93       	push	r27
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
     a66:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     a6a:	80 35       	cpi	r24, 0x50	; 80
     a6c:	c1 f0       	breq	.+48     	; 0xa9e <__vector_39+0x72>
     a6e:	88 35       	cpi	r24, 0x58	; 88
     a70:	a9 f1       	breq	.+106    	; 0xadc <__vector_39+0xb0>
     a72:	80 34       	cpi	r24, 0x40	; 64
     a74:	09 f0       	breq	.+2      	; 0xa78 <__vector_39+0x4c>
     a76:	89 c0       	rjmp	.+274    	; 0xb8a <__vector_39+0x15e>
     a78:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <compassFlag>
     a7c:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <compassFlag+0x1>
     a80:	89 2b       	or	r24, r25
     a82:	21 f0       	breq	.+8      	; 0xa8c <__vector_39+0x60>
     a84:	85 e8       	ldi	r24, 0x85	; 133
     a86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a8a:	7f c0       	rjmp	.+254    	; 0xb8a <__vector_39+0x15e>
     a8c:	c6 df       	rcall	.-116    	; 0xa1a <clearReceiveData>
     a8e:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <bytecounter.2058+0x1>
     a92:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <bytecounter.2058>
     a96:	85 ec       	ldi	r24, 0xC5	; 197
     a98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a9c:	76 c0       	rjmp	.+236    	; 0xb8a <__vector_39+0x15e>
     a9e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <bytecounter.2058>
     aa2:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <bytecounter.2058+0x1>
     aa6:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     aaa:	fc 01       	movw	r30, r24
     aac:	e6 5b       	subi	r30, 0xB6	; 182
     aae:	fc 4f       	sbci	r31, 0xFC	; 252
     ab0:	20 83       	st	Z, r18
     ab2:	82 31       	cpi	r24, 0x12	; 18
     ab4:	91 05       	cpc	r25, r1
     ab6:	4c f4       	brge	.+18     	; 0xaca <__vector_39+0x9e>
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <bytecounter.2058+0x1>
     abe:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <bytecounter.2058>
     ac2:	85 ec       	ldi	r24, 0xC5	; 197
     ac4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ac8:	60 c0       	rjmp	.+192    	; 0xb8a <__vector_39+0x15e>
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <bytecounter.2058+0x1>
     ad0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <bytecounter.2058>
     ad4:	85 e8       	ldi	r24, 0x85	; 133
     ad6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ada:	57 c0       	rjmp	.+174    	; 0xb8a <__vector_39+0x15e>
     adc:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <compassFlag>
     ae0:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <compassFlag+0x1>
     ae4:	89 2b       	or	r24, r25
     ae6:	71 f4       	brne	.+28     	; 0xb04 <__vector_39+0xd8>
     ae8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     aec:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <bytecounter.2058>
     af0:	f0 91 23 03 	lds	r31, 0x0323	; 0x800323 <bytecounter.2058+0x1>
     af4:	e6 5b       	subi	r30, 0xB6	; 182
     af6:	fc 4f       	sbci	r31, 0xFC	; 252
     af8:	80 83       	st	Z, r24
     afa:	85 e9       	ldi	r24, 0x95	; 149
     afc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b00:	7d df       	rcall	.-262    	; 0x9fc <I2C_receiveInterpreter>
     b02:	43 c0       	rjmp	.+134    	; 0xb8a <__vector_39+0x15e>
     b04:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b08:	c4 e8       	ldi	r28, 0x84	; 132
     b0a:	d3 e0       	ldi	r29, 0x03	; 3
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	03 e0       	ldi	r16, 0x03	; 3
     b1c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ashldi3>
     b20:	a2 2e       	mov	r10, r18
     b22:	b3 2e       	mov	r11, r19
     b24:	c4 2e       	mov	r12, r20
     b26:	d5 2e       	mov	r13, r21
     b28:	e6 2e       	mov	r14, r22
     b2a:	f7 2e       	mov	r15, r23
     b2c:	e8 2f       	mov	r30, r24
     b2e:	19 2f       	mov	r17, r25
     b30:	02 e0       	ldi	r16, 0x02	; 2
     b32:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ashldi3>
     b36:	0e 2f       	mov	r16, r30
     b38:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__subdi3>
     b3c:	a2 2e       	mov	r10, r18
     b3e:	b3 2e       	mov	r11, r19
     b40:	c4 2e       	mov	r12, r20
     b42:	d5 2e       	mov	r13, r21
     b44:	e6 2e       	mov	r14, r22
     b46:	f7 2e       	mov	r15, r23
     b48:	e8 2f       	mov	r30, r24
     b4a:	19 2f       	mov	r17, r25
     b4c:	04 e0       	ldi	r16, 0x04	; 4
     b4e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ashldi3>
     b52:	0e 2f       	mov	r16, r30
     b54:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__subdi3>
     b58:	aa 24       	eor	r10, r10
     b5a:	aa 94       	dec	r10
     b5c:	b1 2c       	mov	r11, r1
     b5e:	c1 2c       	mov	r12, r1
     b60:	d1 2c       	mov	r13, r1
     b62:	e1 2c       	mov	r14, r1
     b64:	f1 2c       	mov	r15, r1
     b66:	00 e0       	ldi	r16, 0x00	; 0
     b68:	10 e0       	ldi	r17, 0x00	; 0
     b6a:	f2 d7       	rcall	.+4068   	; 0x1b50 <__udivdi3>
     b6c:	2f 87       	std	Y+15, r18	; 0x0f
     b6e:	38 8b       	std	Y+16, r19	; 0x10
     b70:	49 8b       	std	Y+17, r20	; 0x11
     b72:	5a 8b       	std	Y+18, r21	; 0x12
     b74:	6b 8b       	std	Y+19, r22	; 0x13
     b76:	7c 8b       	std	Y+20, r23	; 0x14
     b78:	8d 8b       	std	Y+21, r24	; 0x15
     b7a:	9e 8b       	std	Y+22, r25	; 0x16
     b7c:	85 e9       	ldi	r24, 0x95	; 149
     b7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b82:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <compassFlag+0x1>
     b86:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <compassFlag>
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	0f 90       	pop	r0
     bb8:	0b be       	out	0x3b, r0	; 59
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <TWIwaitUntilReady>:
=======
     1de:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     1e2:	e1 ec       	ldi	r30, 0xC1	; 193
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	80 69       	ori	r24, 0x90	; 144
     1ea:	80 83       	st	Z, r24
     1ec:	80 81       	ld	r24, Z
     1ee:	88 60       	ori	r24, 0x08	; 8
     1f0:	80 83       	st	Z, r24
     1f2:	e2 ec       	ldi	r30, 0xC2	; 194
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	86 60       	ori	r24, 0x06	; 6
     1fa:	80 83       	st	Z, r24
     1fc:	80 e1       	ldi	r24, 0x10	; 16
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     208:	08 95       	ret

0000020a <__vector_25>:
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	0b b6       	in	r0, 0x3b	; 59
     216:	0f 92       	push	r0
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	2f 93       	push	r18
     226:	3f 93       	push	r19
     228:	4f 93       	push	r20
     22a:	5f 93       	push	r21
     22c:	6f 93       	push	r22
     22e:	7f 93       	push	r23
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	bf 93       	push	r27
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
     240:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     244:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USARTreceived>
     248:	90 ed       	ldi	r25, 0xD0	; 208
     24a:	98 0f       	add	r25, r24
     24c:	9a 30       	cpi	r25, 0x0A	; 10
     24e:	10 f0       	brcs	.+4      	; 0x254 <__vector_25+0x4a>
     250:	80 32       	cpi	r24, 0x20	; 32
     252:	99 f4       	brne	.+38     	; 0x27a <__vector_25+0x70>
     254:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <USARTinputPos>
     258:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <USARTinputPos+0x1>
     25c:	2f 3f       	cpi	r18, 0xFF	; 255
     25e:	31 05       	cpc	r19, r1
     260:	0c f0       	brlt	.+2      	; 0x264 <__vector_25+0x5a>
     262:	ae c1       	rjmp	.+860    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     264:	2f 5f       	subi	r18, 0xFF	; 255
     266:	3f 4f       	sbci	r19, 0xFF	; 255
     268:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <USARTinputPos+0x1>
     26c:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <USARTinputPos>
     270:	f9 01       	movw	r30, r18
     272:	e1 5f       	subi	r30, 0xF1	; 241
     274:	fb 4f       	sbci	r31, 0xFB	; 251
     276:	80 83       	st	Z, r24
     278:	a3 c1       	rjmp	.+838    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     27a:	9f e9       	ldi	r25, 0x9F	; 159
     27c:	98 0f       	add	r25, r24
     27e:	9a 31       	cpi	r25, 0x1A	; 26
     280:	28 f4       	brcc	.+10     	; 0x28c <__vector_25+0x82>
     282:	82 36       	cpi	r24, 0x62	; 98
     284:	29 f0       	breq	.+10     	; 0x290 <__vector_25+0x86>
     286:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USARTcommand>
     28a:	9a c1       	rjmp	.+820    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     28c:	82 36       	cpi	r24, 0x62	; 98
     28e:	51 f4       	brne	.+20     	; 0x2a4 <__vector_25+0x9a>
     290:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
     294:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     29e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     2a2:	8e c1       	rjmp	.+796    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     2a4:	8d 30       	cpi	r24, 0x0D	; 13
     2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_25+0xa0>
     2a8:	8b c1       	rjmp	.+790    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     2aa:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <USARTinputPos>
     2ae:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USARTinputPos+0x1>
     2b2:	11 23       	and	r17, r17
     2b4:	0c f4       	brge	.+2      	; 0x2b8 <__vector_25+0xae>
     2b6:	92 c0       	rjmp	.+292    	; 0x3dc <__vector_25+0x1d2>
     2b8:	ec e9       	ldi	r30, 0x9C	; 156
     2ba:	f3 e0       	ldi	r31, 0x03	; 3
     2bc:	11 82       	std	Z+1, r1	; 0x01
     2be:	10 82       	st	Z, r1
     2c0:	13 82       	std	Z+3, r1	; 0x03
     2c2:	12 82       	std	Z+2, r1	; 0x02
     2c4:	15 82       	std	Z+5, r1	; 0x05
     2c6:	14 82       	std	Z+4, r1	; 0x04
     2c8:	e6 e9       	ldi	r30, 0x96	; 150
     2ca:	f3 e0       	ldi	r31, 0x03	; 3
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	9f ef       	ldi	r25, 0xFF	; 255
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	80 83       	st	Z, r24
     2d4:	93 83       	std	Z+3, r25	; 0x03
     2d6:	82 83       	std	Z+2, r24	; 0x02
     2d8:	95 83       	std	Z+5, r25	; 0x05
     2da:	84 83       	std	Z+4, r24	; 0x04
     2dc:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <numberStart.2000+0x1>
     2e0:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <numberStart.2000>
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	fc 01       	movw	r30, r24
     2f0:	e1 5f       	subi	r30, 0xF1	; 241
     2f2:	fb 4f       	sbci	r31, 0xFB	; 251
     2f4:	30 81       	ld	r19, Z
     2f6:	30 32       	cpi	r19, 0x20	; 32
     2f8:	79 f4       	brne	.+30     	; 0x318 <__vector_25+0x10e>
     2fa:	4f 5f       	subi	r20, 0xFF	; 255
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
     2fe:	fa 01       	movw	r30, r20
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	e0 57       	subi	r30, 0x70	; 112
     306:	fc 4f       	sbci	r31, 0xFC	; 252
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	80 83       	st	Z, r24
     30e:	43 30       	cpi	r20, 0x03	; 3
     310:	51 05       	cpc	r21, r1
     312:	0c f0       	brlt	.+2      	; 0x316 <__vector_25+0x10c>
     314:	4f c1       	rjmp	.+670    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     316:	0a c0       	rjmp	.+20     	; 0x32c <__vector_25+0x122>
     318:	fa 01       	movw	r30, r20
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	ea 56       	subi	r30, 0x6A	; 106
     320:	fc 4f       	sbci	r31, 0xFC	; 252
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
     32c:	2f 5f       	subi	r18, 0xFF	; 255
     32e:	82 2f       	mov	r24, r18
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	dc f6       	brge	.-74     	; 0x2ee <__vector_25+0xe4>
     338:	3d c1       	rjmp	.+634    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     33a:	f9 01       	movw	r30, r18
     33c:	e1 5f       	subi	r30, 0xF1	; 241
     33e:	fb 4f       	sbci	r31, 0xFB	; 251
     340:	c0 80       	ld	r12, Z
     342:	60 e2       	ldi	r22, 0x20	; 32
     344:	c6 12       	cpse	r12, r22
     346:	09 c0       	rjmp	.+18     	; 0x35a <__vector_25+0x150>
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	e8 1a       	sub	r14, r24
     34c:	f8 0a       	sbc	r15, r24
     34e:	63 e0       	ldi	r22, 0x03	; 3
     350:	e6 16       	cp	r14, r22
     352:	f1 04       	cpc	r15, r1
     354:	0c f0       	brlt	.+2      	; 0x358 <__vector_25+0x14e>
     356:	42 c0       	rjmp	.+132    	; 0x3dc <__vector_25+0x1d2>
     358:	3a c0       	rjmp	.+116    	; 0x3ce <__vector_25+0x1c4>
     35a:	e7 01       	movw	r28, r14
     35c:	cc 0f       	add	r28, r28
     35e:	dd 1f       	adc	r29, r29
     360:	de 01       	movw	r26, r28
     362:	aa 56       	subi	r26, 0x6A	; 106
     364:	bc 4f       	sbci	r27, 0xFC	; 252
     366:	fe 01       	movw	r30, r28
     368:	e0 57       	subi	r30, 0x70	; 112
     36a:	fc 4f       	sbci	r31, 0xFC	; 252
     36c:	6d 91       	ld	r22, X+
     36e:	7c 91       	ld	r23, X
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	68 0f       	add	r22, r24
     376:	79 1f       	adc	r23, r25
     378:	62 1b       	sub	r22, r18
     37a:	73 0b       	sbc	r23, r19
     37c:	07 2e       	mov	r0, r23
     37e:	00 0c       	add	r0, r0
     380:	88 0b       	sbc	r24, r24
     382:	99 0b       	sbc	r25, r25
     384:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__floatsisf>
     388:	9b 01       	movw	r18, r22
     38a:	ac 01       	movw	r20, r24
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	91 e4       	ldi	r25, 0x41	; 65
     394:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <pow>
     398:	c4 56       	subi	r28, 0x64	; 100
     39a:	dc 4f       	sbci	r29, 0xFC	; 252
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	5f e3       	ldi	r21, 0x3F	; 63
     3a4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__addsf3>
     3a8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fixsfsi>
     3ac:	20 ed       	ldi	r18, 0xD0	; 208
     3ae:	2c 0d       	add	r18, r12
     3b0:	42 2f       	mov	r20, r18
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	46 9f       	mul	r20, r22
     3b6:	90 01       	movw	r18, r0
     3b8:	47 9f       	mul	r20, r23
     3ba:	30 0d       	add	r19, r0
     3bc:	56 9f       	mul	r21, r22
     3be:	30 0d       	add	r19, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	88 81       	ld	r24, Y
     3c4:	99 81       	ldd	r25, Y+1	; 0x01
     3c6:	82 0f       	add	r24, r18
     3c8:	93 1f       	adc	r25, r19
     3ca:	99 83       	std	Y+1, r25	; 0x01
     3cc:	88 83       	st	Y, r24
     3ce:	d3 94       	inc	r13
     3d0:	2d 2d       	mov	r18, r13
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	02 17       	cp	r16, r18
     3d6:	13 07       	cpc	r17, r19
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <__vector_25+0x1d2>
     3da:	af cf       	rjmp	.-162    	; 0x33a <__vector_25+0x130>
     3dc:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <USARTcommand>
     3e0:	ee 23       	and	r30, r30
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <__vector_25+0x1dc>
     3e4:	de c0       	rjmp	.+444    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     3e6:	8e 2f       	mov	r24, r30
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	e1 56       	subi	r30, 0x61	; 97
     3ee:	f1 09       	sbc	r31, r1
     3f0:	ea 31       	cpi	r30, 0x1A	; 26
     3f2:	f1 05       	cpc	r31, r1
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__vector_25+0x1ee>
     3f6:	d5 c0       	rjmp	.+426    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     3f8:	88 27       	eor	r24, r24
     3fa:	ee 58       	subi	r30, 0x8E	; 142
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	8f 4f       	sbci	r24, 0xFF	; 255
     400:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__tablejump2__>
     404:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     408:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <rp6Data+0x2>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     410:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <rp6Data+0x2>
     414:	c6 c0       	rjmp	.+396    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <rp6Data+0x2>
     41c:	c2 c0       	rjmp	.+388    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     41e:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     422:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <rp6Data+0x2>
     426:	8f 3f       	cpi	r24, 0xFF	; 255
     428:	19 f4       	brne	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42a:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <rp6Data+0x2>
     42e:	b9 c0       	rjmp	.+370    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <rp6Data+0x2>
     436:	b5 c0       	rjmp	.+362    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     438:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     43c:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
     440:	8f 3f       	cpi	r24, 0xFF	; 255
     442:	19 f4       	brne	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     448:	ac c0       	rjmp	.+344    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     450:	a8 c0       	rjmp	.+336    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     452:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     456:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	19 f4       	brne	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     45e:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     462:	9f c0       	rjmp	.+318    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     46a:	9b c0       	rjmp	.+310    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     46c:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     470:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <number.1998>
     474:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <number.1998+0x1>
     478:	85 36       	cpi	r24, 0x65	; 101
     47a:	91 05       	cpc	r25, r1
     47c:	08 f0       	brcs	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	91 c0       	rjmp	.+290    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     480:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <rp6Data+0x1>
     484:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <rp6Data>
     488:	8c c0       	rjmp	.+280    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     48a:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     48e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <number.1998>
     492:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <number.1998+0x1>
     496:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <rp6Data+0x7>
     49a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <rp6Data+0x6>
     49e:	81 c0       	rjmp	.+258    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     4a0:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     4a4:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <number.1998>
     4a8:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <number.1998+0x1>
     4ac:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <rp6Data+0x5>
     4b0:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <rp6Data+0x4>
     4b4:	76 c0       	rjmp	.+236    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     4b6:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <programmedAmount>
     4ba:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <programmedAmount+0x1>
     4be:	c9 01       	movw	r24, r18
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <programmedAmount+0x1>
     4c6:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <programmedAmount>
     4ca:	40 91 9c 03 	lds	r20, 0x039C	; 0x80039c <number.1998>
     4ce:	50 91 9d 03 	lds	r21, 0x039D	; 0x80039d <number.1998+0x1>
     4d2:	47 36       	cpi	r20, 0x67	; 103
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	56 07       	cpc	r21, r22
     4d8:	70 f0       	brcs	.+28     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4da:	f9 01       	movw	r30, r18
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	e2 0f       	add	r30, r18
     4e2:	f3 1f       	adc	r31, r19
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	e0 5f       	subi	r30, 0xF0	; 240
     4ea:	fa 4f       	sbci	r31, 0xFA	; 250
     4ec:	27 e6       	ldi	r18, 0x67	; 103
     4ee:	31 e0       	ldi	r19, 0x01	; 1
     4f0:	31 83       	std	Z+1, r19	; 0x01
     4f2:	20 83       	st	Z, r18
     4f4:	0b c0       	rjmp	.+22     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4f6:	f9 01       	movw	r30, r18
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e2 0f       	add	r30, r18
     4fe:	f3 1f       	adc	r31, r19
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e0 5f       	subi	r30, 0xF0	; 240
     506:	fa 4f       	sbci	r31, 0xFA	; 250
     508:	51 83       	std	Z+1, r21	; 0x01
     50a:	40 83       	st	Z, r20
     50c:	9c 01       	movw	r18, r24
     50e:	22 0f       	add	r18, r18
     510:	33 1f       	adc	r19, r19
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	fc 01       	movw	r30, r24
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	e4 5f       	subi	r30, 0xF4	; 244
     51e:	fa 4f       	sbci	r31, 0xFA	; 250
     520:	ac e9       	ldi	r26, 0x9C	; 156
     522:	b3 e0       	ldi	r27, 0x03	; 3
     524:	12 96       	adiw	r26, 0x02	; 2
     526:	2d 91       	ld	r18, X+
     528:	3c 91       	ld	r19, X
     52a:	13 97       	sbiw	r26, 0x03	; 3
     52c:	31 83       	std	Z+1, r19	; 0x01
     52e:	20 83       	st	Z, r18
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	fc 01       	movw	r30, r24
     536:	e2 5f       	subi	r30, 0xF2	; 242
     538:	fa 4f       	sbci	r31, 0xFA	; 250
     53a:	14 96       	adiw	r26, 0x04	; 4
     53c:	8d 91       	ld	r24, X+
     53e:	9c 91       	ld	r25, X
     540:	15 97       	sbiw	r26, 0x05	; 5
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
     546:	2d c0       	rjmp	.+90     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     548:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <programmedAmount>
     54c:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <programmedAmount+0x1>
     550:	18 16       	cp	r1, r24
     552:	19 06       	cpc	r1, r25
     554:	34 f5       	brge	.+76     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <programmedAmount+0x1>
     55c:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <programmedAmount>
     560:	20 c0       	rjmp	.+64     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     562:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <number.1998>
     566:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <number.1998+0x1>
     56a:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <programmedAmount>
     56e:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <programmedAmount+0x1>
     572:	82 17       	cp	r24, r18
     574:	93 07       	cpc	r25, r19
     576:	a8 f4       	brcc	.+42     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     578:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <currentParcourLine+0x1>
     57c:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <currentParcourLine>
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <runParcour>
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     588:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <programmedAmount+0x1>
     58c:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <programmedAmount>
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     592:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     596:	e8 ef       	ldi	r30, 0xF8	; 248
     598:	f3 e0       	ldi	r31, 0x03	; 3
     59a:	11 82       	std	Z+1, r1	; 0x01
     59c:	10 82       	st	Z, r1
     59e:	13 82       	std	Z+3, r1	; 0x03
     5a0:	12 82       	std	Z+2, r1	; 0x02
     5a2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USARTcommand>
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	9f ef       	ldi	r25, 0xFF	; 255
     5aa:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <USARTinputPos+0x1>
     5ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USARTinputPos>
     5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	d1 2c       	mov	r13, r1
     5ba:	e1 2c       	mov	r14, r1
     5bc:	f1 2c       	mov	r15, r1
     5be:	bd ce       	rjmp	.-646    	; 0x33a <__vector_25+0x130>
     5c0:	ff 91       	pop	r31
     5c2:	ef 91       	pop	r30
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <init_micros>:
     5f6:	e1 e9       	ldi	r30, 0x91	; 145
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	80 83       	st	Z, r24
     600:	e1 e7       	ldi	r30, 0x71	; 113
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	81 60       	ori	r24, 0x01	; 1
     608:	80 83       	st	Z, r24
     60a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     60e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     612:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <t3TotalOverflow>
     616:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <t3TotalOverflow+0x1>
     61a:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <t3TotalOverflow+0x2>
     61e:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <t3TotalOverflow+0x3>
     622:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <t3TotalOverflow+0x4>
     626:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <t3TotalOverflow+0x5>
     62a:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <t3TotalOverflow+0x6>
     62e:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <t3TotalOverflow+0x7>
     632:	08 95       	ret

00000634 <__vector_35>:
     634:	1f 92       	push	r1
     636:	0f 92       	push	r0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	0f 92       	push	r0
     63c:	11 24       	eor	r1, r1
     63e:	2f 93       	push	r18
     640:	3f 93       	push	r19
     642:	4f 93       	push	r20
     644:	5f 93       	push	r21
     646:	6f 93       	push	r22
     648:	7f 93       	push	r23
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <t3TotalOverflow>
     654:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <t3TotalOverflow+0x1>
     658:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <t3TotalOverflow+0x2>
     65c:	50 91 d5 03 	lds	r21, 0x03D5	; 0x8003d5 <t3TotalOverflow+0x3>
     660:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <t3TotalOverflow+0x4>
     664:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <t3TotalOverflow+0x5>
     668:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <t3TotalOverflow+0x6>
     66c:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <t3TotalOverflow+0x7>
     670:	a1 e0       	ldi	r26, 0x01	; 1
     672:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__adddi3_s8>
     676:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <t3TotalOverflow>
     67a:	30 93 d3 03 	sts	0x03D3, r19	; 0x8003d3 <t3TotalOverflow+0x1>
     67e:	40 93 d4 03 	sts	0x03D4, r20	; 0x8003d4 <t3TotalOverflow+0x2>
     682:	50 93 d5 03 	sts	0x03D5, r21	; 0x8003d5 <t3TotalOverflow+0x3>
     686:	60 93 d6 03 	sts	0x03D6, r22	; 0x8003d6 <t3TotalOverflow+0x4>
     68a:	70 93 d7 03 	sts	0x03D7, r23	; 0x8003d7 <t3TotalOverflow+0x5>
     68e:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <t3TotalOverflow+0x6>
     692:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <t3TotalOverflow+0x7>
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <micros>:
     6b2:	4f 92       	push	r4
     6b4:	5f 92       	push	r5
     6b6:	6f 92       	push	r6
     6b8:	7f 92       	push	r7
     6ba:	8f 92       	push	r8
     6bc:	9f 92       	push	r9
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	80 90 94 00 	lds	r8, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     6d2:	90 90 95 00 	lds	r9, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     6d6:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <t3TotalOverflow>
     6da:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <t3TotalOverflow+0x1>
     6de:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <t3TotalOverflow+0x2>
     6e2:	50 91 d5 03 	lds	r21, 0x03D5	; 0x8003d5 <t3TotalOverflow+0x3>
     6e6:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <t3TotalOverflow+0x4>
     6ea:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <t3TotalOverflow+0x5>
     6ee:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <t3TotalOverflow+0x6>
     6f2:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <t3TotalOverflow+0x7>
     6f6:	98 2c       	mov	r9, r8
     6f8:	88 24       	eor	r8, r8
     6fa:	99 0c       	add	r9, r9
     6fc:	99 0c       	add	r9, r9
     6fe:	99 0c       	add	r9, r9
     700:	99 0c       	add	r9, r9
     702:	09 2c       	mov	r0, r9
     704:	00 0c       	add	r0, r0
     706:	aa 08       	sbc	r10, r10
     708:	bb 08       	sbc	r11, r11
     70a:	bb 20       	and	r11, r11
     70c:	2c f4       	brge	.+10     	; 0x718 <micros+0x66>
     70e:	ef ef       	ldi	r30, 0xFF	; 255
     710:	8e 0e       	add	r8, r30
     712:	9e 1e       	adc	r9, r30
     714:	a1 1c       	adc	r10, r1
     716:	b1 1c       	adc	r11, r1
     718:	25 01       	movw	r4, r10
     71a:	77 24       	eor	r7, r7
     71c:	57 fc       	sbrc	r5, 7
     71e:	70 94       	com	r7
     720:	67 2c       	mov	r6, r7
     722:	bb 0c       	add	r11, r11
     724:	88 08       	sbc	r8, r8
     726:	98 2c       	mov	r9, r8
     728:	54 01       	movw	r10, r8
     72a:	0c e0       	ldi	r16, 0x0C	; 12
     72c:	0e 94 24 11 	call	0x2248	; 0x2248 <__ashldi3>
     730:	f2 2f       	mov	r31, r18
     732:	e3 2f       	mov	r30, r19
     734:	c4 2e       	mov	r12, r20
     736:	d5 2e       	mov	r13, r21
     738:	e6 2e       	mov	r14, r22
     73a:	f7 2e       	mov	r15, r23
     73c:	08 2f       	mov	r16, r24
     73e:	19 2f       	mov	r17, r25
     740:	24 2d       	mov	r18, r4
     742:	35 2d       	mov	r19, r5
     744:	46 2d       	mov	r20, r6
     746:	57 2d       	mov	r21, r7
     748:	68 2d       	mov	r22, r8
     74a:	78 2d       	mov	r23, r8
     74c:	88 2d       	mov	r24, r8
     74e:	98 2d       	mov	r25, r8
     750:	af 2e       	mov	r10, r31
     752:	be 2e       	mov	r11, r30
     754:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__adddi3>
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	7f 90       	pop	r7
     76e:	6f 90       	pop	r6
     770:	5f 90       	pop	r5
     772:	4f 90       	pop	r4
     774:	08 95       	ret

00000776 <hardcoreParcour>:
     776:	2f 92       	push	r2
     778:	3f 92       	push	r3
     77a:	4f 92       	push	r4
     77c:	5f 92       	push	r5
     77e:	6f 92       	push	r6
     780:	7f 92       	push	r7
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	2c 97       	sbiw	r28, 0x0c	; 12
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <runParcour>
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <hardcoreParcour+0x3e>
     7b2:	8c c1       	rjmp	.+792    	; 0xacc <hardcoreParcour+0x356>
     7b4:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <running.1987>
     7b8:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <running.1987+0x1>
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	61 f5       	brne	.+88     	; 0x818 <hardcoreParcour+0xa2>
     7c0:	e8 ef       	ldi	r30, 0xF8	; 248
     7c2:	f3 e0       	ldi	r31, 0x03	; 3
     7c4:	11 82       	std	Z+1, r1	; 0x01
     7c6:	10 82       	st	Z, r1
     7c8:	13 82       	std	Z+3, r1	; 0x03
     7ca:	87 85       	ldd	r24, Z+15	; 0x0f
     7cc:	90 89       	ldd	r25, Z+16	; 0x10
     7ce:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <startDegrees+0x1>
     7d2:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <startDegrees>
     7d6:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <parcourLineState>
     7da:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <arduinoData+0x2>
     7de:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <arduinoData+0x3>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <hardcoreParcour+0x72>
     7e6:	75 c1       	rjmp	.+746    	; 0xad2 <hardcoreParcour+0x35c>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <running.1987+0x1>
     7f0:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <running.1987>
     7f4:	6e c1       	rjmp	.+732    	; 0xad2 <hardcoreParcour+0x35c>
     7f6:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <running.1987>
     7fa:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <running.1987+0x1>
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	09 f0       	breq	.+2      	; 0x804 <hardcoreParcour+0x8e>
     802:	67 c1       	rjmp	.+718    	; 0xad2 <hardcoreParcour+0x35c>
     804:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <running.1987+0x1>
     808:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <running.1987>
     80c:	e8 ef       	ldi	r30, 0xF8	; 248
     80e:	f3 e0       	ldi	r31, 0x03	; 3
     810:	11 82       	std	Z+1, r1	; 0x01
     812:	10 82       	st	Z, r1
     814:	13 82       	std	Z+3, r1	; 0x03
     816:	5d c1       	rjmp	.+698    	; 0xad2 <hardcoreParcour+0x35c>
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	09 f0       	breq	.+2      	; 0x81e <hardcoreParcour+0xa8>
     81c:	5a c1       	rjmp	.+692    	; 0xad2 <hardcoreParcour+0x35c>
     81e:	00 91 b0 03 	lds	r16, 0x03B0	; 0x8003b0 <currentParcourLine>
     822:	10 91 b1 03 	lds	r17, 0x03B1	; 0x8003b1 <currentParcourLine+0x1>
     826:	1c 87       	std	Y+12, r17	; 0x0c
     828:	0b 87       	std	Y+11, r16	; 0x0b
     82a:	c8 01       	movw	r24, r16
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	48 01       	movw	r8, r16
     832:	88 0e       	add	r8, r24
     834:	99 1e       	adc	r9, r25
     836:	f4 01       	movw	r30, r8
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	e0 5f       	subi	r30, 0xF0	; 240
     83e:	fa 4f       	sbci	r31, 0xFA	; 250
     840:	20 81       	ld	r18, Z
     842:	31 81       	ldd	r19, Z+1	; 0x01
     844:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <startDegrees>
     848:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <startDegrees+0x1>
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	88 36       	cpi	r24, 0x68	; 104
     852:	11 e0       	ldi	r17, 0x01	; 1
     854:	91 07       	cpc	r25, r17
     856:	28 f4       	brcc	.+10     	; 0x862 <hardcoreParcour+0xec>
     858:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <targetAngle.1986+0x1>
     85c:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <targetAngle.1986>
     860:	06 c0       	rjmp	.+12     	; 0x86e <hardcoreParcour+0xf8>
     862:	88 56       	subi	r24, 0x68	; 104
     864:	91 40       	sbci	r25, 0x01	; 1
     866:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <targetAngle.1986+0x1>
     86a:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <targetAngle.1986>
     86e:	e8 ef       	ldi	r30, 0xF8	; 248
     870:	f3 e0       	ldi	r31, 0x03	; 3
     872:	27 84       	ldd	r2, Z+15	; 0x0f
     874:	30 88       	ldd	r3, Z+16	; 0x10
     876:	41 88       	ldd	r4, Z+17	; 0x11
     878:	52 88       	ldd	r5, Z+18	; 0x12
     87a:	63 88       	ldd	r6, Z+19	; 0x13
     87c:	74 88       	ldd	r7, Z+20	; 0x14
     87e:	25 89       	ldd	r18, Z+21	; 0x15
     880:	29 87       	std	Y+9, r18	; 0x09
     882:	36 89       	ldd	r19, Z+22	; 0x16
     884:	3a 87       	std	Y+10, r19	; 0x0a
     886:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <targetAngle.1986>
     88a:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <targetAngle.1986+0x1>
     88e:	8c 01       	movw	r16, r24
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	ba 01       	movw	r22, r20
     89a:	89 83       	std	Y+1, r24	; 0x01
     89c:	1a 83       	std	Y+2, r17	; 0x02
     89e:	2b 83       	std	Y+3, r18	; 0x03
     8a0:	3c 83       	std	Y+4, r19	; 0x04
     8a2:	4d 83       	std	Y+5, r20	; 0x05
     8a4:	5e 83       	std	Y+6, r21	; 0x06
     8a6:	6f 83       	std	Y+7, r22	; 0x07
     8a8:	78 87       	std	Y+8, r23	; 0x08
     8aa:	22 2d       	mov	r18, r2
     8ac:	33 2d       	mov	r19, r3
     8ae:	44 2d       	mov	r20, r4
     8b0:	55 2d       	mov	r21, r5
     8b2:	66 2d       	mov	r22, r6
     8b4:	77 2d       	mov	r23, r7
     8b6:	89 85       	ldd	r24, Y+9	; 0x09
     8b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ba:	a0 2e       	mov	r10, r16
     8bc:	b1 2e       	mov	r11, r17
     8be:	c1 2c       	mov	r12, r1
     8c0:	d1 2c       	mov	r13, r1
     8c2:	e1 2c       	mov	r14, r1
     8c4:	f1 2c       	mov	r15, r1
     8c6:	00 e0       	ldi	r16, 0x00	; 0
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__subdi3>
     8ce:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__floatundisf>
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
     8d6:	a7 01       	movw	r20, r14
     8d8:	96 01       	movw	r18, r12
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__mulsf3>
     8e2:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <sqrt>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 ea       	ldi	r20, 0xA0	; 160
     8f0:	51 e4       	ldi	r21, 0x41	; 65
     8f2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__cmpsf2>
     8f6:	88 23       	and	r24, r24
     8f8:	0c f0       	brlt	.+2      	; 0x8fc <hardcoreParcour+0x186>
     8fa:	9b c0       	rjmp	.+310    	; 0xa32 <hardcoreParcour+0x2bc>
     8fc:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <parcourLineState>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	09 f4       	brne	.+2      	; 0x906 <hardcoreParcour+0x190>
     904:	54 c0       	rjmp	.+168    	; 0x9ae <hardcoreParcour+0x238>
     906:	38 f0       	brcs	.+14     	; 0x916 <hardcoreParcour+0x1a0>
     908:	82 30       	cpi	r24, 0x02	; 2
     90a:	09 f4       	brne	.+2      	; 0x90e <hardcoreParcour+0x198>
     90c:	71 c0       	rjmp	.+226    	; 0x9f0 <hardcoreParcour+0x27a>
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	09 f4       	brne	.+2      	; 0x914 <hardcoreParcour+0x19e>
     912:	79 c0       	rjmp	.+242    	; 0xa06 <hardcoreParcour+0x290>
     914:	de c0       	rjmp	.+444    	; 0xad2 <hardcoreParcour+0x35c>
     916:	f4 01       	movw	r30, r8
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	ee 5e       	subi	r30, 0xEE	; 238
     91e:	fa 4f       	sbci	r31, 0xFA	; 250
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	e8 ef       	ldi	r30, 0xF8	; 248
     926:	f3 e0       	ldi	r31, 0x03	; 3
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
     92c:	c2 de       	rcall	.-636    	; 0x6b2 <micros>
     92e:	a2 2e       	mov	r10, r18
     930:	b3 2e       	mov	r11, r19
     932:	c4 2e       	mov	r12, r20
     934:	d5 2e       	mov	r13, r21
     936:	e6 2e       	mov	r14, r22
     938:	f7 2e       	mov	r15, r23
     93a:	08 2f       	mov	r16, r24
     93c:	19 2f       	mov	r17, r25
     93e:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <currentParcourLine>
     942:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <currentParcourLine+0x1>
     946:	fc 01       	movw	r30, r24
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	e8 0f       	add	r30, r24
     94e:	f9 1f       	adc	r31, r25
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	ec 5e       	subi	r30, 0xEC	; 236
     956:	fa 4f       	sbci	r31, 0xFA	; 250
     958:	20 81       	ld	r18, Z
     95a:	31 81       	ldd	r19, Z+1	; 0x01
     95c:	88 ee       	ldi	r24, 0xE8	; 232
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	28 9f       	mul	r18, r24
     962:	a0 01       	movw	r20, r0
     964:	29 9f       	mul	r18, r25
     966:	50 0d       	add	r21, r0
     968:	38 9f       	mul	r19, r24
     96a:	50 0d       	add	r21, r0
     96c:	11 24       	eor	r1, r1
     96e:	24 2f       	mov	r18, r20
     970:	35 2f       	mov	r19, r21
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__adddi3>
     982:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <parcourCommandTimer>
     986:	30 93 a7 03 	sts	0x03A7, r19	; 0x8003a7 <parcourCommandTimer+0x1>
     98a:	40 93 a8 03 	sts	0x03A8, r20	; 0x8003a8 <parcourCommandTimer+0x2>
     98e:	50 93 a9 03 	sts	0x03A9, r21	; 0x8003a9 <parcourCommandTimer+0x3>
     992:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <parcourCommandTimer+0x4>
     996:	70 93 ab 03 	sts	0x03AB, r23	; 0x8003ab <parcourCommandTimer+0x5>
     99a:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <parcourCommandTimer+0x6>
     99e:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <parcourCommandTimer+0x7>
     9a2:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <parcourLineState>
     9ac:	92 c0       	rjmp	.+292    	; 0xad2 <hardcoreParcour+0x35c>
     9ae:	81 de       	rcall	.-766    	; 0x6b2 <micros>
     9b0:	a0 90 a6 03 	lds	r10, 0x03A6	; 0x8003a6 <parcourCommandTimer>
     9b4:	b0 90 a7 03 	lds	r11, 0x03A7	; 0x8003a7 <parcourCommandTimer+0x1>
     9b8:	c0 90 a8 03 	lds	r12, 0x03A8	; 0x8003a8 <parcourCommandTimer+0x2>
     9bc:	d0 90 a9 03 	lds	r13, 0x03A9	; 0x8003a9 <parcourCommandTimer+0x3>
     9c0:	e0 90 aa 03 	lds	r14, 0x03AA	; 0x8003aa <parcourCommandTimer+0x4>
     9c4:	f0 90 ab 03 	lds	r15, 0x03AB	; 0x8003ab <parcourCommandTimer+0x5>
     9c8:	00 91 ac 03 	lds	r16, 0x03AC	; 0x8003ac <parcourCommandTimer+0x6>
     9cc:	10 91 ad 03 	lds	r17, 0x03AD	; 0x8003ad <parcourCommandTimer+0x7>
     9d0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__cmpdi2>
     9d4:	51 f0       	breq	.+20     	; 0x9ea <hardcoreParcour+0x274>
     9d6:	48 f0       	brcs	.+18     	; 0x9ea <hardcoreParcour+0x274>
     9d8:	e8 ef       	ldi	r30, 0xF8	; 248
     9da:	f3 e0       	ldi	r31, 0x03	; 3
     9dc:	11 82       	std	Z+1, r1	; 0x01
     9de:	10 82       	st	Z, r1
     9e0:	13 82       	std	Z+3, r1	; 0x03
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <parcourLineState>
     9e8:	74 c0       	rjmp	.+232    	; 0xad2 <hardcoreParcour+0x35c>
     9ea:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <rp6Data+0x3>
     9ee:	71 c0       	rjmp	.+226    	; 0xad2 <hardcoreParcour+0x35c>
     9f0:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <arduinoData+0x2>
     9f4:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <arduinoData+0x3>
     9f8:	89 2b       	or	r24, r25
     9fa:	09 f0       	breq	.+2      	; 0x9fe <hardcoreParcour+0x288>
     9fc:	6a c0       	rjmp	.+212    	; 0xad2 <hardcoreParcour+0x35c>
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <parcourLineState>
     a04:	66 c0       	rjmp	.+204    	; 0xad2 <hardcoreParcour+0x35c>
     a06:	0b 85       	ldd	r16, Y+11	; 0x0b
     a08:	1c 85       	ldd	r17, Y+12	; 0x0c
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	10 93 b1 03 	sts	0x03B1, r17	; 0x8003b1 <currentParcourLine+0x1>
     a12:	00 93 b0 03 	sts	0x03B0, r16	; 0x8003b0 <currentParcourLine>
     a16:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <parcourLineState>
     a1a:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <programmedAmount>
     a1e:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <programmedAmount+0x1>
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	80 17       	cp	r24, r16
     a26:	91 07       	cpc	r25, r17
     a28:	0c f0       	brlt	.+2      	; 0xa2c <hardcoreParcour+0x2b6>
     a2a:	53 c0       	rjmp	.+166    	; 0xad2 <hardcoreParcour+0x35c>
     a2c:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
     a30:	50 c0       	rjmp	.+160    	; 0xad2 <hardcoreParcour+0x35c>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	43 e3       	ldi	r20, 0x33	; 51
     a38:	53 e4       	ldi	r21, 0x43	; 67
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	c0 d7       	rcall	.+3968   	; 0x19c0 <__cmpsf2>
     a40:	88 23       	and	r24, r24
     a42:	14 f5       	brge	.+68     	; 0xa88 <hardcoreParcour+0x312>
     a44:	88 e2       	ldi	r24, 0x28	; 40
     a46:	93 e2       	ldi	r25, 0x23	; 35
     a48:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <rp6Data+0x7>
     a4c:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <rp6Data+0x6>
     a50:	22 2d       	mov	r18, r2
     a52:	33 2d       	mov	r19, r3
     a54:	44 2d       	mov	r20, r4
     a56:	55 2d       	mov	r21, r5
     a58:	66 2d       	mov	r22, r6
     a5a:	77 2d       	mov	r23, r7
     a5c:	89 85       	ldd	r24, Y+9	; 0x09
     a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a60:	a9 80       	ldd	r10, Y+1	; 0x01
     a62:	ba 80       	ldd	r11, Y+2	; 0x02
     a64:	c1 2c       	mov	r12, r1
     a66:	d1 2c       	mov	r13, r1
     a68:	e1 2c       	mov	r14, r1
     a6a:	f1 2c       	mov	r15, r1
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__cmpdi2>
     a74:	29 f0       	breq	.+10     	; 0xa80 <hardcoreParcour+0x30a>
     a76:	20 f0       	brcs	.+8      	; 0xa80 <hardcoreParcour+0x30a>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     a7e:	29 c0       	rjmp	.+82     	; 0xad2 <hardcoreParcour+0x35c>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     a86:	25 c0       	rjmp	.+74     	; 0xad2 <hardcoreParcour+0x35c>
     a88:	88 e2       	ldi	r24, 0x28	; 40
     a8a:	93 e2       	ldi	r25, 0x23	; 35
     a8c:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <rp6Data+0x7>
     a90:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <rp6Data+0x6>
     a94:	22 2d       	mov	r18, r2
     a96:	33 2d       	mov	r19, r3
     a98:	44 2d       	mov	r20, r4
     a9a:	55 2d       	mov	r21, r5
     a9c:	66 2d       	mov	r22, r6
     a9e:	77 2d       	mov	r23, r7
     aa0:	89 85       	ldd	r24, Y+9	; 0x09
     aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa4:	a9 80       	ldd	r10, Y+1	; 0x01
     aa6:	ba 80       	ldd	r11, Y+2	; 0x02
     aa8:	c1 2c       	mov	r12, r1
     aaa:	d1 2c       	mov	r13, r1
     aac:	e1 2c       	mov	r14, r1
     aae:	f1 2c       	mov	r15, r1
     ab0:	00 e0       	ldi	r16, 0x00	; 0
     ab2:	10 e0       	ldi	r17, 0x00	; 0
     ab4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__cmpdi2>
     ab8:	29 f0       	breq	.+10     	; 0xac4 <hardcoreParcour+0x34e>
     aba:	20 f0       	brcs	.+8      	; 0xac4 <hardcoreParcour+0x34e>
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <hardcoreParcour+0x35c>
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rp6Data+0x3>
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <hardcoreParcour+0x35c>
     acc:	88 23       	and	r24, r24
     ace:	09 f4       	brne	.+2      	; 0xad2 <hardcoreParcour+0x35c>
     ad0:	92 ce       	rjmp	.-732    	; 0x7f6 <hardcoreParcour+0x80>
     ad2:	2c 96       	adiw	r28, 0x0c	; 12
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	8f 90       	pop	r8
     af6:	7f 90       	pop	r7
     af8:	6f 90       	pop	r6
     afa:	5f 90       	pop	r5
     afc:	4f 90       	pop	r4
     afe:	3f 90       	pop	r3
     b00:	2f 90       	pop	r2
     b02:	08 95       	ret

00000b04 <init_TWI>:
     b04:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b08:	88 e4       	ldi	r24, 0x48	; 72
     b0a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     b0e:	85 e0       	ldi	r24, 0x05	; 5
     b10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b14:	08 95       	ret

00000b16 <init_TWI_Timer2>:
     b16:	e1 eb       	ldi	r30, 0xB1	; 177
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	87 60       	ori	r24, 0x07	; 7
     b1e:	80 83       	st	Z, r24
     b20:	e0 e7       	ldi	r30, 0x70	; 112
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 83       	st	Z, r24
     b2a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     b2e:	08 95       	ret

00000b30 <init_PWM_Timer4>:
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     b36:	a0 ea       	ldi	r26, 0xA0	; 160
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	1c 92       	st	X, r1
     b3c:	e1 ea       	ldi	r30, 0xA1	; 161
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	10 82       	st	Z, r1
     b42:	82 e8       	ldi	r24, 0x82	; 130
     b44:	8c 93       	st	X, r24
     b46:	81 e1       	ldi	r24, 0x11	; 17
     b48:	80 83       	st	Z, r24
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	9f e1       	ldi	r25, 0x1F	; 31
     b4e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     b52:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     b56:	08 95       	ret

00000b58 <init_arduinoData>:
     b58:	ea ed       	ldi	r30, 0xDA	; 218
     b5a:	f3 e0       	ldi	r31, 0x03	; 3
     b5c:	11 82       	std	Z+1, r1	; 0x01
     b5e:	10 82       	st	Z, r1
     b60:	13 82       	std	Z+3, r1	; 0x03
     b62:	12 82       	std	Z+2, r1	; 0x02
     b64:	15 82       	std	Z+5, r1	; 0x05
     b66:	14 82       	std	Z+4, r1	; 0x04
     b68:	17 82       	std	Z+7, r1	; 0x07
     b6a:	16 82       	std	Z+6, r1	; 0x06
     b6c:	11 86       	std	Z+9, r1	; 0x09
     b6e:	10 86       	std	Z+8, r1	; 0x08
     b70:	08 95       	ret

00000b72 <init_rp6Data>:
     b72:	e8 ef       	ldi	r30, 0xF8	; 248
     b74:	f3 e0       	ldi	r31, 0x03	; 3
     b76:	11 82       	std	Z+1, r1	; 0x01
     b78:	10 82       	st	Z, r1
     b7a:	12 82       	std	Z+2, r1	; 0x02
     b7c:	13 82       	std	Z+3, r1	; 0x03
     b7e:	84 e2       	ldi	r24, 0x24	; 36
     b80:	93 e1       	ldi	r25, 0x13	; 19
     b82:	95 83       	std	Z+5, r25	; 0x05
     b84:	84 83       	std	Z+4, r24	; 0x04
     b86:	88 e2       	ldi	r24, 0x28	; 40
     b88:	93 e2       	ldi	r25, 0x23	; 35
     b8a:	97 83       	std	Z+7, r25	; 0x07
     b8c:	86 83       	std	Z+6, r24	; 0x06
     b8e:	88 e8       	ldi	r24, 0x88	; 136
     b90:	93 e1       	ldi	r25, 0x13	; 19
     b92:	91 87       	std	Z+9, r25	; 0x09
     b94:	80 87       	std	Z+8, r24	; 0x08
     b96:	88 ec       	ldi	r24, 0xC8	; 200
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	82 87       	std	Z+10, r24	; 0x0a
     ba0:	93 87       	std	Z+11, r25	; 0x0b
     ba2:	a4 87       	std	Z+12, r26	; 0x0c
     ba4:	b5 87       	std	Z+13, r27	; 0x0d
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	86 87       	std	Z+14, r24	; 0x0e
     baa:	08 95       	ret

00000bac <__vector_42>:
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	0b b6       	in	r0, 0x3b	; 59
     bb8:	0f 92       	push	r0
     bba:	8f 92       	push	r8
     bbc:	9f 92       	push	r9
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
     bea:	63 dd       	rcall	.-1338   	; 0x6b2 <micros>
     bec:	a2 2e       	mov	r10, r18
     bee:	b3 2e       	mov	r11, r19
     bf0:	c4 2e       	mov	r12, r20
     bf2:	d5 2e       	mov	r13, r21
     bf4:	e6 2e       	mov	r14, r22
     bf6:	f7 2e       	mov	r15, r23
     bf8:	08 2f       	mov	r16, r24
     bfa:	19 2f       	mov	r17, r25
     bfc:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <rp6Data+0x2>
     c00:	8f 3f       	cpi	r24, 0xFF	; 255
     c02:	09 f0       	breq	.+2      	; 0xc06 <__vector_42+0x5a>
     c04:	46 c0       	rjmp	.+140    	; 0xc92 <__vector_42+0xe6>
     c06:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <rp6Data>
     c0a:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <rp6Data+0x1>
     c0e:	89 2b       	or	r24, r25
     c10:	09 f4       	brne	.+2      	; 0xc14 <__vector_42+0x68>
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <__vector_42+0xe6>
     c14:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <microsPassed.2081>
     c18:	30 91 81 03 	lds	r19, 0x0381	; 0x800381 <microsPassed.2081+0x1>
     c1c:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <microsPassed.2081+0x2>
     c20:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <microsPassed.2081+0x3>
     c24:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <microsPassed.2081+0x4>
     c28:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <microsPassed.2081+0x5>
     c2c:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <microsPassed.2081+0x6>
     c30:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <microsPassed.2081+0x7>
     c34:	23 3f       	cpi	r18, 0xF3	; 243
     c36:	31 40       	sbci	r19, 0x01	; 1
     c38:	41 05       	cpc	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	81 05       	cpc	r24, r1
     c42:	91 05       	cpc	r25, r1
     c44:	31 f1       	breq	.+76     	; 0xc92 <__vector_42+0xe6>
     c46:	28 f1       	brcs	.+74     	; 0xc92 <__vector_42+0xe6>
     c48:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <microsPassed.2081>
     c4c:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <microsPassed.2081+0x1>
     c50:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <microsPassed.2081+0x2>
     c54:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <microsPassed.2081+0x3>
     c58:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <microsPassed.2081+0x4>
     c5c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <microsPassed.2081+0x5>
     c60:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <microsPassed.2081+0x6>
     c64:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <microsPassed.2081+0x7>
     c68:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     c6c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     c70:	89 2b       	or	r24, r25
     c72:	59 f4       	brne	.+22     	; 0xc8a <__vector_42+0xde>
     c74:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     c78:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
     c80:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     c84:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <__vector_42+0xe6>
     c8a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     c8e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     c92:	0f dd       	rcall	.-1506   	; 0x6b2 <micros>
     c94:	82 2e       	mov	r8, r18
     c96:	93 2e       	mov	r9, r19
     c98:	d4 2f       	mov	r29, r20
     c9a:	c5 2f       	mov	r28, r21
     c9c:	b6 2f       	mov	r27, r22
     c9e:	a7 2f       	mov	r26, r23
     ca0:	f8 2f       	mov	r31, r24
     ca2:	e9 2f       	mov	r30, r25
     ca4:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <microsPassed.2081>
     ca8:	30 91 81 03 	lds	r19, 0x0381	; 0x800381 <microsPassed.2081+0x1>
     cac:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <microsPassed.2081+0x2>
     cb0:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <microsPassed.2081+0x3>
     cb4:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <microsPassed.2081+0x4>
     cb8:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <microsPassed.2081+0x5>
     cbc:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <microsPassed.2081+0x6>
     cc0:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <microsPassed.2081+0x7>
     cc4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__subdi3>
     cc8:	a8 2c       	mov	r10, r8
     cca:	b9 2c       	mov	r11, r9
     ccc:	cd 2e       	mov	r12, r29
     cce:	dc 2e       	mov	r13, r28
     cd0:	eb 2e       	mov	r14, r27
     cd2:	fa 2e       	mov	r15, r26
     cd4:	0f 2f       	mov	r16, r31
     cd6:	1e 2f       	mov	r17, r30
     cd8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__adddi3>
     cdc:	20 93 80 03 	sts	0x0380, r18	; 0x800380 <microsPassed.2081>
     ce0:	30 93 81 03 	sts	0x0381, r19	; 0x800381 <microsPassed.2081+0x1>
     ce4:	40 93 82 03 	sts	0x0382, r20	; 0x800382 <microsPassed.2081+0x2>
     ce8:	50 93 83 03 	sts	0x0383, r21	; 0x800383 <microsPassed.2081+0x3>
     cec:	60 93 84 03 	sts	0x0384, r22	; 0x800384 <microsPassed.2081+0x4>
     cf0:	70 93 85 03 	sts	0x0385, r23	; 0x800385 <microsPassed.2081+0x5>
     cf4:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <microsPassed.2081+0x6>
     cf8:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <microsPassed.2081+0x7>
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	bf 90       	pop	r11
     d26:	af 90       	pop	r10
     d28:	9f 90       	pop	r9
     d2a:	8f 90       	pop	r8
     d2c:	0f 90       	pop	r0
     d2e:	0b be       	out	0x3b, r0	; 59
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	0f 90       	pop	r0
     d36:	1f 90       	pop	r1
     d38:	18 95       	reti

00000d3a <arduinoDataInterpreter>:
     d3a:	aa ed       	ldi	r26, 0xDA	; 218
     d3c:	b3 e0       	ldi	r27, 0x03	; 3
     d3e:	ee eb       	ldi	r30, 0xBE	; 190
     d40:	f3 e0       	ldi	r31, 0x03	; 3
     d42:	81 81       	ldd	r24, Z+1	; 0x01
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	98 2f       	mov	r25, r24
     d48:	88 27       	eor	r24, r24
     d4a:	22 81       	ldd	r18, Z+2	; 0x02
     d4c:	82 0f       	add	r24, r18
     d4e:	91 1d       	adc	r25, r1
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	9c 93       	st	X, r25
     d54:	8e 93       	st	-X, r24
     d56:	83 81       	ldd	r24, Z+3	; 0x03
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	98 2f       	mov	r25, r24
     d5c:	88 27       	eor	r24, r24
     d5e:	24 81       	ldd	r18, Z+4	; 0x04
     d60:	82 0f       	add	r24, r18
     d62:	91 1d       	adc	r25, r1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	85 81       	ldd	r24, Z+5	; 0x05
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	98 2f       	mov	r25, r24
     d72:	88 27       	eor	r24, r24
     d74:	26 81       	ldd	r18, Z+6	; 0x06
     d76:	82 0f       	add	r24, r18
     d78:	91 1d       	adc	r25, r1
     d7a:	15 96       	adiw	r26, 0x05	; 5
     d7c:	9c 93       	st	X, r25
     d7e:	8e 93       	st	-X, r24
     d80:	14 97       	sbiw	r26, 0x04	; 4
     d82:	87 81       	ldd	r24, Z+7	; 0x07
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	98 2f       	mov	r25, r24
     d88:	88 27       	eor	r24, r24
     d8a:	20 85       	ldd	r18, Z+8	; 0x08
     d8c:	82 0f       	add	r24, r18
     d8e:	91 1d       	adc	r25, r1
     d90:	17 96       	adiw	r26, 0x07	; 7
     d92:	9c 93       	st	X, r25
     d94:	8e 93       	st	-X, r24
     d96:	16 97       	sbiw	r26, 0x06	; 6
     d98:	81 85       	ldd	r24, Z+9	; 0x09
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	98 2f       	mov	r25, r24
     d9e:	88 27       	eor	r24, r24
     da0:	22 85       	ldd	r18, Z+10	; 0x0a
     da2:	82 0f       	add	r24, r18
     da4:	91 1d       	adc	r25, r1
     da6:	19 96       	adiw	r26, 0x09	; 9
     da8:	9c 93       	st	X, r25
     daa:	8e 93       	st	-X, r24
     dac:	18 97       	sbiw	r26, 0x08	; 8
     dae:	08 95       	ret

00000db0 <I2C_receiveInterpreter>:
     db0:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <receiveDataTWI>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	09 f4       	brne	.+2      	; 0xdba <I2C_receiveInterpreter+0xa>
     db8:	c0 cf       	rjmp	.-128    	; 0xd3a <arduinoDataInterpreter>
     dba:	08 95       	ret

00000dbc <clearSendData>:
     dbc:	e4 ee       	ldi	r30, 0xE4	; 228
     dbe:	f3 e0       	ldi	r31, 0x03	; 3
     dc0:	88 ef       	ldi	r24, 0xF8	; 248
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	11 92       	st	Z+, r1
     dc6:	e8 17       	cp	r30, r24
     dc8:	f9 07       	cpc	r31, r25
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <clearSendData+0x8>
     dcc:	08 95       	ret

00000dce <clearReceiveData>:
     dce:	ee eb       	ldi	r30, 0xBE	; 190
     dd0:	f3 e0       	ldi	r31, 0x03	; 3
     dd2:	82 ed       	ldi	r24, 0xD2	; 210
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	11 92       	st	Z+, r1
     dd8:	e8 17       	cp	r30, r24
     dda:	f9 07       	cpc	r31, r25
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <clearReceiveData+0x8>
     dde:	08 95       	ret

00000de0 <__vector_39>:
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	0b b6       	in	r0, 0x3b	; 59
     dec:	0f 92       	push	r0
     dee:	af 92       	push	r10
     df0:	bf 92       	push	r11
     df2:	cf 92       	push	r12
     df4:	df 92       	push	r13
     df6:	ef 92       	push	r14
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
     e1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e1e:	80 35       	cpi	r24, 0x50	; 80
     e20:	c1 f0       	breq	.+48     	; 0xe52 <__vector_39+0x72>
     e22:	88 35       	cpi	r24, 0x58	; 88
     e24:	a9 f1       	breq	.+106    	; 0xe90 <__vector_39+0xb0>
     e26:	80 34       	cpi	r24, 0x40	; 64
     e28:	09 f0       	breq	.+2      	; 0xe2c <__vector_39+0x4c>
     e2a:	8a c0       	rjmp	.+276    	; 0xf40 <__vector_39+0x160>
     e2c:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <compassFlag>
     e30:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <compassFlag+0x1>
     e34:	89 2b       	or	r24, r25
     e36:	21 f0       	breq	.+8      	; 0xe40 <__vector_39+0x60>
     e38:	85 e8       	ldi	r24, 0x85	; 133
     e3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e3e:	80 c0       	rjmp	.+256    	; 0xf40 <__vector_39+0x160>
     e40:	c6 df       	rcall	.-116    	; 0xdce <clearReceiveData>
     e42:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <bytecounter.2064+0x1>
     e46:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <bytecounter.2064>
     e4a:	85 ec       	ldi	r24, 0xC5	; 197
     e4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e50:	77 c0       	rjmp	.+238    	; 0xf40 <__vector_39+0x160>
     e52:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <bytecounter.2064>
     e56:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <bytecounter.2064+0x1>
     e5a:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e5e:	fc 01       	movw	r30, r24
     e60:	e2 54       	subi	r30, 0x42	; 66
     e62:	fc 4f       	sbci	r31, 0xFC	; 252
     e64:	20 83       	st	Z, r18
     e66:	82 31       	cpi	r24, 0x12	; 18
     e68:	91 05       	cpc	r25, r1
     e6a:	4c f4       	brge	.+18     	; 0xe7e <__vector_39+0x9e>
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <bytecounter.2064+0x1>
     e72:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <bytecounter.2064>
     e76:	85 ec       	ldi	r24, 0xC5	; 197
     e78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e7c:	61 c0       	rjmp	.+194    	; 0xf40 <__vector_39+0x160>
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <bytecounter.2064+0x1>
     e84:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <bytecounter.2064>
     e88:	85 e8       	ldi	r24, 0x85	; 133
     e8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e8e:	58 c0       	rjmp	.+176    	; 0xf40 <__vector_39+0x160>
     e90:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <compassFlag>
     e94:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <compassFlag+0x1>
     e98:	89 2b       	or	r24, r25
     e9a:	71 f4       	brne	.+28     	; 0xeb8 <__vector_39+0xd8>
     e9c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ea0:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <bytecounter.2064>
     ea4:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <bytecounter.2064+0x1>
     ea8:	e2 54       	subi	r30, 0x42	; 66
     eaa:	fc 4f       	sbci	r31, 0xFC	; 252
     eac:	80 83       	st	Z, r24
     eae:	85 e9       	ldi	r24, 0x95	; 149
     eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     eb4:	7d df       	rcall	.-262    	; 0xdb0 <I2C_receiveInterpreter>
     eb6:	44 c0       	rjmp	.+136    	; 0xf40 <__vector_39+0x160>
     eb8:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ebc:	c8 ef       	ldi	r28, 0xF8	; 248
     ebe:	d3 e0       	ldi	r29, 0x03	; 3
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	03 e0       	ldi	r16, 0x03	; 3
     ed0:	0e 94 24 11 	call	0x2248	; 0x2248 <__ashldi3>
     ed4:	a2 2e       	mov	r10, r18
     ed6:	b3 2e       	mov	r11, r19
     ed8:	c4 2e       	mov	r12, r20
     eda:	d5 2e       	mov	r13, r21
     edc:	e6 2e       	mov	r14, r22
     ede:	f7 2e       	mov	r15, r23
     ee0:	e8 2f       	mov	r30, r24
     ee2:	19 2f       	mov	r17, r25
     ee4:	02 e0       	ldi	r16, 0x02	; 2
     ee6:	0e 94 24 11 	call	0x2248	; 0x2248 <__ashldi3>
     eea:	0e 2f       	mov	r16, r30
     eec:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__subdi3>
     ef0:	a2 2e       	mov	r10, r18
     ef2:	b3 2e       	mov	r11, r19
     ef4:	c4 2e       	mov	r12, r20
     ef6:	d5 2e       	mov	r13, r21
     ef8:	e6 2e       	mov	r14, r22
     efa:	f7 2e       	mov	r15, r23
     efc:	e8 2f       	mov	r30, r24
     efe:	19 2f       	mov	r17, r25
     f00:	04 e0       	ldi	r16, 0x04	; 4
     f02:	0e 94 24 11 	call	0x2248	; 0x2248 <__ashldi3>
     f06:	0e 2f       	mov	r16, r30
     f08:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__subdi3>
     f0c:	aa 24       	eor	r10, r10
     f0e:	aa 94       	dec	r10
     f10:	b1 2c       	mov	r11, r1
     f12:	c1 2c       	mov	r12, r1
     f14:	d1 2c       	mov	r13, r1
     f16:	e1 2c       	mov	r14, r1
     f18:	f1 2c       	mov	r15, r1
     f1a:	00 e0       	ldi	r16, 0x00	; 0
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__udivdi3>
     f22:	2f 87       	std	Y+15, r18	; 0x0f
     f24:	38 8b       	std	Y+16, r19	; 0x10
     f26:	49 8b       	std	Y+17, r20	; 0x11
     f28:	5a 8b       	std	Y+18, r21	; 0x12
     f2a:	6b 8b       	std	Y+19, r22	; 0x13
     f2c:	7c 8b       	std	Y+20, r23	; 0x14
     f2e:	8d 8b       	std	Y+21, r24	; 0x15
     f30:	9e 8b       	std	Y+22, r25	; 0x16
     f32:	85 e9       	ldi	r24, 0x95	; 149
     f34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f38:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <compassFlag+0x1>
     f3c:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <compassFlag>
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	bf 90       	pop	r11
     f6a:	af 90       	pop	r10
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <TWIwaitUntilReady>:
>>>>>>> Stashed changes


void TWIwaitUntilReady(){
	while (!(TWCR & (1 << TWINT)));
<<<<<<< Updated upstream
     bc4:	ec eb       	ldi	r30, 0xBC	; 188
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	88 23       	and	r24, r24
     bcc:	ec f7       	brge	.-6      	; 0xbc8 <TWIwaitUntilReady+0x4>
}
     bce:	08 95       	ret

00000bd0 <checkCode>:


void checkCode(uint8_t code){
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	cf 5f       	subi	r28, 0xFF	; 255
     bda:	d1 09       	sbc	r29, r1
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
=======
     f7a:	ec eb       	ldi	r30, 0xBC	; 188
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	88 23       	and	r24, r24
     f82:	ec f7       	brge	.-6      	; 0xf7e <TWIwaitUntilReady+0x4>
}
     f84:	08 95       	ret

00000f86 <checkCode>:


void checkCode(uint8_t code){
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	cf 5f       	subi	r28, 0xFF	; 255
     f90:	d1 09       	sbc	r29, r1
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
>>>>>>> Stashed changes
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
<<<<<<< Updated upstream
     be6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
=======
     f9c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
>>>>>>> Stashed changes
	while (!(TWCR & (1 << TWINT)));
}


void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
<<<<<<< Updated upstream
     bea:	98 7f       	andi	r25, 0xF8	; 248
     bec:	89 17       	cp	r24, r25
     bee:	89 f0       	breq	.+34     	; 0xc12 <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     bf0:	8c e0       	ldi	r24, 0x0C	; 12
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	68 d3       	rcall	.+1744   	; 0x12c6 <writeString>
=======
     fa0:	98 7f       	andi	r25, 0xF8	; 248
     fa2:	89 17       	cp	r24, r25
     fa4:	89 f0       	breq	.+34     	; 0xfc8 <checkCode+0x42>
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
     fa6:	8c e0       	ldi	r24, 0x0C	; 12
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	ea d3       	rcall	.+2004   	; 0x1780 <writeString>
>>>>>>> Stashed changes
	TWISendTransmit();
}


uint8_t TWIGetStatus(){
	return (TWSR & 0xF8);
<<<<<<< Updated upstream
     bf6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
=======
     fac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
>>>>>>> Stashed changes
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
<<<<<<< Updated upstream
     bfa:	88 7f       	andi	r24, 0xF8	; 248
     bfc:	40 e1       	ldi	r20, 0x10	; 16
     bfe:	be 01       	movw	r22, r28
     c00:	6f 5f       	subi	r22, 0xFF	; 255
     c02:	7f 4f       	sbci	r23, 0xFF	; 255
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__itoa_ncheck>
=======
     fb0:	88 7f       	andi	r24, 0xF8	; 248
     fb2:	40 e1       	ldi	r20, 0x10	; 16
     fb4:	be 01       	movw	r22, r28
     fb6:	6f 5f       	subi	r22, 0xFF	; 255
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 9d 11 	call	0x233a	; 0x233a <__itoa_ncheck>
>>>>>>> Stashed changes

void checkCode(uint8_t code){
	if (TWIGetStatus() != code){
		char buffer[255];
		writeString("\n\n\rERROR: Wrong status! Code retrieved: 0x");
		writeString( itoa( TWIGetStatus(), buffer, 16) );
<<<<<<< Updated upstream
     c0a:	5d d3       	rcall	.+1722   	; 0x12c6 <writeString>
		writeString("\n\n\r");
     c0c:	87 e3       	ldi	r24, 0x37	; 55
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	5a d3       	rcall	.+1716   	; 0x12c6 <writeString>
	}
}
     c12:	c1 50       	subi	r28, 0x01	; 1
     c14:	df 4f       	sbci	r29, 0xFF	; 255
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	c8 2f       	mov	r28, r24
     c3a:	8b 01       	movw	r16, r22
	
	TWISendStart();
     c3c:	0f 2e       	mov	r0, r31
     c3e:	fc eb       	ldi	r31, 0xBC	; 188
     c40:	cf 2e       	mov	r12, r31
     c42:	d1 2c       	mov	r13, r1
     c44:	f0 2d       	mov	r31, r0
     c46:	85 ea       	ldi	r24, 0xA5	; 165
     c48:	f6 01       	movw	r30, r12
     c4a:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     c4c:	bb df       	rcall	.-138    	; 0xbc4 <TWIwaitUntilReady>
	checkCode(0x08);
     c4e:	88 e0       	ldi	r24, 0x08	; 8
     c50:	bf df       	rcall	.-130    	; 0xbd0 <checkCode>
	
	TWIWrite((address << 1));
     c52:	cc 0f       	add	r28, r28
=======
     fc0:	df d3       	rcall	.+1982   	; 0x1780 <writeString>
		writeString("\n\n\r");
     fc2:	87 e3       	ldi	r24, 0x37	; 55
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	dc d3       	rcall	.+1976   	; 0x1780 <writeString>
	}
}
     fc8:	c1 50       	subi	r28, 0x01	; 1
     fca:	df 4f       	sbci	r29, 0xFF	; 255
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <writeToSlave>:


void writeToSlave(uint8_t address, uint8_t dataByte[]){
     fdc:	af 92       	push	r10
     fde:	bf 92       	push	r11
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	c8 2f       	mov	r28, r24
     ff0:	8b 01       	movw	r16, r22
	
	TWISendStart();
     ff2:	0f 2e       	mov	r0, r31
     ff4:	fc eb       	ldi	r31, 0xBC	; 188
     ff6:	cf 2e       	mov	r12, r31
     ff8:	d1 2c       	mov	r13, r1
     ffa:	f0 2d       	mov	r31, r0
     ffc:	85 ea       	ldi	r24, 0xA5	; 165
     ffe:	f6 01       	movw	r30, r12
    1000:	80 83       	st	Z, r24
	TWIwaitUntilReady();
    1002:	bb df       	rcall	.-138    	; 0xf7a <TWIwaitUntilReady>
	checkCode(0x08);
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	bf df       	rcall	.-130    	; 0xf86 <checkCode>
	
	TWIWrite((address << 1));
    1008:	cc 0f       	add	r28, r28
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     c54:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     c58:	85 e8       	ldi	r24, 0x85	; 133
     c5a:	f6 01       	movw	r30, r12
=======
    100a:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
    100e:	85 e8       	ldi	r24, 0x85	; 133
    1010:	f6 01       	movw	r30, r12
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     c5c:	80 83       	st	Z, r24
	checkCode(0x18);
     c5e:	b2 df       	rcall	.-156    	; 0xbc4 <TWIwaitUntilReady>
     c60:	88 e1       	ldi	r24, 0x18	; 24
     c62:	b6 df       	rcall	.-148    	; 0xbd0 <checkCode>
     c64:	e8 01       	movw	r28, r16
     c66:	0c 5e       	subi	r16, 0xEC	; 236
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
=======
    1012:	80 83       	st	Z, r24
	checkCode(0x18);
    1014:	b2 df       	rcall	.-156    	; 0xf7a <TWIwaitUntilReady>
    1016:	88 e1       	ldi	r24, 0x18	; 24
    1018:	b6 df       	rcall	.-148    	; 0xf86 <checkCode>
    101a:	e8 01       	movw	r28, r16
    101c:	0c 5e       	subi	r16, 0xEC	; 236
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     c6a:	0f 2e       	mov	r0, r31
     c6c:	fb eb       	ldi	r31, 0xBB	; 187
     c6e:	af 2e       	mov	r10, r31
     c70:	b1 2c       	mov	r11, r1
     c72:	f0 2d       	mov	r31, r0
	TWISendTransmit();
     c74:	0f 2e       	mov	r0, r31
     c76:	f5 e8       	ldi	r31, 0x85	; 133
     c78:	ff 2e       	mov	r15, r31
     c7a:	f0 2d       	mov	r31, r0
=======
    1020:	0f 2e       	mov	r0, r31
    1022:	fb eb       	ldi	r31, 0xBB	; 187
    1024:	af 2e       	mov	r10, r31
    1026:	b1 2c       	mov	r11, r1
    1028:	f0 2d       	mov	r31, r0
	TWISendTransmit();
    102a:	0f 2e       	mov	r0, r31
    102c:	f5 e8       	ldi	r31, 0x85	; 133
    102e:	ff 2e       	mov	r15, r31
    1030:	f0 2d       	mov	r31, r0
>>>>>>> Stashed changes
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
<<<<<<< Updated upstream
     c7c:	89 91       	ld	r24, Y+
=======
    1032:	89 91       	ld	r24, Y+
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     c7e:	f5 01       	movw	r30, r10
	TWISendTransmit();
     c80:	80 83       	st	Z, r24
=======
    1034:	f5 01       	movw	r30, r10
	TWISendTransmit();
    1036:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
<<<<<<< Updated upstream
     c82:	f6 01       	movw	r30, r12
     c84:	f0 82       	st	Z, r15
		checkCode(0x28);
     c86:	9e df       	rcall	.-196    	; 0xbc4 <TWIwaitUntilReady>
     c88:	88 e2       	ldi	r24, 0x28	; 40
     c8a:	a2 df       	rcall	.-188    	; 0xbd0 <checkCode>
=======
    1038:	f6 01       	movw	r30, r12
    103a:	f0 82       	st	Z, r15
		checkCode(0x28);
    103c:	9e df       	rcall	.-196    	; 0xf7a <TWIwaitUntilReady>
    103e:	88 e2       	ldi	r24, 0x28	; 40
    1040:	a2 df       	rcall	.-188    	; 0xf86 <checkCode>
>>>>>>> Stashed changes
	
	TWIWrite((address << 1));
	TWIwaitUntilReady();
	checkCode(0x18);
	
	for(int i = 0; i < DATASIZE; i++){
<<<<<<< Updated upstream
     c8c:	c0 17       	cp	r28, r16
     c8e:	d1 07       	cpc	r29, r17
     c90:	a9 f7       	brne	.-22     	; 0xc7c <writeToSlave+0x56>
=======
    1042:	c0 17       	cp	r28, r16
    1044:	d1 07       	cpc	r29, r17
    1046:	a9 f7       	brne	.-22     	; 0x1032 <writeToSlave+0x56>
>>>>>>> Stashed changes
		TWIWrite(dataByte[i]);
		TWIwaitUntilReady();
		checkCode(0x28);
	}
	
	TWISendStop();
<<<<<<< Updated upstream
     c92:	85 e9       	ldi	r24, 0x95	; 149
     c94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	08 95       	ret

00000cac <rp6DataConstructor>:
	arduinoData.distanceDrivenR = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
=======
    1048:	85 e9       	ldi	r24, 0x95	; 149
    104a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	08 95       	ret

00001062 <rp6DataConstructor>:
	arduinoData.actualRightMotorSpeed = (receiveDataTWI[7] << 8) + receiveDataTWI[8];
>>>>>>> Stashed changes
	arduinoData.totalDistance = (receiveDataTWI[9] << 8) + receiveDataTWI[10];
}


void rp6DataConstructor(){
<<<<<<< Updated upstream
     cac:	0f 93       	push	r16
     cae:	cf 93       	push	r28
	clearSendData();
     cb0:	ab de       	rcall	.-682    	; 0xa08 <clearSendData>
	
	sendDataTWI[0] = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
     cb8:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rp6Data>
     cbc:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <rp6Data+0x1>
     cc0:	85 36       	cpi	r24, 0x65	; 101
     cc2:	91 05       	cpc	r25, r1
     cc4:	30 f0       	brcs	.+12     	; 0xcd2 <rp6DataConstructor+0x26>
     cc6:	84 e6       	ldi	r24, 0x64	; 100
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <rp6Data+0x1>
     cce:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
     cd2:	a0 e7       	ldi	r26, 0x70	; 112
     cd4:	b3 e0       	ldi	r27, 0x03	; 3
     cd6:	e4 e8       	ldi	r30, 0x84	; 132
     cd8:	f3 e0       	ldi	r31, 0x03	; 3
     cda:	80 81       	ld	r24, Z
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	8c 93       	st	X, r24
     ce0:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	8c 93       	st	X, r24
     cea:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
     cec:	83 81       	ldd	r24, Z+3	; 0x03
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	13 96       	adiw	r26, 0x03	; 3
     cf2:	8c 93       	st	X, r24
     cf4:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
     cf6:	84 81       	ldd	r24, Z+4	; 0x04
     cf8:	95 81       	ldd	r25, Z+5	; 0x05
     cfa:	14 96       	adiw	r26, 0x04	; 4
     cfc:	9c 93       	st	X, r25
     cfe:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
     d00:	15 96       	adiw	r26, 0x05	; 5
     d02:	8c 93       	st	X, r24
     d04:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
     d06:	86 81       	ldd	r24, Z+6	; 0x06
     d08:	97 81       	ldd	r25, Z+7	; 0x07
     d0a:	16 96       	adiw	r26, 0x06	; 6
     d0c:	9c 93       	st	X, r25
     d0e:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
     d10:	17 96       	adiw	r26, 0x07	; 7
     d12:	8c 93       	st	X, r24
     d14:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
     d16:	80 85       	ldd	r24, Z+8	; 0x08
     d18:	91 85       	ldd	r25, Z+9	; 0x09
     d1a:	18 96       	adiw	r26, 0x08	; 8
     d1c:	9c 93       	st	X, r25
     d1e:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
     d20:	19 96       	adiw	r26, 0x09	; 9
     d22:	8c 93       	st	X, r24
     d24:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
     d26:	82 85       	ldd	r24, Z+10	; 0x0a
     d28:	93 85       	ldd	r25, Z+11	; 0x0b
     d2a:	1a 96       	adiw	r26, 0x0a	; 10
     d2c:	9c 93       	st	X, r25
     d2e:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
     d30:	1b 96       	adiw	r26, 0x0b	; 11
     d32:	8c 93       	st	X, r24
     d34:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
     d36:	86 85       	ldd	r24, Z+14	; 0x0e
     d38:	1c 96       	adiw	r26, 0x0c	; 12
     d3a:	8c 93       	st	X, r24
     d3c:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
     d3e:	c7 85       	ldd	r28, Z+15	; 0x0f
     d40:	30 89       	ldd	r19, Z+16	; 0x10
     d42:	41 89       	ldd	r20, Z+17	; 0x11
     d44:	52 89       	ldd	r21, Z+18	; 0x12
     d46:	63 89       	ldd	r22, Z+19	; 0x13
     d48:	74 89       	ldd	r23, Z+20	; 0x14
     d4a:	2c 2f       	mov	r18, r28
     d4c:	85 89       	ldd	r24, Z+21	; 0x15
     d4e:	96 89       	ldd	r25, Z+22	; 0x16
     d50:	08 e0       	ldi	r16, 0x08	; 8
     d52:	75 d7       	rcall	.+3818   	; 0x1c3e <__lshrdi3>
     d54:	1d 96       	adiw	r26, 0x0d	; 13
     d56:	2c 93       	st	X, r18
     d58:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
     d5a:	1e 96       	adiw	r26, 0x0e	; 14
     d5c:	cc 93       	st	X, r28
     d5e:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
     d60:	1f 96       	adiw	r26, 0x0f	; 15
     d62:	1c 92       	st	X, r1
     d64:	1f 97       	sbiw	r26, 0x0f	; 15
     d66:	50 96       	adiw	r26, 0x10	; 16
     d68:	1c 92       	st	X, r1
     d6a:	50 97       	sbiw	r26, 0x10	; 16
     d6c:	51 96       	adiw	r26, 0x11	; 17
     d6e:	1c 92       	st	X, r1
     d70:	51 97       	sbiw	r26, 0x11	; 17
     d72:	52 96       	adiw	r26, 0x12	; 18
     d74:	1c 92       	st	X, r1
     d76:	52 97       	sbiw	r26, 0x12	; 18
     d78:	53 96       	adiw	r26, 0x13	; 19
     d7a:	1c 92       	st	X, r1
     d7c:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
     d7e:	bd 01       	movw	r22, r26
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	51 df       	rcall	.-350    	; 0xc26 <writeToSlave>
}
     d84:	cf 91       	pop	r28
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <readFromCompass>:
=======
    1062:	0f 93       	push	r16
    1064:	cf 93       	push	r28
	clearSendData();
    1066:	aa de       	rcall	.-684    	; 0xdbc <clearSendData>
	
	sendDataTWI[0] = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <sendDataTWI>
	if(rp6Data.driveSpeed > 100){rp6Data.driveSpeed = 100;}
    106e:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <rp6Data>
    1072:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <rp6Data+0x1>
    1076:	85 36       	cpi	r24, 0x65	; 101
    1078:	91 05       	cpc	r25, r1
    107a:	30 f0       	brcs	.+12     	; 0x1088 <rp6DataConstructor+0x26>
    107c:	84 e6       	ldi	r24, 0x64	; 100
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <rp6Data+0x1>
    1084:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <rp6Data>
	sendDataTWI[1] = rp6Data.driveSpeed;
    1088:	a4 ee       	ldi	r26, 0xE4	; 228
    108a:	b3 e0       	ldi	r27, 0x03	; 3
    108c:	e8 ef       	ldi	r30, 0xF8	; 248
    108e:	f3 e0       	ldi	r31, 0x03	; 3
    1090:	80 81       	ld	r24, Z
    1092:	11 96       	adiw	r26, 0x01	; 1
    1094:	8c 93       	st	X, r24
    1096:	11 97       	sbiw	r26, 0x01	; 1
	sendDataTWI[2] = rp6Data.driveDirection + 1;
    1098:	82 81       	ldd	r24, Z+2	; 0x02
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	12 96       	adiw	r26, 0x02	; 2
    109e:	8c 93       	st	X, r24
    10a0:	12 97       	sbiw	r26, 0x02	; 2
	sendDataTWI[3] = rp6Data.turnDirection + 1;
    10a2:	83 81       	ldd	r24, Z+3	; 0x03
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	13 96       	adiw	r26, 0x03	; 3
    10a8:	8c 93       	st	X, r24
    10aa:	13 97       	sbiw	r26, 0x03	; 3
	
	sendDataTWI[4] = (rp6Data.accelerationRate >> 8);
    10ac:	84 81       	ldd	r24, Z+4	; 0x04
    10ae:	95 81       	ldd	r25, Z+5	; 0x05
    10b0:	14 96       	adiw	r26, 0x04	; 4
    10b2:	9c 93       	st	X, r25
    10b4:	14 97       	sbiw	r26, 0x04	; 4
	sendDataTWI[5] = rp6Data.accelerationRate;
    10b6:	15 96       	adiw	r26, 0x05	; 5
    10b8:	8c 93       	st	X, r24
    10ba:	15 97       	sbiw	r26, 0x05	; 5
	
	sendDataTWI[6] = (rp6Data.turnRate >> 8);
    10bc:	86 81       	ldd	r24, Z+6	; 0x06
    10be:	97 81       	ldd	r25, Z+7	; 0x07
    10c0:	16 96       	adiw	r26, 0x06	; 6
    10c2:	9c 93       	st	X, r25
    10c4:	16 97       	sbiw	r26, 0x06	; 6
	sendDataTWI[7] = rp6Data.turnRate;
    10c6:	17 96       	adiw	r26, 0x07	; 7
    10c8:	8c 93       	st	X, r24
    10ca:	17 97       	sbiw	r26, 0x07	; 7
	
	sendDataTWI[8] = (rp6Data.driveSpeedThreshold >> 8);
    10cc:	80 85       	ldd	r24, Z+8	; 0x08
    10ce:	91 85       	ldd	r25, Z+9	; 0x09
    10d0:	18 96       	adiw	r26, 0x08	; 8
    10d2:	9c 93       	st	X, r25
    10d4:	18 97       	sbiw	r26, 0x08	; 8
	sendDataTWI[9] = rp6Data.driveSpeedThreshold;
    10d6:	19 96       	adiw	r26, 0x09	; 9
    10d8:	8c 93       	st	X, r24
    10da:	19 97       	sbiw	r26, 0x09	; 9
	
	sendDataTWI[10] = (rp6Data.updateSpeed >> 8);
    10dc:	82 85       	ldd	r24, Z+10	; 0x0a
    10de:	93 85       	ldd	r25, Z+11	; 0x0b
    10e0:	1a 96       	adiw	r26, 0x0a	; 10
    10e2:	9c 93       	st	X, r25
    10e4:	1a 97       	sbiw	r26, 0x0a	; 10
	sendDataTWI[11] = rp6Data.updateSpeed;
    10e6:	1b 96       	adiw	r26, 0x0b	; 11
    10e8:	8c 93       	st	X, r24
    10ea:	1b 97       	sbiw	r26, 0x0b	; 11
	
	sendDataTWI[12] = rp6Data.enableBeeper;
    10ec:	86 85       	ldd	r24, Z+14	; 0x0e
    10ee:	1c 96       	adiw	r26, 0x0c	; 12
    10f0:	8c 93       	st	X, r24
    10f2:	1c 97       	sbiw	r26, 0x0c	; 12
	
	sendDataTWI[13] = (rp6Data.compassAngle >> 8);
    10f4:	c7 85       	ldd	r28, Z+15	; 0x0f
    10f6:	30 89       	ldd	r19, Z+16	; 0x10
    10f8:	41 89       	ldd	r20, Z+17	; 0x11
    10fa:	52 89       	ldd	r21, Z+18	; 0x12
    10fc:	63 89       	ldd	r22, Z+19	; 0x13
    10fe:	74 89       	ldd	r23, Z+20	; 0x14
    1100:	2c 2f       	mov	r18, r28
    1102:	85 89       	ldd	r24, Z+21	; 0x15
    1104:	96 89       	ldd	r25, Z+22	; 0x16
    1106:	08 e0       	ldi	r16, 0x08	; 8
    1108:	0e 94 3f 11 	call	0x227e	; 0x227e <__lshrdi3>
    110c:	1d 96       	adiw	r26, 0x0d	; 13
    110e:	2c 93       	st	X, r18
    1110:	1d 97       	sbiw	r26, 0x0d	; 13
	sendDataTWI[14] = rp6Data.compassAngle;
    1112:	1e 96       	adiw	r26, 0x0e	; 14
    1114:	cc 93       	st	X, r28
    1116:	1e 97       	sbiw	r26, 0x0e	; 14
	
	for(int i = 15; i < DATASIZE; i++){
		sendDataTWI[i] = 0;
    1118:	1f 96       	adiw	r26, 0x0f	; 15
    111a:	1c 92       	st	X, r1
    111c:	1f 97       	sbiw	r26, 0x0f	; 15
    111e:	50 96       	adiw	r26, 0x10	; 16
    1120:	1c 92       	st	X, r1
    1122:	50 97       	sbiw	r26, 0x10	; 16
    1124:	51 96       	adiw	r26, 0x11	; 17
    1126:	1c 92       	st	X, r1
    1128:	51 97       	sbiw	r26, 0x11	; 17
    112a:	52 96       	adiw	r26, 0x12	; 18
    112c:	1c 92       	st	X, r1
    112e:	52 97       	sbiw	r26, 0x12	; 18
    1130:	53 96       	adiw	r26, 0x13	; 19
    1132:	1c 92       	st	X, r1
    1134:	53 97       	sbiw	r26, 0x13	; 19
	}
	
	writeToSlave(RP6_ADDRESS, sendDataTWI);
    1136:	bd 01       	movw	r22, r26
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	50 df       	rcall	.-352    	; 0xfdc <writeToSlave>
}
    113c:	cf 91       	pop	r28
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <readFromCompass>:
>>>>>>> Stashed changes
	TWISendStop();
	
}


void readFromCompass(){
<<<<<<< Updated upstream
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
	compassFlag = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <compassFlag+0x1>
     d9e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <compassFlag>
	TWISendStart();
     da2:	cc eb       	ldi	r28, 0xBC	; 188
     da4:	d0 e0       	ldi	r29, 0x00	; 0
     da6:	05 ea       	ldi	r16, 0xA5	; 165
     da8:	08 83       	st	Y, r16
	TWIwaitUntilReady();
     daa:	0c df       	rcall	.-488    	; 0xbc4 <TWIwaitUntilReady>
	checkCode(0x08);
     dac:	88 e0       	ldi	r24, 0x08	; 8
     dae:	10 df       	rcall	.-480    	; 0xbd0 <checkCode>
=======
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
	compassFlag = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <compassFlag+0x1>
    1156:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <compassFlag>
	TWISendStart();
    115a:	cc eb       	ldi	r28, 0xBC	; 188
    115c:	d0 e0       	ldi	r29, 0x00	; 0
    115e:	05 ea       	ldi	r16, 0xA5	; 165
    1160:	08 83       	st	Y, r16
	TWIwaitUntilReady();
    1162:	0b df       	rcall	.-490    	; 0xf7a <TWIwaitUntilReady>
	checkCode(0x08);
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	0f df       	rcall	.-482    	; 0xf86 <checkCode>
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     db0:	0f 2e       	mov	r0, r31
     db2:	fb eb       	ldi	r31, 0xBB	; 187
     db4:	ef 2e       	mov	r14, r31
     db6:	f1 2c       	mov	r15, r1
     db8:	f0 2d       	mov	r31, r0
     dba:	80 ec       	ldi	r24, 0xC0	; 192
     dbc:	f7 01       	movw	r30, r14
     dbe:	80 83       	st	Z, r24
	TWISendTransmit();
     dc0:	15 e8       	ldi	r17, 0x85	; 133
=======
    1168:	0f 2e       	mov	r0, r31
    116a:	fb eb       	ldi	r31, 0xBB	; 187
    116c:	ef 2e       	mov	r14, r31
    116e:	f1 2c       	mov	r15, r1
    1170:	f0 2d       	mov	r31, r0
    1172:	80 ec       	ldi	r24, 0xC0	; 192
    1174:	f7 01       	movw	r30, r14
    1176:	80 83       	st	Z, r24
	TWISendTransmit();
    1178:	15 e8       	ldi	r17, 0x85	; 133
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite(0xC0);
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     dc2:	18 83       	st	Y, r17
	checkCode(0x18);
     dc4:	ff de       	rcall	.-514    	; 0xbc4 <TWIwaitUntilReady>
     dc6:	88 e1       	ldi	r24, 0x18	; 24
     dc8:	03 df       	rcall	.-506    	; 0xbd0 <checkCode>
=======
    117a:	18 83       	st	Y, r17
	checkCode(0x18);
    117c:	fe de       	rcall	.-516    	; 0xf7a <TWIwaitUntilReady>
    117e:	88 e1       	ldi	r24, 0x18	; 24
    1180:	02 df       	rcall	.-508    	; 0xf86 <checkCode>
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	f7 01       	movw	r30, r14
	TWISendTransmit();
     dce:	80 83       	st	Z, r24
=======
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	f7 01       	movw	r30, r14
	TWISendTransmit();
    1186:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	TWIWrite(0xC0);
	TWIwaitUntilReady();
	checkCode(0x18);
	
	TWIWrite(1);
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     dd0:	18 83       	st	Y, r17
	checkCode(0x28);
     dd2:	f8 de       	rcall	.-528    	; 0xbc4 <TWIwaitUntilReady>
     dd4:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
     dd6:	fc de       	rcall	.-520    	; 0xbd0 <checkCode>
	TWIwaitUntilReady();
     dd8:	08 83       	st	Y, r16
	checkCode(0x10);
     dda:	f4 de       	rcall	.-536    	; 0xbc4 <TWIwaitUntilReady>
     ddc:	80 e1       	ldi	r24, 0x10	; 16
     dde:	f8 de       	rcall	.-528    	; 0xbd0 <checkCode>
=======
    1188:	18 83       	st	Y, r17
	checkCode(0x28);
    118a:	f7 de       	rcall	.-530    	; 0xf7a <TWIwaitUntilReady>
    118c:	88 e2       	ldi	r24, 0x28	; 40
	
	TWISendStart();
    118e:	fb de       	rcall	.-522    	; 0xf86 <checkCode>
	TWIwaitUntilReady();
    1190:	08 83       	st	Y, r16
	checkCode(0x10);
    1192:	f3 de       	rcall	.-538    	; 0xf7a <TWIwaitUntilReady>
    1194:	80 e1       	ldi	r24, 0x10	; 16
    1196:	f7 de       	rcall	.-530    	; 0xf86 <checkCode>
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     de0:	81 ec       	ldi	r24, 0xC1	; 193
     de2:	f7 01       	movw	r30, r14
     de4:	80 83       	st	Z, r24
	TWISendTransmit();
     de6:	18 83       	st	Y, r17
=======
    1198:	81 ec       	ldi	r24, 0xC1	; 193
    119a:	f7 01       	movw	r30, r14
    119c:	80 83       	st	Z, r24
	TWISendTransmit();
    119e:	18 83       	st	Y, r17
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x10);
	
	TWIWrite(0xC1);
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     de8:	ed de       	rcall	.-550    	; 0xbc4 <TWIwaitUntilReady>
     dea:	df 91       	pop	r29
}
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	08 95       	ret

00000df8 <readFromSlave>:
     df8:	0f 93       	push	r16


void readFromSlave(uint8_t address){
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	c8 2f       	mov	r28, r24
	
	TWISendStart();
     e00:	0c eb       	ldi	r16, 0xBC	; 188
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	85 ea       	ldi	r24, 0xA5	; 165
     e06:	f8 01       	movw	r30, r16
     e08:	80 83       	st	Z, r24
	TWIwaitUntilReady();
     e0a:	dc de       	rcall	.-584    	; 0xbc4 <TWIwaitUntilReady>
	checkCode(0x08);
     e0c:	88 e0       	ldi	r24, 0x08	; 8
     e0e:	e0 de       	rcall	.-576    	; 0xbd0 <checkCode>
	
	TWIWrite( (address << 1) + 1 );
     e10:	cc 0f       	add	r28, r28
     e12:	cf 5f       	subi	r28, 0xFF	; 255
=======
    11a0:	ec de       	rcall	.-552    	; 0xf7a <TWIwaitUntilReady>
    11a2:	df 91       	pop	r29
}
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	08 95       	ret

000011b0 <readFromSlave>:
    11b0:	0f 93       	push	r16


void readFromSlave(uint8_t address){
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	c8 2f       	mov	r28, r24
	
	TWISendStart();
    11b8:	0c eb       	ldi	r16, 0xBC	; 188
    11ba:	10 e0       	ldi	r17, 0x00	; 0
    11bc:	85 ea       	ldi	r24, 0xA5	; 165
    11be:	f8 01       	movw	r30, r16
    11c0:	80 83       	st	Z, r24
	TWIwaitUntilReady();
    11c2:	db de       	rcall	.-586    	; 0xf7a <TWIwaitUntilReady>
	checkCode(0x08);
    11c4:	88 e0       	ldi	r24, 0x08	; 8
    11c6:	df de       	rcall	.-578    	; 0xf86 <checkCode>
	
	TWIWrite( (address << 1) + 1 );
    11c8:	cc 0f       	add	r28, r28
    11ca:	cf 5f       	subi	r28, 0xFF	; 255
>>>>>>> Stashed changes
}


void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
<<<<<<< Updated upstream
     e14:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
     e18:	85 e8       	ldi	r24, 0x85	; 133
     e1a:	f8 01       	movw	r30, r16
=======
    11cc:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWISendTransmit();
    11d0:	85 e8       	ldi	r24, 0x85	; 133
    11d2:	f8 01       	movw	r30, r16
>>>>>>> Stashed changes
	TWISendStart();
	TWIwaitUntilReady();
	checkCode(0x08);
	
	TWIWrite( (address << 1) + 1 );
	TWIwaitUntilReady();
<<<<<<< Updated upstream
     e1c:	80 83       	st	Z, r24
     e1e:	d2 de       	rcall	.-604    	; 0xbc4 <TWIwaitUntilReady>
	
}
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <__vector_15>:
=======
    11d4:	80 83       	st	Z, r24
    11d6:	d1 de       	rcall	.-606    	; 0xf7a <TWIwaitUntilReady>
	
}
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <__vector_15>:
>>>>>>> Stashed changes
		break;
	}
}


ISR(TIMER2_OVF_vect){
<<<<<<< Updated upstream
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	0b b6       	in	r0, 0x3b	; 59
     e34:	0f 92       	push	r0
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 4){
     e4e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <counter.2069>
     e52:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <counter.2069+0x1>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	91 05       	cpc	r25, r1
     e5a:	11 f4       	brne	.+4      	; 0xe60 <__vector_15+0x38>
		rp6DataConstructor();
     e5c:	27 df       	rcall	.-434    	; 0xcac <rp6DataConstructor>
     e5e:	0d c0       	rjmp	.+26     	; 0xe7a <__vector_15+0x52>
	}else if(counter == 8){
     e60:	88 30       	cpi	r24, 0x08	; 8
     e62:	91 05       	cpc	r25, r1
		readFromCompass();
     e64:	11 f4       	brne	.+4      	; 0xe6a <__vector_15+0x42>
     e66:	91 df       	rcall	.-222    	; 0xd8a <readFromCompass>
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <__vector_15+0x52>
	}else if(counter >= 12){
     e6a:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromSlave(RP6_ADDRESS);
     e6c:	34 f0       	brlt	.+12     	; 0xe7a <__vector_15+0x52>
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	c3 df       	rcall	.-122    	; 0xdf8 <readFromSlave>
		counter = 0;
     e72:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter.2069+0x1>
     e76:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <counter.2069>
	}
	
	counter++;
     e7a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <counter.2069>
     e7e:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <counter.2069+0x1>
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <counter.2069+0x1>
     e88:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <counter.2069>
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0b be       	out	0x3b, r0	; 59
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <turnSignal>:
=======
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	0b b6       	in	r0, 0x3b	; 59
    11ec:	0f 92       	push	r0
    11ee:	2f 93       	push	r18
    11f0:	3f 93       	push	r19
    11f2:	4f 93       	push	r20
    11f4:	5f 93       	push	r21
    11f6:	6f 93       	push	r22
    11f8:	7f 93       	push	r23
    11fa:	8f 93       	push	r24
    11fc:	9f 93       	push	r25
    11fe:	af 93       	push	r26
    1200:	bf 93       	push	r27
    1202:	ef 93       	push	r30
    1204:	ff 93       	push	r31
	static int counter = 0;
	
	if(counter == 4){
    1206:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <counter.2075>
    120a:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <counter.2075+0x1>
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	91 05       	cpc	r25, r1
    1212:	11 f4       	brne	.+4      	; 0x1218 <__vector_15+0x38>
		rp6DataConstructor();
    1214:	26 df       	rcall	.-436    	; 0x1062 <rp6DataConstructor>
    1216:	0d c0       	rjmp	.+26     	; 0x1232 <__vector_15+0x52>
	}else if(counter == 8){
    1218:	88 30       	cpi	r24, 0x08	; 8
    121a:	91 05       	cpc	r25, r1
		readFromCompass();
    121c:	11 f4       	brne	.+4      	; 0x1222 <__vector_15+0x42>
    121e:	91 df       	rcall	.-222    	; 0x1142 <readFromCompass>
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <__vector_15+0x52>
	}else if(counter >= 12){
    1222:	0c 97       	sbiw	r24, 0x0c	; 12
		readFromSlave(RP6_ADDRESS);
    1224:	34 f0       	brlt	.+12     	; 0x1232 <__vector_15+0x52>
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	c3 df       	rcall	.-122    	; 0x11b0 <readFromSlave>
		counter = 0;
    122a:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <counter.2075+0x1>
    122e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <counter.2075>
	}
	
	counter++;
    1232:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <counter.2075>
    1236:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <counter.2075+0x1>
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <counter.2075+0x1>
    1240:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <counter.2075>
}
    1244:	ff 91       	pop	r31
    1246:	ef 91       	pop	r30
    1248:	bf 91       	pop	r27
    124a:	af 91       	pop	r26
    124c:	9f 91       	pop	r25
    124e:	8f 91       	pop	r24
    1250:	7f 91       	pop	r23
    1252:	6f 91       	pop	r22
    1254:	5f 91       	pop	r21
    1256:	4f 91       	pop	r20
    1258:	3f 91       	pop	r19
    125a:	2f 91       	pop	r18
    125c:	0f 90       	pop	r0
    125e:	0b be       	out	0x3b, r0	; 59
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <turnSignal>:
>>>>>>> Stashed changes
	TWIwaitUntilReady();
	
}


void turnSignal(){
<<<<<<< Updated upstream
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	6f 92       	push	r6
     eb8:	7f 92       	push	r7
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
=======
    126a:	4f 92       	push	r4
    126c:	5f 92       	push	r5
    126e:	6f 92       	push	r6
    1270:	7f 92       	push	r7
    1272:	8f 92       	push	r8
    1274:	9f 92       	push	r9
    1276:	af 92       	push	r10
    1278:	bf 92       	push	r11
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
>>>>>>> Stashed changes
	static uint32_t turnSignalDelay = 500000;
	static uint32_t turnSignalStart = 0;
	
	DDRC |= (1 << PINC1);
<<<<<<< Updated upstream
     ece:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
     ed0:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
     ed2:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     ed6:	8f 3f       	cpi	r24, 0xFF	; 255
     ed8:	a9 f5       	brne	.+106    	; 0xf44 <turnSignal+0x92>
		if(turnSignalStart < micros()){
     eda:	40 90 14 03 	lds	r4, 0x0314	; 0x800314 <__data_end>
     ede:	50 90 15 03 	lds	r5, 0x0315	; 0x800315 <__data_end+0x1>
     ee2:	60 90 16 03 	lds	r6, 0x0316	; 0x800316 <__data_end+0x2>
     ee6:	70 90 17 03 	lds	r7, 0x0317	; 0x800317 <__data_end+0x3>
     eea:	d6 db       	rcall	.-2132   	; 0x698 <micros>
     eec:	f2 2f       	mov	r31, r18
     eee:	e3 2f       	mov	r30, r19
     ef0:	c4 2e       	mov	r12, r20
     ef2:	d5 2e       	mov	r13, r21
     ef4:	e6 2e       	mov	r14, r22
     ef6:	f7 2e       	mov	r15, r23
     ef8:	08 2f       	mov	r16, r24
     efa:	19 2f       	mov	r17, r25
     efc:	24 2d       	mov	r18, r4
     efe:	35 2d       	mov	r19, r5
     f00:	46 2d       	mov	r20, r6
     f02:	57 2d       	mov	r21, r7
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	af 2e       	mov	r10, r31
     f0e:	be 2e       	mov	r11, r30
     f10:	d0 d6       	rcall	.+3488   	; 0x1cb2 <__cmpdi2>
     f12:	c0 f4       	brcc	.+48     	; 0xf44 <turnSignal+0x92>
			PORTC ^= (1 << PINC1);	
     f14:	98 b1       	in	r25, 0x08	; 8
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
     f1a:	88 b9       	out	0x08, r24	; 8
     f1c:	bd db       	rcall	.-2182   	; 0x698 <micros>
     f1e:	82 2e       	mov	r8, r18
     f20:	93 2e       	mov	r9, r19
     f22:	a4 2e       	mov	r10, r20
     f24:	b5 2e       	mov	r11, r21
     f26:	80 e2       	ldi	r24, 0x20	; 32
     f28:	88 0e       	add	r8, r24
     f2a:	81 ea       	ldi	r24, 0xA1	; 161
     f2c:	98 1e       	adc	r9, r24
     f2e:	87 e0       	ldi	r24, 0x07	; 7
     f30:	a8 1e       	adc	r10, r24
     f32:	b1 1c       	adc	r11, r1
     f34:	80 92 14 03 	sts	0x0314, r8	; 0x800314 <__data_end>
     f38:	90 92 15 03 	sts	0x0315, r9	; 0x800315 <__data_end+0x1>
     f3c:	a0 92 16 03 	sts	0x0316, r10	; 0x800316 <__data_end+0x2>
     f40:	b0 92 17 03 	sts	0x0317, r11	; 0x800317 <__data_end+0x3>
		}
	}
	if(rp6Data.turnDirection == 1){
     f44:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rp6Data+0x3>
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	a1 f5       	brne	.+104    	; 0xfb4 <turnSignal+0x102>
		if(turnSignalStart < micros()){
     f4c:	40 90 14 03 	lds	r4, 0x0314	; 0x800314 <__data_end>
     f50:	50 90 15 03 	lds	r5, 0x0315	; 0x800315 <__data_end+0x1>
     f54:	60 90 16 03 	lds	r6, 0x0316	; 0x800316 <__data_end+0x2>
     f58:	70 90 17 03 	lds	r7, 0x0317	; 0x800317 <__data_end+0x3>
     f5c:	9d db       	rcall	.-2246   	; 0x698 <micros>
     f5e:	f2 2f       	mov	r31, r18
     f60:	e3 2f       	mov	r30, r19
     f62:	c4 2e       	mov	r12, r20
     f64:	d5 2e       	mov	r13, r21
     f66:	e6 2e       	mov	r14, r22
     f68:	f7 2e       	mov	r15, r23
     f6a:	08 2f       	mov	r16, r24
     f6c:	19 2f       	mov	r17, r25
     f6e:	24 2d       	mov	r18, r4
     f70:	35 2d       	mov	r19, r5
     f72:	46 2d       	mov	r20, r6
     f74:	57 2d       	mov	r21, r7
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	af 2e       	mov	r10, r31
     f80:	be 2e       	mov	r11, r30
     f82:	97 d6       	rcall	.+3374   	; 0x1cb2 <__cmpdi2>
     f84:	b8 f4       	brcc	.+46     	; 0xfb4 <turnSignal+0x102>
			PORTD ^= (1 << PIND7);
     f86:	8b b1       	in	r24, 0x0b	; 11
     f88:	80 58       	subi	r24, 0x80	; 128
     f8a:	8b b9       	out	0x0b, r24	; 11
			turnSignalStart = micros() + turnSignalDelay;
     f8c:	85 db       	rcall	.-2294   	; 0x698 <micros>
     f8e:	82 2e       	mov	r8, r18
     f90:	93 2e       	mov	r9, r19
     f92:	a4 2e       	mov	r10, r20
     f94:	b5 2e       	mov	r11, r21
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	88 0e       	add	r8, r24
     f9a:	81 ea       	ldi	r24, 0xA1	; 161
     f9c:	98 1e       	adc	r9, r24
     f9e:	87 e0       	ldi	r24, 0x07	; 7
     fa0:	a8 1e       	adc	r10, r24
     fa2:	b1 1c       	adc	r11, r1
     fa4:	80 92 14 03 	sts	0x0314, r8	; 0x800314 <__data_end>
     fa8:	90 92 15 03 	sts	0x0315, r9	; 0x800315 <__data_end+0x1>
     fac:	a0 92 16 03 	sts	0x0316, r10	; 0x800316 <__data_end+0x2>
     fb0:	b0 92 17 03 	sts	0x0317, r11	; 0x800317 <__data_end+0x3>
     fb4:	1f 91       	pop	r17
		}
	}
}
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	7f 90       	pop	r7
     fca:	6f 90       	pop	r6
     fcc:	5f 90       	pop	r5
     fce:	4f 90       	pop	r4
     fd0:	08 95       	ret

00000fd2 <main>:
     fd2:	78 94       	sei
*/
=======
    1286:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << PIND7);
    1288:	57 9a       	sbi	0x0a, 7	; 10
	
	if(rp6Data.turnDirection == -1){
    128a:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
    128e:	8f 3f       	cpi	r24, 0xFF	; 255
    1290:	b1 f5       	brne	.+108    	; 0x12fe <turnSignal+0x94>
		if(turnSignalStart < micros()){
    1292:	40 90 7c 03 	lds	r4, 0x037C	; 0x80037c <__data_end>
    1296:	50 90 7d 03 	lds	r5, 0x037D	; 0x80037d <__data_end+0x1>
    129a:	60 90 7e 03 	lds	r6, 0x037E	; 0x80037e <__data_end+0x2>
    129e:	70 90 7f 03 	lds	r7, 0x037F	; 0x80037f <__data_end+0x3>
    12a2:	07 da       	rcall	.-3058   	; 0x6b2 <micros>
    12a4:	f2 2f       	mov	r31, r18
    12a6:	e3 2f       	mov	r30, r19
    12a8:	c4 2e       	mov	r12, r20
    12aa:	d5 2e       	mov	r13, r21
    12ac:	e6 2e       	mov	r14, r22
    12ae:	f7 2e       	mov	r15, r23
    12b0:	08 2f       	mov	r16, r24
    12b2:	19 2f       	mov	r17, r25
    12b4:	24 2d       	mov	r18, r4
    12b6:	35 2d       	mov	r19, r5
    12b8:	46 2d       	mov	r20, r6
    12ba:	57 2d       	mov	r21, r7
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	af 2e       	mov	r10, r31
    12c6:	be 2e       	mov	r11, r30
    12c8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__cmpdi2>
    12cc:	c0 f4       	brcc	.+48     	; 0x12fe <turnSignal+0x94>
			PORTC ^= (1 << PINC1);	
    12ce:	98 b1       	in	r25, 0x08	; 8
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	89 27       	eor	r24, r25
			turnSignalStart = micros() + turnSignalDelay;
    12d4:	88 b9       	out	0x08, r24	; 8
    12d6:	ed d9       	rcall	.-3110   	; 0x6b2 <micros>
    12d8:	82 2e       	mov	r8, r18
    12da:	93 2e       	mov	r9, r19
    12dc:	a4 2e       	mov	r10, r20
    12de:	b5 2e       	mov	r11, r21
    12e0:	80 e2       	ldi	r24, 0x20	; 32
    12e2:	88 0e       	add	r8, r24
    12e4:	81 ea       	ldi	r24, 0xA1	; 161
    12e6:	98 1e       	adc	r9, r24
    12e8:	87 e0       	ldi	r24, 0x07	; 7
    12ea:	a8 1e       	adc	r10, r24
    12ec:	b1 1c       	adc	r11, r1
    12ee:	80 92 7c 03 	sts	0x037C, r8	; 0x80037c <__data_end>
    12f2:	90 92 7d 03 	sts	0x037D, r9	; 0x80037d <__data_end+0x1>
    12f6:	a0 92 7e 03 	sts	0x037E, r10	; 0x80037e <__data_end+0x2>
    12fa:	b0 92 7f 03 	sts	0x037F, r11	; 0x80037f <__data_end+0x3>
		}
	}
	if(rp6Data.turnDirection == 1){
    12fe:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rp6Data+0x3>
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	a1 f5       	brne	.+104    	; 0x136e <turnSignal+0x104>
		if(turnSignalStart < micros()){
    1306:	40 90 7c 03 	lds	r4, 0x037C	; 0x80037c <__data_end>
    130a:	50 90 7d 03 	lds	r5, 0x037D	; 0x80037d <__data_end+0x1>
    130e:	60 90 7e 03 	lds	r6, 0x037E	; 0x80037e <__data_end+0x2>
    1312:	70 90 7f 03 	lds	r7, 0x037F	; 0x80037f <__data_end+0x3>
    1316:	cd d9       	rcall	.-3174   	; 0x6b2 <micros>
    1318:	f2 2f       	mov	r31, r18
    131a:	e3 2f       	mov	r30, r19
    131c:	c4 2e       	mov	r12, r20
    131e:	d5 2e       	mov	r13, r21
    1320:	e6 2e       	mov	r14, r22
    1322:	f7 2e       	mov	r15, r23
    1324:	08 2f       	mov	r16, r24
    1326:	19 2f       	mov	r17, r25
    1328:	24 2d       	mov	r18, r4
    132a:	35 2d       	mov	r19, r5
    132c:	46 2d       	mov	r20, r6
    132e:	57 2d       	mov	r21, r7
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	af 2e       	mov	r10, r31
    133a:	be 2e       	mov	r11, r30
    133c:	da d7       	rcall	.+4020   	; 0x22f2 <__cmpdi2>
    133e:	b8 f4       	brcc	.+46     	; 0x136e <turnSignal+0x104>
			PORTD ^= (1 << PIND7);
    1340:	8b b1       	in	r24, 0x0b	; 11
    1342:	80 58       	subi	r24, 0x80	; 128
			turnSignalStart = micros() + turnSignalDelay;
    1344:	8b b9       	out	0x0b, r24	; 11
    1346:	b5 d9       	rcall	.-3222   	; 0x6b2 <micros>
    1348:	82 2e       	mov	r8, r18
    134a:	93 2e       	mov	r9, r19
    134c:	a4 2e       	mov	r10, r20
    134e:	b5 2e       	mov	r11, r21
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	88 0e       	add	r8, r24
    1354:	81 ea       	ldi	r24, 0xA1	; 161
    1356:	98 1e       	adc	r9, r24
    1358:	87 e0       	ldi	r24, 0x07	; 7
    135a:	a8 1e       	adc	r10, r24
    135c:	b1 1c       	adc	r11, r1
    135e:	80 92 7c 03 	sts	0x037C, r8	; 0x80037c <__data_end>
    1362:	90 92 7d 03 	sts	0x037D, r9	; 0x80037d <__data_end+0x1>
    1366:	a0 92 7e 03 	sts	0x037E, r10	; 0x80037e <__data_end+0x2>
    136a:	b0 92 7f 03 	sts	0x037F, r11	; 0x80037f <__data_end+0x3>
		}
	}
}
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	7f 90       	pop	r7
    1384:	6f 90       	pop	r6
    1386:	5f 90       	pop	r5
    1388:	4f 90       	pop	r4
    138a:	08 95       	ret

0000138c <main>:
uint64_t parcourCommandTimer = 0;
void hardcoreParcour();

//Other functions ---------------------------------
void init_interrupt(){
	sei();									//Enable global interrupts
    138c:	78 94       	sei

>>>>>>> Stashed changes

int main(void){
	//Initialize all functions
	init_interrupt();
	init_micros();
<<<<<<< Updated upstream
     fd4:	03 db       	rcall	.-2554   	; 0x5dc <init_micros>
	init_USART();
     fd6:	02 d9       	rcall	.-3580   	; 0x1dc <init_USART>
	init_TWI();
     fd8:	c1 db       	rcall	.-2174   	; 0x75c <init_TWI>
	init_TWI_Timer2();
     fda:	c9 db       	rcall	.-2158   	; 0x76e <init_TWI_Timer2>
	init_PWM_Timer4();
     fdc:	d5 db       	rcall	.-2134   	; 0x788 <init_PWM_Timer4>
	init_rp6Data();
     fde:	ef db       	rcall	.-2082   	; 0x7be <init_rp6Data>
     fe0:	e7 db       	rcall	.-2098   	; 0x7b0 <init_arduinoData>
	init_arduinoData();
     fe2:	a1 d1       	rcall	.+834    	; 0x1326 <initTimer>
     fe4:	fb d8       	rcall	.-3594   	; 0x1dc <init_USART>
	initTimer();
     fe6:	0f 2e       	mov	r0, r31
	init_USART();
     fe8:	f4 e8       	ldi	r31, 0x84	; 132
     fea:	2f 2e       	mov	r2, r31
=======
    138e:	33 d9       	rcall	.-3482   	; 0x5f6 <init_micros>
	init_USART();
    1390:	0e 94 ef 00 	call	0x1de	; 0x1de <init_USART>
	init_TWI();
	init_TWI_Timer2();
    1394:	b7 db       	rcall	.-2194   	; 0xb04 <init_TWI>
	init_PWM_Timer4();
    1396:	bf db       	rcall	.-2178   	; 0xb16 <init_TWI_Timer2>
	init_rp6Data();
    1398:	cb db       	rcall	.-2154   	; 0xb30 <init_PWM_Timer4>
    139a:	eb db       	rcall	.-2090   	; 0xb72 <init_rp6Data>
	init_arduinoData();
    139c:	dd db       	rcall	.-2118   	; 0xb58 <init_arduinoData>
    139e:	20 d2       	rcall	.+1088   	; 0x17e0 <initTimer>
	initTimer();
    13a0:	0e 94 ef 00 	call	0x1de	; 0x1de <init_USART>
	init_USART();
    13a4:	0f 2e       	mov	r0, r31
>>>>>>> Stashed changes
		if (ultrasonicSensorTimer < micros()) {
			writeString("\f\r");
			writeString("Distance to object: ");
			writeInt(ultrasonicSensor());
			writeString("mm\n\rCompass Angle: ");
			writeInt(rp6Data.compassAngle);
<<<<<<< Updated upstream
     fec:	f3 e0       	ldi	r31, 0x03	; 3
     fee:	3f 2e       	mov	r3, r31
     ff0:	f0 2d       	mov	r31, r0
     ff2:	5f df       	rcall	.-322    	; 0xeb2 <turnSignal>
     ff4:	40 90 46 03 	lds	r4, 0x0346	; 0x800346 <ultrasonicSensorTimer>
=======
    13a6:	f8 ef       	ldi	r31, 0xF8	; 248
    13a8:	2f 2e       	mov	r2, r31
    13aa:	f3 e0       	ldi	r31, 0x03	; 3
    13ac:	3f 2e       	mov	r3, r31
    13ae:	f0 2d       	mov	r31, r0
>>>>>>> Stashed changes
	init_USART();
	//-----------------------
	
	while (1){
		
		turnSignal();
<<<<<<< Updated upstream
     ff8:	50 90 47 03 	lds	r5, 0x0347	; 0x800347 <ultrasonicSensorTimer+0x1>
		
		if(runParcour){
			hardcoreParcour();
		}
		
		if (ultrasonicSensorTimer < micros()) {
     ffc:	60 90 48 03 	lds	r6, 0x0348	; 0x800348 <ultrasonicSensorTimer+0x2>
    1000:	70 90 49 03 	lds	r7, 0x0349	; 0x800349 <ultrasonicSensorTimer+0x3>
    1004:	49 db       	rcall	.-2414   	; 0x698 <micros>
    1006:	f2 2f       	mov	r31, r18
    1008:	e3 2f       	mov	r30, r19
    100a:	c4 2e       	mov	r12, r20
    100c:	d5 2e       	mov	r13, r21
    100e:	e6 2e       	mov	r14, r22
    1010:	f7 2e       	mov	r15, r23
    1012:	08 2f       	mov	r16, r24
    1014:	19 2f       	mov	r17, r25
    1016:	24 2d       	mov	r18, r4
    1018:	35 2d       	mov	r19, r5
    101a:	46 2d       	mov	r20, r6
    101c:	57 2d       	mov	r21, r7
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	af 2e       	mov	r10, r31
    1028:	be 2e       	mov	r11, r30
    102a:	43 d6       	rcall	.+3206   	; 0x1cb2 <__cmpdi2>
    102c:	08 f0       	brcs	.+2      	; 0x1030 <main+0x5e>
    102e:	88 c0       	rjmp	.+272    	; 0x1140 <main+0x16e>
			writeString("\f\r");
    1030:	8b e3       	ldi	r24, 0x3B	; 59
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	48 d1       	rcall	.+656    	; 0x12c6 <writeString>
			writeString("Distance to object: ");
    1036:	8e e3       	ldi	r24, 0x3E	; 62
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	45 d1       	rcall	.+650    	; 0x12c6 <writeString>
			writeInt(ultrasonicSensor());
    103c:	7e d1       	rcall	.+764    	; 0x133a <ultrasonicSensor>
    103e:	58 d1       	rcall	.+688    	; 0x12f0 <writeInt>
    1040:	83 e5       	ldi	r24, 0x53	; 83
			writeString("mm\n\rCompass Angle: ");
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	40 d1       	rcall	.+640    	; 0x12c6 <writeString>
    1046:	f1 01       	movw	r30, r2
			writeInt(rp6Data.compassAngle);
    1048:	87 85       	ldd	r24, Z+15	; 0x0f
    104a:	90 89       	ldd	r25, Z+16	; 0x10
    104c:	51 d1       	rcall	.+674    	; 0x12f0 <writeInt>
    104e:	87 e6       	ldi	r24, 0x67	; 103
    1050:	92 e0       	ldi	r25, 0x02	; 2
			writeString(" degrees");
    1052:	39 d1       	rcall	.+626    	; 0x12c6 <writeString>
    1054:	80 e7       	ldi	r24, 0x70	; 112
    1056:	92 e0       	ldi	r25, 0x02	; 2
			writeString("\n\n\rSpeed: ");
    1058:	36 d1       	rcall	.+620    	; 0x12c6 <writeString>
    105a:	f1 01       	movw	r30, r2
    105c:	80 81       	ld	r24, Z
			writeInt(rp6Data.driveSpeed);
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	47 d1       	rcall	.+654    	; 0x12f0 <writeInt>
    1062:	8b e7       	ldi	r24, 0x7B	; 123
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	2f d1       	rcall	.+606    	; 0x12c6 <writeString>
			writeString("%\n\n\rDirection: ");
    1068:	f1 01       	movw	r30, r2
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	81 30       	cpi	r24, 0x01	; 1
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
    106e:	21 f4       	brne	.+8      	; 0x1078 <main+0xa6>
    1070:	8b e8       	ldi	r24, 0x8B	; 139
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	28 d1       	rcall	.+592    	; 0x12c6 <writeString>
    1076:	0b c0       	rjmp	.+22     	; 0x108e <main+0xbc>
    1078:	81 11       	cpse	r24, r1
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <main+0xb2>
    107c:	85 e9       	ldi	r24, 0x95	; 149
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	22 d1       	rcall	.+580    	; 0x12c6 <writeString>
    1082:	05 c0       	rjmp	.+10     	; 0x108e <main+0xbc>
    1084:	8f 3f       	cpi	r24, 0xFF	; 255
    1086:	19 f4       	brne	.+6      	; 0x108e <main+0xbc>
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
    1088:	82 ea       	ldi	r24, 0xA2	; 162
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	1c d1       	rcall	.+568    	; 0x12c6 <writeString>
    108e:	f1 01       	movw	r30, r2
    1090:	83 81       	ldd	r24, Z+3	; 0x03
			if(rp6Data.turnDirection == -1) writeString("turning left");
    1092:	8f 3f       	cpi	r24, 0xFF	; 255
    1094:	21 f4       	brne	.+8      	; 0x109e <main+0xcc>
    1096:	8e ea       	ldi	r24, 0xAE	; 174
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	15 d1       	rcall	.+554    	; 0x12c6 <writeString>
    109c:	0b c0       	rjmp	.+22     	; 0x10b4 <main+0xe2>
    109e:	81 11       	cpse	r24, r1
			else if(rp6Data.turnDirection == 0) writeString("going straight");
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <main+0xd8>
    10a2:	8b eb       	ldi	r24, 0xBB	; 187
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0f d1       	rcall	.+542    	; 0x12c6 <writeString>
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <main+0xe2>
			else if(rp6Data.turnDirection == 1) writeString("turning right");
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <main+0xe2>
    10ae:	8a ec       	ldi	r24, 0xCA	; 202
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	09 d1       	rcall	.+530    	; 0x12c6 <writeString>
			writeString("\n\rAcceleration rate: ");
    10b4:	88 ed       	ldi	r24, 0xD8	; 216
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	06 d1       	rcall	.+524    	; 0x12c6 <writeString>
    10ba:	f1 01       	movw	r30, r2
			writeInt(rp6Data.accelerationRate);
    10bc:	84 81       	ldd	r24, Z+4	; 0x04
    10be:	95 81       	ldd	r25, Z+5	; 0x05
    10c0:	17 d1       	rcall	.+558    	; 0x12f0 <writeInt>
    10c2:	8e ee       	ldi	r24, 0xEE	; 238
			writeString("\n\rTurn rate: ");
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	ff d0       	rcall	.+510    	; 0x12c6 <writeString>
    10c8:	f1 01       	movw	r30, r2
    10ca:	86 81       	ldd	r24, Z+6	; 0x06
			writeInt(rp6Data.turnRate);
    10cc:	97 81       	ldd	r25, Z+7	; 0x07
    10ce:	10 d1       	rcall	.+544    	; 0x12f0 <writeInt>
    10d0:	8c ef       	ldi	r24, 0xFC	; 252
    10d2:	92 e0       	ldi	r25, 0x02	; 2
			
			writeString("\n\n\rCommand: ");
    10d4:	f8 d0       	rcall	.+496    	; 0x12c6 <writeString>
    10d6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
    10da:	ed d0       	rcall	.+474    	; 0x12b6 <writeChar>
			writeChar(USARTcommand);
    10dc:	89 e0       	ldi	r24, 0x09	; 9
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	f2 d0       	rcall	.+484    	; 0x12c6 <writeString>
    10e2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
			writeString("\n\rValue: ");			
    10e6:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    10ea:	99 23       	and	r25, r25
			if(USARTinputPos >= 0){
    10ec:	84 f0       	brlt	.+32     	; 0x110e <main+0x13c>
    10ee:	0b e9       	ldi	r16, 0x9B	; 155
    10f0:	13 e0       	ldi	r17, 0x03	; 3
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
    10f4:	d0 e0       	ldi	r29, 0x00	; 0
    10f6:	f8 01       	movw	r30, r16
    10f8:	81 91       	ld	r24, Z+
    10fa:	8f 01       	movw	r16, r30
    10fc:	dc d0       	rcall	.+440    	; 0x12b6 <writeChar>
    10fe:	21 96       	adiw	r28, 0x01	; 1
				for(int i = 0; i <= USARTinputPos; i++){
					writeChar(USARTinput[i]);
    1100:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
    1104:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    1108:	8c 17       	cp	r24, r28
=======
    13b0:	5c df       	rcall	.-328    	; 0x126a <turnSignal>
    13b2:	e1 d9       	rcall	.-3134   	; 0x776 <hardcoreParcour>
		
		hardcoreParcour();
    13b4:	40 90 ba 03 	lds	r4, 0x03BA	; 0x8003ba <ultrasonicSensorTimer>
		
		if (ultrasonicSensorTimer < micros()) {
    13b8:	50 90 bb 03 	lds	r5, 0x03BB	; 0x8003bb <ultrasonicSensorTimer+0x1>
    13bc:	60 90 bc 03 	lds	r6, 0x03BC	; 0x8003bc <ultrasonicSensorTimer+0x2>
    13c0:	70 90 bd 03 	lds	r7, 0x03BD	; 0x8003bd <ultrasonicSensorTimer+0x3>
    13c4:	76 d9       	rcall	.-3348   	; 0x6b2 <micros>
    13c6:	f2 2f       	mov	r31, r18
    13c8:	e3 2f       	mov	r30, r19
    13ca:	c4 2e       	mov	r12, r20
    13cc:	d5 2e       	mov	r13, r21
    13ce:	e6 2e       	mov	r14, r22
    13d0:	f7 2e       	mov	r15, r23
    13d2:	08 2f       	mov	r16, r24
    13d4:	19 2f       	mov	r17, r25
    13d6:	24 2d       	mov	r18, r4
    13d8:	35 2d       	mov	r19, r5
    13da:	46 2d       	mov	r20, r6
    13dc:	57 2d       	mov	r21, r7
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	af 2e       	mov	r10, r31
    13e8:	be 2e       	mov	r11, r30
    13ea:	83 d7       	rcall	.+3846   	; 0x22f2 <__cmpdi2>
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <main+0x64>
			writeString("\f\r");
    13ee:	fe c0       	rjmp	.+508    	; 0x15ec <main+0x260>
    13f0:	8b e3       	ldi	r24, 0x3B	; 59
    13f2:	92 e0       	ldi	r25, 0x02	; 2
			writeString("Distance to object: ");
    13f4:	c5 d1       	rcall	.+906    	; 0x1780 <writeString>
    13f6:	8e e3       	ldi	r24, 0x3E	; 62
    13f8:	92 e0       	ldi	r25, 0x02	; 2
			writeInt(ultrasonicSensor());
    13fa:	c2 d1       	rcall	.+900    	; 0x1780 <writeString>
    13fc:	fb d1       	rcall	.+1014   	; 0x17f4 <ultrasonicSensor>
    13fe:	d5 d1       	rcall	.+938    	; 0x17aa <writeInt>
			writeString("mm\n\rCompass Angle: ");
    1400:	83 e5       	ldi	r24, 0x53	; 83
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	bd d1       	rcall	.+890    	; 0x1780 <writeString>
			writeInt(rp6Data.compassAngle);
    1406:	f1 01       	movw	r30, r2
    1408:	87 85       	ldd	r24, Z+15	; 0x0f
    140a:	90 89       	ldd	r25, Z+16	; 0x10
    140c:	ce d1       	rcall	.+924    	; 0x17aa <writeInt>
			writeString(" degrees");
    140e:	87 e6       	ldi	r24, 0x67	; 103
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	b6 d1       	rcall	.+876    	; 0x1780 <writeString>
			writeString("\n\n\rSet speed: ");
    1414:	80 e7       	ldi	r24, 0x70	; 112
    1416:	92 e0       	ldi	r25, 0x02	; 2
    1418:	b3 d1       	rcall	.+870    	; 0x1780 <writeString>
    141a:	f1 01       	movw	r30, r2
			writeInt(rp6Data.driveSpeed);
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	c4 d1       	rcall	.+904    	; 0x17aa <writeInt>
    1422:	8f e7       	ldi	r24, 0x7F	; 127
			writeString("%\n\n\rDirection: ");
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	ac d1       	rcall	.+856    	; 0x1780 <writeString>
    1428:	f1 01       	movw	r30, r2
			if(rp6Data.driveDirection == 1) writeString("Forward, ");
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	21 f4       	brne	.+8      	; 0x1438 <main+0xac>
    1430:	8f e8       	ldi	r24, 0x8F	; 143
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	a5 d1       	rcall	.+842    	; 0x1780 <writeString>
    1436:	0b c0       	rjmp	.+22     	; 0x144e <main+0xc2>
    1438:	81 11       	cpse	r24, r1
			else if(rp6Data.driveDirection == 0) writeString("Stationary, ");
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <main+0xb8>
    143c:	89 e9       	ldi	r24, 0x99	; 153
    143e:	92 e0       	ldi	r25, 0x02	; 2
    1440:	9f d1       	rcall	.+830    	; 0x1780 <writeString>
    1442:	05 c0       	rjmp	.+10     	; 0x144e <main+0xc2>
    1444:	8f 3f       	cpi	r24, 0xFF	; 255
			else if(rp6Data.driveDirection == -1) writeString("Backwards, ");
    1446:	19 f4       	brne	.+6      	; 0x144e <main+0xc2>
    1448:	86 ea       	ldi	r24, 0xA6	; 166
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	99 d1       	rcall	.+818    	; 0x1780 <writeString>
			if(rp6Data.turnDirection == -1) writeString("turning left");
    144e:	f1 01       	movw	r30, r2
    1450:	83 81       	ldd	r24, Z+3	; 0x03
    1452:	8f 3f       	cpi	r24, 0xFF	; 255
    1454:	21 f4       	brne	.+8      	; 0x145e <main+0xd2>
    1456:	82 eb       	ldi	r24, 0xB2	; 178
    1458:	92 e0       	ldi	r25, 0x02	; 2
    145a:	92 d1       	rcall	.+804    	; 0x1780 <writeString>
			else if(rp6Data.turnDirection == 0) writeString("going straight");
    145c:	0b c0       	rjmp	.+22     	; 0x1474 <main+0xe8>
    145e:	81 11       	cpse	r24, r1
    1460:	04 c0       	rjmp	.+8      	; 0x146a <main+0xde>
    1462:	8f eb       	ldi	r24, 0xBF	; 191
    1464:	92 e0       	ldi	r25, 0x02	; 2
			else if(rp6Data.turnDirection == 1) writeString("turning right");
    1466:	8c d1       	rcall	.+792    	; 0x1780 <writeString>
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <main+0xe8>
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	19 f4       	brne	.+6      	; 0x1474 <main+0xe8>
    146e:	8e ec       	ldi	r24, 0xCE	; 206
    1470:	92 e0       	ldi	r25, 0x02	; 2
			writeString("\n\rAcceleration rate: ");
    1472:	86 d1       	rcall	.+780    	; 0x1780 <writeString>
    1474:	8c ed       	ldi	r24, 0xDC	; 220
    1476:	92 e0       	ldi	r25, 0x02	; 2
			writeInt(rp6Data.accelerationRate);
    1478:	83 d1       	rcall	.+774    	; 0x1780 <writeString>
    147a:	f1 01       	movw	r30, r2
    147c:	84 81       	ldd	r24, Z+4	; 0x04
    147e:	95 81       	ldd	r25, Z+5	; 0x05
			writeString("\n\rTurn rate: ");
    1480:	94 d1       	rcall	.+808    	; 0x17aa <writeInt>
    1482:	82 ef       	ldi	r24, 0xF2	; 242
    1484:	92 e0       	ldi	r25, 0x02	; 2
			writeInt(rp6Data.turnRate);
    1486:	7c d1       	rcall	.+760    	; 0x1780 <writeString>
    1488:	f1 01       	movw	r30, r2
    148a:	86 81       	ldd	r24, Z+6	; 0x06
    148c:	97 81       	ldd	r25, Z+7	; 0x07
			writeString("\n\rActual Speed: ");
    148e:	8d d1       	rcall	.+794    	; 0x17aa <writeInt>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	93 e0       	ldi	r25, 0x03	; 3
    1494:	75 d1       	rcall	.+746    	; 0x1780 <writeString>
			writeInt((arduinoData.actualDriveSpeed * 100) / 25600);
    1496:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <arduinoData+0x2>
    149a:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <arduinoData+0x3>
    149e:	f4 e6       	ldi	r31, 0x64	; 100
    14a0:	f2 9f       	mul	r31, r18
    14a2:	c0 01       	movw	r24, r0
    14a4:	f3 9f       	mul	r31, r19
    14a6:	90 0d       	add	r25, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	74 e6       	ldi	r23, 0x64	; 100
    14ae:	26 d6       	rcall	.+3148   	; 0x20fc <__udivmodhi4>
    14b0:	cb 01       	movw	r24, r22
    14b2:	7b d1       	rcall	.+758    	; 0x17aa <writeInt>
    14b4:	81 e1       	ldi	r24, 0x11	; 17
			writeString("%");
    14b6:	93 e0       	ldi	r25, 0x03	; 3
    14b8:	63 d1       	rcall	.+710    	; 0x1780 <writeString>
    14ba:	83 e1       	ldi	r24, 0x13	; 19
    14bc:	93 e0       	ldi	r25, 0x03	; 3
			
			writeString("\n\n\rCommand: ");
    14be:	60 d1       	rcall	.+704    	; 0x1780 <writeString>
    14c0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USARTcommand>
    14c4:	55 d1       	rcall	.+682    	; 0x1770 <writeChar>
			writeChar(USARTcommand);
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	5a d1       	rcall	.+692    	; 0x1780 <writeString>
			writeString("\n\rValue: ");			
    14cc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
    14d0:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
			if(USARTinputPos >= 0){
    14d4:	99 23       	and	r25, r25
    14d6:	84 f0       	brlt	.+32     	; 0x14f8 <main+0x16c>
    14d8:	0f e0       	ldi	r16, 0x0F	; 15
    14da:	14 e0       	ldi	r17, 0x04	; 4
    14dc:	c0 e0       	ldi	r28, 0x00	; 0
    14de:	d0 e0       	ldi	r29, 0x00	; 0
    14e0:	f8 01       	movw	r30, r16
    14e2:	81 91       	ld	r24, Z+
				for(int i = 0; i <= USARTinputPos; i++){
					writeChar(USARTinput[i]);
    14e4:	8f 01       	movw	r16, r30
    14e6:	44 d1       	rcall	.+648    	; 0x1770 <writeChar>
    14e8:	21 96       	adiw	r28, 0x01	; 1
    14ea:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USARTinputPos>
>>>>>>> Stashed changes
			
			writeString("\n\n\rCommand: ");
			writeChar(USARTcommand);
			writeString("\n\rValue: ");			
			if(USARTinputPos >= 0){
				for(int i = 0; i <= USARTinputPos; i++){
<<<<<<< Updated upstream
    110a:	9d 07       	cpc	r25, r29
    110c:	a4 f7       	brge	.-24     	; 0x10f6 <main+0x124>
    110e:	c4 da       	rcall	.-2680   	; 0x698 <micros>
    1110:	82 2e       	mov	r8, r18
    1112:	93 2e       	mov	r9, r19
    1114:	a4 2e       	mov	r10, r20
    1116:	b5 2e       	mov	r11, r21
=======
    14ee:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USARTinputPos+0x1>
    14f2:	8c 17       	cp	r24, r28
    14f4:	9d 07       	cpc	r25, r29
    14f6:	a4 f7       	brge	.-24     	; 0x14e0 <main+0x154>
    14f8:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <runParcour>
>>>>>>> Stashed changes
					writeChar(USARTinput[i]);
				}
			}
			
			if(runParcour){
    14fc:	88 23       	and	r24, r24
    14fe:	09 f4       	brne	.+2      	; 0x1502 <main+0x176>
    1500:	5c c0       	rjmp	.+184    	; 0x15ba <main+0x22e>
    1502:	8a e2       	ldi	r24, 0x2A	; 42
    1504:	93 e0       	ldi	r25, 0x03	; 3
				writeString("\n\n\n\r---- AUTOPILOT ON ----");
    1506:	3c d1       	rcall	.+632    	; 0x1780 <writeString>
    1508:	85 e4       	ldi	r24, 0x45	; 69
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	39 d1       	rcall	.+626    	; 0x1780 <writeString>
				writeString("Current command: ");
    150e:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <currentParcourLine>
    1512:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <currentParcourLine+0x1>
				writeInt(currentParcourLine);
    1516:	49 d1       	rcall	.+658    	; 0x17aa <writeInt>
    1518:	87 e5       	ldi	r24, 0x57	; 87
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	31 d1       	rcall	.+610    	; 0x1780 <writeString>
    151e:	40 90 a6 03 	lds	r4, 0x03A6	; 0x8003a6 <parcourCommandTimer>
				writeString("\n\rTime left: ");
    1522:	50 90 a7 03 	lds	r5, 0x03A7	; 0x8003a7 <parcourCommandTimer+0x1>
    1526:	60 90 a8 03 	lds	r6, 0x03A8	; 0x8003a8 <parcourCommandTimer+0x2>
				int64_t timeLeft = (parcourCommandTimer - micros()) / 1000;
    152a:	70 90 a9 03 	lds	r7, 0x03A9	; 0x8003a9 <parcourCommandTimer+0x3>
    152e:	80 90 aa 03 	lds	r8, 0x03AA	; 0x8003aa <parcourCommandTimer+0x4>
    1532:	90 90 ab 03 	lds	r9, 0x03AB	; 0x8003ab <parcourCommandTimer+0x5>
    1536:	d0 91 ac 03 	lds	r29, 0x03AC	; 0x8003ac <parcourCommandTimer+0x6>
    153a:	c0 91 ad 03 	lds	r28, 0x03AD	; 0x8003ad <parcourCommandTimer+0x7>
    153e:	b9 d8       	rcall	.-3726   	; 0x6b2 <micros>
    1540:	a2 2e       	mov	r10, r18
    1542:	b3 2e       	mov	r11, r19
    1544:	c4 2e       	mov	r12, r20
    1546:	d5 2e       	mov	r13, r21
    1548:	e6 2e       	mov	r14, r22
    154a:	f7 2e       	mov	r15, r23
    154c:	08 2f       	mov	r16, r24
    154e:	19 2f       	mov	r17, r25
    1550:	24 2d       	mov	r18, r4
    1552:	35 2d       	mov	r19, r5
    1554:	46 2d       	mov	r20, r6
    1556:	57 2d       	mov	r21, r7
    1558:	68 2d       	mov	r22, r8
    155a:	79 2d       	mov	r23, r9
    155c:	8d 2f       	mov	r24, r29
    155e:	9c 2f       	mov	r25, r28
    1560:	bf d6       	rcall	.+3454   	; 0x22e0 <__subdi3>
    1562:	0f 2e       	mov	r0, r31
    1564:	f8 ee       	ldi	r31, 0xE8	; 232
    1566:	af 2e       	mov	r10, r31
    1568:	f0 2d       	mov	r31, r0
    156a:	0f 2e       	mov	r0, r31
    156c:	f3 e0       	ldi	r31, 0x03	; 3
    156e:	bf 2e       	mov	r11, r31
    1570:	f0 2d       	mov	r31, r0
    1572:	c1 2c       	mov	r12, r1
    1574:	d1 2c       	mov	r13, r1
    1576:	e1 2c       	mov	r14, r1
    1578:	f1 2c       	mov	r15, r1
    157a:	00 e0       	ldi	r16, 0x00	; 0
    157c:	10 e0       	ldi	r17, 0x00	; 0
    157e:	08 d6       	rcall	.+3088   	; 0x2190 <__udivdi3>
    1580:	e3 2f       	mov	r30, r19
				if(timeLeft >= 0){
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	bf d6       	rcall	.+3454   	; 0x2304 <__cmpdi2_s8>
    1586:	24 f0       	brlt	.+8      	; 0x1590 <main+0x204>
    1588:	82 2f       	mov	r24, r18
					writeInt(timeLeft);
    158a:	9e 2f       	mov	r25, r30
    158c:	0e d1       	rcall	.+540    	; 0x17aa <writeInt>
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <main+0x20a>
    1590:	85 e6       	ldi	r24, 0x65	; 101
    1592:	93 e0       	ldi	r25, 0x03	; 3
				}else{
					writeString("0");
    1594:	f5 d0       	rcall	.+490    	; 0x1780 <writeString>
    1596:	87 e6       	ldi	r24, 0x67	; 103
    1598:	93 e0       	ldi	r25, 0x03	; 3
    159a:	f2 d0       	rcall	.+484    	; 0x1780 <writeString>
				}
				writeString("ms");
    159c:	8a e6       	ldi	r24, 0x6A	; 106
    159e:	93 e0       	ldi	r25, 0x03	; 3
    15a0:	ef d0       	rcall	.+478    	; 0x1780 <writeString>
				writeString("\n\rCommands left: ");
    15a2:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <programmedAmount>
    15a6:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <programmedAmount+0x1>
				writeInt(programmedAmount - 1 - currentParcourLine);
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <currentParcourLine>
    15b0:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <currentParcourLine+0x1>
    15b4:	82 1b       	sub	r24, r18
    15b6:	93 0b       	sbc	r25, r19
    15b8:	f8 d0       	rcall	.+496    	; 0x17aa <writeInt>
    15ba:	7b d8       	rcall	.-3850   	; 0x6b2 <micros>
    15bc:	82 2e       	mov	r8, r18
    15be:	93 2e       	mov	r9, r19
    15c0:	a4 2e       	mov	r10, r20
    15c2:	b5 2e       	mov	r11, r21
			}
			
			ultrasonicSensorTimer = micros() + ultrasonicSensorSpeed;
<<<<<<< Updated upstream
    1118:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ultrasonicSensorSpeed>
    111c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ultrasonicSensorSpeed+0x1>
    1120:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ultrasonicSensorSpeed+0x2>
    1124:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ultrasonicSensorSpeed+0x3>
    1128:	88 0e       	add	r8, r24
    112a:	99 1e       	adc	r9, r25
    112c:	aa 1e       	adc	r10, r26
    112e:	bb 1e       	adc	r11, r27
    1130:	80 92 46 03 	sts	0x0346, r8	; 0x800346 <ultrasonicSensorTimer>
    1134:	90 92 47 03 	sts	0x0347, r9	; 0x800347 <ultrasonicSensorTimer+0x1>
    1138:	a0 92 48 03 	sts	0x0348, r10	; 0x800348 <ultrasonicSensorTimer+0x2>
    113c:	b0 92 49 03 	sts	0x0349, r11	; 0x800349 <ultrasonicSensorTimer+0x3>
    1140:	40 90 42 03 	lds	r4, 0x0342	; 0x800342 <stoptimer>
    1144:	50 90 43 03 	lds	r5, 0x0343	; 0x800343 <stoptimer+0x1>
    1148:	60 90 44 03 	lds	r6, 0x0344	; 0x800344 <stoptimer+0x2>
		}
		
		if(stoptimer < micros()){
    114c:	70 90 45 03 	lds	r7, 0x0345	; 0x800345 <stoptimer+0x3>
    1150:	a3 da       	rcall	.-2746   	; 0x698 <micros>
    1152:	f2 2f       	mov	r31, r18
    1154:	e3 2f       	mov	r30, r19
    1156:	c4 2e       	mov	r12, r20
    1158:	d5 2e       	mov	r13, r21
    115a:	e6 2e       	mov	r14, r22
    115c:	f7 2e       	mov	r15, r23
    115e:	08 2f       	mov	r16, r24
    1160:	19 2f       	mov	r17, r25
    1162:	24 2d       	mov	r18, r4
    1164:	35 2d       	mov	r19, r5
    1166:	46 2d       	mov	r20, r6
    1168:	57 2d       	mov	r21, r7
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	af 2e       	mov	r10, r31
    1174:	be 2e       	mov	r11, r30
    1176:	9d d5       	rcall	.+2874   	; 0x1cb2 <__cmpdi2>
    1178:	08 f0       	brcs	.+2      	; 0x117c <main+0x1aa>
    117a:	3b cf       	rjmp	.-394    	; 0xff2 <main+0x20>
    117c:	e6 e6       	ldi	r30, 0x66	; 102
    117e:	f3 e0       	ldi	r31, 0x03	; 3
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	89 2b       	or	r24, r25
    1186:	19 f0       	breq	.+6      	; 0x118e <main+0x1bc>
			
			if(arduinoData.bumperFlag) {
    1188:	f1 01       	movw	r30, r2
    118a:	11 82       	std	Z+1, r1	; 0x01
    118c:	10 82       	st	Z, r1
    118e:	d5 d0       	rcall	.+426    	; 0x133a <ultrasonicSensor>
    1190:	81 39       	cpi	r24, 0x91	; 145
    1192:	f1 e0       	ldi	r31, 0x01	; 1
				rp6Data.driveSpeed = 0;
    1194:	9f 07       	cpc	r25, r31
    1196:	78 f0       	brcs	.+30     	; 0x11b6 <main+0x1e4>
    1198:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <stopState.2029>
			}
			
			uint16_t distance = ultrasonicSensor();
    119c:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <stopState.2029+0x1>
=======
    15c4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ultrasonicSensorSpeed>
    15c8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ultrasonicSensorSpeed+0x1>
    15cc:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ultrasonicSensorSpeed+0x2>
    15d0:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ultrasonicSensorSpeed+0x3>
    15d4:	88 0e       	add	r8, r24
    15d6:	99 1e       	adc	r9, r25
    15d8:	aa 1e       	adc	r10, r26
    15da:	bb 1e       	adc	r11, r27
    15dc:	80 92 ba 03 	sts	0x03BA, r8	; 0x8003ba <ultrasonicSensorTimer>
    15e0:	90 92 bb 03 	sts	0x03BB, r9	; 0x8003bb <ultrasonicSensorTimer+0x1>
    15e4:	a0 92 bc 03 	sts	0x03BC, r10	; 0x8003bc <ultrasonicSensorTimer+0x2>
    15e8:	b0 92 bd 03 	sts	0x03BD, r11	; 0x8003bd <ultrasonicSensorTimer+0x3>
    15ec:	40 90 b6 03 	lds	r4, 0x03B6	; 0x8003b6 <stoptimer>
    15f0:	50 90 b7 03 	lds	r5, 0x03B7	; 0x8003b7 <stoptimer+0x1>
		}
		
		if(stoptimer < micros()){
    15f4:	60 90 b8 03 	lds	r6, 0x03B8	; 0x8003b8 <stoptimer+0x2>
    15f8:	70 90 b9 03 	lds	r7, 0x03B9	; 0x8003b9 <stoptimer+0x3>
    15fc:	5a d8       	rcall	.-3916   	; 0x6b2 <micros>
    15fe:	f2 2f       	mov	r31, r18
    1600:	e3 2f       	mov	r30, r19
    1602:	c4 2e       	mov	r12, r20
    1604:	d5 2e       	mov	r13, r21
    1606:	e6 2e       	mov	r14, r22
    1608:	f7 2e       	mov	r15, r23
    160a:	08 2f       	mov	r16, r24
    160c:	19 2f       	mov	r17, r25
    160e:	24 2d       	mov	r18, r4
    1610:	35 2d       	mov	r19, r5
    1612:	46 2d       	mov	r20, r6
    1614:	57 2d       	mov	r21, r7
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	af 2e       	mov	r10, r31
    1620:	be 2e       	mov	r11, r30
    1622:	67 d6       	rcall	.+3278   	; 0x22f2 <__cmpdi2>
    1624:	08 f0       	brcs	.+2      	; 0x1628 <main+0x29c>
    1626:	c4 ce       	rjmp	.-632    	; 0x13b0 <main+0x24>
    1628:	ea ed       	ldi	r30, 0xDA	; 218
    162a:	f3 e0       	ldi	r31, 0x03	; 3
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	89 2b       	or	r24, r25
    1632:	19 f0       	breq	.+6      	; 0x163a <main+0x2ae>
			
			if(arduinoData.bumperFlag) {
    1634:	f1 01       	movw	r30, r2
    1636:	11 82       	std	Z+1, r1	; 0x01
    1638:	10 82       	st	Z, r1
    163a:	dc d0       	rcall	.+440    	; 0x17f4 <ultrasonicSensor>
    163c:	81 39       	cpi	r24, 0x91	; 145
    163e:	f1 e0       	ldi	r31, 0x01	; 1
				rp6Data.driveSpeed = 0;
    1640:	9f 07       	cpc	r25, r31
    1642:	78 f0       	brcs	.+30     	; 0x1662 <main+0x2d6>
    1644:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <stopState.2035>
			}
			
			uint16_t distance = ultrasonicSensor();
    1648:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <stopState.2035+0x1>
>>>>>>> Stashed changes
			static int stopState = 0;
			static uint16_t tempAcceleration;
			
			if(distance > 400 && stopState == 1){
<<<<<<< Updated upstream
    11a0:	21 30       	cpi	r18, 0x01	; 1
    11a2:	31 05       	cpc	r19, r1
    11a4:	41 f4       	brne	.+16     	; 0x11b6 <main+0x1e4>
    11a6:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <tempAcceleration.2030>
    11aa:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <tempAcceleration.2030+0x1>
    11ae:	f1 01       	movw	r30, r2
    11b0:	35 83       	std	Z+5, r19	; 0x05
    11b2:	24 83       	std	Z+4, r18	; 0x04
				rp6Data.accelerationRate = tempAcceleration;
    11b4:	0f c0       	rjmp	.+30     	; 0x11d4 <main+0x202>
    11b6:	8d 32       	cpi	r24, 0x2D	; 45
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	9f 07       	cpc	r25, r31
    11bc:	58 f0       	brcs	.+22     	; 0x11d4 <main+0x202>
    11be:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <stopState.2029>
    11c2:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <stopState.2029+0x1>
			}else if(distance > 300 && stopState == 2){
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <main+0x202>
    11cc:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <stopState.2029+0x1>
    11d0:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <stopState.2029>
    11d4:	9c 01       	movw	r18, r24
    11d6:	2d 52       	subi	r18, 0x2D	; 45
    11d8:	31 40       	sbci	r19, 0x01	; 1
				stopState = 0;
    11da:	23 36       	cpi	r18, 0x63	; 99
    11dc:	31 05       	cpc	r19, r1
    11de:	70 f4       	brcc	.+28     	; 0x11fc <main+0x22a>
    11e0:	f1 01       	movw	r30, r2
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
    11e2:	20 81       	ld	r18, Z
    11e4:	31 81       	ldd	r19, Z+1	; 0x01
    11e6:	29 32       	cpi	r18, 0x29	; 41
    11e8:	31 05       	cpc	r19, r1
    11ea:	40 f0       	brcs	.+16     	; 0x11fc <main+0x22a>
    11ec:	22 81       	ldd	r18, Z+2	; 0x02
    11ee:	21 30       	cpi	r18, 0x01	; 1
    11f0:	29 f4       	brne	.+10     	; 0x11fc <main+0x22a>
    11f2:	88 e2       	ldi	r24, 0x28	; 40
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
    11fa:	43 c0       	rjmp	.+134    	; 0x1282 <main+0x2b0>
    11fc:	9c 01       	movw	r18, r24
    11fe:	26 55       	subi	r18, 0x56	; 86
				rp6Data.driveSpeed = 40;
    1200:	31 09       	sbc	r19, r1
    1202:	26 3d       	cpi	r18, 0xD6	; 214
    1204:	31 05       	cpc	r19, r1
    1206:	70 f4       	brcc	.+28     	; 0x1224 <main+0x252>
    1208:	f1 01       	movw	r30, r2
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
    120a:	20 81       	ld	r18, Z
    120c:	31 81       	ldd	r19, Z+1	; 0x01
    120e:	2a 31       	cpi	r18, 0x1A	; 26
    1210:	31 05       	cpc	r19, r1
    1212:	40 f0       	brcs	.+16     	; 0x1224 <main+0x252>
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	a1 f5       	brne	.+104    	; 0x1282 <main+0x2b0>
    121a:	89 e1       	ldi	r24, 0x19	; 25
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	2f c0       	rjmp	.+94     	; 0x1282 <main+0x2b0>
    1224:	85 35       	cpi	r24, 0x55	; 85
    1226:	91 05       	cpc	r25, r1
				rp6Data.driveSpeed = 25;
    1228:	60 f5       	brcc	.+88     	; 0x1282 <main+0x2b0>
    122a:	f1 01       	movw	r30, r2
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	41 f5       	brne	.+80     	; 0x1282 <main+0x2b0>
			}else if(distance < 85 && rp6Data.driveDirection == 1){
    1232:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <stopState.2029>
    1236:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <stopState.2029+0x1>
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	99 f4       	brne	.+38     	; 0x1264 <main+0x292>
    123e:	84 81       	ldd	r24, Z+4	; 0x04
				if(stopState == 0){
    1240:	95 81       	ldd	r25, Z+5	; 0x05
    1242:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <tempAcceleration.2030+0x1>
    1246:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <tempAcceleration.2030>
					tempAcceleration = rp6Data.accelerationRate;
    124a:	88 e8       	ldi	r24, 0x88	; 136
    124c:	93 e1       	ldi	r25, 0x13	; 19
    124e:	95 83       	std	Z+5, r25	; 0x05
    1250:	84 83       	std	Z+4, r24	; 0x04
    1252:	11 82       	std	Z+1, r1	; 0x01
    1254:	10 82       	st	Z, r1
					rp6Data.accelerationRate = 5000;
    1256:	e1 e0       	ldi	r30, 0x01	; 1
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	f0 93 27 03 	sts	0x0327, r31	; 0x800327 <stopState.2029+0x1>
					rp6Data.driveSpeed = 0;
    125e:	e0 93 26 03 	sts	0x0326, r30	; 0x800326 <stopState.2029>
					stopState = 1;
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <main+0x2b0>
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	69 f4       	brne	.+26     	; 0x1282 <main+0x2b0>
    1268:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tempAcceleration.2030>
    126c:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tempAcceleration.2030+0x1>
				}else if(stopState == 1){
    1270:	f1 01       	movw	r30, r2
    1272:	95 83       	std	Z+5, r25	; 0x05
					rp6Data.accelerationRate = tempAcceleration;
    1274:	84 83       	std	Z+4, r24	; 0x04
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <stopState.2029+0x1>
    127e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <stopState.2029>
					stopState = 2;
    1282:	0a da       	rcall	.-3052   	; 0x698 <micros>
    1284:	82 2e       	mov	r8, r18
    1286:	93 2e       	mov	r9, r19
    1288:	a4 2e       	mov	r10, r20
    128a:	b5 2e       	mov	r11, r21
    128c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stoptimerspeed>
=======
    164c:	21 30       	cpi	r18, 0x01	; 1
    164e:	31 05       	cpc	r19, r1
    1650:	41 f4       	brne	.+16     	; 0x1662 <main+0x2d6>
    1652:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <tempAcceleration.2036>
    1656:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <tempAcceleration.2036+0x1>
    165a:	f1 01       	movw	r30, r2
    165c:	35 83       	std	Z+5, r19	; 0x05
    165e:	24 83       	std	Z+4, r18	; 0x04
				rp6Data.accelerationRate = tempAcceleration;
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <main+0x2f4>
    1662:	8d 32       	cpi	r24, 0x2D	; 45
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	9f 07       	cpc	r25, r31
    1668:	58 f0       	brcs	.+22     	; 0x1680 <main+0x2f4>
    166a:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <stopState.2035>
    166e:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <stopState.2035+0x1>
			}else if(distance > 300 && stopState == 2){
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	21 f4       	brne	.+8      	; 0x1680 <main+0x2f4>
    1678:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <stopState.2035+0x1>
    167c:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <stopState.2035>
    1680:	80 39       	cpi	r24, 0x90	; 144
    1682:	21 e0       	ldi	r18, 0x01	; 1
    1684:	92 07       	cpc	r25, r18
				stopState = 0;
    1686:	10 f4       	brcc	.+4      	; 0x168c <main+0x300>
    1688:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <runParcour>
    168c:	9c 01       	movw	r18, r24
			}
			
			if(distance < 400){
    168e:	2d 52       	subi	r18, 0x2D	; 45
    1690:	31 40       	sbci	r19, 0x01	; 1
    1692:	23 36       	cpi	r18, 0x63	; 99
    1694:	31 05       	cpc	r19, r1
				runParcour = 0;
    1696:	70 f4       	brcc	.+28     	; 0x16b4 <main+0x328>
    1698:	f1 01       	movw	r30, r2
			}
			
			if(distance < 400 && distance > 300 && rp6Data.driveSpeed > 40 && rp6Data.driveDirection == 1){
    169a:	20 81       	ld	r18, Z
    169c:	31 81       	ldd	r19, Z+1	; 0x01
    169e:	29 32       	cpi	r18, 0x29	; 41
    16a0:	31 05       	cpc	r19, r1
    16a2:	40 f0       	brcs	.+16     	; 0x16b4 <main+0x328>
    16a4:	22 81       	ldd	r18, Z+2	; 0x02
    16a6:	21 30       	cpi	r18, 0x01	; 1
    16a8:	29 f4       	brne	.+10     	; 0x16b4 <main+0x328>
    16aa:	88 e2       	ldi	r24, 0x28	; 40
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	43 c0       	rjmp	.+134    	; 0x173a <main+0x3ae>
    16b4:	9c 01       	movw	r18, r24
    16b6:	26 55       	subi	r18, 0x56	; 86
				rp6Data.driveSpeed = 40;
    16b8:	31 09       	sbc	r19, r1
    16ba:	26 3d       	cpi	r18, 0xD6	; 214
    16bc:	31 05       	cpc	r19, r1
    16be:	70 f4       	brcc	.+28     	; 0x16dc <main+0x350>
    16c0:	f1 01       	movw	r30, r2
			}else if(distance < 300 && distance > 85 && rp6Data.driveSpeed > 25 && rp6Data.driveDirection == 1){
    16c2:	20 81       	ld	r18, Z
    16c4:	31 81       	ldd	r19, Z+1	; 0x01
    16c6:	2a 31       	cpi	r18, 0x1A	; 26
    16c8:	31 05       	cpc	r19, r1
    16ca:	40 f0       	brcs	.+16     	; 0x16dc <main+0x350>
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	a1 f5       	brne	.+104    	; 0x173a <main+0x3ae>
    16d2:	89 e1       	ldi	r24, 0x19	; 25
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	2f c0       	rjmp	.+94     	; 0x173a <main+0x3ae>
    16dc:	85 35       	cpi	r24, 0x55	; 85
    16de:	91 05       	cpc	r25, r1
				rp6Data.driveSpeed = 25;
    16e0:	60 f5       	brcc	.+88     	; 0x173a <main+0x3ae>
    16e2:	f1 01       	movw	r30, r2
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	41 f5       	brne	.+80     	; 0x173a <main+0x3ae>
			}else if(distance < 85 && rp6Data.driveDirection == 1){
    16ea:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <stopState.2035>
    16ee:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <stopState.2035+0x1>
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	99 f4       	brne	.+38     	; 0x171c <main+0x390>
    16f6:	84 81       	ldd	r24, Z+4	; 0x04
				if(stopState == 0){
    16f8:	95 81       	ldd	r25, Z+5	; 0x05
    16fa:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <tempAcceleration.2036+0x1>
    16fe:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <tempAcceleration.2036>
    1702:	88 e8       	ldi	r24, 0x88	; 136
					tempAcceleration = rp6Data.accelerationRate;
    1704:	93 e1       	ldi	r25, 0x13	; 19
    1706:	95 83       	std	Z+5, r25	; 0x05
    1708:	84 83       	std	Z+4, r24	; 0x04
    170a:	11 82       	std	Z+1, r1	; 0x01
    170c:	10 82       	st	Z, r1
    170e:	e1 e0       	ldi	r30, 0x01	; 1
					rp6Data.accelerationRate = 5000;
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	f0 93 8f 03 	sts	0x038F, r31	; 0x80038f <stopState.2035+0x1>
    1716:	e0 93 8e 03 	sts	0x038E, r30	; 0x80038e <stopState.2035>
					rp6Data.driveSpeed = 0;
    171a:	0f c0       	rjmp	.+30     	; 0x173a <main+0x3ae>
					stopState = 1;
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	69 f4       	brne	.+26     	; 0x173a <main+0x3ae>
    1720:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <tempAcceleration.2036>
    1724:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <tempAcceleration.2036+0x1>
    1728:	f1 01       	movw	r30, r2
				}else if(stopState == 1){
    172a:	95 83       	std	Z+5, r25	; 0x05
    172c:	84 83       	std	Z+4, r24	; 0x04
					rp6Data.accelerationRate = tempAcceleration;
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <stopState.2035+0x1>
    1736:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <stopState.2035>
    173a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
					stopState = 2;
    173e:	82 2e       	mov	r8, r18
    1740:	93 2e       	mov	r9, r19
    1742:	a4 2e       	mov	r10, r20
    1744:	b5 2e       	mov	r11, r21
    1746:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stoptimerspeed>
>>>>>>> Stashed changes
				}
			}
			
			stoptimer = micros() + stoptimerspeed;
<<<<<<< Updated upstream
    1290:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stoptimerspeed+0x1>
    1294:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <stoptimerspeed+0x2>
    1298:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <stoptimerspeed+0x3>
    129c:	88 0e       	add	r8, r24
    129e:	99 1e       	adc	r9, r25
    12a0:	aa 1e       	adc	r10, r26
    12a2:	bb 1e       	adc	r11, r27
    12a4:	80 92 42 03 	sts	0x0342, r8	; 0x800342 <stoptimer>
    12a8:	90 92 43 03 	sts	0x0343, r9	; 0x800343 <stoptimer+0x1>
    12ac:	a0 92 44 03 	sts	0x0344, r10	; 0x800344 <stoptimer+0x2>
    12b0:	b0 92 45 03 	sts	0x0345, r11	; 0x800345 <stoptimer+0x3>
    12b4:	9e ce       	rjmp	.-708    	; 0xff2 <main+0x20>

000012b6 <writeChar>:
=======
    174a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stoptimerspeed+0x1>
    174e:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <stoptimerspeed+0x2>
    1752:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <stoptimerspeed+0x3>
    1756:	88 0e       	add	r8, r24
    1758:	99 1e       	adc	r9, r25
    175a:	aa 1e       	adc	r10, r26
    175c:	bb 1e       	adc	r11, r27
    175e:	80 92 b6 03 	sts	0x03B6, r8	; 0x8003b6 <stoptimer>
    1762:	90 92 b7 03 	sts	0x03B7, r9	; 0x8003b7 <stoptimer+0x1>
    1766:	a0 92 b8 03 	sts	0x03B8, r10	; 0x8003b8 <stoptimer+0x2>
    176a:	b0 92 b9 03 	sts	0x03B9, r11	; 0x8003b9 <stoptimer+0x3>
    176e:	20 ce       	rjmp	.-960    	; 0x13b0 <main+0x24>

00001770 <writeChar>:
>>>>>>> Stashed changes
#include "matthijs_testFunctions.h"
#include <avr/io.h>
#include <stdlib.h>

void writeChar(char x) { //Sends char x over serial communication
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
<<<<<<< Updated upstream
    12b6:	e0 ec       	ldi	r30, 0xC0	; 192
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	90 81       	ld	r25, Z
    12bc:	95 ff       	sbrs	r25, 5
    12be:	fd cf       	rjmp	.-6      	; 0x12ba <writeChar+0x4>
	UDR0 = x;
    12c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12c4:	08 95       	ret

000012c6 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	51 f0       	breq	.+20     	; 0x12e8 <writeString+0x22>
    12d4:	8f 01       	movw	r16, r30
    12d6:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    12d8:	ee df       	rcall	.-36     	; 0x12b6 <writeChar>
=======
    1770:	e0 ec       	ldi	r30, 0xC0	; 192
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	90 81       	ld	r25, Z
    1776:	95 ff       	sbrs	r25, 5
    1778:	fd cf       	rjmp	.-6      	; 0x1774 <writeChar+0x4>
	UDR0 = x;
    177a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    177e:	08 95       	ret

00001780 <writeString>:
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	fc 01       	movw	r30, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
    1788:	80 81       	ld	r24, Z
    178a:	88 23       	and	r24, r24
    178c:	51 f0       	breq	.+20     	; 0x17a2 <writeString+0x22>
    178e:	8f 01       	movw	r16, r30
    1790:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar( st[i] );
    1792:	ee df       	rcall	.-36     	; 0x1770 <writeChar>
>>>>>>> Stashed changes
	while(~UCSR0A & (1 << UDRE0)); //Wait until UDRE0 is set
	UDR0 = x;
}

void writeString(char st[]) { //Sends char array over serial communication. Dependent on writeChar()
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
<<<<<<< Updated upstream
    12da:	cf 5f       	subi	r28, 0xFF	; 255
    12dc:	f8 01       	movw	r30, r16
    12de:	ec 0f       	add	r30, r28
    12e0:	f1 1d       	adc	r31, r1
    12e2:	80 81       	ld	r24, Z
    12e4:	81 11       	cpse	r24, r1
    12e6:	f8 cf       	rjmp	.-16     	; 0x12d8 <writeString+0x12>
		writeChar( st[i] );
	}
}
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	28 97       	sbiw	r28, 0x08	; 8
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	4a e0       	ldi	r20, 0x0A	; 10
    1306:	be 01       	movw	r22, r28
    1308:	6f 5f       	subi	r22, 0xFF	; 255
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	ea d4       	rcall	.+2516   	; 0x1ce2 <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	d9 df       	rcall	.-78     	; 0x12c6 <writeString>
}
    1314:	28 96       	adiw	r28, 0x08	; 8
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <initTimer>:
=======
    1794:	cf 5f       	subi	r28, 0xFF	; 255
    1796:	f8 01       	movw	r30, r16
    1798:	ec 0f       	add	r30, r28
    179a:	f1 1d       	adc	r31, r1
    179c:	80 81       	ld	r24, Z
    179e:	81 11       	cpse	r24, r1
    17a0:	f8 cf       	rjmp	.-16     	; 0x1792 <writeString+0x12>
		writeChar( st[i] );
	}
}
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <writeInt>:

void writeInt(int i) { //Sends integer i over serial communication. Dependent on writeString()
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	28 97       	sbiw	r28, 0x08	; 8
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	4a e0       	ldi	r20, 0x0A	; 10
    17c0:	be 01       	movw	r22, r28
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	b9 d5       	rcall	.+2930   	; 0x233a <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10); //Converts i to a string
	writeString(buffer);
    17c8:	ce 01       	movw	r24, r28
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	d9 df       	rcall	.-78     	; 0x1780 <writeString>
}
    17ce:	28 96       	adiw	r28, 0x08	; 8
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <initTimer>:
>>>>>>> Stashed changes
#define PORT_REGISTER PORTL
#define PIN_REGISTER PINL

void initTimer(){
	
	TCCR1B |= (1 << CS11); //prescaler 8
<<<<<<< Updated upstream
    1326:	e1 e8       	ldi	r30, 0x81	; 129
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	82 60       	ori	r24, 0x02	; 2
    132e:	80 83       	st	Z, r24
	TCNT1 = 0;
    1330:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1334:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1338:	08 95       	ret

0000133a <ultrasonicSensor>:
}

int ultrasonicSensor() {
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    133e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1342:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
=======
    17e0:	e1 e8       	ldi	r30, 0x81	; 129
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	80 83       	st	Z, r24
	TCNT1 = 0;
    17ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    17ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    17f2:	08 95       	ret

000017f4 <ultrasonicSensor>:
}

int ultrasonicSensor() {
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
	
	TCNT1 = 0; //Reset value of TCNT1
    17f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    17fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
>>>>>>> Stashed changes
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
	unsigned long maxLoops = 40000;
	
	DDR_REGISTER |= (1 << TRIGGER); //Set TRIGGER pin as output
<<<<<<< Updated upstream
    1346:	aa e0       	ldi	r26, 0x0A	; 10
    1348:	b1 e0       	ldi	r27, 0x01	; 1
    134a:	8c 91       	ld	r24, X
    134c:	82 60       	ori	r24, 0x02	; 2
    134e:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    1350:	eb e0       	ldi	r30, 0x0B	; 11
    1352:	f1 e0       	ldi	r31, 0x01	; 1
    1354:	80 81       	ld	r24, Z
    1356:	8d 7f       	andi	r24, 0xFD	; 253
    1358:	80 83       	st	Z, r24
=======
    1800:	aa e0       	ldi	r26, 0x0A	; 10
    1802:	b1 e0       	ldi	r27, 0x01	; 1
    1804:	8c 91       	ld	r24, X
    1806:	82 60       	ori	r24, 0x02	; 2
    1808:	8c 93       	st	X, r24
	
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low for 2 us to ensure a clean pulse
    180a:	eb e0       	ldi	r30, 0x0B	; 11
    180c:	f1 e0       	ldi	r31, 0x01	; 1
    180e:	80 81       	ld	r24, Z
    1810:	8d 7f       	andi	r24, 0xFD	; 253
    1812:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< Updated upstream
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	2a 95       	dec	r18
    135e:	f1 f7       	brne	.-4      	; 0x135c <ultrasonicSensor+0x22>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    1362:	80 81       	ld	r24, Z
    1364:	82 60       	ori	r24, 0x02	; 2
    1366:	80 83       	st	Z, r24
    1368:	8a e1       	ldi	r24, 0x1A	; 26
    136a:	8a 95       	dec	r24
    136c:	f1 f7       	brne	.-4      	; 0x136a <ultrasonicSensor+0x30>
    136e:	00 c0       	rjmp	.+0      	; 0x1370 <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    1370:	80 81       	ld	r24, Z
    1372:	8d 7f       	andi	r24, 0xFD	; 253
    1374:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    1376:	8c 91       	ld	r24, X
    1378:	8d 7f       	andi	r24, 0xFD	; 253
    137a:	8c 93       	st	X, r24
=======
    1814:	2a e0       	ldi	r18, 0x0A	; 10
    1816:	2a 95       	dec	r18
    1818:	f1 f7       	brne	.-4      	; 0x1816 <ultrasonicSensor+0x22>
    181a:	00 c0       	rjmp	.+0      	; 0x181c <ultrasonicSensor+0x28>
	_delay_us(2);
	PORT_REGISTER |= (1 << TRIGGER); //Send pulse for 5 us
    181c:	80 81       	ld	r24, Z
    181e:	82 60       	ori	r24, 0x02	; 2
    1820:	80 83       	st	Z, r24
    1822:	8a e1       	ldi	r24, 0x1A	; 26
    1824:	8a 95       	dec	r24
    1826:	f1 f7       	brne	.-4      	; 0x1824 <ultrasonicSensor+0x30>
    1828:	00 c0       	rjmp	.+0      	; 0x182a <ultrasonicSensor+0x36>
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
    182a:	80 81       	ld	r24, Z
    182c:	8d 7f       	andi	r24, 0xFD	; 253
    182e:	80 83       	st	Z, r24
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input
    1830:	8c 91       	ld	r24, X
    1832:	8d 7f       	andi	r24, 0xFD	; 253
    1834:	8c 93       	st	X, r24
>>>>>>> Stashed changes
	
	TCNT1 = 0; //Reset value of TCNT1
	
	unsigned long pulseStartTime = 0; //Used to record value of TCNT1 when the pulse starts
	//Values to prevent infinite loops:
	unsigned long numLoops = 0;
<<<<<<< Updated upstream
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	dc 01       	movw	r26, r24
=======
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	dc 01       	movw	r26, r24
>>>>>>> Stashed changes
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
<<<<<<< Updated upstream
    1382:	e9 e0       	ldi	r30, 0x09	; 9
    1384:	f1 e0       	ldi	r31, 0x01	; 1
    1386:	0a c0       	rjmp	.+20     	; 0x139c <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	a1 1d       	adc	r26, r1
    138c:	b1 1d       	adc	r27, r1
    138e:	81 34       	cpi	r24, 0x41	; 65
    1390:	2c e9       	ldi	r18, 0x9C	; 156
    1392:	92 07       	cpc	r25, r18
    1394:	a1 05       	cpc	r26, r1
    1396:	b1 05       	cpc	r27, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <ultrasonicSensor+0x62>
    139a:	45 c0       	rjmp	.+138    	; 0x1426 <ultrasonicSensor+0xec>
=======
    183c:	e9 e0       	ldi	r30, 0x09	; 9
    183e:	f1 e0       	ldi	r31, 0x01	; 1
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <ultrasonicSensor+0x62>
		if(numLoops++ == maxLoops) {
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	a1 1d       	adc	r26, r1
    1846:	b1 1d       	adc	r27, r1
    1848:	81 34       	cpi	r24, 0x41	; 65
    184a:	2c e9       	ldi	r18, 0x9C	; 156
    184c:	92 07       	cpc	r25, r18
    184e:	a1 05       	cpc	r26, r1
    1850:	b1 05       	cpc	r27, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <ultrasonicSensor+0x62>
    1854:	45 c0       	rjmp	.+138    	; 0x18e0 <ultrasonicSensor+0xec>
>>>>>>> Stashed changes
	_delay_us(5);
	PORT_REGISTER &= ~(1 << TRIGGER); //Set TRIGGER pin to low
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
<<<<<<< Updated upstream
    139c:	20 81       	ld	r18, Z
    139e:	21 fd       	sbrc	r18, 1
    13a0:	f3 cf       	rjmp	.-26     	; 0x1388 <ultrasonicSensor+0x4e>
=======
    1856:	20 81       	ld	r18, Z
    1858:	21 fd       	sbrc	r18, 1
    185a:	f3 cf       	rjmp	.-26     	; 0x1842 <ultrasonicSensor+0x4e>
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
<<<<<<< Updated upstream
    13a2:	e9 e0       	ldi	r30, 0x09	; 9
    13a4:	f1 e0       	ldi	r31, 0x01	; 1
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    13a8:	ac 01       	movw	r20, r24
    13aa:	bd 01       	movw	r22, r26
    13ac:	4f 5f       	subi	r20, 0xFF	; 255
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255
    13b0:	6f 4f       	sbci	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	80 34       	cpi	r24, 0x40	; 64
    13b6:	9c 49       	sbci	r25, 0x9C	; 156
    13b8:	a1 05       	cpc	r26, r1
    13ba:	b1 05       	cpc	r27, r1
    13bc:	b9 f1       	breq	.+110    	; 0x142c <ultrasonicSensor+0xf2>
    13be:	db 01       	movw	r26, r22
    13c0:	ca 01       	movw	r24, r20
=======
    185c:	e9 e0       	ldi	r30, 0x09	; 9
    185e:	f1 e0       	ldi	r31, 0x01	; 1
    1860:	0d c0       	rjmp	.+26     	; 0x187c <ultrasonicSensor+0x88>
		if(numLoops++ == maxLoops) {
    1862:	ac 01       	movw	r20, r24
    1864:	bd 01       	movw	r22, r26
    1866:	4f 5f       	subi	r20, 0xFF	; 255
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	6f 4f       	sbci	r22, 0xFF	; 255
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	80 34       	cpi	r24, 0x40	; 64
    1870:	9c 49       	sbci	r25, 0x9C	; 156
    1872:	a1 05       	cpc	r26, r1
    1874:	b1 05       	cpc	r27, r1
    1876:	b9 f1       	breq	.+110    	; 0x18e6 <ultrasonicSensor+0xf2>
    1878:	db 01       	movw	r26, r22
    187a:	ca 01       	movw	r24, r20
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
<<<<<<< Updated upstream
    13c2:	20 81       	ld	r18, Z
    13c4:	21 ff       	sbrs	r18, 1
    13c6:	f0 cf       	rjmp	.-32     	; 0x13a8 <ultrasonicSensor+0x6e>
=======
    187c:	20 81       	ld	r18, Z
    187e:	21 ff       	sbrs	r18, 1
    1880:	f0 cf       	rjmp	.-32     	; 0x1862 <ultrasonicSensor+0x6e>
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
<<<<<<< Updated upstream
    13c8:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    13cc:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    13d0:	e9 e0       	ldi	r30, 0x09	; 9
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    13d6:	ac 01       	movw	r20, r24
    13d8:	bd 01       	movw	r22, r26
    13da:	4f 5f       	subi	r20, 0xFF	; 255
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	6f 4f       	sbci	r22, 0xFF	; 255
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	80 34       	cpi	r24, 0x40	; 64
    13e4:	9c 49       	sbci	r25, 0x9C	; 156
    13e6:	a1 05       	cpc	r26, r1
    13e8:	b1 05       	cpc	r27, r1
    13ea:	19 f1       	breq	.+70     	; 0x1432 <ultrasonicSensor+0xf8>
    13ec:	db 01       	movw	r26, r22
    13ee:	ca 01       	movw	r24, r20
=======
    1882:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1886:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
    188a:	e9 e0       	ldi	r30, 0x09	; 9
    188c:	f1 e0       	ldi	r31, 0x01	; 1
    188e:	0d c0       	rjmp	.+26     	; 0x18aa <ultrasonicSensor+0xb6>
		if(numLoops++ == maxLoops) {
    1890:	ac 01       	movw	r20, r24
    1892:	bd 01       	movw	r22, r26
    1894:	4f 5f       	subi	r20, 0xFF	; 255
    1896:	5f 4f       	sbci	r21, 0xFF	; 255
    1898:	6f 4f       	sbci	r22, 0xFF	; 255
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
    189c:	80 34       	cpi	r24, 0x40	; 64
    189e:	9c 49       	sbci	r25, 0x9C	; 156
    18a0:	a1 05       	cpc	r26, r1
    18a2:	b1 05       	cpc	r27, r1
    18a4:	19 f1       	breq	.+70     	; 0x18ec <ultrasonicSensor+0xf8>
    18a6:	db 01       	movw	r26, r22
    18a8:	ca 01       	movw	r24, r20
>>>>>>> Stashed changes
		}
	}
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
<<<<<<< Updated upstream
    13f0:	20 81       	ld	r18, Z
    13f2:	21 fd       	sbrc	r18, 1
    13f4:	f0 cf       	rjmp	.-32     	; 0x13d6 <ultrasonicSensor+0x9c>
=======
    18aa:	20 81       	ld	r18, Z
    18ac:	21 fd       	sbrc	r18, 1
    18ae:	f0 cf       	rjmp	.-32     	; 0x1890 <ultrasonicSensor+0x9c>
>>>>>>> Stashed changes
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
<<<<<<< Updated upstream
    13f6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    13fa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
=======
    18b0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    18b4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
>>>>>>> Stashed changes
}

int cyclesToMm(unsigned long cycles) {
	
	return ((cycles * SPEED_OF_SOUND) / 20000) - CORRECTION;
<<<<<<< Updated upstream
    13fe:	c9 01       	movw	r24, r18
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	9c 01       	movw	r18, r24
    1406:	ad 01       	movw	r20, r26
    1408:	2c 1b       	sub	r18, r28
    140a:	3d 0b       	sbc	r19, r29
    140c:	41 09       	sbc	r20, r1
    140e:	51 09       	sbc	r21, r1
    1410:	a3 eb       	ldi	r26, 0xB3	; 179
    1412:	b6 e0       	ldi	r27, 0x06	; 6
    1414:	91 d3       	rcall	.+1826   	; 0x1b38 <__muluhisi3>
    1416:	20 e2       	ldi	r18, 0x20	; 32
    1418:	3e e4       	ldi	r19, 0x4E	; 78
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	62 d3       	rcall	.+1732   	; 0x1ae4 <__udivmodsi4>
    1420:	c9 01       	movw	r24, r18
    1422:	05 97       	sbiw	r24, 0x05	; 5
=======
    18b8:	c9 01       	movw	r24, r18
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	9c 01       	movw	r18, r24
    18c0:	ad 01       	movw	r20, r26
    18c2:	2c 1b       	sub	r18, r28
    18c4:	3d 0b       	sbc	r19, r29
    18c6:	41 09       	sbc	r20, r1
    18c8:	51 09       	sbc	r21, r1
    18ca:	a3 eb       	ldi	r26, 0xB3	; 179
    18cc:	b6 e0       	ldi	r27, 0x06	; 6
    18ce:	54 d4       	rcall	.+2216   	; 0x2178 <__muluhisi3>
    18d0:	20 e2       	ldi	r18, 0x20	; 32
    18d2:	3e e4       	ldi	r19, 0x4E	; 78
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	25 d4       	rcall	.+2122   	; 0x2124 <__udivmodsi4>
    18da:	c9 01       	movw	r24, r18
    18dc:	05 97       	sbiw	r24, 0x05	; 5
>>>>>>> Stashed changes
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
<<<<<<< Updated upstream
    1424:	08 c0       	rjmp	.+16     	; 0x1436 <ultrasonicSensor+0xfc>
=======
    18de:	08 c0       	rjmp	.+16     	; 0x18f0 <ultrasonicSensor+0xfc>
>>>>>>> Stashed changes
	
	DDR_REGISTER &= ~(1 << ECHO); //Set ECHO pin as input

	while (PIN_REGISTER & (1 << ECHO)) { //Wait for any old pulse to end
		if(numLoops++ == maxLoops) {
			return 0;
<<<<<<< Updated upstream
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <ultrasonicSensor+0xfc>
=======
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <ultrasonicSensor+0xfc>
>>>>>>> Stashed changes
		}
	}
	
	while (~PIN_REGISTER & (1 << ECHO)) { //Wait until PING))) returns a pulse
		if(numLoops++ == maxLoops) {
			return 0;
<<<<<<< Updated upstream
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <ultrasonicSensor+0xfc>
=======
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <ultrasonicSensor+0xfc>
>>>>>>> Stashed changes
	
	pulseStartTime = TCNT1; //Set pulseStartTime to current TCNT1 value
	
	while (PIN_REGISTER & (1 << ECHO)) { //Wait until the pulse from PING))) ends
		if(numLoops++ == maxLoops) {
			return 0;
<<<<<<< Updated upstream
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
=======
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> Stashed changes
		}
	}
	return cyclesToMm(TCNT1 - pulseStartTime); //Calculate and return distance in mm
}
<<<<<<< Updated upstream
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <__subsf3>:
    143c:	50 58       	subi	r21, 0x80	; 128

0000143e <__addsf3>:
    143e:	bb 27       	eor	r27, r27
    1440:	aa 27       	eor	r26, r26
    1442:	0e d0       	rcall	.+28     	; 0x1460 <__addsf3x>
    1444:	e5 c0       	rjmp	.+458    	; 0x1610 <__fp_round>
    1446:	d6 d0       	rcall	.+428    	; 0x15f4 <__fp_pscA>
    1448:	30 f0       	brcs	.+12     	; 0x1456 <__addsf3+0x18>
    144a:	db d0       	rcall	.+438    	; 0x1602 <__fp_pscB>
    144c:	20 f0       	brcs	.+8      	; 0x1456 <__addsf3+0x18>
    144e:	31 f4       	brne	.+12     	; 0x145c <__addsf3+0x1e>
    1450:	9f 3f       	cpi	r25, 0xFF	; 255
    1452:	11 f4       	brne	.+4      	; 0x1458 <__addsf3+0x1a>
    1454:	1e f4       	brtc	.+6      	; 0x145c <__addsf3+0x1e>
    1456:	cb c0       	rjmp	.+406    	; 0x15ee <__fp_nan>
    1458:	0e f4       	brtc	.+2      	; 0x145c <__addsf3+0x1e>
    145a:	e0 95       	com	r30
    145c:	e7 fb       	bst	r30, 7
    145e:	c1 c0       	rjmp	.+386    	; 0x15e2 <__fp_inf>

00001460 <__addsf3x>:
    1460:	e9 2f       	mov	r30, r25
    1462:	e7 d0       	rcall	.+462    	; 0x1632 <__fp_split3>
    1464:	80 f3       	brcs	.-32     	; 0x1446 <__addsf3+0x8>
    1466:	ba 17       	cp	r27, r26
    1468:	62 07       	cpc	r22, r18
    146a:	73 07       	cpc	r23, r19
    146c:	84 07       	cpc	r24, r20
    146e:	95 07       	cpc	r25, r21
    1470:	18 f0       	brcs	.+6      	; 0x1478 <__addsf3x+0x18>
    1472:	71 f4       	brne	.+28     	; 0x1490 <__addsf3x+0x30>
    1474:	9e f5       	brtc	.+102    	; 0x14dc <__addsf3x+0x7c>
    1476:	ff c0       	rjmp	.+510    	; 0x1676 <__fp_zero>
    1478:	0e f4       	brtc	.+2      	; 0x147c <__addsf3x+0x1c>
    147a:	e0 95       	com	r30
    147c:	0b 2e       	mov	r0, r27
    147e:	ba 2f       	mov	r27, r26
    1480:	a0 2d       	mov	r26, r0
    1482:	0b 01       	movw	r0, r22
    1484:	b9 01       	movw	r22, r18
    1486:	90 01       	movw	r18, r0
    1488:	0c 01       	movw	r0, r24
    148a:	ca 01       	movw	r24, r20
    148c:	a0 01       	movw	r20, r0
    148e:	11 24       	eor	r1, r1
    1490:	ff 27       	eor	r31, r31
    1492:	59 1b       	sub	r21, r25
    1494:	99 f0       	breq	.+38     	; 0x14bc <__addsf3x+0x5c>
    1496:	59 3f       	cpi	r21, 0xF9	; 249
    1498:	50 f4       	brcc	.+20     	; 0x14ae <__addsf3x+0x4e>
    149a:	50 3e       	cpi	r21, 0xE0	; 224
    149c:	68 f1       	brcs	.+90     	; 0x14f8 <__addsf3x+0x98>
    149e:	1a 16       	cp	r1, r26
    14a0:	f0 40       	sbci	r31, 0x00	; 0
    14a2:	a2 2f       	mov	r26, r18
    14a4:	23 2f       	mov	r18, r19
    14a6:	34 2f       	mov	r19, r20
    14a8:	44 27       	eor	r20, r20
    14aa:	58 5f       	subi	r21, 0xF8	; 248
    14ac:	f3 cf       	rjmp	.-26     	; 0x1494 <__addsf3x+0x34>
    14ae:	46 95       	lsr	r20
    14b0:	37 95       	ror	r19
    14b2:	27 95       	ror	r18
    14b4:	a7 95       	ror	r26
    14b6:	f0 40       	sbci	r31, 0x00	; 0
    14b8:	53 95       	inc	r21
    14ba:	c9 f7       	brne	.-14     	; 0x14ae <__addsf3x+0x4e>
    14bc:	7e f4       	brtc	.+30     	; 0x14dc <__addsf3x+0x7c>
    14be:	1f 16       	cp	r1, r31
    14c0:	ba 0b       	sbc	r27, r26
    14c2:	62 0b       	sbc	r22, r18
    14c4:	73 0b       	sbc	r23, r19
    14c6:	84 0b       	sbc	r24, r20
    14c8:	ba f0       	brmi	.+46     	; 0x14f8 <__addsf3x+0x98>
    14ca:	91 50       	subi	r25, 0x01	; 1
    14cc:	a1 f0       	breq	.+40     	; 0x14f6 <__addsf3x+0x96>
    14ce:	ff 0f       	add	r31, r31
    14d0:	bb 1f       	adc	r27, r27
    14d2:	66 1f       	adc	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	c2 f7       	brpl	.-16     	; 0x14ca <__addsf3x+0x6a>
    14da:	0e c0       	rjmp	.+28     	; 0x14f8 <__addsf3x+0x98>
    14dc:	ba 0f       	add	r27, r26
    14de:	62 1f       	adc	r22, r18
    14e0:	73 1f       	adc	r23, r19
    14e2:	84 1f       	adc	r24, r20
    14e4:	48 f4       	brcc	.+18     	; 0x14f8 <__addsf3x+0x98>
    14e6:	87 95       	ror	r24
    14e8:	77 95       	ror	r23
    14ea:	67 95       	ror	r22
    14ec:	b7 95       	ror	r27
    14ee:	f7 95       	ror	r31
    14f0:	9e 3f       	cpi	r25, 0xFE	; 254
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <__addsf3x+0x96>
    14f4:	b3 cf       	rjmp	.-154    	; 0x145c <__addsf3+0x1e>
    14f6:	93 95       	inc	r25
    14f8:	88 0f       	add	r24, r24
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <__addsf3x+0x9e>
    14fc:	99 27       	eor	r25, r25
    14fe:	ee 0f       	add	r30, r30
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	08 95       	ret

00001506 <__fixsfsi>:
    1506:	04 d0       	rcall	.+8      	; 0x1510 <__fixunssfsi>
    1508:	68 94       	set
    150a:	b1 11       	cpse	r27, r1
    150c:	b5 c0       	rjmp	.+362    	; 0x1678 <__fp_szero>
    150e:	08 95       	ret

00001510 <__fixunssfsi>:
    1510:	98 d0       	rcall	.+304    	; 0x1642 <__fp_splitA>
    1512:	88 f0       	brcs	.+34     	; 0x1536 <__fixunssfsi+0x26>
    1514:	9f 57       	subi	r25, 0x7F	; 127
    1516:	90 f0       	brcs	.+36     	; 0x153c <__fixunssfsi+0x2c>
    1518:	b9 2f       	mov	r27, r25
    151a:	99 27       	eor	r25, r25
    151c:	b7 51       	subi	r27, 0x17	; 23
    151e:	a0 f0       	brcs	.+40     	; 0x1548 <__fixunssfsi+0x38>
    1520:	d1 f0       	breq	.+52     	; 0x1556 <__fixunssfsi+0x46>
    1522:	66 0f       	add	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	88 1f       	adc	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	1a f0       	brmi	.+6      	; 0x1532 <__fixunssfsi+0x22>
    152c:	ba 95       	dec	r27
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__fixunssfsi+0x12>
    1530:	12 c0       	rjmp	.+36     	; 0x1556 <__fixunssfsi+0x46>
    1532:	b1 30       	cpi	r27, 0x01	; 1
    1534:	81 f0       	breq	.+32     	; 0x1556 <__fixunssfsi+0x46>
    1536:	9f d0       	rcall	.+318    	; 0x1676 <__fp_zero>
    1538:	b1 e0       	ldi	r27, 0x01	; 1
    153a:	08 95       	ret
    153c:	9c c0       	rjmp	.+312    	; 0x1676 <__fp_zero>
    153e:	67 2f       	mov	r22, r23
    1540:	78 2f       	mov	r23, r24
    1542:	88 27       	eor	r24, r24
    1544:	b8 5f       	subi	r27, 0xF8	; 248
    1546:	39 f0       	breq	.+14     	; 0x1556 <__fixunssfsi+0x46>
    1548:	b9 3f       	cpi	r27, 0xF9	; 249
    154a:	cc f3       	brlt	.-14     	; 0x153e <__fixunssfsi+0x2e>
    154c:	86 95       	lsr	r24
    154e:	77 95       	ror	r23
    1550:	67 95       	ror	r22
    1552:	b3 95       	inc	r27
    1554:	d9 f7       	brne	.-10     	; 0x154c <__fixunssfsi+0x3c>
    1556:	3e f4       	brtc	.+14     	; 0x1566 <__fixunssfsi+0x56>
    1558:	90 95       	com	r25
    155a:	80 95       	com	r24
    155c:	70 95       	com	r23
    155e:	61 95       	neg	r22
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	8f 4f       	sbci	r24, 0xFF	; 255
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	08 95       	ret

00001568 <__floatunsisf>:
    1568:	e8 94       	clt
    156a:	09 c0       	rjmp	.+18     	; 0x157e <__floatsisf+0x12>

0000156c <__floatsisf>:
    156c:	97 fb       	bst	r25, 7
    156e:	3e f4       	brtc	.+14     	; 0x157e <__floatsisf+0x12>
    1570:	90 95       	com	r25
    1572:	80 95       	com	r24
    1574:	70 95       	com	r23
    1576:	61 95       	neg	r22
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	8f 4f       	sbci	r24, 0xFF	; 255
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	99 23       	and	r25, r25
    1580:	a9 f0       	breq	.+42     	; 0x15ac <__floatsisf+0x40>
    1582:	f9 2f       	mov	r31, r25
    1584:	96 e9       	ldi	r25, 0x96	; 150
    1586:	bb 27       	eor	r27, r27
    1588:	93 95       	inc	r25
    158a:	f6 95       	lsr	r31
    158c:	87 95       	ror	r24
    158e:	77 95       	ror	r23
    1590:	67 95       	ror	r22
    1592:	b7 95       	ror	r27
    1594:	f1 11       	cpse	r31, r1
    1596:	f8 cf       	rjmp	.-16     	; 0x1588 <__floatsisf+0x1c>
    1598:	fa f4       	brpl	.+62     	; 0x15d8 <__floatsisf+0x6c>
    159a:	bb 0f       	add	r27, r27
    159c:	11 f4       	brne	.+4      	; 0x15a2 <__floatsisf+0x36>
    159e:	60 ff       	sbrs	r22, 0
    15a0:	1b c0       	rjmp	.+54     	; 0x15d8 <__floatsisf+0x6c>
    15a2:	6f 5f       	subi	r22, 0xFF	; 255
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	8f 4f       	sbci	r24, 0xFF	; 255
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	16 c0       	rjmp	.+44     	; 0x15d8 <__floatsisf+0x6c>
    15ac:	88 23       	and	r24, r24
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <__floatsisf+0x48>
    15b0:	96 e9       	ldi	r25, 0x96	; 150
    15b2:	11 c0       	rjmp	.+34     	; 0x15d6 <__floatsisf+0x6a>
    15b4:	77 23       	and	r23, r23
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <__floatsisf+0x54>
    15b8:	9e e8       	ldi	r25, 0x8E	; 142
    15ba:	87 2f       	mov	r24, r23
    15bc:	76 2f       	mov	r23, r22
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <__floatsisf+0x5e>
    15c0:	66 23       	and	r22, r22
    15c2:	71 f0       	breq	.+28     	; 0x15e0 <__floatsisf+0x74>
    15c4:	96 e8       	ldi	r25, 0x86	; 134
    15c6:	86 2f       	mov	r24, r22
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	2a f0       	brmi	.+10     	; 0x15d8 <__floatsisf+0x6c>
    15ce:	9a 95       	dec	r25
    15d0:	66 0f       	add	r22, r22
    15d2:	77 1f       	adc	r23, r23
    15d4:	88 1f       	adc	r24, r24
    15d6:	da f7       	brpl	.-10     	; 0x15ce <__floatsisf+0x62>
    15d8:	88 0f       	add	r24, r24
    15da:	96 95       	lsr	r25
    15dc:	87 95       	ror	r24
    15de:	97 f9       	bld	r25, 7
    15e0:	08 95       	ret

000015e2 <__fp_inf>:
    15e2:	97 f9       	bld	r25, 7
    15e4:	9f 67       	ori	r25, 0x7F	; 127
    15e6:	80 e8       	ldi	r24, 0x80	; 128
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	08 95       	ret

000015ee <__fp_nan>:
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	80 ec       	ldi	r24, 0xC0	; 192
    15f2:	08 95       	ret

000015f4 <__fp_pscA>:
    15f4:	00 24       	eor	r0, r0
    15f6:	0a 94       	dec	r0
    15f8:	16 16       	cp	r1, r22
    15fa:	17 06       	cpc	r1, r23
    15fc:	18 06       	cpc	r1, r24
    15fe:	09 06       	cpc	r0, r25
    1600:	08 95       	ret

00001602 <__fp_pscB>:
    1602:	00 24       	eor	r0, r0
    1604:	0a 94       	dec	r0
    1606:	12 16       	cp	r1, r18
    1608:	13 06       	cpc	r1, r19
    160a:	14 06       	cpc	r1, r20
    160c:	05 06       	cpc	r0, r21
    160e:	08 95       	ret

00001610 <__fp_round>:
    1610:	09 2e       	mov	r0, r25
    1612:	03 94       	inc	r0
    1614:	00 0c       	add	r0, r0
    1616:	11 f4       	brne	.+4      	; 0x161c <__fp_round+0xc>
    1618:	88 23       	and	r24, r24
    161a:	52 f0       	brmi	.+20     	; 0x1630 <__fp_round+0x20>
    161c:	bb 0f       	add	r27, r27
    161e:	40 f4       	brcc	.+16     	; 0x1630 <__fp_round+0x20>
    1620:	bf 2b       	or	r27, r31
    1622:	11 f4       	brne	.+4      	; 0x1628 <__fp_round+0x18>
    1624:	60 ff       	sbrs	r22, 0
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__fp_round+0x20>
    1628:	6f 5f       	subi	r22, 0xFF	; 255
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	8f 4f       	sbci	r24, 0xFF	; 255
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	08 95       	ret

00001632 <__fp_split3>:
    1632:	57 fd       	sbrc	r21, 7
    1634:	90 58       	subi	r25, 0x80	; 128
    1636:	44 0f       	add	r20, r20
    1638:	55 1f       	adc	r21, r21
    163a:	59 f0       	breq	.+22     	; 0x1652 <__fp_splitA+0x10>
    163c:	5f 3f       	cpi	r21, 0xFF	; 255
    163e:	71 f0       	breq	.+28     	; 0x165c <__fp_splitA+0x1a>
    1640:	47 95       	ror	r20

00001642 <__fp_splitA>:
    1642:	88 0f       	add	r24, r24
    1644:	97 fb       	bst	r25, 7
    1646:	99 1f       	adc	r25, r25
    1648:	61 f0       	breq	.+24     	; 0x1662 <__fp_splitA+0x20>
    164a:	9f 3f       	cpi	r25, 0xFF	; 255
    164c:	79 f0       	breq	.+30     	; 0x166c <__fp_splitA+0x2a>
    164e:	87 95       	ror	r24
    1650:	08 95       	ret
    1652:	12 16       	cp	r1, r18
    1654:	13 06       	cpc	r1, r19
    1656:	14 06       	cpc	r1, r20
    1658:	55 1f       	adc	r21, r21
    165a:	f2 cf       	rjmp	.-28     	; 0x1640 <__fp_split3+0xe>
    165c:	46 95       	lsr	r20
    165e:	f1 df       	rcall	.-30     	; 0x1642 <__fp_splitA>
    1660:	08 c0       	rjmp	.+16     	; 0x1672 <__fp_splitA+0x30>
    1662:	16 16       	cp	r1, r22
    1664:	17 06       	cpc	r1, r23
    1666:	18 06       	cpc	r1, r24
    1668:	99 1f       	adc	r25, r25
    166a:	f1 cf       	rjmp	.-30     	; 0x164e <__fp_splitA+0xc>
    166c:	86 95       	lsr	r24
    166e:	71 05       	cpc	r23, r1
    1670:	61 05       	cpc	r22, r1
    1672:	08 94       	sec
    1674:	08 95       	ret

00001676 <__fp_zero>:
    1676:	e8 94       	clt

00001678 <__fp_szero>:
    1678:	bb 27       	eor	r27, r27
    167a:	66 27       	eor	r22, r22
    167c:	77 27       	eor	r23, r23
    167e:	cb 01       	movw	r24, r22
    1680:	97 f9       	bld	r25, 7
    1682:	08 95       	ret

00001684 <pow>:
    1684:	fa 01       	movw	r30, r20
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	30 96       	adiw	r30, 0x00	; 0
    168c:	21 05       	cpc	r18, r1
    168e:	31 05       	cpc	r19, r1
    1690:	99 f1       	breq	.+102    	; 0x16f8 <pow+0x74>
    1692:	61 15       	cp	r22, r1
    1694:	71 05       	cpc	r23, r1
    1696:	61 f4       	brne	.+24     	; 0x16b0 <pow+0x2c>
    1698:	80 38       	cpi	r24, 0x80	; 128
    169a:	bf e3       	ldi	r27, 0x3F	; 63
    169c:	9b 07       	cpc	r25, r27
    169e:	49 f1       	breq	.+82     	; 0x16f2 <pow+0x6e>
    16a0:	68 94       	set
    16a2:	90 38       	cpi	r25, 0x80	; 128
    16a4:	81 05       	cpc	r24, r1
    16a6:	61 f0       	breq	.+24     	; 0x16c0 <pow+0x3c>
    16a8:	80 38       	cpi	r24, 0x80	; 128
    16aa:	bf ef       	ldi	r27, 0xFF	; 255
    16ac:	9b 07       	cpc	r25, r27
    16ae:	41 f0       	breq	.+16     	; 0x16c0 <pow+0x3c>
    16b0:	99 23       	and	r25, r25
    16b2:	42 f5       	brpl	.+80     	; 0x1704 <pow+0x80>
    16b4:	ff 3f       	cpi	r31, 0xFF	; 255
    16b6:	e1 05       	cpc	r30, r1
    16b8:	31 05       	cpc	r19, r1
    16ba:	21 05       	cpc	r18, r1
    16bc:	11 f1       	breq	.+68     	; 0x1702 <pow+0x7e>
    16be:	e8 94       	clt
    16c0:	08 94       	sec
    16c2:	e7 95       	ror	r30
    16c4:	d9 01       	movw	r26, r18
    16c6:	aa 23       	and	r26, r26
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <pow+0x50>
    16ca:	ab 2f       	mov	r26, r27
    16cc:	be 2f       	mov	r27, r30
    16ce:	f8 5f       	subi	r31, 0xF8	; 248
    16d0:	d0 f3       	brcs	.-12     	; 0x16c6 <pow+0x42>
    16d2:	10 c0       	rjmp	.+32     	; 0x16f4 <pow+0x70>
    16d4:	ff 5f       	subi	r31, 0xFF	; 255
    16d6:	70 f4       	brcc	.+28     	; 0x16f4 <pow+0x70>
    16d8:	a6 95       	lsr	r26
    16da:	e0 f7       	brcc	.-8      	; 0x16d4 <pow+0x50>
    16dc:	f7 39       	cpi	r31, 0x97	; 151
    16de:	50 f0       	brcs	.+20     	; 0x16f4 <pow+0x70>
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <pow+0x64>
    16e2:	ff 3a       	cpi	r31, 0xAF	; 175
    16e4:	38 f4       	brcc	.+14     	; 0x16f4 <pow+0x70>
    16e6:	9f 77       	andi	r25, 0x7F	; 127
    16e8:	9f 93       	push	r25
    16ea:	0c d0       	rcall	.+24     	; 0x1704 <pow+0x80>
    16ec:	0f 90       	pop	r0
    16ee:	07 fc       	sbrc	r0, 7
    16f0:	90 58       	subi	r25, 0x80	; 128
    16f2:	08 95       	ret
    16f4:	3e f0       	brts	.+14     	; 0x1704 <pow+0x80>
    16f6:	7b cf       	rjmp	.-266    	; 0x15ee <__fp_nan>
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	80 e8       	ldi	r24, 0x80	; 128
    16fe:	9f e3       	ldi	r25, 0x3F	; 63
    1700:	08 95       	ret
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	9f 77       	andi	r25, 0x7F	; 127
    1706:	5f 93       	push	r21
    1708:	4f 93       	push	r20
    170a:	3f 93       	push	r19
    170c:	2f 93       	push	r18
    170e:	9e d0       	rcall	.+316    	; 0x184c <log>
    1710:	2f 91       	pop	r18
    1712:	3f 91       	pop	r19
    1714:	4f 91       	pop	r20
    1716:	5f 91       	pop	r21
    1718:	0c d1       	rcall	.+536    	; 0x1932 <__mulsf3>
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <exp>
    171c:	19 f4       	brne	.+6      	; 0x1724 <pow+0xa0>
    171e:	0e f0       	brts	.+2      	; 0x1722 <pow+0x9e>
    1720:	60 cf       	rjmp	.-320    	; 0x15e2 <__fp_inf>
    1722:	a9 cf       	rjmp	.-174    	; 0x1676 <__fp_zero>
    1724:	64 cf       	rjmp	.-312    	; 0x15ee <__fp_nan>

00001726 <exp>:
    1726:	8d df       	rcall	.-230    	; 0x1642 <__fp_splitA>
    1728:	c8 f3       	brcs	.-14     	; 0x171c <pow+0x98>
    172a:	96 38       	cpi	r25, 0x86	; 134
    172c:	c0 f7       	brcc	.-16     	; 0x171e <pow+0x9a>
    172e:	07 f8       	bld	r0, 7
    1730:	0f 92       	push	r0
    1732:	e8 94       	clt
    1734:	2b e3       	ldi	r18, 0x3B	; 59
    1736:	3a ea       	ldi	r19, 0xAA	; 170
    1738:	48 eb       	ldi	r20, 0xB8	; 184
    173a:	5f e7       	ldi	r21, 0x7F	; 127
    173c:	08 d1       	rcall	.+528    	; 0x194e <__mulsf3_pse>
    173e:	0f 92       	push	r0
    1740:	0f 92       	push	r0
    1742:	0f 92       	push	r0
    1744:	4d b7       	in	r20, 0x3d	; 61
    1746:	5e b7       	in	r21, 0x3e	; 62
    1748:	0f 92       	push	r0
    174a:	c0 d0       	rcall	.+384    	; 0x18cc <modf>
    174c:	e8 e1       	ldi	r30, 0x18	; 24
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	16 d0       	rcall	.+44     	; 0x177e <__fp_powser>
    1752:	4f 91       	pop	r20
    1754:	5f 91       	pop	r21
    1756:	ef 91       	pop	r30
    1758:	ff 91       	pop	r31
    175a:	e5 95       	asr	r30
    175c:	ee 1f       	adc	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	49 f0       	breq	.+18     	; 0x1774 <exp+0x4e>
    1762:	fe 57       	subi	r31, 0x7E	; 126
    1764:	e0 68       	ori	r30, 0x80	; 128
    1766:	44 27       	eor	r20, r20
    1768:	ee 0f       	add	r30, r30
    176a:	44 1f       	adc	r20, r20
    176c:	fa 95       	dec	r31
    176e:	e1 f7       	brne	.-8      	; 0x1768 <exp+0x42>
    1770:	41 95       	neg	r20
    1772:	55 0b       	sbc	r21, r21
    1774:	32 d0       	rcall	.+100    	; 0x17da <ldexp>
    1776:	0f 90       	pop	r0
    1778:	07 fe       	sbrs	r0, 7
    177a:	26 c0       	rjmp	.+76     	; 0x17c8 <inverse>
    177c:	08 95       	ret

0000177e <__fp_powser>:
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	1f 93       	push	r17
    1784:	0f 93       	push	r16
    1786:	ff 92       	push	r15
    1788:	ef 92       	push	r14
    178a:	df 92       	push	r13
    178c:	7b 01       	movw	r14, r22
    178e:	8c 01       	movw	r16, r24
    1790:	68 94       	set
    1792:	05 c0       	rjmp	.+10     	; 0x179e <__fp_powser+0x20>
    1794:	da 2e       	mov	r13, r26
    1796:	ef 01       	movw	r28, r30
    1798:	d8 d0       	rcall	.+432    	; 0x194a <__mulsf3x>
    179a:	fe 01       	movw	r30, r28
    179c:	e8 94       	clt
    179e:	a5 91       	lpm	r26, Z+
    17a0:	25 91       	lpm	r18, Z+
    17a2:	35 91       	lpm	r19, Z+
    17a4:	45 91       	lpm	r20, Z+
    17a6:	55 91       	lpm	r21, Z+
    17a8:	ae f3       	brts	.-22     	; 0x1794 <__fp_powser+0x16>
    17aa:	ef 01       	movw	r28, r30
    17ac:	59 de       	rcall	.-846    	; 0x1460 <__addsf3x>
    17ae:	fe 01       	movw	r30, r28
    17b0:	97 01       	movw	r18, r14
    17b2:	a8 01       	movw	r20, r16
    17b4:	da 94       	dec	r13
    17b6:	79 f7       	brne	.-34     	; 0x1796 <__fp_powser+0x18>
    17b8:	df 90       	pop	r13
    17ba:	ef 90       	pop	r14
    17bc:	ff 90       	pop	r15
    17be:	0f 91       	pop	r16
    17c0:	1f 91       	pop	r17
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <inverse>:
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	80 e8       	ldi	r24, 0x80	; 128
    17d2:	9f e3       	ldi	r25, 0x3F	; 63
    17d4:	11 c1       	rjmp	.+546    	; 0x19f8 <__divsf3>
    17d6:	05 cf       	rjmp	.-502    	; 0x15e2 <__fp_inf>
    17d8:	77 c1       	rjmp	.+750    	; 0x1ac8 <__fp_mpack>

000017da <ldexp>:
    17da:	33 df       	rcall	.-410    	; 0x1642 <__fp_splitA>
    17dc:	e8 f3       	brcs	.-6      	; 0x17d8 <inverse+0x10>
    17de:	99 23       	and	r25, r25
    17e0:	d9 f3       	breq	.-10     	; 0x17d8 <inverse+0x10>
    17e2:	94 0f       	add	r25, r20
    17e4:	51 1d       	adc	r21, r1
    17e6:	bb f3       	brvs	.-18     	; 0x17d6 <inverse+0xe>
    17e8:	91 50       	subi	r25, 0x01	; 1
    17ea:	50 40       	sbci	r21, 0x00	; 0
    17ec:	94 f0       	brlt	.+36     	; 0x1812 <ldexp+0x38>
    17ee:	59 f0       	breq	.+22     	; 0x1806 <ldexp+0x2c>
    17f0:	88 23       	and	r24, r24
    17f2:	32 f0       	brmi	.+12     	; 0x1800 <ldexp+0x26>
    17f4:	66 0f       	add	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	91 50       	subi	r25, 0x01	; 1
    17fc:	50 40       	sbci	r21, 0x00	; 0
    17fe:	c1 f7       	brne	.-16     	; 0x17f0 <ldexp+0x16>
    1800:	9e 3f       	cpi	r25, 0xFE	; 254
    1802:	51 05       	cpc	r21, r1
    1804:	44 f7       	brge	.-48     	; 0x17d6 <inverse+0xe>
    1806:	88 0f       	add	r24, r24
    1808:	91 1d       	adc	r25, r1
    180a:	96 95       	lsr	r25
    180c:	87 95       	ror	r24
    180e:	97 f9       	bld	r25, 7
    1810:	08 95       	ret
    1812:	5f 3f       	cpi	r21, 0xFF	; 255
    1814:	ac f0       	brlt	.+42     	; 0x1840 <ldexp+0x66>
    1816:	98 3e       	cpi	r25, 0xE8	; 232
    1818:	9c f0       	brlt	.+38     	; 0x1840 <ldexp+0x66>
    181a:	bb 27       	eor	r27, r27
    181c:	86 95       	lsr	r24
    181e:	77 95       	ror	r23
    1820:	67 95       	ror	r22
    1822:	b7 95       	ror	r27
    1824:	08 f4       	brcc	.+2      	; 0x1828 <ldexp+0x4e>
    1826:	b1 60       	ori	r27, 0x01	; 1
    1828:	93 95       	inc	r25
    182a:	c1 f7       	brne	.-16     	; 0x181c <ldexp+0x42>
    182c:	bb 0f       	add	r27, r27
    182e:	58 f7       	brcc	.-42     	; 0x1806 <ldexp+0x2c>
    1830:	11 f4       	brne	.+4      	; 0x1836 <ldexp+0x5c>
    1832:	60 ff       	sbrs	r22, 0
    1834:	e8 cf       	rjmp	.-48     	; 0x1806 <ldexp+0x2c>
    1836:	6f 5f       	subi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	8f 4f       	sbci	r24, 0xFF	; 255
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	e3 cf       	rjmp	.-58     	; 0x1806 <ldexp+0x2c>
    1840:	1b cf       	rjmp	.-458    	; 0x1678 <__fp_szero>
    1842:	0e f0       	brts	.+2      	; 0x1846 <ldexp+0x6c>
    1844:	41 c1       	rjmp	.+642    	; 0x1ac8 <__fp_mpack>
    1846:	d3 ce       	rjmp	.-602    	; 0x15ee <__fp_nan>
    1848:	68 94       	set
    184a:	cb ce       	rjmp	.-618    	; 0x15e2 <__fp_inf>

0000184c <log>:
    184c:	fa de       	rcall	.-524    	; 0x1642 <__fp_splitA>
    184e:	c8 f3       	brcs	.-14     	; 0x1842 <ldexp+0x68>
    1850:	99 23       	and	r25, r25
    1852:	d1 f3       	breq	.-12     	; 0x1848 <ldexp+0x6e>
    1854:	c6 f3       	brts	.-16     	; 0x1846 <ldexp+0x6c>
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	1f 93       	push	r17
    185c:	0f 93       	push	r16
    185e:	ff 92       	push	r15
    1860:	c9 2f       	mov	r28, r25
    1862:	dd 27       	eor	r29, r29
    1864:	88 23       	and	r24, r24
    1866:	2a f0       	brmi	.+10     	; 0x1872 <log+0x26>
    1868:	21 97       	sbiw	r28, 0x01	; 1
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	da f7       	brpl	.-10     	; 0x1868 <log+0x1c>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f eb       	ldi	r21, 0xBF	; 191
    187a:	9f e3       	ldi	r25, 0x3F	; 63
    187c:	88 39       	cpi	r24, 0x98	; 152
    187e:	20 f0       	brcs	.+8      	; 0x1888 <log+0x3c>
    1880:	80 3e       	cpi	r24, 0xE0	; 224
    1882:	30 f0       	brcs	.+12     	; 0x1890 <log+0x44>
    1884:	21 96       	adiw	r28, 0x01	; 1
    1886:	8f 77       	andi	r24, 0x7F	; 127
    1888:	da dd       	rcall	.-1100   	; 0x143e <__addsf3>
    188a:	e0 e4       	ldi	r30, 0x40	; 64
    188c:	f1 e0       	ldi	r31, 0x01	; 1
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <log+0x4a>
    1890:	d6 dd       	rcall	.-1108   	; 0x143e <__addsf3>
    1892:	ed e6       	ldi	r30, 0x6D	; 109
    1894:	f1 e0       	ldi	r31, 0x01	; 1
    1896:	73 df       	rcall	.-282    	; 0x177e <__fp_powser>
    1898:	8b 01       	movw	r16, r22
    189a:	be 01       	movw	r22, r28
    189c:	ec 01       	movw	r28, r24
    189e:	fb 2e       	mov	r15, r27
    18a0:	6f 57       	subi	r22, 0x7F	; 127
    18a2:	71 09       	sbc	r23, r1
    18a4:	75 95       	asr	r23
    18a6:	77 1f       	adc	r23, r23
    18a8:	88 0b       	sbc	r24, r24
    18aa:	99 0b       	sbc	r25, r25
    18ac:	5f de       	rcall	.-834    	; 0x156c <__floatsisf>
    18ae:	28 e1       	ldi	r18, 0x18	; 24
    18b0:	32 e7       	ldi	r19, 0x72	; 114
    18b2:	41 e3       	ldi	r20, 0x31	; 49
    18b4:	5f e3       	ldi	r21, 0x3F	; 63
    18b6:	49 d0       	rcall	.+146    	; 0x194a <__mulsf3x>
    18b8:	af 2d       	mov	r26, r15
    18ba:	98 01       	movw	r18, r16
    18bc:	ae 01       	movw	r20, r28
    18be:	ff 90       	pop	r15
    18c0:	0f 91       	pop	r16
    18c2:	1f 91       	pop	r17
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	cb dd       	rcall	.-1130   	; 0x1460 <__addsf3x>
    18ca:	a2 ce       	rjmp	.-700    	; 0x1610 <__fp_round>

000018cc <modf>:
    18cc:	fa 01       	movw	r30, r20
    18ce:	dc 01       	movw	r26, r24
    18d0:	aa 0f       	add	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	9b 01       	movw	r18, r22
    18d6:	ac 01       	movw	r20, r24
    18d8:	bf 57       	subi	r27, 0x7F	; 127
    18da:	28 f4       	brcc	.+10     	; 0x18e6 <modf+0x1a>
    18dc:	22 27       	eor	r18, r18
    18de:	33 27       	eor	r19, r19
    18e0:	44 27       	eor	r20, r20
    18e2:	50 78       	andi	r21, 0x80	; 128
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <modf+0x58>
    18e6:	b7 51       	subi	r27, 0x17	; 23
    18e8:	88 f4       	brcc	.+34     	; 0x190c <modf+0x40>
    18ea:	ab 2f       	mov	r26, r27
    18ec:	00 24       	eor	r0, r0
    18ee:	46 95       	lsr	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	01 1c       	adc	r0, r1
    18f6:	a3 95       	inc	r26
    18f8:	d2 f3       	brmi	.-12     	; 0x18ee <modf+0x22>
    18fa:	00 20       	and	r0, r0
    18fc:	69 f0       	breq	.+26     	; 0x1918 <modf+0x4c>
    18fe:	22 0f       	add	r18, r18
    1900:	33 1f       	adc	r19, r19
    1902:	44 1f       	adc	r20, r20
    1904:	b3 95       	inc	r27
    1906:	da f3       	brmi	.-10     	; 0x18fe <modf+0x32>
    1908:	0d d0       	rcall	.+26     	; 0x1924 <modf+0x58>
    190a:	98 cd       	rjmp	.-1232   	; 0x143c <__subsf3>
    190c:	61 30       	cpi	r22, 0x01	; 1
    190e:	71 05       	cpc	r23, r1
    1910:	a0 e8       	ldi	r26, 0x80	; 128
    1912:	8a 07       	cpc	r24, r26
    1914:	b9 46       	sbci	r27, 0x69	; 105
    1916:	30 f4       	brcc	.+12     	; 0x1924 <modf+0x58>
    1918:	9b 01       	movw	r18, r22
    191a:	ac 01       	movw	r20, r24
    191c:	66 27       	eor	r22, r22
    191e:	77 27       	eor	r23, r23
    1920:	88 27       	eor	r24, r24
    1922:	90 78       	andi	r25, 0x80	; 128
    1924:	30 96       	adiw	r30, 0x00	; 0
    1926:	21 f0       	breq	.+8      	; 0x1930 <modf+0x64>
    1928:	20 83       	st	Z, r18
    192a:	31 83       	std	Z+1, r19	; 0x01
    192c:	42 83       	std	Z+2, r20	; 0x02
    192e:	53 83       	std	Z+3, r21	; 0x03
    1930:	08 95       	ret

00001932 <__mulsf3>:
    1932:	0b d0       	rcall	.+22     	; 0x194a <__mulsf3x>
    1934:	6d ce       	rjmp	.-806    	; 0x1610 <__fp_round>
    1936:	5e de       	rcall	.-836    	; 0x15f4 <__fp_pscA>
    1938:	28 f0       	brcs	.+10     	; 0x1944 <__mulsf3+0x12>
    193a:	63 de       	rcall	.-826    	; 0x1602 <__fp_pscB>
    193c:	18 f0       	brcs	.+6      	; 0x1944 <__mulsf3+0x12>
    193e:	95 23       	and	r25, r21
    1940:	09 f0       	breq	.+2      	; 0x1944 <__mulsf3+0x12>
    1942:	4f ce       	rjmp	.-866    	; 0x15e2 <__fp_inf>
    1944:	54 ce       	rjmp	.-856    	; 0x15ee <__fp_nan>
    1946:	11 24       	eor	r1, r1
    1948:	97 ce       	rjmp	.-722    	; 0x1678 <__fp_szero>

0000194a <__mulsf3x>:
    194a:	73 de       	rcall	.-794    	; 0x1632 <__fp_split3>
    194c:	a0 f3       	brcs	.-24     	; 0x1936 <__mulsf3+0x4>

0000194e <__mulsf3_pse>:
    194e:	95 9f       	mul	r25, r21
    1950:	d1 f3       	breq	.-12     	; 0x1946 <__mulsf3+0x14>
    1952:	95 0f       	add	r25, r21
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	55 1f       	adc	r21, r21
    1958:	62 9f       	mul	r22, r18
    195a:	f0 01       	movw	r30, r0
    195c:	72 9f       	mul	r23, r18
    195e:	bb 27       	eor	r27, r27
    1960:	f0 0d       	add	r31, r0
    1962:	b1 1d       	adc	r27, r1
    1964:	63 9f       	mul	r22, r19
    1966:	aa 27       	eor	r26, r26
    1968:	f0 0d       	add	r31, r0
    196a:	b1 1d       	adc	r27, r1
    196c:	aa 1f       	adc	r26, r26
    196e:	64 9f       	mul	r22, r20
    1970:	66 27       	eor	r22, r22
    1972:	b0 0d       	add	r27, r0
    1974:	a1 1d       	adc	r26, r1
    1976:	66 1f       	adc	r22, r22
    1978:	82 9f       	mul	r24, r18
    197a:	22 27       	eor	r18, r18
    197c:	b0 0d       	add	r27, r0
    197e:	a1 1d       	adc	r26, r1
    1980:	62 1f       	adc	r22, r18
    1982:	73 9f       	mul	r23, r19
    1984:	b0 0d       	add	r27, r0
    1986:	a1 1d       	adc	r26, r1
    1988:	62 1f       	adc	r22, r18
    198a:	83 9f       	mul	r24, r19
    198c:	a0 0d       	add	r26, r0
    198e:	61 1d       	adc	r22, r1
    1990:	22 1f       	adc	r18, r18
    1992:	74 9f       	mul	r23, r20
    1994:	33 27       	eor	r19, r19
    1996:	a0 0d       	add	r26, r0
    1998:	61 1d       	adc	r22, r1
    199a:	23 1f       	adc	r18, r19
    199c:	84 9f       	mul	r24, r20
    199e:	60 0d       	add	r22, r0
    19a0:	21 1d       	adc	r18, r1
    19a2:	82 2f       	mov	r24, r18
    19a4:	76 2f       	mov	r23, r22
    19a6:	6a 2f       	mov	r22, r26
    19a8:	11 24       	eor	r1, r1
    19aa:	9f 57       	subi	r25, 0x7F	; 127
    19ac:	50 40       	sbci	r21, 0x00	; 0
    19ae:	8a f0       	brmi	.+34     	; 0x19d2 <__mulsf3_pse+0x84>
    19b0:	e1 f0       	breq	.+56     	; 0x19ea <__mulsf3_pse+0x9c>
    19b2:	88 23       	and	r24, r24
    19b4:	4a f0       	brmi	.+18     	; 0x19c8 <__mulsf3_pse+0x7a>
    19b6:	ee 0f       	add	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	bb 1f       	adc	r27, r27
    19bc:	66 1f       	adc	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	88 1f       	adc	r24, r24
    19c2:	91 50       	subi	r25, 0x01	; 1
    19c4:	50 40       	sbci	r21, 0x00	; 0
    19c6:	a9 f7       	brne	.-22     	; 0x19b2 <__mulsf3_pse+0x64>
    19c8:	9e 3f       	cpi	r25, 0xFE	; 254
    19ca:	51 05       	cpc	r21, r1
    19cc:	70 f0       	brcs	.+28     	; 0x19ea <__mulsf3_pse+0x9c>
    19ce:	09 ce       	rjmp	.-1006   	; 0x15e2 <__fp_inf>
    19d0:	53 ce       	rjmp	.-858    	; 0x1678 <__fp_szero>
    19d2:	5f 3f       	cpi	r21, 0xFF	; 255
    19d4:	ec f3       	brlt	.-6      	; 0x19d0 <__mulsf3_pse+0x82>
    19d6:	98 3e       	cpi	r25, 0xE8	; 232
    19d8:	dc f3       	brlt	.-10     	; 0x19d0 <__mulsf3_pse+0x82>
    19da:	86 95       	lsr	r24
    19dc:	77 95       	ror	r23
    19de:	67 95       	ror	r22
    19e0:	b7 95       	ror	r27
    19e2:	f7 95       	ror	r31
    19e4:	e7 95       	ror	r30
    19e6:	9f 5f       	subi	r25, 0xFF	; 255
    19e8:	c1 f7       	brne	.-16     	; 0x19da <__mulsf3_pse+0x8c>
    19ea:	fe 2b       	or	r31, r30
    19ec:	88 0f       	add	r24, r24
    19ee:	91 1d       	adc	r25, r1
    19f0:	96 95       	lsr	r25
    19f2:	87 95       	ror	r24
    19f4:	97 f9       	bld	r25, 7
    19f6:	08 95       	ret

000019f8 <__divsf3>:
    19f8:	0c d0       	rcall	.+24     	; 0x1a12 <__divsf3x>
    19fa:	0a ce       	rjmp	.-1004   	; 0x1610 <__fp_round>
    19fc:	02 de       	rcall	.-1020   	; 0x1602 <__fp_pscB>
    19fe:	40 f0       	brcs	.+16     	; 0x1a10 <__divsf3+0x18>
    1a00:	f9 dd       	rcall	.-1038   	; 0x15f4 <__fp_pscA>
    1a02:	30 f0       	brcs	.+12     	; 0x1a10 <__divsf3+0x18>
    1a04:	21 f4       	brne	.+8      	; 0x1a0e <__divsf3+0x16>
    1a06:	5f 3f       	cpi	r21, 0xFF	; 255
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <__divsf3+0x18>
    1a0a:	eb cd       	rjmp	.-1066   	; 0x15e2 <__fp_inf>
    1a0c:	51 11       	cpse	r21, r1
    1a0e:	34 ce       	rjmp	.-920    	; 0x1678 <__fp_szero>
    1a10:	ee cd       	rjmp	.-1060   	; 0x15ee <__fp_nan>

00001a12 <__divsf3x>:
    1a12:	0f de       	rcall	.-994    	; 0x1632 <__fp_split3>
    1a14:	98 f3       	brcs	.-26     	; 0x19fc <__divsf3+0x4>

00001a16 <__divsf3_pse>:
    1a16:	99 23       	and	r25, r25
    1a18:	c9 f3       	breq	.-14     	; 0x1a0c <__divsf3+0x14>
    1a1a:	55 23       	and	r21, r21
    1a1c:	b1 f3       	breq	.-20     	; 0x1a0a <__divsf3+0x12>
    1a1e:	95 1b       	sub	r25, r21
    1a20:	55 0b       	sbc	r21, r21
    1a22:	bb 27       	eor	r27, r27
    1a24:	aa 27       	eor	r26, r26
    1a26:	62 17       	cp	r22, r18
    1a28:	73 07       	cpc	r23, r19
    1a2a:	84 07       	cpc	r24, r20
    1a2c:	38 f0       	brcs	.+14     	; 0x1a3c <__divsf3_pse+0x26>
    1a2e:	9f 5f       	subi	r25, 0xFF	; 255
    1a30:	5f 4f       	sbci	r21, 0xFF	; 255
    1a32:	22 0f       	add	r18, r18
    1a34:	33 1f       	adc	r19, r19
    1a36:	44 1f       	adc	r20, r20
    1a38:	aa 1f       	adc	r26, r26
    1a3a:	a9 f3       	breq	.-22     	; 0x1a26 <__divsf3_pse+0x10>
    1a3c:	33 d0       	rcall	.+102    	; 0x1aa4 <__divsf3_pse+0x8e>
    1a3e:	0e 2e       	mov	r0, r30
    1a40:	3a f0       	brmi	.+14     	; 0x1a50 <__divsf3_pse+0x3a>
    1a42:	e0 e8       	ldi	r30, 0x80	; 128
    1a44:	30 d0       	rcall	.+96     	; 0x1aa6 <__divsf3_pse+0x90>
    1a46:	91 50       	subi	r25, 0x01	; 1
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	e6 95       	lsr	r30
    1a4c:	00 1c       	adc	r0, r0
    1a4e:	ca f7       	brpl	.-14     	; 0x1a42 <__divsf3_pse+0x2c>
    1a50:	29 d0       	rcall	.+82     	; 0x1aa4 <__divsf3_pse+0x8e>
    1a52:	fe 2f       	mov	r31, r30
    1a54:	27 d0       	rcall	.+78     	; 0x1aa4 <__divsf3_pse+0x8e>
    1a56:	66 0f       	add	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	26 17       	cp	r18, r22
    1a60:	37 07       	cpc	r19, r23
    1a62:	48 07       	cpc	r20, r24
    1a64:	ab 07       	cpc	r26, r27
    1a66:	b0 e8       	ldi	r27, 0x80	; 128
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <__divsf3_pse+0x56>
    1a6a:	bb 0b       	sbc	r27, r27
    1a6c:	80 2d       	mov	r24, r0
    1a6e:	bf 01       	movw	r22, r30
    1a70:	ff 27       	eor	r31, r31
    1a72:	93 58       	subi	r25, 0x83	; 131
    1a74:	5f 4f       	sbci	r21, 0xFF	; 255
    1a76:	2a f0       	brmi	.+10     	; 0x1a82 <__divsf3_pse+0x6c>
    1a78:	9e 3f       	cpi	r25, 0xFE	; 254
    1a7a:	51 05       	cpc	r21, r1
    1a7c:	68 f0       	brcs	.+26     	; 0x1a98 <__divsf3_pse+0x82>
    1a7e:	b1 cd       	rjmp	.-1182   	; 0x15e2 <__fp_inf>
    1a80:	fb cd       	rjmp	.-1034   	; 0x1678 <__fp_szero>
    1a82:	5f 3f       	cpi	r21, 0xFF	; 255
    1a84:	ec f3       	brlt	.-6      	; 0x1a80 <__divsf3_pse+0x6a>
    1a86:	98 3e       	cpi	r25, 0xE8	; 232
    1a88:	dc f3       	brlt	.-10     	; 0x1a80 <__divsf3_pse+0x6a>
    1a8a:	86 95       	lsr	r24
    1a8c:	77 95       	ror	r23
    1a8e:	67 95       	ror	r22
    1a90:	b7 95       	ror	r27
    1a92:	f7 95       	ror	r31
    1a94:	9f 5f       	subi	r25, 0xFF	; 255
    1a96:	c9 f7       	brne	.-14     	; 0x1a8a <__divsf3_pse+0x74>
    1a98:	88 0f       	add	r24, r24
    1a9a:	91 1d       	adc	r25, r1
=======
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <__subsf3>:
    18f6:	50 58       	subi	r21, 0x80	; 128

000018f8 <__addsf3>:
    18f8:	bb 27       	eor	r27, r27
    18fa:	aa 27       	eor	r26, r26
    18fc:	0e d0       	rcall	.+28     	; 0x191a <__addsf3x>
    18fe:	4b c1       	rjmp	.+662    	; 0x1b96 <__fp_round>
    1900:	3c d1       	rcall	.+632    	; 0x1b7a <__fp_pscA>
    1902:	30 f0       	brcs	.+12     	; 0x1910 <__addsf3+0x18>
    1904:	41 d1       	rcall	.+642    	; 0x1b88 <__fp_pscB>
    1906:	20 f0       	brcs	.+8      	; 0x1910 <__addsf3+0x18>
    1908:	31 f4       	brne	.+12     	; 0x1916 <__addsf3+0x1e>
    190a:	9f 3f       	cpi	r25, 0xFF	; 255
    190c:	11 f4       	brne	.+4      	; 0x1912 <__addsf3+0x1a>
    190e:	1e f4       	brtc	.+6      	; 0x1916 <__addsf3+0x1e>
    1910:	31 c1       	rjmp	.+610    	; 0x1b74 <__fp_nan>
    1912:	0e f4       	brtc	.+2      	; 0x1916 <__addsf3+0x1e>
    1914:	e0 95       	com	r30
    1916:	e7 fb       	bst	r30, 7
    1918:	27 c1       	rjmp	.+590    	; 0x1b68 <__fp_inf>

0000191a <__addsf3x>:
    191a:	e9 2f       	mov	r30, r25
    191c:	4d d1       	rcall	.+666    	; 0x1bb8 <__fp_split3>
    191e:	80 f3       	brcs	.-32     	; 0x1900 <__addsf3+0x8>
    1920:	ba 17       	cp	r27, r26
    1922:	62 07       	cpc	r22, r18
    1924:	73 07       	cpc	r23, r19
    1926:	84 07       	cpc	r24, r20
    1928:	95 07       	cpc	r25, r21
    192a:	18 f0       	brcs	.+6      	; 0x1932 <__addsf3x+0x18>
    192c:	71 f4       	brne	.+28     	; 0x194a <__addsf3x+0x30>
    192e:	9e f5       	brtc	.+102    	; 0x1996 <__addsf3x+0x7c>
    1930:	65 c1       	rjmp	.+714    	; 0x1bfc <__fp_zero>
    1932:	0e f4       	brtc	.+2      	; 0x1936 <__addsf3x+0x1c>
    1934:	e0 95       	com	r30
    1936:	0b 2e       	mov	r0, r27
    1938:	ba 2f       	mov	r27, r26
    193a:	a0 2d       	mov	r26, r0
    193c:	0b 01       	movw	r0, r22
    193e:	b9 01       	movw	r22, r18
    1940:	90 01       	movw	r18, r0
    1942:	0c 01       	movw	r0, r24
    1944:	ca 01       	movw	r24, r20
    1946:	a0 01       	movw	r20, r0
    1948:	11 24       	eor	r1, r1
    194a:	ff 27       	eor	r31, r31
    194c:	59 1b       	sub	r21, r25
    194e:	99 f0       	breq	.+38     	; 0x1976 <__addsf3x+0x5c>
    1950:	59 3f       	cpi	r21, 0xF9	; 249
    1952:	50 f4       	brcc	.+20     	; 0x1968 <__addsf3x+0x4e>
    1954:	50 3e       	cpi	r21, 0xE0	; 224
    1956:	68 f1       	brcs	.+90     	; 0x19b2 <__addsf3x+0x98>
    1958:	1a 16       	cp	r1, r26
    195a:	f0 40       	sbci	r31, 0x00	; 0
    195c:	a2 2f       	mov	r26, r18
    195e:	23 2f       	mov	r18, r19
    1960:	34 2f       	mov	r19, r20
    1962:	44 27       	eor	r20, r20
    1964:	58 5f       	subi	r21, 0xF8	; 248
    1966:	f3 cf       	rjmp	.-26     	; 0x194e <__addsf3x+0x34>
    1968:	46 95       	lsr	r20
    196a:	37 95       	ror	r19
    196c:	27 95       	ror	r18
    196e:	a7 95       	ror	r26
    1970:	f0 40       	sbci	r31, 0x00	; 0
    1972:	53 95       	inc	r21
    1974:	c9 f7       	brne	.-14     	; 0x1968 <__addsf3x+0x4e>
    1976:	7e f4       	brtc	.+30     	; 0x1996 <__addsf3x+0x7c>
    1978:	1f 16       	cp	r1, r31
    197a:	ba 0b       	sbc	r27, r26
    197c:	62 0b       	sbc	r22, r18
    197e:	73 0b       	sbc	r23, r19
    1980:	84 0b       	sbc	r24, r20
    1982:	ba f0       	brmi	.+46     	; 0x19b2 <__addsf3x+0x98>
    1984:	91 50       	subi	r25, 0x01	; 1
    1986:	a1 f0       	breq	.+40     	; 0x19b0 <__addsf3x+0x96>
    1988:	ff 0f       	add	r31, r31
    198a:	bb 1f       	adc	r27, r27
    198c:	66 1f       	adc	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	88 1f       	adc	r24, r24
    1992:	c2 f7       	brpl	.-16     	; 0x1984 <__addsf3x+0x6a>
    1994:	0e c0       	rjmp	.+28     	; 0x19b2 <__addsf3x+0x98>
    1996:	ba 0f       	add	r27, r26
    1998:	62 1f       	adc	r22, r18
    199a:	73 1f       	adc	r23, r19
    199c:	84 1f       	adc	r24, r20
    199e:	48 f4       	brcc	.+18     	; 0x19b2 <__addsf3x+0x98>
    19a0:	87 95       	ror	r24
    19a2:	77 95       	ror	r23
    19a4:	67 95       	ror	r22
    19a6:	b7 95       	ror	r27
    19a8:	f7 95       	ror	r31
    19aa:	9e 3f       	cpi	r25, 0xFE	; 254
    19ac:	08 f0       	brcs	.+2      	; 0x19b0 <__addsf3x+0x96>
    19ae:	b3 cf       	rjmp	.-154    	; 0x1916 <__addsf3+0x1e>
    19b0:	93 95       	inc	r25
    19b2:	88 0f       	add	r24, r24
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <__addsf3x+0x9e>
    19b6:	99 27       	eor	r25, r25
    19b8:	ee 0f       	add	r30, r30
    19ba:	97 95       	ror	r25
    19bc:	87 95       	ror	r24
    19be:	08 95       	ret

000019c0 <__cmpsf2>:
    19c0:	af d0       	rcall	.+350    	; 0x1b20 <__fp_cmp>
    19c2:	08 f4       	brcc	.+2      	; 0x19c6 <__cmpsf2+0x6>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	08 95       	ret

000019c8 <__fixsfsi>:
    19c8:	04 d0       	rcall	.+8      	; 0x19d2 <__fixunssfsi>
    19ca:	68 94       	set
    19cc:	b1 11       	cpse	r27, r1
    19ce:	17 c1       	rjmp	.+558    	; 0x1bfe <__fp_szero>
    19d0:	08 95       	ret

000019d2 <__fixunssfsi>:
    19d2:	fa d0       	rcall	.+500    	; 0x1bc8 <__fp_splitA>
    19d4:	88 f0       	brcs	.+34     	; 0x19f8 <__fixunssfsi+0x26>
    19d6:	9f 57       	subi	r25, 0x7F	; 127
    19d8:	90 f0       	brcs	.+36     	; 0x19fe <__fixunssfsi+0x2c>
    19da:	b9 2f       	mov	r27, r25
    19dc:	99 27       	eor	r25, r25
    19de:	b7 51       	subi	r27, 0x17	; 23
    19e0:	a0 f0       	brcs	.+40     	; 0x1a0a <__fixunssfsi+0x38>
    19e2:	d1 f0       	breq	.+52     	; 0x1a18 <__fixunssfsi+0x46>
    19e4:	66 0f       	add	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	1a f0       	brmi	.+6      	; 0x19f4 <__fixunssfsi+0x22>
    19ee:	ba 95       	dec	r27
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__fixunssfsi+0x12>
    19f2:	12 c0       	rjmp	.+36     	; 0x1a18 <__fixunssfsi+0x46>
    19f4:	b1 30       	cpi	r27, 0x01	; 1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <__fixunssfsi+0x46>
    19f8:	01 d1       	rcall	.+514    	; 0x1bfc <__fp_zero>
    19fa:	b1 e0       	ldi	r27, 0x01	; 1
    19fc:	08 95       	ret
    19fe:	fe c0       	rjmp	.+508    	; 0x1bfc <__fp_zero>
    1a00:	67 2f       	mov	r22, r23
    1a02:	78 2f       	mov	r23, r24
    1a04:	88 27       	eor	r24, r24
    1a06:	b8 5f       	subi	r27, 0xF8	; 248
    1a08:	39 f0       	breq	.+14     	; 0x1a18 <__fixunssfsi+0x46>
    1a0a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a0c:	cc f3       	brlt	.-14     	; 0x1a00 <__fixunssfsi+0x2e>
    1a0e:	86 95       	lsr	r24
    1a10:	77 95       	ror	r23
    1a12:	67 95       	ror	r22
    1a14:	b3 95       	inc	r27
    1a16:	d9 f7       	brne	.-10     	; 0x1a0e <__fixunssfsi+0x3c>
    1a18:	3e f4       	brtc	.+14     	; 0x1a28 <__fixunssfsi+0x56>
    1a1a:	90 95       	com	r25
    1a1c:	80 95       	com	r24
    1a1e:	70 95       	com	r23
    1a20:	61 95       	neg	r22
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8f 4f       	sbci	r24, 0xFF	; 255
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	08 95       	ret

00001a2a <__floatunsisf>:
    1a2a:	e8 94       	clt
    1a2c:	09 c0       	rjmp	.+18     	; 0x1a40 <__floatsisf+0x12>

00001a2e <__floatsisf>:
    1a2e:	97 fb       	bst	r25, 7
    1a30:	3e f4       	brtc	.+14     	; 0x1a40 <__floatsisf+0x12>
    1a32:	90 95       	com	r25
    1a34:	80 95       	com	r24
    1a36:	70 95       	com	r23
    1a38:	61 95       	neg	r22
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	99 23       	and	r25, r25
    1a42:	a9 f0       	breq	.+42     	; 0x1a6e <__floatsisf+0x40>
    1a44:	f9 2f       	mov	r31, r25
    1a46:	96 e9       	ldi	r25, 0x96	; 150
    1a48:	bb 27       	eor	r27, r27
    1a4a:	93 95       	inc	r25
    1a4c:	f6 95       	lsr	r31
    1a4e:	87 95       	ror	r24
    1a50:	77 95       	ror	r23
    1a52:	67 95       	ror	r22
    1a54:	b7 95       	ror	r27
    1a56:	f1 11       	cpse	r31, r1
    1a58:	f8 cf       	rjmp	.-16     	; 0x1a4a <__floatsisf+0x1c>
    1a5a:	fa f4       	brpl	.+62     	; 0x1a9a <__floatsisf+0x6c>
    1a5c:	bb 0f       	add	r27, r27
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <__floatsisf+0x36>
    1a60:	60 ff       	sbrs	r22, 0
    1a62:	1b c0       	rjmp	.+54     	; 0x1a9a <__floatsisf+0x6c>
    1a64:	6f 5f       	subi	r22, 0xFF	; 255
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	16 c0       	rjmp	.+44     	; 0x1a9a <__floatsisf+0x6c>
    1a6e:	88 23       	and	r24, r24
    1a70:	11 f0       	breq	.+4      	; 0x1a76 <__floatsisf+0x48>
    1a72:	96 e9       	ldi	r25, 0x96	; 150
    1a74:	11 c0       	rjmp	.+34     	; 0x1a98 <__floatsisf+0x6a>
    1a76:	77 23       	and	r23, r23
    1a78:	21 f0       	breq	.+8      	; 0x1a82 <__floatsisf+0x54>
    1a7a:	9e e8       	ldi	r25, 0x8E	; 142
    1a7c:	87 2f       	mov	r24, r23
    1a7e:	76 2f       	mov	r23, r22
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <__floatsisf+0x5e>
    1a82:	66 23       	and	r22, r22
    1a84:	71 f0       	breq	.+28     	; 0x1aa2 <__floatsisf+0x74>
    1a86:	96 e8       	ldi	r25, 0x86	; 134
    1a88:	86 2f       	mov	r24, r22
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	2a f0       	brmi	.+10     	; 0x1a9a <__floatsisf+0x6c>
    1a90:	9a 95       	dec	r25
    1a92:	66 0f       	add	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	88 1f       	adc	r24, r24
    1a98:	da f7       	brpl	.-10     	; 0x1a90 <__floatsisf+0x62>
    1a9a:	88 0f       	add	r24, r24
>>>>>>> Stashed changes
    1a9c:	96 95       	lsr	r25
    1a9e:	87 95       	ror	r24
    1aa0:	97 f9       	bld	r25, 7
    1aa2:	08 95       	ret
<<<<<<< Updated upstream
    1aa4:	e1 e0       	ldi	r30, 0x01	; 1
    1aa6:	66 0f       	add	r22, r22
    1aa8:	77 1f       	adc	r23, r23
    1aaa:	88 1f       	adc	r24, r24
    1aac:	bb 1f       	adc	r27, r27
    1aae:	62 17       	cp	r22, r18
    1ab0:	73 07       	cpc	r23, r19
    1ab2:	84 07       	cpc	r24, r20
    1ab4:	ba 07       	cpc	r27, r26
    1ab6:	20 f0       	brcs	.+8      	; 0x1ac0 <__divsf3_pse+0xaa>
    1ab8:	62 1b       	sub	r22, r18
    1aba:	73 0b       	sbc	r23, r19
    1abc:	84 0b       	sbc	r24, r20
    1abe:	ba 0b       	sbc	r27, r26
    1ac0:	ee 1f       	adc	r30, r30
    1ac2:	88 f7       	brcc	.-30     	; 0x1aa6 <__divsf3_pse+0x90>
    1ac4:	e0 95       	com	r30
    1ac6:	08 95       	ret

00001ac8 <__fp_mpack>:
    1ac8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <__fp_mpack_finite+0xc>

00001acc <__fp_mpack_finite>:
    1acc:	91 50       	subi	r25, 0x01	; 1
    1ace:	20 f4       	brcc	.+8      	; 0x1ad8 <__fp_mpack_finite+0xc>
    1ad0:	87 95       	ror	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	b7 95       	ror	r27
    1ad8:	88 0f       	add	r24, r24
    1ada:	91 1d       	adc	r25, r1
    1adc:	96 95       	lsr	r25
    1ade:	87 95       	ror	r24
    1ae0:	97 f9       	bld	r25, 7
    1ae2:	08 95       	ret

00001ae4 <__udivmodsi4>:
    1ae4:	a1 e2       	ldi	r26, 0x21	; 33
    1ae6:	1a 2e       	mov	r1, r26
    1ae8:	aa 1b       	sub	r26, r26
    1aea:	bb 1b       	sub	r27, r27
    1aec:	fd 01       	movw	r30, r26
    1aee:	0d c0       	rjmp	.+26     	; 0x1b0a <__udivmodsi4_ep>

00001af0 <__udivmodsi4_loop>:
    1af0:	aa 1f       	adc	r26, r26
    1af2:	bb 1f       	adc	r27, r27
    1af4:	ee 1f       	adc	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	a2 17       	cp	r26, r18
    1afa:	b3 07       	cpc	r27, r19
    1afc:	e4 07       	cpc	r30, r20
    1afe:	f5 07       	cpc	r31, r21
    1b00:	20 f0       	brcs	.+8      	; 0x1b0a <__udivmodsi4_ep>
    1b02:	a2 1b       	sub	r26, r18
    1b04:	b3 0b       	sbc	r27, r19
    1b06:	e4 0b       	sbc	r30, r20
    1b08:	f5 0b       	sbc	r31, r21

00001b0a <__udivmodsi4_ep>:
    1b0a:	66 1f       	adc	r22, r22
    1b0c:	77 1f       	adc	r23, r23
    1b0e:	88 1f       	adc	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	1a 94       	dec	r1
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <__udivmodsi4_loop>
    1b16:	60 95       	com	r22
    1b18:	70 95       	com	r23
    1b1a:	80 95       	com	r24
    1b1c:	90 95       	com	r25
    1b1e:	9b 01       	movw	r18, r22
    1b20:	ac 01       	movw	r20, r24
    1b22:	bd 01       	movw	r22, r26
    1b24:	cf 01       	movw	r24, r30
    1b26:	08 95       	ret

00001b28 <__tablejump2__>:
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	8b bf       	out	0x3b, r24	; 59
    1b30:	07 90       	elpm	r0, Z+
    1b32:	f6 91       	elpm	r31, Z
    1b34:	e0 2d       	mov	r30, r0
    1b36:	19 94       	eijmp

00001b38 <__muluhisi3>:
    1b38:	c5 d0       	rcall	.+394    	; 0x1cc4 <__umulhisi3>
    1b3a:	a5 9f       	mul	r26, r21
    1b3c:	90 0d       	add	r25, r0
    1b3e:	b4 9f       	mul	r27, r20
    1b40:	90 0d       	add	r25, r0
    1b42:	a4 9f       	mul	r26, r20
    1b44:	80 0d       	add	r24, r0
    1b46:	91 1d       	adc	r25, r1
    1b48:	11 24       	eor	r1, r1
    1b4a:	08 95       	ret

00001b4c <__umoddi3>:
    1b4c:	68 94       	set
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <__udivdi3_umoddi3>

00001b50 <__udivdi3>:
    1b50:	e8 94       	clt

00001b52 <__udivdi3_umoddi3>:
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	05 d0       	rcall	.+10     	; 0x1b66 <__udivmod64>
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	9f 90       	pop	r9
    1b62:	8f 90       	pop	r8
    1b64:	08 95       	ret

00001b66 <__udivmod64>:
    1b66:	88 24       	eor	r8, r8
    1b68:	99 24       	eor	r9, r9
    1b6a:	f4 01       	movw	r30, r8
    1b6c:	e4 01       	movw	r28, r8
    1b6e:	b0 e4       	ldi	r27, 0x40	; 64
    1b70:	9f 93       	push	r25
    1b72:	aa 27       	eor	r26, r26
    1b74:	9a 15       	cp	r25, r10
    1b76:	8b 04       	cpc	r8, r11
    1b78:	9c 04       	cpc	r9, r12
    1b7a:	ed 05       	cpc	r30, r13
    1b7c:	fe 05       	cpc	r31, r14
    1b7e:	cf 05       	cpc	r28, r15
    1b80:	d0 07       	cpc	r29, r16
    1b82:	a1 07       	cpc	r26, r17
    1b84:	98 f4       	brcc	.+38     	; 0x1bac <__udivmod64+0x46>
    1b86:	ad 2f       	mov	r26, r29
    1b88:	dc 2f       	mov	r29, r28
    1b8a:	cf 2f       	mov	r28, r31
    1b8c:	fe 2f       	mov	r31, r30
    1b8e:	e9 2d       	mov	r30, r9
    1b90:	98 2c       	mov	r9, r8
    1b92:	89 2e       	mov	r8, r25
    1b94:	98 2f       	mov	r25, r24
    1b96:	87 2f       	mov	r24, r23
    1b98:	76 2f       	mov	r23, r22
    1b9a:	65 2f       	mov	r22, r21
    1b9c:	54 2f       	mov	r21, r20
    1b9e:	43 2f       	mov	r20, r19
    1ba0:	32 2f       	mov	r19, r18
    1ba2:	22 27       	eor	r18, r18
    1ba4:	b8 50       	subi	r27, 0x08	; 8
    1ba6:	31 f7       	brne	.-52     	; 0x1b74 <__udivmod64+0xe>
    1ba8:	bf 91       	pop	r27
    1baa:	27 c0       	rjmp	.+78     	; 0x1bfa <__udivmod64+0x94>
    1bac:	1b 2e       	mov	r1, r27
    1bae:	bf 91       	pop	r27
    1bb0:	bb 27       	eor	r27, r27
    1bb2:	22 0f       	add	r18, r18
    1bb4:	33 1f       	adc	r19, r19
    1bb6:	44 1f       	adc	r20, r20
    1bb8:	55 1f       	adc	r21, r21
    1bba:	66 1f       	adc	r22, r22
    1bbc:	77 1f       	adc	r23, r23
    1bbe:	88 1f       	adc	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	88 1c       	adc	r8, r8
    1bc4:	99 1c       	adc	r9, r9
    1bc6:	ee 1f       	adc	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	cc 1f       	adc	r28, r28
    1bcc:	dd 1f       	adc	r29, r29
    1bce:	aa 1f       	adc	r26, r26
    1bd0:	bb 1f       	adc	r27, r27
    1bd2:	8a 14       	cp	r8, r10
    1bd4:	9b 04       	cpc	r9, r11
    1bd6:	ec 05       	cpc	r30, r12
    1bd8:	fd 05       	cpc	r31, r13
    1bda:	ce 05       	cpc	r28, r14
    1bdc:	df 05       	cpc	r29, r15
    1bde:	a0 07       	cpc	r26, r16
    1be0:	b1 07       	cpc	r27, r17
    1be2:	48 f0       	brcs	.+18     	; 0x1bf6 <__udivmod64+0x90>
    1be4:	8a 18       	sub	r8, r10
    1be6:	9b 08       	sbc	r9, r11
    1be8:	ec 09       	sbc	r30, r12
    1bea:	fd 09       	sbc	r31, r13
    1bec:	ce 09       	sbc	r28, r14
    1bee:	df 09       	sbc	r29, r15
    1bf0:	a0 0b       	sbc	r26, r16
    1bf2:	b1 0b       	sbc	r27, r17
    1bf4:	21 60       	ori	r18, 0x01	; 1
    1bf6:	1a 94       	dec	r1
    1bf8:	e1 f6       	brne	.-72     	; 0x1bb2 <__udivmod64+0x4c>
    1bfa:	2e f4       	brtc	.+10     	; 0x1c06 <__udivmod64+0xa0>
    1bfc:	94 01       	movw	r18, r8
    1bfe:	af 01       	movw	r20, r30
    1c00:	be 01       	movw	r22, r28
    1c02:	cd 01       	movw	r24, r26
    1c04:	00 0c       	add	r0, r0
    1c06:	08 95       	ret

00001c08 <__ashldi3>:
    1c08:	0f 93       	push	r16
    1c0a:	08 30       	cpi	r16, 0x08	; 8
    1c0c:	90 f0       	brcs	.+36     	; 0x1c32 <__ashldi3+0x2a>
    1c0e:	98 2f       	mov	r25, r24
    1c10:	87 2f       	mov	r24, r23
    1c12:	76 2f       	mov	r23, r22
    1c14:	65 2f       	mov	r22, r21
    1c16:	54 2f       	mov	r21, r20
    1c18:	43 2f       	mov	r20, r19
    1c1a:	32 2f       	mov	r19, r18
    1c1c:	22 27       	eor	r18, r18
    1c1e:	08 50       	subi	r16, 0x08	; 8
    1c20:	f4 cf       	rjmp	.-24     	; 0x1c0a <__ashldi3+0x2>
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	44 1f       	adc	r20, r20
    1c28:	55 1f       	adc	r21, r21
    1c2a:	66 1f       	adc	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 95       	dec	r16
    1c34:	b2 f7       	brpl	.-20     	; 0x1c22 <__ashldi3+0x1a>
    1c36:	0f 91       	pop	r16
    1c38:	08 95       	ret

00001c3a <__ashrdi3>:
    1c3a:	97 fb       	bst	r25, 7
    1c3c:	10 f8       	bld	r1, 0

00001c3e <__lshrdi3>:
    1c3e:	16 94       	lsr	r1
    1c40:	00 08       	sbc	r0, r0
    1c42:	0f 93       	push	r16
    1c44:	08 30       	cpi	r16, 0x08	; 8
    1c46:	98 f0       	brcs	.+38     	; 0x1c6e <__lshrdi3+0x30>
    1c48:	08 50       	subi	r16, 0x08	; 8
    1c4a:	23 2f       	mov	r18, r19
    1c4c:	34 2f       	mov	r19, r20
    1c4e:	45 2f       	mov	r20, r21
    1c50:	56 2f       	mov	r21, r22
    1c52:	67 2f       	mov	r22, r23
    1c54:	78 2f       	mov	r23, r24
    1c56:	89 2f       	mov	r24, r25
    1c58:	90 2d       	mov	r25, r0
    1c5a:	f4 cf       	rjmp	.-24     	; 0x1c44 <__lshrdi3+0x6>
    1c5c:	05 94       	asr	r0
    1c5e:	97 95       	ror	r25
    1c60:	87 95       	ror	r24
    1c62:	77 95       	ror	r23
    1c64:	67 95       	ror	r22
    1c66:	57 95       	ror	r21
    1c68:	47 95       	ror	r20
    1c6a:	37 95       	ror	r19
    1c6c:	27 95       	ror	r18
    1c6e:	0a 95       	dec	r16
    1c70:	aa f7       	brpl	.-22     	; 0x1c5c <__lshrdi3+0x1e>
    1c72:	0f 91       	pop	r16
    1c74:	08 95       	ret

00001c76 <__adddi3>:
    1c76:	2a 0d       	add	r18, r10
    1c78:	3b 1d       	adc	r19, r11
    1c7a:	4c 1d       	adc	r20, r12
    1c7c:	5d 1d       	adc	r21, r13
    1c7e:	6e 1d       	adc	r22, r14
    1c80:	7f 1d       	adc	r23, r15
    1c82:	80 1f       	adc	r24, r16
    1c84:	91 1f       	adc	r25, r17
    1c86:	08 95       	ret

00001c88 <__adddi3_s8>:
    1c88:	00 24       	eor	r0, r0
    1c8a:	a7 fd       	sbrc	r26, 7
    1c8c:	00 94       	com	r0
    1c8e:	2a 0f       	add	r18, r26
    1c90:	30 1d       	adc	r19, r0
    1c92:	40 1d       	adc	r20, r0
    1c94:	50 1d       	adc	r21, r0
    1c96:	60 1d       	adc	r22, r0
    1c98:	70 1d       	adc	r23, r0
    1c9a:	80 1d       	adc	r24, r0
    1c9c:	90 1d       	adc	r25, r0
    1c9e:	08 95       	ret

00001ca0 <__subdi3>:
    1ca0:	2a 19       	sub	r18, r10
    1ca2:	3b 09       	sbc	r19, r11
    1ca4:	4c 09       	sbc	r20, r12
    1ca6:	5d 09       	sbc	r21, r13
    1ca8:	6e 09       	sbc	r22, r14
    1caa:	7f 09       	sbc	r23, r15
    1cac:	80 0b       	sbc	r24, r16
    1cae:	91 0b       	sbc	r25, r17
    1cb0:	08 95       	ret

00001cb2 <__cmpdi2>:
    1cb2:	2a 15       	cp	r18, r10
    1cb4:	3b 05       	cpc	r19, r11
    1cb6:	4c 05       	cpc	r20, r12
    1cb8:	5d 05       	cpc	r21, r13
    1cba:	6e 05       	cpc	r22, r14
    1cbc:	7f 05       	cpc	r23, r15
    1cbe:	80 07       	cpc	r24, r16
    1cc0:	91 07       	cpc	r25, r17
    1cc2:	08 95       	ret

00001cc4 <__umulhisi3>:
    1cc4:	a2 9f       	mul	r26, r18
    1cc6:	b0 01       	movw	r22, r0
    1cc8:	b3 9f       	mul	r27, r19
    1cca:	c0 01       	movw	r24, r0
    1ccc:	a3 9f       	mul	r26, r19
    1cce:	70 0d       	add	r23, r0
    1cd0:	81 1d       	adc	r24, r1
    1cd2:	11 24       	eor	r1, r1
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	b2 9f       	mul	r27, r18
    1cd8:	70 0d       	add	r23, r0
    1cda:	81 1d       	adc	r24, r1
    1cdc:	11 24       	eor	r1, r1
    1cde:	91 1d       	adc	r25, r1
    1ce0:	08 95       	ret

00001ce2 <__itoa_ncheck>:
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	4a 30       	cpi	r20, 0x0A	; 10
    1ce6:	31 f4       	brne	.+12     	; 0x1cf4 <__itoa_ncheck+0x12>
    1ce8:	99 23       	and	r25, r25
    1cea:	22 f4       	brpl	.+8      	; 0x1cf4 <__itoa_ncheck+0x12>
    1cec:	bd e2       	ldi	r27, 0x2D	; 45
    1cee:	90 95       	com	r25
    1cf0:	81 95       	neg	r24
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <__utoa_common>

00001cf6 <__utoa_ncheck>:
    1cf6:	bb 27       	eor	r27, r27

00001cf8 <__utoa_common>:
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	55 27       	eor	r21, r21
    1cfc:	aa 27       	eor	r26, r26
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	aa 1f       	adc	r26, r26
    1d04:	a4 17       	cp	r26, r20
    1d06:	10 f0       	brcs	.+4      	; 0x1d0c <__utoa_common+0x14>
    1d08:	a4 1b       	sub	r26, r20
    1d0a:	83 95       	inc	r24
    1d0c:	50 51       	subi	r21, 0x10	; 16
    1d0e:	b9 f7       	brne	.-18     	; 0x1cfe <__utoa_common+0x6>
    1d10:	a0 5d       	subi	r26, 0xD0	; 208
    1d12:	aa 33       	cpi	r26, 0x3A	; 58
    1d14:	08 f0       	brcs	.+2      	; 0x1d18 <__utoa_common+0x20>
    1d16:	a9 5d       	subi	r26, 0xD9	; 217
    1d18:	a1 93       	st	Z+, r26
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	79 f7       	brne	.-34     	; 0x1cfc <__utoa_common+0x4>
    1d1e:	b1 11       	cpse	r27, r1
    1d20:	b1 93       	st	Z+, r27
    1d22:	11 92       	st	Z+, r1
    1d24:	cb 01       	movw	r24, r22
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <strrev>

00001d28 <strrev>:
    1d28:	dc 01       	movw	r26, r24
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	67 2f       	mov	r22, r23
    1d2e:	71 91       	ld	r23, Z+
    1d30:	77 23       	and	r23, r23
    1d32:	e1 f7       	brne	.-8      	; 0x1d2c <strrev+0x4>
    1d34:	32 97       	sbiw	r30, 0x02	; 2
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <strrev+0x18>
    1d38:	7c 91       	ld	r23, X
    1d3a:	6d 93       	st	X+, r22
    1d3c:	70 83       	st	Z, r23
    1d3e:	62 91       	ld	r22, -Z
    1d40:	ae 17       	cp	r26, r30
    1d42:	bf 07       	cpc	r27, r31
    1d44:	c8 f3       	brcs	.-14     	; 0x1d38 <strrev+0x10>
    1d46:	08 95       	ret

00001d48 <_exit>:
    1d48:	f8 94       	cli

00001d4a <__stop_program>:
    1d4a:	ff cf       	rjmp	.-2      	; 0x1d4a <__stop_program>
=======

00001aa4 <__floatundisf>:
    1aa4:	e8 94       	clt

00001aa6 <__fp_di2sf>:
    1aa6:	f9 2f       	mov	r31, r25
    1aa8:	96 eb       	ldi	r25, 0xB6	; 182
    1aaa:	ff 23       	and	r31, r31
    1aac:	81 f0       	breq	.+32     	; 0x1ace <__fp_di2sf+0x28>
    1aae:	12 16       	cp	r1, r18
    1ab0:	13 06       	cpc	r1, r19
    1ab2:	14 06       	cpc	r1, r20
    1ab4:	44 0b       	sbc	r20, r20
    1ab6:	93 95       	inc	r25
    1ab8:	f6 95       	lsr	r31
    1aba:	87 95       	ror	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	57 95       	ror	r21
    1ac2:	40 40       	sbci	r20, 0x00	; 0
    1ac4:	ff 23       	and	r31, r31
    1ac6:	b9 f7       	brne	.-18     	; 0x1ab6 <__fp_di2sf+0x10>
    1ac8:	1b c0       	rjmp	.+54     	; 0x1b00 <__fp_di2sf+0x5a>
    1aca:	99 27       	eor	r25, r25
    1acc:	08 95       	ret
    1ace:	88 23       	and	r24, r24
    1ad0:	51 f4       	brne	.+20     	; 0x1ae6 <__fp_di2sf+0x40>
    1ad2:	98 50       	subi	r25, 0x08	; 8
    1ad4:	d2 f7       	brpl	.-12     	; 0x1aca <__fp_di2sf+0x24>
    1ad6:	87 2b       	or	r24, r23
    1ad8:	76 2f       	mov	r23, r22
    1ada:	65 2f       	mov	r22, r21
    1adc:	54 2f       	mov	r21, r20
    1ade:	43 2f       	mov	r20, r19
    1ae0:	32 2f       	mov	r19, r18
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	b1 f3       	breq	.-20     	; 0x1ad2 <__fp_di2sf+0x2c>
    1ae6:	12 16       	cp	r1, r18
    1ae8:	13 06       	cpc	r1, r19
    1aea:	14 06       	cpc	r1, r20
    1aec:	44 0b       	sbc	r20, r20
    1aee:	88 23       	and	r24, r24
    1af0:	3a f0       	brmi	.+14     	; 0x1b00 <__fp_di2sf+0x5a>
    1af2:	9a 95       	dec	r25
    1af4:	44 0f       	add	r20, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	66 1f       	adc	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	88 1f       	adc	r24, r24
    1afe:	ca f7       	brpl	.-14     	; 0x1af2 <__fp_di2sf+0x4c>
    1b00:	55 23       	and	r21, r21
    1b02:	4a f4       	brpl	.+18     	; 0x1b16 <__fp_di2sf+0x70>
    1b04:	44 0f       	add	r20, r20
    1b06:	55 1f       	adc	r21, r21
    1b08:	11 f4       	brne	.+4      	; 0x1b0e <__fp_di2sf+0x68>
    1b0a:	60 ff       	sbrs	r22, 0
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <__fp_di2sf+0x70>
    1b0e:	6f 5f       	subi	r22, 0xFF	; 255
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	8f 4f       	sbci	r24, 0xFF	; 255
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	88 0f       	add	r24, r24
    1b18:	96 95       	lsr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	97 f9       	bld	r25, 7
    1b1e:	08 95       	ret

00001b20 <__fp_cmp>:
    1b20:	99 0f       	add	r25, r25
    1b22:	00 08       	sbc	r0, r0
    1b24:	55 0f       	add	r21, r21
    1b26:	aa 0b       	sbc	r26, r26
    1b28:	e0 e8       	ldi	r30, 0x80	; 128
    1b2a:	fe ef       	ldi	r31, 0xFE	; 254
    1b2c:	16 16       	cp	r1, r22
    1b2e:	17 06       	cpc	r1, r23
    1b30:	e8 07       	cpc	r30, r24
    1b32:	f9 07       	cpc	r31, r25
    1b34:	c0 f0       	brcs	.+48     	; 0x1b66 <__fp_cmp+0x46>
    1b36:	12 16       	cp	r1, r18
    1b38:	13 06       	cpc	r1, r19
    1b3a:	e4 07       	cpc	r30, r20
    1b3c:	f5 07       	cpc	r31, r21
    1b3e:	98 f0       	brcs	.+38     	; 0x1b66 <__fp_cmp+0x46>
    1b40:	62 1b       	sub	r22, r18
    1b42:	73 0b       	sbc	r23, r19
    1b44:	84 0b       	sbc	r24, r20
    1b46:	95 0b       	sbc	r25, r21
    1b48:	39 f4       	brne	.+14     	; 0x1b58 <__fp_cmp+0x38>
    1b4a:	0a 26       	eor	r0, r26
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <__fp_cmp+0x46>
    1b4e:	23 2b       	or	r18, r19
    1b50:	24 2b       	or	r18, r20
    1b52:	25 2b       	or	r18, r21
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <__fp_cmp+0x3e>
    1b56:	08 95       	ret
    1b58:	0a 26       	eor	r0, r26
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <__fp_cmp+0x3e>
    1b5c:	a1 40       	sbci	r26, 0x01	; 1
    1b5e:	a6 95       	lsr	r26
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	81 1d       	adc	r24, r1
    1b64:	81 1d       	adc	r24, r1
    1b66:	08 95       	ret

00001b68 <__fp_inf>:
    1b68:	97 f9       	bld	r25, 7
    1b6a:	9f 67       	ori	r25, 0x7F	; 127
    1b6c:	80 e8       	ldi	r24, 0x80	; 128
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	08 95       	ret

00001b74 <__fp_nan>:
    1b74:	9f ef       	ldi	r25, 0xFF	; 255
    1b76:	80 ec       	ldi	r24, 0xC0	; 192
    1b78:	08 95       	ret

00001b7a <__fp_pscA>:
    1b7a:	00 24       	eor	r0, r0
    1b7c:	0a 94       	dec	r0
    1b7e:	16 16       	cp	r1, r22
    1b80:	17 06       	cpc	r1, r23
    1b82:	18 06       	cpc	r1, r24
    1b84:	09 06       	cpc	r0, r25
    1b86:	08 95       	ret

00001b88 <__fp_pscB>:
    1b88:	00 24       	eor	r0, r0
    1b8a:	0a 94       	dec	r0
    1b8c:	12 16       	cp	r1, r18
    1b8e:	13 06       	cpc	r1, r19
    1b90:	14 06       	cpc	r1, r20
    1b92:	05 06       	cpc	r0, r21
    1b94:	08 95       	ret

00001b96 <__fp_round>:
    1b96:	09 2e       	mov	r0, r25
    1b98:	03 94       	inc	r0
    1b9a:	00 0c       	add	r0, r0
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <__fp_round+0xc>
    1b9e:	88 23       	and	r24, r24
    1ba0:	52 f0       	brmi	.+20     	; 0x1bb6 <__fp_round+0x20>
    1ba2:	bb 0f       	add	r27, r27
    1ba4:	40 f4       	brcc	.+16     	; 0x1bb6 <__fp_round+0x20>
    1ba6:	bf 2b       	or	r27, r31
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__fp_round+0x18>
    1baa:	60 ff       	sbrs	r22, 0
    1bac:	04 c0       	rjmp	.+8      	; 0x1bb6 <__fp_round+0x20>
    1bae:	6f 5f       	subi	r22, 0xFF	; 255
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	08 95       	ret

00001bb8 <__fp_split3>:
    1bb8:	57 fd       	sbrc	r21, 7
    1bba:	90 58       	subi	r25, 0x80	; 128
    1bbc:	44 0f       	add	r20, r20
    1bbe:	55 1f       	adc	r21, r21
    1bc0:	59 f0       	breq	.+22     	; 0x1bd8 <__fp_splitA+0x10>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <__fp_splitA+0x1a>
    1bc6:	47 95       	ror	r20

00001bc8 <__fp_splitA>:
    1bc8:	88 0f       	add	r24, r24
    1bca:	97 fb       	bst	r25, 7
    1bcc:	99 1f       	adc	r25, r25
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <__fp_splitA+0x20>
    1bd0:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd2:	79 f0       	breq	.+30     	; 0x1bf2 <__fp_splitA+0x2a>
    1bd4:	87 95       	ror	r24
    1bd6:	08 95       	ret
    1bd8:	12 16       	cp	r1, r18
    1bda:	13 06       	cpc	r1, r19
    1bdc:	14 06       	cpc	r1, r20
    1bde:	55 1f       	adc	r21, r21
    1be0:	f2 cf       	rjmp	.-28     	; 0x1bc6 <__fp_split3+0xe>
    1be2:	46 95       	lsr	r20
    1be4:	f1 df       	rcall	.-30     	; 0x1bc8 <__fp_splitA>
    1be6:	08 c0       	rjmp	.+16     	; 0x1bf8 <__fp_splitA+0x30>
    1be8:	16 16       	cp	r1, r22
    1bea:	17 06       	cpc	r1, r23
    1bec:	18 06       	cpc	r1, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	f1 cf       	rjmp	.-30     	; 0x1bd4 <__fp_splitA+0xc>
    1bf2:	86 95       	lsr	r24
    1bf4:	71 05       	cpc	r23, r1
    1bf6:	61 05       	cpc	r22, r1
    1bf8:	08 94       	sec
    1bfa:	08 95       	ret

00001bfc <__fp_zero>:
    1bfc:	e8 94       	clt

00001bfe <__fp_szero>:
    1bfe:	bb 27       	eor	r27, r27
    1c00:	66 27       	eor	r22, r22
    1c02:	77 27       	eor	r23, r23
    1c04:	cb 01       	movw	r24, r22
    1c06:	97 f9       	bld	r25, 7
    1c08:	08 95       	ret

00001c0a <__mulsf3>:
    1c0a:	0b d0       	rcall	.+22     	; 0x1c22 <__mulsf3x>
    1c0c:	c4 cf       	rjmp	.-120    	; 0x1b96 <__fp_round>
    1c0e:	b5 df       	rcall	.-150    	; 0x1b7a <__fp_pscA>
    1c10:	28 f0       	brcs	.+10     	; 0x1c1c <__mulsf3+0x12>
    1c12:	ba df       	rcall	.-140    	; 0x1b88 <__fp_pscB>
    1c14:	18 f0       	brcs	.+6      	; 0x1c1c <__mulsf3+0x12>
    1c16:	95 23       	and	r25, r21
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <__mulsf3+0x12>
    1c1a:	a6 cf       	rjmp	.-180    	; 0x1b68 <__fp_inf>
    1c1c:	ab cf       	rjmp	.-170    	; 0x1b74 <__fp_nan>
    1c1e:	11 24       	eor	r1, r1
    1c20:	ee cf       	rjmp	.-36     	; 0x1bfe <__fp_szero>

00001c22 <__mulsf3x>:
    1c22:	ca df       	rcall	.-108    	; 0x1bb8 <__fp_split3>
    1c24:	a0 f3       	brcs	.-24     	; 0x1c0e <__mulsf3+0x4>

00001c26 <__mulsf3_pse>:
    1c26:	95 9f       	mul	r25, r21
    1c28:	d1 f3       	breq	.-12     	; 0x1c1e <__mulsf3+0x14>
    1c2a:	95 0f       	add	r25, r21
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	55 1f       	adc	r21, r21
    1c30:	62 9f       	mul	r22, r18
    1c32:	f0 01       	movw	r30, r0
    1c34:	72 9f       	mul	r23, r18
    1c36:	bb 27       	eor	r27, r27
    1c38:	f0 0d       	add	r31, r0
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	63 9f       	mul	r22, r19
    1c3e:	aa 27       	eor	r26, r26
    1c40:	f0 0d       	add	r31, r0
    1c42:	b1 1d       	adc	r27, r1
    1c44:	aa 1f       	adc	r26, r26
    1c46:	64 9f       	mul	r22, r20
    1c48:	66 27       	eor	r22, r22
    1c4a:	b0 0d       	add	r27, r0
    1c4c:	a1 1d       	adc	r26, r1
    1c4e:	66 1f       	adc	r22, r22
    1c50:	82 9f       	mul	r24, r18
    1c52:	22 27       	eor	r18, r18
    1c54:	b0 0d       	add	r27, r0
    1c56:	a1 1d       	adc	r26, r1
    1c58:	62 1f       	adc	r22, r18
    1c5a:	73 9f       	mul	r23, r19
    1c5c:	b0 0d       	add	r27, r0
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	62 1f       	adc	r22, r18
    1c62:	83 9f       	mul	r24, r19
    1c64:	a0 0d       	add	r26, r0
    1c66:	61 1d       	adc	r22, r1
    1c68:	22 1f       	adc	r18, r18
    1c6a:	74 9f       	mul	r23, r20
    1c6c:	33 27       	eor	r19, r19
    1c6e:	a0 0d       	add	r26, r0
    1c70:	61 1d       	adc	r22, r1
    1c72:	23 1f       	adc	r18, r19
    1c74:	84 9f       	mul	r24, r20
    1c76:	60 0d       	add	r22, r0
    1c78:	21 1d       	adc	r18, r1
    1c7a:	82 2f       	mov	r24, r18
    1c7c:	76 2f       	mov	r23, r22
    1c7e:	6a 2f       	mov	r22, r26
    1c80:	11 24       	eor	r1, r1
    1c82:	9f 57       	subi	r25, 0x7F	; 127
    1c84:	50 40       	sbci	r21, 0x00	; 0
    1c86:	8a f0       	brmi	.+34     	; 0x1caa <__mulsf3_pse+0x84>
    1c88:	e1 f0       	breq	.+56     	; 0x1cc2 <__mulsf3_pse+0x9c>
    1c8a:	88 23       	and	r24, r24
    1c8c:	4a f0       	brmi	.+18     	; 0x1ca0 <__mulsf3_pse+0x7a>
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	bb 1f       	adc	r27, r27
    1c94:	66 1f       	adc	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	91 50       	subi	r25, 0x01	; 1
    1c9c:	50 40       	sbci	r21, 0x00	; 0
    1c9e:	a9 f7       	brne	.-22     	; 0x1c8a <__mulsf3_pse+0x64>
    1ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	70 f0       	brcs	.+28     	; 0x1cc2 <__mulsf3_pse+0x9c>
    1ca6:	60 cf       	rjmp	.-320    	; 0x1b68 <__fp_inf>
    1ca8:	aa cf       	rjmp	.-172    	; 0x1bfe <__fp_szero>
    1caa:	5f 3f       	cpi	r21, 0xFF	; 255
    1cac:	ec f3       	brlt	.-6      	; 0x1ca8 <__mulsf3_pse+0x82>
    1cae:	98 3e       	cpi	r25, 0xE8	; 232
    1cb0:	dc f3       	brlt	.-10     	; 0x1ca8 <__mulsf3_pse+0x82>
    1cb2:	86 95       	lsr	r24
    1cb4:	77 95       	ror	r23
    1cb6:	67 95       	ror	r22
    1cb8:	b7 95       	ror	r27
    1cba:	f7 95       	ror	r31
    1cbc:	e7 95       	ror	r30
    1cbe:	9f 5f       	subi	r25, 0xFF	; 255
    1cc0:	c1 f7       	brne	.-16     	; 0x1cb2 <__mulsf3_pse+0x8c>
    1cc2:	fe 2b       	or	r31, r30
    1cc4:	88 0f       	add	r24, r24
    1cc6:	91 1d       	adc	r25, r1
    1cc8:	96 95       	lsr	r25
    1cca:	87 95       	ror	r24
    1ccc:	97 f9       	bld	r25, 7
    1cce:	08 95       	ret

00001cd0 <pow>:
    1cd0:	fa 01       	movw	r30, r20
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	30 96       	adiw	r30, 0x00	; 0
    1cd8:	21 05       	cpc	r18, r1
    1cda:	31 05       	cpc	r19, r1
    1cdc:	99 f1       	breq	.+102    	; 0x1d44 <pow+0x74>
    1cde:	61 15       	cp	r22, r1
    1ce0:	71 05       	cpc	r23, r1
    1ce2:	61 f4       	brne	.+24     	; 0x1cfc <pow+0x2c>
    1ce4:	80 38       	cpi	r24, 0x80	; 128
    1ce6:	bf e3       	ldi	r27, 0x3F	; 63
    1ce8:	9b 07       	cpc	r25, r27
    1cea:	49 f1       	breq	.+82     	; 0x1d3e <pow+0x6e>
    1cec:	68 94       	set
    1cee:	90 38       	cpi	r25, 0x80	; 128
    1cf0:	81 05       	cpc	r24, r1
    1cf2:	61 f0       	breq	.+24     	; 0x1d0c <pow+0x3c>
    1cf4:	80 38       	cpi	r24, 0x80	; 128
    1cf6:	bf ef       	ldi	r27, 0xFF	; 255
    1cf8:	9b 07       	cpc	r25, r27
    1cfa:	41 f0       	breq	.+16     	; 0x1d0c <pow+0x3c>
    1cfc:	99 23       	and	r25, r25
    1cfe:	42 f5       	brpl	.+80     	; 0x1d50 <pow+0x80>
    1d00:	ff 3f       	cpi	r31, 0xFF	; 255
    1d02:	e1 05       	cpc	r30, r1
    1d04:	31 05       	cpc	r19, r1
    1d06:	21 05       	cpc	r18, r1
    1d08:	11 f1       	breq	.+68     	; 0x1d4e <pow+0x7e>
    1d0a:	e8 94       	clt
    1d0c:	08 94       	sec
    1d0e:	e7 95       	ror	r30
    1d10:	d9 01       	movw	r26, r18
    1d12:	aa 23       	and	r26, r26
    1d14:	29 f4       	brne	.+10     	; 0x1d20 <pow+0x50>
    1d16:	ab 2f       	mov	r26, r27
    1d18:	be 2f       	mov	r27, r30
    1d1a:	f8 5f       	subi	r31, 0xF8	; 248
    1d1c:	d0 f3       	brcs	.-12     	; 0x1d12 <pow+0x42>
    1d1e:	10 c0       	rjmp	.+32     	; 0x1d40 <pow+0x70>
    1d20:	ff 5f       	subi	r31, 0xFF	; 255
    1d22:	70 f4       	brcc	.+28     	; 0x1d40 <pow+0x70>
    1d24:	a6 95       	lsr	r26
    1d26:	e0 f7       	brcc	.-8      	; 0x1d20 <pow+0x50>
    1d28:	f7 39       	cpi	r31, 0x97	; 151
    1d2a:	50 f0       	brcs	.+20     	; 0x1d40 <pow+0x70>
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <pow+0x64>
    1d2e:	ff 3a       	cpi	r31, 0xAF	; 175
    1d30:	38 f4       	brcc	.+14     	; 0x1d40 <pow+0x70>
    1d32:	9f 77       	andi	r25, 0x7F	; 127
    1d34:	9f 93       	push	r25
    1d36:	0c d0       	rcall	.+24     	; 0x1d50 <pow+0x80>
    1d38:	0f 90       	pop	r0
    1d3a:	07 fc       	sbrc	r0, 7
    1d3c:	90 58       	subi	r25, 0x80	; 128
    1d3e:	08 95       	ret
    1d40:	3e f0       	brts	.+14     	; 0x1d50 <pow+0x80>
    1d42:	18 cf       	rjmp	.-464    	; 0x1b74 <__fp_nan>
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	80 e8       	ldi	r24, 0x80	; 128
    1d4a:	9f e3       	ldi	r25, 0x3F	; 63
    1d4c:	08 95       	ret
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	9f 77       	andi	r25, 0x7F	; 127
    1d52:	5f 93       	push	r21
    1d54:	4f 93       	push	r20
    1d56:	3f 93       	push	r19
    1d58:	2f 93       	push	r18
    1d5a:	f5 d0       	rcall	.+490    	; 0x1f46 <log>
    1d5c:	2f 91       	pop	r18
    1d5e:	3f 91       	pop	r19
    1d60:	4f 91       	pop	r20
    1d62:	5f 91       	pop	r21
    1d64:	52 df       	rcall	.-348    	; 0x1c0a <__mulsf3>
    1d66:	47 c0       	rjmp	.+142    	; 0x1df6 <exp>
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <pow+0x9e>
    1d6a:	0e f4       	brtc	.+2      	; 0x1d6e <pow+0x9e>
    1d6c:	03 cf       	rjmp	.-506    	; 0x1b74 <__fp_nan>
    1d6e:	6f c0       	rjmp	.+222    	; 0x1e4e <__fp_mpack>

00001d70 <sqrt>:
    1d70:	2b df       	rcall	.-426    	; 0x1bc8 <__fp_splitA>
    1d72:	d0 f3       	brcs	.-12     	; 0x1d68 <pow+0x98>
    1d74:	99 23       	and	r25, r25
    1d76:	d9 f3       	breq	.-10     	; 0x1d6e <pow+0x9e>
    1d78:	ce f3       	brts	.-14     	; 0x1d6c <pow+0x9c>
    1d7a:	9f 57       	subi	r25, 0x7F	; 127
    1d7c:	55 0b       	sbc	r21, r21
    1d7e:	87 ff       	sbrs	r24, 7
    1d80:	74 d0       	rcall	.+232    	; 0x1e6a <__fp_norm2>
    1d82:	00 24       	eor	r0, r0
    1d84:	a0 e6       	ldi	r26, 0x60	; 96
    1d86:	40 ea       	ldi	r20, 0xA0	; 160
    1d88:	90 01       	movw	r18, r0
    1d8a:	80 58       	subi	r24, 0x80	; 128
    1d8c:	56 95       	lsr	r21
    1d8e:	97 95       	ror	r25
    1d90:	28 f4       	brcc	.+10     	; 0x1d9c <sqrt+0x2c>
    1d92:	80 5c       	subi	r24, 0xC0	; 192
    1d94:	66 0f       	add	r22, r22
    1d96:	77 1f       	adc	r23, r23
    1d98:	88 1f       	adc	r24, r24
    1d9a:	20 f0       	brcs	.+8      	; 0x1da4 <sqrt+0x34>
    1d9c:	26 17       	cp	r18, r22
    1d9e:	37 07       	cpc	r19, r23
    1da0:	48 07       	cpc	r20, r24
    1da2:	30 f4       	brcc	.+12     	; 0x1db0 <sqrt+0x40>
    1da4:	62 1b       	sub	r22, r18
    1da6:	73 0b       	sbc	r23, r19
    1da8:	84 0b       	sbc	r24, r20
    1daa:	20 29       	or	r18, r0
    1dac:	31 29       	or	r19, r1
    1dae:	4a 2b       	or	r20, r26
    1db0:	a6 95       	lsr	r26
    1db2:	17 94       	ror	r1
    1db4:	07 94       	ror	r0
    1db6:	20 25       	eor	r18, r0
    1db8:	31 25       	eor	r19, r1
    1dba:	4a 27       	eor	r20, r26
    1dbc:	58 f7       	brcc	.-42     	; 0x1d94 <sqrt+0x24>
    1dbe:	66 0f       	add	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	20 f0       	brcs	.+8      	; 0x1dce <sqrt+0x5e>
    1dc6:	26 17       	cp	r18, r22
    1dc8:	37 07       	cpc	r19, r23
    1dca:	48 07       	cpc	r20, r24
    1dcc:	30 f4       	brcc	.+12     	; 0x1dda <sqrt+0x6a>
    1dce:	62 0b       	sbc	r22, r18
    1dd0:	73 0b       	sbc	r23, r19
    1dd2:	84 0b       	sbc	r24, r20
    1dd4:	20 0d       	add	r18, r0
    1dd6:	31 1d       	adc	r19, r1
    1dd8:	41 1d       	adc	r20, r1
    1dda:	a0 95       	com	r26
    1ddc:	81 f7       	brne	.-32     	; 0x1dbe <sqrt+0x4e>
    1dde:	b9 01       	movw	r22, r18
    1de0:	84 2f       	mov	r24, r20
    1de2:	91 58       	subi	r25, 0x81	; 129
    1de4:	88 0f       	add	r24, r24
    1de6:	96 95       	lsr	r25
    1de8:	87 95       	ror	r24
    1dea:	08 95       	ret
    1dec:	19 f4       	brne	.+6      	; 0x1df4 <sqrt+0x84>
    1dee:	0e f0       	brts	.+2      	; 0x1df2 <sqrt+0x82>
    1df0:	bb ce       	rjmp	.-650    	; 0x1b68 <__fp_inf>
    1df2:	04 cf       	rjmp	.-504    	; 0x1bfc <__fp_zero>
    1df4:	bf ce       	rjmp	.-642    	; 0x1b74 <__fp_nan>

00001df6 <exp>:
    1df6:	e8 de       	rcall	.-560    	; 0x1bc8 <__fp_splitA>
    1df8:	c8 f3       	brcs	.-14     	; 0x1dec <sqrt+0x7c>
    1dfa:	96 38       	cpi	r25, 0x86	; 134
    1dfc:	c0 f7       	brcc	.-16     	; 0x1dee <sqrt+0x7e>
    1dfe:	07 f8       	bld	r0, 7
    1e00:	0f 92       	push	r0
    1e02:	e8 94       	clt
    1e04:	2b e3       	ldi	r18, 0x3B	; 59
    1e06:	3a ea       	ldi	r19, 0xAA	; 170
    1e08:	48 eb       	ldi	r20, 0xB8	; 184
    1e0a:	5f e7       	ldi	r21, 0x7F	; 127
    1e0c:	0c df       	rcall	.-488    	; 0x1c26 <__mulsf3_pse>
    1e0e:	0f 92       	push	r0
    1e10:	0f 92       	push	r0
    1e12:	0f 92       	push	r0
    1e14:	4d b7       	in	r20, 0x3d	; 61
    1e16:	5e b7       	in	r21, 0x3e	; 62
    1e18:	0f 92       	push	r0
    1e1a:	d5 d0       	rcall	.+426    	; 0x1fc6 <modf>
    1e1c:	e8 e1       	ldi	r30, 0x18	; 24
    1e1e:	f1 e0       	ldi	r31, 0x01	; 1
    1e20:	2b d0       	rcall	.+86     	; 0x1e78 <__fp_powser>
    1e22:	4f 91       	pop	r20
    1e24:	5f 91       	pop	r21
    1e26:	ef 91       	pop	r30
    1e28:	ff 91       	pop	r31
    1e2a:	e5 95       	asr	r30
    1e2c:	ee 1f       	adc	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	49 f0       	breq	.+18     	; 0x1e44 <exp+0x4e>
    1e32:	fe 57       	subi	r31, 0x7E	; 126
    1e34:	e0 68       	ori	r30, 0x80	; 128
    1e36:	44 27       	eor	r20, r20
    1e38:	ee 0f       	add	r30, r30
    1e3a:	44 1f       	adc	r20, r20
    1e3c:	fa 95       	dec	r31
    1e3e:	e1 f7       	brne	.-8      	; 0x1e38 <exp+0x42>
    1e40:	41 95       	neg	r20
    1e42:	55 0b       	sbc	r21, r21
    1e44:	47 d0       	rcall	.+142    	; 0x1ed4 <ldexp>
    1e46:	0f 90       	pop	r0
    1e48:	07 fe       	sbrs	r0, 7
    1e4a:	3b c0       	rjmp	.+118    	; 0x1ec2 <inverse>
    1e4c:	08 95       	ret

00001e4e <__fp_mpack>:
    1e4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e50:	31 f0       	breq	.+12     	; 0x1e5e <__fp_mpack_finite+0xc>

00001e52 <__fp_mpack_finite>:
    1e52:	91 50       	subi	r25, 0x01	; 1
    1e54:	20 f4       	brcc	.+8      	; 0x1e5e <__fp_mpack_finite+0xc>
    1e56:	87 95       	ror	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b7 95       	ror	r27
    1e5e:	88 0f       	add	r24, r24
    1e60:	91 1d       	adc	r25, r1
    1e62:	96 95       	lsr	r25
    1e64:	87 95       	ror	r24
    1e66:	97 f9       	bld	r25, 7
    1e68:	08 95       	ret

00001e6a <__fp_norm2>:
    1e6a:	91 50       	subi	r25, 0x01	; 1
    1e6c:	50 40       	sbci	r21, 0x00	; 0
    1e6e:	66 0f       	add	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	88 1f       	adc	r24, r24
    1e74:	d2 f7       	brpl	.-12     	; 0x1e6a <__fp_norm2>
    1e76:	08 95       	ret

00001e78 <__fp_powser>:
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	1f 93       	push	r17
    1e7e:	0f 93       	push	r16
    1e80:	ff 92       	push	r15
    1e82:	ef 92       	push	r14
    1e84:	df 92       	push	r13
    1e86:	7b 01       	movw	r14, r22
    1e88:	8c 01       	movw	r16, r24
    1e8a:	68 94       	set
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <__fp_powser+0x20>
    1e8e:	da 2e       	mov	r13, r26
    1e90:	ef 01       	movw	r28, r30
    1e92:	c7 de       	rcall	.-626    	; 0x1c22 <__mulsf3x>
    1e94:	fe 01       	movw	r30, r28
    1e96:	e8 94       	clt
    1e98:	a5 91       	lpm	r26, Z+
    1e9a:	25 91       	lpm	r18, Z+
    1e9c:	35 91       	lpm	r19, Z+
    1e9e:	45 91       	lpm	r20, Z+
    1ea0:	55 91       	lpm	r21, Z+
    1ea2:	ae f3       	brts	.-22     	; 0x1e8e <__fp_powser+0x16>
    1ea4:	ef 01       	movw	r28, r30
    1ea6:	39 dd       	rcall	.-1422   	; 0x191a <__addsf3x>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	97 01       	movw	r18, r14
    1eac:	a8 01       	movw	r20, r16
    1eae:	da 94       	dec	r13
    1eb0:	79 f7       	brne	.-34     	; 0x1e90 <__fp_powser+0x18>
    1eb2:	df 90       	pop	r13
    1eb4:	ef 90       	pop	r14
    1eb6:	ff 90       	pop	r15
    1eb8:	0f 91       	pop	r16
    1eba:	1f 91       	pop	r17
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <inverse>:
    1ec2:	9b 01       	movw	r18, r22
    1ec4:	ac 01       	movw	r20, r24
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	80 e8       	ldi	r24, 0x80	; 128
    1ecc:	9f e3       	ldi	r25, 0x3F	; 63
    1ece:	ae c0       	rjmp	.+348    	; 0x202c <__divsf3>
    1ed0:	4b ce       	rjmp	.-874    	; 0x1b68 <__fp_inf>
    1ed2:	bd cf       	rjmp	.-134    	; 0x1e4e <__fp_mpack>

00001ed4 <ldexp>:
    1ed4:	79 de       	rcall	.-782    	; 0x1bc8 <__fp_splitA>
    1ed6:	e8 f3       	brcs	.-6      	; 0x1ed2 <inverse+0x10>
    1ed8:	99 23       	and	r25, r25
    1eda:	d9 f3       	breq	.-10     	; 0x1ed2 <inverse+0x10>
    1edc:	94 0f       	add	r25, r20
    1ede:	51 1d       	adc	r21, r1
    1ee0:	bb f3       	brvs	.-18     	; 0x1ed0 <inverse+0xe>
    1ee2:	91 50       	subi	r25, 0x01	; 1
    1ee4:	50 40       	sbci	r21, 0x00	; 0
    1ee6:	94 f0       	brlt	.+36     	; 0x1f0c <ldexp+0x38>
    1ee8:	59 f0       	breq	.+22     	; 0x1f00 <ldexp+0x2c>
    1eea:	88 23       	and	r24, r24
    1eec:	32 f0       	brmi	.+12     	; 0x1efa <ldexp+0x26>
    1eee:	66 0f       	add	r22, r22
    1ef0:	77 1f       	adc	r23, r23
    1ef2:	88 1f       	adc	r24, r24
    1ef4:	91 50       	subi	r25, 0x01	; 1
    1ef6:	50 40       	sbci	r21, 0x00	; 0
    1ef8:	c1 f7       	brne	.-16     	; 0x1eea <ldexp+0x16>
    1efa:	9e 3f       	cpi	r25, 0xFE	; 254
    1efc:	51 05       	cpc	r21, r1
    1efe:	44 f7       	brge	.-48     	; 0x1ed0 <inverse+0xe>
    1f00:	88 0f       	add	r24, r24
    1f02:	91 1d       	adc	r25, r1
    1f04:	96 95       	lsr	r25
    1f06:	87 95       	ror	r24
    1f08:	97 f9       	bld	r25, 7
    1f0a:	08 95       	ret
    1f0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0e:	ac f0       	brlt	.+42     	; 0x1f3a <ldexp+0x66>
    1f10:	98 3e       	cpi	r25, 0xE8	; 232
    1f12:	9c f0       	brlt	.+38     	; 0x1f3a <ldexp+0x66>
    1f14:	bb 27       	eor	r27, r27
    1f16:	86 95       	lsr	r24
    1f18:	77 95       	ror	r23
    1f1a:	67 95       	ror	r22
    1f1c:	b7 95       	ror	r27
    1f1e:	08 f4       	brcc	.+2      	; 0x1f22 <ldexp+0x4e>
    1f20:	b1 60       	ori	r27, 0x01	; 1
    1f22:	93 95       	inc	r25
    1f24:	c1 f7       	brne	.-16     	; 0x1f16 <ldexp+0x42>
    1f26:	bb 0f       	add	r27, r27
    1f28:	58 f7       	brcc	.-42     	; 0x1f00 <ldexp+0x2c>
    1f2a:	11 f4       	brne	.+4      	; 0x1f30 <ldexp+0x5c>
    1f2c:	60 ff       	sbrs	r22, 0
    1f2e:	e8 cf       	rjmp	.-48     	; 0x1f00 <ldexp+0x2c>
    1f30:	6f 5f       	subi	r22, 0xFF	; 255
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	8f 4f       	sbci	r24, 0xFF	; 255
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	e3 cf       	rjmp	.-58     	; 0x1f00 <ldexp+0x2c>
    1f3a:	61 ce       	rjmp	.-830    	; 0x1bfe <__fp_szero>
    1f3c:	0e f0       	brts	.+2      	; 0x1f40 <ldexp+0x6c>
    1f3e:	87 cf       	rjmp	.-242    	; 0x1e4e <__fp_mpack>
    1f40:	19 ce       	rjmp	.-974    	; 0x1b74 <__fp_nan>
    1f42:	68 94       	set
    1f44:	11 ce       	rjmp	.-990    	; 0x1b68 <__fp_inf>

00001f46 <log>:
    1f46:	40 de       	rcall	.-896    	; 0x1bc8 <__fp_splitA>
    1f48:	c8 f3       	brcs	.-14     	; 0x1f3c <ldexp+0x68>
    1f4a:	99 23       	and	r25, r25
    1f4c:	d1 f3       	breq	.-12     	; 0x1f42 <ldexp+0x6e>
    1f4e:	c6 f3       	brts	.-16     	; 0x1f40 <ldexp+0x6c>
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	1f 93       	push	r17
    1f56:	0f 93       	push	r16
    1f58:	ff 92       	push	r15
    1f5a:	c9 2f       	mov	r28, r25
    1f5c:	dd 27       	eor	r29, r29
    1f5e:	88 23       	and	r24, r24
    1f60:	2a f0       	brmi	.+10     	; 0x1f6c <log+0x26>
    1f62:	21 97       	sbiw	r28, 0x01	; 1
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	da f7       	brpl	.-10     	; 0x1f62 <log+0x1c>
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f eb       	ldi	r21, 0xBF	; 191
    1f74:	9f e3       	ldi	r25, 0x3F	; 63
    1f76:	88 39       	cpi	r24, 0x98	; 152
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <log+0x3c>
    1f7a:	80 3e       	cpi	r24, 0xE0	; 224
    1f7c:	30 f0       	brcs	.+12     	; 0x1f8a <log+0x44>
    1f7e:	21 96       	adiw	r28, 0x01	; 1
    1f80:	8f 77       	andi	r24, 0x7F	; 127
    1f82:	ba dc       	rcall	.-1676   	; 0x18f8 <__addsf3>
    1f84:	e0 e4       	ldi	r30, 0x40	; 64
    1f86:	f1 e0       	ldi	r31, 0x01	; 1
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <log+0x4a>
    1f8a:	b6 dc       	rcall	.-1684   	; 0x18f8 <__addsf3>
    1f8c:	ed e6       	ldi	r30, 0x6D	; 109
    1f8e:	f1 e0       	ldi	r31, 0x01	; 1
    1f90:	73 df       	rcall	.-282    	; 0x1e78 <__fp_powser>
    1f92:	8b 01       	movw	r16, r22
    1f94:	be 01       	movw	r22, r28
    1f96:	ec 01       	movw	r28, r24
    1f98:	fb 2e       	mov	r15, r27
    1f9a:	6f 57       	subi	r22, 0x7F	; 127
    1f9c:	71 09       	sbc	r23, r1
    1f9e:	75 95       	asr	r23
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 0b       	sbc	r24, r24
    1fa4:	99 0b       	sbc	r25, r25
    1fa6:	43 dd       	rcall	.-1402   	; 0x1a2e <__floatsisf>
    1fa8:	28 e1       	ldi	r18, 0x18	; 24
    1faa:	32 e7       	ldi	r19, 0x72	; 114
    1fac:	41 e3       	ldi	r20, 0x31	; 49
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	38 de       	rcall	.-912    	; 0x1c22 <__mulsf3x>
    1fb2:	af 2d       	mov	r26, r15
    1fb4:	98 01       	movw	r18, r16
    1fb6:	ae 01       	movw	r20, r28
    1fb8:	ff 90       	pop	r15
    1fba:	0f 91       	pop	r16
    1fbc:	1f 91       	pop	r17
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	ab dc       	rcall	.-1706   	; 0x191a <__addsf3x>
    1fc4:	e8 cd       	rjmp	.-1072   	; 0x1b96 <__fp_round>

00001fc6 <modf>:
    1fc6:	fa 01       	movw	r30, r20
    1fc8:	dc 01       	movw	r26, r24
    1fca:	aa 0f       	add	r26, r26
    1fcc:	bb 1f       	adc	r27, r27
    1fce:	9b 01       	movw	r18, r22
    1fd0:	ac 01       	movw	r20, r24
    1fd2:	bf 57       	subi	r27, 0x7F	; 127
    1fd4:	28 f4       	brcc	.+10     	; 0x1fe0 <modf+0x1a>
    1fd6:	22 27       	eor	r18, r18
    1fd8:	33 27       	eor	r19, r19
    1fda:	44 27       	eor	r20, r20
    1fdc:	50 78       	andi	r21, 0x80	; 128
    1fde:	1f c0       	rjmp	.+62     	; 0x201e <modf+0x58>
    1fe0:	b7 51       	subi	r27, 0x17	; 23
    1fe2:	88 f4       	brcc	.+34     	; 0x2006 <modf+0x40>
    1fe4:	ab 2f       	mov	r26, r27
    1fe6:	00 24       	eor	r0, r0
    1fe8:	46 95       	lsr	r20
    1fea:	37 95       	ror	r19
    1fec:	27 95       	ror	r18
    1fee:	01 1c       	adc	r0, r1
    1ff0:	a3 95       	inc	r26
    1ff2:	d2 f3       	brmi	.-12     	; 0x1fe8 <modf+0x22>
    1ff4:	00 20       	and	r0, r0
    1ff6:	69 f0       	breq	.+26     	; 0x2012 <modf+0x4c>
    1ff8:	22 0f       	add	r18, r18
    1ffa:	33 1f       	adc	r19, r19
    1ffc:	44 1f       	adc	r20, r20
    1ffe:	b3 95       	inc	r27
    2000:	da f3       	brmi	.-10     	; 0x1ff8 <modf+0x32>
    2002:	0d d0       	rcall	.+26     	; 0x201e <modf+0x58>
    2004:	78 cc       	rjmp	.-1808   	; 0x18f6 <__subsf3>
    2006:	61 30       	cpi	r22, 0x01	; 1
    2008:	71 05       	cpc	r23, r1
    200a:	a0 e8       	ldi	r26, 0x80	; 128
    200c:	8a 07       	cpc	r24, r26
    200e:	b9 46       	sbci	r27, 0x69	; 105
    2010:	30 f4       	brcc	.+12     	; 0x201e <modf+0x58>
    2012:	9b 01       	movw	r18, r22
    2014:	ac 01       	movw	r20, r24
    2016:	66 27       	eor	r22, r22
    2018:	77 27       	eor	r23, r23
    201a:	88 27       	eor	r24, r24
    201c:	90 78       	andi	r25, 0x80	; 128
    201e:	30 96       	adiw	r30, 0x00	; 0
    2020:	21 f0       	breq	.+8      	; 0x202a <modf+0x64>
    2022:	20 83       	st	Z, r18
    2024:	31 83       	std	Z+1, r19	; 0x01
    2026:	42 83       	std	Z+2, r20	; 0x02
    2028:	53 83       	std	Z+3, r21	; 0x03
    202a:	08 95       	ret

0000202c <__divsf3>:
    202c:	0c d0       	rcall	.+24     	; 0x2046 <__divsf3x>
    202e:	b3 cd       	rjmp	.-1178   	; 0x1b96 <__fp_round>
    2030:	ab dd       	rcall	.-1194   	; 0x1b88 <__fp_pscB>
    2032:	40 f0       	brcs	.+16     	; 0x2044 <__divsf3+0x18>
    2034:	a2 dd       	rcall	.-1212   	; 0x1b7a <__fp_pscA>
    2036:	30 f0       	brcs	.+12     	; 0x2044 <__divsf3+0x18>
    2038:	21 f4       	brne	.+8      	; 0x2042 <__divsf3+0x16>
    203a:	5f 3f       	cpi	r21, 0xFF	; 255
    203c:	19 f0       	breq	.+6      	; 0x2044 <__divsf3+0x18>
    203e:	94 cd       	rjmp	.-1240   	; 0x1b68 <__fp_inf>
    2040:	51 11       	cpse	r21, r1
    2042:	dd cd       	rjmp	.-1094   	; 0x1bfe <__fp_szero>
    2044:	97 cd       	rjmp	.-1234   	; 0x1b74 <__fp_nan>

00002046 <__divsf3x>:
    2046:	b8 dd       	rcall	.-1168   	; 0x1bb8 <__fp_split3>
    2048:	98 f3       	brcs	.-26     	; 0x2030 <__divsf3+0x4>

0000204a <__divsf3_pse>:
    204a:	99 23       	and	r25, r25
    204c:	c9 f3       	breq	.-14     	; 0x2040 <__divsf3+0x14>
    204e:	55 23       	and	r21, r21
    2050:	b1 f3       	breq	.-20     	; 0x203e <__divsf3+0x12>
    2052:	95 1b       	sub	r25, r21
    2054:	55 0b       	sbc	r21, r21
    2056:	bb 27       	eor	r27, r27
    2058:	aa 27       	eor	r26, r26
    205a:	62 17       	cp	r22, r18
    205c:	73 07       	cpc	r23, r19
    205e:	84 07       	cpc	r24, r20
    2060:	38 f0       	brcs	.+14     	; 0x2070 <__divsf3_pse+0x26>
    2062:	9f 5f       	subi	r25, 0xFF	; 255
    2064:	5f 4f       	sbci	r21, 0xFF	; 255
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	44 1f       	adc	r20, r20
    206c:	aa 1f       	adc	r26, r26
    206e:	a9 f3       	breq	.-22     	; 0x205a <__divsf3_pse+0x10>
    2070:	33 d0       	rcall	.+102    	; 0x20d8 <__divsf3_pse+0x8e>
    2072:	0e 2e       	mov	r0, r30
    2074:	3a f0       	brmi	.+14     	; 0x2084 <__divsf3_pse+0x3a>
    2076:	e0 e8       	ldi	r30, 0x80	; 128
    2078:	30 d0       	rcall	.+96     	; 0x20da <__divsf3_pse+0x90>
    207a:	91 50       	subi	r25, 0x01	; 1
    207c:	50 40       	sbci	r21, 0x00	; 0
    207e:	e6 95       	lsr	r30
    2080:	00 1c       	adc	r0, r0
    2082:	ca f7       	brpl	.-14     	; 0x2076 <__divsf3_pse+0x2c>
    2084:	29 d0       	rcall	.+82     	; 0x20d8 <__divsf3_pse+0x8e>
    2086:	fe 2f       	mov	r31, r30
    2088:	27 d0       	rcall	.+78     	; 0x20d8 <__divsf3_pse+0x8e>
    208a:	66 0f       	add	r22, r22
    208c:	77 1f       	adc	r23, r23
    208e:	88 1f       	adc	r24, r24
    2090:	bb 1f       	adc	r27, r27
    2092:	26 17       	cp	r18, r22
    2094:	37 07       	cpc	r19, r23
    2096:	48 07       	cpc	r20, r24
    2098:	ab 07       	cpc	r26, r27
    209a:	b0 e8       	ldi	r27, 0x80	; 128
    209c:	09 f0       	breq	.+2      	; 0x20a0 <__divsf3_pse+0x56>
    209e:	bb 0b       	sbc	r27, r27
    20a0:	80 2d       	mov	r24, r0
    20a2:	bf 01       	movw	r22, r30
    20a4:	ff 27       	eor	r31, r31
    20a6:	93 58       	subi	r25, 0x83	; 131
    20a8:	5f 4f       	sbci	r21, 0xFF	; 255
    20aa:	2a f0       	brmi	.+10     	; 0x20b6 <__divsf3_pse+0x6c>
    20ac:	9e 3f       	cpi	r25, 0xFE	; 254
    20ae:	51 05       	cpc	r21, r1
    20b0:	68 f0       	brcs	.+26     	; 0x20cc <__divsf3_pse+0x82>
    20b2:	5a cd       	rjmp	.-1356   	; 0x1b68 <__fp_inf>
    20b4:	a4 cd       	rjmp	.-1208   	; 0x1bfe <__fp_szero>
    20b6:	5f 3f       	cpi	r21, 0xFF	; 255
    20b8:	ec f3       	brlt	.-6      	; 0x20b4 <__divsf3_pse+0x6a>
    20ba:	98 3e       	cpi	r25, 0xE8	; 232
    20bc:	dc f3       	brlt	.-10     	; 0x20b4 <__divsf3_pse+0x6a>
    20be:	86 95       	lsr	r24
    20c0:	77 95       	ror	r23
    20c2:	67 95       	ror	r22
    20c4:	b7 95       	ror	r27
    20c6:	f7 95       	ror	r31
    20c8:	9f 5f       	subi	r25, 0xFF	; 255
    20ca:	c9 f7       	brne	.-14     	; 0x20be <__divsf3_pse+0x74>
    20cc:	88 0f       	add	r24, r24
    20ce:	91 1d       	adc	r25, r1
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	97 f9       	bld	r25, 7
    20d6:	08 95       	ret
    20d8:	e1 e0       	ldi	r30, 0x01	; 1
    20da:	66 0f       	add	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	bb 1f       	adc	r27, r27
    20e2:	62 17       	cp	r22, r18
    20e4:	73 07       	cpc	r23, r19
    20e6:	84 07       	cpc	r24, r20
    20e8:	ba 07       	cpc	r27, r26
    20ea:	20 f0       	brcs	.+8      	; 0x20f4 <__divsf3_pse+0xaa>
    20ec:	62 1b       	sub	r22, r18
    20ee:	73 0b       	sbc	r23, r19
    20f0:	84 0b       	sbc	r24, r20
    20f2:	ba 0b       	sbc	r27, r26
    20f4:	ee 1f       	adc	r30, r30
    20f6:	88 f7       	brcc	.-30     	; 0x20da <__divsf3_pse+0x90>
    20f8:	e0 95       	com	r30
    20fa:	08 95       	ret

000020fc <__udivmodhi4>:
    20fc:	aa 1b       	sub	r26, r26
    20fe:	bb 1b       	sub	r27, r27
    2100:	51 e1       	ldi	r21, 0x11	; 17
    2102:	07 c0       	rjmp	.+14     	; 0x2112 <__udivmodhi4_ep>

00002104 <__udivmodhi4_loop>:
    2104:	aa 1f       	adc	r26, r26
    2106:	bb 1f       	adc	r27, r27
    2108:	a6 17       	cp	r26, r22
    210a:	b7 07       	cpc	r27, r23
    210c:	10 f0       	brcs	.+4      	; 0x2112 <__udivmodhi4_ep>
    210e:	a6 1b       	sub	r26, r22
    2110:	b7 0b       	sbc	r27, r23

00002112 <__udivmodhi4_ep>:
    2112:	88 1f       	adc	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	5a 95       	dec	r21
    2118:	a9 f7       	brne	.-22     	; 0x2104 <__udivmodhi4_loop>
    211a:	80 95       	com	r24
    211c:	90 95       	com	r25
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	08 95       	ret

00002124 <__udivmodsi4>:
    2124:	a1 e2       	ldi	r26, 0x21	; 33
    2126:	1a 2e       	mov	r1, r26
    2128:	aa 1b       	sub	r26, r26
    212a:	bb 1b       	sub	r27, r27
    212c:	fd 01       	movw	r30, r26
    212e:	0d c0       	rjmp	.+26     	; 0x214a <__udivmodsi4_ep>

00002130 <__udivmodsi4_loop>:
    2130:	aa 1f       	adc	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	ee 1f       	adc	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	a2 17       	cp	r26, r18
    213a:	b3 07       	cpc	r27, r19
    213c:	e4 07       	cpc	r30, r20
    213e:	f5 07       	cpc	r31, r21
    2140:	20 f0       	brcs	.+8      	; 0x214a <__udivmodsi4_ep>
    2142:	a2 1b       	sub	r26, r18
    2144:	b3 0b       	sbc	r27, r19
    2146:	e4 0b       	sbc	r30, r20
    2148:	f5 0b       	sbc	r31, r21

0000214a <__udivmodsi4_ep>:
    214a:	66 1f       	adc	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	88 1f       	adc	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	1a 94       	dec	r1
    2154:	69 f7       	brne	.-38     	; 0x2130 <__udivmodsi4_loop>
    2156:	60 95       	com	r22
    2158:	70 95       	com	r23
    215a:	80 95       	com	r24
    215c:	90 95       	com	r25
    215e:	9b 01       	movw	r18, r22
    2160:	ac 01       	movw	r20, r24
    2162:	bd 01       	movw	r22, r26
    2164:	cf 01       	movw	r24, r30
    2166:	08 95       	ret

00002168 <__tablejump2__>:
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	88 1f       	adc	r24, r24
    216e:	8b bf       	out	0x3b, r24	; 59
    2170:	07 90       	elpm	r0, Z+
    2172:	f6 91       	elpm	r31, Z
    2174:	e0 2d       	mov	r30, r0
    2176:	19 94       	eijmp

00002178 <__muluhisi3>:
    2178:	d1 d0       	rcall	.+418    	; 0x231c <__umulhisi3>
    217a:	a5 9f       	mul	r26, r21
    217c:	90 0d       	add	r25, r0
    217e:	b4 9f       	mul	r27, r20
    2180:	90 0d       	add	r25, r0
    2182:	a4 9f       	mul	r26, r20
    2184:	80 0d       	add	r24, r0
    2186:	91 1d       	adc	r25, r1
    2188:	11 24       	eor	r1, r1
    218a:	08 95       	ret

0000218c <__umoddi3>:
    218c:	68 94       	set
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <__udivdi3_umoddi3>

00002190 <__udivdi3>:
    2190:	e8 94       	clt

00002192 <__udivdi3_umoddi3>:
    2192:	8f 92       	push	r8
    2194:	9f 92       	push	r9
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	05 d0       	rcall	.+10     	; 0x21a6 <__udivmod64>
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	9f 90       	pop	r9
    21a2:	8f 90       	pop	r8
    21a4:	08 95       	ret

000021a6 <__udivmod64>:
    21a6:	88 24       	eor	r8, r8
    21a8:	99 24       	eor	r9, r9
    21aa:	f4 01       	movw	r30, r8
    21ac:	e4 01       	movw	r28, r8
    21ae:	b0 e4       	ldi	r27, 0x40	; 64
    21b0:	9f 93       	push	r25
    21b2:	aa 27       	eor	r26, r26
    21b4:	9a 15       	cp	r25, r10
    21b6:	8b 04       	cpc	r8, r11
    21b8:	9c 04       	cpc	r9, r12
    21ba:	ed 05       	cpc	r30, r13
    21bc:	fe 05       	cpc	r31, r14
    21be:	cf 05       	cpc	r28, r15
    21c0:	d0 07       	cpc	r29, r16
    21c2:	a1 07       	cpc	r26, r17
    21c4:	98 f4       	brcc	.+38     	; 0x21ec <__udivmod64+0x46>
    21c6:	ad 2f       	mov	r26, r29
    21c8:	dc 2f       	mov	r29, r28
    21ca:	cf 2f       	mov	r28, r31
    21cc:	fe 2f       	mov	r31, r30
    21ce:	e9 2d       	mov	r30, r9
    21d0:	98 2c       	mov	r9, r8
    21d2:	89 2e       	mov	r8, r25
    21d4:	98 2f       	mov	r25, r24
    21d6:	87 2f       	mov	r24, r23
    21d8:	76 2f       	mov	r23, r22
    21da:	65 2f       	mov	r22, r21
    21dc:	54 2f       	mov	r21, r20
    21de:	43 2f       	mov	r20, r19
    21e0:	32 2f       	mov	r19, r18
    21e2:	22 27       	eor	r18, r18
    21e4:	b8 50       	subi	r27, 0x08	; 8
    21e6:	31 f7       	brne	.-52     	; 0x21b4 <__udivmod64+0xe>
    21e8:	bf 91       	pop	r27
    21ea:	27 c0       	rjmp	.+78     	; 0x223a <__stack+0x3b>
    21ec:	1b 2e       	mov	r1, r27
    21ee:	bf 91       	pop	r27
    21f0:	bb 27       	eor	r27, r27
    21f2:	22 0f       	add	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	44 1f       	adc	r20, r20
    21f8:	55 1f       	adc	r21, r21
    21fa:	66 1f       	adc	r22, r22
    21fc:	77 1f       	adc	r23, r23
    21fe:	88 1f       	adc	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	88 1c       	adc	r8, r8
    2204:	99 1c       	adc	r9, r9
    2206:	ee 1f       	adc	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	cc 1f       	adc	r28, r28
    220c:	dd 1f       	adc	r29, r29
    220e:	aa 1f       	adc	r26, r26
    2210:	bb 1f       	adc	r27, r27
    2212:	8a 14       	cp	r8, r10
    2214:	9b 04       	cpc	r9, r11
    2216:	ec 05       	cpc	r30, r12
    2218:	fd 05       	cpc	r31, r13
    221a:	ce 05       	cpc	r28, r14
    221c:	df 05       	cpc	r29, r15
    221e:	a0 07       	cpc	r26, r16
    2220:	b1 07       	cpc	r27, r17
    2222:	48 f0       	brcs	.+18     	; 0x2236 <__stack+0x37>
    2224:	8a 18       	sub	r8, r10
    2226:	9b 08       	sbc	r9, r11
    2228:	ec 09       	sbc	r30, r12
    222a:	fd 09       	sbc	r31, r13
    222c:	ce 09       	sbc	r28, r14
    222e:	df 09       	sbc	r29, r15
    2230:	a0 0b       	sbc	r26, r16
    2232:	b1 0b       	sbc	r27, r17
    2234:	21 60       	ori	r18, 0x01	; 1
    2236:	1a 94       	dec	r1
    2238:	e1 f6       	brne	.-72     	; 0x21f2 <__udivmod64+0x4c>
    223a:	2e f4       	brtc	.+10     	; 0x2246 <__stack+0x47>
    223c:	94 01       	movw	r18, r8
    223e:	af 01       	movw	r20, r30
    2240:	be 01       	movw	r22, r28
    2242:	cd 01       	movw	r24, r26
    2244:	00 0c       	add	r0, r0
    2246:	08 95       	ret

00002248 <__ashldi3>:
    2248:	0f 93       	push	r16
    224a:	08 30       	cpi	r16, 0x08	; 8
    224c:	90 f0       	brcs	.+36     	; 0x2272 <__ashldi3+0x2a>
    224e:	98 2f       	mov	r25, r24
    2250:	87 2f       	mov	r24, r23
    2252:	76 2f       	mov	r23, r22
    2254:	65 2f       	mov	r22, r21
    2256:	54 2f       	mov	r21, r20
    2258:	43 2f       	mov	r20, r19
    225a:	32 2f       	mov	r19, r18
    225c:	22 27       	eor	r18, r18
    225e:	08 50       	subi	r16, 0x08	; 8
    2260:	f4 cf       	rjmp	.-24     	; 0x224a <__ashldi3+0x2>
    2262:	22 0f       	add	r18, r18
    2264:	33 1f       	adc	r19, r19
    2266:	44 1f       	adc	r20, r20
    2268:	55 1f       	adc	r21, r21
    226a:	66 1f       	adc	r22, r22
    226c:	77 1f       	adc	r23, r23
    226e:	88 1f       	adc	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	0a 95       	dec	r16
    2274:	b2 f7       	brpl	.-20     	; 0x2262 <__ashldi3+0x1a>
    2276:	0f 91       	pop	r16
    2278:	08 95       	ret

0000227a <__ashrdi3>:
    227a:	97 fb       	bst	r25, 7
    227c:	10 f8       	bld	r1, 0

0000227e <__lshrdi3>:
    227e:	16 94       	lsr	r1
    2280:	00 08       	sbc	r0, r0
    2282:	0f 93       	push	r16
    2284:	08 30       	cpi	r16, 0x08	; 8
    2286:	98 f0       	brcs	.+38     	; 0x22ae <__lshrdi3+0x30>
    2288:	08 50       	subi	r16, 0x08	; 8
    228a:	23 2f       	mov	r18, r19
    228c:	34 2f       	mov	r19, r20
    228e:	45 2f       	mov	r20, r21
    2290:	56 2f       	mov	r21, r22
    2292:	67 2f       	mov	r22, r23
    2294:	78 2f       	mov	r23, r24
    2296:	89 2f       	mov	r24, r25
    2298:	90 2d       	mov	r25, r0
    229a:	f4 cf       	rjmp	.-24     	; 0x2284 <__lshrdi3+0x6>
    229c:	05 94       	asr	r0
    229e:	97 95       	ror	r25
    22a0:	87 95       	ror	r24
    22a2:	77 95       	ror	r23
    22a4:	67 95       	ror	r22
    22a6:	57 95       	ror	r21
    22a8:	47 95       	ror	r20
    22aa:	37 95       	ror	r19
    22ac:	27 95       	ror	r18
    22ae:	0a 95       	dec	r16
    22b0:	aa f7       	brpl	.-22     	; 0x229c <__lshrdi3+0x1e>
    22b2:	0f 91       	pop	r16
    22b4:	08 95       	ret

000022b6 <__adddi3>:
    22b6:	2a 0d       	add	r18, r10
    22b8:	3b 1d       	adc	r19, r11
    22ba:	4c 1d       	adc	r20, r12
    22bc:	5d 1d       	adc	r21, r13
    22be:	6e 1d       	adc	r22, r14
    22c0:	7f 1d       	adc	r23, r15
    22c2:	80 1f       	adc	r24, r16
    22c4:	91 1f       	adc	r25, r17
    22c6:	08 95       	ret

000022c8 <__adddi3_s8>:
    22c8:	00 24       	eor	r0, r0
    22ca:	a7 fd       	sbrc	r26, 7
    22cc:	00 94       	com	r0
    22ce:	2a 0f       	add	r18, r26
    22d0:	30 1d       	adc	r19, r0
    22d2:	40 1d       	adc	r20, r0
    22d4:	50 1d       	adc	r21, r0
    22d6:	60 1d       	adc	r22, r0
    22d8:	70 1d       	adc	r23, r0
    22da:	80 1d       	adc	r24, r0
    22dc:	90 1d       	adc	r25, r0
    22de:	08 95       	ret

000022e0 <__subdi3>:
    22e0:	2a 19       	sub	r18, r10
    22e2:	3b 09       	sbc	r19, r11
    22e4:	4c 09       	sbc	r20, r12
    22e6:	5d 09       	sbc	r21, r13
    22e8:	6e 09       	sbc	r22, r14
    22ea:	7f 09       	sbc	r23, r15
    22ec:	80 0b       	sbc	r24, r16
    22ee:	91 0b       	sbc	r25, r17
    22f0:	08 95       	ret

000022f2 <__cmpdi2>:
    22f2:	2a 15       	cp	r18, r10
    22f4:	3b 05       	cpc	r19, r11
    22f6:	4c 05       	cpc	r20, r12
    22f8:	5d 05       	cpc	r21, r13
    22fa:	6e 05       	cpc	r22, r14
    22fc:	7f 05       	cpc	r23, r15
    22fe:	80 07       	cpc	r24, r16
    2300:	91 07       	cpc	r25, r17
    2302:	08 95       	ret

00002304 <__cmpdi2_s8>:
    2304:	00 24       	eor	r0, r0
    2306:	a7 fd       	sbrc	r26, 7
    2308:	00 94       	com	r0
    230a:	2a 17       	cp	r18, r26
    230c:	30 05       	cpc	r19, r0
    230e:	40 05       	cpc	r20, r0
    2310:	50 05       	cpc	r21, r0
    2312:	60 05       	cpc	r22, r0
    2314:	70 05       	cpc	r23, r0
    2316:	80 05       	cpc	r24, r0
    2318:	90 05       	cpc	r25, r0
    231a:	08 95       	ret

0000231c <__umulhisi3>:
    231c:	a2 9f       	mul	r26, r18
    231e:	b0 01       	movw	r22, r0
    2320:	b3 9f       	mul	r27, r19
    2322:	c0 01       	movw	r24, r0
    2324:	a3 9f       	mul	r26, r19
    2326:	70 0d       	add	r23, r0
    2328:	81 1d       	adc	r24, r1
    232a:	11 24       	eor	r1, r1
    232c:	91 1d       	adc	r25, r1
    232e:	b2 9f       	mul	r27, r18
    2330:	70 0d       	add	r23, r0
    2332:	81 1d       	adc	r24, r1
    2334:	11 24       	eor	r1, r1
    2336:	91 1d       	adc	r25, r1
    2338:	08 95       	ret

0000233a <__itoa_ncheck>:
    233a:	bb 27       	eor	r27, r27
    233c:	4a 30       	cpi	r20, 0x0A	; 10
    233e:	31 f4       	brne	.+12     	; 0x234c <__itoa_ncheck+0x12>
    2340:	99 23       	and	r25, r25
    2342:	22 f4       	brpl	.+8      	; 0x234c <__itoa_ncheck+0x12>
    2344:	bd e2       	ldi	r27, 0x2D	; 45
    2346:	90 95       	com	r25
    2348:	81 95       	neg	r24
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <__utoa_common>

0000234e <__utoa_ncheck>:
    234e:	bb 27       	eor	r27, r27

00002350 <__utoa_common>:
    2350:	fb 01       	movw	r30, r22
    2352:	55 27       	eor	r21, r21
    2354:	aa 27       	eor	r26, r26
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	a4 17       	cp	r26, r20
    235e:	10 f0       	brcs	.+4      	; 0x2364 <__utoa_common+0x14>
    2360:	a4 1b       	sub	r26, r20
    2362:	83 95       	inc	r24
    2364:	50 51       	subi	r21, 0x10	; 16
    2366:	b9 f7       	brne	.-18     	; 0x2356 <__utoa_common+0x6>
    2368:	a0 5d       	subi	r26, 0xD0	; 208
    236a:	aa 33       	cpi	r26, 0x3A	; 58
    236c:	08 f0       	brcs	.+2      	; 0x2370 <__utoa_common+0x20>
    236e:	a9 5d       	subi	r26, 0xD9	; 217
    2370:	a1 93       	st	Z+, r26
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	79 f7       	brne	.-34     	; 0x2354 <__utoa_common+0x4>
    2376:	b1 11       	cpse	r27, r1
    2378:	b1 93       	st	Z+, r27
    237a:	11 92       	st	Z+, r1
    237c:	cb 01       	movw	r24, r22
    237e:	00 c0       	rjmp	.+0      	; 0x2380 <strrev>

00002380 <strrev>:
    2380:	dc 01       	movw	r26, r24
    2382:	fc 01       	movw	r30, r24
    2384:	67 2f       	mov	r22, r23
    2386:	71 91       	ld	r23, Z+
    2388:	77 23       	and	r23, r23
    238a:	e1 f7       	brne	.-8      	; 0x2384 <strrev+0x4>
    238c:	32 97       	sbiw	r30, 0x02	; 2
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <strrev+0x18>
    2390:	7c 91       	ld	r23, X
    2392:	6d 93       	st	X+, r22
    2394:	70 83       	st	Z, r23
    2396:	62 91       	ld	r22, -Z
    2398:	ae 17       	cp	r26, r30
    239a:	bf 07       	cpc	r27, r31
    239c:	c8 f3       	brcs	.-14     	; 0x2390 <strrev+0x10>
    239e:	08 95       	ret

000023a0 <_exit>:
    23a0:	f8 94       	cli

000023a2 <__stop_program>:
    23a2:	ff cf       	rjmp	.-2      	; 0x23a2 <__stop_program>
>>>>>>> Stashed changes
